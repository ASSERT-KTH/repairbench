diff --git a/tmp/b567f9b6-486f-42f0-8266-7796413e0693_buggy.java b/tmp/24cec661-9ab6-4b81-9d6a-63e5ade726e0_fixed.java
index bada2b6..b46231b 100644
--- a/tmp/b567f9b6-486f-42f0-8266-7796413e0693_buggy.java
+++ b/tmp/24cec661-9ab6-4b81-9d6a-63e5ade726e0_fixed.java
@@ -1,16 +1,33 @@
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
      * 
      * @param field
      * @return
      */
     public Class getGenericType(Field field) {        
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+            
+            // The original code was casting 'actual' directly to Class, which would fail if 'actual' was itself a ParameterizedType.
+            // This happens for nested generics, e.g., for `List<Set<String>>`, 'actual' would be `Set<String>`.
+            // To fix the ClassCastException, we need to handle 'actual' being a ParameterizedType.
+            if (actual instanceof Class) {
+                // If 'actual' is a direct Class (e.g., String in List<String>), return it.
                 return (Class) actual;
-                //in case of nested generics we don't go deep
+            } else if (actual instanceof ParameterizedType) {
+                // If 'actual' is another ParameterizedType (e.g., Set<String> in List<Set<String>>),
+                // return its raw type (e.g., Set.class).
+                // This aligns with the comment "//in case of nested generics we don't go deep"
+                // by returning the raw type of the immediate generic parameter if it's parametrized.
+                return (Class) ((ParameterizedType) actual).getRawType();
+            }
+            // For other types like TypeVariable, WildcardType etc., the original code would have implicitly
+            // failed with a ClassCastException or by letting the function return Object.class from the end.
+            // Returning Object.class here serves as a fallback for such complex or unresolvable types,
+            // maintaining a consistent behavior if a concrete Class cannot be found.
         }
         
+        // If the field is not generic (generic is null or not ParameterizedType), or if 'actual' is not Class/ParameterizedType.
         return Object.class;
     }
\ No newline at end of file
