diff --git a/tmp/ab03da6c-01c1-42bc-be55-1a2f340be738_buggy.java b/tmp/b3871dc5-71f3-4e4f-8f8f-7f8024874a6d_fixed.java
index bada2b6..a12ff81 100644
--- a/tmp/ab03da6c-01c1-42bc-be55-1a2f340be738_buggy.java
+++ b/tmp/b3871dc5-71f3-4e4f-8f8f-7f8024874a6d_fixed.java
@@ -1,16 +1,23 @@
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
      * 
      * @param field
      * @return
      */
     public Class getGenericType(Field field) {        
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+            if (actual instanceof Class) {
                 return (Class) actual;
-                //in case of nested generics we don't go deep
+            } else if (actual instanceof ParameterizedType) {
+                // In case of nested generics (e.g., List<Set<String>>),
+                // the 'actual' type is itself a ParameterizedType (e.g., Set<String>).
+                // The requirement is "we don't go deep", which implies returning the raw type
+                // of this nested generic (e.g., Set.class) rather than the deepest type (String.class).
+                return (Class) ((ParameterizedType) actual).getRawType();
+            }
         }
         
         return Object.class;
     }
\ No newline at end of file
