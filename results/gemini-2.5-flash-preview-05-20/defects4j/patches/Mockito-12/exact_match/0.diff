diff --git a/tmp/2042923a-3afc-448e-a465-7b26f0d2f8df_buggy.java b/tmp/5c2cf644-9486-4b43-b46d-d25ae571d7a3_fixed.java
index bada2b6..ee21ca2 100644
--- a/tmp/2042923a-3afc-448e-a465-7b26f0d2f8df_buggy.java
+++ b/tmp/5c2cf644-9486-4b43-b46d-d25ae571d7a3_fixed.java
@@ -1,16 +1,24 @@
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
      * 
      * @param field
      * @return
      */
     public Class getGenericType(Field field) {        
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+            if (actual instanceof Class) {
                 return (Class) actual;
-                //in case of nested generics we don't go deep
+            } else if (actual instanceof ParameterizedType) {
+                // If the actual type argument is itself a ParameterizedType (e.g., List<Set<String>>),
+                // we should extract its raw type (e.g., Set.class) as per the test expectations for nested generics.
+                return (Class) ((ParameterizedType) actual).getRawType();
+            }
+            // For other cases like TypeVariable, WildcardType, GenericArrayType,
+            // or if the actual type argument cannot be resolved to a Class directly,
+            // we fall through to return Object.class, consistent with the method's default behavior.
         }
         
         return Object.class;
     }
\ No newline at end of file
