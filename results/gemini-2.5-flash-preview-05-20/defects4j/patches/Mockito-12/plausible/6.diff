diff --git a/tmp/391cac48-a0b9-434d-849a-afdeabf66922_buggy.java b/tmp/3a63c862-bf43-4267-a6d7-a995bdd8e6b7_fixed.java
index bada2b6..3ee59a0 100644
--- a/tmp/391cac48-a0b9-434d-849a-afdeabf66922_buggy.java
+++ b/tmp/3a63c862-bf43-4267-a6d7-a995bdd8e6b7_fixed.java
@@ -1,16 +1,34 @@
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
      * 
      * @param field
      * @return
      */
     public Class getGenericType(Field field) {        
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
+            // Get the first actual type argument of the field's generic type
+            // For example, if field is List<String>, actual will be String.class
+            // If field is Map<Key, Value>, actual will be Key.class (as it takes the first argument [0])
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+            
+            if (actual instanceof Class) {
+                // If the actual type argument is a direct Class, return it
                 return (Class) actual;
-                //in case of nested generics we don't go deep
+            } else if (actual instanceof ParameterizedType) {
+                // If the actual type argument is itself a ParameterizedType (nested generic),
+                // e.g., List<Set<String>> where 'actual' is Set<String>.
+                // As per the comment "in case of nested generics we don't go deep",
+                // we should return the raw type of this nested generic (e.g., Set.class).
+                return (Class) ((ParameterizedType) actual).getRawType();
+            } else {
+                // Handle other Type implementations like TypeVariable or WildcardType.
+                // In such cases, we cannot determine a concrete Class, so return Object.class.
+                return Object.class;
+            }
         }
         
+        // If the field is not generic or not a ParameterizedType, or if the generic type is null,
+        // return Object.class as a default fallback.
         return Object.class;
     }
\ No newline at end of file
