diff --git a/tmp/75d852b5-1f7e-4432-9e70-366c300faab4_buggy.java b/tmp/6050218b-438d-4924-93ee-6830ff6c5544_fixed.java
index bada2b6..d9be098 100644
--- a/tmp/75d852b5-1f7e-4432-9e70-366c300faab4_buggy.java
+++ b/tmp/6050218b-438d-4924-93ee-6830ff6c5544_fixed.java
@@ -1,16 +1,35 @@
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
      * 
      * @param field
      * @return
      */
     public Class getGenericType(Field field) {        
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
+            // Get the first actual type argument of the parameterized type.
+            // For a field like 'List<String>', 'actual' will be 'String.class'.
+            // For a field like 'ArgumentCaptor<List<String>>', 'actual' will be 'List<String>' (which is itself a ParameterizedType).
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+            
+            if (actual instanceof Class) {
+                // If the actual type argument is already a Class (e.g., String for List<String>)
                 return (Class) actual;
-                //in case of nested generics we don't go deep
+            } else if (actual instanceof ParameterizedType) {
+                // If the actual type argument is itself a ParameterizedType (e.g., List<String> for ArgumentCaptor<List<String>>),
+                // we need to return its raw type (e.g., List.class).
+                // This handles cases like ArgumentCaptor<List<String>> -> List.class
+                // and Set<Set<String>> -> Set.class (for the 'multiNested' test case).
+                return (Class) ((ParameterizedType) actual).getRawType();
+            } else {
+                // Handle other Type implementations like TypeVariable, GenericArrayType if necessary.
+                // For now, consistent with the default fallback for unresolvable types.
+                return Object.class; 
+            }
         }
         
+        // If the field is not generic (e.g., a simple class like 'String field;')
+        // or if 'generic' is not a ParameterizedType (e.g., a raw type like 'List list;'),
+        // return Object.class as per the method's specification.
         return Object.class;
     }
\ No newline at end of file
