diff --git a/tmp/60d13cdf-071c-4edb-a918-e519d8e7dbef_buggy.java b/tmp/ec8f28ea-5920-4958-b097-6ab241151504_fixed.java
index bada2b6..0a2f360 100644
--- a/tmp/60d13cdf-071c-4edb-a918-e519d8e7dbef_buggy.java
+++ b/tmp/ec8f28ea-5920-4958-b097-6ab241151504_fixed.java
@@ -1,16 +1,48 @@
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
      * 
      * @param field
      * @return
      */
     public Class getGenericType(Field field) {        
         Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+        if (generic instanceof ParameterizedType) {
+            // This is a generic type, e.g., List<String>, Map<K, V>
+            // We assume the first actual type argument is the one we're interested in.
+            // This is common for types like List<E>, Set<E>, ArgumentCaptor<T>.
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+            
+            if (actual instanceof Class) {
+                // The generic type is a direct Class, e.g., List<String> -> String.class
                 return (Class) actual;
-                //in case of nested generics we don't go deep
+            } else if (actual instanceof ParameterizedType) {
+                // The generic type is itself a ParameterizedType (nested generic), 
+                // e.g., List<Set<String>>. 'actual' would be 'Set<String>'.
+                // We need its raw type, which is 'Set.class'.
+                // The comment "in case of nested generics we don't go deep" implies we stop here.
+                return (Class) ((ParameterizedType) actual).getRawType();
+            } else if (actual instanceof TypeVariable) {
+                // The generic type is a TypeVariable (e.g., T in List<T>).
+                // We return its upper bound, which defaults to Object.class if not specified.
+                Type[] bounds = ((TypeVariable) actual).getBounds();
+                if (bounds.length > 0 && bounds[0] instanceof Class) {
+                    return (Class) bounds[0];
+                }
+            } else if (actual instanceof WildcardType) {
+                // The generic type is a WildcardType (e.g., ? or ? extends Number in List<?> or List<? extends Number>).
+                // We return its upper bound, which defaults to Object.class.
+                Type[] upperBounds = ((WildcardType) actual).getUpperBounds();
+                if (upperBounds.length > 0 && upperBounds[0] instanceof Class) {
+                    return (Class) upperBounds[0];
+                }
+            }
+            // For any other unexpected Type or if bounds could not be resolved to a Class, fall through.
         }
         
+        // This handles cases where:
+        // 1. The field's type is not a ParameterizedType (i.e., it's a non-generic field like String or int).
+        // 2. 'generic' is null (though field.getGenericType() rarely returns null for real fields).
+        // 3. For ParameterizedType fields, if the actual type argument couldn't be resolved to a specific Class
+        //    through the above conditions (e.g., complex bounds, other Type implementations).
         return Object.class;
     }
