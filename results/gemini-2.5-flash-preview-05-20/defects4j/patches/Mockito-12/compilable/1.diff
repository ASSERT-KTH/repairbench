diff --git a/tmp/afb9c893-4267-4daf-aa4a-bd5873df157b_buggy.java b/tmp/6e953a25-4adf-4b1a-971e-1b132cf0b46e_fixed.java
index bada2b6..d95aab9 100644
--- a/tmp/afb9c893-4267-4daf-aa4a-bd5873df157b_buggy.java
+++ b/tmp/6e953a25-4adf-4b1a-971e-1b132cf0b46e_fixed.java
@@ -1,16 +1,29 @@
     /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+     * Finds the raw generic type (raw parameterized type) of the field.
+     * If the field is not generic (e.g., `String`) or is a raw type (e.g., `List`), it returns its class directly.
+     * If the field is a parameterized type (e.g., `List<String>`), it returns the raw type (e.g., `List.class`).
+     * For other complex generic types like TypeVariables or GenericArrayTypes, it falls back to Object.class.
      * 
-     * @param field
-     * @return
+     * @param field The field to inspect.
+     * @return The raw Class type of the field, or Object.class if it cannot be determined.
      */
     public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        Type genericType = field.getGenericType();
+
+        if (genericType instanceof ParameterizedType) {
+            // If the field is a parameterized type (e.g., List<String>, Map<K, V>)
+            // We want to return the raw class (e.g., List.class, Map.class)
+            Type rawType = ((ParameterizedType) genericType).getRawType();
+            if (rawType instanceof Class) {
+                return (Class) rawType;
+            }
+        } else if (genericType instanceof Class) {
+            // If the field is a non-generic type (e.g., String) or a raw type (e.g., List)
+            // It's already a Class, so return it directly.
+            return (Class) genericType;
         }
         
+        // For other types (e.g., TypeVariable, GenericArrayType) or if the above conditions
+        // did not yield a Class, return Object.class as a fallback.
         return Object.class;
     }
\ No newline at end of file
