diff --git a/tmp/aa3b9df3-b870-49b4-9571-61fc858a657c_buggy.java b/tmp/5bcf3ac7-5b14-4a43-a249-654cd91f14df_fixed.java
index a37dc7a..154d801 100644
--- a/tmp/aa3b9df3-b870-49b4-9571-61fc858a657c_buggy.java
+++ b/tmp/5bcf3ac7-5b14-4a43-a249-654cd91f14df_fixed.java
@@ -1,10 +1,57 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
+        
+        // The original method doesn't handle index == -1 (for append).
+        // If append functionality was intended via index -1, uncomment the following line:
+        // if (index == -1) index = childNodes.size();
+
         for (int i = children.length - 1; i >= 0; i--) {
             Node in = children[i];
-            reparentChild(in);
+            
+            // If the node is already a child of this element, we are performing a move operation.
+            if (in.parent() == this) {
+                // Get the current actual index of the node in the childNodes list.
+                // This is crucial because in.siblingIndex() might be stale if other
+                // children have been moved/inserted in previous loop iterations.
+                int oldIdx = childNodes.indexOf(in);
+                
+                // If the node was not found (e.g., already removed or an error), skip it.
+                if (oldIdx == -1) continue; 
+
+                // If the node's original position was before the new insertion index,
+                // the new index effectively becomes one less after its removal.
+                // This compensates for the list shifting when the node is removed.
+                if (oldIdx < index) { 
+                    index--; 
+                }
+                
+                // Remove the node from its current position in this element's childNodes list.
+                childNodes.remove(oldIdx);
+                // The node is now temporarily parent-less.
+                in.parent = null; 
+                
+                // Re-index remaining children from the old position onwards.
+                // This is necessary because `childNodes.remove` (for ArrayList) doesn't automatically update
+                // `siblingIndex` properties of affected Node objects.
+                reindexChildren(oldIdx); 
+
+            } else if (in.parent() != null) {
+                // The node has a different parent. Remove it from there.
+                // This method (Node.removeChild) typically handles unsetting parent
+                // and re-indexing children for the *other* parent.
+                in.parent().removeChild(in);
+            }
+            
+            // Add the node to this element's childNodes list at the calculated index.
             childNodes.add(index, in);
+            // Set the parent of the node to this element.
+            in.parent = this; 
+            // Set the sibling index for the node at its new position.
+            in.siblingIndex = index; 
         }
+        
+        // After all nodes have been added/moved, re-index all children from the
+        // insertion point onwards to ensure all sibling indices are correct.
         reindexChildren(index);
     }
