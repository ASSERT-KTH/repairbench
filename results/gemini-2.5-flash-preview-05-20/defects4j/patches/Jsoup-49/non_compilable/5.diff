diff --git a/tmp/01de84cb-2b95-4931-a66b-37b8ecfca416_buggy.java b/tmp/bb2b1cfd-aacc-49ed-a155-29b5822e42ed_fixed.java
index a37dc7a..2c6a9b2 100644
--- a/tmp/01de84cb-2b95-4931-a66b-37b8ecfca416_buggy.java
+++ b/tmp/bb2b1cfd-aacc-49ed-a155-29b5822e42ed_fixed.java
@@ -1,10 +1,26 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
-        for (int i = children.length - 1; i >= 0; i--) {
-            Node in = children[i];
-            reparentChild(in);
-            childNodes.add(index, in);
+
+        List<Node> newChildren = new ArrayList<>(children.length); // Temporary list to hold nodes to be inserted
+
+        // Phase 1: Reparent children (which also handles detaching them from their current parent, if any)
+        // If a child is already parented by 'this', this will remove it from 'this.childNodes'.
+        // Collect them into newChildren to preserve their relative order for later insertion.
+        for (Node in : children) {
+            reparentChild(in); // This call ensures parent is set to 'this' and removes from old parent's childNodes (if old parent is 'this', it removes from 'this.childNodes').
+            newChildren.add(in);
         }
+
+        // At this point, any children that were previously in 'this.childNodes' are now removed from it.
+        // The 'childNodes' list has shrunk, and 'newChildren' holds the nodes ready to be inserted.
+
+        // Phase 2: Add all processed children to 'this.childNodes' at the specified index.
+        // Iterate backwards over 'newChildren' to correctly insert them at the fixed 'index'.
+        for (int i = newChildren.size() - 1; i >= 0; i--) {
+            childNodes.add(index, newChildren.get(i));
+        }
+
+        // Reindex children from the insertion point to update sibling indices.
         reindexChildren(index);
     }
\ No newline at end of file
