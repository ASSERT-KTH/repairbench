diff --git a/tmp/71cbd60a-3e68-4961-b21e-3b5bce680122_buggy.java b/tmp/fa79f7a1-ef0b-47dd-a27b-3887f348d312_fixed.java
index a37dc7a..74928a8 100644
--- a/tmp/71cbd60a-3e68-4961-b21e-3b5bce680122_buggy.java
+++ b/tmp/fa79f7a1-ef0b-47dd-a27b-3887f348d312_fixed.java
@@ -1,10 +1,35 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
-        for (int i = children.length - 1; i >= 0; i--) {
-            Node in = children[i];
+
+        // Create a temporary list to hold the nodes to be processed.
+        // This is crucial for handling cases where nodes are moved within the same parent.
+        // If a node is already a child of 'this' element, it needs to be removed from its
+        // current position before being re-added at the new 'index'. Doing this in a
+        // separate pass prevents index shifting issues while iterating and adding.
+        ArrayList<Node> nodesToProcess = new ArrayList<>(children.length);
+        for (Node child : children) {
+            // If the child is already a child of 'this' element, remove it from its
+            // current position. This is the responsibility of `addChildren` because
+            // `reparentChild` (as of Jsoup 1.15.1) does not remove the child if its
+            // parent is already 'this'. `removeChild` also sets child.parent to null.
+            if (child.parent() == this) {
+                removeChild(child);
+            }
+            nodesToProcess.add(child);
+        }
+
+        // Now, all children that were originally part of 'this' have been detached
+        // from the `childNodes` list. We can safely add all nodes from `nodesToProcess`.
+        // Iterate in reverse order to ensure that `index` remains consistent for all insertions.
+        for (int i = nodesToProcess.size() - 1; i >= 0; i--) {
+            Node in = nodesToProcess.get(i);
+            // reparentChild will set the parent of 'in' to 'this'. If 'in' had a
+            // different parent, it would be removed from that parent. If it was
+            // just removed from 'this' above, its parent is null, and reparentChild
+            // simply sets its parent to 'this'.
             reparentChild(in);
             childNodes.add(index, in);
         }
         reindexChildren(index);
     }
\ No newline at end of file
