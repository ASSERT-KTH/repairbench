diff --git a/tmp/f77e69c8-afe1-4fd3-9685-6e5d4e1dfec9_buggy.java b/tmp/d27aa5c3-1c50-4365-bd51-7e03d511a056_fixed.java
index a37dc7a..b3df31d 100644
--- a/tmp/f77e69c8-afe1-4fd3-9685-6e5d4e1dfec9_buggy.java
+++ b/tmp/d27aa5c3-1c50-4365-bd51-7e03d511a056_fixed.java
@@ -1,10 +1,52 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
+
+        // 1. Identify nodes that are already children of this element and will be moved.
+        // These need to be removed from their current positions first.
+        // Use a Set for efficient lookup.
+        Set<Node> childrenBeingMoved = new java.util.HashSet<>(children.length);
+        for (Node child : children) {
+            if (child.parent == this) {
+                childrenBeingMoved.add(child);
+            }
+        }
+
+        // 2. Remove identified nodes from their current positions in this.childNodes.
+        // Iterate backward to avoid issues with shifting indices during removal.
+        for (int i = childNodes.size() - 1; i >= 0; i--) {
+            Node child = childNodes.get(i);
+            if (childrenBeingMoved.contains(child)) {
+                // Remove from the list. Crucially, do NOT call child.parent.removeChild(child) here,
+                // as that would set child.parent = null and child.siblingIndex = 0,
+                // which is not desired for a "move within same parent".
+                childNodes.remove(i);
+                // The Node's parent and siblingIndex are not affected by ArrayList.remove,
+                // which is good as they are still logically children of 'this'.
+            }
+        }
+
+        // 3. Add all children (both new ones and those previously removed for moving)
+        // at the target index. Iterate backward over the input 'children' array
+        // to maintain the correct insertion order at 'index'.
         for (int i = children.length - 1; i >= 0; i--) {
             Node in = children[i];
-            reparentChild(in);
+
+            // If the node has a different parent, remove it from that parent.
+            if (in.parent != null && in.parent != this) {
+                in.parent.removeChild(in);
+            }
+
+            // Set the parent of the node to this element.
+            // For nodes that were already children of 'this' and were removed in the first pass,
+            // their parent was never set to null, so this is safe and confirms the parent.
+            in.parent = this;
+
+            // Add the node at the specified index.
             childNodes.add(index, in);
         }
+
+        // 4. Re-index all children from the insertion point onwards.
+        // This ensures correct siblingIndex values after all insertions and removals.
         reindexChildren(index);
     }
\ No newline at end of file
