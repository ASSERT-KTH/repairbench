diff --git a/tmp/5dabd6f5-4efe-405b-aa50-46a69f80e882_buggy.java b/tmp/789cfda2-aa82-46e8-bd73-2cb3452df75e_fixed.java
index a37dc7a..6c6360c 100644
--- a/tmp/5dabd6f5-4efe-405b-aa50-46a69f80e882_buggy.java
+++ b/tmp/789cfda2-aa82-46e8-bd73-2cb3452df75e_fixed.java
@@ -1,10 +1,57 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
-        for (int i = children.length - 1; i >= 0; i--) {
-            Node in = children[i];
-            reparentChild(in);
-            childNodes.add(index, in);
+
+        // Create a snapshot of the original childNodes list.
+        // This is crucial for correctly identifying and positioning existing children
+        // after new/moved children are inserted, preventing issues from in-place modifications
+        // during the loop (e.g., from reparentChild calling removeChild).
+        final ArrayList<Node> originalChildNodes = new ArrayList<>(this.childNodes);
+        final int originalSize = originalChildNodes.size();
+
+        // Create a new ArrayList to build the updated list of child nodes.
+        ArrayList<Node> newChildNodes = new ArrayList<>();
+
+        // 1. Add children from the original list that come before the insertion index.
+        for (int i = 0; i < index; i++) {
+            newChildNodes.add(originalChildNodes.get(i));
         }
-        reindexChildren(index);
+
+        // 2. Add the new/moved children from the 'children' array.
+        for (Node child : children) {
+            // Before adding, remove the child from its current parent if it has one.
+            // This correctly detaches it from its previous position or parent.
+            if (child.parent() != null) {
+                child.parent().removeChild(child);
+            }
+            child.parent(this); // Set the new parent for the child.
+            newChildNodes.add(child);
+        }
+
+        // 3. Add children from the original list that come after the insertion index,
+        // ensuring not to re-add any children that were part of the 'children' array
+        // (as they have already been added in step 2).
+        for (int i = index; i < originalSize; i++) {
+            Node oldChild = originalChildNodes.get(i);
+            boolean isMoved = false;
+            // Check if this 'oldChild' is one of the nodes that were just added/moved.
+            for (Node newChild : children) {
+                if (oldChild == newChild) {
+                    isMoved = true;
+                    break;
+                }
+            }
+            // If the oldChild was not part of the 'children' array (i.e., not moved/re-added),
+            // then include it in the new list.
+            if (!isMoved) {
+                newChildNodes.add(oldChild);
+            }
+        }
+
+        // Replace the current childNodes list with the newly constructed list.
+        this.childNodes = newChildNodes;
+
+        // Finally, reindex all children in the updated list to ensure their siblingIndex
+        // fields are correct. This reindexing happens only once for the final list.
+        reindexChildren();
     }
\ No newline at end of file
