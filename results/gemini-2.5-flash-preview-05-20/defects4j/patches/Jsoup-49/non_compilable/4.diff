diff --git a/tmp/e0731b3a-3e91-4ef6-a628-8f9270745f7b_buggy.java b/tmp/e0afbc16-ec95-4f65-878c-b61ca534ee24_fixed.java
index a37dc7a..4a4475a 100644
--- a/tmp/e0731b3a-3e91-4ef6-a628-8f9270745f7b_buggy.java
+++ b/tmp/e0afbc16-ec95-4f65-878c-b61ca534ee24_fixed.java
@@ -1,10 +1,39 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
+
+        // Step 1: Identify nodes from the input 'children' array that are already
+        // children of *this* element. These nodes need to be removed from their
+        // current positions to prepare for re-insertion at the specified 'index'.
+        List<Node> existingChildrenInThisElement = new ArrayList<>(children.length);
+        for (Node child : children) {
+            if (child.parent() == this) {
+                existingChildrenInThisElement.add(child);
+            }
+        }
+
+        // Step 2: Remove the identified existing children from 'this.childNodes'.
+        // Using 'removeAll' ensures removal by object reference, avoiding issues
+        // with stale 'siblingIndex' values and ensuring correct list manipulation.
+        // After removal, set their parent to null so reparentChild treats them as new.
+        if (!existingChildrenInThisElement.isEmpty()) {
+            childNodes.removeAll(existingChildrenInThisElement);
+            for (Node child : existingChildrenInThisElement) {
+                child.setParentNode(null);
+                child.setSiblingIndex(-1); // Defensive reset
+            }
+        }
+
+        // Step 3: Add all children from the input 'children' array at the specified index.
+        // Iterate backwards to correctly maintain the insertion point.
         for (int i = children.length - 1; i >= 0; i--) {
             Node in = children[i];
-            reparentChild(in);
+            reparentChild(in); // Sets 'in.parent = this' and resets 'siblingIndex'.
+                               // Since 'in' might have its parent set to null in Step 2,
+                               // or might be from a different parent, this method will
+                               // correctly attach it to 'this' without attempting to remove
+                               // it from 'this.childNodes' if its parent is already null.
             childNodes.add(index, in);
         }
         reindexChildren(index);
     }
