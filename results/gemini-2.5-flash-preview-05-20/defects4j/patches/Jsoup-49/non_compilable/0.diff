diff --git a/tmp/3fcefed3-3f82-44a8-9bbb-6cf1b43415f5_buggy.java b/tmp/cd81267a-5660-4405-8c64-6328273d1a88_fixed.java
index a37dc7a..d1bdbe6 100644
--- a/tmp/3fcefed3-3f82-44a8-9bbb-6cf1b43415f5_buggy.java
+++ b/tmp/cd81267a-5660-4405-8c64-6328273d1a88_fixed.java
@@ -1,10 +1,48 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
+
+        // Separate children that are already in this element from those that are external or new.
+        // This is necessary because removing children that are already
+        // part of *this* element using `removeChild` (which relies on `siblingIndex`)
+        // can lead to incorrect removals if the `childNodes` list is being modified
+        // and `siblingIndex` becomes stale.
+        List<Node> childrenToMoveInternally = new ArrayList<>();
+
+        for (Node in : children) {
+            if (in.parent() != null && in.parent() != this) {
+                // If the child is from another parent, use reparentChild.
+                // This will remove it from its old parent and set its parent to 'this'.
+                // This is safe as the old parent's childNodes list is not being concurrently modified by this method.
+                reparentChild(in);
+            } else if (in.parent() == this) {
+                // If the child is already a child of 'this' element,
+                // mark it for internal movement. Its parent is already correct.
+                childrenToMoveInternally.add(in);
+            } else {
+                // If the child has no parent, simply set its parent to 'this'.
+                in.parent = this;
+            }
+        }
+
+        // Before adding the children, safely remove any children that are being moved
+        // *within* this element from their current positions.
+        // Use `remove(Object o)` from ArrayList, which iterates to find the object,
+        // thus avoiding issues with stale `siblingIndex` that `removeChild` might encounter
+        // when operating on the same list being modified.
+        for (Node child : childrenToMoveInternally) {
+            childNodes.remove(child);
+        }
+
+        // Now, add all children (both internally moved and externally sourced/new)
+        // at the specified index.
+        // Iterate backwards over the original 'children' array to ensure the correct
+        // order when inserting at a fixed index (e.g., add(0, B), then add(0, A) results in [A, B, ...]).
         for (int i = children.length - 1; i >= 0; i--) {
             Node in = children[i];
-            reparentChild(in);
             childNodes.add(index, in);
         }
+
+        // Finally, reindex all children from the insertion point onwards to update their siblingIndex.
         reindexChildren(index);
     }
\ No newline at end of file
