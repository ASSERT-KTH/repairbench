diff --git a/tmp/808e56cd-1343-4136-96ef-19fbbe42e148_buggy.java b/tmp/a15dcebb-1249-4084-ab39-ef0e3714ace2_fixed.java
index a37dc7a..188f021 100644
--- a/tmp/808e56cd-1343-4136-96ef-19fbbe42e148_buggy.java
+++ b/tmp/a15dcebb-1249-4084-ab39-ef0e3714ace2_fixed.java
@@ -1,10 +1,26 @@
     protected void addChildren(int index, Node... children) {
         Validate.noNullElements(children);
         ensureChildNodes();
         for (int i = children.length - 1; i >= 0; i--) {
             Node in = children[i];
+            // If the node is already a child of this element, remove it from its current position
+            // without relying on its potentially stale siblingIndex.
+            // This prevents issues where an outdated siblingIndex might cause removal of the wrong child.
+            if (in.parent() == this) {
+                // Find and remove the node by object reference.
+                // This is O(N) for ArrayList but ensures correctness when moving within the same parent.
+                int curPos = childNodes.indexOf(in);
+                if (curPos != -1) { // Node found, remove it
+                    childNodes.remove(curPos);
+                    // No need to call reindexChildren here; the final call after the loop suffices.
+                }
+                // Parent remains 'this'.
+            } else {
+                // If the node is from another parent or is new, reparent it normally.
+                // This will detach it from its old parent and set its parent to 'this'.
                 reparentChild(in);
+            }
             childNodes.add(index, in);
         }
-        reindexChildren(index);
+        reindexChildren(index); // Reindex all children from the insertion point to ensure correct siblingIndexes.
     }
\ No newline at end of file
