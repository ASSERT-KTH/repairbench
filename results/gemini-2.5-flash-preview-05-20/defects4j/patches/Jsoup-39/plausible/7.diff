diff --git a/tmp/723e9d5b-80d0-4a14-9e05-ad06a6852559_buggy.java b/tmp/fd2c687e-3c9b-40e6-84c0-a4f2d2b29b70_fixed.java
index c4b260c..f1475fa 100644
--- a/tmp/723e9d5b-80d0-4a14-9e05-ad06a6852559_buggy.java
+++ b/tmp/fd2c687e-3c9b-40e6-84c0-a4f2d2b29b70_fixed.java
@@ -1,51 +1,71 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
-        Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
-                if (meta.hasAttr("http-equiv")) {
+        
+        // Determine the final docData and effective charsetName based on input and heuristics.
+        // The Document object itself will only be parsed once, after all charset determination and BOM stripping.
+
+        if (charsetName == null) { // Charset not specified, attempt to detect from meta tags.
+            // 1. Initially decode as UTF-8 to find <meta> tags.
+            // This `initialDocData` might contain the BOM if present, as UTF-8 decoding doesn't automatically strip it.
+            String initialDocData = Charset.forName(defaultCharset).decode(byteData).toString();
+            
+            // Rewind the byteData buffer for potential re-decoding with a different charset or BOM removal.
+            byteData.rewind(); 
+
+            // Parse a temporary document just to extract charset from meta tags.
+            // Jsoup's parser can generally handle a leading BOM in the string for structural parsing.
+            Document docForMeta = parser.parseInput(initialDocData, baseUri);
+            Element meta = docForMeta.select("meta[http-equiv=content-type], meta[charset]").first();
+
+            String foundCharset = null;
+            if (meta != null) {
+                if (meta.hasAttr("http-equiv")) { // Example: <meta http-equiv="Content-Type" content="text/html;charset=gb2312">
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
-                    if (foundCharset == null && meta.hasAttr("charset")) {
+                    if (foundCharset == null && meta.hasAttr("charset")) { // Fallback if http-equiv content is bad but charset attr exists (rare)
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
+                } else { // HTML5 example: <meta charset="gb2312">
+                    foundCharset = meta.attr("charset");
+                }
+            }
+
+            // If a charset was found in meta and it's different from the default, use it.
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
+                foundCharset = foundCharset.trim().replaceAll("[\"']", ""); // Clean the charset name
+                charsetName = foundCharset; // Set the determined charsetName
             } else {
-                    foundCharset = meta.attr("charset");
+                charsetName = defaultCharset; // Otherwise, stick with the default charset (UTF-8).
             }
             
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
+            // Now, decode the byteData using the determined charsetName.
+            // This is the primary decode that will produce the final docData for parsing.
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+
+        } else { // Charset was explicitly specified (e.g., from HTTP header or user).
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+
+        // Handle UTF-8 BOM (Byte Order Mark). This takes precedence over all other charset detections.
+        // If BOM is present in `docData`, it implies the prior decoding (whether default or meta-derived)
+        // did not remove it. We re-decode as UTF-8 and strip the BOM.
+        if (docData.length() > 0 && docData.charAt(0) == 65279) { // 65279 is the Unicode BOM character (U+FEFF)
+            byteData.rewind(); // Rewind the buffer to re-read from the beginning
+            docData = Charset.forName(defaultCharset).decode(byteData).toString(); // Re-decode as UTF-8
+            docData = docData.substring(1); // Strip the BOM character from the string
+            charsetName = defaultCharset; // Confirm charset is UTF-8 (BOM signifies UTF-8)
         }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
+        
+        // Finally, parse the document using the definitive `docData` and `charsetName`.
+        Document doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
-        }
+
         return doc;
     }
\ No newline at end of file
