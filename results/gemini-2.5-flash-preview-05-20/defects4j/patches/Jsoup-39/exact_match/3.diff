diff --git a/tmp/6464c692-289b-40ad-8925-97d5d2965fd0_buggy.java b/tmp/ae09e334-14f8-4d2f-80d3-db9ff72242c8_fixed.java
index c4b260c..874fbab 100644
--- a/tmp/6464c692-289b-40ad-8925-97d5d2965fd0_buggy.java
+++ b/tmp/ae09e334-14f8-4d2f-80d3-db9ff72242c8_fixed.java
@@ -1,51 +1,55 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+            doc = parser.parseInput(docData, baseUri); // Initial parse, potentially with BOM
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    doc = null; // Discard the initially parsed doc, will re-parse later
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
         // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+        if (docData.length() > 0 && docData.charAt(0) == 65279) { // 65279 is Unicode BOM (U+FEFF)
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
+            docData = docData.substring(1); // strip BOM
             charsetName = defaultCharset;
+            // FIX: If a BOM was detected and stripped, the previously parsed 'doc' (if any)
+            // was parsed from `docData` *with* the BOM. It needs to be re-parsed
+            // using the now stripped `docData`.
+            doc = null; 
         }
-        if (doc == null) {
+        if (doc == null) { // only parse if doc is null (i.e., not already successfully parsed with correct encoding or discarded due to BOM/charset change)
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
