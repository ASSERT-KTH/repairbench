diff --git a/tmp/43d62d67-aab0-413c-8bce-990d2dfae028_buggy.java b/tmp/e6c398e3-f6f4-4831-8dfb-f6805a5dee56_fixed.java
index 373b1e8..3248fc4 100644
--- a/tmp/43d62d67-aab0-413c-8bce-990d2dfae028_buggy.java
+++ b/tmp/e6c398e3-f6f4-4831-8dfb-f6805a5dee56_fixed.java
@@ -1,37 +1,52 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
                 && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
             int end;
             for (int j = input.length; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
                     continue; // ASCII
                 }
 
-                // UTF-8 leading:
+                // Determine number of continuation bytes expected for this leading byte
+                int numContinuationBytes;
                 if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
+                    numContinuationBytes = 1; // 2-byte sequence (1 continuation byte)
                 } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
+                    numContinuationBytes = 2; // 3-byte sequence (2 continuation bytes)
                 } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
+                    numContinuationBytes = 3; // 4-byte sequence (3 continuation bytes)
                 } else {
-                    return false;
+                    return false; // Not a valid UTF-8 leading byte
                 }
 
+                // CRITICAL CHECK: Ensure there are enough bytes remaining in the input
+                // for the full UTF-8 sequence. The last byte of the sequence would be
+                // at index `i + numContinuationBytes`. This index must be less than `input.length`.
+                if (i + numContinuationBytes >= input.length) {
+                    return false; // Incomplete UTF-8 sequence
+                }
+
+                // Set `end` for the inner loop. `end` is the index `i` should not reach or exceed
+                // in the `while` loop (i.e., the index *after* the last byte of the character).
+                // `i` will become `original_i + numContinuationBytes` after the loop.
+                end = i + numContinuationBytes;
 
+                // Check continuation bytes
                 while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+                    i++; // Move to the next byte, which should be a continuation byte
+                    o = input[i]; // Access the byte (now guaranteed to be in bounds)
+                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte (starts with 10xxxxxx)
                         return false;
                     }
                 }
+                // After the inner loop, `i` is at `end`, which is `original_i + numContinuationBytes`.
+                // The outer `for` loop's `++i` will then correctly advance `i` to the start of the next character.
             }
             return true;
         }
\ No newline at end of file
