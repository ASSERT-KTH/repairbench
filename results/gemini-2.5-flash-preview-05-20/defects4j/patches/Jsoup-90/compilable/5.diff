diff --git a/tmp/26e9c619-46de-43c5-8ad6-ae86a0c62ae8_buggy.java b/tmp/7a41b0f0-26bc-411d-81e7-8998b7b42fe1_fixed.java
index 373b1e8..0ed9307 100644
--- a/tmp/26e9c619-46de-43c5-8ad6-ae86a0c62ae8_buggy.java
+++ b/tmp/7a41b0f0-26bc-411d-81e7-8998b7b42fe1_fixed.java
@@ -1,37 +1,46 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
                 && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
-            int end;
+            int endSeq; // Renamed from 'end' for clarity
             for (int j = input.length; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
                     continue; // ASCII
                 }
 
                 // UTF-8 leading:
                 if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
+                    endSeq = i + 1; // 2-byte sequence: one continuation byte at input[i+1]
                 } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
+                    endSeq = i + 2; // 3-byte sequence: two continuation bytes at input[i+1], input[i+2]
                 } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
+                    endSeq = i + 3; // 4-byte sequence: three continuation bytes at input[i+1], input[i+2], input[i+3]
                 } else {
+                    return false; // Not a valid UTF-8 leading byte
+                }
+
+                // Check if the calculated end index for the current multi-byte sequence
+                // goes beyond the actual input buffer. If it does, the sequence is truncated,
+                // and thus not valid UTF-8.
+                // The 'while' loop below will access bytes up to 'input[endSeq]', so 'endSeq' must be a valid index.
+                if (endSeq >= input.length) {
                     return false;
                 }
 
-
-                while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+                // Now, i points to the leading byte. The loop needs to check bytes from original_i + 1 up to endSeq.
+                // The 'i' variable is incremented *before* accessing `input[i]` inside this loop.
+                while (i < endSeq) {
+                    i++; // increment i to point to the next byte in sequence
+                    o = input[i]; // This accesses input[original_i + 1], input[original_i + 2], ..., input[endSeq]
+                    if ((o & 0xC0) != 0x80) { // Check if it's a continuation byte (starts with 0x80)
                         return false;
                     }
                 }
             }
             return true;
         }
