diff --git a/tmp/6102e94b-6da4-46c8-ae0b-686cfa954247_buggy.java b/tmp/3c8f0193-d995-4f1f-a0da-30e9f66a28c4_fixed.java
index 373b1e8..31c568c 100644
--- a/tmp/6102e94b-6da4-46c8-ae0b-686cfa954247_buggy.java
+++ b/tmp/3c8f0193-d995-4f1f-a0da-30e9f66a28c4_fixed.java
@@ -1,37 +1,52 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
-            int end;
             for (int j = input.length; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
                     continue; // ASCII
                 }
 
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
+                int charLen; // Expected total length of the character
+                // UTF-8 leading byte checks:
+                if ((o & 0xE0) == 0xC0) { // 2-byte sequence (110xxxxx)
+                    charLen = 2;
+                } else if ((o & 0xF0) == 0xE0) { // 3-byte sequence (1110xxxx)
+                    charLen = 3;
+                } else if ((o & 0xF8) == 0xF0) { // 4-byte sequence (11110xxx)
+                    charLen = 4;
                 } else {
+                    // Invalid leading byte (e.g., 10xxxxxx which is a continuation byte,
+                    // or 11111xxx which is an invalid start byte for UTF-8)
                     return false;
                 }
 
+                // Check if there are enough bytes remaining in the input array for this character
+                // i + charLen is the index AFTER the last byte of the current character.
+                // It must not exceed input.length.
+                if (i + charLen > input.length) {
+                    return false; // Truncated multi-byte character
+                }
 
-                while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
-                        return false;
+                // Check continuation bytes (must be 10xxxxxx)
+                // Loop from the byte *after* the leading byte up to the last byte of the character
+                // (i.e., from index i+1 to i+charLen-1)
+                for (int k = 1; k < charLen; k++) {
+                    int continuationByte = input[i + k];
+                    if ((continuationByte & 0xC0) != 0x80) {
+                        return false; // Malformed: continuation byte does not start with 10
                     }
                 }
+
+                // Advance 'i' to the last byte of the current character.
+                // The outer loop's '++i' will then correctly move 'i' to the
+                // leading byte of the next character.
+                i += (charLen - 1);
             }
             return true;
         }
