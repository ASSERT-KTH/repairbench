diff --git a/tmp/faaaefb1-b6c4-4628-99c4-66827dc2ffdc_buggy.java b/tmp/112a62e4-a9e9-4f48-971f-47b666c48393_fixed.java
index 373b1e8..1def85a 100644
--- a/tmp/faaaefb1-b6c4-4628-99c4-66827dc2ffdc_buggy.java
+++ b/tmp/112a62e4-a9e9-4f48-971f-47b666c48393_fixed.java
@@ -1,37 +1,52 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
-            int end;
+            // 'j' is used as the upper bound for the main loop, equivalent to input.length.
+            // It's already defined within the loop, but using input.length directly is also fine.
+            // int end; // This 'end' variable is redefined in the loop, so it can be declared inside if preferred.
             for (int j = input.length; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
                     continue; // ASCII
                 }
 
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
+                int end; // Represents the index one past the last byte of the current UTF-8 sequence
+                // UTF-8 leading byte checks:
+                if ((o & 0xE0) == 0xC0) { // 2-byte sequence (1 continuation byte)
                     end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
+                } else if ((o & 0xF0) == 0xE0) { // 3-byte sequence (2 continuation bytes)
                     end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
+                } else if ((o & 0xF8) == 0xF0) { // 4-byte sequence (3 continuation bytes)
                     end = i + 3;
                 } else {
-                    return false;
+                    return false; // Not a valid UTF-8 leading byte
                 }
 
-
+                // Check for continuation bytes
+                // The loop iterates while 'i' is still less than 'end'.
+                // 'i' points to the *last* byte processed so far (initially the leading byte).
+                // We need to read bytes from 'i + 1' up to 'end - 1'.
                 while (i < end) {
+                    // Increment 'i' to point to the *next* byte in the sequence.
                     i++;
-                    o = input[i];
+                    // Crucial boundary check: ensure 'i' is within array bounds before accessing input[i].
+                    // If 'i' is already at or beyond input.length, it means the input is truncated
+                    // and doesn't contain the expected number of continuation bytes.
+                    if (i >= input.length) {
+                        return false; // Malformed: sequence is shorter than expected
+                    }
+                    o = input[i]; // Now it's safe to access input[i]
+
+                    // All continuation bytes must have the form 10xxxxxx (0x80 to 0xBF)
                     if ((o & 0xC0) != 0x80) {
-                        return false;
+                        return false; // Malformed: not a valid continuation byte
                     }
                 }
             }
             return true;
         }
