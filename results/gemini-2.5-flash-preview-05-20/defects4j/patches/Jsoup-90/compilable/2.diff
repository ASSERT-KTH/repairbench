diff --git a/tmp/44844dd5-749d-4cb6-be54-fdf6726ba9ea_buggy.java b/tmp/f63f8f47-59e4-4286-b412-a04e533cb6b2_fixed.java
index 373b1e8..fa49d1b 100644
--- a/tmp/44844dd5-749d-4cb6-be54-fdf6726ba9ea_buggy.java
+++ b/tmp/f63f8f47-59e4-4286-b412-a04e533cb6b2_fixed.java
@@ -1,37 +1,48 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
                 && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
+            // Declare end inside the loop as in the original code
             int end;
             for (int j = input.length; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
                     continue; // ASCII
                 }
 
                 // UTF-8 leading:
                 if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
+                    end = i + 1; // Expected 1 continuation byte
                 } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
+                    end = i + 2; // Expected 2 continuation bytes
                 } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
+                    end = i + 3; // Expected 3 continuation bytes
                 } else {
-                    return false;
+                    return false; // Not a valid UTF-8 leading byte
                 }
 
+                // Check if the input byte array has enough bytes for the expected sequence.
+                // 'end' marks the index *after* the last byte of the current character.
+                // If 'end' is greater than or equal to input.length, it means we don't have enough bytes.
+                if (end >= input.length) {
+                    return false; // Incomplete character sequence
+                }
 
+                // Check continuation bytes:
+                // The loop iterates from the byte after the leading byte up to 'end' (exclusive).
+                // 'i' is incremented first, then input[i] is accessed.
+                // The bounds check 'end >= input.length' ensures that 'input[i]' will be within bounds.
                 while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+                    i++; // Move to the next byte, which should be a continuation byte
+                    o = input[i]; // Access the byte (safe due to the check above)
+                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte (10xxxxxx)
                         return false;
                     }
                 }
             }
             return true;
         }
\ No newline at end of file
