diff --git a/tmp/8d73dfa9-f3d8-40de-bf2e-ce08c4add853_buggy.java b/tmp/0c0fc09d-d796-4b84-b701-a86bee654928_fixed.java
index 373b1e8..abc152a 100644
--- a/tmp/8d73dfa9-f3d8-40de-bf2e-ce08c4add853_buggy.java
+++ b/tmp/0c0fc09d-d796-4b84-b701-a86bee654928_fixed.java
@@ -1,37 +1,63 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
+            int len = input.length;
+
+            // Iterate through the input bytes, checking for valid UTF-8 sequences.
+            // 'i' will always point to the start of a new character (or potential start).
+            for (; i < len; ++i) {
                 int o = input[i];
+
+                // ASCII character (0xxxxxxx)
                 if ((o & 0x80) == 0) {
-                    continue; // ASCII
+                    continue;
                 }
 
-                // UTF-8 leading:
+                int numExpectedContinuationBytes;
+                // Determine number of continuation bytes based on the leading byte.
+                // 2-byte sequence (110xxxxx 10xxxxxx)
                 if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
-                } else {
+                    numExpectedContinuationBytes = 1;
+                }
+                // 3-byte sequence (1110xxxx 10xxxxxx 10xxxxxx)
+                else if ((o & 0xF0) == 0xE0) {
+                    numExpectedContinuationBytes = 2;
+                }
+                // 4-byte sequence (11110xxx 10xxxxxx 10xxxxxx 10xxxxxx)
+                else if ((o & 0xF8) == 0xF0) {
+                    numExpectedContinuationBytes = 3;
+                }
+                // Invalid leading byte for UTF-8 multi-byte sequence (e.g., 10xxxxxx, 11111xxx, 111111xx)
+                else {
                     return false;
                 }
 
+                // Check if there are enough bytes remaining in the input array for the
+                // expected continuation bytes.
+                // The index of the last byte of the current character sequence would be
+                // `i + numExpectedContinuationBytes`. This index must be less than `len`.
+                if (i + numExpectedContinuationBytes >= len) {
+                    return false; // Not enough bytes for the declared multi-byte char
+                }
 
-                while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
-                        return false;
+                // Check the continuation bytes (10xxxxxx)
+                // 'k' iterates from the first continuation byte (at i+1) to the last.
+                for (int k = 1; k <= numExpectedContinuationBytes; ++k) {
+                    int continuationByte = input[i + k];
+                    if ((continuationByte & 0xC0) != 0x80) {
+                        return false; // Not a valid continuation byte
                     }
                 }
+
+                // Advance 'i' by the number of continuation bytes consumed.
+                // The outer for loop's `++i` will then move it past the last byte of the
+                // current character to the start of the next one.
+                i += numExpectedContinuationBytes;
             }
             return true;
         }
\ No newline at end of file
