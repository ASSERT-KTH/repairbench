diff --git a/tmp/68ed5da1-9dd5-4878-ba22-b71c7118f7f7_buggy.java b/tmp/99a68d65-d0c7-4ead-acbb-1ae88d4b05c5_fixed.java
index 373b1e8..a8a5c28 100644
--- a/tmp/68ed5da1-9dd5-4878-ba22-b71c7118f7f7_buggy.java
+++ b/tmp/99a68d65-d0c7-4ead-acbb-1ae88d4b05c5_fixed.java
@@ -1,37 +1,48 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
-            int end;
+            int end; // Declared outside the loop, as it's used after the if/else if chain
             for (int j = input.length; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
                     continue; // ASCII
                 }
 
                 // UTF-8 leading:
                 if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
+                    end = i + 1; // Expected end index (exclusive) for 2-byte sequence
                 } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
+                    end = i + 2; // Expected end index (exclusive) for 3-byte sequence
                 } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
+                    end = i + 3; // Expected end index (exclusive) for 4-byte sequence
                 } else {
-                    return false;
+                    return false; // Not ASCII and not a valid UTF-8 leading byte
                 }
 
+                // Check if the expected 'end' of the sequence is beyond the input array's length.
+                // 'end' is the index *after* the last byte of the current character.
+                // If 'end' is greater than or equal to 'input.length', it means
+                // one or more bytes of the current multi-byte sequence are missing.
+                if (end >= input.length) {
+                    return false; // Incomplete character sequence detected
+                }
 
+                // Consume continuation bytes
                 while (i < end) {
-                    i++;
+                    i++; // Increment 'i' to point to the next byte (first continuation byte)
+                    // The access input[i] is now safe because we checked if 'end' is within bounds.
+                    // Since 'i' will at most reach 'end-1' before the loop condition 'i < end' becomes false,
+                    // and 'end' is guaranteed to be <= input.length, then 'i' will be < input.length.
                     o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte (0b10xxxxxx)
                         return false;
                     }
                 }
             }
             return true;
         }
