diff --git a/tmp/681fbccf-cd27-4eea-9d4c-e05135162370_buggy.java b/tmp/abae8628-f6ab-4838-9cf1-c3b8f3c46744_fixed.java
index 373b1e8..0eb79b3 100644
--- a/tmp/681fbccf-cd27-4eea-9d4c-e05135162370_buggy.java
+++ b/tmp/abae8628-f6ab-4838-9cf1-c3b8f3c46744_fixed.java
@@ -1,37 +1,53 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
+            // Fix: Use logical AND (&&) instead of bitwise AND (&) for boolean conditions
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
+            int end; // 'end' will store the index of the *last byte* of the current multi-byte character
+            for (int j = input.length; i < j; ++i) { // 'i' is the index of the *leading byte* of a character
                 int o = input[i];
                 if ((o & 0x80) == 0) {
-                    continue; // ASCII
+                    continue; // ASCII character (single byte)
                 }
 
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
+                // UTF-8 multi-byte leading byte:
+                // Determine the 'end' index based on the leading byte
+                if ((o & 0xE0) == 0xC0) { // 2-byte sequence (e.g., C2-DF followed by 80-BF)
                     end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
+                } else if ((o & 0xF0) == 0xE0) { // 3-byte sequence (e.g., E0-EF followed by two 80-BF)
                     end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
+                } else if ((o & 0xF8) == 0xF0) { // 4-byte sequence (e.g., F0-F7 followed by three 80-BF)
                     end = i + 3;
                 } else {
-                    return false;
+                    return false; // Invalid leading byte for UTF-8
                 }
 
+                // FIX: Ensure that the entire multi-byte sequence is within the input array bounds.
+                // If 'end' (the index of the last expected byte) is out of bounds, it's an incomplete sequence.
+                // If end is input.length - 1, it's valid. If end is input.length or greater, it's out of bounds.
+                // So, if `end >= input.length`, it's an incomplete multi-byte sequence.
+                if (end >= input.length) {
+                    return false; // Incomplete multi-byte character sequence
+                }
 
+                // Validate continuation bytes (should be 10xxxxxx, i.e., & 0xC0 == 0x80)
+                // The loop starts with 'i' at the leading byte's index.
+                // It increments 'i' and then checks 'input[i]' for continuation bytes.
+                // It continues until 'i' reaches 'end' (the index of the last byte of the sequence).
                 while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
-                        return false;
+                    i++; // Move 'i' to the next byte, which should be a continuation byte
+                    o = input[i]; // Get the byte at the new 'i' position
+                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte
+                        return false; // Invalid continuation byte
                     }
                 }
+                // After this loop, 'i' will be equal to 'end'.
+                // The outer for loop's '++i' will then correctly advance 'i' to 'end + 1',
+                // positioning it at the start of the next potential character.
             }
             return true;
         }
