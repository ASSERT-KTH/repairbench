diff --git a/tmp/3dfea884-6b91-40e3-884d-48261c43551c_buggy.java b/tmp/9ee6523a-d72a-4d18-8540-0b2f4c83912e_fixed.java
index 373b1e8..1c0c698 100644
--- a/tmp/3dfea884-6b91-40e3-884d-48261c43551c_buggy.java
+++ b/tmp/9ee6523a-d72a-4d18-8540-0b2f4c83912e_fixed.java
@@ -1,37 +1,46 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
             int end;
             for (int j = input.length; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
                     continue; // ASCII
                 }
 
                 // UTF-8 leading:
                 if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
+                    end = i + 1; // 2-byte sequence (1 continuation byte)
                 } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
+                    end = i + 2; // 3-byte sequence (2 continuation bytes)
                 } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
+                    end = i + 3; // 4-byte sequence (3 continuation bytes)
                 } else {
-                    return false;
+                    return false; // Not a valid UTF-8 leading byte
                 }
 
+                // Crucial fix: Check if there are enough bytes remaining for the
+                // expected multi-byte character sequence.
+                // 'end' is the index of the last byte of the sequence.
+                // If 'end' is beyond the input length, it's an incomplete sequence.
+                if (end >= input.length) {
+                    return false;
+                }
 
                 while (i < end) {
-                    i++;
+                    i++; // Move to the next byte within the sequence
+                    // At this point, i is guaranteed to be < input.length due to the
+                    // 'if (end >= input.length)' check above.
                     o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte (0x10xxxxxx)
                         return false;
                     }
                 }
             }
             return true;
         }
