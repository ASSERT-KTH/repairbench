diff --git a/tmp/50d4a03a-cab4-48d4-a31c-8ff827cfca40_buggy.java b/tmp/014c2745-c02d-47fc-9460-bc2c8a0ba5cf_fixed.java
index 373b1e8..12687b7 100644
--- a/tmp/50d4a03a-cab4-48d4-a31c-8ff827cfca40_buggy.java
+++ b/tmp/014c2745-c02d-47fc-9460-bc2c8a0ba5cf_fixed.java
@@ -1,37 +1,51 @@
         private static boolean looksLikeUtf8(byte[] input) {
             int i = 0;
             // BOM:
             if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
                 i = 3;
             }
 
             int end;
             for (int j = input.length; i < j; ++i) {
                 int o = input[i];
                 if ((o & 0x80) == 0) {
                     continue; // ASCII
                 }
 
                 // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
+                if ((o & 0xE0) == 0xC0) { // 2-byte sequence (1 continuation byte)
                     end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
+                } else if ((o & 0xF0) == 0xE0) { // 3-byte sequence (2 continuation bytes)
                     end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
+                } else if ((o & 0xF8) == 0xF0) { // 4-byte sequence (3 continuation bytes)
                     end = i + 3;
                 } else {
-                    return false;
+                    return false; // Not a valid UTF-8 leading byte (e.g., 0x80-0xBF for continuation bytes, 0xF8-0xFF for invalid ranges)
                 }
 
+                // The 'end' variable indicates the index that 'i' must not reach (i.e., 'i' must be < end).
+                // It means we expect bytes up to 'end-1'.
+                // The loop `while (i < end)` will process bytes from `i+1` up to `end-1`.
+                // The length of the sequence is 'end - original_i + 1'.
+                // If 'end' itself is beyond input.length - 1, the sequence is truncated.
+                // Or more simply, check that `end` doesn't point past the actual array end.
 
+                // Loop through continuation bytes
                 while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+                    i++; // Move to the next byte, which should be a continuation byte
+                    
+                    // Check if 'i' has gone beyond the array's actual length.
+                    // This handles truncated multi-byte sequences (e.g., [0xC0] or [0xE0, 0x80]).
+                    if (i >= input.length) { 
+                        return false; // Malformed: truncated sequence
+                    }
+                    
+                    o = input[i]; // Now 'i' is guaranteed to be a valid index
+                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte (10xxxxxx)
                         return false;
                     }
                 }
             }
             return true;
         }
\ No newline at end of file
