diff --git a/tmp/d11c8ec8-f07c-4908-9cb1-9ca23f2e043a_buggy.java b/tmp/66a14ec6-747a-4d28-9a6d-ed12a746f744_fixed.java
index 7f61a8c..48dbbf3 100644
--- a/tmp/d11c8ec8-f07c-4908-9cb1-9ca23f2e043a_buggy.java
+++ b/tmp/66a14ec6-747a-4d28-9a6d-ed12a746f744_fixed.java
@@ -1,73 +1,82 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
-      return;
-    }
-
+    // Parent should never be null, except for the root node, which is never useless code itself.
     if (parent == null) {
       return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
-    if (parent.getType() == Token.COMMA) {
-      Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
-      return;
+    // VOID nodes appear when there are extra semicolons at the BLOCK level.
+    // The original comment indicated these should be allowed. `test("foo();;;;bar();;;;", ok);`
+    // supports this. However, `test("function f(x) { if(x); }", e);` implies an empty statement
+    // as a child of an IF statement should generate an error.
+    // We differentiate: allow block-level empty statements, but report others.
+    if (n.isEmpty()) {
+      if (parent.getType() == Token.BLOCK) {
+        return; // Allow extra semicolons in blocks.
       }
+      // If not in a block (e.g., `if (x);`), it falls through to be checked as useless code.
     }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
-            continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+    // Comma nodes themselves are structural nodes, and their direct children are
+    // typically evaluated. The "usefulness" of a comma expression's sub-parts
+    // is determined by whether the sub-expression's result is used or has side effects.
+    // The visit method on children (which happens before the parent is visited)
+    // should handle their uselessness. The COMMA node itself shouldn't be reported
+    // as useless code.
+    if (n.isComma()) {
       return;
-          else
-            break;
-        }
     }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
-      } else {
+
+    // An EXPR_RESULT node is a statement wrapper for an expression.
+    // The warning for useless code should typically be generated for the child
+    // expression (e.g., `x == 3`), not for the EXPR_RESULT wrapper itself.
+    // Returning here prevents duplicate warnings or warnings on the wrong node.
+    // The `NodeUtil.isStatement(n)` check later in this method correctly prevents
+    // EXPR_RESULT nodes from being added to `problemNodes` for removal anyway.
+    if (n.isExprResult()) {
       return;
     }
-    }
+
+    // The large conditional block in the original code that checked `parent.getType()`
+    // (e.g., `if (parent.getType() == Token.COMMA) { ... } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { ... }`)
+    // was problematic. It prematurely returned for many nodes whose usefulness should
+    // be determined by `NodeUtil.isExpressionResultUsed` and `NodeUtil.mayHaveSideEffects`.
+    // By removing this block, we ensure that the core side-effect check applies broadly
+    // to expressions that might be useless.
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+    // If the result of the expression is not used AND (it's a simple operator OR has no side effects),
+    // then it's considered useless code.
     if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+      // This specific case allows qualified names with JSDoc information to avoid
+      // being flagged as useless, as the JSDoc might indicate intended use.
       if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
-      } else if (n.isExprResult()) {
-        return;
       }
+
+      // Generate the appropriate warning message based on the node type.
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
+      // Report the useless code warning.
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+
+      // Add the node to `problemNodes` only if it's not a statement.
+      // Statements (like EXPR_RESULT, BLOCK, IF, FOR, EMPTY etc.) are structural nodes
+      // and are not directly removed by this pass; their removal is left to
+      // peephole optimizations to ensure tree consistency.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
