diff --git a/tmp/d4621eb6-cc2b-4e15-beb1-706b165ecfdd_buggy.java b/tmp/4ab80096-e1b6-441d-aaa8-8318804c7e13_fixed.java
index fe73b81..2779f4f 100644
--- a/tmp/d4621eb6-cc2b-4e15-beb1-706b165ecfdd_buggy.java
+++ b/tmp/4ab80096-e1b6-441d-aaa8-8318804c7e13_fixed.java
@@ -1,42 +1,61 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
             // And to prevent infinite loops, now need this:
             return _unknownType();
         } else {
             // Ok: here's where context might come in handy!
             /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
              *   unresolved type variables to handle some cases where bounds
              *   are enough. Let's hope it does not hide real fail cases.
              */
             JavaType actualType = context.findType(name);
             if (actualType != null) {
+                // This covers cases where 'name' is already resolved,
+                // OR where it's a placeholder (returning _unknownType() for breaking recursion)
                 return actualType;
             }
         }
 
         /* 29-Jan-2010, tatu: We used to throw exception here, if type was
          *   bound: but the problem is that this can occur for generic "base"
          *   method, overridden by sub-class. If so, we will want to ignore
          *   current type (for method) since it will be masked.
          */
         Type[] bounds = type.getBounds();
 
         // With type variables we must use bound information.
         // Theoretically this gets tricky, as there may be multiple
         // bounds ("... extends A & B"); and optimally we might
         // want to choose the best match. Also, bounds are optional;
         // but here we are lucky in that implicit "Object" is
         // added as bounds if so.
         // Either way let's just use the first bound, for now, and
         // worry about better match later on if there is need.
 
         /* 29-Jan-2010, tatu: One more problem are recursive types
          *   (T extends Comparable<T>). Need to add "placeholder"
          *   for resolution to catch those.
          */
         context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+        JavaType resultType;
+        try {
+            resultType = _constructType(bounds[0], context);
+        } catch (RuntimeException e) {
+            // On failure to construct, resolve placeholder to _unknownType()
+            // to avoid subsequent infinite loops or errors for the same variable
+            context._resolvePlaceholder(name, _unknownType());
+            throw e; // Re-throw the original exception
+        } catch (Error e) {
+            // On error, also resolve placeholder to _unknownType()
+            context._resolvePlaceholder(name, _unknownType());
+            throw e; // Re-throw the original error
+        }
+        // IMPORTANT: If _constructType was successful, resolve the placeholder
+        // with the actual result. This ensures the context accurately reflects
+        // the resolved type for the variable.
+        context._resolvePlaceholder(name, resultType);
+        return resultType;
     }
