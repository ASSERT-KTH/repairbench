diff --git a/tmp/280fc3bc-0ea0-475b-ba02-8bff09c658fb_buggy.java b/tmp/9192fe41-7b8c-425f-be33-8ab5b9a41a7c_fixed.java
index fe73b81..3ddcce4 100644
--- a/tmp/280fc3bc-0ea0-475b-ba02-8bff09c658fb_buggy.java
+++ b/tmp/9192fe41-7b8c-425f-be33-8ab5b9a41a7c_fixed.java
@@ -1,42 +1,46 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
             // And to prevent infinite loops, now need this:
             return _unknownType();
         } else {
             // Ok: here's where context might come in handy!
             /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
              *   unresolved type variables to handle some cases where bounds
              *   are enough. Let's hope it does not hide real fail cases.
              */
             JavaType actualType = context.findType(name);
             if (actualType != null) {
+                // Variable already resolved (either concretely or as a placeholder for recursion)
                 return actualType;
             }
-        }
             
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
-        Type[] bounds = type.getBounds();
-
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
+            // If actualType is null, the variable is not yet resolved in this context.
+            // We need to resolve it based on its bounds.
+            // First, add a placeholder to prevent infinite recursion for cyclic type variables
+            // (e.g., T extends Comparable<T>). This placeholder will typically be _unknownType().
             context._addPlaceholder(name); 
-        return _constructType(bounds[0], context);
+
+            Type[] bounds = type.getBounds();
+            JavaType resolvedBoundType;
+            if (bounds.length == 0) {
+                // If no bounds are specified, it implicitly extends Object.
+                // We treat this as an unknown type, which often resolves to Object.class.
+                resolvedBoundType = _unknownType();
+            } else {
+                // Resolve the first bound recursively using the same context.
+                // This will get the effective type for the variable based on its constraints.
+                resolvedBoundType = _constructType(bounds[0], context);
+            }
+
+            // Crucially, after resolving the bound, the type variable 'name' is now resolved
+            // to 'resolvedBoundType'. We must bind this final resolution to the context
+            // so that subsequent lookups for 'name' within this TypeBindings instance
+            // return 'resolvedBoundType' instead of the temporary placeholder.
+            context._bind(name, resolvedBoundType);
+            
+            return resolvedBoundType;
+        }
     }
