diff --git a/tmp/cfc7a42d-1f6e-462d-948f-a11cc834f243_buggy.java b/tmp/4b6f5a07-f43f-427a-9f0b-b58c5fb9e4f0_fixed.java
index f650982..c23497b 100644
--- a/tmp/cfc7a42d-1f6e-462d-948f-a11cc834f243_buggy.java
+++ b/tmp/4b6f5a07-f43f-427a-9f0b-b58c5fb9e4f0_fixed.java
@@ -1,42 +1,60 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        // Added to unwrap NodePointers to their underlying values.
+        // This is crucial if compute() returns a Pointer that wraps a Collection
+        // or other value that needs to be directly compared or converted.
+        if (l instanceof org.apache.commons.jxpath.Pointer) {
+            l = ((org.apache.commons.jxpath.Pointer) l).getValue();
+        }
+        if (r instanceof org.apache.commons.jxpath.Pointer) {
+            r = ((org.apache.commons.jxpath.Pointer) r).getValue();
+        }
+
+        if (l instanceof java.util.Collection) {
+            l = ((java.util.Collection) l).iterator();
         }
 
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        if (r instanceof java.util.Collection) {
+            r = ((java.util.Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        if ((l instanceof java.util.Iterator) && !(r instanceof java.util.Iterator)) {
+            return contains((java.util.Iterator) l, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (!(l instanceof java.util.Iterator) && (r instanceof java.util.Iterator)) {
+            return contains((java.util.Iterator) r, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        if (l instanceof java.util.Iterator && r instanceof java.util.Iterator) {
+            return findMatch((java.util.Iterator) l, (java.util.Iterator) r);
         }
+        
+        // Added to specifically handle String comparisons.
+        // This avoids issues with generic equal(Object, Object) that might incorrectly
+        // convert strings to numbers (NaN) before comparison, leading to false results.
+        if (l instanceof String && r instanceof String) {
+            return l.equals(r);
+        }
+
         return equal(l, r);
     }
\ No newline at end of file
