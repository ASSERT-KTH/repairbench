diff --git a/tmp/d0336cdd-6b02-4b5d-8538-fe2e25ae7cc1_buggy.java b/tmp/00d2cd6c-b8b3-4187-a7d3-3438dc10b0db_fixed.java
index f650982..15fd67f 100644
--- a/tmp/d0336cdd-6b02-4b5d-8538-fe2e25ae7cc1_buggy.java
+++ b/tmp/00d2cd6c-b8b3-4187-a7d3-3438dc10b0db_fixed.java
@@ -1,42 +1,53 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        // FIX: Add a check for NodePointers pointing to Collections.
+        // If a NodePointer's underlying node is a Collection, it should be treated as an Iterator
+        // for comparison purposes, following XPath's node-set equality rules.
+        if (l instanceof org.apache.commons.jxpath.Pointer && ((org.apache.commons.jxpath.Pointer)l).getNode() instanceof Collection) {
+            l = ((Collection) ((org.apache.commons.jxpath.Pointer)l).getNode()).iterator();
+        }
+
+        if (r instanceof org.apache.commons.jxpath.Pointer && ((org.apache.commons.jxpath.Pointer)r).getNode() instanceof Collection) {
+            r = ((Collection) ((org.apache.commons.jxpath.Pointer)r).getNode()).iterator();
+        }
+
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
