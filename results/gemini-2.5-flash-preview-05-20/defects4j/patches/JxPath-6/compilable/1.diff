diff --git a/tmp/e2762ce0-2766-4426-827e-9ddd120d6743_buggy.java b/tmp/fb6fb82d-a7cf-4b7d-bbb0-d5550003a791_fixed.java
index f650982..020deec 100644
--- a/tmp/e2762ce0-2766-4426-827e-9ddd120d6743_buggy.java
+++ b/tmp/fb6fb82d-a7cf-4b7d-bbb0-d5550003a791_fixed.java
@@ -1,42 +1,59 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
+        // Unwrap EvalContexts (like InitialContext or SelfContext) to their single node pointer
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        // A variable or path evaluation might return a Pointer to the actual value.
+        // It's crucial to unwrap these Pointers to get to the underlying value (e.g., a Collection or a scalar)
+        // before performing type checks like instanceof Collection or instanceof Iterator.
+        if (l instanceof Pointer) {
+            l = ((Pointer) l).getValue();
+        }
+        if (r instanceof Pointer) {
+            r = ((Pointer) r).getValue();
+        }
+
+        // If the value is a Collection, convert it to an Iterator for XPath-style node-set comparisons.
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
+        // Handle comparisons involving Iterators (representing XPath node-sets).
+        // This corresponds to XPath's rule for comparing a node-set with a scalar or another node-set.
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
+        
+        // Fallback for direct comparison of non-iterator/non-collection values (scalar vs scalar).
+        // This typically delegates to an overloaded 'equal' method that handles primitive types, strings, etc.
         return equal(l, r);
     }
\ No newline at end of file
