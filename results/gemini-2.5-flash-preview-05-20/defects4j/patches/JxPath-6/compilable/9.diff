diff --git a/tmp/7100032c-78c4-4d1d-90db-6b28124b47d6_buggy.java b/tmp/0e4b9352-7c5a-4bba-8112-842094400ce2_fixed.java
index f650982..0bb27b9 100644
--- a/tmp/7100032c-78c4-4d1d-90db-6b28124b47d6_buggy.java
+++ b/tmp/0e4b9352-7c5a-4bba-8112-842094400ce2_fixed.java
@@ -1,42 +1,65 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
+        // Convert InitialContext/SelfContext to their single NodePointer
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        // Unwrap NodePointers that contain Collections or Iterators.
+        // This ensures that XPath node-set comparison rules (via contains/findMatch)
+        // are applied even if the collection/iterator is wrapped within a NodePointer.
+        if (l instanceof org.apache.commons.jxpath.ri.model.NodePointer) {
+            Object unwrappedL = ((org.apache.commons.jxpath.ri.model.NodePointer) l).getValue();
+            if (unwrappedL instanceof java.util.Collection || unwrappedL instanceof java.util.Iterator) {
+                l = unwrappedL;
+            }
+        }
+        if (r instanceof org.apache.commons.jxpath.ri.model.NodePointer) {
+            Object unwrappedR = ((org.apache.commons.jxpath.ri.model.NodePointer) r).getValue();
+            if (unwrappedR instanceof java.util.Collection || unwrappedR instanceof java.util.Iterator) {
+                r = unwrappedR;
+            }
+        }
+
+        // If a value is a Collection, convert it to an Iterator for uniform processing
+        // as an XPath node-set.
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
+        // Apply XPath node-set comparison rules based on whether operands are Iterators
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
+        
+        // For all other cases (neither operand is an Iterator),
+        // delegate to the generic object comparison logic.
         return equal(l, r);
     }
\ No newline at end of file
