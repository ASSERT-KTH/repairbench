diff --git a/tmp/01845628-5d4c-43c0-8cdf-e18c7f2a69ac_buggy.java b/tmp/a9a1fbaa-928e-4f89-8c4c-0749ea4a306f_fixed.java
index f650982..af0b72f 100644
--- a/tmp/01845628-5d4c-43c0-8cdf-e18c7f2a69ac_buggy.java
+++ b/tmp/a9a1fbaa-928e-4f89-8c4c-0749ea4a306f_fixed.java
@@ -1,42 +1,60 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
+        // First, unwrap any JXPath Pointers to their actual underlying object.
+        // This is crucial for VariablePointer, NodePointer, etc., which might wrap
+        // Collections or single values that need to be compared.
+        // For example, a VariablePointer to a List should resolve to the List itself.
+        if (l instanceof org.apache.commons.jxpath.Pointer) {
+            l = ((org.apache.commons.jxpath.Pointer) l).getValue();
+        }
+        if (r instanceof org.apache.commons.jxpath.Pointer) {
+            r = ((org.apache.commons.jxpath.Pointer) r).getValue();
+        }
+
+        // Next, handle specific EvalContext types (InitialContext/SelfContext)
+        // by converting them to their single node pointer. These are not Pointers,
+        // so they are handled separately.
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        // Then, if the object is a Collection, convert it to an Iterator for element-wise comparison.
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
+        // Finally, perform the comparison based on whether one or both are Iterators.
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
+        // If none of the above, compare the two objects directly using the generic equality method
+        // (CoreOperation.equal(Object, Object)).
         return equal(l, r);
     }
\ No newline at end of file
