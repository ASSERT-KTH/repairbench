diff --git a/tmp/970b7d01-eea7-4103-9bd5-547443411bc7_buggy.java b/tmp/964ac794-5ffb-4f39-9b5d-36fa7c16700c_fixed.java
index f650982..2acb3ef 100644
--- a/tmp/970b7d01-eea7-4103-9bd5-547443411bc7_buggy.java
+++ b/tmp/964ac794-5ffb-4f39-9b5d-36fa7c16700c_fixed.java
@@ -1,42 +1,86 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        // FIX: Ensure NodePointers are unwrapped to their values for comparison.
+        // XPath equality rules compare values, not object identity for NodePointers.
+        // This is crucial when a NodePointer is compared against a non-NodePointer value.
+        // If 'l' is a single NodePointer and 'r' is not (and not a collection/iterator),
+        // or vice versa, get the underlying value.
+        // Comparisons involving collections/iterators will handle NodePointer unwrapping
+        // within the collection processing logic below.
+        if (l instanceof org.apache.commons.jxpath.ri.model.NodePointer
+                && !(r instanceof org.apache.commons.jxpath.ri.model.NodePointer || r instanceof Collection || r instanceof Iterator)) {
+            l = ((org.apache.commons.jxpath.ri.model.NodePointer)l).getValue();
+        } else if (r instanceof org.apache.commons.jxpath.ri.model.NodePointer
+                && !(l instanceof org.apache.commons.jxpath.ri.model.NodePointer || l instanceof Collection || l instanceof Iterator)) {
+            r = ((org.apache.commons.jxpath.ri.model.NodePointer)r).getValue();
+        }
+
+
+        // Convert Collections to Iterators, and also unwrap NodePointers inside collections.
+        // This ensures that the Iterator contains the actual values for comparison.
         if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+            Collection<?> originalCollection = (Collection<?>) l;
+            java.util.List<Object> unwrappedList = new java.util.ArrayList<>();
+            for (Object item : originalCollection) {
+                if (item instanceof org.apache.commons.jxpath.ri.model.NodePointer) {
+                    // Unwrap NodePointer within the collection to its underlying value
+                    unwrappedList.add(((org.apache.commons.jxpath.ri.model.NodePointer) item).getValue());
+                } else {
+                    unwrappedList.add(item);
+                }
+            }
+            l = unwrappedList.iterator();
         }
 
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            Collection<?> originalCollection = (Collection<?>) r;
+            java.util.List<Object> unwrappedList = new java.util.ArrayList<>();
+            for (Object item : originalCollection) {
+                if (item instanceof org.apache.commons.jxpath.ri.model.NodePointer) {
+                    // Unwrap NodePointer within the collection to its underlying value
+                    unwrappedList.add(((org.apache.commons.jxpath.ri.model.NodePointer) item).getValue());
+                } else {
+                    unwrappedList.add(item);
+                }
+            }
+            r = unwrappedList.iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+            // Now, 'l' is an Iterator that contains unwrapped values (if they were NodePointers)
+            // and 'r' is a raw value (potentially unwrapped NodePointer).
+            // `contains` should now correctly compare actual values.
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
+            // Both are Iterators containing unwrapped values.
             return findMatch((Iterator) l, (Iterator) r);
         }
+        // Default comparison for non-collections/non-iterators.
+        // 'l' and 'r' are now atomic values, potentially unwrapped from NodePointers.
         return equal(l, r);
     }
