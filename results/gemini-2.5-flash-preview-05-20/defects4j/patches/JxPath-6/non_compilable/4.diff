diff --git a/tmp/fdde2777-6a7a-4d06-9308-ff7ead82d249_buggy.java b/tmp/72a023f7-aaac-4f6e-b2e9-c51d7509673e_fixed.java
index f650982..496ee50 100644
--- a/tmp/fdde2777-6a7a-4d06-9308-ff7ead82d249_buggy.java
+++ b/tmp/72a023f7-aaac-4f6e-b2e9-c51d7509673e_fixed.java
@@ -1,42 +1,58 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
+        // Handle InitialContext/SelfContext by getting single node pointer.
+        // This might result in a NodePointer or null.
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        // Unwrap NodePointers to their actual values.
+        // This is crucial to correctly identify underlying types (like Collections)
+        // that might be wrapped in a NodePointer, before attempting Collection/Iterator checks.
+        if (l instanceof NodePointer) {
+            l = ((NodePointer) l).getValue();
+        }
+        if (r instanceof NodePointer) {
+            r = ((NodePointer) r).getValue();
+        }
+
+        // Convert Collections to Iterators for XPath's collection-aware comparisons.
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
+        // Perform comparisons based on Iterator presence (XPath's collection-to-scalar/collection-to-collection rules).
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
+        
+        // Fallback to the general object comparison method (in superclass CoreOperationRelationalExpr).
         return equal(l, r);
     }
