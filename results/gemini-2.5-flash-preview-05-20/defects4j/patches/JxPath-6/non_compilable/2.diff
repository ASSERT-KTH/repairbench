diff --git a/tmp/71223a2f-9563-4d87-a250-bd928bdc9f5e_buggy.java b/tmp/9d6344a2-f18e-4b76-86df-802c8289f0b2_fixed.java
index f650982..78a612e 100644
--- a/tmp/71223a2f-9563-4d87-a250-bd928bdc9f5e_buggy.java
+++ b/tmp/9d6344a2-f18e-4b76-86df-802c8289f0b2_fixed.java
@@ -1,42 +1,71 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+        // First pass: Handle EvalContexts (InitialContext, SelfContext) by converting them to NodePointers.
+        // This retains their identity as JXPath contexts.
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
-
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        // Second pass: Determine the effective type (Iterator vs. Scalar) for comparison logic.
+        // Use JXPathContext.getValue() to unwrap NodePointers and other internal wrappers
+        // to get to the underlying Java object, which is then checked for Collection/Iterator.
+        Object unwrappedL = JXPathContext.getValue(l);
+        Object unwrappedR = JXPathContext.getValue(r);
+
+        // An object effectively represents an Iterator if its unwrapped value is an Iterator or a Collection.
+        boolean lRepresentsIterator = (unwrappedL instanceof Iterator) || (unwrappedL instanceof Collection);
+        boolean rRepresentsIterator = (unwrappedR instanceof Iterator) || (unwrappedR instanceof Collection);
+
+        // Create actual Iterator instances if they represent one.
+        // These iterators will be used by the `contains` and `findMatch` methods.
+        Iterator iterL = null;
+        if (lRepresentsIterator) {
+            if (unwrappedL instanceof Collection) {
+                iterL = ((Collection) unwrappedL).iterator();
+            } else { // Must be an Iterator already
+                iterL = (Iterator) unwrappedL;
+            }
         }
 
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        Iterator iterR = null;
+        if (rRepresentsIterator) {
+            if (unwrappedR instanceof Collection) {
+                iterR = ((Collection) unwrappedR).iterator();
+            } else { // Must be an Iterator already
+                iterR = (Iterator) unwrappedR;
+            }
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // Apply XPath comparison rules:
+        // If one is an Iterator and the other is not, use contains().
+        if (lRepresentsIterator && !rRepresentsIterator) {
+            // Pass the original 'r' as the 'value' argument to contains,
+            // because 'contains' method itself uses JXPathContext.getValue() on its arguments.
+            return contains(iterL, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (!lRepresentsIterator && rRepresentsIterator) {
+            // Pass the original 'l' as the 'value' argument to contains.
+            return contains(iterR, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        // If both are Iterators, use findMatch().
+        if (lRepresentsIterator && rRepresentsIterator) {
+            return findMatch(iterL, iterR);
         }
+
+        // If neither represents an Iterator, fall back to simple object comparison.
+        // Pass the original 'l' and 'r' as the 'equal(Object, Object)' method also
+        // handles unwrapping using JXPathContext.getValue() internally.
         return equal(l, r);
     }
\ No newline at end of file
