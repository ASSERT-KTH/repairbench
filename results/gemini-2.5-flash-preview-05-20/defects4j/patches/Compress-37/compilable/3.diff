diff --git a/tmp/45116b91-c7f3-43de-a70a-6202e6e2e2c9_buggy.java b/tmp/26939189-5868-43fa-ab16-f8b566bffa6c_fixed.java
index 4b7e1e4..f03dfc2 100644
--- a/tmp/45116b91-c7f3-43de-a70a-6202e6e2e2c9_buggy.java
+++ b/tmp/26939189-5868-43fa-ab16-f8b566bffa6c_fixed.java
@@ -1,52 +1,100 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
-        while(true){ // get length
+        while(true){
             int ch;
-            int len = 0;
-            int read = 0;
+            int len = 0; // This will store the numeric 'length' value
+            int digitsRead = 0; // Keep track of how many characters (digits + space) we've read for the length prefix
+
+            // Read the 'length' digits and the following space
             while((ch = i.read()) != -1) {
-                read++;
-                if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
+                digitsRead++;
+                if (ch == ' '){ // Found the space after the length digits
+                    break;
+                }
+                if (ch < '0' || ch > '9') {
+                    // Invalid character encountered during length parsing.
+                    // This covers cases like "7\n" or "1 comment" where a space is expected but not found.
+                    // If it's a newline and no digits were successfully parsed (meaning an empty line "\n"),
+                    // it should be silently ignored.
+                    if (ch == '\n' && digitsRead == 1 && len == 0) {
+                        continue; // Silently ignore an empty line ("\n")
+                    }
+                    // For any other malformed length prefix, throw an error as it indicates invalid data.
+                    throw new IOException("Invalid character '" + (char)ch + "' in PaxHeader length at position " + digitsRead);
+                }
+                len = len * 10 + (ch - '0');
+            }
+
+            if (ch == -1){ // EOF encountered while reading length or space
+                break; // No more headers
+            }
+
+            // At this point, `len` holds the declared length of the `keyword=value\n` part.
+
+            // Read the `len` bytes of content (keyword=value\n) into a byte array
+            final byte[] contentBytes = new byte[len];
+            final int got = IOUtils.readFully(i, contentBytes);
+            if (got != len) {
+                throw new IOException("Failed to read Paxheader. Expected "
+                                      + len
                                       + " bytes, read "
                                       + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+
+            // Pax header content must end with newline.
+            // Check this unless len is 0 (which is an unusual but handled case).
+            if (len > 0 && contentBytes[len - 1] != '\n') {
+                throw new IOException("Paxheader content must end with newline");
+            }
+
+            // Handle blank lines explicitly: `1 \n` means `len`=1, `content`=`\n`.
+            if (len == 1 && contentBytes[0] == '\n') {
+                continue; // Silently ignore this standard blank line
+            }
+
+            // Parse `contentBytes` to find keyword and value
+            int equalsIndexInContent = -1; // Index of '=' relative to the start of contentBytes
+            for (int j = 0; j < len; j++) {
+                if (contentBytes[j] == '=') {
+                    equalsIndexInContent = j;
+                    break;
+                }
+            }
+
+            if (equalsIndexInContent == -1) {
+                // No '=' found. This is a malformed entry (e.g., "1 comment" from the test case).
+                // Per COMPRESS-355 test's implicit requirement, such lines should be silently ignored.
+                continue;
+            }
+
+            // Extract keyword (from start of content to before '=')
+            final String keyword = new String(contentBytes, 0, equalsIndexInContent, CharsetNames.UTF_8);
+
+            // Extract value (from after '=' to before '\n')
+            final int valueStart = equalsIndexInContent + 1;
+            final int valueEnd = len - 1; // Exclude the trailing newline
+
+            // If valueStart is greater than valueEnd, it indicates a malformed entry like "key=" (missing '\n')
+            // or an empty/missing value portion. Given the prior `contentBytes[len-1] != '\n'` check,
+            // `valueStart == valueEnd` is the only valid case for an empty value (`key=\n`).
+            if (valueStart > valueEnd) {
+                // This means the value portion is ill-formed, typically implying something like "key="
+                // where the newline is missing or the length is incorrect.
+                // Treat as malformed and ignore.
+                continue;
+            }
+
+            final String value = new String(contentBytes, valueStart, valueEnd - valueStart, CharsetNames.UTF_8);
+
+            // Per specification: "If an extended header record contains a keyword that has the empty string as its value, then the existing attribute shall be deleted."
+            if (value.isEmpty()) {
+                headers.remove(keyword);
+            } else {
                 headers.put(keyword, value);
             }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
         }
         return headers;
     }
