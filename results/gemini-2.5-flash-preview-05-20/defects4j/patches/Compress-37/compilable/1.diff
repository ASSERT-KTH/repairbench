diff --git a/tmp/794abdb3-db9c-4656-b9a4-f93674809786_buggy.java b/tmp/790c928c-2860-46c7-b7a7-78882c8126b3_fixed.java
index 4b7e1e4..ae30a7a 100644
--- a/tmp/794abdb3-db9c-4656-b9a4-f93674809786_buggy.java
+++ b/tmp/790c928c-2860-46c7-b7a7-78882c8126b3_fixed.java
@@ -1,52 +1,94 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
-        while(true){ // get length
+        while(true){ // Process each Pax header entry
             int ch;
             int len = 0;
-            int read = 0;
+            int read = 0; // Total bytes read for the current entry
+
+            // Phase 1: Read length digits
+            // We read characters until a non-digit character is encountered.
+            // This non-digit must be a space, otherwise the format is incorrect.
             while((ch = i.read()) != -1) {
                 read++;
-                if (ch == ' '){
-                    // Get keyword
+                if (ch >= '0' && ch <= '9') {
+                    len *= 10;
+                    len += ch - '0';
+                } else {
+                    break; // Non-digit character found, should be the space
+                }
+            }
+
+            // After parsing length digits, 'ch' contains the character that terminated digit reading.
+            // It must be a space (' ').
+            if (ch == -1 && read == 0) { // EOF at the very beginning of the line (no more headers)
+                break; // Normal termination of pax headers parsing
+            }
+            if (ch != ' ') { // Expected a space after length digits
+                if (ch == '\n') {
+                    // This means the line was "length\n" without a keyword=value part.
+                    // E.g., "0\n" or "123\n". This is malformed according to the spec.
+                    // For "surviving blank lines", treat this as the end of valid headers.
+                    break; // Terminate Pax header parsing.
+                }
+                // Any other non-space, non-digit, non-newline character is an error.
+                throw new IOException("Malformed Paxheader. Expected space after length digits, but got '" + (char)ch + "' at position " + read);
+            }
+            // At this point, 'ch' is ' ', and 'read' counts the length digits and the space.
+            // 'len' holds the parsed integer value of the total entry length.
+
+            // Phase 2: Get keyword and the following equals sign
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+            boolean haveEquals = false; // Flag to ensure an equals sign is found
             while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
+                read++; // Keep incrementing overall 'read' counter for the current entry
+                if (ch == '='){ // End of keyword found
+                    haveEquals = true;
                     final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+                    
+                    // Get rest of entry (value + mandatory trailing newline)
+                    // 'len' is the total length of the entry including the initial 'length ' and 'keyword=' parts.
+                    // 'read' is the number of bytes consumed so far for these parts.
                     final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+
+                    // 'restLen' must be at least 1 (for the mandatory trailing newline).
+                    // If 'restLen' is 1, it means the value is empty (e.g., "keyword=\n").
+                    // If 'restLen' <= 0, it means the declared 'len' was smaller than
+                    // the bytes already read for the prefix and keyword. This is a malformed header.
+                    if (restLen < 1) {
+                        throw new IOException("Malformed Paxheader. Declared length " + len +
+                                              " is less than bytes already read (" + read +
+                                              "), or missing value/newline. restLen=" + restLen);
+                    }
+                    
+                    if (restLen == 1) { // Value is empty, only newline remains
                         headers.remove(keyword);
-                            } else {
+                    } else { // Value exists, including the trailing newline
                         final byte[] rest = new byte[restLen];
                         final int got = IOUtils.readFully(i, rest);
                         if (got != restLen) {
                             throw new IOException("Failed to read "
                                                   + "Paxheader. Expected "
                                                   + restLen
                                                   + " bytes, read "
-                                                          + got);
+                                                  + got + " for keyword " + keyword);
                         }
-                                // Drop trailing NL
+                        // Drop trailing NL (restLen - 1 to exclude the last byte which is NL)
                         final String value = new String(rest, 0,
                                                   restLen - 1, CharsetNames.UTF_8);
                         headers.put(keyword, value);
                     }
-                            break;
+                    break; // Processed single header entry, break from keyword loop
                 }
-                        coll.write((byte) ch);
+                coll.write((byte) ch); // Accumulate keyword bytes
             }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+
+            if (!haveEquals) { // Did not find equals sign after keyword, or EOF
+                throw new IOException("Malformed Paxheader. Premature EOF or missing '=' after keyword.");
             }
+            // The outer 'while(true)' loop continues to the next header entry after a successful parse.
         }
         return headers;
     }
\ No newline at end of file
