diff --git a/tmp/2e4a98e1-d67d-4128-a042-f890db58fab1_buggy.java b/tmp/a29dde78-6cd9-46af-adb2-4482cb35be4a_fixed.java
index 4b7e1e4..e38faae 100644
--- a/tmp/2e4a98e1-d67d-4128-a042-f890db58fab1_buggy.java
+++ b/tmp/a29dde78-6cd9-46af-adb2-4482cb35be4a_fixed.java
@@ -1,52 +1,116 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
+            boolean hadLengthDigits = false; // Flag to ensure at least one digit was read for length
+            boolean malformedEntry = false; // Flag to indicate if current entry is malformed and needs skipping
+            
+            // Loop to read length and the following space
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){
-                    // Get keyword
+                    // Ensure we actually parsed a length before the space
+                    if (!hadLengthDigits) {
+                        malformedEntry = true; // No digits read for length, skip this line
+                        break;
+                    }
+                    break; // Space found, proceed to keyword
+                }
+                // If not space, it must be a digit for the length
+                if (ch < '0' || ch > '9') {
+                    malformedEntry = true; // Non-digit character in length, skip this line
+                    break;
+                }
+                hadLengthDigits = true;
+                len *= 10;
+                len += ch - '0';
+            }
+
+            if (ch == -1){ // EOF while reading length or after parsing a good entry
+                break; // Exit main loop if EOF encountered
+            }
+
+            if (malformedEntry) {
+                // If the entry is malformed (e.g., non-digit in length, or space before digits),
+                // skip the rest of the line and try the next one.
+                while ((ch = i.read()) != -1 && ch != '\n') { /* consume */ }
+                if (ch == -1) { // Reached EOF while skipping
+                    break;
+                }
+                continue; // Process next line/entry
+            }
+
+            // At this point, we have successfully read `len` and the space after it.
+            // Now, get keyword and '='
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+            boolean foundEquals = false;
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == '='){ // end of keyword
+                    foundEquals = true;
+                    break;
+                }
+                coll.write((byte) ch);
+            }
+            
+            if (!foundEquals) {
+                // Malformed header: no '=' found. This line is invalid.
+                // Current `ch` could be -1 (EOF) or `\n` or another char.
+                // If `ch` is not -1, we should consume rest of the line.
+                if (ch != -1 && ch != '\n') { // If it's not EOF or already newline, consume
+                    while ((ch = i.read()) != -1 && ch != '\n') { /* consume */ }
+                }
+                if (ch == -1) { // Reached EOF while skipping
+                    break;
+                }
+                continue; // Process next line/entry
+            }
+
             final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+            
+            // Get rest of entry (value + trailing newline)
             final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
+            if (restLen < 1) { // restLen must be at least 1 (for the trailing NL)
+                // This indicates the advertised length 'len' is inconsistent with bytes read so far.
+                // This is the original NegativeArraySizeException case (if restLen < 0)
+                // or StringIndexOutOfBoundsException if restLen = 0 and (restLen - 1) is used.
+                // Skip the rest of this malformed line.
+                if (ch != -1 && ch != '\n') { // If it's not EOF or already newline, consume
+                    while ((ch = i.read()) != -1 && ch != '\n') { /* consume */ }
+                }
+                if (ch == -1) { // Reached EOF while skipping
+                    break;
+                }
+                continue; // Process next line/entry
+            }
+
+            if (restLen == 1) { // only NL is left, implies empty value
+                headers.remove(keyword); // Remove the key from the map as per spec for empty value
+            } else { // restLen > 1, so there is a value plus the NL
                 final byte[] rest = new byte[restLen];
                 final int got = IOUtils.readFully(i, rest);
                 if (got != restLen) {
+                    // This might happen if the stream ends prematurely, indicating truncation.
+                    // As per spec, this is an error condition.
                     throw new IOException("Failed to read "
                                           + "Paxheader. Expected "
                                           + restLen
                                           + " bytes, read "
-                                                          + got);
+                                          + got + " for keyword '" + keyword + "'.");
                 }
-                                // Drop trailing NL
+                // Drop trailing NL (restLen - 1 bytes for the actual value)
                 final String value = new String(rest, 0,
                                           restLen - 1, CharsetNames.UTF_8);
                 headers.put(keyword, value);
             }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
+            // A successfully processed header allows the outer while(true) loop to continue
+            // and parse the next header entry. No explicit `break` or `continue` is needed here
+            // as the loop naturally proceeds.
         }
         return headers;
     }
