diff --git a/tmp/fc485ee8-faf7-487a-a30b-f616c47c66e3_buggy.java b/tmp/1a1fd729-344c-47ad-be5b-fe10187a9594_fixed.java
index 4b7e1e4..84729c6 100644
--- a/tmp/fc485ee8-faf7-487a-a30b-f616c47c66e3_buggy.java
+++ b/tmp/1a1fd729-344c-47ad-be5b-fe10187a9594_fixed.java
@@ -1,52 +1,82 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while((ch = i.read()) != -1) {
                         read++;
                         if (ch == '='){ // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
                             // Get rest of entry
                             final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+
+                            if (restLen < 0) {
+                                // Malformed header: The declared length 'len' is less than
+                                // the bytes already consumed (length_digits + ' ' + keyword + '=').
+                                // Consume the rest of the current line until '\n' or EOF.
+                                int c;
+                                while ((c = i.read()) != -1 && c != '\n') {
+                                    // consume remaining bytes of the current line
+                                }
+                                // If EOF was reached while skipping, signal to outer loop to stop.
+                                if (c == -1) {
+                                    ch = -1; // Will cause outer loop to break
+                                }
+                                break; // Break from the inner 'keyword' loop to continue to next header
+                            } else if (restLen == 0) {
+                                // Malformed header: The declared length indicates no value and no newline.
+                                // Pax headers must end with a newline. Treat as malformed and ignore.
+                                // No more bytes to read for this entry.
+                                break; // Break from the inner 'keyword' loop to continue to next header
+                            } else if (restLen == 1) { // only NL
+                                // This means the entry was "length keyword=\n"
+                                // The value is empty, and the key should be removed.
+                                final byte[] rest = new byte[restLen]; // restLen is 1, so new byte[1] is fine.
+                                final int got = IOUtils.readFully(i, rest);
+                                if (got != restLen) {
+                                    throw new IOException("Failed to read "
+                                                          + "Paxheader. Expected "
+                                                          + restLen
+                                                          + " bytes, read "
+                                                          + got);
+                                }
                                 headers.remove(keyword);
-                            } else {
+                            } else { // Normal case: restLen > 1 (value and trailing NL)
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                           + "Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
                                                           restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
-                            break;
+                            break; // Processed single header
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
                 len *= 10;
                 len += ch - '0';
             }
             if (ch == -1){ // EOF
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
