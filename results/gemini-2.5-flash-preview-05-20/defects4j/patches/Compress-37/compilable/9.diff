diff --git a/tmp/fe10b321-da10-4d02-bda8-7b78301a3ee1_buggy.java b/tmp/ca5579a8-8f2c-4af3-9ac1-3310fb85e943_fixed.java
index 4b7e1e4..dc76e76 100644
--- a/tmp/fe10b321-da10-4d02-bda8-7b78301a3ee1_buggy.java
+++ b/tmp/ca5579a8-8f2c-4af3-9ac1-3310fb85e943_fixed.java
@@ -1,52 +1,86 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
-        while(true){ // get length
+        while(true){ // Process each header entry
             int ch;
-            int len = 0;
-            int read = 0;
+            int len = 0; // The total length of the current entry including length field itself
+            int currentEntryBytesRead = 0; // Tracks bytes read for the current entry from the start
+            
+            // 1. Read 'length' part and the following space
             while((ch = i.read()) != -1) {
-                read++;
+                currentEntryBytesRead++; // Increment for each byte read
                 if (ch == ' '){
-                    // Get keyword
+                    // End of 'length' part and space.
+                    // currentEntryBytesRead now holds (length of length string + 1 for space)
+                    // len holds the total length of the entry.
+                    // Proceed to read keyword=value\n
+                    
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+                    // 2. Read 'keyword' part
                     while((ch = i.read()) != -1) {
-                        read++;
+                        currentEntryBytesRead++; // Increment for each byte read
                         if (ch == '='){ // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
+                            
+                            // 3. Calculate remaining length for 'value\n'
+                            // currentEntryBytesRead now holds (length of length string + 1 for space + length of keyword + 1 for '=')
+                            final int restLen = len - currentEntryBytesRead;
+
+                            // Sanity check: restLen must be non-negative.
+                            // If it's negative, the declared 'len' was too small for the actual content read so far.
+                            if (restLen < 0) {
+                                throw new IOException("Malformed Paxheader. Declared length "
+                                                      + len + " is shorter than actual length "
+                                                      + currentEntryBytesRead + " already read for keyword '"
+                                                      + keyword + "'.");
+                            }
+
+                            // If restLen is 1, it implies the remaining part is only the newline '\n'.
+                            // This means the value was empty, i.e., "keyword=\n".
+                            // As per spec (and common interpretation for this parser that requires '='),
+                            // an empty value should result in setting the value to an empty string.
+                            if (restLen == 1) { // only NL expected
+                                headers.put(keyword, ""); // Correctly handle empty value (e.g. "key=\n")
                             } else {
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                           + "Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
-                                // Drop trailing NL
+                                // Drop trailing NL (which is the last byte of rest)
                                 final String value = new String(rest, 0,
                                                           restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
-                            break;
+                            break; // Processed single header (keyword=value)
+                        }
+                        // Validate that ch is not a newline within keyword parsing.
+                        // Newline should only appear at the very end of the entry.
+                        if (ch == '\n') {
+                            throw new IOException("Malformed Paxheader. Newline encountered before equals sign in keyword.");
                         }
                         coll.write((byte) ch);
                     }
-                    break; // Processed single header
+                    // This `break` processes single header entry (length ... value\n) and moves to next line.
+                    break;
+                }
+                // Still parsing 'length' part
+                // Validate that ch is a digit. If not, it's a malformed header.
+                if (ch < '0' || ch > '9') {
+                    throw new IOException("Invalid Paxheader. Non-digit character '" + (char)ch + "' in length field.");
                 }
                 len *= 10;
                 len += ch - '0';
             }
-            if (ch == -1){ // EOF
-                break;
+            if (ch == -1){ // EOF encountered while reading length or keyword
+                break; // No more entries
             }
         }
         return headers;
     }
