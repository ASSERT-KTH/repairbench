diff --git a/tmp/5800f0b2-e247-4a2f-9a3f-670b52b81018_buggy.java b/tmp/7a269a41-75c0-4d72-9482-5ea83baba6ae_fixed.java
index 4aff4e4..7ee8e5b 100644
--- a/tmp/5800f0b2-e247-4a2f-9a3f-670b52b81018_buggy.java
+++ b/tmp/7a269a41-75c0-4d72-9482-5ea83baba6ae_fixed.java
@@ -1,15 +1,53 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        String originalValue = attr.getValue(); // Get the original attribute value
+        String resolvedValue = el.absUrl(attr.getKey()); // Get the absolute/resolved URL. This might be empty if baseUri is blank.
 
+        boolean protocolMatched = false;
+
+        // First, try to match protocols against the original value.
+        // This is crucial for custom absolute protocols (like cid:, data:) that absUrl might mishandle
+        // if the document has no base URI.
+        for (Protocol protocol : protocols) {
+            String prot = protocol.toString() + ":";
+            if (originalValue.toLowerCase().startsWith(prot)) {
+                protocolMatched = true;
+                break;
+            }
+        }
+
+        // If the original value didn't match, and the resolved value is not empty,
+        // try to match protocols against the resolved value.
+        // This covers cases where originalValue was a relative URL that resolved to an allowed absolute protocol.
+        if (!protocolMatched && !resolvedValue.isEmpty()) {
             for (Protocol protocol : protocols) {
                 String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+                if (resolvedValue.toLowerCase().startsWith(prot)) {
+                    protocolMatched = true;
+                    break;
                 }
             }
+        }
+
+        // If no valid protocol was found in either the original or resolved value, return false.
+        if (!protocolMatched) {
             return false;
         }
+
+        // If a valid protocol was found, now handle the attribute value update based on `preserveRelativeLinks`.
+        if (!preserveRelativeLinks) {
+            // If the original value was valid (e.g., "cid:12345") but `absUrl` produced an empty string (due to a bug/edge case),
+            // then we should revert the attribute's value to the original to preserve the valid content.
+            // This prevents valid custom scheme URLs from being dropped as empty.
+            if (resolvedValue.isEmpty() && !originalValue.isEmpty()) { // Check originalValue.isEmpty() to prevent "removing" an already empty string
+                attr.setValue(originalValue);
+            } else if (!resolvedValue.isEmpty()) {
+                // Otherwise, if `absUrl` produced a non-empty (and presumably correct) resolved value, use that.
+                // This handles cases where relative URLs were resolved to absolute.
+                attr.setValue(resolvedValue);
+            }
+            // If resolvedValue is empty and originalValue was also empty or not an absolute URL starting with allowed protocol,
+            // then it's implicitly handled as not being set/retained, which aligns with removal for unresolvable relative links.
+        }
+
+        return true; // A valid protocol was found and the attribute value was handled.
+    }
\ No newline at end of file
