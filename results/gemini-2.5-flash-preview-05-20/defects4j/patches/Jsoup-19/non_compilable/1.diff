diff --git a/tmp/2f94a66b-65af-4f74-b3f3-1c937e5e3892_buggy.java b/tmp/e8cd28f9-f3de-4d6a-aaff-f0ffc885e2dd_fixed.java
index 4aff4e4..b17b4ca 100644
--- a/tmp/2f94a66b-65af-4f74-b3f3-1c937e5e3892_buggy.java
+++ b/tmp/e8cd28f9-f3de-4d6a-aaff-f0ffc885e2dd_fixed.java
@@ -1,15 +1,42 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        String originalValue = attr.getVal();
 
+        // First, check if the original value explicitly starts with one of the allowed protocols.
+        // This is crucial for custom protocols (like "cid:" or "data:") that are effectively absolute
+        // and should be preserved as-is, bypassing potential mishandling by el.absUrl() for non-standard schemes.
         for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+            String protStr = protocol.toString() + ":";
+            if (originalValue.toLowerCase().startsWith(protStr)) {
+                // If the original value matches an allowed custom protocol,
+                // it's considered valid. We explicitly set the attribute value
+                // back to its original form to ensure it's not altered.
+                attr.setValue(originalValue);
                 return true;
             }
         }
+
+        // If the original value did not match any explicit custom protocols (e.g., it's http:, or a relative path),
+        // then proceed with standard URL resolution logic using el.absUrl().
+        String resolvedValue = el.absUrl(attr.getKey());
+        
+        // If preserveRelativeLinks is false, update the attribute with the resolved absolute URL.
+        // For custom protocols, this step is bypassed by the earlier check.
+        // For standard URLs, absUrl typically returns an absolute URL, which is then set.
+        if (!preserveRelativeLinks) {
+            attr.setValue(resolvedValue);
+        }
+        
+        // Finally, check the (potentially resolved) value against the allowed protocols.
+        // This covers standard protocols (http, https, ftp) that might have been absolutized,
+        // and also situations where absUrl might correctly preserve a custom protocol (though
+        // the earlier block explicitly handles this to be safe).
+        for (Protocol protocol : protocols) {
+            String protStr = protocol.toString() + ":";
+            if (resolvedValue.toLowerCase().startsWith(protStr)) {
+                return true;
+            }
+        }
+
+        // No valid protocol found for either the original or resolved value
         return false;
     }
\ No newline at end of file
