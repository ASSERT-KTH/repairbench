diff --git a/tmp/2b6afd50-743a-4a74-9b90-59b95595cc0e_buggy.java b/tmp/acfd4b3b-f0ce-4b03-8412-5b17857f0fc7_fixed.java
index 4aff4e4..140387f 100644
--- a/tmp/2b6afd50-743a-4a74-9b90-59b95595cc0e_buggy.java
+++ b/tmp/acfd4b3b-f0ce-4b03-8412-5b17857f0fc7_fixed.java
@@ -1,15 +1,39 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        String originalValue = attr.getValue();
 
+        // First, check the original attribute value against whitelisted protocols.
+        // This handles cases like "cid:12345" or "data:image/png;base64,..."
+        // which are not standard web URLs and absUrl might incorrectly resolve them
+        // to empty strings if baseUri is not present or malformed.
         for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+            String protStr = protocol.toString() + ":";
+            if (originalValue.toLowerCase().startsWith(protStr)) {
                 return true;
             }
         }
+
+        // If the original value didn't match a whitelisted protocol prefix,
+        // then try to resolve it to an absolute URL and check that.
+        // This covers relative URLs (e.g., "/path/to/img.png") that should resolve
+        // against a base URI and then be checked against standard protocols like http/https.
+        String resolvedValue = el.absUrl(attr.getKey());
+
+        // If preserveRelativeLinks is false, update the attribute value to the resolved absolute URL.
+        // This part is only reached if the original value didn't match a custom protocol directly.
+        if (!preserveRelativeLinks) {
+            attr.setValue(resolvedValue);
+        }
+        
+        // Now check the (potentially) resolved value against the protocols.
+        // This catches cases where a relative URL (e.g., /path/to/img.png)
+        // resolves to an absolute URL (e.g., http://example.com/path/to/img.png)
+        // and needs to be validated against "http:" or "https:".
+        for (Protocol protocol : protocols) {
+            String protStr = protocol.toString() + ":";
+            if (resolvedValue.toLowerCase().startsWith(protStr)) {
+                return true;
+            }
+        }
+        
         return false;
     }
