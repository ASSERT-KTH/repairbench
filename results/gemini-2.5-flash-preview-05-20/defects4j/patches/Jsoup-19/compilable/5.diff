diff --git a/tmp/17d515fd-af79-4ec3-8374-847be8f1bb9c_buggy.java b/tmp/b2648cc1-c30e-48f4-b3d3-1d5be97496ad_fixed.java
index 4aff4e4..6b2a3d1 100644
--- a/tmp/17d515fd-af79-4ec3-8374-847be8f1bb9c_buggy.java
+++ b/tmp/b2648cc1-c30e-48f4-b3d3-1d5be97496ad_fixed.java
@@ -1,15 +1,46 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        String originalValue = attr.getValue();
+        String originalValueLower = originalValue.toLowerCase();
 
+        // First, check if the original value already has a valid protocol.
+        // This is crucial for custom protocols (like 'cid:' or 'data:')
+        // which are absolute in their own right and should not be resolved relative to the base URI
+        // by Element.absUrl, as that might prepend the base URI and change the protocol.
         for (Protocol protocol : protocols) {
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+            if (originalValueLower.startsWith(prot)) {
+                // If the original value starts with an allowed protocol, it's valid.
+                // Ensure the attribute value for output is the original absolute form
+                // if relative links are not preserved. For 'cid:' or 'data:', the original value
+                // is the correct absolute form. For 'http:', the original is also correct.
+                if (!preserveRelativeLinks) {
+                    attr.setValue(originalValue);
+                }
+                return true;
+            }
+        }
+
+        // If no direct protocol match on the original value, it might be a relative URL
+        // (e.g., 'foo.html') or an implicitly absolute URL that Jsoup's absUrl can resolve
+        // (e.g., '//example.com/foo.html').
+        // Resolve the value to an absolute URL using the element's base URI.
+        String resolvedValue = el.absUrl(attr.getKey());
+        String resolvedValueLower = resolvedValue.toLowerCase();
+
+        // Now, check if this resolved value matches any allowed protocol.
+        // This handles relative URLs that resolve to standard protocols (http, https, etc.).
+        for (Protocol protocol : protocols) {
+            String prot = protocol.toString() + ":";
+            if (resolvedValueLower.startsWith(prot)) {
+                // If a valid protocol is found in the resolved value.
+                // Update the attribute value to the resolved absolute form if not preserving relative links.
+                if (!preserveRelativeLinks) {
+                    attr.setValue(resolvedValue);
+                }
                 return true;
             }
         }
+
+        // No valid protocol found in original or resolved form.
         return false;
     }
\ No newline at end of file
