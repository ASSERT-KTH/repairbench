diff --git a/tmp/5eaaa5e1-59a0-464e-9891-7f74b25d95b9_buggy.java b/tmp/1dfc34ad-abc8-43eb-b6ae-d1b82666876e_fixed.java
index 4aff4e4..3176512 100644
--- a/tmp/5eaaa5e1-59a0-464e-9891-7f74b25d95b9_buggy.java
+++ b/tmp/1dfc34ad-abc8-43eb-b6ae-d1b82666876e_fixed.java
@@ -1,15 +1,43 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        String originalValue = attr.getValue();
 
+        // First, check if the original attribute value explicitly starts with any allowed protocol.
+        // This is crucial for custom protocols (e.g., "cid:12345", "data:gzzt")
+        // and also for already absolute standard URLs (e.g., "http://example.com/image.png").
         for (Protocol protocol : protocols) {
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+            if (originalValue.toLowerCase().startsWith(prot)) {
+                // If the original value already contains a valid protocol prefix,
+                // it's considered valid. We should not attempt to resolve it with el.absUrl()
+                // as that might incorrectly strip custom protocols or non-standard schemes.
+                // The attribute will be kept with its original value in this case.
                 return true;
             }
         }
+
+        // If we reach here, the original value does not start with any of the explicitly allowed protocols.
+        // This implies it's either a relative URL (e.g., "path/to/img.png") or an unknown/invalid protocol.
+        // For relative URLs, we attempt to resolve them to an absolute URL based on the element's base URI.
+        // For other unrecognized protocols, absUrl might return an empty string.
+        String resolvedValue = el.absUrl(attr.getKey());
+
+        // If `preserveRelativeLinks` is false, the attribute's value should be updated
+        // to its resolved absolute form (or an empty string if resolution failed/invalid).
+        // This ensures the output HTML always contains absolute URLs when configured this way.
+        if (!preserveRelativeLinks) {
+            attr.setValue(resolvedValue);
+        }
+
+        // Now, check if the resolved value starts with any of the allowed protocols.
+        // This check primarily covers standard protocols (like http, https) for resolved relative URLs.
+        for (Protocol protocol : protocols) {
+            String prot = protocol.toString() + ":";
+            if (resolvedValue.toLowerCase().startsWith(prot)) {
+                return true;
+            }
+        }
+
+        // If neither the original value (for explicit protocols) nor the resolved value
+        // matched an allowed protocol, then the attribute is considered invalid.
         return false;
     }
\ No newline at end of file
