diff --git a/tmp/321d9c08-abbc-4ada-9f31-679ac1b0f896_buggy.java b/tmp/479f0b85-86a2-431a-860f-cbf9aeca7d38_fixed.java
index 4aff4e4..4e4f919 100644
--- a/tmp/321d9c08-abbc-4ada-9f31-679ac1b0f896_buggy.java
+++ b/tmp/479f0b85-86a2-431a-860f-cbf9aeca7d38_fixed.java
@@ -1,15 +1,23 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        // Store the original value of the attribute for protocol validation.
+        String originalValue = attr.getValue();
+        // Resolve the URL to an absolute form. This value might be used for output formatting.
+        String resolvedValue = el.absUrl(attr.getKey());
 
+        // If not preserving relative links, update the attribute value to its resolved (absolute) form.
+        // This is for output HTML presentation, not for determining protocol validity.
+        if (!preserveRelativeLinks) {
+            attr.setValue(resolvedValue);
+        }
+        
+        // Check if the original attribute value starts with any of the allowed protocols.
+        // This ensures protocols like 'cid:' or 'data:' are validated based on their original form,
+        // without being affected by absUrl's potential transformations when a baseUri is present.
         for (Protocol protocol : protocols) {
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+            if (originalValue.toLowerCase().startsWith(prot)) {
                 return true;
             }
         }
         return false;
     }
