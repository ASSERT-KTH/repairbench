diff --git a/tmp/a0be2c6f-6f6f-4831-b978-d5d02b4b489c_buggy.java b/tmp/269ee370-b653-4f3b-9bf7-d83ea309fd51_fixed.java
index 4aff4e4..042b0c1 100644
--- a/tmp/a0be2c6f-6f6f-4831-b978-d5d02b4b489c_buggy.java
+++ b/tmp/269ee370-b653-4f3b-9bf7-d83ea309fd51_fixed.java
@@ -1,15 +1,29 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
         // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
         // rels without a baseuri get removed
         String value = el.absUrl(attr.getKey());
         if (!preserveRelativeLinks)
             attr.setValue(value);
         
-        for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+        // Iterate over the set using Object to safely handle both Protocol enum instances
+        // and String instances (for custom protocols passed due to type erasure).
+        for (Object obj : protocols) {
+            String protStr;
+            if (obj instanceof Protocol) {
+                // If it's a standard Protocol enum, get its string representation
+                protStr = ((Protocol) obj).toString();
+            } else if (obj instanceof String) {
+                // If it's a custom protocol passed as a String (due to type erasure), use it directly
+                protStr = (String) obj;
+            } else {
+                // If an unexpected type is encountered, skip it
+                continue;
+            }
+
+            // Check if the attribute value starts with the protocol string followed by a colon
+            if (value.toLowerCase().startsWith(protStr + ":")) {
                 return true;
             }
         }
         return false;
     }
