diff --git a/tmp/dfe80027-c6d8-406d-9c1b-c8a8f303eb48_buggy.java b/tmp/4621a479-c63f-4f15-830e-11b873fe37ca_fixed.java
index 4aff4e4..32cf0dc 100644
--- a/tmp/dfe80027-c6d8-406d-9c1b-c8a8f303eb48_buggy.java
+++ b/tmp/4621a479-c63f-4f15-830e-11b873fe37ca_fixed.java
@@ -1,15 +1,42 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        String originalValue = attr.getValue();
+        String processedValue; // This will hold the value to be used for checks and potentially set on the attribute
 
+        // First, check if the original value already starts with a whitelisted protocol.
+        // This is crucial for custom protocols (like "cid:", "data:") which java.net.URL cannot resolve.
+        boolean isAlreadyAbsoluteWithKnownProtocol = false;
         for (Protocol protocol : protocols) {
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+            if (originalValue.toLowerCase().startsWith(prot)) {
+                isAlreadyAbsoluteWithKnownProtocol = true;
+                break;
+            }
+        }
+
+        if (isAlreadyAbsoluteWithKnownProtocol) {
+            // If it's already an absolute URL with a whitelisted protocol, use the original value.
+            // No resolution via el.absUrl() is needed, as it would fail for custom protocols.
+            processedValue = originalValue;
+        } else {
+            // For other cases (relative URLs like "/path/to/img.png", or standard absolute URLs like "http://example.com"),
+            // try to resolve them using el.absUrl().
+            // If el.absUrl() returns an empty string (e.g., for unknown/malformed standard protocols),
+            // processedValue will correctly become "" causing the attribute to be dropped.
+            processedValue = el.absUrl(attr.getKey());
+        }
+
+        // If relative links are not preserved, update the attribute's value to the processed (absolute or original) value.
+        // This ensures the output HTML contains absolute URLs when required.
+        if (!preserveRelativeLinks) {
+            attr.setValue(processedValue);
+        }
+        
+        // Finally, check if the processed value starts with any of the allowed protocols.
+        for (Protocol protocol : protocols) {
+            String prot = protocol.toString() + ":";
+            if (processedValue.toLowerCase().startsWith(prot)) {
                 return true;
             }
         }
         return false;
     }
