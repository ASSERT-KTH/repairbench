diff --git a/tmp/39ab662b-c106-469c-8e1a-7f817ebaba1e_buggy.java b/tmp/4fb78c09-6f46-4227-9a60-08acf8e99622_fixed.java
index 4aff4e4..8cfcf3e 100644
--- a/tmp/39ab662b-c106-469c-8e1a-7f817ebaba1e_buggy.java
+++ b/tmp/4fb78c09-6f46-4227-9a60-08acf8e99622_fixed.java
@@ -1,15 +1,40 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
+        String originalValue = attr.getValue();
+
+        // First, check if the original value already matches an allowed protocol (e.g., http:, cid:, data:)
+        // This is crucial for custom protocols that absUrl might not handle correctly.
+        for (Protocol protocol : protocols) {
+            String prot = protocol.toString() + ":";
+            if (originalValue.toLowerCase().startsWith(prot)) {
+                // If it starts with a valid protocol, it's considered valid.
+                // For custom protocols (like cid:, data:), they are already absolute
+                // in their own context. No need to call absUrl or change the attribute value
+                // in this case, as it's already in its desired absolute form.
+                return true;
+            }
+        }
+
+        // If the original value didn't match a known protocol prefix,
+        // it might be a relative URL (e.g., "foo.png") or an invalid one.
+        // Try to resolve it to an absolute URL using the element's base URI.
+        // This will correctly resolve relative paths and handle scheme-relative URLs (e.g., "//example.com").
+        String resolvedValue = el.absUrl(attr.getKey());
+
+        // Now, check if the resolved value matches any allowed protocol.
+        // This is primarily for "http:" or "https:" URLs that were originally relative
+        // or scheme-relative and have now been made absolute.
+        for (Protocol protocol : protocols) {
+            String prot = protocol.toString() + ":";
+            if (resolvedValue.toLowerCase().startsWith(prot)) {
+                // If the resolved value is valid, and we are not preserving relative links,
+                // update the attribute value to the resolved (absolute) URL.
                 if (!preserveRelativeLinks)
-            attr.setValue(value);
-        
-        for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+                    attr.setValue(resolvedValue);
                 return true;
             }
         }
+
+        // If neither the original value (for direct protocol matches) nor the resolved value
+        // matched any allowed protocol, then the attribute is invalid.
         return false;
     }
\ No newline at end of file
