diff --git a/tmp/71e573e8-b344-479a-8722-c4ccdfcb1a0b_buggy.java b/tmp/5d6cec01-3e39-4bc9-b5f9-190c72419e21_fixed.java
index 56b2d66..e2dd2fa 100644
--- a/tmp/71e573e8-b344-479a-8722-c4ccdfcb1a0b_buggy.java
+++ b/tmp/5d6cec01-3e39-4bc9-b5f9-190c72419e21_fixed.java
@@ -1,45 +1,63 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        columnsToDrop.add(0); // Phase 1 objective function value column (column 0)
 
-        // positive cost non-artificial variables
+        // positive cost non-artificial variables (original and slack variables)
+        // These are columns from index getNumObjectiveFunctions() up to getArtificialVariableOffset() - 1
+        // If getNumObjectiveFunctions() is 2 (Phase 1 active), this means columns from index 2 onwards.
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
+            final double entry = tableau.getEntry(0, i); // Check coefficients in Phase 1 objective row
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
         // non-basic artificial variables
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
+          // Check if artificial variable is non-basic (getBasicRow returns null)
           if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
           }
         }
 
+        // Create the new matrix, excluding the dropped columns and the phase 1 objective row
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
+        for (int i = 1; i < getHeight(); i++) { // Start from row 1 (original objective or constraints)
           int col = 0;
           for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
               matrix[i - 1][col++] = tableau.getEntry(i, j);
             }
           }
         }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+        // Update column labels based on the columns that are kept
+        List<String> newColumnLabels = new ArrayList<String>();
+        for (int k = 0; k < columnLabels.size(); k++) { // k is index in columnLabels
+            int tableauColIdx;
+            if (k == columnLabels.size() - 1) { // This is the RHS label
+                tableauColIdx = getWidth() - 1;
+            } else { // This is a variable label (x, s, a)
+                // Tableau column index is 1 greater than columnLabels index because tableau column 0
+                // is the objective function value and doesn't have a label in columnLabels.
+                tableauColIdx = k + 1;
             }
 
+            if (!columnsToDrop.contains(tableauColIdx)) {
+                newColumnLabels.add(columnLabels.get(k));
+            }
+        }
+        this.columnLabels = newColumnLabels;
+
         this.tableau = new Array2DRowRealMatrix(matrix);
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
