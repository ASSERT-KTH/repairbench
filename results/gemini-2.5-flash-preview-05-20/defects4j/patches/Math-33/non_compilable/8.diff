diff --git a/tmp/eb933e31-6033-4439-ba51-e0a19e56939e_buggy.java b/tmp/1b1643d7-b111-4e2c-8ed9-eed83bc4a406_fixed.java
index 56b2d66..851db83 100644
--- a/tmp/eb933e31-6033-4439-ba51-e0a19e56939e_buggy.java
+++ b/tmp/1b1643d7-b111-4e2c-8ed9-eed83bc4a406_fixed.java
@@ -1,45 +1,63 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        columnsToDrop.add(0); // Always drop the phase 1 objective column (column 0)
 
-        // positive cost non-artificial variables
+        // Identify positive cost non-artificial variables in the phase 1 objective row (row 0).
+        // These are variables (original or slack/surplus) that have a positive coefficient
+        // in the phase 1 objective function. Such variables should be removed from the tableau
+        // for phase 2.
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
+            final double entry = tableau.getEntry(0, i); // Check the coefficient in the phase 1 objective row
+            if (Precision.compareTo(entry, 0d, maxUlps) > 0) { // If the coefficient is effectively positive
+                columnsToDrop.add(i); // Add the column index to the list of columns to drop
             }
         }
 
-        // non-basic artificial variables
+        // Identify non-basic artificial variables.
+        // At the end of phase 1, if the phase 1 objective value is zero, all artificial variables
+        // must have a value of zero. Non-basic artificial variables can therefore be removed.
         for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
-            columnsToDrop.add(col);
+            int col = i + getArtificialVariableOffset(); // Calculate the actual column index of the artificial variable
+            if (getBasicRow(col) == null) { // If the artificial variable is non-basic (not part of the current basis)
+                columnsToDrop.add(col); // Add its column index to the list of columns to drop
             }
         }
 
+        // Create the new tableau matrix. It will have one less row (the phase 1 objective row)
+        // and fewer columns (the dropped columns).
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        for (int i = 1; i < getHeight(); i++) { // Iterate over rows, starting from row 1 (skipping phase 1 objective row)
+            int col = 0; // Initialize column index for the new matrix row
+            for (int j = 0; j < getWidth(); j++) { // Iterate over columns of the original tableau
+                if (!columnsToDrop.contains(j)) { // If the current column 'j' is not in the list of columns to drop
+                    matrix[i - 1][col++] = tableau.getEntry(i, j); // Copy the element to the new matrix. 'i-1' adjusts for the removed row 0.
                 }
             }
         }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+        // BUG FIX: The original code for updating columnLabels was incorrect.
+        // It attempted to remove elements by index from the existing list, but the indices
+        // in `columnsToDrop` refer to original positions, and `List.remove(int index)` shifts
+        // subsequent elements, leading to incorrect removals when multiple columns are dropped.
+        // The fix is to reconstruct the `columnLabels` list entirely based on which
+        // columns are retained.
+        List<Integer> newColumnLabels = new ArrayList<Integer>();
+        for (int j = 0; j < getWidth(); j++) { // Iterate over the original column indices
+            if (!columnsToDrop.contains(j)) { // If this column is not scheduled to be dropped
+                newColumnLabels.add(columnLabels.get(j)); // Add its original label to the new list
             }
+        }
+        this.columnLabels = newColumnLabels; // Update the tableau's column labels to the new list
 
+        // Update the tableau matrix and set the number of artificial variables to zero.
         this.tableau = new Array2DRowRealMatrix(matrix);
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
