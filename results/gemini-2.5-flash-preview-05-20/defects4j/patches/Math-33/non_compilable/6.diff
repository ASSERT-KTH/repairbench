diff --git a/tmp/ac631981-095f-425d-a526-284b61f509af_buggy.java b/tmp/d4d3a1a4-06ff-4374-abec-b5e6de63443a_fixed.java
index 56b2d66..62b4ad1 100644
--- a/tmp/ac631981-095f-425d-a526-284b61f509af_buggy.java
+++ b/tmp/d4d3a1a4-06ff-4374-abec-b5e6de63443a_fixed.java
@@ -1,45 +1,85 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        columnsToDrop.add(0); // Column 0 is the constant term of the objective function (always removed)
 
         // positive cost non-artificial variables
+        // These are variables (typically slack/surplus or original variables)
+        // that are not artificial but have a positive coefficient in the phase 1 objective.
+        // They are usually non-basic and are removed.
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
+            final double entry = tableau.getEntry(0, i); // Check the coefficient in the phase 1 objective row (row 0)
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
         // non-basic artificial variables
+        // These are artificial variables that are not part of the current basis.
+        // They are no longer needed for phase 2.
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
+          // getBasicRow(col) returns the row index if 'col' is a basic variable, null otherwise.
+          if (getBasicRow(col) == null) { // If 'col' is a non-basic artificial variable
             columnsToDrop.add(col);
           }
         }
 
+        // Sort the indices to drop in ascending order. This is important for:
+        // 1. Correctly calculating the new indices for basic variables.
+        // 2. Ensuring that columnLabels.remove works correctly when removing in reverse order.
+        Collections.sort(columnsToDrop);
+
+        // Construct the new matrix without the dropped columns and the phase 1 objective row.
+        // The new matrix will have one less row (phase 1 objective) and `columnsToDrop.size()` fewer columns.
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        for (int i = 1; i < getHeight(); i++) { // Iterate through original rows, starting from row 1 (phase 2 objective and constraints)
+          int col = 0; // Column index for the new matrix
+          for (int j = 0; j < getWidth(); j++) { // Iterate through all original columns
+            if (!columnsToDrop.contains(j)) { // If the current column 'j' is NOT in the list of columns to drop
+              matrix[i - 1][col++] = tableau.getEntry(i, j); // Copy the entry to the new matrix, adjusting row index
             }
           }
         }
 
+        // Update column labels.
+        // Iterate in reverse order of the sorted indices to drop. This prevents index shifting issues
+        // when removing elements from a List by index.
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
           columnLabels.remove((int) columnsToDrop.get(i));
         }
 
+        // The core fix: Update basicRows to reflect the new column indices.
+        // The basicRows array maps row index to the column index of its basic variable.
+        // Since row 0 (phase 1 objective) is removed, all subsequent row indices shift by -1.
+        // Also, column indices for non-dropped columns shift based on how many columns before them were dropped.
+        int[] newBasicRows = new int[getHeight() - 1];
+        // Iterate through the original basicRows from row 1 onwards (as original row 0 is dropped).
+        for (int i = 1; i < getHeight(); i++) {
+            int originalBasicCol = basicRows[i]; // Get the original basic column index for this row
+
+            // Calculate the new column index for this basic variable.
+            // Subtract 1 from the original column index for every column dropped that came before it.
+            int newBasicCol = originalBasicCol;
+            for (Integer droppedColIdx : columnsToDrop) {
+                if (droppedColIdx < originalBasicCol) {
+                    newBasicCol--;
+                }
+            }
+            // Assign the new basic column index to the corresponding new row index (original row index - 1).
+            newBasicRows[i - 1] = newBasicCol;
+        }
+        this.basicRows = newBasicRows; // Update the tableau's basicRows member.
+
+        // Update the tableau's matrix.
         this.tableau = new Array2DRowRealMatrix(matrix);
+        // Reset the count of artificial variables as they are no longer in use in phase 2.
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
