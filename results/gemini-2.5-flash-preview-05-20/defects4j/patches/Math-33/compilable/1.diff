diff --git a/tmp/0d9db05b-0e1a-494f-a43b-feec84deb9ed_buggy.java b/tmp/e4106134-2562-43d8-afd4-63b30159cb65_fixed.java
index 56b2d66..7d8cfb2 100644
--- a/tmp/0d9db05b-0e1a-494f-a43b-feec84deb9ed_buggy.java
+++ b/tmp/e4106134-2562-43d8-afd4-63b30159cb65_fixed.java
@@ -1,45 +1,68 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        // BUG FIX: Column 0 represents the right-hand side / objective value.
+        // It should not be dropped, as it's not a variable.
+        // The phase 1 objective function (row 0) is dropped separately below.
+        // columnsToDrop.add(0); // This line is removed.
 
         // positive cost non-artificial variables
+        // Iterate through columns that represent non-artificial variables
+        // (decision variables, slack/surplus variables)
+        // starting from the first variable column after any potential extra objective columns
+        // up to the offset of artificial variables.
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
+            // If the coefficient in the phase 1 objective row (row 0) is positive,
+            // this variable column should be dropped.
             final double entry = tableau.getEntry(0, i);
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
         // non-basic artificial variables
+        // Iterate through all artificial variable columns.
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
+          // If the artificial variable is non-basic (i.e., its value is 0),
+          // its column should be dropped.
           if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
           }
         }
 
+        // Create a new matrix for the tableau.
+        // The height is reduced by 1 to remove the phase 1 objective row.
+        // The width is reduced by the number of columns identified for dropping.
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+        // Copy rows from the original tableau to the new matrix.
+        // Start from row 1 (skipping the phase 1 objective row at index 0).
         for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+          int col = 0; // Current column index for the new matrix.
+          // Iterate through all columns of the original tableau.
           for (int j = 0; j < getWidth(); j++) {
+            // If the current original column 'j' is NOT in the list of columns to drop,
+            // copy its entry to the new matrix.
             if (!columnsToDrop.contains(j)) {
               matrix[i - 1][col++] = tableau.getEntry(i, j);
             }
           }
         }
 
+        // Update the column labels to reflect the dropped columns.
+        // Iterate backwards to avoid issues with index shifts during removal from the list.
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
           columnLabels.remove((int) columnsToDrop.get(i));
         }
 
+        // Set the new tableau and reset the artificial variable count.
         this.tableau = new Array2DRowRealMatrix(matrix);
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
