diff --git a/tmp/cbdc606f-c56d-4c22-becf-f0cc5c20ca38_buggy.java b/tmp/0ad2ad4d-9221-48a9-89c7-03eb22cfe07e_fixed.java
index 56b2d66..d403aa5 100644
--- a/tmp/cbdc606f-c56d-4c22-becf-f0cc5c20ca38_buggy.java
+++ b/tmp/0ad2ad4d-9221-48a9-89c7-03eb22cfe07e_fixed.java
@@ -1,45 +1,79 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
+            // If there's only one objective function, it means phase 1 objective
+            // has already been dropped or was never added (e.g., if no artificial variables were needed).
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        // The first column (index 0) of the tableau typically represents the right-hand side (RHS)
+        // values of the constraints and the objective function value. This column should never be
+        // dropped as it's fundamental to the tableau's structure and the simplex algorithm's
+        // calculations. The phase 1 objective is removed by constructing a new tableau
+        // that excludes the first row (the phase 1 objective row), not by dropping the first column.
+        // The line `columnsToDrop.add(0);` was incorrectly marking the RHS column for removal
+        // and has been removed as part of the fix.
 
-        // positive cost non-artificial variables
+        // Identify positive cost non-artificial variables to drop.
+        // These are variables (columns) whose coefficients in the phase 1 objective function (row 0)
+        // are positive, and they are not artificial variables. Such variables are typically
+        // redundant for Phase 2 optimization.
+        // The loop starts from getNumObjectiveFunctions() (which is 1 here, indicating
+        // the presence of a Phase 2 objective function in the tableau) up to the offset
+        // where artificial variables begin. This covers decision variables, slack, and excess variables.
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
+            final double entry = tableau.getEntry(0, i); // Get the coefficient from the phase 1 objective row (row 0)
+            if (Precision.compareTo(entry, 0d, maxUlps) > 0) { // If the coefficient is positive
+                columnsToDrop.add(i); // Add this column (variable) index to the list of columns to be dropped
             }
         }
 
-        // non-basic artificial variables
+        // Identify non-basic artificial variables to drop.
+        // At the end of Phase 1, artificial variables that are non-basic (not in the basis)
+        // and have a value of zero (as they should if Phase 1 was successful) can be removed.
+        // Artificial variables start at getArtificialVariableOffset().
         for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
-            columnsToDrop.add(col);
+          int col = i + getArtificialVariableOffset(); // Calculate the actual column index of the artificial variable
+          if (getBasicRow(col) == null) { // Check if the artificial variable is non-basic (i.e., its basic row is null)
+            columnsToDrop.add(col); // Add its column index to the list of columns to be dropped
           }
         }
 
+        // Construct the new tableau matrix.
+        // The new matrix will have one less row (the phase 1 objective row is excluded).
+        // The number of columns will be reduced by the count of columns identified for dropping.
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+
+        // Populate the new matrix by copying relevant rows and columns from the old tableau.
+        // Start copying from the second row (index 1) of the old tableau, effectively skipping
+        // the phase 1 objective row (row 0).
         for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+          int col = 0; // This `col` is the column index for the new matrix's row.
+          for (int j = 0; j < getWidth(); j++) { // Iterate through all columns of the old tableau.
+            if (!columnsToDrop.contains(j)) { // If the current column `j` is not marked for dropping.
+              matrix[i - 1][col++] = tableau.getEntry(i, j); // Copy the entry to the new matrix.
+                                                              // `i-1` adjusts for the skipped phase 1 objective row.
             }
           }
         }
 
+        // Update the column labels.
+        // The `columnsToDrop` list is populated with column indices in ascending order.
+        // Iterating backwards from the end of `columnsToDrop` and using its elements as indices
+        // for `columnLabels.remove()` ensures that removals do not affect the indices of
+        // elements that are yet to be removed in the `columnLabels` ArrayList.
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
           columnLabels.remove((int) columnsToDrop.get(i));
         }
 
+        // Assign the newly constructed matrix as the current tableau.
         this.tableau = new Array2DRowRealMatrix(matrix);
+        // Reset the count of artificial variables to 0. At this stage, all artificial variables
+        // are either dropped (if non-basic) or effectively handled (if basic at zero level)
+        // and no longer serve their "artificial" purpose for Phase 2.
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
