diff --git a/tmp/c3f86649-0f8e-4fa6-bc53-8bff4d15087d_buggy.java b/tmp/0b5e7ec8-eb69-4591-a500-8f23e0214663_fixed.java
index 56b2d66..47ae8b8 100644
--- a/tmp/c3f86649-0f8e-4fa6-bc53-8bff4d15087d_buggy.java
+++ b/tmp/0b5e7ec8-eb69-4591-a500-8f23e0214663_fixed.java
@@ -1,45 +1,52 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        columnsToDrop.add(0); // Column 0 typically represents the phase 1 objective value/variable.
 
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
-            }
-        }
+        // The following block was identified as a source of errors (e.g., MATH-781).
+        // It incorrectly removes "positive cost non-artificial variables" from the tableau.
+        // Standard two-phase simplex does not require dropping these variables after phase 1.
+        // for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
+        //    final double entry = tableau.getEntry(0, i);
+        //    if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+        //        columnsToDrop.add(i);
+        //    }
+        // }
 
         // non-basic artificial variables
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
+          if (getBasicRow(col) == null) { // If the artificial variable is non-basic
             columnsToDrop.add(col);
           }
         }
 
+        // Create the new tableau matrix with the reduced dimensions.
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
+        for (int i = 1; i < getHeight(); i++) { // Skip the phase 1 objective row (original row 0)
           int col = 0;
           for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+            if (!columnsToDrop.contains(j)) { // If the column is not marked for dropping
+              matrix[i - 1][col++] = tableau.getEntry(i, j); // Copy to the new matrix
             }
           }
         }
 
+        // Update columnLabels.
+        // The columnsToDrop list contains indices in ascending order.
+        // Removing elements from columnLabels in reverse order of their indices ensures
+        // that earlier removals do not affect the indices of elements yet to be removed.
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
           columnLabels.remove((int) columnsToDrop.get(i));
         }
 
         this.tableau = new Array2DRowRealMatrix(matrix);
-        this.numArtificialVariables = 0;
+        this.numArtificialVariables = 0; // All artificial variables are either dropped or their phase 1 purpose is complete.
     }
\ No newline at end of file
