diff --git a/tmp/d73e8800-c4d2-4065-9d4e-1fd7d212d93f_buggy.java b/tmp/c018ce95-ccf2-47dd-b4d7-ea01085d9231_fixed.java
index 56b2d66..165d33b 100644
--- a/tmp/d73e8800-c4d2-4065-9d4e-1fd7d212d93f_buggy.java
+++ b/tmp/c018ce95-ccf2-47dd-b4d7-ea01085d9231_fixed.java
@@ -1,45 +1,62 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        // BUG FIX: The line 'columnsToDrop.add(0);' was incorrectly dropping the RHS column (column 0).
+        // This column should be preserved as it contains critical information (basic variable values).
+        // Removed the problematic line here.
 
         // positive cost non-artificial variables
+        // This loop identifies non-artificial variables (main, slack, surplus) that might need to be dropped.
+        // It checks their coefficients in the original objective function (row 0).
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
         // non-basic artificial variables
+        // This loop identifies artificial variables that are non-basic (their column has no associated basic row)
+        // and adds their columns to the list of columns to be dropped.
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
           if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
           }
         }
 
+        // BUG FIX: The previous row copying logic incorrectly dropped the original objective row (row 0)
+        // and kept the phase 1 objective row (row 1).
+        // This revised logic correctly drops the phase 1 objective row (row 1)
+        // and preserves the original objective row (row 0) and all constraint rows (from row 2 onwards).
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        int newRowIndex = 0; // Index for the new matrix
+        for (int i = 0; i < getHeight(); i++) { // Iterate through original tableau rows
+            if (i == 1) { // If it's the phase 1 objective row (index 1), skip it
+                continue;
             }
+            int newColIndex = 0; // Index for columns in the new row
+            for (int j = 0; j < getWidth(); j++) { // Iterate through original tableau columns
+                if (!columnsToDrop.contains(j)) { // If the column is not marked for dropping
+                    matrix[newRowIndex][newColIndex++] = tableau.getEntry(i, j); // Copy the entry
                 }
             }
+            newRowIndex++; // Move to the next row in the new matrix
+        }
 
+        // Remove the corresponding column labels, iterating backwards to avoid index shifting issues
+        // (columnsToDrop is populated in ascending order, so removing from largest index first is correct).
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
           columnLabels.remove((int) columnsToDrop.get(i));
         }
 
         this.tableau = new Array2DRowRealMatrix(matrix);
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
