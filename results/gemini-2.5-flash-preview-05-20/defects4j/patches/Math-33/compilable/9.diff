diff --git a/tmp/533343d9-e845-4126-b1c7-9e7ad4a1a864_buggy.java b/tmp/af465416-c684-4c85-b2f8-3e8aeb47f6f4_fixed.java
index 56b2d66..b4e86a0 100644
--- a/tmp/533343d9-e845-4126-b1c7-9e7ad4a1a864_buggy.java
+++ b/tmp/af465416-c684-4c85-b2f8-3e8aeb47f6f4_fixed.java
@@ -1,45 +1,71 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
 
+        // BUG FIX 1:
+        // The original code `columnsToDrop.add(0);` was incorrect.
+        // Column 0 in SimplexTableau typically represents the Right-Hand Side (RHS) values.
+        // The RHS column should never be dropped as it contains critical constraint values.
+        // The "phase 1 objective function" refers to a row (row 0), not a column.
+        // This line has been removed.
+
+        // BUG FIX 2:
+        // The original code included a loop to drop "positive cost non-artificial variables".
+        // This logic was flawed for setting up Phase 2 of the Simplex method.
+        // After Phase 1 successfully finds a feasible solution (i.e., sum of artificial variables is zero),
+        // all non-artificial variables (original variables, slack variables, surplus variables)
+        // should remain in the tableau for Phase 2, regardless of their coefficients in the
+        // now-defunct Phase 1 objective row. Dropping these variables could remove essential
+        // components required for finding the optimal solution in Phase 2.
+        // This entire block has been removed.
+        /*
         // positive cost non-artificial variables
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
+        */
 
         // non-basic artificial variables
+        // This part correctly identifies artificial variables that are non-basic
+        // (i.e., not part of the current basis and having a value of zero).
+        // These can be safely removed from the tableau for Phase 2.
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
+          if (getBasicRow(col) == null) { // If the variable is non-basic
             columnsToDrop.add(col);
           }
         }
 
+        // When creating the new matrix, the first row (Phase 1 objective) is skipped.
+        // The number of columns is reduced by the count of columns identified for dropping.
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        for (int i = 1; i < getHeight(); i++) { // Start copying from row 1 (the original objective function row)
+          int col = 0; // This is the column index for the new 'matrix'
+          for (int j = 0; j < getWidth(); j++) { // Iterate through all columns of the original tableau
+            if (!columnsToDrop.contains(j)) { // If the current column 'j' is NOT in the list of columns to drop
+              matrix[i - 1][col++] = tableau.getEntry(i, j); // Copy the entry to the new matrix, adjusting row index
             }
           }
         }
 
+        // Update the column labels list.
+        // Iterating backwards from `columnsToDrop.size() - 1` ensures that removing elements
+        // from `columnLabels` by index does not affect the indices of subsequent elements
+        // that still need to be removed.
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
           columnLabels.remove((int) columnsToDrop.get(i));
         }
 
         this.tableau = new Array2DRowRealMatrix(matrix);
-        this.numArtificialVariables = 0;
+        this.numArtificialVariables = 0; // After Phase 1, artificial variables are no longer considered for optimization.
     }
\ No newline at end of file
