diff --git a/tmp/7525ea86-5400-4fba-ba89-95c438a13e8c_buggy.java b/tmp/758cbf64-e638-4943-8bf9-e231a8587a8a_fixed.java
index 56b2d66..213bdde 100644
--- a/tmp/7525ea86-5400-4fba-ba89-95c438a13e8c_buggy.java
+++ b/tmp/758cbf64-e638-4943-8bf9-e231a8587a8a_fixed.java
@@ -1,45 +1,59 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
+        // Column 0 is the objective function value column (for the current objective).
+        // This column (representing the Phase 1 objective) is dropped.
         columnsToDrop.add(0);
 
+        // The following block for "positive cost non-artificial variables" is removed.
+        // Original variables and slack/surplus variables should NOT be dropped from the tableau
+        // after Phase 1, as they are part of the original problem and needed for Phase 2.
+        // Their coefficients in the Phase 1 objective row do not dictate their removal.
+        /*
         // positive cost non-artificial variables
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
+        */
 
         // non-basic artificial variables
+        // Artificial variables that are non-basic (i.e., their value is 0) can be removed.
         for (int i = 0; i < getNumArtificialVariables(); i++) {
           int col = i + getArtificialVariableOffset();
           if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
           }
         }
 
+        // Construct the new matrix by skipping the Phase 1 objective row (row 0)
+        // and the columns identified in columnsToDrop.
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
+        for (int i = 1; i < getHeight(); i++) { // Start from row 1 (original objective or constraints)
           int col = 0;
           for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
               matrix[i - 1][col++] = tableau.getEntry(i, j);
             }
           }
         }
 
+        // Update column labels. Iterate in reverse to correctly remove elements
+        // by index without affecting subsequent removal indices.
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
           columnLabels.remove((int) columnsToDrop.get(i));
         }
 
         this.tableau = new Array2DRowRealMatrix(matrix);
+        // All artificial variables are considered removed or no longer relevant for Phase 2.
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
