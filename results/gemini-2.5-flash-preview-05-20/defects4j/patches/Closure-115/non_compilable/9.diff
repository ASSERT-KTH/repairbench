diff --git a/tmp/fd7031c6-80de-4af4-a2e4-62d7ac08fe0b_buggy.java b/tmp/e29fa44f-6e4b-4943-87e4-5f497be1e441_fixed.java
index 3075782..1261a71 100644
--- a/tmp/fd7031c6-80de-4af4-a2e4-62d7ac08fe0b_buggy.java
+++ b/tmp/e29fa44f-6e4b-4943-87e4-5f497be1e441_fixed.java
@@ -1,82 +1,18 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
-    if (!isDirectCallNodeReplacementPossible(fnNode)) {
-      return CanInlineResult.NO;
-    }
-
-    Node block = fnNode.getLastChild();
-
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
-    Node cArg = callNode.getFirstChild().getNext();
-
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
-    if (!callNode.getFirstChild().isName()) {
-      if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
-        if (cArg == null || !cArg.isThis()) {
-          return CanInlineResult.NO;
-        }
-        cArg = cArg.getNext();
-      } else {
-        // ".apply" call should be filtered before this.
-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
-      }
-    }
-
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
       if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+        // Use NodeUtil.mayEffectMutableState for consistency with Javadoc Rule 1
+        // (arguments that "effect mutable state" are typically what's meant by "side effects").
+        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {
+          // If cArg has side effects:
+          //   - If fnParam is null here, it means cArg is an extra argument (no matching parameter).
+          //     In this case, its side effect would be lost by inlining, so we must return NO.
+          //   - If fnParam is not null, it means cArg corresponds to a formal parameter.
+          //     The condition for this case (referenced more than once) was already
+          //     checked in the 'if (fnParam != null)' block (Check 2). If we reached
+          //     this point, it implies Check 2 passed, meaning the parameter is
+          //     referenced exactly once. So, it's safe to proceed.
+          if (fnParam == null) {
             return CanInlineResult.NO;
           }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
-
-        // Move to the next name.
-        fnParam = fnParam.getNext();
-      }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
-          return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
\ No newline at end of file
-    }
-
-    return CanInlineResult.YES;
-  }
