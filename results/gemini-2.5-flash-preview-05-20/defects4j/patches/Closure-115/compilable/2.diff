diff --git a/tmp/90914719-b74e-413a-94fe-5029956bb3bb_buggy.java b/tmp/52ae826a-eacf-4089-804a-33a2c38f8edb_fixed.java
index 3075782..9c29958 100644
--- a/tmp/90914719-b74e-413a-94fe-5029956bb3bb_buggy.java
+++ b/tmp/52ae826a-eacf-4089-804a-33a2c38f8edb_fixed.java
@@ -1,82 +1,98 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
+    // The 'hasSideEffects' variable previously checked if the *return expression*
+    // of the function had side effects. It was used in a problematic check that
+    // caused false negatives (preventing inlining when it should be allowed).
+    // This variable is no longer needed for direct inlining logic.
+    // The original code was:
+    // boolean hasSideEffects = false;
+    // if (block.hasChildren()) {
+    //   Preconditions.checkState(block.hasOneChild());
+    //   Node stmt = block.getFirstChild();
+    //   if (stmt.isReturn()) {
+    //     hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+    //   }
+    // }
+
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
+        // If the 'this' argument is not a simple 'this' or is missing,
+        // it cannot be inlined.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
+      if (fnParam != null) { // We have a formal parameter defined
+        if (cArg != null) { // We have a corresponding call argument
+          // Rule 1: If a call's argument has side effects,
+          // the corresponding parameter in the function must only be referenced once.
+          // Changed `NodeUtil.mayEffectMutableState` to `NodeUtil.mayHaveSideEffects`
+          // for consistency with the JSDoc's general "side effects" term.
+          if (NodeUtil.mayHaveSideEffects(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+
+          // Removed the check:
+          // `if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) { return CanInlineResult.NO; }`
+          // This check was too broad, causing false negatives in tests like
+          // `testNoInlineIfParametersModified8` and `testNoInlineIfParametersModified9`.
+          // It incorrectly prevented inlining when the function's return value had side effects
+          // (e.g., an assignment like `a.x=2`) and the argument was a mutable object reference.
         }
 
-        // Move to the next name.
+        // Move to the next formal parameter.
         fnParam = fnParam.getNext();
       }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+      // For every call argument check for side-effects.
+      // This applies specifically to *extra* arguments that do not have a
+      // corresponding formal parameter defined in the function signature.
+      // If such an extra argument has side effects, inlining is prevented.
+      // Rule 1 (above) handles matched arguments with side effects based on reference count.
       if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+        if (fnParam == null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
