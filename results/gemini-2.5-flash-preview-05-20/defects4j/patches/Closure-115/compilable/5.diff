diff --git a/tmp/210d51d8-94ff-4a8a-90f9-86c84d063385_buggy.java b/tmp/427550fd-c58a-49cd-a007-be0088ea5182_fixed.java
index 3075782..7ca12ef 100644
--- a/tmp/210d51d8-94ff-4a8a-90f9-86c84d063385_buggy.java
+++ b/tmp/427550fd-c58a-49cd-a007-be0088ea5182_fixed.java
@@ -1,82 +1,77 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
+        // This check is a conservative restriction for .call() methods.
+        // It prevents inlining if the 'this' argument is not simply 'this' or missing.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
-        cArg = cArg.getNext();
+        cArg = cArg.getNext(); // Skip 'this' argument as it's not a formal parameter.
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
-
-        // Move to the next name.
-        fnParam = fnParam.getNext();
-      }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+      if (cArg != null) { // We have a call argument
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          // If the call argument has side effects:
+          if (fnParam == null) {
+            // Case: More actual arguments than formal parameters, and the extra argument has side effects.
+            // Inlining would lose these side effects.
             return CanInlineResult.NO;
+          } else {
+            // Case: Call argument with side effects, matched with a formal parameter.
+            // Rule 1: The corresponding parameter must be referenced exactly once.
+            String paramName = fnParam.getString();
+            int referenceCount = NodeUtil.getNameReferenceCount(block, paramName);
+
+            if (referenceCount == 0 || referenceCount > 1) {
+              // If referenceCount is 0, side effects are lost.
+              // If referenceCount > 1, side effects are duplicated.
+              return CanInlineResult.NO;
+            }
+            // If referenceCount is 1, it's allowed.
+          }
+        }
+        cArg = cArg.getNext(); // Move to the next call argument
       }
-        cArg = cArg.getNext();
+
+      if (fnParam != null) { // We have a formal parameter
+        // If cArg was null, it means fewer arguments than parameters (missing argument).
+        // This is generally fine as the parameter would be undefined.
+        fnParam = fnParam.getNext(); // Move to the next formal parameter
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
