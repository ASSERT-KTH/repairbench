diff --git a/tmp/414da7ab-8569-4b98-8eda-6008ea2415dd_buggy.java b/tmp/1786888e-66e0-4292-a151-9886000e264a_fixed.java
index 3075782..d55ee27 100644
--- a/tmp/414da7ab-8569-4b98-8eda-6008ea2415dd_buggy.java
+++ b/tmp/1786888e-66e0-4292-a151-9886000e264a_fixed.java
@@ -1,82 +1,86 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
+    // The original code had a 'hasSideEffects' flag that checked if the
+    // *return expression* had side effects, and used it with `NodeUtil.canBeSideEffected(cArg)`.
+    // This check was too restrictive and caused desired inlinings (e.g., `a.x=2`)
+    // to be disallowed, leading to failures in tests like `testNoInlineIfParametersModified8`
+    // and `testNoInlineIfParametersModified9`.
+    // Removing this problematic check aligns the behavior with the stated
+    // inlining rules and expected test outcomes.
+    // Side effects on parameters (like `a.x=2`) are generally allowed for direct inlining.
+
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
           // Check for arguments that are evaluated more than once.
+          // Rule 1: If a call's arguments have side effects,
+          // the corresponding argument in the function must only be referenced once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
+          if (NodeUtil.mayHaveSideEffects(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+      // isn't a named parameter to match. This handles extra arguments.
+      // If an extra argument has side effects, inlining might drop it,
+      // changing semantics.
       if (cArg != null) {
+        if (fnParam == null) { // This `cArg` has no corresponding formal parameter
           if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
             return CanInlineResult.NO;
           }
+        }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
