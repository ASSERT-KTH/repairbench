diff --git a/tmp/60e25ee6-2c85-420e-ba08-218613a7f08c_buggy.java b/tmp/2c237736-4991-4a6d-bac2-392741379475_fixed.java
index 3075782..35b372f 100644
--- a/tmp/60e25ee6-2c85-420e-ba08-218613a7f08c_buggy.java
+++ b/tmp/2c237736-4991-4a6d-bac2-392741379475_fixed.java
@@ -1,82 +1,91 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
+    // The original code had a problematic 'hasSideEffects' calculation and
+    // a 'Preconditions.checkState(block.hasOneChild())' that was too restrictive.
+    // Functions can have multiple statements in their body, and the 'hasSideEffects'
+    // flag, as it was calculated (only considering the return expression for single-statement
+    // function bodies), was not correctly aligned with the stated inlining rule or
+    // general side-effect analysis for inlining.
+    // The key rule for arguments with side effects is already explicitly handled below.
+    // Other types of side effects within the function body (e.g., modifying global variables)
+    // are expected to be handled correctly by the inliner's mechanism for direct substitution,
+    // as long as they are not duplicated or suppressed.
+    // Therefore, the specific 'hasSideEffects' variable and its related checks are removed.
+
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
+        // This check ensures that the 'this' argument is a simple reference that
+        // doesn't prevent inlining.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+      // For each named parameter check if a mutable argument is used more than once.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+          // Rule 1: If a call's argument has side effects (e.g., `i++`),
+          // the corresponding argument in the function (`a` in `a+a`)
+          // must only be referenced once within the function body.
+          // `NodeUtil.mayEffectMutableState` checks if the argument expression itself
+          // has side effects (e.g., increment/decrement, function call).
+          // `NodeUtil.getNameReferenceCount` checks how many times the formal
+          // parameter name is used within the function's body.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
 
-        // Move to the next name.
+        // Move to the next function parameter.
         fnParam = fnParam.getNext();
       }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+      // Advance to the next call argument.
+      // The original code had a strict check here that would return NO if
+      // any argument (even those without corresponding parameters, or those
+      // that correspond to a parameter used only once) had side effects.
+      // This was too strict, as the inliner can correctly handle side-effecting
+      // arguments (e.g., `foo(i++)` for `function foo() {}` should inline to `i++;`).
+      // The core rule is about *multiple* references of a side-effecting argument.
       if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
-          return CanInlineResult.NO;
-        }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
