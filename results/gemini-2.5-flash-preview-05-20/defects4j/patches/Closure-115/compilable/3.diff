diff --git a/tmp/9692eaf0-dc90-4907-82c2-f036f7a41f3a_buggy.java b/tmp/956cd59f-2032-4676-969d-d67d237842f1_fixed.java
index 3075782..bf40452 100644
--- a/tmp/9692eaf0-dc90-4907-82c2-f036f7a41f3a_buggy.java
+++ b/tmp/956cd59f-2032-4676-969d-d67d237842f1_fixed.java
@@ -1,82 +1,67 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
+        // For '.call' calls, the first argument is the 'this' value.
+        // If this argument is not present or is of a type that cannot be safely
+        // replaced/handled for 'this' (e.g., if it's not a direct 'this' node),
+        // we prevent inlining for now, as indicated by the TODO.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
 
-        // Move to the next name.
+    // Rule 1: If a call's arguments have side effects,
+    // the corresponding argument in the function must only be referenced once.
+    // We iterate through corresponding arguments and parameters.
+    while (cArg != null && fnParam != null) {
+      // Check if the call argument has side effects AND the corresponding
+      // function parameter is referenced more than once in the function body.
+      if (NodeUtil.mayHaveSideEffects(cArg, compiler) &&
+          NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+        return CanInlineResult.NO;
+      }
+      cArg = cArg.getNext();
       fnParam = fnParam.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
-          return CanInlineResult.NO;
-        }
-        cArg = cArg.getNext();
-      }
-    }
+    // After the loop, if there are remaining `cArg`s, they are extra arguments.
+    // Their side effects (if any) will still occur exactly once, which is fine
+    // as they don't have a corresponding parameter that could be referenced multiple times.
+    // If there are remaining `fnParam`s, they are unsupplied parameters. This is also fine.
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
