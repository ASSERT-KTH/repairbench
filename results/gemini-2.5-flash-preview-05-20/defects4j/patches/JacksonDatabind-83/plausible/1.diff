diff --git a/tmp/ac0716cd-16ee-4df7-90a6-d8e238a79a36_buggy.java b/tmp/297cbf97-aba2-47f0-896d-cb4899ee1f52_fixed.java
index abe09ae..f388648 100644
--- a/tmp/ac0716cd-16ee-4df7-90a6-d8e238a79a36_buggy.java
+++ b/tmp/297cbf97-aba2-47f0-896d-cb4899ee1f52_fixed.java
@@ -1,57 +1,81 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
             if (text.length() == 0 || (text = text.trim()).length() == 0) {
                 // 04-Feb-2013, tatu: Usually should become null; but not always
                 return _deserializeFromEmptyString();
             }
-            Exception cause = null;
+            
+            Exception actualCause = null;
+            T value = null;
             try {
                 // 19-May-2017, tatu: Used to require non-null result (assuming `null`
                 //    indicated error; but that seems wrong. Should be able to return
                 //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
-                }
+                // Call _deserialize once and store the result.
+                value = _deserialize(text, ctxt);
             } catch (IllegalArgumentException iae) {
-                cause = iae;
+                actualCause = iae;
             } catch (MalformedURLException me) {
-                cause = me;
+                actualCause = me;
             }
+
+            // If _deserialize succeeded and returned a non-null value, return it directly.
+            if (value != null) {
+                return value;
+            }
+
+            // If _deserialize failed (threw exception, `actualCause` is set)
+            // or returned `null` (which for most scalar types indicates a problem
+            // unless explicitly handled, or needs ProblemHandler intervention),
+            // then we proceed to consult ProblemHandlers.
+
             String msg = "not a valid textual representation";
-            if (cause != null) {
-                String m2 = cause.getMessage();
+            if (actualCause != null) {
+                String m2 = actualCause.getMessage();
                 if (m2 != null) {
                     msg = msg + ", problem: "+m2;
                 }
             }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
-            if (cause != null) {
-                e.initCause(cause);
-            }
+            
+            // 05-May-2016, tatu: [databind#1629]: Need to check ProblemHandler for null/default
+            // before throwing an exception directly.
+            // ctxt.handleWeirdStringValue will either return a resolved value (including null)
+            // or throw an appropriate JsonMappingException if no handler resolves it.
+            try {
+                Object ob = ctxt.handleWeirdStringValue(_valueClass, text, msg);
+                // If ProblemHandler resolved it (returned a value or null), return that.
+                return (T) ob;
+            } catch (JsonMappingException e) {
+                // If handleWeirdStringValue (or a ProblemHandler within it) threw a JsonMappingException, re-throw it.
                 throw e;
-            // nothing to do here, yet? We'll fail anyway
+            } catch (Exception e) {
+                // Catch any other exceptions that might be thrown by a ProblemHandler
+                // and wrap them in a JsonMappingException.
+                JsonMappingException e2 = ctxt.weirdStringException(text, _valueClass, msg);
+                e2.initCause(e);
+                throw e2;
+            }
         }
         JsonToken t = p.getCurrentToken();
         // [databind#381]
         if (t == JsonToken.START_ARRAY) {
             return _deserializeFromArray(p, ctxt);
         }
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
             return _deserializeEmbedded(ob, ctxt);
         }
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
\ No newline at end of file
