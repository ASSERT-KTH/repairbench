diff --git a/tmp/3b1723f3-6717-4d5d-950a-5e483062fa97_buggy.java b/tmp/a8017c74-8602-4a55-a450-ca74e065657b_fixed.java
index abe09ae..5f3d275 100644
--- a/tmp/3b1723f3-6717-4d5d-950a-5e483062fa97_buggy.java
+++ b/tmp/a8017c74-8602-4a55-a450-ca74e065657b_fixed.java
@@ -1,57 +1,68 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
             if (text.length() == 0 || (text = text.trim()).length() == 0) {
                 // 04-Feb-2013, tatu: Usually should become null; but not always
                 return _deserializeFromEmptyString();
             }
-            Exception cause = null;
+
+            Throwable cause = null;
+            T result = null;
             try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
+                // 1. Attempt deserialization. This should be done only once.
+                result = _deserialize(text, ctxt);
+            } catch (Exception e) {
+                // 2. If an exception occurs, store it as 'cause'.
+                cause = e;
             }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
+
+            // 3. If deserialization succeeded (returned a value, even null)
+            // and no exception was caught, return the result directly.
+            // This covers the case where _deserialize returns a valid `null` value.
+            if (cause == null) {
+                return result;
             }
+
+            // 4. If we are here, 'cause' is not null, meaning an exception occurred during _deserialize.
+            // Construct an error message and then allow ProblemHandler to intervene.
             String msg = "not a valid textual representation";
-            if (cause != null) {
             String m2 = cause.getMessage();
             if (m2 != null) {
                 msg = msg + ", problem: "+m2;
             }
-            }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
-            if (cause != null) {
+
+            // 5. Try to handle the problem using ProblemHandlers.
+            // ctxt.handleWeirdStringValue will return a value if a handler resolves it,
+            // or throw InvalidFormatException if no handler resolves it.
+            try {
+                return (T) ctxt.handleWeirdStringValue(_valueClass, text, msg);
+            } catch (InvalidFormatException e) {
+                // 6. If a handler was not successful and ctxt.handleWeirdStringValue threw an InvalidFormatException,
+                // re-throw it, optionally linking the original cause.
                 e.initCause(cause);
-            }
                 throw e;
-            // nothing to do here, yet? We'll fail anyway
             }
+        }
+
         JsonToken t = p.getCurrentToken();
         // [databind#381]
         if (t == JsonToken.START_ARRAY) {
             return _deserializeFromArray(p, ctxt);
         }
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
             return _deserializeEmbedded(ob, ctxt);
         }
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
\ No newline at end of file
