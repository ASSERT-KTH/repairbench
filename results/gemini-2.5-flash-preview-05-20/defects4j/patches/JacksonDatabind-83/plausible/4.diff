diff --git a/tmp/853aa92e-82e1-4ec7-a5e6-6495c4a74dd3_buggy.java b/tmp/3637888b-09c1-4565-be69-eadd7f1e4d82_fixed.java
index abe09ae..c1c61f4 100644
--- a/tmp/853aa92e-82e1-4ec7-a5e6-6495c4a74dd3_buggy.java
+++ b/tmp/3637888b-09c1-4565-be69-eadd7f1e4d82_fixed.java
@@ -1,57 +1,73 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
             if (text.length() == 0 || (text = text.trim()).length() == 0) {
                 // 04-Feb-2013, tatu: Usually should become null; but not always
                 return _deserializeFromEmptyString();
             }
+            
+            // Fix: Capture the result of _deserialize once, and handle potential exceptions.
+            Object result = null;
             Exception cause = null;
             try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
-                }
+                // Call the protected _deserialize method which concrete deserializers implement.
+                // This method might internally call ctxt.handleWeirdStringValue, which
+                // in turn can consult DeserializationProblemHandlers.
+                result = _deserialize(text, ctxt);
             } catch (IllegalArgumentException iae) {
                 cause = iae;
             } catch (MalformedURLException me) {
                 cause = me;
             }
+
+            // 19-May-2017, tatu: Used to require non-null result (assuming `null`
+            //    indicated error; but that seems wrong. Should be able to return
+            //    `null` as value.
+            // If `result` is non-null, or if `result` is null BUT no exception (`cause`) occurred,
+            // it means a ProblemHandler successfully processed the input (possibly returning null).
+            // In the UUID test case, UUIDDeserializer._deserialize catches IllegalArgumentException,
+            // calls ctxt.handleWeirdStringValue which calls WeirdStringHandler, and if handler returns null,
+            // UUIDDeserializer._deserialize returns null. No exception propagates, so 'cause' remains null.
+            if (result != null || (result == null && cause == null)) {
+                return (T) result;
+            }
+
+            // If we reach here, 'result' is null AND 'cause' is not null.
+            // This means _deserialize did not produce a value, and an explicit parsing error occurred
+            // that was not (or could not be) fully handled by a ProblemHandler.
             String msg = "not a valid textual representation";
             if (cause != null) {
                 String m2 = cause.getMessage();
                 if (m2 != null) {
                     msg = msg + ", problem: "+m2;
                 }
             }
             // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
             JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
             if (cause != null) {
                 e.initCause(cause);
             }
             throw e;
-            // nothing to do here, yet? We'll fail anyway
         }
         JsonToken t = p.getCurrentToken();
         // [databind#381]
         if (t == JsonToken.START_ARRAY) {
             return _deserializeFromArray(p, ctxt);
         }
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
             return _deserializeEmbedded(ob, ctxt);
         }
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
\ No newline at end of file
