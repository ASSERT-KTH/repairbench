diff --git a/tmp/56b9118c-f55c-4649-8008-805523f7dc2c_buggy.java b/tmp/8052d076-526e-4486-a936-e37ba507c698_fixed.java
index 27520a0..87b8500 100644
--- a/tmp/56b9118c-f55c-4649-8008-805523f7dc2c_buggy.java
+++ b/tmp/8052d076-526e-4486-a936-e37ba507c698_fixed.java
@@ -1,7 +1,19 @@
     protected final boolean _add(Annotation ann) {
         if (_annotations == null) {
             _annotations = new HashMap<Class<? extends Annotation>,Annotation>();
         }
         Annotation previous = _annotations.put(ann.annotationType(), ann);
-        return (previous != null) && previous.equals(ann);
+        // The original logic `return (previous != null) && previous.equals(ann);`
+        // returned true only if an identical annotation already existed, and false for new
+        // additions or replacements of different annotations. This behavior was
+        // incorrect for indicating whether the map's contents effectively changed.
+        //
+        // For mixins, an annotation from the mixin should override an existing one.
+        // This method should return true if the annotation map changed its effective
+        // state for the given annotation type, meaning:
+        // 1. A new annotation was added (previous was null).
+        // 2. An existing annotation was replaced by a different one (previous was not null and not equal to new).
+        // It should return false if an identical annotation was 'replaced' (no effective change).
+        // This is correctly captured by `!java.util.Objects.equals(previous, ann)`.
+        return !java.util.Objects.equals(previous, ann);
     }
\ No newline at end of file
