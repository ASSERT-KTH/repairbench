diff --git a/tmp/fffd7278-70c6-431e-8e27-b254461f9dcd_buggy.java b/tmp/8ef209f6-f676-4d39-91ce-235d3c1aee49_fixed.java
index 658036e..5a22ced 100644
--- a/tmp/fffd7278-70c6-431e-8e27-b254461f9dcd_buggy.java
+++ b/tmp/8ef209f6-f676-4d39-91ce-235d3c1aee49_fixed.java
@@ -1,29 +1,54 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
+                // Should only be used if we had buffered content (e.g. from AsProperty)
+                // that now needs to be re-parsed as the full content.
+                //
+                // !!! NOTE: This `writeEndObject()` is only correct if the buffered
+                // content actually started an object. In cases where the content
+                // could be a scalar or array, this might be incorrect.
+                // However, this method is typically called after the type id
+                // is missing from an object (AsProperty case), so likely fine.
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
+
+        // [databind#1533]: Allow empty String as null for polymorphic types
+        // This check must happen BEFORE TypeDeserializer.deserializeIfNatural,
+        // as deserializeIfNatural might return "" for a String type, which
+        // would then fail the check in the caller context if it's not String.class
+        // and expecting null when ACCEPT_EMPTY_STRING_AS_NULL_OBJECT is enabled.
+        if (p.getCurrentToken() == JsonToken.VALUE_STRING
+                && p.getTextLength() == 0) {
+            // If the base type is String, it should deserialize to an empty string, not null.
+            // So we only apply this logic if the base type is NOT String
+            if (!String.class.isAssignableFrom(_baseType)) {
+                if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                    return null;
+                }
+            }
+        }
+
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
\ No newline at end of file
