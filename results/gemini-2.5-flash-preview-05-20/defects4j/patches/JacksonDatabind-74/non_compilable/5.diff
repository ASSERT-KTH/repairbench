diff --git a/tmp/98015c86-1bf6-426d-ae3b-b4ce4f31fa88_buggy.java b/tmp/999c69ac-651d-49db-95d4-652012d2b488_fixed.java
index 658036e..5f07902 100644
--- a/tmp/98015c86-1bf6-426d-ae3b-b4ce4f31fa88_buggy.java
+++ b/tmp/999c69ac-651d-49db-95d4-652012d2b488_fixed.java
@@ -1,29 +1,47 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
+        // First, check for `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` feature for empty String values.
+        // This is typically handled by regular deserializers. However, in polymorphic deserialization
+        // where a type id is expected but not found, and no default implementation is applicable
+        // or a "natural" type is not recognized, an empty string could lead to a `reportWrongTokenException`.
+        // If the feature is enabled and the value is an empty string, and the target type is not
+        // String.class (for which `""` is a valid non-null value), we should return null.
+        if (p.getCurrentToken() == JsonToken.VALUE_STRING
+                && p.getText().isEmpty()) {
+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)
+                && !String.class.isAssignableFrom(_baseType)) {
+                return null;
+            }
+        }
+
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
+                // IMPORTANT: This specific `writeEndObject()` operation on `tb` is unusual
+                // and depends heavily on how `tb` is pre-populated in specific `TypeDeserializer`
+                // implementations (e.g., if it only contains start-object and fields, but not end-object).
+                // It is kept as-is as it's not the cause of the current reported issue.
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
\ No newline at end of file
