diff --git a/tmp/784a90ce-fc82-4622-a080-a04dcfa53b43_buggy.java b/tmp/11f3fbb6-6f6c-4cdb-9d83-3ab5450943ba_fixed.java
index 658036e..a3d9ea2 100644
--- a/tmp/784a90ce-fc82-4622-a080-a04dcfa53b43_buggy.java
+++ b/tmp/11f3fbb6-6f6c-4cdb-9d83-3ab5450943ba_fixed.java
@@ -1,29 +1,42 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
+
+        // [databind#1533]: If `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` is enabled and
+        // we get an empty string, treat it as null for polymorphic types
+        // where no type id is present and no default implementation found.
+        if (p.getCurrentToken() == JsonToken.VALUE_STRING) {
+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                String text = p.getText();
+                if (text.length() == 0) {
+                    return null;
+                }
+            }
+        }
+        
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
\ No newline at end of file
