diff --git a/tmp/9c5f1eda-afce-4fb1-bf59-acd8bf5d41e8_buggy.java b/tmp/2c102278-0b89-4b45-921d-b172549340db_fixed.java
index 658036e..5a45860 100644
--- a/tmp/9c5f1eda-afce-4fb1-bf59-acd8bf5d41e8_buggy.java
+++ b/tmp/2c102278-0b89-4b45-921d-b172549340db_fixed.java
@@ -1,29 +1,45 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
+        // [databind#1533]: If `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` is enabled and input is empty string,
+        // it should result in null, regardless of default implementation or type id.
+        if (p.hasToken(JsonToken.VALUE_STRING) && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+            String text = p.getText();
+            if (text.isEmpty()) {
+                return null;
+            }
+        }
+
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
+                // For `As.PROPERTY` inclusion, `tb` holds the buffered JSON object
+                // from which the type id was NOT extracted (or was last field)
+                // We must "finish" the buffered object before parsing the value.
+                // NOTE: if the value itself is NOT an object (e.g. empty string here),
+                // this path might be problematic. However, `_deserializeTypedUsingDefaultImpl`
+                // typically gets called when the type id is missing from an object.
+                // The above fix for empty string as null handles that specific case earlier.
                 tb.writeEndObject();
                 p = tb.asParser(p);
-                // must move to point to the first token:
+                // must move to point to the first token of the actual value:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
