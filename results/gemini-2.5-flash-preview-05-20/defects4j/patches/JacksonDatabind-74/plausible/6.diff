diff --git a/tmp/03399bf7-412c-4ed6-8d94-521f35a5c984_buggy.java b/tmp/bab34911-397f-4952-a086-6f7a7499201a_fixed.java
index 658036e..09700a7 100644
--- a/tmp/03399bf7-412c-4ed6-8d94-521f35a5c984_buggy.java
+++ b/tmp/bab34911-397f-4952-a086-6f7a7499201a_fixed.java
@@ -1,29 +1,46 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
+        // [databind#1533]: when using defaultImpl, and getting empty String,
+        // should handle as null if ACCEPT_EMPTY_STRING_AS_NULL_OBJECT enabled.
+        // This check needs to happen early, as the parser is already positioned
+        // at the value token (e.g., VALUE_STRING) when this method is called.
+        if (p.hasToken(JsonToken.VALUE_STRING)) {
+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                String str = p.getText().trim();
+                if (str.isEmpty()) {
+                    return null;
+                }
+            }
+        }
+
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
+        // Note: deserializeIfNatural for _baseType (e.g., interface or abstract class)
+        // might not handle VALUE_STRING ("") as null even if ACCEPT_EMPTY_STRING_AS_NULL_OBJECT is enabled,
+        // because it only considers _baseType as a natural type (like String.class itself).
+        // The check at the beginning addresses this specifically.
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
