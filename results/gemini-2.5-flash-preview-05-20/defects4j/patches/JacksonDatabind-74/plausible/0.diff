diff --git a/tmp/f7669fe2-5228-44f0-8a10-1df58456e4e2_buggy.java b/tmp/7719a953-478d-42d5-9c4e-c666591e721b_fixed.java
index 658036e..c7baf51 100644
--- a/tmp/f7669fe2-5228-44f0-8a10-1df58456e4e2_buggy.java
+++ b/tmp/7719a953-478d-42d5-9c4e-c666591e721b_fixed.java
@@ -1,29 +1,46 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
+
+        // [databind#1533]: If `deserializeIfNatural` returned `null` (because `_baseType`
+        // is not `String.class`), but the current token is `""` and `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`
+        // is enabled, we should treat this as a `null` object.
+        // `deserializeIfNatural` itself performs this check, but returns `null`
+        // to indicate it couldn't fully deserialize to the `_baseType`.
+        // The calling context needs to explicitly return `null` if this specific `null`
+        // condition (empty string to null object) was met.
+        if (p.getCurrentToken() == JsonToken.VALUE_STRING) {
+            String text = p.getText();
+            if (text.isEmpty()) {
+                if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                    return null;
+                }
+            }
+        }
+
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
\ No newline at end of file
