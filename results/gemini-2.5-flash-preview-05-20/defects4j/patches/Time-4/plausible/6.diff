diff --git a/tmp/2e444add-f2d3-4f73-b250-4bc538a66bf4_buggy.java b/tmp/aabb9121-1cfa-4c00-8123-0cfeb0ee72fa_fixed.java
index 7ea7ac9..0151cec 100644
--- a/tmp/2e444add-f2d3-4f73-b250-4bc538a66bf4_buggy.java
+++ b/tmp/aabb9121-1cfa-4c00-8123-0cfeb0ee72fa_fixed.java
@@ -1,63 +1,83 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // Field not present, attempt to add it.
+            // First, check for semantic conflicts with existing fields.
+            // A conflict occurs if the new fieldType has the same duration type and range duration type
+            // as an existing field. For example, 'hourOfDay' and 'clockhourOfDay' are distinct
+            // DateTimeFieldType instances but represent the same concept within a day and conflict.
+            for (int i = 0; i < iTypes.length; i++) {
+                DateTimeFieldType loopType = iTypes[i];
+                if (fieldType.getDurationType() == loopType.getDurationType() &&
+                    fieldType.getRangeDurationType() == loopType.getRangeDurationType()) {
+                    // This indicates a semantic conflict, as Partial typically should not hold
+                    // multiple fields representing the same conceptual unit (e.g., two types of 'hour').
+                    throw new IllegalArgumentException(
+                        "Cannot add field '" + fieldType.getName() +
+                        "' because partial already contains field '" + loopType.getName() +
+                        "' which operates on the same duration and range.");
+                }
+            }
+
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
             
             // find correct insertion point to keep largest-smallest order
             int i = 0;
             DurationField unitField = fieldType.getDurationType().getField(iChronology);
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
                         if (compare > 0) {
                             break;
                         } else if (compare == 0) {
                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                             if (rangeField.compareTo(loopRangeField) > 0) {
                                 break;
                             }
                         }
                     }
                 }
             }
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
             // use public constructor to ensure full validation
             // this isn't overly efficient, but is safe
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
-            iChronology.validate(newPartial, newValues);
+            // The following line is redundant as Partial's public constructor calls validate.
+            // iChronology.validate(newPartial, newValues);
             return newPartial;
         }
+        // Field is already present (index != -1), update its value.
         if (value == getValue(index)) {
             return this;
         }
         int[] newValues = getValues();
         newValues = getField(index).set(this, index, newValues, value);
         return new Partial(this, newValues);
     }
\ No newline at end of file
