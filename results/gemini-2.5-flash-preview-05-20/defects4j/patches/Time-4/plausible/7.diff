diff --git a/tmp/5a63aabf-b184-42c5-b372-bb41603226d8_buggy.java b/tmp/2f932fc8-ca10-4f79-a9ed-77ab890fe7fc_fixed.java
index 7ea7ac9..1f53869 100644
--- a/tmp/5a63aabf-b184-42c5-b372-bb41603226d8_buggy.java
+++ b/tmp/2f932fc8-ca10-4f79-a9ed-77ab890fe7fc_fixed.java
@@ -1,63 +1,79 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // New field type, need to insert.
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
             
             // find correct insertion point to keep largest-smallest order
             int i = 0;
             DurationField unitField = fieldType.getDurationType().getField(iChronology);
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
                         if (compare > 0) {
+                            // New field is larger, insert it before current loopType.
                             break;
                         } else if (compare == 0) {
+                            // Unit fields are of the same duration. Check range fields.
                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                             if (rangeField.compareTo(loopRangeField) > 0) {
+                                // New field's range is larger, insert it before current loopType.
                                 break;
+                            } else if (rangeField.compareTo(loopRangeField) == 0) {
+                                // Both unit and range duration types are the same.
+                                // This indicates a conceptual conflict if the field types are not equal.
+                                // Since index == -1, fieldType is not equal to loopType.
+                                // Therefore, this is a conflict, and we must throw an exception.
+                                throw new IllegalArgumentException("Field '" + fieldType.getName() +
+                                    "' conflicts with existing field '" + loopType.getName() + "'");
                             }
+                            // If rangeField.compareTo(loopRangeField) < 0, then new field is smaller,
+                            // so continue the loop (new field will be inserted after loopType).
                         }
+                        // If compare < 0 (new field is smaller), continue loop.
                     }
                 }
             }
+            // At this point, 'i' is the insertion index.
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
             // use public constructor to ensure full validation
             // this isn't overly efficient, but is safe
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
             iChronology.validate(newPartial, newValues);
             return newPartial;
         }
+        // Existing field type, update value.
         if (value == getValue(index)) {
             return this;
         }
         int[] newValues = getValues();
         newValues = getField(index).set(this, index, newValues, value);
         return new Partial(this, newValues);
     }
\ No newline at end of file
