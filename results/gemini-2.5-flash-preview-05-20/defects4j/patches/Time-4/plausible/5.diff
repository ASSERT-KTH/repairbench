diff --git a/tmp/e85fd4e6-563e-4b21-a21e-1642395b2b84_buggy.java b/tmp/94193cd1-9d3f-43e2-8a51-0854ddceef1c_fixed.java
index 7ea7ac9..10e5be0 100644
--- a/tmp/e85fd4e6-563e-4b21-a21e-1642395b2b84_buggy.java
+++ b/tmp/94193cd1-9d3f-43e2-8a51-0854ddceef1c_fixed.java
@@ -1,63 +1,82 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // Check for fields that are not exactly the same type (indexOf == -1)
+            // but represent the same time unit, which would make the Partial invalid.
+            // This proactively throws an exception before constructing the new Partial,
+            // as the constructor's validation might not be sufficient for this specific case
+            // or is not firing as expected for the provided test scenario.
+            // This addresses testWith3 where clockhourOfDay conflicts with hourOfDay.
+            for (int i = 0; i < iTypes.length; i++) {
+                DateTimeFieldType loopType = iTypes[i];
+                if (loopType.getDurationType() == fieldType.getDurationType() &&
+                    loopType.getRangeDurationType() == fieldType.getRangeDurationType()) {
+                    // Conflict detected: same duration and range duration, but different field type.
+                    // This mirrors the BaseChronology.validate check for "duplicate fields"
+                    // that would arise if these fields were present together in the Partial.
+                    throw new IllegalArgumentException("The array of types must not contain duplicate fields: " + fieldType.getName());
+                }
+            }
+
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
             
             // find correct insertion point to keep largest-smallest order
             int i = 0;
             DurationField unitField = fieldType.getDurationType().getField(iChronology);
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
                         if (compare > 0) {
                             break;
                         } else if (compare == 0) {
                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                             if (rangeField.compareTo(loopRangeField) > 0) {
                                 break;
                             }
                         }
                     }
                 }
             }
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
             // use public constructor to ensure full validation
             // this isn't overly efficient, but is safe
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
-            iChronology.validate(newPartial, newValues);
+            // The line below is redundant as the Partial constructor already calls chronology.validate.
+            // However, keeping it doesn't cause harm, but removing it makes the code cleaner.
+            // iChronology.validate(newPartial, newValues);
             return newPartial;
         }
         if (value == getValue(index)) {
             return this;
         }
         int[] newValues = getValues();
         newValues = getField(index).set(this, index, newValues, value);
         return new Partial(this, newValues);
     }
