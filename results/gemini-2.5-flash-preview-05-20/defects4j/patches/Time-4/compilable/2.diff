diff --git a/tmp/0d1143c0-c85d-4f71-b6d0-67e91f876d9b_buggy.java b/tmp/d82b1d3d-0a6f-469c-ad91-20a707ed0ce5_fixed.java
index 7ea7ac9..a1099cf 100644
--- a/tmp/0d1143c0-c85d-4f71-b6d0-67e91f876d9b_buggy.java
+++ b/tmp/d82b1d3d-0a6f-469c-ad91-20a707ed0ce5_fixed.java
@@ -1,63 +1,84 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // New field type being added.
+            // First, check for conflicts with existing fields.
+            // A conflict exists if the new field has the same duration type as an existing field.
+            DurationFieldType newDurationType = fieldType.getDurationType();
+            if (newDurationType != null) { // Only check if the new field type has a duration type
+                for (int i = 0; i < iTypes.length; i++) {
+                    // Check if an existing field type has the same duration type as the new one.
+                    // For example, if 'hourOfDay' (unit: hours) exists, 'clockhourOfDay' (unit: hours) cannot be added.
+                    if (iTypes[i].getDurationType() == newDurationType) {
+                        throw new IllegalArgumentException(
+                            "Cannot have two fields that affect the same duration type: " +
+                            fieldType + " and " + iTypes[i]);
+                    }
+                }
+            }
+
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
             
             // find correct insertion point to keep largest-smallest order
             int i = 0;
             DurationField unitField = fieldType.getDurationType().getField(iChronology);
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
                         if (compare > 0) {
                             break;
                         } else if (compare == 0) {
                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                             if (rangeField.compareTo(loopRangeField) > 0) {
                                 break;
                             }
                         }
                     }
                 }
             }
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
             // use public constructor to ensure full validation
             // this isn't overly efficient, but is safe
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
+            // The iChronology.validate call here (present in the original code) is a redundant check
+            // if the Partial constructor already performs the validation (which it typically does).
+            // However, removing it might change behavior in subtle ways for other cases not covered
+            // by this specific bug fix. Keeping it as it was in the original code, though the
+            // new check above will prevent this line from being reached for the testWith3 scenario.
             iChronology.validate(newPartial, newValues);
             return newPartial;
         }
         if (value == getValue(index)) {
             return this;
         }
         int[] newValues = getValues();
         newValues = getField(index).set(this, index, newValues, value);
         return new Partial(this, newValues);
     }
\ No newline at end of file
