diff --git a/tmp/59d564c8-9875-47f4-b415-9fc223b68e67_buggy.java b/tmp/b589b99a-edf2-4e87-a2b1-77b8c7dbde7a_fixed.java
index 7ea7ac9..50b5e9b 100644
--- a/tmp/59d564c8-9875-47f4-b415-9fc223b68e67_buggy.java
+++ b/tmp/b589b99a-edf2-4e87-a2b1-77b8c7dbde7a_fixed.java
@@ -1,63 +1,89 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // New field type, check for conflicts with existing fields
+            // Two field types conflict if they represent the same duration and range duration,
+            // but are not the same field type instance. For example, hourOfDay and clockhourOfDay.
+            DurationField unitField = fieldType.getDurationType().getField(iChronology);
+            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
+
+            for (int i = 0; i < iTypes.length; i++) {
+                DateTimeFieldType loopType = iTypes[i];
+                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+                DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
+
+                // If duration and range duration types are the same, they conflict conceptually
+                // unless they are the exact same fieldType instance (which is covered by indexOf).
+                if (unitField.compareTo(loopUnitField) == 0 && rangeField.compareTo(loopRangeField) == 0) {
+                    throw new IllegalArgumentException(
+                        "Field '" + fieldType.getName() + 
+                        "' is in conflict with existing field '" + loopType.getName() + "'"
+                    );
+                }
+            }
+
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
             
             // find correct insertion point to keep largest-smallest order
             int i = 0;
-            DurationField unitField = fieldType.getDurationType().getField(iChronology);
+            // Re-initialize unitField (already done above, but for clarity/scope)
+            unitField = fieldType.getDurationType().getField(iChronology); 
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
                         if (compare > 0) {
                             break;
                         } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
+                            // Re-initialize rangeField (already done above, but for clarity/scope)
+                            rangeField = fieldType.getRangeDurationType().getField(iChronology);
                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                             if (rangeField.compareTo(loopRangeField) > 0) {
                                 break;
                             }
                         }
                     }
                 }
             }
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
             // use public constructor to ensure full validation
             // this isn't overly efficient, but is safe
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
-            iChronology.validate(newPartial, newValues);
+            // The constructor of Partial already calls iChronology.validate(this, values).
+            // That validation primarily checks value ranges, not field type conflicts,
+            // which is now handled by the explicit loop above.
+            // iChronology.validate(newPartial, newValues); // This line is redundant.
             return newPartial;
         }
         if (value == getValue(index)) {
             return this;
         }
         int[] newValues = getValues();
         newValues = getField(index).set(this, index, newValues, value);
         return new Partial(this, newValues);
     }
\ No newline at end of file
