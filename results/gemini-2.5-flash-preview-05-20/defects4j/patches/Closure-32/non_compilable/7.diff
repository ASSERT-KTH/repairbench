diff --git a/tmp/952b249e-8e33-45fa-a4ff-26b4bff52294_buggy.java b/tmp/fc00c0b9-0889-45bc-b0bc-8d6aa410d9fd_fixed.java
index 4be01ab..eea3c9f 100644
--- a/tmp/952b249e-8e33-45fa-a4ff-26b4bff52294_buggy.java
+++ b/tmp/fc00c0b9-0889-45bc-b0bc-8d6aa410d9fd_fixed.java
@@ -1,115 +1,126 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+    // Removed JsDocToken.EOL from this initial check.
+    // For @preserve and @license, the text block can start on a new line
+    // after the annotation itself, which means the initial token could be EOL.
+    if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
     // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
+    // Do not trim the first line if preserving whitespace.
     if (option != WhitespaceOption.PRESERVE) {
       line = line.trim();
     }
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
     state = State.SEARCHING_ANNOTATION;
+    // Advance to the first token AFTER the initial line's content.
     token = next();
 
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+    // The 'ignoreStar' variable logic was inconsistent with `next()` skipping
+    // leading stars. It is removed for simplicity and correctness, as
+    // `stream.getWhitespaceSinceLastLine()` will handle the skipped content.
 
     do {
+      // Capture any whitespace that was skipped by the `next()` call that
+      // produced the current `token`. This is crucial for PRESERVE mode.
+      String skippedWhitespace = "";
+      if (option == WhitespaceOption.PRESERVE) {
+          skippedWhitespace = stream.getWhitespaceSinceLastLine();
+      }
+
       switch (token) {
         case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+          // If `next()` skips leading stars (e.g., ` * ` at the start of a line),
+          // then JsDocToken.STAR will only be returned for embedded stars (e.g., `foo * bar`).
+          // In PRESERVE mode, append the skipped whitespace before the star.
+          builder.append(skippedWhitespace);
+          // For non-PRESERVE, ensure a single space separator if needed.
+          if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {
             builder.append(' ');
           }
-
           builder.append('*');
-          }
-
-          token = next();
-          continue;
+          break; // Break and proceed to next() at the end of the loop
 
         case EOL:
+          // Append any skipped whitespace on the new line (e.g., `   ` if line is `   text`).
+          builder.append(skippedWhitespace);
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
-          ignoreStar = true;
-          token = next();
-          continue;
+          break;
 
         default:
-          ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
+              // When capturing a license/preserve block, annotations inside are allowed.
+              // So, only terminate on ANNOTATION if NOT in PRESERVE mode.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
 
+            // Only trim the final text if not preserving whitespace.
             if (option != WhitespaceOption.PRESERVE) {
               multilineText = multilineText.trim();
             }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
-
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
+          // Append any whitespace skipped before the current token.
+          builder.append(skippedWhitespace);
+
+          // All tokens must be separated by a space for non-PRESERVE options.
+          // This ensures a space is added if there wasn't one captured in skippedWhitespace
+          // and the previous content didn't end with a newline.
+          if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {
             builder.append(' ');
           }
+          
           builder.append(toString(token));
 
+          // Get the remaining part of the current line after the token.
           line = stream.getRemainingJSDocLine();
 
+          // Only trim the end of the line part if not preserving whitespace.
           if (option != WhitespaceOption.PRESERVE) {
             line = trimEnd(line);
           }
-
           builder.append(line);
-          token = next();
+          break;
       }
+      token = next(); // Advance to the next token for the loop iteration
     } while (true);
   }
\ No newline at end of file
