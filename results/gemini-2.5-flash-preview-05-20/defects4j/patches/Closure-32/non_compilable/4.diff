diff --git a/tmp/6d116f9d-5efa-4106-9426-58d0ca86a31f_buggy.java b/tmp/b79ae9e2-cf11-453d-b295-60bdccd7184f_fixed.java
index 4be01ab..f3b0320 100644
--- a/tmp/6d116f9d-5efa-4106-9426-58d0ca86a31f_buggy.java
+++ b/tmp/b79ae9e2-cf11-453d-b295-60bdccd7184f_fixed.java
@@ -1,115 +1,146 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
     StringBuilder builder = new StringBuilder();
-    builder.append(line);
 
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
+    // The state must be set to SEARCHING_COMMENT to allow next() to return all tokens (not just annotations)
+    // while we are extracting the text block.
+    // This state will be restored at the end of the method.
+    State originalState = state;
+    state = State.SEARCHING_COMMENT;
 
-    boolean ignoreStar = false;
+    // Handle the initial token and remaining part of its line.
+    // This is the content immediately following the tag (e.g., " Foo" after "@license").
+    if (token == JsDocToken.EOL) {
+      // If the token is EOL, it means the tag was on its own line (e.g., @preserve\n)
+      // Append a newline if PRESERVE option is active.
+      if (option == WhitespaceOption.PRESERVE) {
+        builder.append("\n");
+      }
+      token = next(); // Move to the first token of the next line
+    } else {
+      // Append the text of the current token.
+      String tokenText = toString(token);
+      if (option != WhitespaceOption.PRESERVE) {
+        tokenText = tokenText.trim(); // Trim leading/trailing spaces for non-PRESERVE
+      }
+      builder.append(tokenText);
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+      // Append the remainder of the current line after this token.
+      String remainingOnLine = stream.getRemainingJSDocLine();
+      if (option != WhitespaceOption.PRESERVE) {
+        remainingOnLine = trimEnd(remainingOnLine); // Trim only trailing spaces for non-PRESERVE
+      }
+      builder.append(remainingOnLine);
+
+      token = next(); // Move to the next token (likely EOL or EOC)
+    }
+
+    boolean ignoreStar = false; // Flag to ignore leading '*' on subsequent lines
 
     do {
       switch (token) {
         case STAR:
+          // If 'ignoreStar' is true, it means we just processed an EOL,
+          // and this STAR is a leading comment star (e.g., "\n * text").
+          // These should always be ignored, regardless of WhitespaceOption,
+          // as per JSDoc convention and test expectations (e.g., testIssue701).
           if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+            // Do nothing, effectively ignoring the star.
           } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+            // This star is part of the content (e.g., "/** * text */").
+            // For PRESERVE, append it directly. For others, add a space if needed.
+            if (option == WhitespaceOption.PRESERVE) {
+              builder.append('*');
+            } else {
+              // Add a space only if the builder is not empty and the last char wasn't space/newline.
+              if (builder.length() > 0 &&
+                  (builder.charAt(builder.length() - 1) != ' ' && builder.charAt(builder.length() - 1) != '\n')) {
                 builder.append(' ');
               }
-
               builder.append('*');
             }
-
+          }
           token = next();
           continue;
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
-          ignoreStar = true;
+          ignoreStar = true; // Set flag to ignore a potential leading '*' on the next line
           token = next();
           continue;
 
         default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
+          ignoreStar = false; // Reset if the current token is not EOL/STAR
 
+          // Check for termination conditions.
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+              // Terminate if we encounter an annotation and we are NOT in PRESERVE mode.
+              // In PRESERVE mode, annotations encountered within the block are treated as regular text.
+              (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
+              multilineText = multilineText.trim(); // Final trim for non-PRESERVE options
             }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
+            // Restore the original state before returning.
+            state = originalState;
+
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
+          // If not a termination token, append the current token's text and the rest of the line.
+          if (option == WhitespaceOption.PRESERVE) {
+              builder.append(toString(token));
+              builder.append(stream.getRemainingJSDocLine()); // Append as-is, preserving all whitespace
+          } else {
+              // For non-PRESERVE, tokens are typically separated by a single space,
+              // and lines are trimmed.
+              if (builder.length() > 0 &&
+                  (builder.charAt(builder.length() - 1) != ' ' && builder.charAt(builder.length() - 1) != '\n')) {
                   builder.append(' ');
               }
               builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+              String remainingLine = stream.getRemainingJSDocLine();
+              remainingLine = trimEnd(remainingLine); // Trim only trailing spaces
+              builder.append(remainingLine);
           }
-
-          builder.append(line);
           token = next();
       }
     } while (true);
   }
\ No newline at end of file
