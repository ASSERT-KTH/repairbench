diff --git a/tmp/de7a8c88-048a-4d84-8401-0ac21f95b7fb_buggy.java b/tmp/9e0ebb5a-e8cf-4a8e-a54e-d3e9512391e3_fixed.java
index 4be01ab..5504ad5 100644
--- a/tmp/de7a8c88-048a-4d84-8401-0ac21f95b7fb_buggy.java
+++ b/tmp/9e0ebb5a-e8cf-4a8e-a54e-d3e9512391e3_fixed.java
@@ -1,115 +1,164 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+    // If the first token is EOC or EOF, there is no text block.
+    // If EOL is the first token, it means the block starts on the next line,
+    // which is valid for @license and @preserve. So, don't return immediately for EOL.
+    // The comment about "quit immediately (indicating that there is no text where it was expected)"
+    // applies to tags like @param or @return where text is expected on the same line.
+    if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
-    stream.update();
+    stream.update(); // Set stream position for current token.
     int startLineno = stream.getLineno();
+    // Assuming JsDocInfo.markText expects 1-indexed column for start.
+    // getCharno() is 0-indexed. So +1 is for 1-indexed charno.
     int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
     StringBuilder builder = new StringBuilder();
-    builder.append(line);
+    boolean ignoreStar = false; // This flag helps handle leading '*' in non-PRESERVE mode.
 
-    state = State.SEARCHING_ANNOTATION;
+    // Handle the very first token passed to this function.
+    // This token is the first piece of text after the tag (e.g., "Foo" in "@preserve Foo Bar")
+    // OR it could be an EOL if the text starts on the next line (e.g., "@preserve\n Foo").
+    if (token == JsDocToken.EOL) {
+      if (option != WhitespaceOption.SINGLE_LINE) {
+        builder.append("\n");
+      }
+      ignoreStar = true; // Any '*' on the next line should be ignored (for non-PRESERVE).
+      token = next(); // Consume EOL, get next token.
+
+      // If PRESERVE, append any leading whitespace on the new line that 'next()' might have skipped.
+      // This is necessary to preserve exact column alignment for things like ASCII art.
+      if (option == WhitespaceOption.PRESERVE) {
+        while (stream.peekChar() == ' ' || stream.peekChar() == '\t') {
+          builder.append(stream.nextChar());
+        }
+      }
+    } else {
+      // The first token is actual content (STRING, STAR, etc.).
+      // Append the first token's content.
+      String firstTokenContent = toString(token);
+      // Then append the rest of the current line from the stream's current position.
+      String remainingLineAfterFirstToken = stream.getRemainingJSDocLine();
+
+      if (option != WhitespaceOption.PRESERVE) {
+        firstTokenContent = firstTokenContent.trim(); // Trim leading/trailing whitespace from token.
+        remainingLineAfterFirstToken = trimEnd(remainingLineAfterFirstToken); // Trim trailing whitespace from rest of line.
+      }
+      // For PRESERVE, append them as is. For non-PRESERVE, they are trimmed.
+      builder.append(firstTokenContent);
+      builder.append(remainingLineAfterFirstToken);
+
+      // Now advance to the next token, which will be an EOL, or the first token on a new line, or EOC/EOF.
       token = next();
+    }
 
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
+    // Now, the loop processes subsequent tokens/lines.
     do {
       switch (token) {
         case STAR:
+          if (option == WhitespaceOption.PRESERVE) {
+            // For PRESERVE, a '*' is always considered content.
+            // We just append it directly; don't rely on 'ignoreStar' or add artificial spaces.
+            builder.append('*');
+          } else { // Not PRESERVE, apply standard JSDoc leading star rule.
             if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+              // This STAR is a leading '*' on a new line, so it's ignored.
             } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+              // This STAR is part of content, not a leading one. Add space if not already at start of line.
+              if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\n') {
                 builder.append(' ');
               }
-
               builder.append('*');
             }
-
-          token = next();
+          }
+          token = next(); // Consume STAR token.
           continue;
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
+            builder.append("\n"); // Append newline for multiline blocks.
           }
+          ignoreStar = true; // Set flag to ignore a potential leading '*' on the very next line.
+          token = next(); // Consume EOL.
 
-          ignoreStar = true;
-          token = next();
+          // After EOL, if PRESERVE, read and append any leading whitespace (spaces/tabs)
+          // that 'next()' would normally skip on the new line. This maintains indentation.
+          if (option == WhitespaceOption.PRESERVE) {
+            while (stream.peekChar() == ' ' || stream.peekChar() == '\t') {
+              builder.append(stream.nextChar());
+            }
+          }
           continue;
 
         default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
+          ignoreStar = false; // Reset; current token is actual content, not a leading STAR.
 
+          // Check for termination conditions.
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
+              // An annotation terminates the text block if the option is NOT PRESERVE.
+              // If option *is* PRESERVE, annotations are treated as part of the text content
+              // for license/preserve blocks.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
+              multilineText = multilineText.trim(); // Final trim for non-PRESERVE content.
             }
             
+            // Mark the end position using the start of the current token that caused termination.
             int endLineno = stream.getLineno();
-            int endCharno = stream.getCharno();
+            int endCharno = stream.getCharno(); // 0-indexed column of the token that terminated the block.
 
             if (multilineText.length() > 0) {
+              // Mark the text block's span for source mapping.
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
-            builder.append(' ');
-          }
-          builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
+          // This part combines the current token with any remaining content on its line.
+          // This is a crucial pattern for how text blocks are extracted when JsDocTokenStream
+          // tokenizes individual words and getRemainingJSDocLine captures the rest.
+          String lineContent = toString(token); // Get the string representation of the current token.
+          String restOfCurrentLine = stream.getRemainingJSDocLine(); // Read everything from current stream position to EOL.
 
           if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+            lineContent = lineContent.trim(); // Trim leading/trailing whitespace from the token itself.
+            restOfCurrentLine = trimEnd(restOfCurrentLine); // Trim trailing whitespace from the rest of the line.
+
+            // For non-PRESERVE, add a space between words/tokens if needed.
+            // Condition: not at the beginning of the block, not after a newline, and current content is not empty.
+            if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\n' && !lineContent.isEmpty()) {
+              builder.append(' ');
+            }
           }
           
-          builder.append(line);
-          token = next();
+          // Append the processed token content and the rest of its line.
+          builder.append(lineContent);
+          builder.append(restOfCurrentLine);
+
+          token = next(); // Advance to the next token for the next iteration.
       }
     } while (true);
   }
