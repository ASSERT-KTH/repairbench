diff --git a/tmp/8ff9f3b3-3945-4338-93de-f45713ad6431_buggy.java b/tmp/b9a46376-7e3b-42fa-a9a6-28ae429c1713_fixed.java
index 4be01ab..63b3cb4 100644
--- a/tmp/8ff9f3b3-3945-4338-93de-f45713ad6431_buggy.java
+++ b/tmp/b9a46376-7e3b-42fa-a9a6-28ae429c1713_fixed.java
@@ -1,115 +1,118 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
     // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
     if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
+      line = line.trim(); // Trim leading/trailing whitespace on the first line
     }
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
-    state = State.SEARCHING_ANNOTATION;
+    // CRITICAL FIX: Set state according to WhitespaceOption.PRESERVE.
+    // In SEARCHING_TEXT state, `next()` will return WHITESPACE and STAR tokens,
+    // which is necessary for preserving exact text, including ASCII art.
+    if (option == WhitespaceOption.PRESERVE) {
+      state = State.SEARCHING_TEXT;
+    } else {
+      state = State.SEARCHING_ANNOTATION; // Default for non-PRESERVE (skips leading whitespace/stars)
+    }
     token = next();
 
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+    boolean ignoreStar = false; // Flag to indicate if the next STAR token should be ignored (e.g., " * ")
 
     do {
       switch (token) {
         case STAR:
+          // The 'ignoreStar' flag is set to true after EOL to handle the common JSDoc formatting " * text".
+          // If `ignoreStar` is true, it means we are at the start of a new line and this '*' is a formatting star.
+          // We consume it and do not append it to the builder.
           if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+            ignoreStar = false; // Consume this one formatting star, then reset the flag.
           } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
-            }
-
+            // If 'ignoreStar' is false, this '*' is part of the content (e.g., "**" or "text * text").
+            // Append it directly. No extra space needed, as we rely on `toString(WHITESPACE)`
+            // or `getRemainingJSDocLine()` for any necessary spacing.
             builder.append('*');
           }
-
-          token = next();
+          token = next(); // Move to the next token
           continue;
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
-          ignoreStar = true;
+          ignoreStar = true; // After EOL, the next token might be a leading '*' that should be ignored.
           token = next();
           continue;
 
         default:
+          // If the token is not STAR or EOL, we're inside the line content, so reset ignoreStar.
           ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
 
+          // Termination condition: end of comment, end of file, or another annotation.
+          // For PRESERVE option, annotations within the block are considered content,
+          // so we do not terminate on ANNOTATION if option is PRESERVE.
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+              (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
+              // Trim trailing whitespace from the final text for non-PRESERVE modes.
               multilineText = multilineText.trim();
             }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
-            builder.append(' ');
-          }
+          // Append the current token's value.
+          // In SEARCHING_TEXT mode (for PRESERVE), `toString(token)` will correctly include
+          // any whitespace captured as a WHITESPACE token.
+          // The previous `builder.append(' ');` which added an extra space is removed.
           builder.append(toString(token));
 
-          line = stream.getRemainingJSDocLine();
-
+          // Append the remainder of the current JSDoc line after this token.
+          // This allows capturing multi-word lines or lines with specific formatting.
+          String remainingLine = stream.getRemainingJSDocLine();
           if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+            remainingLine = trimEnd(remainingLine); // Trim trailing whitespace.
           }
+          builder.append(remainingLine);
 
-          builder.append(line);
-          token = next();
+          token = next(); // Move to the next token (which could be EOL, EOC, or next content token)
       }
     } while (true);
   }
\ No newline at end of file
