diff --git a/tmp/1e79bdd4-b17b-4295-833e-c8d5ff406819_buggy.java b/tmp/d7360bed-fa3d-40b3-a1e3-a3b643c32f18_fixed.java
index 4be01ab..5cd4c67 100644
--- a/tmp/1e79bdd4-b17b-4295-833e-c8d5ff406819_buggy.java
+++ b/tmp/d7360bed-fa3d-40b3-a1e3-a3b643c32f18_fixed.java
@@ -1,115 +1,204 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
+   * Note that if this method detects an end of line as the first token and
+   * the option is not WhitespaceOption.PRESERVE, it will quit immediately
+   * (indicating that there is no text where it was expected).
+   * Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+    // Initial check for EOC or EOF.
+    if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
+      return new ExtractionInfo("", token);
+    }
+    // If the first token is EOL and we are not in PRESERVE mode,
+    // it implies no text is present where expected (e.g., for @param descriptions).
+    if (token == JsDocToken.EOL && option != WhitespaceOption.PRESERVE) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
-    int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
+    // startCharno should ideally be the char position of the first *content* character.
+    // stream.getCharno() typically returns the position *after* the last consumed token.
+    // If 'token' is the first token to process, stream.getCharno() might be at its start or end.
+    // Assuming stream.getCharno() is at the *start* of the current token.
+    int startCharno = stream.getCharno();
 
     StringBuilder builder = new StringBuilder();
-    builder.append(line);
 
-    state = State.SEARCHING_ANNOTATION;
+    boolean lastAppendedWasNewline = true;
+    // This flag determines if we are at the beginning of a new line (after EOL or start of block)
+    // where leading stars or whitespace should be ignored for non-PRESERVE options.
+    // For PRESERVE option, these are usually considered content.
+    boolean atStartOfContentLine = true;
+
+    // Process the initial token before entering the main loop.
+    // This ensures 'token' is always 'next()' from previous iteration within the loop.
+    if (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE) {
+        // If the first token is an annotation and we are not in PRESERVE mode,
+        // it means there's no textual block to extract, and the annotation terminates.
+        return new ExtractionInfo("", token);
+    } else if (token == JsDocToken.EOL) {
+        // If the first token is EOL, append newline if not SINGLE_LINE, and set flags.
+        if (option != WhitespaceOption.SINGLE_LINE) {
+            builder.append("\n");
+        }
+        lastAppendedWasNewline = true;
+        atStartOfContentLine = true; // Still at start of a new (empty) line
+    } else if (token == JsDocToken.STAR) {
+        // For a leading star at the very beginning of the block.
+        // In PRESERVE mode, it's considered content. In non-PRESERVE, it's structural.
+        if (option == WhitespaceOption.PRESERVE) {
+            builder.append('*');
+            lastAppendedWasNewline = false;
+        }
+        atStartOfContentLine = true; // After a potentially structural star, still at start of content.
+    } else if (token == JsDocToken.WHITESPACE) {
+        // If first token is whitespace, append it if PRESERVE.
+        // Else, ignore it (as it's leading whitespace which is usually trimmed).
+        if (option == WhitespaceOption.PRESERVE) {
+            builder.append(stream.getTokenAsString());
+            lastAppendedWasNewline = false;
+        }
+        atStartOfContentLine = false; // After consuming whitespace, not at start of line for content.
+    } else { // It's a content token (STRING, NUMBER, etc.)
+        builder.append(stream.getTokenAsString());
+        lastAppendedWasNewline = false;
+        atStartOfContentLine = false; // After consuming content, not at start of line for next content.
+
+        // Append remaining text on the current line after this token.
+        String remainingLine = stream.getRemainingJSDocLine();
+        if (!remainingLine.isEmpty()) {
+            if (option != WhitespaceOption.PRESERVE) {
+                remainingLine = trimEnd(remainingLine);
+            }
+            builder.append(remainingLine);
+        }
+    }
+
+    // Advance the token for the main loop.
     token = next();
-
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+    // This state seems to be for the overall JsDocInfoParser, not specific to this block extraction.
+    // It's part of the original code, keeping it for consistency.
+    state = State.SEARCHING_ANNOTATION;
 
     do {
       switch (token) {
         case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          if (option == WhitespaceOption.PRESERVE) {
+            // In PRESERVE mode, a star is usually content.
+            builder.append('*');
+            lastAppendedWasNewline = false;
+            atStartOfContentLine = false;
+          } else { // Not PRESERVE
+            if (atStartOfContentLine) {
+              // Ignore leading structural star on a new line (e.g. ` * text`).
             } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+              // Non-leading star is treated as a word separator.
+              if (builder.length() > 0 && !lastAppendedWasNewline) {
                 builder.append(' ');
               }
-
               builder.append('*');
             }
+            lastAppendedWasNewline = false;
+            atStartOfContentLine = false;
+          }
+          token = next();
+          continue;
 
+        case WHITESPACE:
+          if (option == WhitespaceOption.PRESERVE) {
+            builder.append(stream.getTokenAsString());
+            lastAppendedWasNewline = false;
+            atStartOfContentLine = false;
+          } else { // Not PRESERVE
+            if (atStartOfContentLine) {
+              // Ignore leading whitespace on a new line (after structural star or EOL).
+            } else {
+              // Whitespace between tokens for non-PRESERVE: collapse to single space.
+              if (builder.length() > 0 && !lastAppendedWasNewline) {
+                builder.append(' ');
+              }
+            }
+            lastAppendedWasNewline = false;
+            atStartOfContentLine = false;
+          }
           token = next();
           continue;
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
-          ignoreStar = true;
+          lastAppendedWasNewline = true;
+          atStartOfContentLine = true; // Next token will be at the start of a new line.
           token = next();
           continue;
 
-        default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
+        default: // STRING, NUMBER, ANNOTATION etc.
+          atStartOfContentLine = false; // Not at start of content line after consuming a content token.
+          state = State.SEARCHING_ANNOTATION; // Reset state.
 
+          // Check for termination conditions.
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+              // An ANNOTATION token normally terminates the block, unless option is PRESERVE.
+              // For license/preserve blocks, subsequent annotations are often considered text.
+              // However, the test cases imply annotations should terminate even for @preserve
+              // if they are not the *initial* token that started this block.
+              // This is a subtle point. The original code has this condition:
+              // `(token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)`
+              // which means annotations *are* text for PRESERVE. This matches JSDoc spec for @license/@preserve.
+              (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
+
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
               multilineText = multilineText.trim();
             }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
+            // Mark text only if non-empty, and only once.
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
+          String currentTokenText = stream.getTokenAsString();
+
+          // Add space only if not PRESERVE, builder has content, and last was not newline.
+          // In PRESERVE mode, whitespace is handled by the WHITESPACE token type itself.
+          if (option != WhitespaceOption.PRESERVE && builder.length() > 0 && !lastAppendedWasNewline) {
             builder.append(' ');
           }
-          builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
+          builder.append(currentTokenText);
+          lastAppendedWasNewline = false;
 
+          // Append any remaining text on the current line after this token.
+          String remainingLine = stream.getRemainingJSDocLine();
+          if (!remainingLine.isEmpty()) {
             if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+              remainingLine = trimEnd(remainingLine);
+            }
+            builder.append(remainingLine);
           }
 
-          builder.append(line);
           token = next();
       }
     } while (true);
   }
\ No newline at end of file
