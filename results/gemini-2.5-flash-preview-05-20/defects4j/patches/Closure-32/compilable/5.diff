diff --git a/tmp/bf1bcfcb-2100-4bc1-bfe8-ee2ea6089ca7_buggy.java b/tmp/43a63c88-285d-47ec-9bbd-d2bda13ae44e_fixed.java
index 4be01ab..a73375b 100644
--- a/tmp/bf1bcfcb-2100-4bc1-bfe8-ee2ea6089ca7_buggy.java
+++ b/tmp/43a63c88-285d-47ec-9bbd-d2bda13ae44e_fixed.java
@@ -1,115 +1,119 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
     // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
+    // Do not trim initial line content if option is PRESERVE.
+    // The existing condition `option != WhitespaceOption.PRESERVE` means it's not trimmed for PRESERVE.
     if (option != WhitespaceOption.PRESERVE) {
       line = line.trim();
     }
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
     state = State.SEARCHING_ANNOTATION;
     token = next();
 
     boolean ignoreStar = false;
 
     // Track the start of the line to count whitespace that
     // the tokenizer skipped. Because this case is rare, it's easier
     // to do this here than in the tokenizer.
 
     do {
       switch (token) {
         case STAR:
           if (ignoreStar) {
             // Mark the position after the star as the new start of the line.
+            // When ignoreStar is true, we just consume the STAR token and don't append it.
           } else {
             // The star is part of the comment.
-            if (builder.length() > 0) {
+            // Only add a space if not PRESERVE and builder is not empty.
+            if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {
               builder.append(' ');
             }
-
             builder.append('*');
           }
 
           token = next();
           continue;
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
 
           ignoreStar = true;
           token = next();
           continue;
 
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
               // When we're capturing a license block, annotations
               // in the block are ok.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
               multilineText = multilineText.trim();
             }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
+          // All tokens must be separated by a space, UNLESS option is PRESERVE.
+          // This fixes the extra spaces in license/preserve blocks.
+          if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {
             builder.append(' ');
           }
           builder.append(toString(token));
 
           line = stream.getRemainingJSDocLine();
 
+          // Only trim the end of the line if not PRESERVE.
           if (option != WhitespaceOption.PRESERVE) {
             line = trimEnd(line);
           }
 
           builder.append(line);
           token = next();
       }
     } while (true);
   }
