diff --git a/tmp/00962652-06b6-4de0-a720-07f84e29b20a_buggy.java b/tmp/a87b5af6-44dc-4138-a23c-d3fe934ad88a_fixed.java
index 4be01ab..b2160e8 100644
--- a/tmp/00962652-06b6-4de0-a720-07f84e29b20a_buggy.java
+++ b/tmp/a87b5af6-44dc-4138-a23c-d3fe934ad88a_fixed.java
@@ -1,115 +1,127 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+    // BUG FIX 1: Removed `token == JsDocToken.EOL` from the initial return condition.
+    // For @preserve/@license tags, content can start on the next line (after an EOL).
+    if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
     // Read the content from the first line.
+    // This reads from the current stream position (which is at the start of `token`)
+    // to the end of the current line.
     String line = stream.getRemainingJSDocLine();
     if (option != WhitespaceOption.PRESERVE) {
       line = line.trim();
     }
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
     state = State.SEARCHING_ANNOTATION;
+    // After reading the first line content, advance to the next token, which
+    // is typically the first token on the *next* line, or EOC/EOF.
     token = next();
 
     boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
     do {
       switch (token) {
         case STAR:
           if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+            // BUG FIX 3: When a star is ignored (e.g., ` * Foo`), any whitespace between
+            // the `*` and `Foo` must be preserved for `PRESERVE` option.
+            // `stream.getRemainingJSDocLine()` gets content from the current stream
+            // position (after the '*') to the end of the line.
+            String remainingLineAfterStar = stream.getRemainingJSDocLine();
+            builder.append(remainingLineAfterStar);
           } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+            // BUG FIX 2: Only append a space if not preserving whitespace
+            // and if builder is not empty.
+            if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {
               builder.append(' ');
             }
-
             builder.append('*');
           }
 
-          token = next();
+          token = next(); // Advance to the next token
           continue;
 
         case EOL:
+          // Append a newline character if not in single-line mode.
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
 
-          ignoreStar = true;
-          token = next();
+          ignoreStar = true; // Set flag to ignore a leading star on the next line
+          token = next(); // Advance to the next token
           continue;
 
         default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
+          ignoreStar = false; // Reset flag as we are consuming a non-star token
+          state = State.SEARCHING_ANNOTATION; // Reset state for subsequent processing
 
+          // Check for termination conditions.
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
               // When we're capturing a license block, annotations
-              // in the block are ok.
+              // in the block are ok. But if not preserving whitespace,
+              // an ANNOTATION token should terminate the text block.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
               multilineText = multilineText.trim();
             }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
+          // BUG FIX 2: Only append a space if not preserving whitespace
+          // and if builder has existing content.
+          if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {
             builder.append(' ');
           }
           builder.append(toString(token));
 
+          // Append the remainder of the current JSDoc line after the current token.
+          // This captures any trailing whitespace or multiple words on the same line.
           line = stream.getRemainingJSDocLine();
 
           if (option != WhitespaceOption.PRESERVE) {
+            // Only trim trailing whitespace if not preserving.
             line = trimEnd(line);
           }
-
           builder.append(line);
-          token = next();
+
+          token = next(); // Advance to the next token
       }
     } while (true);
   }
\ No newline at end of file
