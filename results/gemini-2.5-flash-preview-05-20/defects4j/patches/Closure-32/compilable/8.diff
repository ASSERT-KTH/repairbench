diff --git a/tmp/bd5698cd-c254-408a-b34f-502371cdd113_buggy.java b/tmp/446c645b-b6fb-49d6-ac5f-4a0f32678f45_fixed.java
index 4be01ab..64dd770 100644
--- a/tmp/bd5698cd-c254-408a-b34f-502371cdd113_buggy.java
+++ b/tmp/446c645b-b6fb-49d6-ac5f-4a0f32678f45_fixed.java
@@ -1,115 +1,138 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+    // If the block starts with EOC or EOF, there's no text.
+    if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
+    // If the first token is EOL and we are *not* preserving whitespace,
+    // it implies an empty block (e.g., `@param\n`). Return an empty string.
+    if (token == JsDocToken.EOL && option != WhitespaceOption.PRESERVE) {
+      return new ExtractionInfo("", token);
+    }
+
+    // Update stream to position for the start of the current text block.
+    // If 'token' was EOL, stream.update() will advance to the next line.
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
     StringBuilder builder = new StringBuilder();
-    builder.append(line);
 
-    state = State.SEARCHING_ANNOTATION;
+    // Handle the initial token and its line.
+    // If the first token is EOL, append newline for PRESERVE option.
+    if (token == JsDocToken.EOL) {
+        if (option == WhitespaceOption.PRESERVE) {
+            builder.append("\n");
+        }
+        // Advance token to the first token on the next line for the loop.
         token = next();
+    } else {
+        // Append the content of the initial token.
+        // For PRESERVE, we don't trim this first token.
+        builder.append(toString(token));
 
-    boolean ignoreStar = false;
+        // Append the remaining content of the current line.
+        // This is crucial for preserving internal line spacing (e.g., "Foo   Bar").
+        String remainingLine = stream.getRemainingJSDocLine();
+        if (option != WhitespaceOption.PRESERVE) {
+            remainingLine = trimEnd(remainingLine);
+        }
+        builder.append(remainingLine);
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+        // Advance to the token *after* this initial line's content.
+        token = next();
+    }
 
+    // Loop to process subsequent tokens/lines.
     do {
-      switch (token) {
-        case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
-            }
-
-            builder.append('*');
-          }
-
-          token = next();
-          continue;
-
-        case EOL:
-          if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
-          }
-
-          ignoreStar = true;
-          token = next();
-          continue;
-
-        default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
+      // Check for termination conditions.
+      // A license/preserve block can contain annotations, so don't stop for ANNOTATION if PRESERVE.
       if (token == JsDocToken.EOC ||
           token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+          (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
         String multilineText = builder.toString();
 
         if (option != WhitespaceOption.PRESERVE) {
           multilineText = multilineText.trim();
         }
 
         int endLineno = stream.getLineno();
         int endCharno = stream.getCharno();
 
         if (multilineText.length() > 0) {
           jsdocBuilder.markText(multilineText, startLineno, startCharno,
               endLineno, endCharno);
         }
-
         return new ExtractionInfo(multilineText, token);
       }
 
-          if (builder.length() > 0) {
-            builder.append(' ');
-          }
-          builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
+      switch (token) {
+        case STAR:
+          // JsDocInfoParser.next() generally strips leading `*` from new lines.
+          // So if we get a STAR token here, it's typically an inline star.
+          // In either case, it's part of the text to be appended.
+          if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1))) {
+            // Append space if not already ending with whitespace AND not in PRESERVE mode.
             if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+              builder.append(' ');
             }
+          }
+          builder.append('*');
+          token = next();
+          continue;
+
+        case EOL:
+          if (option != WhitespaceOption.SINGLE_LINE) {
+            builder.append("\n");
+          }
+          // For PRESERVE mode, we need to handle the content of the next line carefully
+          // because JsDocInfoParser.next() will strip leading '*' and whitespace.
+          if (option == WhitespaceOption.PRESERVE) {
+              stream.update(); // Move to the start of the next line.
+              String lineContent = stream.getRemainingJSDocLine(); // Get raw content of new line.
+              // Remove leading '*' and one space, if present (standard JSDoc comment indentation).
+              // This accounts for " *   Some text" -> "  Some text".
+              if (lineContent.length() > 0 && lineContent.charAt(0) == '*') {
+                  lineContent = lineContent.substring(1);
+                  if (lineContent.length() > 0 && lineContent.charAt(0) == ' ') {
+                      lineContent = lineContent.substring(1);
+                  }
+              }
+              builder.append(lineContent);
+              token = next(); // Advance token after processing the entire line.
+          } else {
+              // For non-PRESERVE, JsDocInfoParser.next() handles skipping leading '*' and whitespace.
+              token = next();
+          }
+          continue;
+
+        default:
+          // All tokens must be separated by a space for NORMAL/SINGLE_LINE.
+          // For PRESERVE, append directly as current character sequence.
+          if (builder.length() > 0 && option != WhitespaceOption.PRESERVE && !Character.isWhitespace(builder.charAt(builder.length() - 1))) {
+            builder.append(' ');
+          }
+          builder.append(toString(token));
 
-          builder.append(line);
+          // Removed the problematic stream.getRemainingJSDocLine() call from here.
+          // The 'token = next();' below will correctly advance the stream to the next token.
           token = next();
       }
     } while (true);
   }
\ No newline at end of file
