diff --git a/tmp/5c432ed5-0dc7-4978-9174-944f734a8259_buggy.java b/tmp/141ebb4d-659e-43a1-bd43-2df74e58d4b7_fixed.java
index d907b39..150afe6 100644
--- a/tmp/5c432ed5-0dc7-4978-9174-944f734a8259_buggy.java
+++ b/tmp/141ebb4d-659e-43a1-bd43-2df74e58d4b7_fixed.java
@@ -1,56 +1,76 @@
     public int read(byte[] buffer, int start, int length) throws IOException {
         if (closed) {
             throw new IOException("The stream is closed");
         }
         if (inf.finished() || current == null) {
             return -1;
         }
 
         // avoid int overflow, check null buffer
         if (start <= buffer.length && length >= 0 && start >= 0
             && buffer.length - start >= length) {
             if (current.getMethod() == ZipArchiveOutputStream.STORED) {
                 int csize = (int) current.getSize();
                 if (readBytesOfEntry >= csize) {
                     return -1;
                 }
                 if (offsetInBuffer >= lengthOfLastRead) {
                     offsetInBuffer = 0;
                     if ((lengthOfLastRead = in.read(buf)) == -1) {
                         return -1;
                     }
                     count(lengthOfLastRead);
                     bytesReadFromStream += lengthOfLastRead;
                 }
                 int toRead = length > lengthOfLastRead
                     ? lengthOfLastRead - offsetInBuffer
                     : length;
                 if ((csize - readBytesOfEntry) < toRead) {
                     toRead = csize - readBytesOfEntry;
                 }
                 System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
                 offsetInBuffer += toRead;
                 readBytesOfEntry += toRead;
                 crc.update(buffer, start, toRead);
                 return toRead;
             }
+            // DEFLATED method handling
             if (inf.needsInput()) {
-                fill();
+                fill(); // This fills 'inf' with more data from 'in' via 'buf'.
+                        // It updates 'lengthOfLastRead' with the number of bytes read from 'in'.
+                        // If 'in' hits EOF, 'lengthOfLastRead' becomes -1.
                 if (lengthOfLastRead > 0) {
                     bytesReadFromStream += lengthOfLastRead;
+                } else if (lengthOfLastRead == -1) { // EOF from underlying stream
+                    // If inflater still needs input and we hit EOF, it's a truncated stream.
+                    // This is for cases where even after trying to fill, we get no more data.
+                    if (!inf.finished()) { // If it's not finished normally.
+                        throw new IOException("Truncated ZIP file");
+                    }
+                    // If it's finished, and we hit EOF, it's a normal end.
+                    return -1; 
                 }
             }
             int read = 0;
             try {
                 read = inf.inflate(buffer, start, length);
             } catch (DataFormatException e) {
                 throw new ZipException(e.getMessage());
             }
             if (read == 0 && inf.finished()) {
-                return -1;
+                return -1; // Normal end of entry
+            }
+            // If inflate returns 0, but is not finished, and needs input:
+            // This implies the compressed data itself is truncated.
+            // This happens if fill() provided some data, but it was not enough
+            // for inflate to produce output or finish, and now it wants more.
+            // Since we just called fill(), and it didn't throw/return -1 (meaning lengthOfLastRead > 0),
+            // it means the stream provided *some* data, but it was incomplete for the entry.
+            if (read == 0 && !inf.finished() && inf.needsInput()) {
+                throw new IOException("Truncated ZIP file");
             }
             crc.update(buffer, start, read);
             return read;
         }
         throw new ArrayIndexOutOfBoundsException();
     }
