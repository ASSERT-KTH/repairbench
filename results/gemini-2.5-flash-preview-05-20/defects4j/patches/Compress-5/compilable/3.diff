diff --git a/tmp/6806af57-e322-4d97-87b9-48c314c16b0b_buggy.java b/tmp/1a8d4bd1-284e-4d5a-a240-9ff7d8e6b568_fixed.java
index d907b39..66badd2 100644
--- a/tmp/6806af57-e322-4d97-87b9-48c314c16b0b_buggy.java
+++ b/tmp/1a8d4bd1-284e-4d5a-a240-9ff7d8e6b568_fixed.java
@@ -1,56 +1,75 @@
     public int read(byte[] buffer, int start, int length) throws IOException {
         if (closed) {
             throw new IOException("The stream is closed");
         }
         if (inf.finished() || current == null) {
             return -1;
         }
 
         // avoid int overflow, check null buffer
         if (start <= buffer.length && length >= 0 && start >= 0
             && buffer.length - start >= length) {
+
+            // If length is 0, no bytes are read, return 0.
+            // This is a standard InputStream contract behavior.
+            if (length == 0) {
+                return 0;
+            }
+
             if (current.getMethod() == ZipArchiveOutputStream.STORED) {
                 int csize = (int) current.getSize();
                 if (readBytesOfEntry >= csize) {
                     return -1;
                 }
                 if (offsetInBuffer >= lengthOfLastRead) {
                     offsetInBuffer = 0;
                     if ((lengthOfLastRead = in.read(buf)) == -1) {
                         return -1;
                     }
                     count(lengthOfLastRead);
                     bytesReadFromStream += lengthOfLastRead;
                 }
                 int toRead = length > lengthOfLastRead
                     ? lengthOfLastRead - offsetInBuffer
                     : length;
                 if ((csize - readBytesOfEntry) < toRead) {
                     toRead = csize - readBytesOfEntry;
                 }
                 System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
                 offsetInBuffer += toRead;
                 readBytesOfEntry += toRead;
                 crc.update(buffer, start, toRead);
                 return toRead;
             }
+            // DEFLATED path
             if (inf.needsInput()) {
-                fill();
+                fill(); // This method updates lengthOfLastRead
                 if (lengthOfLastRead > 0) {
                     bytesReadFromStream += lengthOfLastRead;
                 }
+                // If fill() returned 0 bytes (meaning in.read(buf) returned 0),
+                // and the inflater is not finished, it implies the underlying stream
+                // is exhausted for this entry, but the entry itself is not fully decompressed.
+                // This is a truncated stream.
+                if (lengthOfLastRead == 0 && !inf.finished()) {
+                    throw new IOException("Truncated ZIP file");
+                }
             }
             int read = 0;
             try {
                 read = inf.inflate(buffer, start, length);
             } catch (DataFormatException e) {
                 throw new ZipException(e.getMessage());
             }
             if (read == 0 && inf.finished()) {
                 return -1;
             }
+            // If 'read' is 0 here and !inf.finished(), it means inf.needsInput() is true.
+            // The next call to read() will then re-enter the 'if (inf.needsInput())' block,
+            // call fill(), and the added check will handle the truncation if lengthOfLastRead is 0.
+
             crc.update(buffer, start, read);
             return read;
         }
         throw new ArrayIndexOutOfBoundsException();
     }
