diff --git a/tmp/c0259c9c-a21a-46d8-9d2f-bd001f73a00f_buggy.java b/tmp/daa7749b-6221-4477-94d8-ea008c8c6377_fixed.java
index f9a9b5b..9ba2220 100644
--- a/tmp/c0259c9c-a21a-46d8-9d2f-bd001f73a00f_buggy.java
+++ b/tmp/daa7749b-6221-4477-94d8-ea008c8c6377_fixed.java
@@ -1,30 +1,48 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
+
+        org.mockito.internal.creation.instance.ClassInstantiator instantiatorForThisMock;
+        if (settings.isUsingConstructor()) {
+            java.util.Optional<Object[]> constructorArgs = java.util.Optional.ofNullable(settings.getConstructorArgs())
+                                                        .map(java.util.List::toArray);
+            java.util.Optional<Class<?>[]> constructorArgTypes = java.util.Optional.ofNullable(settings.getConstructorArgTypes());
+
+            instantiatorForThisMock = new org.mockito.internal.creation.instance.ConstructorInstantiator(
+                java.util.Optional.ofNullable(settings.getOuterInstance()),
+                constructorArgs,
+                constructorArgTypes
+            );
+        } else {
+            // For regular mocks (not using constructor), use the default instantiator (typically Objenesis)
+            // 'this.classInstantiator' is assumed to be an ObjenesisClassInstantiator initialized by ByteBuddyMockMaker.
+            instantiatorForThisMock = this.classInstantiator;
+        }
+
         T mockInstance = null;
         try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+            mockInstance = instantiatorForThisMock.instantiate(mockedProxyType);
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
+                    "  class to mock : " + describeClass(settings.getTypeToMock()), // Refer to the original type requested by user
                     "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    "  instance creation by : " + instantiatorForThisMock.getClass().getSimpleName(), // Use the instantiator chosen for this mock
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            // Fix the error message to refer to the original type to mock
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
