diff --git a/tmp/3f22cafa-f31d-48fe-8eac-4077483aef90_buggy.java b/tmp/15801a86-007a-4edd-8185-02c022f14aa2_fixed.java
index f9a9b5b..5ec7f45 100644
--- a/tmp/3f22cafa-f31d-48fe-8eac-4077483aef90_buggy.java
+++ b/tmp/15801a86-007a-4edd-8185-02c022f14aa2_fixed.java
@@ -1,30 +1,53 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
+        // Declare instantiatorToUse outside the try block to make it accessible in catch blocks
+        org.mockito.internal.creation.instance.Instantiator instantiatorToUse = null;
         try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+            if (settings.isUsingConstructor()) {
+                // When using a constructor, a ConstructorInstantiator is required.
+                // It takes care of finding and invoking the appropriate constructor,
+                // including handling inner classes and their outer instances.
+                instantiatorToUse = new org.mockito.internal.creation.instance.ConstructorInstantiator(
+                    settings.isStripAnnotations(),
+                    settings.getOuterInstance(),
+                    settings.getConstructorArgs() != null ? settings.getConstructorArgs() : new Object[0]
+                );
+            } else {
+                // Otherwise, use the default instantiator (typically ObjenesisInstantiator),
+                // which creates an instance without invoking any constructor.
+                instantiatorToUse = classInstantiator;
+            }
+
+            mockInstance = instantiatorToUse.instantiate(mockedProxyType);
+
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
+            // Improve error message for ClassCastException for better debugging
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    "  class to mock : " + describeClass(settings.getTypeToMock()), // The original type requested by the user
+                    "  created class : " + describeClass(mockedProxyType), // The ByteBuddy generated proxy type
+                    "  proxy instance class : " + describeClass(mockInstance), // The actual instance's class
+                    "  instance creation by : " + (instantiatorToUse != null ? instantiatorToUse.getClass().getSimpleName() : "unknown instantiator"), // Show the instantiator used
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            // Fix the error message for InstantiationException.
+            // Original: "Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'"
+            // This was problematic as getSuperclass() can be null or less descriptive.
+            // Changed to use the simple name of the original type requested by the user.
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
