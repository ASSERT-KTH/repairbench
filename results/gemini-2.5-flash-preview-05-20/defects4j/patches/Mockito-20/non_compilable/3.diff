diff --git a/tmp/966750f7-c0f8-4239-a50c-043368c0ef6a_buggy.java b/tmp/5be99a10-9769-455d-8f40-e0c2a2fd7a1e_fixed.java
index f9a9b5b..3b57105 100644
--- a/tmp/966750f7-c0f8-4239-a50c-043368c0ef6a_buggy.java
+++ b/tmp/5be99a10-9769-455d-8f40-e0c2a2fd7a1e_fixed.java
@@ -1,30 +1,46 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
         try {
+            if (settings.isUsingConstructor()) {
+                // When settings specify using a constructor (e.g., withSettings().useConstructor() or for spies),
+                // we use a ConstructorInstantiator which will find and invoke the appropriate constructor.
+                // 'allowNonAccessible' is typically false for user-specified constructor calls.
+                mockInstance = new org.mockito.internal.creation.instance.ConstructorInstantiator(
+                                false, // Do not allow non-accessible constructors for user-specified calls
+                                settings.getOuterInstance(),
+                                settings.getConstructorArgs()
+                                ).instantiate(mockedProxyType);
+            } else {
+                // Otherwise, for regular mocks, use the default instantiator (likely Objenesis-based)
+                // which avoids calling any constructor.
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
+            }
+
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
                     "  class to mock : " + describeClass(mockedProxyType),
                     "  created class : " + describeClass(settings.getTypeToMock()),
                     "  proxy instance class : " + describeClass(mockInstance),
                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            // Re-throw with a more user-friendly message, preserving the original cause.
+            // The ConstructorInstantiator will have a detailed message in its cause (e.g., constructor not found).
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
