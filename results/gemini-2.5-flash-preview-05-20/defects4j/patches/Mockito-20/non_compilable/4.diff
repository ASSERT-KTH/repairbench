diff --git a/tmp/030fee16-5752-4dba-bce0-1889ee099872_buggy.java b/tmp/2ff551a3-b1d3-4973-aea8-baa766d0b1e3_fixed.java
index f9a9b5b..f09edb2 100644
--- a/tmp/030fee16-5752-4dba-bce0-1889ee099872_buggy.java
+++ b/tmp/2ff551a3-b1d3-4973-aea8-baa766d0b1e3_fixed.java
@@ -1,30 +1,44 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
         try {
+            if (settings.isUsingConstructor()) {
+                // If the user specified to use a constructor, call the appropriate instantiation method.
+                // This method handles both standard constructors and inner class constructors (with outer instance).
+                mockInstance = classInstantiator.instantiate(
+                        mockedProxyType,
+                        settings.getOuterInstance(),
+                        settings.getConstructorArgs()
+                );
+            } else {
+                // Otherwise, use the default instantiation mechanism which typically bypasses constructors (e.g., Objenesis).
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
+            }
+
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
                     "  class to mock : " + describeClass(mockedProxyType),
                     "  created class : " + describeClass(settings.getTypeToMock()),
                     "  proxy instance class : " + describeClass(mockInstance),
                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            // Correct the error message to reflect the type the user intended to mock,
+            // not the internal proxy type's superclass name, as per test expectations.
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
