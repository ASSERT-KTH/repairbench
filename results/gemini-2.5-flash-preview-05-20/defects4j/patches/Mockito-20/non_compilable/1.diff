diff --git a/tmp/37ab7257-1b17-4025-88fd-cb66d52a593b_buggy.java b/tmp/28b4c924-ef00-45b5-be0c-2795853336a4_fixed.java
index f9a9b5b..e8e028a 100644
--- a/tmp/37ab7257-1b17-4025-88fd-cb66d52a593b_buggy.java
+++ b/tmp/28b4c924-ef00-45b5-be0c-2795853336a4_fixed.java
@@ -1,30 +1,44 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
         try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+            final org.mockito.internal.creation.instance.ClassInstantiator actualInstantiator;
+            if (settings.isUsingConstructor()) {
+                // If the settings require using a constructor, use ConstructorInstantiator.
+                // This instantiator can handle specific constructor arguments and outer instances for inner classes.
+                actualInstantiator = new org.mockito.internal.creation.instance.ConstructorInstantiator(settings.getOuterInstance(), settings.getConstructorArgs());
+            } else {
+                // Otherwise, use the default class instantiator (e.g., ObjenesisClassInstantiator),
+                // which bypasses constructors.
+                actualInstantiator = classInstantiator; // This is the field initialized in ByteBuddyMockMaker
+            }
+
+            mockInstance = actualInstantiator.instantiate(mockedProxyType);
+
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
                     "  class to mock : " + describeClass(mockedProxyType),
                     "  created class : " + describeClass(settings.getTypeToMock()),
                     "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    "  instance creation by : " + actualInstantiator.getClass().getSimpleName(), // Use actualInstantiator for error message
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            // The error message should refer to the type the user intended to mock,
+            // not necessarily the superclass of the generated proxy.
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
