diff --git a/tmp/b3724fb5-426d-4947-b3b0-8279972e7246_buggy.java b/tmp/cb100933-dccc-4947-9640-ed136159b49d_fixed.java
index 0eef537..64788cf 100644
--- a/tmp/b3724fb5-426d-4947-b3b0-8279972e7246_buggy.java
+++ b/tmp/cb100933-dccc-4947-9640-ed136159b49d_fixed.java
@@ -1,74 +1,93 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
+        // lTData will store the upper triangular factor (L^T).
+        // The matrix.getData() method in Array2DRowRealMatrix returns a reference to its internal data.
+        // This means the input matrix will be modified in place during the decomposition.
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Perform initial checks and pre-processing
         for (int i = 0; i < order; ++i) {
 
             final double[] lI = lTData[i];
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // The check for positive definiteness for diagonal elements (lTData[i][i] < absolutePositivityThreshold)
+            // was incorrectly placed here in the original code. It should be performed inside the main
+            // transformation loop, after elements have been reduced by previous steps.
+            // Here, lTData[i][i] still holds the original A_ii.
+
+            // Check off-diagonal elements for symmetry and set lower triangular part to zero.
+            // Setting lTData[j][i] = 0 (for j > i) effectively pre-processes the matrix
+            // so that lTData starts containing the upper triangular part of A and zeros below diagonal.
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double lIJ = lI[j]; // A_ij
+                final double lJI = lJ[i]; // A_ji
+
+                // Check for symmetry: |A_ij - A_ji| > threshold * max(|A_ij|, |A_ji|)
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                lJ[i] = 0; // Set A_ji to zero (element in the lower triangular part)
            }
         }
 
-        // transform the matrix
+        // Perform the Cholesky decomposition (computes L^T in-place in lTData)
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
-            // check diagonal element
+            // At this point, lTData[i][i] (or ltI[i]) holds the value A_ii - sum(U_ki^2 for k < i),
+            // which is the squared diagonal element (U_ii^2) of the upper triangular Cholesky factor.
+            // If this value is not strictly positive, the matrix is not positive definite.
+            // This check is crucial and was missing/misplaced in the original code.
+            if (ltI[i] < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
+            // Calculate the diagonal element U_ii = sqrt(U_ii^2)
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
+            // Compute the remaining off-diagonal elements in the current row (U_ij for j > i)
+            // and update the trailing submatrix.
+            for (int q = order - 1; q > i; --q) { // Iterate columns 'q' from right to left (j > i)
+                ltI[q] *= inverse; // Calculate U_iq = (A_iq - sum) / U_ii
+
+                // Update the trailing submatrix: A_qp = A_qp - U_iq * U_ip
+                // This is the outer product subtraction, reducing the remaining part of the matrix.
+                final double[] ltQ = lTData[q]; // Get row 'q'
+                for (int p = q; p < order; ++p) { // Iterate columns 'p' from 'q' to order-1
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
