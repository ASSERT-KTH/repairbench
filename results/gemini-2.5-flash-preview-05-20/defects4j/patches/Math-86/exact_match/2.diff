diff --git a/tmp/2398f499-c77d-4e13-8153-c3dfb8e301e6_buggy.java b/tmp/dc9ed21c-132b-4147-a3e1-996f1e9c8e50_fixed.java
index 0eef537..9d143e1 100644
--- a/tmp/2398f499-c77d-4e13-8153-c3dfb8e301e6_buggy.java
+++ b/tmp/dc9ed21c-132b-4147-a3e1-996f1e9c8e50_fixed.java
@@ -1,74 +1,84 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Check the matrix for symmetry and zero out the lower triangle.
+        // The original matrix is assumed to be A. lTData will be transformed in-place
+        // to become U (upper triangular) such that A = U^T * U.
+        // Initially, the lower triangle of lTData is set to 0.
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // check off-diagonal elements for symmetry (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
+                // Zero out the lower triangle elements; lTData will become upper triangular (U)
                 lJ[i] = 0;
            }
         }
 
-        // transform the matrix
+        // Perform the Cholesky decomposition (A = U^T * U, in-place, U is upper triangular).
+        // This is a variant of the outer product Cholesky algorithm.
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
-            // check diagonal element
+            // The value ltI[i] (which is lTData[i][i]) at this point should hold
+            // A_ii - sum(U_ki^2 for k < i), accumulated from previous outer product steps.
+            // This reduced diagonal element must be strictly positive for the matrix to be
+            // positive definite.
+            if (ltI[i] < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
 
+            // Compute U_ij for j > i, and update the remaining submatrix.
+            // The inner loop iterates from right to left for columns 'q'
+            // and updates elements in the submatrix below and to the right of the current pivot.
             for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
+                // Compute U_iq
+                ltI[q] *= inverse; // (A_iq - sum(U_ki * U_kq for k < i)) / U_ii
+
+                // Update the remaining submatrix (lTData[q][p] where q > i, p >= q)
                 final double[] ltQ = lTData[q];
                 for (int p = q; p < order; ++p) {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
