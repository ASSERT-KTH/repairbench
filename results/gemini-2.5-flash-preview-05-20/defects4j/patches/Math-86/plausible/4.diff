diff --git a/tmp/476bb411-c719-4abd-a845-f10336f9fea0_buggy.java b/tmp/be6c9e9f-63ec-4a13-82cf-813989477f7f_fixed.java
index 0eef537..63c82c7 100644
--- a/tmp/476bb411-c719-4abd-a845-f10336f9fea0_buggy.java
+++ b/tmp/be6c9e9f-63ec-4a13-82cf-813989477f7f_fixed.java
@@ -1,74 +1,94 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        // Make a deep copy of the matrix data to avoid modifying the input matrix.
+        // The lTData field will store the L^T factor.
+        final double[][] matrixData = matrix.getData();
+        lTData = new double[order][order];
+        for (int i = 0; i < order; ++i) {
+            System.arraycopy(matrixData[i], 0, lTData[i], 0, order);
+        }
+
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Check for symmetry and zero out the lower triangle (for L^T factor, which is upper triangular)
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // Check off-diagonal elements for symmetry
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double lIJ = lI[j]; // element at (i, j)
+                final double lJI = lJ[i]; // element at (j, i)
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
+                // Zero out the element at (j, i) to make lTData upper triangular for L^T
+                // This corresponds to L^T[j][i] where j > i, which must be zero.
                 lJ[i] = 0;
            }
         }
 
-        // transform the matrix
+        // Transform the matrix into its Cholesky decomposition L^T (U)
+        // This loop applies the Cholesky algorithm to compute the upper triangular factor (L^T).
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
-            // check diagonal element
+            // At this point, lTData[i][i] contains the value:
+            // original A[i][i] - sum_{k=0}^{i-1} (L^T[k][i])^2.
+            // This is the value that must be non-negative for the matrix to be positive definite.
+            // This is the correct place to check for positive definiteness.
+            if (ltI[i] < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
-            ltI[i] = Math.sqrt(ltI[i]);
+            ltI[i] = Math.sqrt(ltI[i]); // Compute the diagonal element of L^T (U_ii)
             final double inverse = 1.0 / ltI[i];
 
+            // Update the rest of the current row (L^T[i][q] for q > i) and
+            // update the submatrix for future steps.
+            // The loop for 'q' can go backwards or forwards, the order of operations for ltI[q]
+            // and ltQ[p] is critical.
             for (int q = order - 1; q > i; --q) {
+                // Compute L^T[i][q] (U_iq) = (A_iq - sum_{k=0}^{i-1} U_ki * U_kq) / U_ii
+                // The A_iq part (lTData[i][q]) has already been updated by previous iterations'
+                // outer product subtractions.
                 ltI[q] *= inverse;
+
+                // Update the remaining submatrix (elements A_qp for q,p >= i+1)
+                // by subtracting the outer product of the current row.
+                // A_qp = A_qp - U_iq * U_ip
                 final double[] ltQ = lTData[q];
                 for (int p = q; p < order; ++p) {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
