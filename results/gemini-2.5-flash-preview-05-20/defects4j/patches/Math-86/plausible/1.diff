diff --git a/tmp/993a6b9d-bb1d-4ee0-bb43-f115399ad6b8_buggy.java b/tmp/39bd1eee-b48d-43d1-8dc2-119863c0f6a9_fixed.java
index 0eef537..cf1aa2b 100644
--- a/tmp/993a6b9d-bb1d-4ee0-bb43-f115399ad6b8_buggy.java
+++ b/tmp/39bd1eee-b48d-43d1-8dc2-119863c0f6a9_fixed.java
@@ -1,74 +1,90 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        // Create a copy of the matrix data to perform the decomposition in-place on the copy.
+        // This avoids modifying the original input matrix.
+        lTData   = matrix.copy().getData();
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Check the matrix properties (symmetry) and prepare for transformation.
+        // This loop also zeroes out the lower triangle elements of lTData.
+        // lTData will ultimately store L^T (the upper triangular Cholesky factor).
         for (int i = 0; i < order; ++i) {
-
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // Check off-diagonal elements for symmetry
             for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double lIJ = lTData[i][j]; // Original A_ij
+                final double lJI = lTData[j][i]; // Original A_ji
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                // Zero out the lower triangle elements. For L^T, these should be zero.
+                lTData[j][i] = 0;
            }
         }
 
-        // transform the matrix
+        // Transform the matrix into its Cholesky decomposition L^T (upper triangular).
+        // This uses the Cholesky-Banachiewicz (row-oriented) algorithm.
         for (int i = 0; i < order; ++i) {
 
-            final double[] ltI = lTData[i];
+            // Compute the sum of squares of previously calculated elements for the diagonal element.
+            // L^T_ii^2 = A_ii - sum( (L^T_ki)^2 for k < i )
+            // lTData[k][i] for k < i already contain the computed L^T_ki values from previous iterations.
+            double sumForDiagonal = 0;
+            for (int k = 0; k < i; ++k) {
+                sumForDiagonal += lTData[k][i] * lTData[k][i];
+            }
+
+            // Calculate the actual diagonal value before taking the square root.
+            // lTData[i][i] still holds the original A_ii at this point.
+            final double diagValue = lTData[i][i] - sumForDiagonal;
 
-            // check diagonal element
+            // Check for positivity of the diagonal element (L^T_ii^2) before taking the square root.
+            // If it's not positive (within threshold), the matrix is not positive definite.
+            if (diagValue < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+            // Compute the diagonal element L^T_ii = sqrt(L^T_ii^2)
+            lTData[i][i] = Math.sqrt(diagValue);
+            final double inverseDiag = 1.0 / lTData[i][i]; // Store 1 / L^T_ii for efficiency
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+            // Compute the off-diagonal elements in the current row i (L^T_ij for j > i).
+            // L^T_ij = (A_ij - sum(L^T_ki * L^T_kj for k < i)) / L^T_ii
+            // lTData[i][j] initially holds the original A_ij.
+            // lTData[k][i] and lTData[k][j] for k < i already contain L^T_ki and L^T_kj.
+            for (int j = i + 1; j < order; ++j) {
+                double sumForOffDiagonal = 0;
+                for (int k = 0; k < i; ++k) {
+                    sumForOffDiagonal += lTData[k][i] * lTData[k][j];
                 }
+                lTData[i][j] = (lTData[i][j] - sumForOffDiagonal) * inverseDiag;
             }
-
         }
-
     }
\ No newline at end of file
