diff --git a/tmp/382da8ef-78af-42a3-9af4-6d1e60c1ddcc_buggy.java b/tmp/d28fe344-b681-4a09-8610-603b1e370c3c_fixed.java
index 0eef537..5aafaa4 100644
--- a/tmp/382da8ef-78af-42a3-9af4-6d1e60c1ddcc_buggy.java
+++ b/tmp/d28fe344-b681-4a09-8610-603b1e370c3c_fixed.java
@@ -1,74 +1,92 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        // Create a copy of the matrix data to perform the decomposition.
+        // This ensures the input matrix is not modified and provides a working
+        // copy for the in-place Cholesky algorithm.
+        lTData = new double[order][order];
+        for (int i = 0; i < order; ++i) {
+            System.arraycopy(matrix.getData()[i], 0, lTData[i], 0, order);
+        }
+
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Check the matrix for symmetry and prepare for L^T storage
+        // (by setting lower triangle to 0 as L^T is upper triangular).
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // The positivity check on lTData[i][i] was incorrectly placed here
+            // in the original code. It needs to be performed inside the
+            // transformation loop, after elements have been reduced.
+
+            // check off-diagonal elements for symmetry
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
+                // Set the lower triangle elements to 0. This is preparation
+                // for storing the upper triangular L^T factor in lTData.
                 lJ[i] = 0;
            }
         }
 
-        // transform the matrix
+        // Perform the Cholesky transformation (computing L^T in-place in lTData)
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
-            // check diagonal element
+            // Crucial fix: Check the positivity of the diagonal element
+            // *after* it has been potentially reduced by previous steps
+            // of the decomposition. If it's not positive (or above threshold),
+            // the matrix is not positive definite.
+            if (ltI[i] < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
 
+            // Update off-diagonal elements in the current row 'i' (which become (L^T)_iq)
+            // and update elements in the trailing submatrix (Schur complement).
             for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
+                ltI[q] *= inverse; // Calculate (L^T)_iq
+
                 final double[] ltQ = lTData[q];
                 for (int p = q; p < order; ++p) {
+                    // Update trailing submatrix elements: A_qp' = A_qp - (L^T)_iq * (L^T)_ip
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
