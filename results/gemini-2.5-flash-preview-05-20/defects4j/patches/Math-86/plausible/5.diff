diff --git a/tmp/762ec14f-c760-4241-9828-511f9c0cbc7e_buggy.java b/tmp/13eb7dd7-2abd-41f1-8758-c261769bdec5_fixed.java
index 0eef537..2e9385e 100644
--- a/tmp/762ec14f-c760-4241-9828-511f9c0cbc7e_buggy.java
+++ b/tmp/13eb7dd7-2abd-41f1-8758-c261769bdec5_fixed.java
@@ -1,74 +1,93 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
+        // The lTData (L Transpose Data) matrix is filled in-place from the input matrix data.
+        // It will eventually store the upper triangular Cholesky factor.
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // check the matrix for symmetry (and effectively zero out lower triangle for L^T)
         for (int i = 0; i < order; ++i) {
+            final double[] lI = lTData[i]; // row i of the current matrix state
 
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // Check off-diagonal elements for symmetry (and implicitly set lower triangle to 0)
             for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double[] lJ = lTData[j]; // row j of the current matrix state
+                final double lIJ = lI[j];      // A[i][j]
+                final double lJI = lJ[i];      // A[j][i]
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
+                // For an in-place Cholesky decomposition where lTData will become L^T (upper triangular),
+                // the elements below the diagonal (lTData[j][i] where j > i) must be zero.
+                // This line effectively ensures that.
                 lJ[i] = 0;
             }
         }
 
-        // transform the matrix
-        for (int i = 0; i < order; ++i) {
+        // Perform the Cholesky decomposition (A = L * L^T), storing L^T in lTData (upper triangular part).
+        // The algorithm computes L^T (U) such that A = U^T * U.
+        // The elements of U are given by:
+        // U_kk = sqrt(A_kk - sum_{p=0}^{k-1} U_pk^2)
+        // U_kj = (A_kj - sum_{p=0}^{k-1} U_pk * U_pj) / U_kk  for j > k
+        for (int i = 0; i < order; ++i) { // 'i' corresponds to 'k' in the formulas above (current pivot row/column)
 
-            final double[] ltI = lTData[i];
+            final double[] ltI = lTData[i]; // This is row 'i' of the working matrix (which will become U)
 
-            // check diagonal element
+            // At this point, lTData[i][i] (ltI[i]) contains A[i][i] minus the sum of squares of elements
+            // from previous rows/columns (sum_{p=0}^{i-1} U_pi^2).
+            // This effectively represents U_ii^2 before taking the square root.
+            // This value must be positive for the matrix to be positive definite.
+            if (ltI[i] < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
+            // Calculate U_ii (diagonal element)
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+            // Calculate U_ij (off-diagonal elements in row i) and update remaining submatrix
+            // The loop iterates from order-1 down to i+1. This is just a valid iteration order.
+            for (int q = order - 1; q > i; --q) { // 'q' corresponds to 'j' in the formulas (column index for U_ij)
+                // Calculate U_iq (lTData[i][q])
+                // lTData[i][q] currently holds A[i][q] minus sum_{p=0}^{i-1} U_pi * U_pq
+                ltI[q] *= inverse; // lTData[i][q] becomes (A[i][q] - sum_{p=0}^{i-1} U_pi * U_pq) / U_ii
+
+                final double[] ltQ = lTData[q]; // This is row 'q' of the working matrix
+                final double factor = ltI[q];   // This is U_iq
+
+                // Update the remaining submatrix elements (lTData[q][p] where p >= q)
+                // lTData[q][p] -= U_iq * U_ip
+                for (int p = q; p < order; ++p) { // 'p' corresponds to 'j' for U_ij update
+                    ltQ[p] -= factor * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
