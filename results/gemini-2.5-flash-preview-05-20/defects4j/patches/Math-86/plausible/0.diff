diff --git a/tmp/2cccb49f-a125-4f66-87a8-8b374d0f2b16_buggy.java b/tmp/e9faae2e-5fda-4c9d-86d3-c3a510a07e43_fixed.java
index 0eef537..1c76c05 100644
--- a/tmp/2cccb49f-a125-4f66-87a8-8b374d0f2b16_buggy.java
+++ b/tmp/e9faae2e-5fda-4c9d-86d3-c3a510a07e43_fixed.java
@@ -1,74 +1,89 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        lTData   = matrix.getData(); // lTData will become L^T
         cachedL  = null;
         cachedLT = null;
 
         // check the matrix before transformation
+        // This loop checks for symmetry and zeroes out the lower triangle of the copied matrix.
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
             // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double lIJ = lI[j]; // A[i][j]
+                final double lJI = lJ[i]; // A[j][i]
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
+                // Zero out the lower triangle entries (A[j][i] for j > i)
+                // This prepares lTData to store L^T (an upper triangular matrix).
                 lJ[i] = 0;
            }
         }
 
-        // transform the matrix
-        for (int i = 0; i < order; ++i) {
+        // transform the matrix into L^T in-place
+        // lTData[r][c] will store (L^T)_rc = L_cr
+        for (int i = 0; i < order; ++i) { // i is the current row of L^T (or column of L)
 
-            final double[] ltI = lTData[i];
+            final double[] ltI = lTData[i]; // ltI represents the i-th row of L^T
 
-            // check diagonal element
+            // Calculate L_ii (diagonal element of L)
+            // L_ii = sqrt(A_ii - sum_{k=0}^{i-1} L_ik^2)
+            double sumDiag = 0.0;
+            for (int k = 0; k < i; ++k) {
+                // lTData[k][i] is (L^T)_ki which is L_ik
+                sumDiag += lTData[k][i] * lTData[k][i];
+            }
+            ltI[i] -= sumDiag; // lTData[i][i] now holds A_ii - sum(L_ik^2)
 
-            ltI[i] = Math.sqrt(ltI[i]);
+            // Check for positive definiteness
+            if (ltI[i] <= absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
+
+            ltI[i] = Math.sqrt(ltI[i]); // Compute L_ii
             final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+            // Calculate L_ji (off-diagonal elements of L, for j > i)
+            // Which means calculating (L^T)_ij for j > i
+            // L_ji = (A_ji - sum_{k=0}^{i-1} L_jk * L_ik) / L_ii
+            for (int j = i + 1; j < order; ++j) { // j is the current column of L^T (j > i)
+                double sumOffDiag = 0.0;
+                for (int k = 0; k < i; ++k) {
+                    // lTData[k][i] is L_ik
+                    // lTData[k][j] is L_jk
+                    sumOffDiag += lTData[k][i] * lTData[k][j];
                 }
+                // lTData[i][j] initially holds A_ij (which is A_ji due to symmetry)
+                lTData[i][j] = (lTData[i][j] - sumOffDiag) * inverse;
             }
-
         }
-
     }
\ No newline at end of file
