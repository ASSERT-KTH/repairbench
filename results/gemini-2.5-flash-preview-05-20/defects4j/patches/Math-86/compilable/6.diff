diff --git a/tmp/96540ef2-02d2-4ba9-b8ba-f70a9d225a59_buggy.java b/tmp/1c93a4b0-4ce3-4335-ad30-6bff6b928a1c_fixed.java
index 0eef537..9a7a072 100644
--- a/tmp/96540ef2-02d2-4ba9-b8ba-f70a9d225a59_buggy.java
+++ b/tmp/1c93a4b0-4ce3-4335-ad30-6bff6b928a1c_fixed.java
@@ -1,74 +1,92 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
         // check the matrix before transformation
+        // This loop also zeroes out the lower triangular part of the matrix.
         for (int i = 0; i < order; ++i) {
 
             final double[] lI = lTData[i];
 
+            // Initial check for diagonal elements.
+            // While this catches some cases, the critical check for positivity
+            // must happen during the decomposition, when diagonal elements are
+            // progressively reduced.
             if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
+                // This early check can be removed if the later one is sufficient,
+                // but keeping it doesn't harm and catches some trivial cases earlier.
+                // However, based on the problem and common Cholesky implementations,
+                // the crucial check is after subtractions.
             }
             // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                lJ[i] = 0; // Zero out lower triangular part (lTData[j][i] where j > i)
            }
         }
 
         // transform the matrix
+        // This loop performs the actual Cholesky decomposition in-place,
+        // transforming the upper triangular part of lTData into the Cholesky factor L^T.
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
-            // check diagonal element
+            // The value ltI[i] here has been updated by subtractions from previous rows/columns
+            // (due to the inner loops involving lTData[q][p] -= ltI[q] * ltI[p];).
+            // This is the critical point where the diagonal element must be positive
+            // for the Cholesky decomposition to be possible.
+            if (ltI[i] < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
-            ltI[i] = Math.sqrt(ltI[i]);
+            ltI[i] = Math.sqrt(ltI[i]); // Calculate L^T_ii
             final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
+            // Calculate L^T_ij for j > i (columns q) and update subsequent diagonal elements.
+            for (int q = i + 1; q < order; ++q) { // Corrected loop: iterate q from i+1 to order-1
+                ltI[q] *= inverse; // Calculate L^T_iq
+
+                final double[] ltQ = lTData[q]; // Current row is q (which is > i)
+                // For elements in row q, subtract contributions from row i.
+                // This updates lTData[q][p] to prepare it for its own decomposition later.
+                for (int p = q; p < order; ++p) { // Iterate p from q to order-1
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
