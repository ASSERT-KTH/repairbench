diff --git a/tmp/10702f7c-40f5-401c-bd9b-aee18f04180a_buggy.java b/tmp/3e6e7bb2-8895-488b-8650-2ff92035ac63_fixed.java
index 0eef537..2ac71b1 100644
--- a/tmp/10702f7c-40f5-401c-bd9b-aee18f04180a_buggy.java
+++ b/tmp/3e6e7bb2-8895-488b-8650-2ff92035ac63_fixed.java
@@ -1,74 +1,100 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
+        // lTData will store the Cholesky factor L^T (an upper triangular matrix) in-place.
+        // Initially, it contains a copy of the input matrix.
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Check the matrix for symmetry and prepare for L^T storage by zeroing out the lower triangle.
         for (int i = 0; i < order; ++i) {
+            final double[] lI = lTData[i]; // Row i of the current matrix (initially A)
 
-            final double[] lI = lTData[i];
+            // The check for positivity of diagonal elements (lTData[i][i]) should be done
+            // during the transformation, after the corresponding sum of squared terms
+            // has been subtracted from A_ii. The original location of this check was incorrect
+            // as it was applied to the initial A_ii, not the modified intermediate value.
+            // if (lTData[i][i] < absolutePositivityThreshold) {
+            //     throw new NotPositiveDefiniteMatrixException();
+            // }
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
+            // Check off-diagonal elements for symmetry and set the lower triangular part to 0.
+            // This ensures that lTData, which will store L^T, has zeros below the diagonal.
             for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double[] lJ = lTData[j]; // Row j of the current matrix (initially A)
+                final double lIJ = lI[j];      // A_ij
+                final double lJI = lJ[i];      // A_ji
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                // Set the element in the strictly lower triangle to 0.
+                // This is consistent with lTData representing L^T, which is upper triangular.
+                lJ[i] = 0; // lTData[j][i] = 0 for j > i
             }
         }
 
-        // transform the matrix
+        // Transform the matrix in-place into its Cholesky decomposition L^T (U),
+        // using a "right-looking" or outer-product form of the algorithm.
+        // At the start of iteration 'i', lTData[i][j] (which is A_ij') holds
+        // the original A_ij minus the sum of products from previous columns (k < i).
+        // Specifically, lTData[i][i] holds A_ii - sum_{k<i} (L_ki^2) which is L_ii^2.
+        // And lTData[i][j] for j > i holds A_ij - sum_{k<i} (L_ki * L_kj).
         for (int i = 0; i < order; ++i) {
 
-            final double[] ltI = lTData[i];
+            final double[] ltI = lTData[i]; // This array represents row i of the matrix being transformed (L^T).
 
-            // check diagonal element
+            // Calculate the diagonal element L_ii (which is (L^T)_ii).
+            // At this point, ltI[i] (which is lTData[i][i]) contains L_ii^2.
+            // We must check if this value is positive before taking the square root.
+            if (ltI[i] < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
+            ltI[i] = Math.sqrt(ltI[i]); // Compute L_ii
+            final double inverse = 1.0 / ltI[i]; // Compute 1 / L_ii
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+            // Calculate off-diagonal elements L_ij (where j > i, for (L^T)_ji) in the current row i.
+            // Also, update elements in subsequent rows/columns by subtracting outer products.
+            // This loop processes columns 'q' from 'i + 1' to 'order - 1'.
+            for (int q = i + 1; q < order; ++q) {
+                // ltI[q] (which is lTData[i][q]) contains A_iq (after previous subtractions).
+                // Divide by L_ii to get L_iq.
+                ltI[q] *= inverse; // Compute L_iq (which is (L^T)_iq, since lTData stores L^T)
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
+                final double[] ltQ = lTData[q]; // This array represents row q of the matrix (for future updates).
+                // Subtract the outer product term L_iq * L_ip from future elements L_qp.
+                // This updates lTData[q][p] (representing A_qp) by subtracting L_iq * L_ip.
+                // L_iq and L_ip are the values just computed or already computed in the current row 'i'.
+                // This loop goes from p=q to order-1, updating L_qp for all p >= q.
                 for (int p = q; p < order; ++p) {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
