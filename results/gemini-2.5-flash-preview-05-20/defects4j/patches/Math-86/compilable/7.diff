diff --git a/tmp/1ecca048-a46c-4d74-96fc-7c1758f686a4_buggy.java b/tmp/a0157efd-97e2-4e81-babf-f322f5410e65_fixed.java
index 0eef537..cc62691 100644
--- a/tmp/1ecca048-a46c-4d74-96fc-7c1758f686a4_buggy.java
+++ b/tmp/a0157efd-97e2-4e81-babf-f322f5410e65_fixed.java
@@ -1,74 +1,100 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        
+        // Deep copy the matrix data to avoid modifying the original matrix
+        final double[][] matrixData = matrix.getData();
+        lTData = new double[order][order];
+        for (int i = 0; i < order; ++i) {
+            System.arraycopy(matrixData[i], 0, lTData[i], 0, order);
+        }
+
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
+        // Check for symmetry using the copied data
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                // REMOVED: lJ[i] = 0; This line was prematurely zeroing out original data
+                // which is needed for the decomposition calculations.
            }
         }
 
-        // transform the matrix
+        // Transform the matrix using Cholesky decomposition (storing L^T in lTData)
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
-            // check diagonal element
+            // Calculate sum of squares for the diagonal element (L^T_ii = L_ii)
+            // L_ii^2 = A_ii - sum_{k=0}^{i-1} L_ik^2
+            // Here L_ik is stored as lTData[k][i] (since lTData stores L^T)
+            double sumForDiagonal = 0.0;
+            for (int k = 0; k < i; ++k) {
+                sumForDiagonal += lTData[k][i] * lTData[k][i];
+            }
+            final double currentDiagValue = lTData[i][i] - sumForDiagonal;
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
+            // Check for positivity after subtracting previous terms
+            if (currentDiagValue < absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
+            ltI[i] = Math.sqrt(currentDiagValue);
+            final double inverseDiagonalElement = 1.0 / ltI[i];
+
+            // Calculate off-diagonal elements L^T_ij for j > i (which are L_ji)
+            // L_ji = (A_ji - sum_{k=0}^{i-1} L_jk * L_ik) / L_ii
+            // Here, A_ji is lTData[i][j], L_jk is lTData[k][j], L_ik is lTData[k][i]
+            for (int j = i + 1; j < order; ++j) {
+                double sumForOffDiagonal = 0.0;
+                for (int k = 0; k < i; ++k) {
+                    sumForOffDiagonal += lTData[k][i] * lTData[k][j];
+                }
+                ltI[j] = (ltI[j] - sumForOffDiagonal) * inverseDiagonalElement;
+            }
+
+            // Update the remaining submatrix elements (outer product subtraction)
+            // A_qp -= L^T_iq * L^T_ip
             for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
+                // REMOVED: ltI[q] *= inverse; This was redundant as ltI[q] (lTData[i][q])
+                // is already calculated as L^T_iq in the previous loop.
                 final double[] ltQ = lTData[q];
                 for (int p = q; p < order; ++p) {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
