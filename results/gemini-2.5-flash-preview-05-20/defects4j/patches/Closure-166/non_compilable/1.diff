diff --git a/tmp/f1e1e3b4-8ae1-46ec-9fbc-c3c3ff5a6232_buggy.java b/tmp/897b600c-e863-4e8f-9b58-54c25cda4621_fixed.java
index 5f96616..098323f 100644
--- a/tmp/f1e1e3b4-8ae1-46ec-9fbc-c3c3ff5a6232_buggy.java
+++ b/tmp/897b600c-e863-4e8f-9b58-54c25cda4621_fixed.java
@@ -1,20 +1,39 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
+    // Handle the case where the constraint object is a record type, or a union
+    // type containing record types.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
+
+    // If the constraint is a union type, iterate through its alternatives
+    // and apply record type constraints from each. This is crucial for cases
+    // like `{{a}|{b}}` where we expect both 'a' and 'b' to be inferred.
+    if (constraint.isUnionType()) {
+      for (JSType alt : constraint.toUnionType().getAlternateTypes()) {
+        if (alt.isRecordType()) {
+          // If alt is a record type, apply its properties to 'this' object.
+          matchRecordTypeConstraint(alt.toObjectType());
+        }
+      }
+    }
+
+    // If the constraint itself is a record type (not necessarily a union),
+    // apply its properties. This covers cases where the constraint is just
+    // a single record type like `{{prop: string}}`.
+    // It's important to keep this separate if-block because a JSType cannot
+    // be both a UnionType and a RecordType simultaneously.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
