diff --git a/tmp/86c6ca74-2b38-476a-abd5-2246e43382ac_buggy.java b/tmp/ece18caf-4109-49be-9de8-900932e830b7_fixed.java
index 5f96616..f9a65c2 100644
--- a/tmp/86c6ca74-2b38-476a-abd5-2246e43382ac_buggy.java
+++ b/tmp/ece18caf-4109-49be-9de8-900932e830b7_fixed.java
@@ -1,20 +1,30 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    if (constraint.isUnionType()) {
+      // If the constraint is a union, apply record constraints from all alternatives.
+      // This is crucial for inferring properties from unions of record types.
+      for (JSType alt : constraint.toUnionType().getAlternates()) {
+        if (alt.isRecordType()) {
+          // RecordType extends ObjectType, so toObjectType() is safe here.
+          matchRecordTypeConstraint(alt.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
+      // Original logic: handle direct record type constraint.
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
