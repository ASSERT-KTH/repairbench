diff --git a/tmp/437d2f7c-ec5f-494e-ad8a-43b8a36fcaed_buggy.java b/tmp/04038bc8-8e16-43ee-8f2f-5d5b1733f8f9_fixed.java
index 5f96616..17a77de 100644
--- a/tmp/437d2f7c-ec5f-494e-ad8a-43b8a36fcaed_buggy.java
+++ b/tmp/04038bc8-8e16-43ee-8f2f-5d5b1733f8f9_fixed.java
@@ -1,20 +1,46 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
+    // Handle union types by matching each alternative.
+    // If an anonymous object literal is constrained by a union,
+    // it must satisfy the properties imposed by *all* alternatives that are
+    // record-like. For example, if 'out = {}' is constrained by
+    // '{a:number}|{b:string}', 'out' should infer to '{a:(number|undefined), b:(string|undefined)}'.
+    // This is because an object literal must be assignable to any of the union alternatives.
+    // To be assignable to '{a:number}', it needs 'a'. To be assignable to '{b:string}', it needs 'b'.
+    // Therefore, it needs both 'a' and 'b' (as optional properties if they are undefined in the constraint).
+    if (constraint.isUnionType()) {
+      for (JSType alternative : constraint.toUnionType().getAlternatives()) {
+        // Recursively call matchConstraint for each alternative in the union.
+        // This ensures that all structural properties from all record-like alternatives
+        // are applied to 'this' object type.
+        matchConstraint(alternative);
+      }
+      return; // All alternatives have been processed, so we are done with the union.
+    }
+
     // Handle the case where the constraint object is a record type.
+    // This is the specific structural constraint that adds properties.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
+
+    // If the constraint is neither a UnionType nor a RecordType (e.g., a primitive type,
+    // or an unknown type), for an anonymous object literal, it typically means
+    // no structural properties are added. The existing behavior for such cases
+    // (likely doing nothing or delegating to a superclass that doesn't modify
+    // structural properties for non-record types) is implicitly assumed to be correct
+    // based on the test cases.
   }
\ No newline at end of file
