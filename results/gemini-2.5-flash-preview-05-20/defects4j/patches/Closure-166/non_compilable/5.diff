diff --git a/tmp/9c3e96c4-d2a1-42ce-8aa8-ad109476a42d_buggy.java b/tmp/ca6fac02-fac0-4af7-a9eb-a513e0313bf0_fixed.java
index 5f96616..97a39f2 100644
--- a/tmp/9c3e96c4-d2a1-42ce-8aa8-ad109476a42d_buggy.java
+++ b/tmp/ca6fac02-fac0-4af7-a9eb-a513e0313bf0_fixed.java
@@ -1,20 +1,25 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Handle the case where the the constraint contains record types,
+    // either directly or as part of a union. We want to modify the
+    // object literal to match the constraint by taking each property
+    // on the record and trying to match properties on this object.
+    if (constraint.isUnionType()) {
+      for (JSType alternate : constraint.getAlternateUnionTypes()) {
+        if (alternate.isRecordType()) {
+          // If a union alternative is a record type, merge its properties
+          // into the current object type. This accounts for cases like
+          // {a: ...} | {b: ...} resulting in {a: ..., b: ...}.
+          matchRecordTypeConstraint(alternate.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
+      // If the constraint itself is a record type, apply its properties.
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
