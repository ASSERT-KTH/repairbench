diff --git a/tmp/3d5de374-b4f1-449e-bf3d-776ab890362d_buggy.java b/tmp/faea05dc-a58b-4b35-8edb-870128bc5779_fixed.java
index 5f96616..4443fe0 100644
--- a/tmp/3d5de374-b4f1-449e-bf3d-776ab890362d_buggy.java
+++ b/tmp/faea05dc-a58b-4b35-8edb-870128bc5779_fixed.java
@@ -1,20 +1,31 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    // Collect all specific record types or object types that act as records
+    // from the constraint.
+    List<ObjectType> recordTypesToApply = new ArrayList<>();
+
+    // If the constraint is a union type, we need to check each alternative.
+    if (constraint.isUnionType()) {
+      for (JSType alt : constraint.getAlternateUnionTypes()) {
+        // If an alternative is a record type, add it to our list.
+        if (alt.isRecordType()) {
+          recordTypesToApply.add(alt.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
+      // If the constraint itself is a single record type, add it directly.
+      recordTypesToApply.add(constraint.toObjectType());
+    }
+
+    // Apply the collected record constraints.
+    // This will typically iterate over the properties of each recordType
+    // and attempt to match/add them to 'this' anonymous object type.
+    for (ObjectType recordType : recordTypesToApply) {
+      matchRecordTypeConstraint(recordType);
     }
   }
\ No newline at end of file
