diff --git a/tmp/1213f9df-dff7-4e68-bfbd-b6ecd9ed66bb_buggy.java b/tmp/dbf101c8-3e91-4ad4-9dfd-4a15ecdd93fc_fixed.java
index 5f96616..97d1514 100644
--- a/tmp/1213f9df-dff7-4e68-bfbd-b6ecd9ed66bb_buggy.java
+++ b/tmp/dbf101c8-3e91-4ad4-9dfd-4a15ecdd93fc_fixed.java
@@ -1,20 +1,32 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+      // If the constraint is a union type, we need to apply the constraint
+      // for each alternative within the union that is relevant.
+      // Recursively calling matchConstraint on each alternate ensures that
+      // record types nested within unions are handled, and other types are
+      // correctly ignored by the existing logic.
+      for (JSType alternate : constraint.toUnionType().getAlternates()) {
+        matchConstraint(alternate);
       }
     }
+    // For other types (e.g., string, number, function, or non-record object types),
+    // no action is taken, which is generally appropriate for object literal inference
+    // as an object literal cannot become a primitive or function type by constraint.
+  }
\ No newline at end of file
