diff --git a/tmp/a3fc4b44-eea8-4171-a996-e32bb71b21a5_buggy.java b/tmp/68439c34-0899-4356-bb24-5bb61f8ce9b7_fixed.java
index 5f96616..4020b23 100644
--- a/tmp/a3fc4b44-eea8-4171-a996-e32bb71b21a5_buggy.java
+++ b/tmp/68439c34-0899-4356-bb24-5bb61f8ce9b7_fixed.java
@@ -1,20 +1,30 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
+    // Handle union types first, as they may contain record types or other constraints.
+    // If the constraint is a union, we apply each alternative of the union as a
+    // separate constraint. This is crucial for cases like
+    // `/** @param {{a: T}|{b: U}} x */` applied to an empty object `{}`.
+    // The object should gain both 'a' and 'b' properties.
+    if (constraint.isUnionType()) {
+      for (JSType alt : constraint.getAlternatives()) {
+        // Recursively apply the constraint from each alternative.
+        matchConstraint(alt);
+      }
+      // After processing all alternatives, the union constraint is fully handled,
+      // so we can return.
+      return;
+    }
+
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
