diff --git a/tmp/5331b836-1479-4331-9d1a-59eb54f8ee0f_buggy.java b/tmp/628d3308-7048-4564-9516-e65cf2200581_fixed.java
index 5f96616..b3e01a5 100644
--- a/tmp/5331b836-1479-4331-9d1a-59eb54f8ee0f_buggy.java
+++ b/tmp/628d3308-7048-4564-9516-e65cf2200581_fixed.java
@@ -1,20 +1,29 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    if (constraint.isUnionType()) {
+      // If the constraint is a union type, we need to iterate through its
+      // alternatives and apply any record type constraints found within.
+      for (JSType member : constraint.toUnionType().getAlternates()) {
+        if (member.isRecordType()) {
+          matchRecordTypeConstraint(member.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
+      // Original logic: if the constraint itself is a record type.
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
