diff --git a/tmp/5efae9e6-bd15-4e01-b6a2-3ec4953109be_buggy.java b/tmp/800143fa-bfdb-4f41-95d6-272a57af09ce_fixed.java
index 5f96616..7f2ab80 100644
--- a/tmp/5efae9e6-bd15-4e01-b6a2-3ec4953109be_buggy.java
+++ b/tmp/800143fa-bfdb-4f41-95d6-272a57af09ce_fixed.java
@@ -1,20 +1,32 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
+    // Handle the case where the constraint is a union type.
+    // When an object literal is matched against a union of object types
+    // (e.g., `{a:X}|{b:Y}`), the resulting type of the object literal should
+    // contain the union of properties from all contributing object types.
+    if (constraint.isUnionType()) {
+      for (JSType alternate : constraint.toUnionType().getAlternates()) {
+        // Recursively apply the constraint for each object type in the union.
+        // Only consider object types (including record types) as sources for properties.
+        if (alternate.isObjectType() && !alternate.isUnknownType() && !alternate.isAllType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+        }
+      }
+      return; // Union type handled, no further processing needed for this constraint.
+    }
+
+    // Handle the case where the constraint object is a single object type (including record types).
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the constraint object and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    // Avoid matching against JSType.UNKNOWN or JSType.ALL as they don't provide
+    // useful structural information.
+    if (constraint.isObjectType() && !constraint.isUnknownType() && !constraint.isAllType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
