diff --git a/tmp/38498103-dc50-4bba-a790-954254fe4c96_buggy.java b/tmp/7291eacc-ba27-4605-8c3a-c46455dfa55a_fixed.java
index c222270..9a7347c 100644
--- a/tmp/38498103-dc50-4bba-a790-954254fe4c96_buggy.java
+++ b/tmp/7291eacc-ba27-4605-8c3a-c46455dfa55a_fixed.java
@@ -1,7 +1,20 @@
     public Object generateId(Object forPojo) {
         // 04-Jun-2016, tatu: As per [databind#1255], need to consider possibility of
         //    id being generated for "alwaysAsId", but not being written as POJO; regardless,
         //    need to use existing id if there is one:
+
+        // If the 'id' field (which represents the existing ID in this writer's context
+        // for the current object being processed) is already set, reuse it.
+        // This ensures that an object always gets the same ID if it has been seen before
+        // in a context where its ID was established (e.g., as a forward reference).
+        if (id != null) {
+            return id;
+        }
+
+        // If 'id' is null, it means no existing ID has been established within this writer's
+        // context for 'forPojo'. Delegate to the actual ObjectIdGenerator to either retrieve
+        // an existing ID from its global scope or generate a new one.
+        // The result is then stored in the 'id' field for consistency within this writer.
         id = generator.generateId(forPojo);
         return id;
     }
\ No newline at end of file
