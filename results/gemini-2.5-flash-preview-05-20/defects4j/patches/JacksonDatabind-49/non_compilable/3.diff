diff --git a/tmp/5c1946d9-0d0f-4c83-aa74-fc1e3a690596_buggy.java b/tmp/a6febe35-48fb-4bf3-97cf-a003a9d8586e_fixed.java
index c222270..625ee82 100644
--- a/tmp/5c1946d9-0d0f-4c83-aa74-fc1e3a690596_buggy.java
+++ b/tmp/a6febe35-48fb-4bf3-97cf-a003a9d8586e_fixed.java
@@ -1,7 +1,25 @@
     public Object generateId(Object forPojo) {
         // 04-Jun-2016, tatu: As per [databind#1255], need to consider possibility of
         //    id being generated for "alwaysAsId", but not being written as POJO; regardless,
         //    need to use existing id if there is one:
+        
+        // This function assumes the class it belongs to has a transient map
+        // (e.g., `private transient java.util.Map<Object, Object> _currentIds;`)
+        // that is managed and cleared at the start of each serialization session.
+        // This map is used to cache object-to-id mappings for the current session.
+        if (_currentIds == null) {
+            _currentIds = new java.util.IdentityHashMap<Object, Object>();
+        }
+
+        Object id;
+        Object existingId = _currentIds.get(forPojo);
+
+        if (existingId != null) {
+            id = existingId;
+        } else {
+            // No existing ID found, generate a new one and store it
             id = generator.generateId(forPojo);
+            _currentIds.put(forPojo, id);
+        }
         return id;
     }
\ No newline at end of file
