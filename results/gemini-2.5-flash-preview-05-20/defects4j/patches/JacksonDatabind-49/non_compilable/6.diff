diff --git a/tmp/da49f9c0-10e7-441a-b19a-8b994c9a7eb9_buggy.java b/tmp/6414172b-f946-49f3-ba46-da96f50a2c17_fixed.java
index c222270..016217b 100644
--- a/tmp/da49f9c0-10e7-441a-b19a-8b994c9a7eb9_buggy.java
+++ b/tmp/6414172b-f946-49f3-ba46-da96f50a2c17_fixed.java
@@ -1,7 +1,28 @@
     public Object generateId(Object forPojo) {
         // 04-Jun-2016, tatu: As per [databind#1255], need to consider possibility of
         //    id being generated for "alwaysAsId", but not being written as POJO; regardless,
         //    need to use existing id if there is one:
-            id = generator.generateId(forPojo);
-        return id;
+
+        // Assuming 'id' is a field of the containing class and is intended to be a Map
+        // to store generated IDs for 'forPojo' objects.
+        // This is necessary because the `ObjectIdGenerator` itself must cache IDs for consistent behavior.
+        // The field 'id' is used here to hold the map of generated IDs.
+        java.util.Map<Object, Object> idMap = (java.util.Map<Object, Object>) id;
+
+        if (idMap == null) {
+            // Initialize the map if it's the first call or not properly initialized.
+            // This assumes 'id' field is where the map should be stored for persistence across calls.
+            idMap = new java.util.HashMap<>();
+            this.id = idMap; // Update the class's 'id' field with the new map
+        }
+
+        Object existingId = idMap.get(forPojo);
+        if (existingId != null) {
+            return existingId; // Return already generated ID for this object
+        }
+
+        // No existing ID for this object, generate a new one using the delegate generator
+        Object newId = generator.generateId(forPojo);
+        idMap.put(forPojo, newId); // Store it for future lookups
+        return newId;
     }
\ No newline at end of file
