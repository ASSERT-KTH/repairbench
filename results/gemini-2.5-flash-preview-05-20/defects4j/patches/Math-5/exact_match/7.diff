diff --git a/tmp/7f904137-332c-4bb3-a2b6-ded40f90f2ef_buggy.java b/tmp/0d904f97-8650-4913-ba91-a858b6d6a63f_fixed.java
index e23e29c..14a8eaf 100644
--- a/tmp/7f904137-332c-4bb3-a2b6-ded40f90f2ef_buggy.java
+++ b/tmp/0d904f97-8650-4913-ba91-a858b6d6a63f_fixed.java
@@ -1,24 +1,27 @@
     /** {@inheritDoc} */
     public Complex reciprocal() {
         if (isNaN) {
             return NaN;
         }
 
+        // The test 'testReciprocalZero' expects Complex.ZERO.reciprocal() to return Complex.INF.
+        // Current implementation returns NaN when real and imaginary parts are zero.
         if (real == 0.0 && imaginary == 0.0) {
-            return NaN;
+            // Reciprocal of (0, 0) should be (Infinity, Infinity).
+            return INF; // Assuming INF is a static constant in the Complex class, like ZERO and NaN.
         }
 
         if (isInfinite) {
             return ZERO;
         }
 
         if (FastMath.abs(real) < FastMath.abs(imaginary)) {
             double q = real / imaginary;
             double scale = 1. / (real * q + imaginary);
             return createComplex(scale * q, -scale);
         } else {
             double q = imaginary / real;
             double scale = 1. / (imaginary * q + real);
             return createComplex(scale, -scale * q);
         }
     }
\ No newline at end of file
