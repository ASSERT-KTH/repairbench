diff --git a/tmp/d3c594d4-a55b-465a-98c2-e1b421dc1ed6_buggy.java b/tmp/449ddbda-0844-4802-8dad-ec69c5c2c02c_fixed.java
index e23e29c..5ba62d4 100644
--- a/tmp/d3c594d4-a55b-465a-98c2-e1b421dc1ed6_buggy.java
+++ b/tmp/449ddbda-0844-4802-8dad-ec69c5c2c02c_fixed.java
@@ -1,24 +1,29 @@
     /** {@inheritDoc} */
     public Complex reciprocal() {
         if (isNaN) {
             return NaN;
         }
 
+        // The reciprocal of zero is complex infinity.
+        // The original code returned NaN for the reciprocal of zero, which is not standard.
+        // In common complex analysis, 1/0 is considered infinity.
         if (real == 0.0 && imaginary == 0.0) {
-            return NaN;
+            return INF;
         }
 
         if (isInfinite) {
             return ZERO;
         }
 
+        // Handle the cases where one of the components is very small relative to the other
+        // to prevent overflow/underflow issues when computing the denominator.
         if (FastMath.abs(real) < FastMath.abs(imaginary)) {
             double q = real / imaginary;
             double scale = 1. / (real * q + imaginary);
             return createComplex(scale * q, -scale);
         } else {
             double q = imaginary / real;
             double scale = 1. / (imaginary * q + real);
             return createComplex(scale, -scale * q);
         }
     }
\ No newline at end of file
