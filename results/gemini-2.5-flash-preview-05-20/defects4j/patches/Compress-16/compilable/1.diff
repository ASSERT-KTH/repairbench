diff --git a/tmp/5736dd0b-bbbf-4068-80cb-26bd04a1b4d8_buggy.java b/tmp/1d4e9d0b-c2f4-4a31-b5a9-1033b3eaf54e_fixed.java
index 2ce28b5..47a46dd 100644
--- a/tmp/5736dd0b-bbbf-4068-80cb-26bd04a1b4d8_buggy.java
+++ b/tmp/1d4e9d0b-c2f4-4a31-b5a9-1033b3eaf54e_fixed.java
@@ -1,72 +1,78 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      * 
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
             int signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
             signatureLength = in.read(dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
             signatureLength = in.read(tarheader);
             in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
+
+            // COMPRESS-117 & COMPRESS-191: Improve TAR auto-recognition and verify header checksum.
+            // The previous check based solely on TarArchiveInputStream.matches() was not robust enough
+            // and could lead to false positives (e.g., for AIFF files) if the signatureLength was less than 512,
+            // bypassing the more thorough getNextEntry() check.
+            // Now, we always rely on parsing a full header block to confirm a TAR archive.
+            if (signatureLength >= 512) { // A full 512-byte header block is required to reliably check a TAR archive.
                 try {
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+                    // getNextEntry() attempts to parse the first entry header,
+                    // including checksum verification. If it returns a non-null entry,
+                    // it's very likely a valid TAR archive. If it returns null or throws
+                    // an exception, it's not a valid TAR header.
+                    if (tais.getNextEntry() != null) {
                         return new TarArchiveInputStream(in);
+                    }
                 } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
+                    // Can generate IllegalArgumentException (e.g., bad checksum)
+                    // as well as IOException.
+                    // For autodetection purposes, this simply means it's not a TAR.
+                    // Ignored, fall through to other types or "No Archiver found".
                 }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
