diff --git a/tmp/b826931f-c8e5-4e60-997a-8d3058a347ba_buggy.java b/tmp/d7231c64-fbfb-4eaa-856e-a53d6df5f209_fixed.java
index e69de29..14fddb0 100644
--- a/tmp/b826931f-c8e5-4e60-997a-8d3058a347ba_buggy.java
+++ b/tmp/d7231c64-fbfb-4eaa-856e-a53d6df5f209_fixed.java
@@ -0,0 +1,44 @@
+// This function is intended to be part of `com.fasterxml.jackson.databind.deser.std.StdDeserializer`.
+// The bug addresses an issue where an empty string (`""`) would be implicitly
+// coerced to the default value (e.g., `0` for `int`) for primitive types
+// by default, instead of throwing an exception, when `DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`
+// was not enabled.
+protected final Object _coerceEmptyString(com.fasterxml.jackson.core.JsonParser p,
+        com.fasterxml.jackson.databind.DeserializationContext ctxt,
+        Class<?> rawTargetType,
+        com.fasterxml.jackson.databind.MapperFeature.CoercionAction action) throws java.io.IOException
+{
+    // First, handle explicit coercion actions if set
+    if (action == com.fasterxml.jackson.databind.MapperFeature.CoercionAction.AsNull) {
+        return getNullValue(ctxt);
+    }
+    if (action == com.fasterxml.jackson.databind.MapperFeature.CoercionAction.Fail) {
+        _reportInputMismatch(p, "Cannot deserialize value of type %s from empty String (explicit `CoercionAction.Fail` configured)",
+                _coercedTypeDesc());
+        return null; // Unreachable, as _reportInputMismatch throws
+    }
+    // Note: CoercionAction.AsEmpty is not directly relevant to this specific bug scenario,
+    // which concerns default handling of empty string to primitive.
+
+    // Second, check DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
+    if (ctxt.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+        // If this feature is enabled, empty string should be treated as null.
+        // For primitives, null will be coerced to their default (e.g., 0 for int).
+        return getNullValue(ctxt);
+    }
+
+    // Third, default fallback logic for cases where no explicit action or feature is set.
+    // For primitive types (int, long, double, float, boolean, etc.), the default behavior
+    // should be to throw an exception if an empty string is encountered.
+    if (rawTargetType.isPrimitive()) {
+        // FIX: Previously, this path might have incorrectly returned `getNullValue(ctxt)`,
+        // leading to silent coercion of empty string to 0 for primitives.
+        // The correct default behavior is to throw an exception.
+        _reportInputMismatch(p, "Cannot deserialize value of type %s from empty String (enable `DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` to allow)",
+                _coercedTypeDesc());
+        return null; // Unreachable, as _reportInputMismatch throws
+    }
+
+    // For non-primitive types (Objects), default to null if not explicitly handled above.
+    return getNullValue(ctxt);
+}
\ No newline at end of file
