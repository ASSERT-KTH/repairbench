diff --git a/tmp/f71d7786-1b09-470d-8e96-4ed59d3542df_buggy.java b/tmp/83e10876-6034-4d9a-9f5f-b16adf806f58_fixed.java
index e69de29..8d3cbe5 100644
--- a/tmp/f71d7786-1b09-470d-8e96-4ed59d3542df_buggy.java
+++ b/tmp/83e10876-6034-4d9a-9f5f-b16adf806f58_fixed.java
@@ -0,0 +1,22 @@
+    public ObjectMapper _mapper() {
+        ObjectMapper mapper = new ObjectMapper();
+        // The original bug likely involved misconfiguration of DeserializationFeatures,
+        // allowing empty strings to be coerced to default primitive values (like 0)
+        // instead of throwing an exception.
+        // Specifically, if DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES was disabled
+        // (its default is enabled), and/or DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
+        // was enabled (its default is disabled), this behavior could occur.
+
+        // To fix this, we ensure that:
+        // 1. Deserializing 'null' (or an empty string coerced to null) to a primitive type fails.
+        //    This is achieved by ensuring FAIL_ON_NULL_FOR_PRIMITIVES is enabled (its default).
+        mapper.enable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES);
+
+        // 2. Empty strings are not generally accepted as 'null' objects, especially for primitives.
+        //    This ensures strict parsing, where "" should not be valid input for a number.
+        //    ACCEPT_EMPTY_STRING_AS_NULL_OBJECT is false by default, but explicitly disabling
+        //    it here if it was enabled in the buggy code provides a robust fix.
+        mapper.disable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
+
+        return mapper;
+    }
\ No newline at end of file
