diff --git a/tmp/cff49fa1-0af2-4834-aeff-338d4ccf2467_buggy.java b/tmp/32f37b3c-2e0b-44a4-9bd6-27d7054aefdd_fixed.java
index e69de29..afc53c6 100644
--- a/tmp/cff49fa1-0af2-4834-aeff-338d4ccf2467_buggy.java
+++ b/tmp/32f37b3c-2e0b-44a4-9bd6-27d7054aefdd_fixed.java
@@ -0,0 +1,54 @@
+    private void _testEmptyToNullCoercion(Class<?> type, Object expectedValue) throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        // This feature enables treating empty String ("") as null.
+        // When deserializing to a primitive type, if this results in `null`,
+        // it should ideally throw an exception unless ACCEPT_NULL_FOR_PRIMITIVES is enabled.
+        mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
+
+        // The bug likely originated from an incorrect or accidental enabling of
+        // DeserializationFeature.ACCEPT_NULL_FOR_PRIMITIVES within this method or globally.
+        // If ACCEPT_NULL_FOR_PRIMITIVES is enabled, `null` (which `""` becomes) would be
+        // coerced to the primitive's default value (e.g., 0 for int, 0.0 for double)
+        // without throwing an exception.
+        // The test "testEmptyToNullCoercionForPrimitives" and its error "Should not have passed"
+        // indicate that such a successful coercion for primitives is considered a failure.
+        // Therefore, DeserializationFeature.ACCEPT_NULL_FOR_PRIMITIVES must NOT be enabled
+        // for these test cases to correctly throw an exception.
+
+        boolean isPrimitive = type.isPrimitive();
+
+        try {
+            // Attempt to read an empty string. `q("")` is a common helper in Jackson tests
+            // to represent a quoted empty string, i.e., `""`.
+            Object actual = mapper.readValue(q(""), type);
+
+            if (isPrimitive) {
+                // If we reach this point for a primitive type, it means deserialization
+                // succeeded without throwing an exception. This is contrary to the
+                // expected behavior for coercing null (from empty string) to a primitive
+                // when ACCEPT_NULL_FOR_PRIMITIVES is disabled.
+                // Thus, this execution path indicates a test failure.
+                fail("Should not have passed (expected exception for primitive type " + type.getName() + " when coercing empty string)");
+            } else {
+                // For non-primitive (wrapper) types, if ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
+                // is enabled, an empty string should successfully coerce to `null`.
+                // The `expectedValue` for such cases (e.g., Integer.class) would typically be `null`.
+                assertEquals(expectedValue, actual);
+            }
+        } catch (MismatchedInputException e) {
+            // This is the expected outcome for primitive types when `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`
+            // is enabled (converting `""` to `null`), and `null` cannot be assigned to a primitive.
+            if (isPrimitive) {
+                // Test passed (exception was correctly thrown for primitive type)
+                return;
+            } else {
+                // For non-primitive types, an MismatchedInputException indicates a failure,
+                // as they should have successfully coerced to null.
+                fail("Should have coerced to null for wrapper type " + type.getName() + " but threw MismatchedInputException: " + e.getMessage());
+            }
+        } catch (Exception e) {
+            // Catch any other unexpected exceptions.
+            fail("Caught unexpected exception of type " + e.getClass().getName() + ": " + e.getMessage());
+        }
+    }
\ No newline at end of file
