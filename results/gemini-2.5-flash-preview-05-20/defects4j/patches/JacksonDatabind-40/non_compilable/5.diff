diff --git a/tmp/9f1fb7a5-2a51-41b3-bec8-9981c03a9434_buggy.java b/tmp/ec994346-cecd-46a3-8fdb-07e76b8ee039_fixed.java
index e69de29..018c5bc 100644
--- a/tmp/9f1fb7a5-2a51-41b3-bec8-9981c03a9434_buggy.java
+++ b/tmp/ec994346-cecd-46a3-8fdb-07e76b8ee039_fixed.java
@@ -0,0 +1,27 @@
+    protected Object _deserializeFromEmptyString() throws IOException {
+        // 24-May-2016, tatu: UGH. As per [databind#1228], must consider
+        //   ACCEPT_EMPTY_STRING_AS_NULL_OBJECT. If that's enabled, we'll
+        //   just use 'null' as value, which then may or may not be coerced
+        //   into a default for scalar types.
+
+        // 27-Nov-2020, tatu: For [databind#2756] must actually check explicitly for primitives here,
+        //    as `getNullValue()` won't necessarily know about `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`.
+        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+            if (handledType().isPrimitive()) {
+                // 27-Nov-2020, tatu: for primitives, this is a special case:
+                // must also enable `ACCEPT_NULL_FOR_PRIMITIVES`
+                if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_NULL_FOR_PRIMITIVES)) {
+                    throw ctxt.mappingException(handledType());
+                }
+            }
+            return getNullValue(ctxt);
+        }
+        // 03-Dec-2010, tatu: Should we try to coerce to a numeric zero?
+        //   Not for now; that's what we have ACCEPT_EMPTY_STRING_AS_NULL_OBJECT for
+        //   (which then maps to 0 for primitives)
+        //  ... actually, if this were to occur for primitives, exception should be thrown
+        if (handledType().isPrimitive()) {
+            throw ctxt.mappingException(handledType(), JsonToken.VALUE_STRING);
+        }
+        return null;
+    }
\ No newline at end of file
