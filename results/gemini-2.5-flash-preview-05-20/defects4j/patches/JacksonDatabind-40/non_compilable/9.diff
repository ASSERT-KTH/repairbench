diff --git a/tmp/66981cee-a096-4b36-94db-d7ba969ab866_buggy.java b/tmp/e2767bcc-89b9-416c-9ebd-412c4bf51518_fixed.java
index e69de29..52b3df8 100644
--- a/tmp/66981cee-a096-4b36-94db-d7ba969ab866_buggy.java
+++ b/tmp/e2767bcc-89b9-416c-9ebd-412c4bf51518_fixed.java
@@ -0,0 +1,47 @@
+    protected final Integer _parseInteger(JsonParser p, DeserializationContext ctxt) throws IOException
+    {
+        JsonToken t = p.getCurrentToken();
+
+        // Direct number tokens
+        if (t == JsonToken.VALUE_NUMBER_INT) {
+            return p.getIntValue();
+        }
+        if (t == JsonToken.VALUE_STRING) {
+            String text = p.getText().trim();
+            if (text.isEmpty()) {
+                // [databind#1283]: for primitives, empty String is never coerced to '0', always fails
+                CoercionAction act = ctxt.findCoercionAction(CoercionInputShape.EmptyString, _numberType);
+                if (act == CoercionAction.Fail || _primitive) {
+                    return (Integer) ctxt.handleUnexpectedToken(_numberType, p);
+                }
+                // For non-primitives, if AsNull/AsEmpty, return null
+                if (act == CoercionAction.AsNull || act == CoercionAction.AsEmpty) {
+                    return null; // For Integer wrapper, this is correct
+                }
+                // CoercionAction.TryConvert: fall through to actual parsing
+            }
+            return _parseIntegerFromStr(p, ctxt, text);
+        }
+        if (t == JsonToken.VALUE_NULL) {
+            // [databind#1283]: for primitives, `null` is never coerced to '0', always fails
+            CoercionAction act = ctxt.findCoercionAction(CoercionInputShape.Null, _numberType);
+            if (act == CoercionAction.Fail || _primitive) {
+                return (Integer) ctxt.handleUnexpectedToken(_numberType, p);
+            }
+            // For non-primitives, if AsNull/AsEmpty, return null
+            if (act == CoercionAction.AsNull || act == CoercionAction.AsEmpty) {
+                return null; // For Integer wrapper, this is correct
+            }
+        }
+        // General coercion for other scalar types:
+        if (t == JsonToken.VALUE_TRUE) {
+            _verifyBooleanForScalarCoercion(ctxt, Boolean.class);
+            return 1;
+        }
+        if (t == JsonToken.VALUE_FALSE) {
+            _verifyBooleanForScalarCoercion(ctxt, Boolean.class);
+            return 0;
+        }
+        // Fallback for unhandled token types
+        return (Integer) ctxt.handleUnexpectedToken(_numberType, p);
+    }
\ No newline at end of file
