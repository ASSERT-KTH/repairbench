diff --git a/tmp/acc7966e-fc57-423f-9fbc-3e1a8eae0d9c_buggy.java b/tmp/614b9648-2da4-4193-acb7-ca51d4c0b4d7_fixed.java
index c3944a7..f7daa5b 100644
--- a/tmp/acc7966e-fc57-423f-9fbc-3e1a8eae0d9c_buggy.java
+++ b/tmp/614b9648-2da4-4193-acb7-ca51d4c0b4d7_fixed.java
@@ -1,71 +1,81 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
 
+            // only positive coefficients are eligible for the ratio test
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
                 // check if the entry is strictly equal to the current min ratio
                 // do not use a ulp/epsilon check
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
                     minRatio = ratio;
                     minRatioPositions = new ArrayList<Integer>();
                     minRatioPositions.add(i);
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
             return null;
         } else if (minRatioPositions.size() > 1) {
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
             // 1. check if there's an artificial variable that can be forced out of the basis
                 for (Integer row : minRatioPositions) {
                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                         int column = i + tableau.getArtificialVariableOffset();
                         final double entry = tableau.getEntry(row, column);
                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
                             return row;
                         }
                     }
                 }
 
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
             //
             // see http://www.stanford.edu/class/msande310/blandrule.pdf
             // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
             //
             // Additional heuristic: if we did not get a solution after half of maxIterations
             //                       revert to the simple case of just returning the top-most row
             // This heuristic is based on empirical data gathered while investigating MATH-828.
                 Integer minRow = null;
+                // Initialize minIndex with a value larger than any possible variable index
+                // Variable columns are from 0 to tableau.getWidth() - 2.
                 int minIndex = tableau.getWidth(); 
+                
+                // Iterate through all candidate rows that tied in the minimum ratio test
                 for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
+                    // For each candidate row, find the basic variable associated with it.
+                    // The basic variable is the one whose column index 'j' corresponds to this 'row'.
+                    // Iterate through all possible variable columns (excluding the RHS column).
+                    for (int j = 0; j < tableau.getWidth() - 1; j++) {
+                        if (row.equals(tableau.getBasicRow(j))) { // Check if 'j' is the basic variable for 'row'
+                            if (j < minIndex) { // If this basic variable's index is smaller than the current minimum
+                                minIndex = j;   // Update the minimum index
+                                minRow = row;   // Update the selected row
                             }
+                            // Once the basic variable for the current 'row' is found, no need to search further.
+                            // A basic row has only one basic variable.
+                            break; 
                         }
                     }
                 }
                 return minRow;
         }
         return minRatioPositions.get(0);
     }
