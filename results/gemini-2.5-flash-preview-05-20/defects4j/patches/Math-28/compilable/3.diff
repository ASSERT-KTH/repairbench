diff --git a/tmp/1d454e1e-3452-4205-9edb-9fd8f29ff21c_buggy.java b/tmp/0939b948-de58-4f68-8cef-1705bb2f4fe0_fixed.java
index c3944a7..8870ef8 100644
--- a/tmp/1d454e1e-3452-4205-9edb-9fd8f29ff21c_buggy.java
+++ b/tmp/0939b948-de58-4f68-8cef-1705bb2f4fe0_fixed.java
@@ -1,71 +1,75 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
 
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
                 // check if the entry is strictly equal to the current min ratio
                 // do not use a ulp/epsilon check
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
                     minRatio = ratio;
                     minRatioPositions = new ArrayList<Integer>();
                     minRatioPositions.add(i);
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
             return null;
         } else if (minRatioPositions.size() > 1) {
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
             // 1. check if there's an artificial variable that can be forced out of the basis
                 for (Integer row : minRatioPositions) {
                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                         int column = i + tableau.getArtificialVariableOffset();
                         final double entry = tableau.getEntry(row, column);
                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
                             return row;
                         }
                     }
                 }
 
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
             //
             // see http://www.stanford.edu/class/msande310/blandrule.pdf
             // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
             //
             // Additional heuristic: if we did not get a solution after half of maxIterations
             //                       revert to the simple case of just returning the top-most row
             // This heuristic is based on empirical data gathered while investigating MATH-828.
-                Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
+                Integer minRowCandidate = null;
+                int minBasicVariableIndex = tableau.getWidth(); // Initialize with a value larger than any possible column index
+                for (Integer candidateRow : minRatioPositions) {
+                    // Find the basic variable for this candidateRow
+                    // Iterate through all non-objective columns (representing variables)
+                    for (int colIdx = tableau.getNumObjectiveFunctions(); colIdx < tableau.getWidth() - 1; colIdx++) {
+                        if (candidateRow.equals(tableau.getBasicRow(colIdx))) { // Use .equals() for Integer comparison
+                            // Found the basic variable for this row at colIdx
+                            if (colIdx < minBasicVariableIndex) {
+                                minBasicVariableIndex = colIdx;
+                                minRowCandidate = candidateRow;
                             }
+                            // A row can only be basic in one variable. So, we found it.
+                            break; // Exit inner loop (colIdx loop) and go to the next candidateRow
                         }
                     }
                 }
-                return minRow;
+                return minRowCandidate;
         }
         return minRatioPositions.get(0);
     }
\ No newline at end of file
