diff --git a/tmp/a35fdc91-7760-45ae-9333-00f0e35064ad_buggy.java b/tmp/5c84e224-027d-4958-9bf3-9eaca2aef561_fixed.java
index c3944a7..e422465 100644
--- a/tmp/a35fdc91-7760-45ae-9333-00f0e35064ad_buggy.java
+++ b/tmp/5c84e224-027d-4958-9bf3-9eaca2aef561_fixed.java
@@ -1,71 +1,84 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
 
+            // Only consider positive entries for the ratio test
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
                 // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
+                // do not use a ulp/epsilon check, use Double.compare for strict equality
                 final int cmp = Double.compare(ratio, minRatio);
-                if (cmp == 0) {
+                if (cmp == 0) { // Tie
                     minRatioPositions.add(i);
-                } else if (cmp < 0) {
+                } else if (cmp < 0) { // New minimum ratio found
                     minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
+                    minRatioPositions.clear(); // Clear previous ties
                     minRatioPositions.add(i);
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
             return null;
         } else if (minRatioPositions.size() > 1) {
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
             // 1. check if there's an artificial variable that can be forced out of the basis
             for (Integer row : minRatioPositions) {
                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                     int column = i + tableau.getArtificialVariableOffset();
                     final double entry = tableau.getEntry(row, column);
                     if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
                         return row;
                     }
                 }
             }
 
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
             //
             // see http://www.stanford.edu/class/msande310/blandrule.pdf
             // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
             //
             // Additional heuristic: if we did not get a solution after half of maxIterations
             //                       revert to the simple case of just returning the top-most row
             // This heuristic is based on empirical data gathered while investigating MATH-828.
-                Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
+            Integer minRowCandidate = null;
+            int minBasicVariableIndex = tableau.getWidth(); // Initialize to a value larger than any possible column index
+
+            for (Integer currentRow : minRatioPositions) {
+                // For the current 'currentRow', find the column index of its basic variable.
+                // Iterate through all columns that can potentially be basic variables.
+                // These are typically columns representing original, slack, or artificial variables.
+                // The relevant columns are from getNumObjectiveFunctions() (usually 1) up to getWidth() - 2 (before RHS).
+                int currentBasicVariableCol = -1;
+                for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth() - 1; j++) {
+                    // Check if 'currentRow' is the basic row for column 'j'
+                    if (currentRow.equals(tableau.getBasicRow(j))) {
+                        currentBasicVariableCol = j;
+                        break; // Found the basic variable for this row, no need to check further columns for THIS row.
                     }
                 }
+
+                // If a basic variable was found for the current row
+                if (currentBasicVariableCol != -1) {
+                    if (currentBasicVariableCol < minBasicVariableIndex) {
+                        minBasicVariableIndex = currentBasicVariableCol;
+                        minRowCandidate = currentRow;
                     }
                 }
-                return minRow;
+            }
+            return minRowCandidate;
         }
         return minRatioPositions.get(0);
     }
\ No newline at end of file
