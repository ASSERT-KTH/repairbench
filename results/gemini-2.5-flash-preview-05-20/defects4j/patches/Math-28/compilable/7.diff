diff --git a/tmp/87f95910-420a-4944-b779-1c1126aefd70_buggy.java b/tmp/b1f3cca3-e931-4735-a793-659310da4692_fixed.java
index c3944a7..3a00f92 100644
--- a/tmp/87f95910-420a-4944-b779-1c1126aefd70_buggy.java
+++ b/tmp/b1f3cca3-e931-4735-a793-659310da4692_fixed.java
@@ -1,71 +1,81 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
 
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
                 // check if the entry is strictly equal to the current min ratio
                 // do not use a ulp/epsilon check
                 final int cmp = Double.compare(ratio, minRatio);
                 if (cmp == 0) {
                     minRatioPositions.add(i);
                 } else if (cmp < 0) {
                     minRatio = ratio;
                     minRatioPositions = new ArrayList<Integer>();
                     minRatioPositions.add(i);
                 }
             }
         }
 
         if (minRatioPositions.size() == 0) {
             return null;
         } else if (minRatioPositions.size() > 1) {
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
             // 1. check if there's an artificial variable that can be forced out of the basis
                 for (Integer row : minRatioPositions) {
                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                         int column = i + tableau.getArtificialVariableOffset();
                         final double entry = tableau.getEntry(row, column);
                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
                             return row;
                         }
                     }
                 }
 
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
             //
             // see http://www.stanford.edu/class/msande310/blandrule.pdf
             // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
             //
             // Additional heuristic: if we did not get a solution after half of maxIterations
             //                       revert to the simple case of just returning the top-most row
             // This heuristic is based on empirical data gathered while investigating MATH-828.
                 Integer minRow = null;
-                int minIndex = tableau.getWidth();
+                int minIndex = tableau.getWidth(); // Initialize with a value larger than any possible column index
                 for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
+                    // Iterate through all columns that represent variables (excluding objective and RHS)
+                    // to find which variable is basic in 'row'.
+                    // The variable columns start from tableau.getNumObjectiveFunctions()
+                    // and go up to tableau.getWidth() - 2 (as tableau.getWidth() - 1 is the RHS column).
+                    for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth() - 1; j++) {
+                        // Check if the current 'row' is the basic row for variable 'j'
+                        // Use .equals() for Integer comparison to avoid issues with Integer caching.
+                        if (row.equals(tableau.getBasicRow(j))) {
+                            // If this variable index 'j' is smaller than the current minimum index, update.
+                            if (j < minIndex) {
+                                minIndex = j;
                                 minRow = row;
                             }
+                            // A row can only be basic in one column (one basic variable per row).
+                            // Once the basic variable for this 'row' is found, we can stop searching
+                            // for this 'row' and move to the next 'row' in minRatioPositions.
+                            break;
                         }
                     }
                 }
                 return minRow;
         }
         return minRatioPositions.get(0);
     }
\ No newline at end of file
