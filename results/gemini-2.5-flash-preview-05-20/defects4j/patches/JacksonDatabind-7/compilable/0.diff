diff --git a/tmp/17accfd4-ddb7-442f-acce-133ff114d6ec_buggy.java b/tmp/2b752e20-4358-4eae-bee9-fcee8be50a51_fixed.java
index 4f21a3a..7244b0f 100644
--- a/tmp/17accfd4-ddb7-442f-acce-133ff114d6ec_buggy.java
+++ b/tmp/2b752e20-4358-4eae-bee9-fcee8be50a51_fixed.java
@@ -1,14 +1,43 @@
     /**
      * Helper method used by standard deserializer.
      * 
      * @since 2.3
      */
     public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
+        // Get the current token from the input parser.
+        JsonToken t = jp.getCurrentToken();
+
+        /*
+         * 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
+         * FIELD_NAME. This occurs when a TokenBuffer is used to capture "unrecognized"
+         * properties or as a delegate for a sub-object within an existing object.
+         * In such a case, the START_OBJECT token has already been consumed (or is implicit),
+         * and the TokenBuffer should encapsulate the remaining properties as its own object.
+         */
+        if (t == JsonToken.FIELD_NAME) {
+            // If the parser is at a FIELD_NAME, we need to implicitly wrap the content
+            // within a START_OBJECT and END_OBJECT in the TokenBuffer.
+            writeStartObject();
+            
+            // Loop and copy all subsequent FIELD_NAME/VALUE pairs until the parser
+            // moves out of the current object scope (i.e., hits an END_OBJECT of the parent,
+            // or the end of stream).
+            // copyCurrentStructure(jp) is used here because when at FIELD_NAME, it copies
+            // both the field name and its value (which could be a scalar, array, or object),
+            // and advances the parser past that entire structure.
+            while (t == JsonToken.FIELD_NAME) {
+                copyCurrentStructure(jp); // Copies the field name and its value
+                t = jp.getCurrentToken();  // Advance and get the next token
+            }
+            // After copying all relevant fields, close the implicit object.
+            writeEndObject();
+        } else {
+            // For all other cases (START_OBJECT, START_ARRAY, or scalar values),
+            // simply copy the current structure as-is.
+            // copyCurrentStructure(jp) will correctly handle nested structures
+            // (objects and arrays) by consuming all their tokens until the matching END_OBJECT/END_ARRAY.
             copyCurrentStructure(jp);
-        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
-         */
+        }
         return this;
     }
\ No newline at end of file
