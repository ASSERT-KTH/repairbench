diff --git a/tmp/f9b0d0b4-b4ba-4033-aaee-b2e87d1f7d01_buggy.java b/tmp/103ca0de-209b-4123-b3f2-9e3a6fdf8bf3_fixed.java
index 4f21a3a..e505f30 100644
--- a/tmp/f9b0d0b4-b4ba-4033-aaee-b2e87d1f7d01_buggy.java
+++ b/tmp/103ca0de-209b-4123-b3f2-9e3a6fdf8bf3_fixed.java
@@ -1,14 +1,32 @@
     /**
      * Helper method used by standard deserializer.
      * 
      * @since 2.3
      */
     public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
-            copyCurrentStructure(jp);
         /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
+         *    FIELD_NAME. This occurs when a delegate deserializer (like TokenBuffer's)
+         *    is invoked for a root-level or embedded object, but the parser has already
+         *    advanced past the START_OBJECT token, leaving it positioned at the first
+         *    FIELD_NAME. In such cases, we need to implicitly add the START_OBJECT
+         *    to ensure the TokenBuffer's content is a complete JSON object.
          */
+        JsonToken t = jp.getCurrentToken();
+
+        if (t == JsonToken.FIELD_NAME) {
+            // If the parser is currently at FIELD_NAME, it implies an object is being read
+            // but the START_OBJECT token was consumed before this deserialize method was called.
+            // We need to implicitly write the START_OBJECT token into this TokenBuffer
+            // before copying the rest of the structure.
+            writeStartObject();
+            // Then copy the rest of the structure, which will start from the current FIELD_NAME
+            // and include all fields and values until the matching END_OBJECT.
+            copyCurrentStructure(jp);
+        } else {
+            // For all other cases (e.g., current token is START_OBJECT, START_ARRAY,
+            // or a scalar value), simply copy the current structure directly as is.
+            copyCurrentStructure(jp);
+        }
         return this;
     }
\ No newline at end of file
