diff --git a/tmp/8bc2660d-7947-4c98-a568-9f170ae1f862_buggy.java b/tmp/0c75a91a-8554-4efb-ae9f-6b92820c34db_fixed.java
index 66bb99f..0af3972 100644
--- a/tmp/8bc2660d-7947-4c98-a568-9f170ae1f862_buggy.java
+++ b/tmp/0c75a91a-8554-4efb-ae9f-6b92820c34db_fixed.java
@@ -1,14 +1,25 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
+            // Case 1: Parser is at START_OBJECT. This is the most common entry point.
             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
-                p.nextToken();
+                p.nextToken(); // Advance past START_OBJECT to the first field name or END_OBJECT
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
             // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
             //    if caller has advanced to the first token of Object, but for empty Object
+            // Case 2: Parser is at END_OBJECT. This means we are deserializing an empty object,
+            // and the calling deserializer has already advanced past START_OBJECT.
+            if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                // If deserializeObject is called here, and it expects to parse fields,
+                // it will correctly return an empty ObjectNode as p.nextFieldName() will return null.
+                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            }
+            // Case 3: Parser is at FIELD_NAME. This happens if the caller (e.g., a Map deserializer)
+            // has already consumed START_OBJECT and advanced to the first field name.
             if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            // For any other token, it's an unexpected input for an ObjectNode.
             throw ctxt.mappingException(ObjectNode.class);
          }
\ No newline at end of file
