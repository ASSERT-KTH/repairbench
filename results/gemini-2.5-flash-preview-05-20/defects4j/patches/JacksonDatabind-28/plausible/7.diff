diff --git a/tmp/45ccec16-3d1f-467e-9906-0ea79f54c9b4_buggy.java b/tmp/2e99c0fe-9f32-4356-a1a0-b18eafca2a58_fixed.java
index 66bb99f..32f1a41 100644
--- a/tmp/45ccec16-3d1f-467e-9906-0ea79f54c9b4_buggy.java
+++ b/tmp/2e99c0fe-9f32-4356-a1a0-b18eafca2a58_fixed.java
@@ -1,14 +1,35 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
+            // Case 1: Parser is at START_OBJECT. This is the most common entry point for a new object.
             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
-                p.nextToken();
+                p.nextToken(); // Advance past START_OBJECT token.
+                // After advancing, if the next token is immediately END_OBJECT, it means we have an empty object "{}"
+                if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                    return ctxt.getNodeFactory().objectNode(); // Return an empty ObjectNode
+                }
+                // If it's not an empty object, proceed to deserialize its fields.
+                // The parser should now be at the first FIELD_NAME or an unexpected token if malformed.
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
+
+            // Case 2: Parser is already at END_OBJECT.
+            // As noted in the original comment, a caller might have advanced the parser
+            // past START_OBJECT and then found END_OBJECT for an empty object,
+            // passing control to this deserializer while already at END_OBJECT.
+            if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                return ctxt.getNodeFactory().objectNode(); // Return an empty ObjectNode
+            }
+
+            // Case 3: Parser is already at a FIELD_NAME.
+            // This can happen if this deserializer is called from another deserializer
+            // that has already consumed the START_OBJECT and is now passing the parser
+            // positioned at the first field name of a non-empty object.
             if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            
+            // Fallback: If none of the expected tokens (START_OBJECT, END_OBJECT, FIELD_NAME) are found,
+            // it's an unexpected token for an ObjectNode, so throw an exception.
             throw ctxt.mappingException(ObjectNode.class);
          }
\ No newline at end of file
