diff --git a/tmp/e51a2783-dce0-4777-964e-e3b7b52a56a1_buggy.java b/tmp/3cdf2012-7fad-4bc6-81c4-1b80b1ba08e4_fixed.java
index 66bb99f..7ec9d7b 100644
--- a/tmp/e51a2783-dce0-4777-964e-e3b7b52a56a1_buggy.java
+++ b/tmp/3cdf2012-7fad-4bc6-81c4-1b80b1ba08e4_fixed.java
@@ -1,14 +1,29 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
+            // Case 1: Standard start of an object. Parser is at JsonToken.START_OBJECT.
             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+                // Advance parser past START_OBJECT to either the first field name or END_OBJECT
                 p.nextToken();
+                // Delegate to deserializeObject, which expects to be at a FIELD_NAME or END_OBJECT
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
+            // Case 2: The caller has already advanced the parser past START_OBJECT,
+            // and we are directly at a FIELD_NAME (meaning the object has content).
             if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+                // Delegate to deserializeObject, which will process the fields.
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            // Case 3: The caller has advanced the parser past START_OBJECT,
+            // and we are immediately at END_OBJECT. This indicates an empty object "{}"
+            // where the START_OBJECT has been consumed and the next token is the END_OBJECT.
+            // This is the specific scenario mentioned in the original comment and causing the test failure.
+            if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                // Delegate to deserializeObject. It should correctly handle being at END_OBJECT
+                // by returning an empty ObjectNode without consuming any further tokens.
+                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            }
+            // If none of the above conditions are met, it means we encountered an unexpected
+            // token type, which cannot be deserialized into an ObjectNode.
             throw ctxt.mappingException(ObjectNode.class);
          }
\ No newline at end of file
