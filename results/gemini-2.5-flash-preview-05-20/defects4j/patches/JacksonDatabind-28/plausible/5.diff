diff --git a/tmp/1ab9dbe5-4166-4878-830d-4be1d5f8bdfa_buggy.java b/tmp/5029060c-3241-4358-9042-6dafea2506e4_fixed.java
index 66bb99f..d8a7dce 100644
--- a/tmp/1ab9dbe5-4166-4878-830d-4be1d5f8bdfa_buggy.java
+++ b/tmp/5029060c-3241-4358-9042-6dafea2506e4_fixed.java
@@ -1,14 +1,31 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
+            // Case 1: Standard start, parser positioned at START_OBJECT
             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+                // Advance past START_OBJECT. For an empty object, this will move to END_OBJECT.
+                // For a non-empty object, this will move to FIELD_NAME.
                 p.nextToken();
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
+            // Case 2: Parser positioned at FIELD_NAME. This can happen if a parent deserializer has
+            // already consumed the START_OBJECT token for a nested object, and we're now at the
+            // first field name of that object.
             if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
+            //    if caller has advanced to the first token of Object, but for empty Object.
+            // Case 3: Parser positioned at END_OBJECT.
+            // This specific scenario causes the `JsonMappingException` when deserializing
+            // an empty object "{}" in certain contexts (e.g., when the START_OBJECT token
+            // has already been consumed by a wrapping deserializer, or when `ObjectNodeDeserializer`
+            // is invoked when the parser is already positioned at the END_OBJECT of an empty object).
+            if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                // If we are at END_OBJECT, it means we are trying to deserialize an empty object.
+                // In this case, we should return an empty ObjectNode.
+                return ctxt.getNodeFactory().objectNode();
+            }
+            // For any other token, it's an unexpected state for ObjectNode deserialization.
             throw ctxt.mappingException(ObjectNode.class);
          }
\ No newline at end of file
