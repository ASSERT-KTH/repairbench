diff --git a/tmp/4fc40497-48e5-4a52-be4a-6d060476066a_buggy.java b/tmp/eec0000c-3fbd-404a-818b-4351cbcbca99_fixed.java
index 66bb99f..8f3ce60 100644
--- a/tmp/4fc40497-48e5-4a52-be4a-6d060476066a_buggy.java
+++ b/tmp/eec0000c-3fbd-404a-818b-4351cbcbca99_fixed.java
@@ -1,14 +1,20 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
-            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
-                p.nextToken();
-                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            JsonToken t = p.getCurrentToken();
+            // If START_OBJECT, advance to FIELD_NAME or END_OBJECT
+            if (t == JsonToken.START_OBJECT) {
+                t = p.nextToken();
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
-            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+            // At this point, `t` should be either FIELD_NAME (for objects with properties)
+            // or END_OBJECT (for empty objects).
+            // The `deserializeObject` method is capable of handling both these cases:
+            // - If t is FIELD_NAME, it proceeds to parse key-value pairs.
+            // - If t is END_OBJECT, `p.nextFieldName()` will immediately return null,
+            //   and an empty ObjectNode will be returned, which is correct.
+            if (t == JsonToken.FIELD_NAME || t == JsonToken.END_OBJECT) {
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            // For any other token, it's an unexpected input for an ObjectNode.
             throw ctxt.mappingException(ObjectNode.class);
          }
\ No newline at end of file
