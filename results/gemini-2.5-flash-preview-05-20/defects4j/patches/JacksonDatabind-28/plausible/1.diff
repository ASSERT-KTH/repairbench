diff --git a/tmp/1c4e8b8f-badd-4813-b95b-75661177a99e_buggy.java b/tmp/9d6a1680-281d-4f36-b5c7-0a464d155f56_fixed.java
index 66bb99f..4ad1425 100644
--- a/tmp/1c4e8b8f-badd-4813-b95b-75661177a99e_buggy.java
+++ b/tmp/9d6a1680-281d-4f36-b5c7-0a464d155f56_fixed.java
@@ -1,14 +1,29 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
+            // Case 1: Parser is at START_OBJECT token (e.g., `{"a":1}` or `{}`).
             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
-                p.nextToken();
+                p.nextToken(); // Advance past START_OBJECT.
+                // After nextToken(), for `{}`, the current token will be END_OBJECT.
+                // For `{"a":1}`, the current token will be FIELD_NAME.
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
+            // Case 2: Parser is already at END_OBJECT token.
+            // This scenario occurs when an empty object `{}` has been consumed by a caller
+            // (e.g., a delegating deserializer or a special type adapter), and the parser is
+            // left at the closing brace `}`. This is crucial for handling the `testIssue941` failure.
+            if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                // If the current token is END_OBJECT on entry, it means we are deserializing
+                // an empty object, and no further parsing is needed.
+                return ctxt.getNodeFactory().objectNode(); // Return an empty ObjectNode.
+            }
+            // Case 3: Parser is at FIELD_NAME token.
+            // This can happen if the caller has already advanced the parser past the opening
+            // brace to the first field name (e.g., for `{"field": "value"}`).
+            // The comment "similar to FIELD_NAME" implies this is an intended entry point.
             if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            // For any other token, it's an unexpected input for an ObjectNode.
             throw ctxt.mappingException(ObjectNode.class);
          }
\ No newline at end of file
