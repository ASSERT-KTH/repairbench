diff --git a/tmp/18f54719-c598-4201-916e-cc318a354310_buggy.java b/tmp/f6afcfa1-071c-49e0-a37c-36bf075898b8_fixed.java
index 66bb99f..cb600e4 100644
--- a/tmp/18f54719-c598-4201-916e-cc318a354310_buggy.java
+++ b/tmp/f6afcfa1-071c-49e0-a37c-36bf075898b8_fixed.java
@@ -1,14 +1,29 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
+            // Case 1: Parser is at the start of an object (e.g., "{").
+            // Advance the parser past the START_OBJECT token.
             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
                 p.nextToken();
+                // After nextToken(), the parser will be at either FIELD_NAME (if object has fields)
+                // or END_OBJECT (if object is empty, e.g., "{}").
+                // deserializeObject is expected to handle both these states.
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
+            // Case 2: Parser is already at a FIELD_NAME token.
+            // This happens if the caller has already consumed the START_OBJECT token (e.g., in a custom deserializer).
             if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            // Case 3: Parser is already at an END_OBJECT token.
+            // This happens if the caller has consumed the START_OBJECT token and the object was empty,
+            // leaving the parser directly at the END_OBJECT token. This is the scenario that caused
+            // the test failure for an empty object ("{}").
+            // In this case, we should return an empty ObjectNode. The deserializeObject method
+            // is expected to correctly return an empty ObjectNode if it finds the parser at END_OBJECT.
+            if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            }
+            // If none of the above, it's an unexpected token for an ObjectNode.
             throw ctxt.mappingException(ObjectNode.class);
          }
\ No newline at end of file
