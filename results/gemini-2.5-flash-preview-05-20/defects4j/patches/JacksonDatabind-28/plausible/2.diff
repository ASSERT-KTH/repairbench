diff --git a/tmp/5aa46151-5a19-48bd-84b1-7c4e5cd2d0d0_buggy.java b/tmp/e1587c3a-9cd1-47f2-b5d0-201e696d2b85_fixed.java
index 66bb99f..9351f7a 100644
--- a/tmp/5aa46151-5a19-48bd-84b1-7c4e5cd2d0d0_buggy.java
+++ b/tmp/e1587c3a-9cd1-47f2-b5d0-201e696d2b85_fixed.java
@@ -1,14 +1,26 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
-            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
-                p.nextToken();
-                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+            JsonToken t = p.getCurrentToken();
+
+            // Case 1: Parser is at START_OBJECT (e.g., when deserializing "{}")
+            if (t == JsonToken.START_OBJECT) {
+                t = p.nextToken(); // Advance to the next token, which could be FIELD_NAME or END_OBJECT
+            }
+
+            // Case 2: Parser is now at END_OBJECT (e.g., if input was "{}" and nextToken() moved it here)
+            // or if the deserializer was directly called with END_OBJECT as the current token (less common but possible)
+            if (t == JsonToken.END_OBJECT) {
+                return ctxt.getNodeFactory().objectNode(); // Return an empty object node for "{}".
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
-            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+
+            // Case 3: Parser is at FIELD_NAME (e.g., for non-empty object "{ \"key\": ... }",
+            // either initially or after consuming START_OBJECT)
+            if (t == JsonToken.FIELD_NAME) {
+                // Delegate to the protected method that handles actual field parsing
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            throw ctxt.mappingException(ObjectNode.class);
+            
+            // For any other token, it's an unsupported input for an ObjectNode
+            throw ctxt.mappingException(ObjectNode.class, t);
          }
\ No newline at end of file
