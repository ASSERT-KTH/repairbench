diff --git a/tmp/1d47175a-bc62-42e2-829d-46cd72c1654c_buggy.java b/tmp/794feec8-82fa-44b1-b96e-b6a94270d41e_fixed.java
index 66bb99f..c90ba1d 100644
--- a/tmp/1d47175a-bc62-42e2-829d-46cd72c1654c_buggy.java
+++ b/tmp/794feec8-82fa-44b1-b96e-b6a94270d41e_fixed.java
@@ -1,14 +1,23 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
+            // As per 23-Sep-2015, tatu's comment, we may be given END_OBJECT as the
+            // current token if the caller has already advanced past START_OBJECT
+            // for an empty object. In this case, we should return an empty ObjectNode.
+            if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                return ctxt.getNodeFactory().objectNode();
+            }
             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
-                p.nextToken();
+                p.nextToken(); // Advance past START_OBJECT
+                // After advancing, the token could be FIELD_NAME or END_OBJECT (for empty object).
+                // deserializeObject is expected to handle both scenarios.
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
+            // If the current token is FIELD_NAME, it means we are already inside an object
+            // and the parser is pointing to the first field name.
             if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            // For any other token, it's an unexpected start token for an ObjectNode.
             throw ctxt.mappingException(ObjectNode.class);
          }
\ No newline at end of file
