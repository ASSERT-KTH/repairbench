diff --git a/tmp/1b0201a6-0f07-4c77-90ca-adf55177ff95_buggy.java b/tmp/2eb1949c-0f88-48be-8a74-51453217adf3_fixed.java
index cd412d2..de6dbe7 100644
--- a/tmp/1b0201a6-0f07-4c77-90ca-adf55177ff95_buggy.java
+++ b/tmp/2eb1949c-0f88-48be-8a74-51453217adf3_fixed.java
@@ -1,76 +1,157 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+        if (len <= 10 && Character.isDigit(c)) { // Handles yyyy-MM-dd
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
-        } else if (c == 'Z') {
+        } else if (c == 'Z') { // Handles yyyy-MM-dd'T'HH:mm:ss.SSS'Z' or variations
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
+            
             StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
+            int tIndex = sb.lastIndexOf('T');
+            if (tIndex > 0) { // If time part exists
+                int timePartEnd = sb.length() - 1; // End of time part is just before 'Z'
+                int millisDotIndex = sb.lastIndexOf('.', timePartEnd - 1); // Search for '.' in the time part (before 'Z')
+
+                if (millisDotIndex > tIndex) { // Milliseconds part exists, potentially partial (e.g., ...ss.X)
+                    int numMillisDigits = timePartEnd - (millisDotIndex + 1);
+                    if (numMillisDigits < 3) {
+                        for (int i = 0; i < (3 - numMillisDigits); ++i) {
+                            sb.insert(timePartEnd, '0'); // Pad with zeros before 'Z'
+                            timePartEnd++; // Adjust insertion point for subsequent padding
+                        }
+                    }
+                } else { // No milliseconds dot found. Add .000 or :00.000
+                    // Check if seconds are missing (e.g., HH:mm)
+                    // timePartEnd is the index of 'Z', so time part ends at timePartEnd-1
+                    String timeValue = sb.substring(tIndex + 1, timePartEnd); // Extract time part (HH:mm or HH:mm:ss)
+                    if (timeValue.length() == 5) { // HH:mm
+                        sb.insert(timePartEnd, ":00.000"); // Add seconds and milliseconds before 'Z'
+                    } else if (timeValue.length() == 8) { // HH:mm:ss
+                        sb.insert(timePartEnd, ".000"); // Add milliseconds before 'Z'
+                    }
+                }
+            }
             dateStr = sb.toString();
-            }
-        } else {
-            // Let's see if we have timezone indicator or not...
+        } else { // Let's see if we have timezone indicator or not...
             if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+                
+                // 1. Normalize timezone offset (e.g., remove colon, add '00' if needed)
+                int tzOffsetStart = -1; // index of '+' or '-'
+                for (int i = sb.length() - 1; i >= 0; --i) {
+                    char ch = sb.charAt(i);
+                    if (ch == '+' || ch == '-') {
+                        tzOffsetStart = i;
+                        break;
+                    }
+                }
+
+                if (tzOffsetStart > 0) {
+                    // Check for colon in timezone offset (+HH:mm)
+                    if (sb.charAt(tzOffsetStart + 3) == ':') {
+                        sb.deleteCharAt(tzOffsetStart + 3); // Remove colon
+                    } else if (sb.length() == tzOffsetStart + 3) { // e.g., +HH, missing minutes
+                        sb.append("00"); // Append '00'
+                    }
+                }
+                
+                // 2. Handle missing/partial seconds and milliseconds
+                int tIndex = sb.lastIndexOf('T');
+                if (tIndex > 0) { // Should always be true for ISO8601 with time
+                    // The timezone offset (after normalization) starts at tzOffsetStart.
+                    // The time part ends at tzOffsetStart - 1.
+                    
+                    // Re-locate tzOffsetStart as sb might have changed length due to timezone normalization
+                    // This is crucial if dateStr has changed length.
+                    tzOffsetStart = -1;
+                    for (int i = sb.length() - 1; i >= 0; --i) {
+                        char ch = sb.charAt(i);
+                        if (ch == '+' || ch == '-') {
+                            tzOffsetStart = i;
+                            break;
+                        }
                     }
+                    if (tzOffsetStart == -1) { // Should not happen if hasTimeZone is true and date is valid
+                        // Fallback or error handling
+                        return null; // or throw exception, but current API returns null
+                    }
+                    
+                    int timePartEnd = tzOffsetStart; // This is the insertion point before the timezone offset
+
+                    int millisDotIndex = sb.lastIndexOf('.', timePartEnd - 1); // Search for '.' before TZ offset
+
+                    if (millisDotIndex > tIndex) { // Milliseconds part exists (e.g., ...ss.X...)
+                        int numMillisDigits = timePartEnd - (millisDotIndex + 1);
+                        if (numMillisDigits < 3) {
+                            for (int i = 0; i < (3 - numMillisDigits); ++i) {
+                                sb.insert(timePartEnd, '0');
+                            }
+                        }
+                    } else { // No milliseconds dot found. Add .000 or :00.000
+                        String timeValue = sb.substring(tIndex + 1, timePartEnd);
+                        if (timeValue.length() == 5) { // HH:mm
+                            sb.insert(timePartEnd, ":00.000");
+                        } else if (timeValue.length() == 8) { // HH:mm:ss
+                            sb.insert(timePartEnd, ".000");
+                        }
+                    }
+                }
+                dateStr = sb.toString();
+                
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+            } else { // No timezone, assume Z.
                 StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+                int tIndex = sb.lastIndexOf('T');
+                if (tIndex > 0) { // If time part exists
+                    int timePartEnd = sb.length(); // End of time part is end of string before appending 'Z'
+                    int millisDotIndex = sb.lastIndexOf('.', timePartEnd - 1); // Search for '.' in the time part
+
+                    if (millisDotIndex > tIndex) { // Milliseconds exist, potentially partial
+                        int numMillisDigits = timePartEnd - (millisDotIndex + 1);
+                        if (numMillisDigits < 3) {
+                            for (int i = 0; i < (3 - numMillisDigits); ++i) {
+                                sb.insert(timePartEnd, '0'); // Pad with zeros at the end of time part
+                                timePartEnd++; // Adjust insertion point for subsequent inserts
+                            }
+                        }
+                    } else { // No milliseconds dot found. Add .000 or :00.000
+                        String timeValue = sb.substring(tIndex + 1, timePartEnd);
+                        if (timeValue.length() == 5) { // HH:mm
+                            sb.append(":00.000");
+                        } else if (timeValue.length() == 8) { // HH:mm:ss
                             sb.append(".000");
                         }
-                sb.append('Z');
+                    }
+                }
+                sb.append('Z'); // Always append 'Z'
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
\ No newline at end of file
