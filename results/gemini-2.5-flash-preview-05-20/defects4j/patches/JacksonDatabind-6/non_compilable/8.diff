diff --git a/tmp/1b1164da-a339-49db-9d90-f3c52c60b080_buggy.java b/tmp/4fb76ebb-269e-4b2e-ab9e-895b7dbd45f5_fixed.java
index cd412d2..8890e48 100644
--- a/tmp/1b1164da-a339-49db-9d90-f3c52c60b080_buggy.java
+++ b/tmp/4fb76ebb-269e-4b2e-ab9e-895b7dbd45f5_fixed.java
@@ -1,76 +1,140 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
+        // This branch handles "yyyy-MM-dd" format explicitly.
         if (len <= 10 && Character.isDigit(c)) {
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
-        } else if (c == 'Z') {
+            return df.parse(dateStr, pos);
+        }
+
+        // All other cases are expected to have a time component and potentially a timezone
+        StringBuilder sb = new StringBuilder(dateStr);
+        int tPos = sb.lastIndexOf("T"); // Find 'T' separator for time component
+
+        if (c == 'Z') { // Zulu timezone ('Z' == "GMT")
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
-            }
-        } else {
-            // Let's see if we have timezone indicator or not...
+            // Ensure time component is 'HH:mm:ss.SSS' before 'Z'
+            if (tPos > 0) {
+                int timePartEndIndex = len - 1; // Index where 'Z' is. Insert/append before it.
+                // timePartLength is the length of "HH:mm", "HH:mm:ss", "HH:mm:ss.S" etc.
+                int timePartLength = timePartEndIndex - (tPos + 1);
+
+                // Case 1: Missing seconds and milliseconds (e.g., "HH:mm")
+                if (timePartLength == 5) { // "HH:mm" (length 5)
+                    sb.insert(timePartEndIndex, ":00.000");
+                }
+                // Case 2: Missing milliseconds (e.g., "HH:mm:ss")
+                else if (timePartLength == 8) { // "HH:mm:ss" (length 8)
+                    sb.insert(timePartEndIndex, ".000");
+                }
+                // Case 3: Partial milliseconds (e.g., "HH:mm:ss.S", "HH:mm:ss.SS")
+                else if (timePartLength > 8) { // Potentially "HH:mm:ss.S" or "HH:mm:ss.SS"
+                    // Check if a dot for milliseconds exists and pad if needed
+                    // Find the dot in the string up to 'Z'
+                    int dotPos = sb.lastIndexOf('.', timePartEndIndex); 
+                    if (dotPos > tPos) { // Dot found within the time part
+                        int fractionLength = timePartEndIndex - (dotPos + 1); // Number of digits after dot
+                        if (fractionLength < 3) {
+                            for (int i = 0; i < (3 - fractionLength); ++i) {
+                                sb.insert(timePartEndIndex, '0'); // Pad with '0's
+                            }
+                        }
+                    } else { // No dot found, means milliseconds are completely missing
+                        sb.insert(timePartEndIndex, ".000");
+                    }
+                }
+                dateStr = sb.toString(); // Update dateStr with modified content
+            }
+        } else { // Does not end with 'Z'. Could have +/-HH:MM or +/-HHMM or no timezone at all.
+            // Check if it has a timezone offset (e.g., "+01:00", "-0500")
             if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
+                
+                // Find the start of the timezone offset ('+' or '-')
+                int tzStart = dateStr.lastIndexOf('+');
+                if (tzStart < 0) {
+                    tzStart = dateStr.lastIndexOf('-');
+                }
+                
+                // Ensure 'T' and a timezone offset are both present
+                if (tPos > 0 && tzStart > 0) {
+                    // timePartEndIndex is the index of the timezone sign ('+' or '-').
+                    // We insert/append before this index.
+                    int timePartEndIndex = tzStart; 
+                    // timePartLength is the length of "HH:mm", "HH:mm:ss", "HH:mm:ss.S" etc.
+                    int timePartLength = timePartEndIndex - (tPos + 1);
+
+                    // Apply the same logic as for 'Z' dates to pad seconds and milliseconds
+                    if (timePartLength == 5) { // "HH:mm"
+                        sb.insert(timePartEndIndex, ":00.000");
+                    } else if (timePartLength == 8) { // "HH:mm:ss"
+                        sb.insert(timePartEndIndex, ".000");
+                    } else if (timePartLength > 8) { 
+                        int dotPos = sb.lastIndexOf('.', timePartEndIndex);
+                        if (dotPos > tPos) { // Dot found within the time part
+                            int fractionLength = timePartEndIndex - (dotPos + 1);
+                            if (fractionLength < 3) {
+                                for (int i = 0; i < (3 - fractionLength); ++i) {
+                                    sb.insert(timePartEndIndex, '0');
+                                }
+                            }
+                        } else { // No dot for milliseconds, but timePartLength > 8 implies 'HH:mm:ss' without dot
+                            sb.insert(timePartEndIndex, ".000");
+                        }
+                    }
+                    dateStr = sb.toString(); // Update dateStr with modified content
+                }
+            } else { // No explicit timezone: assume UTC/GMT ('Z')
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
+                
+                // Handle missing seconds/milliseconds, then append 'Z'
+                if (tPos > 0) { // If there's a time component
+                    int timePartEndIndex = len; // Append before 'Z' is added
+                    int timePartLength = timePartEndIndex - (tPos + 1);
+                    
+                    if (timePartLength == 5) { // "HH:mm"
+                        sb.append(":00.000");
+                    } else if (timePartLength == 8) { // "HH:mm:ss"
+                        sb.append(".000");
+                    } else if (timePartLength > 8) {
+                        int dotPos = sb.lastIndexOf('.', timePartEndIndex);
+                        if (dotPos > tPos) {
+                            int fractionLength = timePartEndIndex - (dotPos + 1);
+                            if (fractionLength < 3) {
+                                for (int i = 0; i < (3 - fractionLength); ++i) {
+                                    sb.append('0');
+                                }
+                            }
+                        } else { // No dot for milliseconds
+                            sb.append(".000");
+                        }
+                    }
+                } else { // No 'T' in string, e.g. "yyyy-MM-dd"
+                         // This path should ideally be caught by the first `if (len <= 10 ...)`
+                         // If it gets here, it means a date-only string that didn't match the plain format.
+                         // Best effort is to append a default time and 'Z'.
+                    sb.append("T00:00:00.000");
+                }
+                sb.append('Z'); // Always append 'Z' as fallback timezone
+                dateStr = sb.toString();
             }
         }
         return df.parse(dateStr, pos);
     }
