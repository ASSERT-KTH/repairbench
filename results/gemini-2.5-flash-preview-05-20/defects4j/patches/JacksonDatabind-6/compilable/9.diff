diff --git a/tmp/7bb43412-3321-4d5e-b64f-ad77f1000c5d_buggy.java b/tmp/ed0935d4-e6f6-4627-af18-e5dbfabf1484_fixed.java
index cd412d2..d57475d 100644
--- a/tmp/7bb43412-3321-4d5e-b64f-ad77f1000c5d_buggy.java
+++ b/tmp/ed0935d4-e6f6-4627-af18-e5dbfabf1484_fixed.java
@@ -1,76 +1,162 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+        if (len <= 10 && Character.isDigit(c)) { // yyyy-MM-dd
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
+            // Normalize: ensure seconds and milliseconds are present and 3 digits
+            // Target format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
+            int tIndex = dateStr.lastIndexOf('T');
+            if (tIndex > 0) { // Must have a 'T' for time part
                 StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+                int dotIndex = dateStr.lastIndexOf('.', len - 2); // Search for dot before 'Z'
+
+                if (dotIndex > tIndex) { // Has a dot after T (e.g., "...T12:34:56.7Z")
+                    // Pad milliseconds to 3 digits
+                    int currentMillisDigits = (len - 1) - (dotIndex + 1); // length of digits between '.' and 'Z'
+                    if (currentMillisDigits < 3) {
+                        for (int i = 0; i < (3 - currentMillisDigits); ++i) {
+                            sb.insert(len - 1, '0'); // Insert '0' before 'Z'
+                        }
+                    }
+                } else { // No dot (e.g., "...T12:34:56Z" or "...T12:34Z")
+                    // Check if seconds are missing:
+                    int colonCount = 0;
+                    for (int i = tIndex + 1; i < len - 1; ++i) { // Check between 'T' and 'Z'
+                        if (dateStr.charAt(i) == ':') {
+                            colonCount++;
+                        }
+                    }
+                    if (colonCount == 1) { // Only HH:mm, missing ss (e.g., "...T12:34Z")
+                        sb.insert(len - 1, ":00.000"); // Add seconds and milliseconds before 'Z'
+                    } else { // Has HH:mm:ss, missing .SSS (e.g., "...T12:34:56Z")
+                        sb.insert(len - 1, ".000"); // Add milliseconds before 'Z'
+                    }
                 }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
                 dateStr = sb.toString();
             }
+        } else { // Has timezone indicator (+/-) or no timezone indicator at all.
+            int timezoneIndex = -1; // index of '+' or '-'
+            for (int i = len - 1; i >= 0; --i) {
+                char ch = dateStr.charAt(i);
+                if (ch == '+' || ch == '-') {
+                    timezoneIndex = i;
+                    break;
+                }
+            }
+
+            if (timezoneIndex != -1) { // Has timezone indicator (+/-)
                 df = _formatISO8601;
-                if (_formatISO8601 == null) {
+                if (df == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+
                 StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
+
+                // 1. Normalize timezone offset: from "+HH:MM" to "+HHMM" or "+HH" to "+HH00"
+                int tzLen = len - timezoneIndex;
+                if (tzLen == 3) { // e.g., "+01" or "-05"
+                    sb.append("00"); // Add minutes
+                } else if (tzLen == 6 && sb.charAt(timezoneIndex + 3) == ':') { // e.g., "+01:00"
+                    sb.deleteCharAt(timezoneIndex + 3); // Remove colon
                 }
-                sb.append('Z');
                 dateStr = sb.toString();
+                len = dateStr.length(); // Update length after modification
+
+                // 2. Normalize seconds and milliseconds part
+                // Recalculate timezoneIndex as string length might have changed
+                timezoneIndex = -1;
+                for (int i = len -1 ; i >= 0; --i) {
+                    char ch = dateStr.charAt(i);
+                    if (ch == '+' || ch == '-') {
+                        timezoneIndex = i;
+                        break;
+                    }
+                }
+                
+                int tIndex = dateStr.lastIndexOf('T');
+                if (tIndex > 0) { // Must have a 'T' for time part
+                    int dotIndex = dateStr.lastIndexOf('.', timezoneIndex - 1); // Search for dot before timezone
+
+                    sb = new StringBuilder(dateStr); // Re-initialize StringBuilder with current dateStr
+
+                    if (dotIndex > tIndex) { // Has partial milliseconds (e.g., "...T12:34:56.7+/-HHMM")
+                        // Pad milliseconds to 3 digits
+                        int currentMillisDigits = timezoneIndex - (dotIndex + 1);
+                        if (currentMillisDigits < 3) {
+                            for (int i = 0; i < (3 - currentMillisDigits); ++i) {
+                                sb.insert(timezoneIndex, '0'); // Insert '0' before timezone offset
+                            }
+                        }
+                    } else { // No dot (e.g., "...T12:34:56+/-HHMM" or "...T12:34+/-HHMM")
+                        // Check if seconds are missing:
+                        int colonCount = 0;
+                        for (int i = tIndex + 1; i < timezoneIndex; ++i) { // Check between 'T' and timezone start
+                            if (sb.charAt(i) == ':') {
+                                colonCount++;
+                            }
+                        }
+                        if (colonCount == 1) { // Only HH:mm, missing ss (e.g., "1997-07-16T19:20+01:00")
+                            sb.insert(timezoneIndex, ":00.000"); // Add seconds and milliseconds before timezone
+                        } else if (colonCount == 2) { // Has HH:mm:ss, missing .SSS (e.g., "...T12:34:56+...")
+                            sb.insert(timezoneIndex, ".000"); // Add milliseconds before timezone
+                        }
+                    }
+                    dateStr = sb.toString();
+                }
+            } else { // No timezone offset or 'Z' suffix, but has time part (e.g., "yyyy-MM-ddTHH:mm:ss")
+                // Treat as UTC/GMT and append 'Z' after normalization
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
+
+                StringBuilder sb = new StringBuilder(dateStr);
+                int tIndex = dateStr.lastIndexOf('T');
+                if (tIndex > 0) { // Has time part
+                    int dotIndex = dateStr.lastIndexOf('.');
+                    if (dotIndex > tIndex) { // Has partial milliseconds (e.g., "...T12:34:56.7")
+                        // Pad milliseconds to 3 digits
+                        int currentMillisDigits = dateStr.length() - (dotIndex + 1);
+                        if (currentMillisDigits < 3) {
+                            for (int i = 0; i < (3 - currentMillisDigits); ++i) {
+                                sb.append('0'); // Append '0's to pad
+                            }
+                        }
+                    } else { // No dot (e.g., "...T12:34:56" or "...T12:34")
+                        // Check if seconds are missing:
+                        int colonCount = 0;
+                        for (int i = tIndex + 1; i < dateStr.length(); ++i) {
+                            if (dateStr.charAt(i) == ':') {
+                                colonCount++;
+                            }
+                        }
+                        if (colonCount == 1) { // Only HH:mm, missing ss
+                            sb.append(":00.000"); // Add seconds and milliseconds
+                        } else { // Has HH:mm:ss, missing .SSS
+                            sb.append(".000"); // Add milliseconds
+                        }
+                    }
+                }
+                sb.append('Z'); // Always append 'Z' for this case
+                dateStr = sb.toString();
             }
         }
         return df.parse(dateStr, pos);
     }
\ No newline at end of file
