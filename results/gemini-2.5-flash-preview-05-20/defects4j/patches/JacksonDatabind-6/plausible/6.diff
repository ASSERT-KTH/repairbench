diff --git a/tmp/e77ca60a-e08e-4fe7-b6c9-85c6dbbbe725_buggy.java b/tmp/bf8303b5-e9ae-47b1-a6cb-7cfb308b2ba8_fixed.java
index cd412d2..a78eeb1 100644
--- a/tmp/e77ca60a-e08e-4fe7-b6c9-85c6dbbbe725_buggy.java
+++ b/tmp/bf8303b5-e9ae-47b1-a6cb-7cfb308b2ba8_fixed.java
@@ -1,76 +1,167 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
+        // [JACKSON-200]: need to support "plain" date (yyyy-MM-dd)
         if (len <= 10 && Character.isDigit(c)) { 
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
-        } else if (c == 'Z') {
+        } else if (c == 'Z') { // Handle 'Z' (Zulu) timezone explicitly
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
+            
             StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+            int tPos = sb.lastIndexOf("T");
+            
+            // Should have a 'T' for time components with 'Z'. If not, append default time.
+            if (tPos > 0) {
+                int endOfTimePart = sb.length() - 1; // Position before 'Z'
+
+                // Check for missing seconds (e.g. HH:mmZ)
+                String timeSectionBeforeZ = sb.substring(tPos + 1, endOfTimePart);
+                if (timeSectionBeforeZ.length() == 5 && timeSectionBeforeZ.charAt(2) == ':') { // HH:mm
+                    sb.insert(endOfTimePart, ":00");
+                    endOfTimePart += 3; // Shift insertion point as string grew
                 }
+                
+                // Check for milliseconds
+                int dotPos = sb.indexOf(".", tPos);
+                if (dotPos < 0 || dotPos >= endOfTimePart) { // No dot for milliseconds, add ".000"
+                    sb.insert(endOfTimePart, ".000");
+                } else { // Dot exists, but partial milliseconds (.S, .SS)
+                    String currentMillis = sb.substring(dotPos + 1, endOfTimePart);
+                    int numMillisDigits = currentMillis.length();
+                    if (numMillisDigits > 0 && numMillisDigits < 3) {
+                        int millisInsertPoint = dotPos + 1 + numMillisDigits;
+                        for (int i = 0; i < (3 - numMillisDigits); ++i) {
+                            sb.insert(millisInsertPoint, '0');
+                        }
+                    }
+                }
+            } else { // No 'T', e.g. "1997-07-16Z". Append default time.
+                sb.insert(len - 1, "T00:00:00.000");
+            }
+            dateStr = sb.toString(); // Update dateStr for parsing
         } else {
-            // Let's see if we have timezone indicator or not...
+            // This is the branch for non-'Z' timezones (+/-HH:MM, +/-HH) or no explicit timezone.
             if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                
+                // 1. Normalize timezone offset: "+HH:MM" -> "+HHMM", "+HH" -> "+HH00"
+                int tzStart = -1;
+                for (int i = sb.length() - 1; i >= 0; --i) {
+                    char ch = sb.charAt(i);
+                    if (ch == '+' || ch == '-') {
+                        tzStart = i;
+                        break;
+                    }
+                }
+                
+                if (tzStart > 0) { // Found a timezone offset
+                    // Check if colon exists in TZ offset (+01:00)
+                    if (sb.length() > tzStart + 3 && sb.charAt(tzStart + 3) == ':') {
+                        sb.delete(tzStart + 3, tzStart + 4); // Remove the colon
+                    } else if (sb.length() == tzStart + 3) { // Missing minutes (+01)
+                        sb.append("00");
+                    }
+                    // Update dateStr so subsequent index lookups are correct
                     dateStr = sb.toString();
+                    len = dateStr.length(); // Update len after modifications
+                    // Recalculate tzStart after possible string length change
+                    tzStart = -1; // reset and find again based on new dateStr
+                    for (int i = len - 1; i >= 0; --i) {
+                        char ch = dateStr.charAt(i);
+                        if (ch == '+' || ch == '-') {
+                            tzStart = i;
+                            break;
+                        }
+                    }
+                    sb = new StringBuilder(dateStr); // Re-initialize sb with current state
+                }
+
+                // 2. Handle missing seconds and partial milliseconds before the timezone offset
+                int tPos = sb.lastIndexOf("T");
+                int endOfTimePart = (tzStart > 0) ? tzStart : sb.length(); // Position before timezone offset or end of string
+
+                if (tPos > 0) { // Has time part (T present)
+                    // Check for missing seconds (e.g., HH:mm -> HH:mm:00)
+                    int dotPos = sb.indexOf(".", tPos);
+                    if (dotPos < 0 || dotPos >= endOfTimePart) { // No dot for milliseconds part
+                        String timeSection = sb.substring(tPos + 1, endOfTimePart);
+                        if (timeSection.length() == 5 && timeSection.charAt(2) == ':') { // HH:mm
+                            sb.insert(endOfTimePart, ":00");
+                            endOfTimePart += 3; // Shift insertion point
+                        }
+                        // Now, regardless if seconds were missing or present, if no millis dot, add ".000"
+                        sb.insert(endOfTimePart, ".000");
+                    } else { // Dot exists, but partial milliseconds (.S, .SS)
+                        String currentMillis = sb.substring(dotPos + 1, endOfTimePart);
+                        int numMillisDigits = currentMillis.length();
+                        if (numMillisDigits > 0 && numMillisDigits < 3) {
+                            int millisInsertPoint = dotPos + 1 + numMillisDigits;
+                            for (int i = 0; i < (3 - numMillisDigits); ++i) {
+                                sb.insert(millisInsertPoint, '0');
+                            }
+                        }
+                    }
+                } else { // No 'T' in string but has timezone, e.g., "yyyy-MM-dd+HHMM"
+                         // Append T00:00:00.000
+                    sb.insert(endOfTimePart, "T00:00:00.000");
                 }
+                dateStr = sb.toString(); // Final string after all modifications
+                
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+            } else { // No explicit timezone (nor 'Z')
+                // This means date like "2014-10-03T18:00:00" or "2014-10-03T18:00"
+                // It should be converted to ISO8601_Z (i.e. 'Z' appended and ".000" if missing/partial)
                 StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+                int tPos = sb.lastIndexOf("T");
+
+                if (tPos > 0) { // Has time part
+                    int endOfTimePart = sb.length(); // Current end of string (before appending Z)
+                    // Check for missing seconds (e.g. HH:mm)
+                    String timeSection = sb.substring(tPos + 1, endOfTimePart);
+                    if (timeSection.length() == 5 && timeSection.charAt(2) == ':') { // HH:mm
+                        sb.insert(tPos + 6, ":00"); // Insert :00 after minutes
+                        endOfTimePart += 3; // Shift end position as string grew
+                    }
+                    
+                    // Check for milliseconds
+                    int dotPos = sb.indexOf(".", tPos);
+                    if (dotPos < 0 || dotPos >= endOfTimePart) { // No dot for milliseconds
                         sb.append(".000");
+                    } else { // Dot exists, but partial milliseconds
+                        String currentMillis = sb.substring(dotPos + 1, endOfTimePart);
+                        int numMillisDigits = currentMillis.length();
+                        if (numMillisDigits > 0 && numMillisDigits < 3) {
+                            int millisInsertPoint = dotPos + 1 + numMillisDigits;
+                            for (int i = 0; i < (3 - numMillisDigits); ++i) {
+                                sb.insert(millisInsertPoint, '0');
                             }
-                sb.append('Z');
+                        }
+                    }
+                } else { // No 'T' and no timezone. Assume `yyyy-MM-dd` and append default time.
+                         // This is typically handled by `len <= 10` branch but might be longer, e.g. "2014-10-03"
+                         // if it was not caught by the plain date condition, append default time.
+                    sb.append("T00:00:00.000");
+                }
+                sb.append('Z'); // Always append 'Z' for this case
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
\ No newline at end of file
