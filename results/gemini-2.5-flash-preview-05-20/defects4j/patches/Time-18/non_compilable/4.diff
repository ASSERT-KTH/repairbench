diff --git a/tmp/d818787d-3f44-460d-ac85-50e8e8a57a4e_buggy.java b/tmp/e37d8c85-9d98-4e7a-a302-4741561dc606_fixed.java
index be2af16..74963a2 100644
--- a/tmp/d818787d-3f44-460d-ac85-50e8e8a57a4e_buggy.java
+++ b/tmp/e37d8c85-9d98-4e7a-a302-4741561dc606_fixed.java
@@ -1,29 +1,74 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
+        // Determine if the date components (year, month, day) clearly fall before the cutover.
+        // This avoids calling GregorianChronology for dates like 1500-02-29 which are invalid
+        // in Gregorian but valid in Julian.
+        boolean isClearlyBeforeCutoverDate;
+        if (year < iCutoverYear) {
+            isClearlyBeforeCutoverDate = true;
+        } else if (year > iCutoverYear) {
+            isClearlyBeforeCutoverDate = false;
+        } else { // year == iCutoverYear
+            if (monthOfYear < iCutoverMonth) {
+                isClearlyBeforeCutoverDate = true;
+            } else if (monthOfYear > iCutoverMonth) {
+                isClearlyBeforeCutoverDate = false;
+            } else { // monthOfYear == iCutoverMonth
+                // If dayOfMonth is before the cutover day, it's clearly before.
+                // Otherwise (on or after cutover day), it's not clearly before.
+                isClearlyBeforeCutoverDate = (dayOfMonth < iCutoverDay);
+            }
+        }
+
         long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        if (isClearlyBeforeCutoverDate) {
+            // If the date is clearly before the cutover (e.g., 1500-02-29),
+            // it must be handled by the Julian chronology.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            
+            // After Julian calculation, check if this falls into the illegal cutover gap.
+            // This happens if the Julian date itself corresponds to a moment on or after the Gregorian cutover.
+            // Example: 1582-10-05 (Julian) which is equivalent to 1582-10-15 (Gregorian) - this is iCutoverMillis.
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+        } else {
+            // If the date is on or after the cutover based on year/month/day,
+            // or if it's an ambiguous date within the cutover period (e.g. 1582-10-01),
+            // use the original logic which tries Gregorian first and then handles ambiguity/gap.
+            instant = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            
+            // If the calculated Gregorian instant is before the cutover, it might be a Julian date.
+            // This handles ambiguous dates that look like Gregorian but map to before the cutover,
+            // or dates that are truly in the transition period.
+            if (instant < iCutoverMillis) {
+                // Try Julian conversion.
+                long julianInstant = iJulianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                
+                // If the Julian instant falls on or after the Gregorian cutover,
+                // it means the date is in the illegal cutover gap.
+                if (julianInstant >= iCutoverMillis) {
+                    throw new IllegalArgumentException("Specified date does not exist");
+                }
+                // Otherwise, use the Julian instant.
+                instant = julianInstant;
+            }
         }
         return instant;
     }
\ No newline at end of file
