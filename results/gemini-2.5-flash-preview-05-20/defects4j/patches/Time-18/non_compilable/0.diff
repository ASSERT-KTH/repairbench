diff --git a/tmp/dd28c0bc-6b8e-4e86-b6bb-b7e5d587db66_buggy.java b/tmp/4c030b02-2f68-4fc7-852d-712688510bc8_fixed.java
index be2af16..dc556d1 100644
--- a/tmp/dd28c0bc-6b8e-4e86-b6bb-b7e5d587db66_buggy.java
+++ b/tmp/4c030b02-2f68-4fc7-852d-712688510bc8_fixed.java
@@ -1,29 +1,54 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        boolean triedGregorianAndSucceeded = false;
+        try {
+            // Assume date is Gregorian.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+            triedGregorianAndSucceeded = true;
+        } catch (IllegalArgumentException e) {
+            // Gregorian calculation failed. This typically means the date (e.g., Feb 29, 1500)
+            // is invalid in Gregorian but might be valid in Julian for years before the cutover.
+            // We proceed to try the Julian calculation.
+        }
+
+        if (triedGregorianAndSucceeded && instant >= iCutoverMillis) {
+            // The Gregorian interpretation succeeded and falls at or after the cutover point.
+            // This is the correct interpretation for dates in the Gregorian era.
+            return instant;
+        } else {
+            // We reach this block if either:
+            // 1. The Gregorian calculation failed (caught IllegalArgumentException).
+            // 2. The Gregorian calculation succeeded, but the resulting instant was before the cutover.
+            // In both these cases, the date should be interpreted using the Julian calendar.
+            
+            // Try Julian.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            
+            // After attempting Julian, check if the resulting instant falls within the
+            // "cutover gap" (the period of 10 skipped days during the calendar transition).
+            // If it does, the specified date does not exist in GJChronology.
+            // This condition covers cases where a Julian date, if it were to exist at or
+            // after the cutover point, would fall into the Gregorian calendar's skipped days.
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
-        }
+            
+            // Otherwise, it's a valid Julian date that falls before the cutover point.
             return instant;
         }
+    }
\ No newline at end of file
