diff --git a/tmp/8b40b370-c890-4e5d-bf77-420d35ec172c_buggy.java b/tmp/12b85b52-a044-4cb7-b4ba-da7a7ebe233c_fixed.java
index be2af16..6a39304 100644
--- a/tmp/8b40b370-c890-4e5d-bf77-420d35ec172c_buggy.java
+++ b/tmp/12b85b52-a044-4cb7-b4ba-da7a7ebe233c_fixed.java
@@ -1,29 +1,83 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        long gregorianInstant;
+        boolean gregorianCalculationFailed = false;
+
+        try {
+            // Assume date is Gregorian first.
+            gregorianInstant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+        } catch (IllegalArgumentException e) {
+            gregorianCalculationFailed = true;
+            
+            // Gregorian calculation failed. This might be because the date is
+            // valid only in Julian and is before the cutover (e.g., Feb 29, 1500).
+
+            // Determine if the input date (year, month, day) is strictly before
+            // the configured cutover date (iCutoverYear, iCutoverMonthOfYear, iCutoverDayOfMonth).
+            // Dates before the cutover should typically be handled by Julian.
+            boolean isBeforeCutoverDate =
+                (year < iCutoverYear) ||
+                (year == iCutoverYear && monthOfYear < iCutoverMonthOfYear) ||
+                (year == iCutoverYear && monthOfYear == iCutoverMonthOfYear && dayOfMonth < iCutoverDayOfMonth);
+
+            if (isBeforeCutoverDate) {
+                // The input date is strictly before the cutover date based on year/month/day.
+                // Try Julian as a fallback.
+                long julianInstant = iJulianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+
+                // If the Julian calculation results in an instant that is on or after
+                // the Gregorian cutover point, this is an unexpected inconsistency
+                // for a date that should be purely Julian. This signifies an invalid date
+                // within the hybrid chronology's rules.
+                if (julianInstant >= iCutoverMillis) {
+                    throw new IllegalArgumentException("Specified date does not exist (Julian result inconsistent with cutover date)");
+                }
+                
+                // If Julian calculation succeeded and is before cutover, return this Julian instant.
+                return julianInstant;
+            } else {
+                // Gregorian calculation failed, and the date is on or after the cutover date.
+                // This means the date is simply invalid for GJChronology.
+                throw e; // Re-throw the original IllegalArgumentException.
+            }
+        }
+
+        // If we reach here, 'gregorianInstant' was successfully calculated.
+        // Now, apply the existing cutover gap logic. This part checks if the
+        // Gregorian interpretation of the date is before the cutover, which might
+        // imply it's a Julian date that falls into the "cutover gap".
+        if (!gregorianCalculationFailed && gregorianInstant < iCutoverMillis) {
+            // Gregorian calculation yielded an instant before the cutover.
+            // Now, compare this with the Julian interpretation of the same date.
+            long julianInstantForGapCheck = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            
+            if (julianInstantForGapCheck >= iCutoverMillis) {
+                // This is the illegal cutover gap:
+                // Gregorian calculates to an instant before cutover, but
+                // Julian calculates to an instant on or after cutover.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            // If Julian also maps to an instant before cutover, the Julian interpretation is correct.
+            return julianInstantForGapCheck;
         }
-        return instant;
+
+        // If gregorianCalculationFailed is false, and gregorianInstant is >= iCutoverMillis,
+        // then the date is a valid Gregorian date on or after the cutover.
+        return gregorianInstant;
     }
\ No newline at end of file
