diff --git a/tmp/358ef27f-3d87-4429-868a-a9ddd3621c5d_buggy.java b/tmp/17f10d45-f8a8-44de-90e8-5afd4fabe26f_fixed.java
index be2af16..c488745 100644
--- a/tmp/358ef27f-3d87-4429-868a-a9ddd3621c5d_buggy.java
+++ b/tmp/17f10d45-f8a8-44de-90e8-5afd4fabe26f_fixed.java
@@ -1,29 +1,65 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        try {
+            // Assume date is Gregorian.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        } catch (IllegalArgumentException e) {
+            // If Gregorian fails for a date, it might be valid in Julian.
+            // This is especially true for dates before the Gregorian cutover year.
+            // iGregorianCutoverYear is typically 1582.
+            // Check if the year is in the range where Julian is relevant.
+            if (year < iGregorianCutoverYear + 1) { // If year is potentially in Julian territory or very close to cutover
+                try {
                     instant = iJulianChronology.getDateTimeMillis
                         (year, monthOfYear, dayOfMonth,
                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                } catch (IllegalArgumentException e2) {
+                    // Julian also failed. This date is invalid in both.
+                    // Rethrow the original Gregorian exception, as it's the primary check.
+                    throw e;
+                }
+                // If Julian conversion succeeded, check if it falls into the cutover gap.
+                // If a Julian date maps to an instant >= cutoverMillis, it means
+                // this specific date (Julian interpretation) falls into what would be
+                // Gregorian territory, but the Gregorian conversion failed. This is the gap.
                 if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
                     throw new IllegalArgumentException("Specified date does not exist");
                 }
-        }
+                // Valid Julian date before cutover, return its instant.
                 return instant;
+            } else {
+                // Gregorian failed, and the year is too far after the cutover for Julian to apply.
+                // Re-throw the Gregorian exception.
+                throw e;
+            }
+        }
+
+        // Original logic: If Gregorian date resulted in an instant before the cutover,
+        // it might be a Julian date. This handles cases where Gregorian is valid
+        // but results in a timestamp that chronologically belongs to the Julian era.
+        if (instant < iCutoverMillis) {
+            // Maybe it's Julian.
+            long julianInstant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (julianInstant >= iCutoverMillis) {
+                // Okay, it's in the illegal cutover gap.
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            return julianInstant;
+        }
+        return instant; // Gregorian instant >= cutover, so it's a Gregorian date.
     }
\ No newline at end of file
