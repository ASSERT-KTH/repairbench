diff --git a/tmp/c28a7240-55ae-4562-a890-ddbab25ec7ef_buggy.java b/tmp/0b690c1a-0754-42e5-b299-2f2c6d929c65_fixed.java
index be2af16..652f18d 100644
--- a/tmp/c28a7240-55ae-4562-a890-ddbab25ec7ef_buggy.java
+++ b/tmp/0b690c1a-0754-42e5-b299-2f2c6d929c65_fixed.java
@@ -1,29 +1,55 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        // If year is in the cutover range, check Julian and Gregorian.
+        // If it's the cutover year, it could be either.
+        // Otherwise, if year is before cutover, it's Julian.
+        // Otherwise, it's Gregorian.
+
+        if (year < iCutoverYear) {
+            // Definitely Julian.
+            instant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } else if (year > iCutoverYear) {
+            // Definitely Gregorian.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        } else { // year == iCutoverYear
+            // Potentially in the cutover.
+            // Check if date is before or after cutover date.
+            // Check Julian date first.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                // If we got here, Julian date is on or after cutover.
+                // The only way this is not a gap is if the date is also valid
+                // and maps to the same instant in Gregorian.
+                // This effectively means the Julian date is after cutover day.
+                // Example: Julian 1582-10-15 maps to Gregorian 1582-10-15.
+                // So, try Gregorian.
+                long gregorianInstant = iGregorianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                if (gregorianInstant < iCutoverMillis) {
+                    // This means the Julian date is after cutover, but Gregorian is before cutover.
+                    // This is the cutover gap.
                     throw new IllegalArgumentException("Specified date does not exist");
                 }
+                instant = gregorianInstant; // Use Gregorian for dates after cutover
+            }
         }
         return instant;
     }
\ No newline at end of file
