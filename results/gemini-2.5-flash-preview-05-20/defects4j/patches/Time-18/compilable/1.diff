diff --git a/tmp/d9c549bb-3355-4d67-8695-aa86ab512c29_buggy.java b/tmp/c218988e-f3ae-4520-bfaa-993253b73ad7_fixed.java
index be2af16..5aeacbc 100644
--- a/tmp/d9c549bb-3355-4d67-8695-aa86ab512c29_buggy.java
+++ b/tmp/c218988e-f3ae-4520-bfaa-993253b73ad7_fixed.java
@@ -1,29 +1,41 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        // Determine which chronology to use based on the approximate instant of the date.
+        // Use Julian chronology to calculate an estimate of the instant for the start of the day.
+        // Julian chronology progresses linearly, making it a reliable reference for this check.
+        long approxInstant;
+        try {
+            approxInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0, 0, 0, 0);
+        } catch (IllegalArgumentException e) {
+            // If even Julian chronology cannot parse the date (e.g., month/day out of range),
+            // it's an invalid date regardless of the calendar system. Re-throw the original exception.
+            throw e;
+        }
+
+        if (approxInstant < iCutoverMillis) {
+            // The approximate instant falls before the cutover.
+            // This means the date is in the Julian era. Use Julian chronology for the full instant.
+            return iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+        } else {
+            // The approximate instant falls on or after the cutover.
+            // This means the date is in the Gregorian era. Use Gregorian chronology for the full instant.
+            // If the date corresponds to one of the "skipped" days in the cutover (e.g., 1582-10-05 to 1582-10-14
+            // if interpreted as Gregorian dates), then iGregorianChronology will correctly throw an
+            // IllegalArgumentException (or subclass like IllegalFieldValueException).
+            return iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
-            }
         }
-        return instant;
     }
\ No newline at end of file
