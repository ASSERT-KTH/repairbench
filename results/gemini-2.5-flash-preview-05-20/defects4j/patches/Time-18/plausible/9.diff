diff --git a/tmp/90fed13f-a35e-4226-b378-b11a1e857927_buggy.java b/tmp/a36289a8-0163-4829-aecc-3d8a19cc41cd_fixed.java
index be2af16..7282117 100644
--- a/tmp/90fed13f-a35e-4226-b378-b11a1e857927_buggy.java
+++ b/tmp/a36289a8-0163-4829-aecc-3d8a19cc41cd_fixed.java
@@ -1,29 +1,59 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        try {
+            // First, try to form the date using the Gregorian rules.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // If the Gregorian calculation succeeded and the resulting instant is before the cutover,
+            // then according to GJChronology rules, this date should be interpreted using Julian rules.
+            // We proceed to try Julian.
             if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+                long julianInstant = iJulianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                
+                // If the Julian interpretation places the date on or after the cutover,
+                // it implies this date (interpreted as Julian) falls into the non-existent gap.
+                if (julianInstant >= iCutoverMillis) {
                     throw new IllegalArgumentException("Specified date does not exist");
                 }
+                // Otherwise, the Julian interpretation is valid and before the cutover.
+                return julianInstant;
             }
+            // If the Gregorian calculation succeeded and the resulting instant is on or after the cutover,
+            // then it's a valid Gregorian date.
             return instant;
+
+        } catch (IllegalArgumentException e) {
+            // The Gregorian calculation failed.
+            // This can happen if the date is invalid in Gregorian but valid in Julian
+            // (e.g., Feb 29, 1500), or if the date is in the cutover gap (e.g., Oct 5-14, 1582).
+            // In either case, we must now attempt to interpret the date using Julian rules.
+
+            long julianInstant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+            // If the Julian interpretation produces an instant that is on or after the cutover,
+            // and the Gregorian interpretation failed, then this date is in the cutover gap.
+            if (julianInstant >= iCutoverMillis) {
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            // Otherwise, the Julian interpretation is valid and before the cutover.
+            // This handles cases like Feb 29, 1500, which are valid Julian dates before the cutover.
+            return julianInstant;
+        }
     }
\ No newline at end of file
