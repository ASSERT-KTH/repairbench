diff --git a/tmp/3fd6057e-3056-41e8-b61a-3f839ff8b673_buggy.java b/tmp/f859732d-f0b2-4b83-8ea7-e8ff974cdc83_fixed.java
index be2af16..d2b1510 100644
--- a/tmp/3fd6057e-3056-41e8-b61a-3f839ff8b673_buggy.java
+++ b/tmp/f859732d-f0b2-4b83-8ea7-e8ff974cdc83_fixed.java
@@ -1,29 +1,91 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
+        // Compute cutover date fields from iCutoverMillis using Gregorian rules.
+        // These are typically pre-computed in GJChronology's constructor but computed here
+        // for method-local scope as they are not explicitly class fields in the provided snippet.
+        long cutoverMillis = iCutoverMillis;
+        int cutoverYear = iGregorianChronology.year().get(cutoverMillis);
+        int cutoverMonth = iGregorianChronology.monthOfYear().get(cutoverMillis);
+        int cutoverDayOfMonth = iGregorianChronology.dayOfMonth().get(cutoverMillis); // This is 15 for standard cutover (1582-10-15)
+
+        // The Julian cutover day (October 4th) is a fixed value relative to the Gregorian.
+        // In Joda-Time's GJChronology, this constant is hardcoded or derived from context.
+        final int JULIAN_LAST_DAY_OF_MONTH_CUTOVER = 4; // This is 4 for Oct 4, 1582
+
         long instant;
+        try {
+            // Assume date is Gregorian first.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+
+            // If Gregorian was successful, check its relation to the cutover.
+            if (instant < cutoverMillis) {
+                // Gregorian instant is before cutover. This implies Julian rules should apply.
+                // Re-parse using Julian and check for the cutover gap.
+                long julianInstant = iJulianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+                // If the Julian instant falls on or after the Gregorian cutover point,
+                // it means this date (interpreted as Julian) is in the missing 10-day gap.
+                if (julianInstant >= cutoverMillis) {
+                    throw new IllegalArgumentException("Specified date does not exist");
+                }
+                return julianInstant; // Valid Julian date before cutover
+            } else {
+                // Gregorian instant is on or after cutover. This is the expected chronology.
+                // However, still need to check for the cutover gap.
+                // The gap is between Julian 1582-10-04 and Gregorian 1582-10-15.
+                // So, Gregorian dates from 1582-10-05 to 1582-10-14 should not exist.
+                if (year == cutoverYear && monthOfYear == cutoverMonth &&
+                    dayOfMonth > JULIAN_LAST_DAY_OF_MONTH_CUTOVER && dayOfMonth < cutoverDayOfMonth)
+                {
+                    throw new IllegalArgumentException("Specified date does not exist");
+                }
+                return instant; // Valid Gregorian date on or after cutover
+            }
+        } catch (IllegalArgumentException e) {
+            // Gregorian date parsing failed (e.g., 1500-02-29).
+            // This *might* be a valid Julian date before the cutover, or a date in the gap,
+            // or a genuinely invalid date.
+
+            // If the date (year/month/day) is clearly after the cutover point,
+            // the Gregorian failure means it's a genuine invalid date.
+            if (year > cutoverYear ||
+                (year == cutoverYear && (monthOfYear > cutoverMonth ||
+                                         (monthOfYear == cutoverMonth && dayOfMonth >= cutoverDayOfMonth))))
+            {
+                throw e; // Rethrow original exception if outside cutover period
+            }
+
+            // Otherwise, it's before or at the cutover year, so it could be a Julian date
+            // or a date in the cutover gap (e.g., 1582-10-05 to 1582-10-14, which are valid in pure Julian).
+            try {
                 instant = iJulianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            } catch (IllegalArgumentException e2) {
+                // If Julian also failed, then it's genuinely invalid in both relevant chronologies.
+                throw e; // Rethrow original Gregorian exception.
+            }
+
+            // Julian parse succeeded. Now check if it's in the cutover gap.
+            // If the Julian instant falls on or after the Gregorian cutover point,
+            // it means this date (interpreted as Julian) is in the missing 10-day gap.
+            if (instant >= cutoverMillis) {
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            return instant; // Valid Julian date before cutover
         }
-        return instant;
     }
\ No newline at end of file
