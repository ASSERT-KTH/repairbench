diff --git a/tmp/5b74fd7a-22ab-4573-8697-2d32c3254d85_buggy.java b/tmp/161f654b-3554-41af-9a50-476ab9cf39fa_fixed.java
index be2af16..5ce9e0c 100644
--- a/tmp/5b74fd7a-22ab-4573-8697-2d32c3254d85_buggy.java
+++ b/tmp/161f654b-3554-41af-9a50-476ab9cf39fa_fixed.java
@@ -1,29 +1,56 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
         // Assume date is Gregorian.
         long instant;
+        try {
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        } catch (IllegalArgumentException e) {
+            // If Gregorian fails, it implies the date might be valid in Julian
+            // and possibly before the cutover (e.g., 1500-02-29).
+            // Try the Julian chronology as a fallback.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                // If the Julian date is valid but falls on or after the cutover,
+                // it implies the date is in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            // Date is valid in Julian and before cutover, return Julian instant.
+            return instant;
+        }
+
+        // If we reach here, the Gregorian instant was successfully computed.
+        // Now check if this Gregorian instant is before the cutover.
+        if (instant < iCutoverMillis) {
+            // If the Gregorian date is valid and falls before the cutover,
+            // it means it's a historical date. We should prefer the Julian interpretation.
+            long julianInstant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            
+            if (julianInstant >= iCutoverMillis) {
+                // This is a crucial check: if the Gregorian date is valid
+                // and before the cutover, but the *same* calendar date in Julian
+                // falls on or after the cutover (i.e., in the cutover gap),
+                // then this date does not exist in the combined chronology.
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            // Use the Julian instant for dates effectively before the cutover.
+            return julianInstant;
         }
+        // If the Gregorian instant is on or after the cutover, use it.
         return instant;
     }
