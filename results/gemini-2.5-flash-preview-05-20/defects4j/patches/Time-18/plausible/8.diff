diff --git a/tmp/0c5d0aa9-af4f-41f7-bdc5-666da043b7e0_buggy.java b/tmp/6a3afd53-47ff-408a-b7cd-27500ce51026_fixed.java
index be2af16..20b49e3 100644
--- a/tmp/0c5d0aa9-af4f-41f7-bdc5-666da043b7e0_buggy.java
+++ b/tmp/6a3afd53-47ff-408a-b7cd-27500ce51026_fixed.java
@@ -1,29 +1,58 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        try {
+            // Attempt to get the date time using Gregorian rules first.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalArgumentException e) {
+            // If the Gregorian calculation fails, it might be a Julian date
+            // that is invalid in the Gregorian calendar (e.g., 1500-02-29).
+            // Attempt to get the date time using Julian rules.
+            long julianInstant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            
+            // If the Julian instant falls on or after the cutover point,
+            // it means the date is invalid in Gregorian (which should apply after cutover)
+            // but valid in Julian (which should apply before cutover), and the Julian
+            // interpretation pushes it past the cutover. This implies the date
+            // truly doesn't exist in GJChronology.
+            if (julianInstant >= iCutoverMillis) {
+                throw e; // Re-throw the original Gregorian exception as it's more indicative of the ultimate problem.
+            }
+            // Otherwise, it's a valid Julian date before the cutover.
+            return julianInstant;
+        }
+
+        // If the Gregorian calculation succeeded:
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+            // If the Gregorian instant is before the cutover, it means it's in the period
+            // where Julian rules are often preferred. We need to check for the cutover gap.
+            long julianInstant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            
+            // If the Gregorian date falls before the cutover, but the Julian date
+            // falls on or after the cutover, it means this date is in the illegal cutover gap.
+            if (julianInstant >= iCutoverMillis) {
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            // If Julian instant is also before the cutover, the Julian one is considered correct for this period.
+            return julianInstant;
         }
+
+        // If the Gregorian instant is at or after the cutover, the Gregorian interpretation is correct.
         return instant;
     }
\ No newline at end of file
