diff --git a/tmp/53c782ec-d56c-40f7-ae57-65f5c41ccd7b_buggy.java b/tmp/25183f01-8fa3-4012-93e3-370975302107_fixed.java
index d9d2789..75a5e40 100644
--- a/tmp/53c782ec-d56c-40f7-ae57-65f5c41ccd7b_buggy.java
+++ b/tmp/25183f01-8fa3-4012-93e3-370975302107_fixed.java
@@ -1,73 +1,36 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
-        }
-
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
-                break;
-            }
-        }
-
-        // Trim all trailing NULs and spaces.
+--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
++++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+@@ -52,16 +52,24 @@
          // The ustar and POSIX tar specs require a trailing NUL or
          // space but some implementations use the extra digit for big
          // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+-        byte trailer = buffer[end - 1];
+-        if (trailer == 0 || trailer == ' '){
+-            end--;
+-        } else {
+-            throw new IllegalArgumentException(
+-                    exceptionMessage(buffer, offset, length, end-1, trailer));
++        // If the last character is NOT a NUL or space, then this number should
++        // not be trimmed.
++        // This is a common implementation detail that conflicts with the
++        // POSIX standard for fields that are not NUL/space terminated.
++        
++        // Corrected trimming logic:
++        int currentEnd = end;
++        while (start < currentEnd) { // Iterate from right to left
++            final byte currentByte = buffer[currentEnd - 1];
++            if (currentByte == 0 || currentByte == ' ') {
++                currentEnd--;
++            } else {
++                break; // Found a non-terminator, stop trimming
++            }
          }
+-        trailer = buffer[end - 1];
+-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
+-            end--;
+-            trailer = buffer[end - 1];
+-        }
++        end = currentEnd; // Update the 'end' for the parsing loop.
  
          for ( ;start < end; start++) {
              final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
-        }
-
-        return result;
-    }
