diff --git a/tmp/a011ac28-dc78-4074-aa74-7639b215a363_buggy.java b/tmp/8a533b1e-9bb5-4cbe-8cea-7ad4e74e4b44_fixed.java
index d9d2789..972ed5c 100644
--- a/tmp/a011ac28-dc78-4074-aa74-7639b215a363_buggy.java
+++ b/tmp/8a533b1e-9bb5-4cbe-8cea-7ad4e74e4b44_fixed.java
@@ -1,73 +1,82 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Special case for leading NUL, per Javadoc.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+        // The previous logic strictly required a trailing NUL/space and threw
+        // an exception if not found. This caused issues with numbers
+        // that use the last byte for an extra digit, as seen in the
+        // test case "777777777777".
+        // Instead, we should find the last non-NUL/non-space character
+        // and ensure it's a digit in the parsing loop.
+        while (start < end) { // Ensure start doesn't cross or meet end due to trimming
+            final byte currentByte = buffer[end - 1];
+            if (currentByte == 0 || currentByte == ' ') {
                 end--;
             } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                // Found a non-NUL/non-space character.
+                // This character is either the last digit or an invalid character.
+                // It will be validated and parsed in the subsequent for loop.
+                break;
             }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
         }
 
+        // Now, parse the octal digits
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
+                // This will catch cases where a character (including the last one after trimming)
+                // is not a valid octal digit.
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
