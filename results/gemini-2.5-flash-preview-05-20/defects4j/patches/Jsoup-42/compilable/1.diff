diff --git a/tmp/f9aa981b-a5ba-478e-b165-e47e3aa17607_buggy.java b/tmp/6cdc79dd-c064-445d-b348-e23dfe89ab8f_fixed.java
index 442a001..3f997e1 100644
--- a/tmp/f9aa981b-a5ba-478e-b165-e47e3aa17607_buggy.java
+++ b/tmp/6cdc79dd-c064-445d-b348-e23dfe89ab8f_fixed.java
@@ -1,39 +1,56 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
+            // Check if the element is form submittable (e.g., not disabled)
+            if (!el.tag().isFormSubmittable()) continue; 
+            
             String name = el.attr("name");
+            // Skip elements without a name attribute, as they are not submitted
             if (name.length() == 0) continue;
+            
             String type = el.attr("type");
 
             if ("select".equals(el.tagName())) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
+                // If no option is explicitly selected in a single-select,
+                // the value of the first option in the list is used.
+                // For multi-selects, if nothing is selected, nothing is submitted.
+                // The current logic adds the first option if nothing is selected,
+                // which aligns with single-select behavior.
                 if (!set) {
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
             } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
-                // only add checkbox or radio if they have the checked attribute
+                // Only add checkbox or radio if they have the 'checked' attribute
                 if (el.hasAttr("checked")) {
-                    final String val = el.val();
+                    final String val;
+                    // Fix: For checkboxes, if no 'value' attribute is present, the default value is 'on'.
+                    // For radio buttons, the 'value' attribute is typically always present and must be used.
+                    if ("checkbox".equalsIgnoreCase(type) && !el.hasAttr("value")) {
+                        val = "on";
+                    } else {
+                        val = el.val();
+                    }
                     data.add(HttpConnection.KeyVal.create(name, val));
                 }
             } else {
+                // For other input types (text, hidden, password, etc.) and textarea
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
         return data;
     }
\ No newline at end of file
