diff --git a/tmp/a3f661a8-0c66-44df-9649-6f9630c1caf0_buggy.java b/tmp/a3ea90c8-4ebe-459f-b2f1-8e10d256c1a3_fixed.java
index 42d4174..477b4e1 100644
--- a/tmp/a3f661a8-0c66-44df-9649-6f9630c1caf0_buggy.java
+++ b/tmp/a3ea90c8-4ebe-459f-b2f1-8e10d256c1a3_fixed.java
@@ -1,7 +1,34 @@
   /**
    * Returns the remainder of the line.
    */
   private String getRemainingJSDocLine() {
+    // The `stream.getRemainingJSDocLine()` method (from JSDocStream)
+    // reads characters up to, but not including, the end-of-line (EOL)
+    // character(s) or the '*/' end-of-comment marker.
+    //
+    // For correct position tracking and to advance the stream to the beginning
+    // of the next logical line (if any), any EOL characters must be consumed
+    // by this wrapper function. If EOL is not consumed, subsequent parsing
+    // operations that rely on the stream's current position can record
+    // incorrect position information, leading to errors like `IllegalStateException`.
+    //
+    // The '*/' end-of-comment marker should NOT be consumed here, as that
+    // signifies the end of the entire JSDoc block and is handled by
+    // higher-level parsing logic.
+
     String result = stream.getRemainingJSDocLine();
+
+    if (stream.isEOL()) {
+      // Consume the first character of the EOL sequence ('\n' or '\r').
+      stream.next();
+      // If it's a Windows-style EOL sequence ('\r\n'), consume the second character ('\n').
+      if (stream.peek() == '\n') {
+        stream.next();
+      }
+    }
+    // If `stream.isEOL()` is false, it means the `stream.getRemainingJSDocLine()`
+    // stopped because it encountered '*/' (end of comment). In that case,
+    // we leave '*/' unconsumed for the higher-level parser to handle.
+
     return result;
   }
\ No newline at end of file
