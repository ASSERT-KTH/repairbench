diff --git a/tmp/95a8f68f-f9df-409c-bd85-7419293b395e_buggy.java b/tmp/fba9fc26-0697-47ed-ba2c-82462b7069a4_fixed.java
index 1a63a66..468d600 100644
--- a/tmp/95a8f68f-f9df-409c-bd85-7419293b395e_buggy.java
+++ b/tmp/fba9fc26-0697-47ed-ba2c-82462b7069a4_fixed.java
@@ -1,21 +1,27 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
+        // The original implementation of _narrow in SimpleType (pre-2.8) passed null
+        // for superClass and superInterfaces. The change in 2.8 to pass 'this' as
+        // superClass (and 'this._superInterfaces') was made for issue #1125 to
+        // retain more type context.
+        // However, as seen in testIssue1125WithDefault, if 'this' is an interface
+        // and 'subclass' is a concrete class, setting the interface as the _superClass
+        // of the concrete class's JavaType is incorrect. A concrete class's _superClass
+        // should be its actual superclass (e.g., Object.class), not an interface it implements.
+        // This incorrect hierarchy leads to property introspection issues, where fields
+        // of the concrete class might not be recognized.
+        // For SimpleType (which handles non-generic types), it is generally safer
+        // to let the actual superclass and superinterfaces of the 'subclass'
+        // be determined by later introspection (e.g., by Class.getSuperclass()
+        // and Class.getInterfaces()), rather than inheriting potentially incorrect
+        // hierarchy information from the 'this' type.
+        // Revert to the prior behavior for SimpleType's _narrow to ensure correct
+        // property discovery for concrete subclasses.
+        return new SimpleType(subclass, _bindings, null, null,
                 _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
     }
\ No newline at end of file
