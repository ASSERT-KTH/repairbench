diff --git a/tmp/f6d6aad1-f90a-4a78-b857-3750e7e8ac98_buggy.java b/tmp/e56764bf-9bb7-4e94-af2e-50ee2a1887d4_fixed.java
index 1a63a66..3e134e7 100644
--- a/tmp/f6d6aad1-f90a-4a78-b857-3750e7e8ac98_buggy.java
+++ b/tmp/e56764bf-9bb7-4e94-af2e-50ee2a1887d4_fixed.java
@@ -1,21 +1,30 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
+        // Original comment from source:
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
         // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
+
+        // Fix for 2.8 (databind#1387):
+        // If the subclass is `Void.class`, maintain the existing behavior of propagating
+        // type information as it might be used as a placeholder.
+        // For other subclasses, create a "fresh" SimpleType.
+        // This means the `_bindings`, `superClass`, and `_superInterfaces` should be
+        // derived from the `subclass` itself by the `TypeFactory` later, not propagated
+        // from `this` (the original type), which could lead to an incorrect type hierarchy.
+        // `_valueHandler`, `_typeHandler`, `_asStatic` are properties of the type instance
+        // that should be carried over.
+        if (subclass == Void.class) {
             return new SimpleType(subclass, _bindings, this, _superInterfaces,
                     _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+        }
+        // For all other subclasses, create a new SimpleType that correctly represents
+        // the subclass as a "raw" type, letting TypeFactory resolve its hierarchy.
+        return new SimpleType(subclass, TypeBindings.emptyBindings(), null, null,
+                _valueHandler, _typeHandler, _asStatic);
     }
