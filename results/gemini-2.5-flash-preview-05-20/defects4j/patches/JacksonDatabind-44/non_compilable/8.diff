diff --git a/tmp/48584137-b4f2-41ad-b3c8-f4b3ebdb313a_buggy.java b/tmp/242c69ed-2389-4dba-bd97-158499ad970c_fixed.java
index 1a63a66..ac09b64 100644
--- a/tmp/48584137-b4f2-41ad-b3c8-f4b3ebdb313a_buggy.java
+++ b/tmp/242c69ed-2389-4dba-bd97-158499ad970c_fixed.java
@@ -1,21 +1,16 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+        // 20-Feb-2016, tatu: Should NOT pass handlers here as type is different
+        //   (and if new type is NOT sub-type, handlers are wrong anyway)
+        //   Instead let's re-resolve handlers from TypeFactory
+        // And importantly, also need to pass original type (this) as 'super-type'
+        //   (for generic parameter resolution etc)
+        // Also note that the only case where `_narrow()` is valid is when
+        // `subclass` IS a sub-type of `_class`.
+        return _factory.constructSpecializedType(this, subclass);
     }
\ No newline at end of file
