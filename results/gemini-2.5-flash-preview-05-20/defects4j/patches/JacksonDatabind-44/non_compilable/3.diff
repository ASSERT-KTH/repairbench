diff --git a/tmp/adfb6a30-aa08-403d-8d84-e6f494ecb07e_buggy.java b/tmp/9537bd80-885b-4176-8a5e-9324d2a37c6a_fixed.java
index 1a63a66..c7b3f98 100644
--- a/tmp/adfb6a30-aa08-403d-8d84-e6f494ecb07e_buggy.java
+++ b/tmp/9537bd80-885b-4176-8a5e-9324d2a37c6a_fixed.java
@@ -1,21 +1,16 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
-        if (_class == subclass) {
-            return this;
-        }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+        // This method was originally buggy in how it created the new SimpleType
+        // for a subclass, leading to incorrect type hierarchy information (e.g.,
+        // passing 'this' as the superclass instead of deriving it from 'subclass').
+        // This could cause issues like unrecognized properties during deserialization.
+
+        // In Jackson 2.8, the recommended approach for type specialization was to
+        // delegate to TypeFactory.constructSpecializedType().
+        // The 'JavaType' base class (specifically 'TypeBase') has a '_tf' field
+        // which provides access to the TypeFactory.
+        // The fix is to use this mechanism to properly construct the specialized type.
+        return _tf.constructSpecializedType(this, subclass);
     }
\ No newline at end of file
