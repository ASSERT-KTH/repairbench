diff --git a/tmp/a41e5f0c-c393-4104-a1c7-19973c33adb5_buggy.java b/tmp/972a1b52-1765-4212-806b-8c3d98e09040_fixed.java
index eed2194..26da104 100644
--- a/tmp/a41e5f0c-c393-4104-a1c7-19973c33adb5_buggy.java
+++ b/tmp/972a1b52-1765-4212-806b-8c3d98e09040_fixed.java
@@ -1,55 +1,161 @@
+import org.joda.time.DateTimeConstants;
+import org.joda.time.tz.ZoneInfoCompiler; // Assuming FieldUtils is in this package or a common utility.
+import org.joda.time.field.FieldUtils;
+
+// This import is needed for FieldUtils.safeAdd and safeMultiply.
+// In a real project, this would be part of the existing imports.
+// For this standalone function, assuming they are accessible.
+
+
+public class DateTimeZone {
+    // Assuming DateTimeZone.UTC and forOffsetMillis are defined elsewhere in the class
+    // and are accessible. This is a common pattern in Joda Time classes.
+
+    // Placeholder for actual DateTimeZone methods/constants if not provided.
+    // In a real Joda-Time context, these would exist.
+    public static final DateTimeZone UTC = new DateTimeZone("UTC") {
+        @Override
+        public String getNameKey(long instant) {
+            return "UTC";
+        }
+        @Override
+        public long getOffsetFromLocal(long instantLocal) {
+            return 0;
+        }
+        @Override
+        public int getOffset(long instant) {
+            return 0;
+        }
+        @Override
+        public boolean isFixed() {
+            return true;
+        }
+        @Override
+        public long previousTransition(long instant) {
+            return instant;
+        }
+        @Override
+        public long nextTransition(long instant) {
+            return instant;
+        }
+    }; // Simplified placeholder
+    public static DateTimeZone forOffsetMillis(int offset) {
+        // This is a placeholder for the actual implementation in Joda Time.
+        // It would typically cache common offsets and create FixedDateTimeZone for others.
+        if (offset == 0) return UTC;
+        String id = ZoneInfoCompiler.formatMillis(offset);
+        return new DateTimeZone(id) {
+            @Override
+            public String getNameKey(long instant) {
+                return id;
+            }
+            @Override
+            public long getOffsetFromLocal(long instantLocal) {
+                return offset;
+            }
+            @Override
+            public int getOffset(long instant) {
+                return offset;
+            }
+            @Override
+            public boolean isFixed() {
+                return true;
+            }
+            @Override
+            public long previousTransition(long instant) {
+                return instant;
+            }
+            @Override
+            public long nextTransition(long instant) {
+                return instant;
+            }
+        };
+    }
+
+    protected DateTimeZone(String id) {
+        // Simplified constructor for placeholder
+    }
+
+    // Methods for placeholder DateTimeZone
+    public String getID() { return null; }
+    public String getNameKey(long instant) { return null; }
+    public long getOffsetFromLocal(long instantLocal) { return 0; }
+    public int getOffset(long instant) { return 0; }
+    public boolean isFixed() { return true; }
+    public long previousTransition(long instant) { return instant; }
+    public long nextTransition(long instant) { return instant; }
+    // End of placeholder for DateTimeZone internal class/methods
+
+
     /**
      * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
      * The hours value must be in the range -23 to +23.
      * The minutes value must be in the range -59 to +59.
      * The following combinations of sign for the hour and minute are possible:
      * <pre>
      *  Hour    Minute    Example    Result
      *
      *  +ve     +ve       (2, 15)    +02:15
      *  +ve     zero      (2, 0)     +02:00
      *  +ve     -ve       (2, -15)   IllegalArgumentException
      *
      *  zero    +ve       (0, 15)    +00:15
      *  zero    zero      (0, 0)     +00:00
      *  zero    -ve       (0, -15)   -00:15
      *
      *  -ve     +ve       (-2, 15)   -02:15
      *  -ve     zero      (-2, 0)    -02:00
      *  -ve     -ve       (-2, -15)  -02:15
      * </pre>
      * Note that in versions before 2.3, the minutes had to be zero or positive.
      *
      * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+        // FIX 1: Allow minutesOffset from -59 to 59 as per Javadoc
+        if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
-        int offset = 0;
+        // FIX 3: Add explicit check for positive hours with negative minutes
+        if (hoursOffset > 0 && minutesOffset < 0) {
+            throw new IllegalArgumentException("Minutes negative in positive hours: " + minutesOffset);
+        }
+
+        int totalMinutes;
+        // FIX 2: Correct calculation logic based on sign of hoursOffset
+        // For negative hours, minutes contribute to the magnitude of the negative offset.
+        // E.g., -2 hours and +15 minutes becomes -2h 15m.
+        // E.g., -2 hours and -15 minutes becomes -2h 15m.
+        // This means the minutes component's absolute value is added to the absolute hours in minutes,
+        // and the result takes the negative sign.
+        if (hoursOffset < 0) {
+            totalMinutes = FieldUtils.safeAdd(hoursOffset * 60, -Math.abs(minutesOffset));
+        } else { // hoursOffset is zero or positive
+            totalMinutes = FieldUtils.safeAdd(hoursOffset * 60, minutesOffset);
+        }
+
+        int offsetMillis;
         try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
-            } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
-            }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            offsetMillis = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
+            // This catch handles potential overflow during multiplication, though with the
+            // given input constraints, `totalMinutes` should be within `int` limits
+            // and thus multiplication by `MILLIS_PER_MINUTE` should also be safe within `int`.
             throw new IllegalArgumentException("Offset is too large");
         }
-        return forOffsetMillis(offset);
+        return forOffsetMillis(offsetMillis);
+    }
 }
\ No newline at end of file
