diff --git a/tmp/fb849d14-3f5f-4928-ae2e-063d25ec9d18_buggy.java b/tmp/faac3599-db2d-45f7-9cf4-da45b89f7cba_fixed.java
index eed2194..69b063e 100644
--- a/tmp/fb849d14-3f5f-4928-ae2e-063d25ec9d18_buggy.java
+++ b/tmp/faac3599-db2d-45f7-9cf4-da45b89f7cba_fixed.java
@@ -1,55 +1,79 @@
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeZone;
+import org.joda.time.field.FieldUtils;
+
+public class DateTimeZone { // Assuming this is part of the DateTimeZone class
+
     /**
      * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
      * The hours value must be in the range -23 to +23.
      * The minutes value must be in the range -59 to +59.
      * The following combinations of sign for the hour and minute are possible:
      * <pre>
      *  Hour    Minute    Example    Result
      *
      *  +ve     +ve       (2, 15)    +02:15
      *  +ve     zero      (2, 0)     +02:00
      *  +ve     -ve       (2, -15)   IllegalArgumentException
      *
      *  zero    +ve       (0, 15)    +00:15
      *  zero    zero      (0, 0)     +00:00
      *  zero    -ve       (0, -15)   -00:15
      *
      *  -ve     +ve       (-2, 15)   -02:15
      *  -ve     zero      (-2, 0)    -02:00
      *  -ve     -ve       (-2, -15)  -02:15
      * </pre>
      * Note that in versions before 2.3, the minutes had to be zero or positive.
      *
      * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+        // MODIFIED: Updated minutesOffset validation based on Javadoc requirements
+        // General range for minutesOffset is -59 to +59
+        if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
-        int offset = 0;
+        // Specific rule: minutes must be non-negative if hours are positive
+        // This handles the (2, -15) case, which should throw an IllegalArgumentException
+        if (hoursOffset > 0 && minutesOffset < 0) {
+            throw new IllegalArgumentException("Minutes must be positive if hours are positive: " + minutesOffset);
+        }
+
+        int totalMinutesOffset;
         try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
-            } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
+            // MODIFIED: Corrected offset calculation based on Javadoc examples for sign combinations
+            if (hoursOffset < 0) {
+                // For negative hours, the minutes component's magnitude is added to the hours' magnitude,
+                // and the total offset is negative.
+                // Examples: (-2, 15) -> -2*60 - 15 = -135
+                //           (-2, -15) -> -2*60 - |-15| = -135
+                totalMinutesOffset = FieldUtils.safeAdd(hoursOffset * 60, -Math.abs(minutesOffset));
+            } else { // hoursOffset >= 0
+                // For positive or zero hours, minutes are added directly.
+                // Examples: (2, 15) -> 2*60 + 15 = 135
+                //           (0, -15) -> 0*60 + (-15) = -15
+                totalMinutesOffset = FieldUtils.safeAdd(hoursOffset * 60, minutesOffset);
             }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            
+            int offsetMillis = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            return forOffsetMillis(offsetMillis);
         } catch (ArithmeticException ex) {
+            // Catch potential overflow during offset calculation if result exceeds int range
             throw new IllegalArgumentException("Offset is too large");
         }
-        return forOffsetMillis(offset);
+    }
 }
\ No newline at end of file
