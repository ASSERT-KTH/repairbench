diff --git a/tmp/3fadbbf8-760d-4667-9aab-8a1cc7a42ca1_buggy.java b/tmp/00fd93f8-8992-40bf-93ac-7883da49cae5_fixed.java
index eed2194..8ca8f4a 100644
--- a/tmp/3fadbbf8-760d-4667-9aab-8a1cc7a42ca1_buggy.java
+++ b/tmp/00fd93f8-8992-40bf-93ac-7883da49cae5_fixed.java
@@ -1,55 +1,69 @@
     /**
      * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
      * The hours value must be in the range -23 to +23.
      * The minutes value must be in the range -59 to +59.
      * The following combinations of sign for the hour and minute are possible:
      * <pre>
      *  Hour    Minute    Example    Result
      * 
      *  +ve     +ve       (2, 15)    +02:15
      *  +ve     zero      (2, 0)     +02:00
      *  +ve     -ve       (2, -15)   IllegalArgumentException
      * 
      *  zero    +ve       (0, 15)    +00:15
      *  zero    zero      (0, 0)     +00:00
      *  zero    -ve       (0, -15)   -00:15
      * 
      *  -ve     +ve       (-2, 15)   -02:15
      *  -ve     zero      (-2, 0)    -02:00
      *  -ve     -ve       (-2, -15)  -02:15
      * </pre>
      * Note that in versions before 2.3, the minutes had to be zero or positive.
      * 
      * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+        // Javadoc specifies minutesOffset must be in range -59 to +59.
+        // The original code only allowed positive minutes, which contradicts the Javadoc and examples.
+        if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
-        int offset = 0;
-        try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
+        // Specific rule from Javadoc: "the minutes are negative when the hours are positive" is an error.
+        if (hoursOffset > 0 && minutesOffset < 0) {
+            throw new IllegalArgumentException("Minutes can not be negative when hours are positive: " + minutesOffset);
+        }
+
+        int totalMinutesOffset;
+        // The calculation for total minutes needs to account for the signs
+        // as per the Javadoc examples and rules.
+        // If hours are negative, the minutes' absolute value should be added to the negative hour value.
+        // For example, -2 hours and -15 minutes implies -(2*60 + 15) = -135 minutes.
+        // This is equivalent to -2*60 - abs(-15).
+        if (hoursOffset < 0) {
+            totalMinutesOffset = hoursOffset * 60 - Math.abs(minutesOffset);
         } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
+            // For positive or zero hours, simple addition works (0:-15 -> -15) (2:15 -> 135).
+            totalMinutesOffset = hoursOffset * 60 + minutesOffset;
         }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+
+        int offset = 0; // This will hold the total offset in milliseconds
+        try {
+            offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
\ No newline at end of file
