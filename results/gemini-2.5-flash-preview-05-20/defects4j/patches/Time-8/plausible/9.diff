diff --git a/tmp/b9d8a421-8fe3-4cdc-8300-ef6c8f8d5886_buggy.java b/tmp/bd52c542-ba56-43b4-ad25-40c38e945245_fixed.java
index eed2194..3260607 100644
--- a/tmp/b9d8a421-8fe3-4cdc-8300-ef6c8f8d5886_buggy.java
+++ b/tmp/bd52c542-ba56-43b4-ad25-40c38e945245_fixed.java
@@ -1,55 +1,81 @@
     /**
      * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
      * The hours value must be in the range -23 to +23.
      * The minutes value must be in the range -59 to +59.
      * The following combinations of sign for the hour and minute are possible:
      * <pre>
      *  Hour    Minute    Example    Result
      *
      *  +ve     +ve       (2, 15)    +02:15
      *  +ve     zero      (2, 0)     +02:00
      *  +ve     -ve       (2, -15)   IllegalArgumentException
      *
      *  zero    +ve       (0, 15)    +00:15
      *  zero    zero      (0, 0)     +00:00
      *  zero    -ve       (0, -15)   -00:15
      *
      *  -ve     +ve       (-2, 15)   -02:15
      *  -ve     zero      (-2, 0)    -02:00
      *  -ve     -ve       (-2, -15)  -02:15
      * </pre>
      * Note that in versions before 2.3, the minutes had to be zero or positive.
      *
      * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+        // Corrected minutes range check: minutes can be -59 to +59 as per Javadoc
+        if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
+
+        // Check for the illegal combination as per Javadoc: positive hours with negative minutes
+        // Example: (2, -15) should throw IllegalArgumentException
+        if (hoursOffset > 0 && minutesOffset < 0) {
+            throw new IllegalArgumentException("Minutes must be positive or zero if hours are positive: " + minutesOffset);
+        }
+
+        int totalMinutesOffset;
+        int absHours = Math.abs(hoursOffset);
+        int absMinutes = Math.abs(minutesOffset);
+
+        // Calculate the magnitude of the offset in minutes by summing absolute values
+        int calculatedMinutes = absHours * 60 + absMinutes;
+
+        // Determine the overall sign of the offset based on the rules:
+        // If hoursOffset is negative, the entire offset is negative.
+        // If hoursOffset is positive, the entire offset is positive.
+        // If hoursOffset is zero, the sign is determined by minutesOffset.
+        if (hoursOffset < 0) {
+            totalMinutesOffset = -calculatedMinutes;
+        } else if (hoursOffset > 0) {
+            totalMinutesOffset = calculatedMinutes;
+        } else { // hoursOffset is 0
+            if (minutesOffset < 0) {
+                totalMinutesOffset = -calculatedMinutes; // For (0, -15), totalMinutes = -15
+            } else {
+                totalMinutesOffset = calculatedMinutes; // For (0, 15), totalMinutes = 15
+            }
+        }
+
         int offset = 0;
         try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
-            } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
-            }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            // Multiply total minutes by milliseconds per minute
+            offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
\ No newline at end of file
