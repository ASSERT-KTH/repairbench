diff --git a/tmp/c9c28d27-1d32-48f9-8ffc-0318b33a8ced_buggy.java b/tmp/a5be6c3a-7d4f-43ec-9637-40481dc0437d_fixed.java
index eed2194..a2a3d40 100644
--- a/tmp/c9c28d27-1d32-48f9-8ffc-0318b33a8ced_buggy.java
+++ b/tmp/a5be6c3a-7d4f-43ec-9637-40481dc0437d_fixed.java
@@ -1,55 +1,67 @@
     /**
      * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
      * The hours value must be in the range -23 to +23.
      * The minutes value must be in the range -59 to +59.
      * The following combinations of sign for the hour and minute are possible:
      * <pre>
      *  Hour    Minute    Example    Result
      * 
      *  +ve     +ve       (2, 15)    +02:15
      *  +ve     zero      (2, 0)     +02:00
      *  +ve     -ve       (2, -15)   IllegalArgumentException
      * 
      *  zero    +ve       (0, 15)    +00:15
      *  zero    zero      (0, 0)     +00:00
      *  zero    -ve       (0, -15)   -00:15
      * 
      *  -ve     +ve       (-2, 15)   -02:15
      *  -ve     zero      (-2, 0)    -02:00
      *  -ve     -ve       (-2, -15)  -02:15
      * </pre>
      * Note that in versions before 2.3, the minutes had to be zero or positive.
      * 
      * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+        // Corrected minutes range check: minutes can be negative if hours are zero or negative.
+        if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
+        // Specific condition: minutes cannot be negative when hours are positive.
+        if (hoursOffset > 0 && minutesOffset < 0) {
+            throw new IllegalArgumentException("Minutes negative in a positive hour offset: " + minutesOffset);
+        }
+
         int offset = 0;
         try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
+            int totalMinutes;
+            // The total offset in minutes is derived from the absolute sum of hours and minutes,
+            // with the sign determined by the sign of the hours, or by the minutes if hours are zero.
+            if (hoursOffset < 0 || (hoursOffset == 0 && minutesOffset < 0)) {
+                // If hours are negative, or hours are zero and minutes are negative,
+                // the total offset is negative.
+                totalMinutes = -(Math.abs(hoursOffset) * 60 + Math.abs(minutesOffset));
             } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
+                // Otherwise (hours positive, or hours zero and minutes positive),
+                // the total offset is positive.
+                totalMinutes = Math.abs(hoursOffset) * 60 + Math.abs(minutesOffset);
             }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
\ No newline at end of file
