diff --git a/tmp/94f7acc5-645a-41fc-a2dd-c63865cd47de_buggy.java b/tmp/856897f2-7a70-40f7-a32d-5fe5a47705ce_fixed.java
index eed2194..37406f9 100644
--- a/tmp/94f7acc5-645a-41fc-a2dd-c63865cd47de_buggy.java
+++ b/tmp/856897f2-7a70-40f7-a32d-5fe5a47705ce_fixed.java
@@ -1,55 +1,76 @@
     /**
      * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
      * The hours value must be in the range -23 to +23.
      * The minutes value must be in the range -59 to +59.
      * The following combinations of sign for the hour and minute are possible:
      * <pre>
      *  Hour    Minute    Example    Result
      * 
      *  +ve     +ve       (2, 15)    +02:15
      *  +ve     zero      (2, 0)     +02:00
      *  +ve     -ve       (2, -15)   IllegalArgumentException
      * 
      *  zero    +ve       (0, 15)    +00:15
      *  zero    zero      (0, 0)     +00:00
      *  zero    -ve       (0, -15)   -00:15
      * 
      *  -ve     +ve       (-2, 15)   -02:15
      *  -ve     zero      (-2, 0)    -02:00
      *  -ve     -ve       (-2, -15)  -02:15
      * </pre>
      * Note that in versions before 2.3, the minutes had to be zero or positive.
      * 
      * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
+
+        // The original code had a simplified minute range check that disallowed negative minutes
+        // regardless of the hoursOffset, which contradicted the Javadoc and test cases.
+        // This updated check correctly applies the rule: minutes must be 0-59 if hours are positive,
+        // but can be -59 to 59 if hours are zero or negative.
+        if (hoursOffset > 0) {
+            // If hours are positive, minutes must be non-negative (0 to 59)
             if (minutesOffset < 0 || minutesOffset > 59) {
                 throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
             }
+        } else {
+            // If hours are zero or negative, minutes can be negative (-59 to 59)
+            if (minutesOffset < -59 || minutesOffset > 59) {
+                throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
+            }
+        }
+
+        int totalMinutesOffset;
+        if (hoursOffset >= 0) {
+            // For positive or zero hours, the total minutes is a simple sum.
+            totalMinutesOffset = hoursOffset * 60 + minutesOffset;
+        } else { // hoursOffset < 0
+            // For negative hours, the Javadoc indicates that the magnitudes of hours and minutes
+            // are summed, and the total offset is negative.
+            // Example: (-2, 15) -> -02:15 (i.e., -135 minutes)
+            // Example: (-2, -15) -> -02:15 (i.e., -135 minutes)
+            totalMinutesOffset = -(Math.abs(hoursOffset) * 60 + Math.abs(minutesOffset));
+        }
+
         int offset = 0;
         try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
-            } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
-            }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            // Multiply the total offset in minutes by milliseconds per minute
+            offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
\ No newline at end of file
