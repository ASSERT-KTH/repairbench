diff --git a/tmp/1dbbfcd7-5f2e-49b0-8dc1-079737acc8fd_buggy.java b/tmp/885941fd-f2d3-4c61-8efd-1e909ea667cb_fixed.java
index eed2194..817b113 100644
--- a/tmp/1dbbfcd7-5f2e-49b0-8dc1-079737acc8fd_buggy.java
+++ b/tmp/885941fd-f2d3-4c61-8efd-1e909ea667cb_fixed.java
@@ -1,55 +1,76 @@
     /**
      * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
      * The hours value must be in the range -23 to +23.
      * The minutes value must be in the range -59 to +59.
      * The following combinations of sign for the hour and minute are possible:
      * <pre>
      *  Hour    Minute    Example    Result
      * 
      *  +ve     +ve       (2, 15)    +02:15
      *  +ve     zero      (2, 0)     +02:00
      *  +ve     -ve       (2, -15)   IllegalArgumentException
      * 
      *  zero    +ve       (0, 15)    +00:15
      *  zero    zero      (0, 0)     +00:00
      *  zero    -ve       (0, -15)   -00:15
      * 
      *  -ve     +ve       (-2, 15)   -02:15
      *  -ve     zero      (-2, 0)    -02:00
      *  -ve     -ve       (-2, -15)  -02:15
      * </pre>
      * Note that in versions before 2.3, the minutes had to be zero or positive.
      * 
      * @param hoursOffset  the offset in hours from UTC, from -23 to +23
      * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+        // Javadoc specifies minutesOffset can be from -59 to +59.
+        // The original code `minutesOffset < 0 || minutesOffset > 59` was too restrictive.
+        if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
+        // Specific rule from Javadoc: minutes cannot be negative when hours are positive.
+        // Example: (2, -15) should throw IllegalArgumentException.
+        if (hoursOffset > 0 && minutesOffset < 0) {
+            throw new IllegalArgumentException("Minutes negative in a positive hour offset: " + minutesOffset);
+        }
+
+        int totalMinutes;
+        // The calculation logic needs to correctly combine hours and minutes based on signs,
+        // specifically for negative hours as per Javadoc examples.
+        if (hoursOffset < 0) {
+            // For negative hour offsets, the overall offset is negative, and the minutes
+            // component adds to the magnitude of the hours component.
+            // Example: (-2, 15) -> -(2*60 + 15) = -135 minutes (i.e., -02:15)
+            // Example: (-2, -15) -> -(2*60 + 15) = -135 minutes (i.e., -02:15)
+            totalMinutes = -(Math.abs(hoursOffset) * 60 + Math.abs(minutesOffset));
+        } else { // hoursOffset >= 0
+            // For positive or zero hour offsets, the calculation is straightforward.
+            // Example: (2, 15) -> 2*60 + 15 = 135 minutes (i.e., +02:15)
+            // Example: (0, -15) -> 0*60 + (-15) = -15 minutes (i.e., -00:15)
+            totalMinutes = hoursOffset * 60 + minutesOffset;
+        }
+
         int offset = 0;
         try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
-            } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
-            }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
+            // This catches overflow if the offset in minutes is too large to be
+            // represented as milliseconds in an int. Given the input constraints
+            // (-23:59 to +23:59), this won't typically occur as 1439 * 60000 fits int.
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
\ No newline at end of file
