diff --git a/tmp/1c741209-d7db-4e8c-ac1b-788642399acc_buggy.java b/tmp/b04d444f-c0a1-47bd-ba79-f58b7bc6577b_fixed.java
index 61ffdbf..f37b9f3 100644
--- a/tmp/1c741209-d7db-4e8c-ac1b-788642399acc_buggy.java
+++ b/tmp/b04d444f-c0a1-47bd-ba79-f58b7bc6577b_fixed.java
@@ -1,44 +1,55 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
+    // As per the comment above, this optimization (removing unused function arguments)
+    // should only be applied when global variables are also being removed.
+    // In Simple Optimization mode, or when removeGlobal is explicitly false,
+    // we should preserve unused function parameters.
+    if (!removeGlobal) {
+      return;
+    }
+
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
+      // The parameters of object literal setters can not be removed,
+      // as they are part of the property signature.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
+          // Arguments are only removed from the end of the list.
+          // If a referenced argument is encountered, stop.
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
