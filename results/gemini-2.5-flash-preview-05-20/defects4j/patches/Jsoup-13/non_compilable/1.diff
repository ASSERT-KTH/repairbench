diff --git a/tmp/df8490af-41c0-4e77-9db7-3b768edc2948_buggy.java b/tmp/9dd50ab4-575a-470a-b513-e604c8bc155a_fixed.java
index a7cb64f..ff0e825 100644
--- a/tmp/df8490af-41c0-4e77-9db7-3b768edc2948_buggy.java
+++ b/tmp/9dd50ab4-575a-470a-b513-e604c8bc155a_fixed.java
@@ -1,10 +1,30 @@
     /**
      * Test if this element has an attribute.
      * @param attributeKey The attribute key to check.
      * @return true if the attribute exists, false if not.
      */
     public boolean hasAttr(String attributeKey) {
         Validate.notNull(attributeKey);
 
+        if (attributeKey.startsWith(ABS_KEY_PREFIX)) {
+            // For "abs:" attributes, check if the base attribute exists and if its value can be resolved to a non-empty absolute URL.
+            String baseKey = attributeKey.substring(ABS_KEY_PREFIX.length());
+
+            // First, check if the base attribute exists in the attributes map.
+            // If it doesn't, or if its value is blank, it cannot resolve to a valid absolute URL.
+            if (!attributes.hasKey(baseKey)) {
+                return false;
+            }
+            String relUrl = attributes.get(baseKey);
+            if (StringUtil.isBlank(relUrl)) {
+                return false;
+            }
+
+            // Now, try to resolve the URL. If the resolved absolute URL is not blank, then the "abs:" attribute effectively exists.
+            String absUrl = StringUtil.resolve(baseUri(), relUrl);
+            return !StringUtil.isBlank(absUrl);
+        }
+
+        // For regular attributes, simply check if the key exists in the attributes map.
         return attributes.hasKey(attributeKey);
     }
\ No newline at end of file
