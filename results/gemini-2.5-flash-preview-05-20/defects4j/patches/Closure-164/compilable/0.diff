diff --git a/tmp/c8ec9bdd-fef8-481e-a0b9-8af0a106ef64_buggy.java b/tmp/423dfd09-2eb4-4f2c-9b5f-5311c12af561_fixed.java
index 9976e43..dbc4a8c 100644
--- a/tmp/c8ec9bdd-fef8-481e-a0b9-8af0a106ef64_buggy.java
+++ b/tmp/423dfd09-2eb4-4f2c-9b5f-5311c12af561_fixed.java
@@ -1,76 +1,96 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
     //
     // If this.paramType[i] is required,
     // then that.paramType[i] is required.
     //
     // In theory, the "required-ness" should work in the other direction as
     // well. In other words, if we have
     //
     // function f(number, number) {}
     // function g(number) {}
     //
     // Then f *should* not be a subtype of g, and g *should* not be
     // a subtype of f. But in practice, we do not implement it this way.
     // We want to support the use case where you can pass g where f is
     // expected, and pretend that g ignores the second argument.
     // That way, you can have a single "no-op" function, and you don't have
     // to create a new no-op function for every possible type signature.
     //
     // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
     while (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
       if (thisParamType != null) {
+        // Param type check: that.paramType[i] <: this.paramType[i] (contravariant)
+        // If thatParamType is null, it typically means it represents an implicit 'any' or 'unknown' type.
+        // In contravariant position, 'any' is a supertype of everything, so the check would pass.
+        // However, if thatParamType is truly null due to a missing node or an invalid state,
+        // it might indicate an issue. For robustness, we treat null as not a subtype.
         if (thatParamType == null ||
             !thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
 
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
       // don't advance if we have variable arguments
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
 
       // both var_args indicates the end
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
         thatParam = null;
       }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // After the loop, one or both parameter lists might have remaining elements.
+
+    // Case 1: 'this' (subtype) has more parameters than 'that' (supertype).
+    // This covers the "f !< g" case: function f(number, number) !< function g(number).
+    // Also, the test case `G.prototype.foo(x,y) !< F.prototype.foo()`.
+    // If 'this' has remaining parameters that are required (not var_args),
+    // then 'that' cannot be a supertype because it does not cover these required arguments.
+    while (thisParam != null) {
+      if (!thisParam.isVarArgs()) {
+        // If this parameter is a required argument (not optional, not var_args),
+        // and 'that' has no corresponding parameter, then 'this' is not a subtype.
+        return false;
+      }
+      thisParam = thisParam.getNext();
+    }
+
+    // Case 2: 'that' (supertype) has more parameters than 'this' (subtype).
+    // This covers the "g < f" case: function g(number) < function f(number, number).
+    // According to the comments, this scenario is allowed, meaning 'this' can be a subtype
+    // even if 'that' has more required parameters. The previous loop handles the type
+    // checks for matching parameters. Any remaining parameters in 'that' are ignored
+    // as per the described relaxed arity check policy.
+    // Therefore, no further checks are needed for `thatParam` here.
 
     return true;
   }
\ No newline at end of file
