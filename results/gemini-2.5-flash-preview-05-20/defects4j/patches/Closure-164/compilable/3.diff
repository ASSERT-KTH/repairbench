diff --git a/tmp/1a3b250c-cdb2-40df-8919-20a84f228cca_buggy.java b/tmp/63175350-d69a-4a0b-9293-793f14428dc4_fixed.java
index 9976e43..b5cb861 100644
--- a/tmp/1a3b250c-cdb2-40df-8919-20a84f228cca_buggy.java
+++ b/tmp/63175350-d69a-4a0b-9293-793f14428dc4_fixed.java
@@ -1,76 +1,134 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
 
+    // Calculate min/max arguments for 'this'
+    int thisMinArgs = 0;
+    int thisMaxArgs = 0; // -1 for variable arguments
+    boolean thisHasVarArgs = false;
+    Node currentThisParam = parameters.getFirstChild();
+    while (currentThisParam != null) {
+      if (!currentThisParam.isOptionalArg() && !currentThisParam.isVarArgs()) {
+        thisMinArgs++;
+      }
+      if (currentThisParam.isVarArgs()) {
+        thisHasVarArgs = true;
+        // Var args is the last parameter in the list
+        // No need to count further for fixed max args
+        break;
+      }
+      thisMaxArgs++; // Increment for each parameter encountered.
+      currentThisParam = currentThisParam.getNext();
+    }
+    if (thisHasVarArgs) {
+      thisMaxArgs = -1; // Indicate infinite maximum arguments
+    } else {
+      // If no var args, max args is just the total count of parameters
+      thisMaxArgs = parameters.getChildCount();
+    }
+
+    // Calculate min/max arguments for 'that'
+    int thatMinArgs = 0;
+    int thatMaxArgs = 0; // -1 for variable arguments
+    boolean thatHasVarArgs = false;
+    Node currentThatParam = that.parameters.getFirstChild();
+    while (currentThatParam != null) {
+      if (!currentThatParam.isOptionalArg() && !currentThatParam.isVarArgs()) {
+        thatMinArgs++;
+      }
+      if (currentThatParam.isVarArgs()) {
+        thatHasVarArgs = true;
+        // Var args is the last parameter in the list
+        // No need to count further for fixed max args
+        break;
+      }
+      thatMaxArgs++; // Increment for each parameter encountered.
+      currentThatParam = currentThatParam.getNext();
+    }
+    if (thatHasVarArgs) {
+      thatMaxArgs = -1; // Indicate infinite maximum arguments
+    } else {
+      thatMaxArgs = that.parameters.getChildCount();
+    }
+
+    // Arity checks for subtyping:
+    // A function 'this' is a subtype of 'that' if:
+    // 1. 'this' requires at least as many parameters as 'that' requires.
+    //    (i.e., that.minArgs <= this.minArgs)
+    //    If 'that' requires 2 arguments, 'this' must also require at least 2.
+    //    Otherwise, 'this' cannot be substituted for 'that' because 'this' would
+    //    fail if 'that' was called with all its required arguments.
+    if (thatMinArgs > thisMinArgs) {
+        return false;
+    }
+
+    // 2. 'this' must be able to accept at most as many parameters as 'that' accepts.
+    //    (i.e., this.maxArgs <= that.maxArgs)
+    //    If 'that' has a fixed number of maximum arguments, 'this' cannot accept
+    //    more arguments than 'that' allows (unless 'that' has variable arguments).
+    //    This rule correctly handles cases like testMethodInference7, where
+    //    `function(x,y)` (this) is NOT a subtype of `function()` (that).
+    if (thatMaxArgs != -1 && (thisMaxArgs == -1 || thisMaxArgs > thatMaxArgs)) {
+        return false;
+    }
+
+
     // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
+
+    // Iterate as long as both functions have corresponding parameters.
+    // The arity checks above handle cases where one function has
+    // more (or fewer) total/required parameters than the other.
     while (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
+
+      // Contravariant parameter type check: thatParamType <: thisParamType
+      // If thisParamType is null (representing an unknown type '?'), it's
+      // considered to match anything, so 'thatParamType.isSubtype(thisParamType)'
+      // would implicitly pass for any thatParamType.
       if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+        if (thatParamType == null || // if 'that' has no type for this param (e.g. unknown)
+            !thatParamType.isSubtype(thisParamType)) { // or thatParamType is not a subtype of thisParamType
           return false;
         }
       }
 
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+      // Advance parameters, unless they are var_args.
+      // If a parameter node is marked as var_args, it indicates that it
+      // consumes all subsequent arguments, so we keep the node reference
+      // to its type for potential further checks against remaining arguments
+      // from the other function's list, but we don't advance past it.
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
 
-      // both var_args indicates the end
+      // If both parameters are var_args, we've matched all positional arguments.
+      // The type check for the var_args themselves would have already occurred
+      // in the current iteration. We can terminate the loop here.
       if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+        break; // All remaining arguments are covered by var_args in both
       }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
-
     return true;
   }
\ No newline at end of file
