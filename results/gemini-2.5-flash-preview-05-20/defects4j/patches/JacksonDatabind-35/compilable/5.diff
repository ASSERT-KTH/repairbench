diff --git a/tmp/398fe0b5-5ef9-4d30-9db5-ff3a7b1c5252_buggy.java b/tmp/f3460011-a66d-4c45-8cdc-c4f2ffe9064e_fixed.java
index 7d8d756..73f8d52 100644
--- a/tmp/398fe0b5-5ef9-4d30-9db5-ff3a7b1c5252_buggy.java
+++ b/tmp/f3460011-a66d-4c45-8cdc-c4f2ffe9064e_fixed.java
@@ -1,48 +1,70 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
+        
+        JsonToken t = p.getCurrentToken();
+        final String typeId;
+        boolean consumedOuterObjectStart; // Flag to indicate if outer START_OBJECT was consumed by THIS method
+
+        // Standard As.WRAPPER_OBJECT expects START_OBJECT.
+        // However, in some cases (e.g., interaction with ObjectId), the START_OBJECT
+        // might already have been consumed, and the parser is at FIELD_NAME (type ID).
+        if (t == JsonToken.START_OBJECT) {
+            consumedOuterObjectStart = true;
+            // For WRAPPER_OBJECT, after START_OBJECT, we expect a FIELD_NAME which is the type id.
             if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
-        final String typeId = p.getText();
+            typeId = p.getText();
+        } else if (t == JsonToken.FIELD_NAME) {
+            // This path indicates the outer START_OBJECT was consumed before this method call.
+            // This method should then not consume the corresponding END_OBJECT.
+            consumedOuterObjectStart = false;
+            typeId = p.getText();
+        } else {
+            // For As.WRAPPER_OBJECT, we must always start with START_OBJECT or FIELD_NAME (if START_OBJECT was consumed).
+            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+        }
+        
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+        
+        // Advance past the type id field name (if we just read it) to the actual object content.
+        // This token should be the START_OBJECT of the actual value.
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
+        
         // And then need the closing END_OBJECT
+        // This check is only valid if this method consumed the initial START_OBJECT of the wrapper.
+        if (consumedOuterObjectStart) {
             if (p.nextToken() != JsonToken.END_OBJECT) {
                 throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                         "expected closing END_OBJECT after type information and deserialized value");
             }
+        }
         return value;
     }
