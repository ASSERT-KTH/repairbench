diff --git a/tmp/339f97e3-8ae0-4a54-b4a1-87a53e88a672_buggy.java b/tmp/ed81fec7-a7ea-4000-a07d-490be12bc031_fixed.java
index 7d8d756..adc0402 100644
--- a/tmp/339f97e3-8ae0-4a54-b4a1-87a53e88a672_buggy.java
+++ b/tmp/ed81fec7-a7ea-4000-a07d-490be12bc031_fixed.java
@@ -1,48 +1,71 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
+
+        // --- FIX START ---
+        // The current token can be either START_OBJECT (if this deserializer is
+        // responsible for consuming the outer wrapper) or FIELD_NAME (if a parent
+        // deserializer has already consumed the START_OBJECT of the wrapper).
+        JsonToken t = p.getCurrentToken();
+        String typeId;
+        boolean consumedOuterStartObject;
+
+        if (t == JsonToken.START_OBJECT) {
+            consumedOuterStartObject = true;
             // should always get field name, but just in case...
             if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
-        final String typeId = p.getText();
+            typeId = p.getText();
+            p.nextToken(); // move past type id value to START_OBJECT of actual value
+        } else if (t == JsonToken.FIELD_NAME) { // Case where parent consumed START_OBJECT
+            consumedOuterStartObject = false;
+            typeId = p.getText();
+            p.nextToken(); // move past type id value to START_OBJECT of actual value
+        } else {
+            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+        }
+        // --- FIX END ---
+        
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+        // Original `p.nextToken();` here is removed as parser is already correctly positioned
+        // after the type id and before the actual value's START_OBJECT.
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+            p.nextToken(); // Must move past the recreated START_OBJECT for the actual deserializer
         }
         
         Object value = deser.deserialize(p, ctxt);
+
         // And then need the closing END_OBJECT
+        // This check should only happen if this method was responsible for consuming
+        // the initial START_OBJECT of the wrapper.
+        if (consumedOuterStartObject) {
             if (p.nextToken() != JsonToken.END_OBJECT) {
                 throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                         "expected closing END_OBJECT after type information and deserialized value");
             }
+        }
         return value;
     }
