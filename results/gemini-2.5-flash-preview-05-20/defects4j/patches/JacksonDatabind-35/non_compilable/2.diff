diff --git a/tmp/6fa5bec1-b4c5-4646-9667-15e1b6bdc273_buggy.java b/tmp/af6ac220-078b-42cb-90c2-043dd812ecef_fixed.java
index 7d8d756..a2342fa 100644
--- a/tmp/6fa5bec1-b4c5-4646-9667-15e1b6bdc273_buggy.java
+++ b/tmp/af6ac220-078b-42cb-90c2-043dd812ecef_fixed.java
@@ -1,48 +1,78 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
         // first, sanity checks
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
             // should always get field name, but just in case...
             if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+        
+        // Save the original parser state before advancing it,
+        // as 'p' might be reassigned to a new parser in the _typeIdVisible block,
+        // but the final END_OBJECT check refers to the original wrapper structure.
+        JsonParser originalParser = p; 
+
+        p.nextToken(); // p is now at START_OBJECT of the actual value
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
-            tb.writeFieldName(_typePropertyName);
-            tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+            // 'p' is currently at the START_OBJECT of the actual value (e.g., {"id":"computer-1", ...}).
+            // We need to inject the type ID field (e.g., "type":"DesktopComputer") into this object.
+            
+            // Create a TokenBuffer to build the modified object's JSON stream.
+            TokenBuffer outputBuffer = new TokenBuffer(p, ctxt);
+            
+            // Write the START_OBJECT for the combined object
+            outputBuffer.writeStartObject(); 
+            // Write the injected type property
+            outputBuffer.writeFieldName(_typePropertyName);
+            outputBuffer.writeString(typeId);
+            
+            // Now, copy the contents of the original object (excluding its START_OBJECT and END_OBJECT).
+            // This consumes tokens from the original parser 'p'.
+            p.nextToken(); // Move past the original START_OBJECT token.
+            while (p.getCurrentToken() != null && p.getCurrentToken() != JsonToken.END_OBJECT) {
+                outputBuffer.copyCurrentEvent(p); // Copy current event (field name or value)
+                p.nextToken(); // Move to the next token
+            }
+            // At this point, 'p' (original parser) is at the END_OBJECT of the actual value.
+
+            // Write the END_OBJECT for the combined object.
+            outputBuffer.writeEndObject(); 
+            
+            // Replace 'p' with a new parser that reads from the TokenBuffer.
+            // This new 'p' will be positioned at START_OBJECT.
+            p = outputBuffer.asParser();
+            // Do NOT call p.nextToken() here; 'deser.deserialize' expects 'p' to be at START_OBJECT.
         }
         
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
+
+        // And then need the closing END_OBJECT of the original wrapper.
+        // The originalParser now points to the END_OBJECT of the wrapped value,
+        // and needs to advance one more time to reach the END_OBJECT of the outer wrapper.
+        if (originalParser.nextToken() != JsonToken.END_OBJECT) {
+            throw ctxt.wrongTokenException(originalParser, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
