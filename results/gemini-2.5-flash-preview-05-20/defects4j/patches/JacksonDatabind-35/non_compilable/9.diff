diff --git a/tmp/b10ed63e-ba1e-4034-a878-6b1a2480035a_buggy.java b/tmp/2e0ce120-0d49-4df0-a8c6-2a937d396ca2_fixed.java
index 7d8d756..9baacb1 100644
--- a/tmp/b10ed63e-ba1e-4034-a878-6b1a2480035a_buggy.java
+++ b/tmp/2e0ce120-0d49-4df0-a8c6-2a937d396ca2_fixed.java
@@ -1,48 +1,62 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+
+        String typeId;
+        JsonToken t = p.getCurrentToken();
+
+        // [databind#1492]: May sometimes start with FIELD_NAME, not START_OBJECT
+        if (t == JsonToken.START_OBJECT) { // Normal expected case for WRAPPER_OBJECT
+            // After START_OBJECT, next token must be FIELD_NAME (type ID)
+            t = p.nextToken();
+            if (t != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
-        final String typeId = p.getText();
+            typeId = p.getText();
+        } else if (t == JsonToken.FIELD_NAME) { // Case for [databind#1492]: type id already seen
+            typeId = p.getText(); // Current token is already FIELD_NAME, get text directly
+        } else if (t == JsonToken.START_ARRAY) { // 29-May-2020, tatu: [databind#2726] if array, defer
+            return _deserializeIfNatural(p, ctxt, t); // This method should handle advancing the parser
+        } else { // Some other token, e.g., scalar for "natural" types
+            return _deserializeIfNatural(p, ctxt, t);
+        }
+        
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+        
+        // After getting the typeId from FIELD_NAME, advance the parser to the actual content (START_OBJECT or scalar)
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
+        // This is only relevant if the wrapped value is an object itself AND _typeIdVisible is true.
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
+            TokenBuffer tb = new TokenBuffer(null, false); // Use null, false as codec/stream capabilities not strictly needed for this buffer
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+            p.nextToken(); // Advance to first token inside the merged object
         }
         
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+        // And then need the closing END_OBJECT of the wrapper
+        // The deserializer consumed the content and left the parser at the END_OBJECT of the content.
+        // We need to consume that END_OBJECT and ensure the *next* token is the wrapper's END_OBJECT.
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
