diff --git a/tmp/4292c353-a14d-48bd-9bdd-557bece6cf39_buggy.java b/tmp/1ee06263-6338-455f-a155-3672e66d177e_fixed.java
index 7d8d756..e9c6cb7 100644
--- a/tmp/4292c353-a14d-48bd-9bdd-557bece6cf39_buggy.java
+++ b/tmp/1ee06263-6338-455f-a155-3672e66d177e_fixed.java
@@ -1,48 +1,73 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
+
         // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+        // For WRAPPER_OBJECT, expected structure is: { "typeId" : { actual_value } }
+        // The initial token should be START_OBJECT.
+        // However, in some cases (e.g., with ObjectId handling),
+        // the parser might already be at FIELD_NAME, meaning the START_OBJECT has been consumed.
+        final String typeId;
+        JsonToken t = p.getCurrentToken();
+
+        if (t == JsonToken.START_OBJECT) {
+            // Normal case: expect START_OBJECT, then FIELD_NAME (typeId)
+            t = p.nextToken(); // Advance from START_OBJECT to FIELD_NAME
+            if (t != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
-        final String typeId = p.getText();
+            typeId = p.getText();
+            p.nextToken(); // Advance from FIELD_NAME to START_OBJECT of actual value
+        } else if (t == JsonToken.FIELD_NAME) {
+            // This case occurs when the START_OBJECT of the wrapper has already been consumed
+            // (e.g., by some ObjectId logic which peeks or consumes it).
+            // The current token is already the FIELD_NAME acting as type ID.
+            typeId = p.getText();
+            p.nextToken(); // Advance from FIELD_NAME to START_OBJECT of actual value
+        } else {
+            // Any other token type is unexpected for a WRAPPER_OBJECT
+            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+        }
+
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
 
         // Minor complication: we may need to merge type id in?
+        // At this point, p.getCurrentToken() should be JsonToken.START_OBJECT (the actual value's start)
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
+            // This nextToken() consumes the START_OBJECT from the TokenBuffer,
+            // positioning the parser at the inserted FIELD_NAME (_typePropertyName).
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
+
         // And then need the closing END_OBJECT
+        // After deser.deserialize(p, ctxt), the parser should be positioned after the deserialized value,
+        // specifically at the END_OBJECT token that closes the outer wrapper.
+        // The p.nextToken() call here consumes that END_OBJECT and checks if it's correct.
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
