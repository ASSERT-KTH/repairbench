diff --git a/tmp/5424e2e8-d071-4390-b826-4b0dd3bdf890_buggy.java b/tmp/ea25e86a-c52d-4d8d-ae48-1bf41b8b29eb_fixed.java
index 7d8d756..4627c2a 100644
--- a/tmp/5424e2e8-d071-4390-b826-4b0dd3bdf890_buggy.java
+++ b/tmp/ea25e86a-c52d-4d8d-ae48-1bf41b8b29eb_fixed.java
@@ -1,48 +1,70 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
+        
+        JsonToken t = p.getCurrentToken();
+        String typeId;
+
+        // As.WRAPPER_OBJECT type information expects:
+        // START_OBJECT (wrapper) -> FIELD_NAME (typeId) -> START_OBJECT (actual value)
+        // However, with ObjectId or complex interactions, the initial START_OBJECT
+        // might have been consumed, leaving the parser at FIELD_NAME.
+        if (t == JsonToken.START_OBJECT) {
+            // Normal path: parser at START_OBJECT of the wrapper object
             // should always get field name, but just in case...
             if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
-        final String typeId = p.getText();
+            typeId = p.getText();
+            p.nextToken(); // Move to START_OBJECT of the actual value content
+        } else if (t == JsonToken.FIELD_NAME) {
+            // Special case: parser is already at FIELD_NAME, meaning the START_OBJECT
+            // of the wrapper was already consumed (e.g., by ObjectId reader).
+            // This FIELD_NAME is assumed to be the type id.
+            typeId = p.getText();
+            p.nextToken(); // Move to START_OBJECT of the actual value content
+            // Sanity check: after typeId FIELD_NAME, we must see START_OBJECT for the value
+            if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+                throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                        "expected JSON Object to contain As.WRAPPER_OBJECT value for class "+baseTypeName());
+            }
+        } else {
+            // Neither START_OBJECT nor FIELD_NAME, which is unexpected for WRAPPER_OBJECT
+            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+        }
+
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
