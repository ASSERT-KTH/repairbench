diff --git a/tmp/3d662a59-e278-4d8a-88db-77f8badaaeac_buggy.java b/tmp/88be21b7-6082-4aa2-a98f-80a206c24983_fixed.java
index 7d8d756..a965479 100644
--- a/tmp/3d662a59-e278-4d8a-88db-77f8badaaeac_buggy.java
+++ b/tmp/88be21b7-6082-4aa2-a98f-80a206c24983_fixed.java
@@ -1,48 +1,58 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+        // first, sanity checks for WRAPPER_OBJECT style.
+        // Expected structure is {"typeId": { ... value ... }}.
+        // The parser should initially be at JsonToken.START_OBJECT (the wrapper).
+        // However, in some advanced cases (like with ObjectIdReader),
+        // the START_OBJECT token might have already been consumed, leaving
+        // the parser at JsonToken.FIELD_NAME (the type id itself).
+        JsonToken t = p.getCurrentToken();
+        if (t == JsonToken.START_OBJECT) {
+            // This is the common, expected scenario: consume START_OBJECT, then get FIELD_NAME
+            t = p.nextToken();
+        } else if (t != JsonToken.FIELD_NAME) {
+            // If not START_OBJECT and not FIELD_NAME, this is an invalid token.
+            // Throw an exception, indicating START_OBJECT was the primary expectation.
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-            }
+        // At this point, 't' is guaranteed to be JsonToken.FIELD_NAME,
+        // which represents the type id (e.g., "desktop", "laptop").
+        // If it wasn't FIELD_NAME, an exception would have been thrown above.
+
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+        p.nextToken(); // Advance past FIELD_NAME to START_OBJECT (or other value token) of the actual value
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
