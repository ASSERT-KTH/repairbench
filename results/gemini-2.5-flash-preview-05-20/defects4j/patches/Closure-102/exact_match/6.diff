diff --git a/tmp/63b71fa0-38bb-4b5f-bb8a-286544fe36cb_buggy.java b/tmp/ffeab889-324e-4c42-a124-6c678beb14ee_fixed.java
index f47d784..3c814de 100644
--- a/tmp/63b71fa0-38bb-4b5f-bb8a-286544fe36cb_buggy.java
+++ b/tmp/ffeab889-324e-4c42-a124-6c678beb14ee_fixed.java
@@ -1,12 +1,32 @@
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
+
+    // The original order was:
+    // 1. NodeTraversal.traverse (builds scopes)
+    // 2. MakeDeclaredNamesUnique (renames variables)
+    // 3. removeDuplicateDeclarations
+    // 4. PropogateConstantAnnotations
+
+    // Issue 115 suggests that 'arguments' is a special name that should not be renamed.
+    // If 'MakeDeclaredNamesUnique' renames 'arguments' (e.g., to 'arguments$0'),
+    // then 'removeDuplicateDeclarations' might not be able to correctly identify
+    // and process the special 'var arguments' declaration as intended by the test.
+    // The test expects 'var arguments = ...' to become 'arguments = ...'.
+    // To ensure 'removeDuplicateDeclarations' can act on the original 'arguments' name,
+    // it should be run *before* 'MakeDeclaredNamesUnique'.
+
+    // First, remove duplicate declarations, especially handling the 'var arguments'
+    // case before variables are potentially renamed.
+    removeDuplicateDeclarations(root);
+
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
-    removeDuplicateDeclarations(root);
+
+    // Propagate constant annotations after all renaming and declaration cleanup.
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
\ No newline at end of file
