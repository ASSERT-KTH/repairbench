diff --git a/tmp/3a533e81-7e04-4348-8a58-9172850115a7_buggy.java b/tmp/fad3c2d0-a68c-468b-bcf4-6132975cbf7a_fixed.java
index f47d784..72e84a6 100644
--- a/tmp/3a533e81-7e04-4348-8a58-9172850115a7_buggy.java
+++ b/tmp/fad3c2d0-a68c-468b-bcf4-6132975cbf7a_fixed.java
@@ -1,12 +1,51 @@
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
+
+    // Fix for Issue 115: Handle `var arguments` declarations.
+    // The `arguments` object is implicitly available in functions, so explicit `var arguments`
+    // is redundant and can cause issues with optimizations or renaming.
+    // It should be transformed into a plain assignment if it has an initial value,
+    // or removed if it's a bare declaration.
+    NodeTraversal.traverse(compiler, root, new NodeTraversal.AbstractPostOrderCallback() {
+      @Override
+      public void visit(NodeTraversal t, Node n, Node parent) {
+        if (n.isVar() && n.hasOneChild()) {
+          Node nameNode = n.getFirstChild();
+          if (nameNode.isName() && "arguments".equals(nameNode.getString())) {
+            Node varNode = n;
+            Node valueNode = nameNode.removeFirstChild(); // Get the assigned value, if any
+
+            if (valueNode != null) {
+              // Transform `var arguments = X;` into `arguments = X;`
+              Node nameForAssign = compiler.createNode(Token.NAME, "arguments");
+              nameForAssign.copyInformationFrom(nameNode); // Copy source info
+
+              Node assign = compiler.createNode(Token.ASSIGN, nameForAssign, valueNode);
+              assign.copyInformationFrom(varNode); // Copy source info from the original VAR node
+
+              Node exprResult = compiler.createNode(Token.EXPR_RESULT, assign);
+              exprResult.copyInformationFrom(varNode); // Copy source info from the original VAR node
+
+              varNode.replaceWith(exprResult);
+              t.reportCodeChange();
+            } else {
+              // Transform `var arguments;` by simply removing the VAR node,
+              // as 'arguments' is already implicitly declared.
+              varNode.detachFromParent();
+              t.reportCodeChange();
+            }
+          }
+        }
+      }
+    });
+
     removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
\ No newline at end of file
