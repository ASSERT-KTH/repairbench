diff --git a/tmp/92fc8074-d901-45ee-9496-0c87d4a7b42d_buggy.java b/tmp/18d7593b-7108-4738-8cb3-5f36986b6324_fixed.java
index f47d784..026fc78 100644
--- a/tmp/92fc8074-d901-45ee-9496-0c87d4a7b42d_buggy.java
+++ b/tmp/18d7593b-7108-4738-8cb3-5f36986b6324_fixed.java
@@ -1,12 +1,71 @@
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
+
+    // Fix for Issue 115: 'var arguments' declaration inside a function block
+    // should be transformed into an an assignment or removed if it has no initializer.
+    // This is necessary because 'arguments' is a special keyword, and its redeclaration
+    // as a local variable can lead to unexpected behavior and should be transformed
+    // by the compiler to refer to the implicit 'arguments' object.
+    NodeTraversal.traverse(compiler, root, new NodeTraversal.AbstractPostOrderCallback() {
+        @Override
+        public void visit(NodeTraversal t, Node n, Node parent) {
+            // We are looking for VAR nodes whose parent is a function block.
+            if (n.isVar() && parent != null && NodeUtil.isFunctionBlock(parent)) {
+                // Iterate through declared names in this VAR statement.
+                // A VAR node can declare multiple variables, e.g., 'var a, b = 1;'.
+                Node currentVarDecl = n.getFirstChild();
+                while (currentVarDecl != null) {
+                    Node nextVarDecl = currentVarDecl.getNext(); // Store next before potential detachment
+
+                    // Check if this is the 'arguments' variable declaration.
+                    // The 'arguments' variable itself is a NAME node.
+                    if (currentVarDecl.isName() && "arguments".equals(currentVarDecl.getString())) {
+                        Node initializer = currentVarDecl.getFirstChild(); // The value assigned to 'arguments'
+
+                        if (initializer != null) {
+                            // Case: 'var arguments = value;' -> 'arguments = value;'
+                            // Create an ASSIGN node: arguments = initializer
+                            Node assign = new Node(Token.ASSIGN,
+                                Node.newString(Token.NAME, "arguments").copyInformationFrom(currentVarDecl),
+                                initializer.detach()); // Detach initializer from original VAR_DECL_NAME
+
+                            // Create an EXPR_RESULT node to wrap the ASSIGN node.
+                            Node exprResult = new Node(Token.EXPR_RESULT, assign);
+                            exprResult.copyInformationFrom(n); // Copy source info from original VAR node
+
+                            // If 'var arguments' was the only declaration in its VAR node,
+                            // replace the entire VAR node. Otherwise, insert before the VAR node.
+                            if (n.hasOneChild()) { // 'var arguments = value;'
+                                parent.replaceChild(n, exprResult);
+                            } else { // 'var arguments = value;, otherVar;'
+                                parent.addChildBefore(exprResult, n);
+                                n.removeChild(currentVarDecl); // Remove 'arguments' from the VAR node
+                            }
+                            compiler.reportChangeToEnclosingScope(exprResult);
+                        } else {
+                            // Case: 'var arguments;' -> remove it, as it's redundant.
+                            // The implicit arguments object is always available.
+                            if (n.hasOneChild()) { // If it's just 'var arguments;'
+                                parent.removeChild(n);
+                            } else { // If it's 'var arguments, otherVar;'
+                                n.removeChild(currentVarDecl);
+                            }
+                            compiler.reportChangeToEnclosingScope(parent);
+                        }
+                    }
+                    currentVarDecl = nextVarDecl;
+                }
+            }
+        }
+    });
+
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
     removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
\ No newline at end of file
