diff --git a/tmp/5c9670ab-038c-4a39-ad19-955135bbe6a0_buggy.java b/tmp/d781eaf3-dc3b-4abe-a98b-3d07bf0ddf0d_fixed.java
index 466a88c..1cab3a1 100644
--- a/tmp/5c9670ab-038c-4a39-ad19-955135bbe6a0_buggy.java
+++ b/tmp/d781eaf3-dc3b-4abe-a98b-3d07bf0ddf0d_fixed.java
@@ -1,169 +1,194 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
-        double x = mid;
-        double v = x;
-        double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
+        double x = mid; // Current best point's abscissa for Brent's internal state
+        double v = x;   // Second best point's abscissa for Brent's internal state
+        double w = x;   // Third best point's abscissa for Brent's internal state
+        double d = 0;   // Distance for parabolic step
+        double e = 0;   // Previous distance for parabolic step
+
+        // Evaluate the objective function at the initial guess 'x' (mid).
+        // This is the original objective value of f(x).
+        final double fxOrig = computeObjectiveValue(x);
+        // fx will be transformed for internal use (minimization logic of Brent's).
+        double fx = fxOrig;
         if (!isMinim) {
-            fx = -fx;
+            fx = -fx; // Transform for internal minimization (negate for maximization goal)
         }
+        // Initialize other function values with the transformed fx
         double fv = fx;
         double fw = fx;
 
+        // Initialize the overall best point found so far.
+        // This MUST store the ORIGINAL objective value.
+        UnivariatePointValuePair optimum = new UnivariatePointValuePair(x, fxOrig);
+
+        // Variables for the convergence checker. They also store ORIGINAL objective values.
+        // 'current' starts as the initial optimum. 'previous' will be set in the first iteration.
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+        UnivariatePointValuePair current = optimum;
 
         int iter = 0;
         while (true) {
             final double m = 0.5 * (a + b);
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
             // Default stopping criterion.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
             if (!stop) {
                 double p = 0;
                 double q = 0;
                 double r = 0;
-                double u = 0;
+                double u = 0; // Candidate point for next evaluation
 
                 if (FastMath.abs(e) > tol1) { // Fit parabola.
                     r = (x - w) * (fx - fv);
                     q = (x - v) * (fx - fw);
                     p = (x - v) * q - (x - w) * r;
                     q = 2 * (q - r);
 
                     if (q > 0) {
                         p = -p;
                     } else {
                         q = -q;
                     }
 
                     r = e;
                     e = d;
 
                     if (p > q * (a - x) &&
                         p < q * (b - x) &&
                         FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                         // Parabolic interpolation step.
                         d = p / q;
                         u = x + d;
 
                         // f must not be evaluated too close to a or b.
                         if (u - a < tol2 || b - u < tol2) {
                             if (x <= m) {
                                 d = tol1;
                             } else {
                                 d = -tol1;
                             }
                         }
                     } else {
                         // Golden section step.
                         if (x < m) {
                             e = b - x;
                         } else {
                             e = a - x;
                         }
                         d = GOLDEN_SECTION * e;
                     }
                 } else {
                     // Golden section step.
                     if (x < m) {
                         e = b - x;
                     } else {
                         e = a - x;
                     }
                     d = GOLDEN_SECTION * e;
                 }
 
                 // Update by at least "tol1".
                 if (FastMath.abs(d) < tol1) {
                     if (d >= 0) {
                         u = x + tol1;
                     } else {
                         u = x - tol1;
                     }
                 } else {
                     u = x + d;
                 }
 
-                double fu = computeObjectiveValue(u);
+                // Evaluate the objective function at the new candidate point 'u'.
+                // This is the original objective value of f(u).
+                final double fuOrig = computeObjectiveValue(u);
+                // fu will be transformed for internal use.
+                double fu = fuOrig;
                 if (!isMinim) {
-                    fu = -fu;
+                    fu = -fu; // Transform for internal minimization
                 }
 
-                // User-defined convergence checker.
+                // Update 'previous' and 'current' for the user-defined convergence checker.
+                // These points store ORIGINAL objective values.
                 previous = current;
-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+                current = new UnivariatePointValuePair(u, fuOrig);
+
+                // Update the overall best point encountered so far.
+                // Comparison is based on the ORIGINAL objective values.
+                if (isMinim) {
+                    if (current.getValue() < optimum.getValue()) {
+                        optimum = current;
+                    }
+                } else { // Maximization
+                    if (current.getValue() > optimum.getValue()) {
+                        optimum = current;
+                    }
+                }
 
                 if (checker != null) {
                     if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
+                        // If convergence is met, return the overall best point found.
+                        return optimum;
                     }
                 }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
+                // Update a, b, v, w and x for Brent's algorithm's internal state.
+                // These variables (fx, fv, fw, fu) hold the TRANSFORMED function values.
+                if (fu <= fx) { // fu is better than fx (transformed values)
                     if (u < x) {
                         b = x;
                     } else {
                         a = x;
                     }
                     v = w;
                     fv = fw;
                     w = x;
                     fw = fx;
                     x = u;
                     fx = fu;
-                } else {
+                } else { // fu is NOT better than fx
                     if (u < x) {
                         a = u;
                     } else {
                         b = u;
                     }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                    // Update v, w if u is better than them (transformed values)
+                    if (fu <= fw || Precision.equals(w, x)) {
                         v = w;
                         fv = fw;
                         w = u;
                         fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+                    } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                         v = u;
                         fv = fu;
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
+                // If default termination is met, return the overall best point found.
+                return optimum;
             }
             ++iter;
         }
     }
\ No newline at end of file
