diff --git a/tmp/4bc2313d-4dc8-4ec7-b6dd-988a7e0954d6_buggy.java b/tmp/79ae7961-09e2-4da2-8535-d35cf82242c4_fixed.java
index 466a88c..bfc925e 100644
--- a/tmp/4bc2313d-4dc8-4ec7-b6dd-988a7e0954d6_buggy.java
+++ b/tmp/79ae7961-09e2-4da2-8535-d35cf82242c4_fixed.java
@@ -1,169 +1,191 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
         double x = mid;
         double v = x;
         double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
-        if (!isMinim) {
-            fx = -fx;
-        }
-        double fv = fx;
+        
+        // Compute objective value for initial guess `x`. This is the actual (non-normalized) value.
+        final double fxActual = computeObjectiveValue(x);
+
+        // overallBest will track the best point found so far, storing its actual objective value.
+        UnivariatePointValuePair overallBest = new UnivariatePointValuePair(x, fxActual);
+
+        // fx, fv, fw are internal normalized values used for Brent's algorithm comparisons.
+        // If minimizing, fx = fxActual. If maximizing, fx = -fxActual.
+        double fx = isMinim ? fxActual : -fxActual;
+        double fv = fx; // fv and fw are also normalized
         double fw = fx;
 
-        UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+        double d = 0; // Displacement
+        double e = 0; // Previous displacement
+
+        // previousCheckerPoint and currentCheckerPoint are used for the convergence checker.
+        // They store actual (non-normalized) objective values.
+        UnivariatePointValuePair previousCheckerPoint = null;
+        UnivariatePointValuePair currentCheckerPoint = overallBest; // Initially, the best point is the start value
 
         int iter = 0;
         while (true) {
             final double m = 0.5 * (a + b);
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
             // Default stopping criterion.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
             if (!stop) {
                 double p = 0;
                 double q = 0;
                 double r = 0;
                 double u = 0;
 
                 if (FastMath.abs(e) > tol1) { // Fit parabola.
+                    // These calculations use normalized values (fx, fv, fw)
                     r = (x - w) * (fx - fv);
                     q = (x - v) * (fx - fw);
                     p = (x - v) * q - (x - w) * r;
                     q = 2 * (q - r);
 
                     if (q > 0) {
                         p = -p;
                     } else {
                         q = -q;
                     }
 
                     r = e;
                     e = d;
 
                     if (p > q * (a - x) &&
                         p < q * (b - x) &&
                         FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                         // Parabolic interpolation step.
                         d = p / q;
                         u = x + d;
 
                         // f must not be evaluated too close to a or b.
                         if (u - a < tol2 || b - u < tol2) {
                             if (x <= m) {
                                 d = tol1;
                             } else {
                                 d = -tol1;
                             }
                         }
                     } else {
                         // Golden section step.
                         if (x < m) {
                             e = b - x;
                         } else {
                             e = a - x;
                         }
                         d = GOLDEN_SECTION * e;
                     }
                 } else {
                     // Golden section step.
                     if (x < m) {
                         e = b - x;
                     } else {
                         e = a - x;
                     }
                     d = GOLDEN_SECTION * e;
                 }
 
                 // Update by at least "tol1".
                 if (FastMath.abs(d) < tol1) {
                     if (d >= 0) {
                         u = x + tol1;
                     } else {
                         u = x - tol1;
                     }
                 } else {
                     u = x + d;
                 }
 
-                double fu = computeObjectiveValue(u);
-                if (!isMinim) {
-                    fu = -fu;
-                }
+                // Compute objective value for `u`. This is the actual (non-normalized) value.
+                final double fuActual = computeObjectiveValue(u);
 
                 // User-defined convergence checker.
-                previous = current;
-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+                // The checker receives actual values.
+                previousCheckerPoint = currentCheckerPoint;
+                currentCheckerPoint = new UnivariatePointValuePair(u, fuActual);
 
                 if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
+                    if (checker.converged(iter, previousCheckerPoint, currentCheckerPoint)) {
+                        // If checker converges, return the best among overallBest, previousCheckerPoint, and currentCheckerPoint.
+                        // All these objects hold actual objective values.
+                        return best(overallBest, best(previousCheckerPoint, currentCheckerPoint, isMinim));
                     }
                 }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
+                // Update overallBest with the new point `u` if it's better.
+                // Comparison uses actual values.
+                if (isMinim) {
+                    if (fuActual < overallBest.getValue()) {
+                        overallBest = currentCheckerPoint; // currentCheckerPoint holds (u, fuActual)
+                    }
+                } else { // Maximization
+                    if (fuActual > overallBest.getValue()) {
+                        overallBest = currentCheckerPoint; // currentCheckerPoint holds (u, fuActual)
+                    }
+                }
+                
+                // fuNormalized is used for internal Brent logic comparisons (e.g., fuNormalized <= fx).
+                final double fuNormalized = isMinim ? fuActual : -fuActual;
+
+                // Update a, b, v, w and x. These updates use the normalized values (fuNormalized, fx, fv, fw).
+                if (fuNormalized <= fx) { // fuNormalized is better than or equal to fx
                     if (u < x) {
                         b = x;
                     } else {
                         a = x;
                     }
                     v = w;
                     fv = fw;
                     w = x;
                     fw = fx;
                     x = u;
-                    fx = fu;
-                } else {
+                    fx = fuNormalized;
+                } else { // fuNormalized is worse than fx
                     if (u < x) {
                         a = u;
                     } else {
                         b = u;
                     }
-                    if (fu <= fw ||
+                    if (fuNormalized <= fw || // fuNormalized is better than or equal to fw
                         Precision.equals(w, x)) {
                         v = w;
                         fv = fw;
                         w = u;
-                        fw = fu;
-                    } else if (fu <= fv ||
+                        fw = fuNormalized;
+                    } else if (fuNormalized <= fv || // fuNormalized is better than or equal to fv
                                Precision.equals(v, x) ||
                                Precision.equals(v, w)) {
                         v = u;
-                        fv = fu;
+                        fv = fuNormalized;
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
+                // When the default termination criterion is met, return the overall best point found.
+                return overallBest;
             }
             ++iter;
         }
     }
\ No newline at end of file
