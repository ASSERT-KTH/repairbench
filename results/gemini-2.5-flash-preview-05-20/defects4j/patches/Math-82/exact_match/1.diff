diff --git a/tmp/2b700290-35c7-4e7a-8c41-e449a64d309a_buggy.java b/tmp/7671407a-b34e-4e79-81e9-93d2c26452e8_fixed.java
index 220820e..3c554c8 100644
--- a/tmp/2b700290-35c7-4e7a-8c41-e449a64d309a_buggy.java
+++ b/tmp/7671407a-b34e-4e79-81e9-93d2c26452e8_fixed.java
@@ -1,22 +1,31 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+            // The minimum ratio test requires the pivot column entry to be strictly positive.
+            // Using MathUtils.compareTo(entry, 0, epsilon) > 0 ensures that 'entry' is
+            // greater than zero within the given epsilon tolerance.
+            // This prevents division by zero or by numbers effectively zero, and correctly
+            // applies the simplex rule where only positive entries in the pivot column
+            // for constraint rows are considered for the ratio test.
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
+                // For the standard Simplex algorithm, we are looking for the minimum non-negative ratio.
+                // The current implementation correctly handles this by initializing minRatio to MAX_VALUE
+                // and only updating if a smaller ratio is found.
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i;
                 }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
