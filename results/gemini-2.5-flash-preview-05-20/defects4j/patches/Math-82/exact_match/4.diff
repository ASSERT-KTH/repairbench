diff --git a/tmp/b49493a4-8c39-47b8-bf91-8a72328281c9_buggy.java b/tmp/25566ed7-bcb9-43d5-abe8-cb73b94ea636_fixed.java
index 220820e..3b76383 100644
--- a/tmp/b49493a4-8c39-47b8-bf91-8a72328281c9_buggy.java
+++ b/tmp/25566ed7-bcb9-43d5-abe8-cb73b94ea636_fixed.java
@@ -1,22 +1,27 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+            // The minimum ratio test requires the entry in the pivot column to be strictly positive.
+            // Using MathUtils.compareTo(entry, 0, epsilon) > 0 ensures that only entries
+            // that are numerically significantly greater than zero are considered.
+            // This avoids division by numbers that are effectively zero due to floating-point
+            // inaccuracies, which could lead to very large ratios or incorrect pivot choices.
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i; 
                 }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
