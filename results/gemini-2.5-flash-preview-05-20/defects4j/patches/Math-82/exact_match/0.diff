diff --git a/tmp/c97518bf-f320-41c7-9abf-742daa8dcd49_buggy.java b/tmp/fbd01c57-d67e-4364-a1d9-5ef25de0c27e_fixed.java
index 220820e..feb6cc6 100644
--- a/tmp/c97518bf-f320-41c7-9abf-742daa8dcd49_buggy.java
+++ b/tmp/fbd01c57-d67e-4364-a1d9-5ef25de0c27e_fixed.java
@@ -1,22 +1,37 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+
+            // According to the minimum ratio test (MRT) in the Simplex algorithm,
+            // a row is only considered for the ratio if the pivot column entry (entry)
+            // is strictly positive. If 'entry' is zero or negative, that row is
+            // not eligible for the ratio test.
+            //
+            // The original condition 'MathUtils.compareTo(entry, 0, epsilon) >= 0'
+            // would include entries that are numerically zero (within epsilon).
+            // A division by an effectively zero number can lead to very large ratios
+            // (e.g., if rhs > 0) or numerical instability.
+            //
+            // By changing the condition to 'MathUtils.compareTo(entry, 0, epsilon) > 0',
+            // we ensure that 'entry' is strictly greater than zero, considering the
+            // floating-point precision 'epsilon'. This aligns with the standard
+            // Simplex algorithm rule.
+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i; 
                 }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
