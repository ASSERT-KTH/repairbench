diff --git a/tmp/4752ca95-549f-41c7-b068-9e3481f9dd3a_buggy.java b/tmp/1ad11bab-a99c-4a3a-a2a8-1dc26b19aff8_fixed.java
index 220820e..4bef9d1 100644
--- a/tmp/4752ca95-549f-41c7-b068-9e3481f9dd3a_buggy.java
+++ b/tmp/1ad11bab-a99c-4a3a-a2a8-1dc26b19aff8_fixed.java
@@ -1,22 +1,7 @@
-    /**
-     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
-     * @param tableau simple tableau for the problem
-     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
-     * @return row with the minimum ratio
-     */
-    private Integer getPivotRow(final int col, final SimplexTableau tableau) {
-        double minRatio = Double.MAX_VALUE;
-        Integer minRatioPos = null;
-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
-                final double ratio = rhs / entry;
-                if (ratio < minRatio) {
+            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { // Condition 1: entry >= 0 (allows entry to be ~0)
+                final double ratio = rhs / entry; // Problem if entry is exactly 0.0 or very close to 0.0
+                if (ratio < minRatio) { // Problem if ratio is negative
                     minRatio = ratio;
                     minRatioPos = i; 
                 }
             }
\ No newline at end of file
-        }
-        return minRatioPos;
-    }
