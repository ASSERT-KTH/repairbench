diff --git a/tmp/da175d3e-61cd-4a4d-a649-e14abf932ec8_buggy.java b/tmp/1bffb509-5ad5-400c-a3d8-0d9847e19909_fixed.java
index 826e9ae..e0ce93c 100644
--- a/tmp/da175d3e-61cd-4a4d-a649-e14abf932ec8_buggy.java
+++ b/tmp/1bffb509-5ad5-400c-a3d8-0d9847e19909_fixed.java
@@ -1,15 +1,25 @@
     /**
      * Puts all values of this record into the given Map.
      *
      * @param map The Map to populate.
      * @return the given map.
      */
     <M extends Map<String, String>> M putIn(final M map) {
+        // The 'mapping' field (likely a Map<String, Integer> that stores header names to column indices)
+        // can be null if the CSVFormat used to parse the record was created without a header (e.g., CSVFormat.newFormat(',')).
+        // In such cases, there are no header names to map, so attempting to access mapping.entrySet()
+        // would result in a NullPointerException.
+        // The fix is to check if 'mapping' is null before iterating over its entries.
+        // If 'mapping' is null, no entries can be added to the map, which correctly
+        // results in an empty map as expected by the test case (testToMapWithNoHeader).
+        if (mapping != null) {
             for (final Entry<String, Integer> entry : mapping.entrySet()) {
                 final int col = entry.getValue().intValue();
-            if (col < values.length) {
+                // Ensure the column index is valid for the 'values' array (which holds the record's actual data).
+                if (col >= 0 && col < values.length) {
                     map.put(entry.getKey(), values[col]);
                 }
             }
+        }
         return map;
     }
\ No newline at end of file
