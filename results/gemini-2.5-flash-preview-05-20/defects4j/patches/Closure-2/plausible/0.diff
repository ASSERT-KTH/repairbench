diff --git a/tmp/bff65a39-db61-4c3d-9778-f5e0b79ec160_buggy.java b/tmp/1ebf33d0-a51c-4baa-b254-9a41df9aaa44_fixed.java
index 8ff679b..008a351 100644
--- a/tmp/bff65a39-db61-4c3d-9778-f5e0b79ec160_buggy.java
+++ b/tmp/1ebf33d0-a51c-4baa-b254-9a41df9aaa44_fixed.java
@@ -1,39 +1,64 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    // If interfaceType itself is null, which can happen if it comes from a
+    // badly resolved extended interface (e.g., in a recursive call),
+    // we should just return to avoid NullPointerException.
+    if (interfaceType == null) {
+      return;
+    }
+
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
     // This can be the case if interfaceType is proxy to a non-existent
     // object (which is a bad type annotation, but shouldn't crash).
+    if (implicitProto == null) {
+      // If the implicit prototype is null, there are no own properties
+      // to check for this interface. Use an empty set.
+      currentPropertyNames = java.util.Collections.emptySet();
+    } else {
       currentPropertyNames = implicitProto.getOwnPropertyNames();
+    }
+
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
+        // Ensure property types are equivalent if the property exists in
+        // previously visited super interfaces.
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                   functionName, name, oType.toString(),
                   interfaceType.toString()));
         }
       }
+      // Add the property from the current interface to the map of properties
+      // from the current super interface chain.
       currentProperties.put(name, interfaceType);
     }
+
+    // Recursively check extended interfaces
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+      // It's possible for iType to be null if a declared extended interface
+      // is non-existent or cannot be resolved, as seen in the failing test.
+      // We must check for null before recursing.
+      if (iType != null) {
         checkInterfaceConflictProperties(t, n, functionName, properties,
             currentProperties, iType);
       }
     }
+  }
\ No newline at end of file
