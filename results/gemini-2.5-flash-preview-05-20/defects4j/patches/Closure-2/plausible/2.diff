diff --git a/tmp/8576f9e8-4ce1-4bad-924a-d6e27a09f44d_buggy.java b/tmp/00a75d11-530d-48f1-84d1-406d932da9ad_fixed.java
index 8ff679b..09dd3f8 100644
--- a/tmp/8576f9e8-4ce1-4bad-924a-d6e27a09f44d_buggy.java
+++ b/tmp/00a75d11-530d-48f1-84d1-406d932da9ad_fixed.java
@@ -1,39 +1,70 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+
+    // Get the implicit prototype. As per the comment in the original code,
+    // this can be null if interfaceType is a proxy to a non-existent object
+    // (a bad type annotation that shouldn't crash).
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
+
+    if (implicitProto == null) {
+      // If the implicit prototype is null, it means this interface type
+      // represents a non-existent or invalid type. There are no actual
+      // properties to check for conflicts on this specific interface.
+      currentPropertyNames = java.util.Collections.emptySet();
+    } else {
+      // Otherwise, get the own property names from the implicit prototype.
       currentPropertyNames = implicitProto.getOwnPropertyNames();
+    }
+
+    // Iterate through the current interface's properties to check for conflicts
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
+        // Get the specific property types from both the current interface and
+        // the previously seen interface. These can be null if the property
+        // is not directly defined on the object type (e.g., inherited or absent).
+        JSType interfacePropertyType = interfaceType.getPropertyType(name);
+        JSType oPropertyType = oType.getPropertyType(name);
+
+        // Only compare if both property types are valid and non-null.
+        // If one is null, it signifies the property is not explicitly defined
+        // on that type in a way that allows direct comparison here.
+        if (interfacePropertyType != null && oPropertyType != null) {
+          if (!interfacePropertyType.isEquivalentTo(oPropertyType)) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
+      }
       currentProperties.put(name, interfaceType);
     }
+
+    // Recursively check all extended interfaces.
+    // It's possible for getCtorExtendedInterfaces() to return a list
+    // that might contain null ObjectType elements if an extended interface
+    // annotation refers to a non-existent type. We must guard against this
+    // to prevent NullPointerExceptions in subsequent recursive calls.
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+      if (iType != null) { // Crucial null check for the recursive argument
         checkInterfaceConflictProperties(t, n, functionName, properties,
             currentProperties, iType);
       }
     }
+  }
\ No newline at end of file
