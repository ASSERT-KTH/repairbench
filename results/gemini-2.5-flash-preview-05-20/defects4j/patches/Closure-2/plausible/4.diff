diff --git a/tmp/e7b2a130-143d-489e-9e03-d7608fef595e_buggy.java b/tmp/bab1e1f4-de82-43d6-aa27-5929504e1c6b_fixed.java
index 8ff679b..e9fca57 100644
--- a/tmp/e7b2a130-143d-489e-9e03-d7608fef595e_buggy.java
+++ b/tmp/bab1e1f4-de82-43d6-aa27-5929504e1c6b_fixed.java
@@ -1,39 +1,60 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
     // This can be the case if interfaceType is proxy to a non-existent
     // object (which is a bad type annotation, but shouldn't crash).
+    // If the implicit prototype is null, it means this interfaceType
+    // is likely invalid or a proxy to a non-existent object.
+    // In such cases, we should not attempt to get its own property names
+    // as it would lead to a NullPointerException. We treat it as having
+    // no properties for conflict checking purposes.
+    if (implicitProto == null) {
+      currentPropertyNames = java.util.Collections.emptySet();
+    } else {
       currentPropertyNames = implicitProto.getOwnPropertyNames();
+    }
+
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
+        // If implicitProto was not null, then interfaceType.getPropertyType(name)
+        // should generally return a non-null JSType for a property listed in
+        // currentPropertyNames. Similarly for oType.
+        // However, it's good practice to ensure they are not null before calling isEquivalentTo,
+        // although the primary NPE from the test case is addressed by the implicitProto check.
+        com.google.javascript.rhino.jstype.JSType interfacePropertyType = interfaceType.getPropertyType(name);
+        com.google.javascript.rhino.jstype.JSType existingPropertyType = oType.getPropertyType(name);
+
+        if (interfacePropertyType != null && existingPropertyType != null) {
+          if (!interfacePropertyType.isEquivalentTo(existingPropertyType)) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
+      }
       currentProperties.put(name, interfaceType);
     }
+    // getCtorExtendedInterfaces() on ObjectType typically returns an empty list
+    // for unknown types, rather than null, so a null check here is usually not needed.
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
