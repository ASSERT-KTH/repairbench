diff --git a/tmp/81b3d990-faad-45c6-ad4e-fab9b81e80b6_buggy.java b/tmp/cebf8269-e1f1-49ad-bd38-f8cd327e97ea_fixed.java
index 8ff679b..e3b0826 100644
--- a/tmp/81b3d990-faad-45c6-ad4e-fab9b81e80b6_buggy.java
+++ b/tmp/cebf8269-e1f1-49ad-bd38-f8cd327e97ea_fixed.java
@@ -1,39 +1,52 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
     // This can be the case if interfaceType is proxy to a non-existent
     // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    // Add null check for implicitProto before using it.
+    if (implicitProto != null) {
+      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
+          // It's expected that getPropertyType returns a non-null JSType for a property
+          // that exists on the prototype chain. Also, JSType.isEquivalentTo()
+          // is generally designed to handle null arguments by returning false.
+          // The primary NPE fix targets the implicitProto.getOwnPropertyNames() call.
           if (!interfaceType.getPropertyType(name).isEquivalentTo(
               oType.getPropertyType(name))) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
         currentProperties.put(name, interfaceType);
       }
+    }
+
+    // Now, handle the recursive calls for extended interfaces.
+    // interfaceType.getCtorExtendedInterfaces() might return a list containing nulls
+    // if the extended interface cannot be resolved (e.g., due to bad annotations like nonExistent1).
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+      // Add null check for iType before making the recursive call.
+      if (iType != null) {
         checkInterfaceConflictProperties(t, n, functionName, properties,
             currentProperties, iType);
       }
     }
+  }
\ No newline at end of file
