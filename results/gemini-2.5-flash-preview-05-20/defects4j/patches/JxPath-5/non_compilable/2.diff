diff --git a/tmp/653aa288-6918-4216-992b-3876a08ce1c6_buggy.java b/tmp/33be263c-2423-4040-82c6-fe27a824b93e_fixed.java
index 5f8ac1a..212cba8 100644
--- a/tmp/653aa288-6918-4216-992b-3876a08ce1c6_buggy.java
+++ b/tmp/33be263c-2423-4040-82c6-fe27a824b93e_fixed.java
@@ -1,34 +1,84 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        // Handle VariablePointers first, as they are not part of the document tree hierarchy.
+        // They need a distinct comparison strategy from document node pointers.
+        boolean p1IsVar = (p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer);
+        boolean p2IsVar = (p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer);
+
+        if (p1IsVar && p2IsVar) {
+            // Both are VariablePointers.
+            // If they are the same, return 0.
+            if (p1.equals(p2)) {
+                return 0;
+            }
+            // If different VariablePointers, order them consistently by their variable names.
+            // This ensures a stable sort order for variable nodes.
+            String name1 = ((org.apache.commons.jxpath.ri.model.VariablePointer) p1).getVariableName().getName();
+            String name2 = ((org.apache.commons.jxpath.ri.model.VariablePointer) p2).getVariableName().getName();
+            return name1.compareTo(name2);
+        }
+        
+        if (p1IsVar) {
+            // If p1 is a VariablePointer and p2 is not, p1 comes before p2.
+            // This establishes an arbitrary but consistent order between variable and document nodes.
+            return -1;
+        }
+        if (p2IsVar) {
+            // If p2 is a VariablePointer and p1 is not, p2 comes before p1 (so p1 comes after p2).
+            return 1;
+        }
+
+        // At this point, neither p1 nor p2 is a VariablePointer.
+        // They are both assumed to be pointers within a document structure,
+        // and the existing tree comparison logic applies.
+
         if (depth1 < depth2) {
+            // p1 is shallower than p2, so compare p1 with p2's parent.
+            // If p1 is an ancestor of p2, or on a path that would come before p2.
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If parents match (r == 0), it means p1 is an ancestor of p2's ancestor,
+            // or p1 is a child of p2's ancestor, effectively putting p1 before p2.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
+            // p1 is deeper than p2, so compare p1's parent with p2.
+            // If p2 is an ancestor of p1, or on a path that would come before p1.
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            // If parents match (r == 0), it means p2 is an ancestor of p1's ancestor,
+            // or p2 is a child of p1's ancestor, effectively putting p2 before p1.
             return r == 0 ? 1 : r;
         }
+        // Depths are equal here.
+
         if (p1 == null && p2 == null) {
-            return 0;
+            return 0; // Both are null, considered equal.
         }
 
         if (p1 != null && p1.equals(p2)) {
-            return 0;
+            return 0; // Pointers are equal.
         }
 
+        // If depths are equal, and pointers are not equal, and they are not VariablePointers,
+        // and we are at depth 1 (root level), then they cannot belong to the same tree/document.
+        // This check prevents NullPointerExceptions if distinct root pointers are compared
+        // where a common parent cannot be found and `p1.parent.compareChildNodePointers` would fail.
         if (depth1 == 1) {
-            throw new JXPathException(
+            throw new org.apache.commons.jxpath.JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
+        
+        // Recursively compare parents to find the common ancestor.
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
-            return r;
+            return r; // If parents (or higher ancestors) are different, use that ordering.
         }
 
+        // If parents are equal (r == 0), it means p1 and p2 are siblings.
+        // Delegate the comparison to their common parent to determine their order among children.
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
