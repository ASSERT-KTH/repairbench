diff --git a/tmp/6f88a886-e439-4ebd-ac8d-781e5997d502_buggy.java b/tmp/f943a425-9238-497b-ab0b-97f7a842fef9_fixed.java
index 5f8ac1a..39481d7 100644
--- a/tmp/6f88a886-e439-4ebd-ac8d-781e5997d502_buggy.java
+++ b/tmp/f943a425-9238-497b-ab0b-97f7a842fef9_fixed.java
@@ -1,34 +1,64 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
+        // At this point, depth1 == depth2
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
 
+        // Now depth1 == depth2, p1 != null, p2 != null, and p1 != p2
+        // This block is for comparing two distinct pointers at the same conceptual depth.
+        // It specifically deals with root-level comparisons (depth1 == 1) or child comparisons.
         if (depth1 == 1) {
+            // Special handling for VariablePointer, as it doesn't belong to the document tree
+            // and should not cause an exception when compared to other types of pointers.
+            if (p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer) {
+                if (!(p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer)) {
+                    // p1 is VariablePointer, p2 is not a VariablePointer.
+                    // Arbitrarily order VariablePointers before other NodePointers.
+                    return -1;
+                } else {
+                    // Both p1 and p2 are VariablePointers, and they are not equal (due to p1.equals(p2) check above).
+                    // Order them by their variable names for a consistent result.
+                    return ((org.apache.commons.jxpath.ri.model.VariablePointer) p1).getQName().toString().compareTo(
+                            ((org.apache.commons.jxpath.ri.model.VariablePointer) p2).getQName().toString());
+                }
+            } else if (p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer) {
+                // p2 is VariablePointer, p1 is not a VariablePointer.
+                // Arbitrarily order other NodePointers after VariablePointers.
+                return 1;
+            }
+
+            // If neither is a VariablePointer, and they are distinct root-level nodes,
+            // they are considered to be from different trees in the original design.
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
+        
+        // Original logic for non-root comparisons or when parents are equal.
+        // If depth1 > 1, we recursively compare parents.
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
+        // If parents are equal (r == 0), compare children.
+        // This implies p1 and p2 are siblings under the same parent.
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
