diff --git a/tmp/22ed3d5d-2288-4e0e-b7e8-f2f05f6ccbee_buggy.java b/tmp/21ad315e-52cb-4f3d-a376-36cc6c078b11_fixed.java
index 5f8ac1a..3e10809 100644
--- a/tmp/22ed3d5d-2288-4e0e-b7e8-f2f05f6ccbee_buggy.java
+++ b/tmp/21ad315e-52cb-4f3d-a376-36cc6c078b11_fixed.java
@@ -1,34 +1,74 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        // 1. Handle null pointers first and consistently.
+        // A null pointer is considered "less than" a non-null pointer for consistent ordering.
+        if (p1 == null && p2 == null) {
+            return 0; // Both are null, considered equal
+        }
+        if (p1 == null) {
+            return -1; // p1 is null, p2 is not null. p1 comes before p2.
+        }
+        if (p2 == null) {
+            return 1; // p1 is not null, p2 is null. p1 comes after p2.
+        }
+
+        // At this point, both p1 and p2 are guaranteed to be non-null.
+
+        // 2. If they are the same instance or logically equal, return 0.
+        if (p1.equals(p2)) {
+            return 0;
+        }
+
+        // 3. Adjust depths and recurse if depths are different.
+        // These recursive calls correctly handle `p.parent` as we know `p` is not null.
+        // If `p.parent` is null, the recursive call will hit the null checks at the beginning.
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If parents are considered equal (r == 0), it implies p2 is an ancestor (or represents an ancestor path) of p1's comparison point.
+            // Therefore, p2 should come before p1.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            // If parents are considered equal (r == 0), it implies p1 is an ancestor (or represents an ancestor path) of p2's comparison point.
+            // Therefore, p1 should come before p2.
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
-        }
-
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
-        }
+        // 4. At this point, depth1 == depth2, and p1 != p2 (not .equals).
+        // Compare their parents recursively.
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
+            // Parents are different, so the order is determined by parent comparison.
             return r;
         }
 
+        // 5. Parents are considered equal (r == 0). Now compare the children themselves.
+        // This branch is reached if:
+        //    - p1.parent and p2.parent are the same non-null instance.
+        //    - OR p1.parent is null AND p2.parent is also null (due to the initial null handling returning 0).
+
+        if (p1.parent == null) {
+            // This implies p2.parent is also null because their comparison (r) was 0.
+            // This typically handles cases like comparing two different VariablePointers,
+            // or other "root-level" pointers that don't have a common non-null parent in the DOM tree.
+            // Since they are not .equals() and don't share a parent for document order comparison,
+            // provide a stable, arbitrary order.
+            int nameComp = p1.getName().compareTo(p2.getName());
+            if (nameComp != 0) {
+                return nameComp;
+            }
+            // If names are also equal (e.g., both are `text()`), fall back to identity hash code
+            // to ensure a consistent but arbitrary order for truly distinct and otherwise incomparable pointers.
+            return System.identityHashCode(p1) - System.identityHashCode(p2);
+        }
+
+        // If p1.parent is not null, it means we have a common non-null parent.
+        // Delegate the comparison to the parent's specific compareChildNodePointers method,
+        // which understands how to order its children.
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
