diff --git a/tmp/babcf8a5-ca00-4c90-82b9-bd858e6bbe07_buggy.java b/tmp/286214e0-cdd2-46ca-bd39-bbc9cc5c5219_fixed.java
index 5f8ac1a..38eaf01 100644
--- a/tmp/babcf8a5-ca00-4c90-82b9-bd858e6bbe07_buggy.java
+++ b/tmp/286214e0-cdd2-46ca-bd39-bbc9cc5c5219_fixed.java
@@ -1,34 +1,71 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
+        // Handle null pointers explicitly to establish an arbitrary but stable order.
+        // A null pointer is generally considered "less" than a non-null pointer.
+        if (p1 == null && p2 == null) {
+            return 0;
+        }
+        if (p1 == null) {
+            return -1; // p1 is null, p2 is not null
+        }
+        if (p2 == null) {
+            return 1;  // p2 is null, p1 is not null
+        }
+
+        // Both p1 and p2 are guaranteed to be non-null at this point.
+
+        // If they are literally the same pointer or represent the same node, they are equal.
+        if (p1.equals(p2)) {
+            return 0;
+        }
+
+        // Distinguish between 'node-like' pointers (e.g., DOM elements, complex beans)
+        // and 'non-node-like' pointers (e.g., variables pointing to scalar values).
+        // These belong to fundamentally different types of "trees" and cannot be compared
+        // hierarchically. Provide a stable, arbitrary order based on their node status.
+        // For sorting in unions, it's better to have an arbitrary order than to throw an exception.
+        if (p1.isNode() != p2.isNode()) {
+            // Arbitrarily order non-nodes before nodes.
+            // For example, a VariablePointer (pointing to a String) would be isNode() == false,
+            // while a DOMNodePointer would be isNode() == true.
+            return p1.isNode() ? 1 : -1;
+        }
+
+        // If depths are different, recurse up the hierarchy to match depths.
+        // When parents are equal, the "shorter" path (less depth) is considered "less".
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
-        }
+        // At this point, depth1 == depth2, p1 != p2, and p1.isNode() == p2.isNode().
 
+        // If at the root level (depth 1) and still not equal, it means they are
+        // root pointers from different, hierarchically incomparable trees (e.g., two distinct XML documents).
+        // This is typically considered an error condition for hierarchical comparison of document nodes.
         if (depth1 == 1) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
+
+        // If not at the root, recurse up to their parents.
+        // The comparison result of parents determines the primary order.
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
+        // If parents are equal, compare the children.
+        // This assumes p1.parent and p2.parent are the same node and non-null.
+        // The common parent dictates the order of its direct children.
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
