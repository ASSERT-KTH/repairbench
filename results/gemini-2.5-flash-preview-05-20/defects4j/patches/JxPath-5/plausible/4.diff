diff --git a/tmp/158f7c65-18f9-4b80-8471-351ce014a22a_buggy.java b/tmp/b42c5987-3c11-4f86-85f0-83c6949aef88_fixed.java
index 5f8ac1a..478b206 100644
--- a/tmp/158f7c65-18f9-4b80-8471-351ce014a22a_buggy.java
+++ b/tmp/b42c5987-3c11-4f86-85f0-83c6949aef88_fixed.java
@@ -1,34 +1,62 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        // Added check: If one is a VariablePointer and the other is not,
+        // they are not comparable in the tree hierarchy sense.
+        // Define an arbitrary but consistent order to allow sorting.
+        boolean p1IsVar = (p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer);
+        boolean p2IsVar = (p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer);
+
+        if (p1IsVar != p2IsVar) {
+            // One is a VariablePointer and the other is not.
+            // This comparison should not result in a JXPathException from the depth1==1 check,
+            // as they belong to fundamentally different contexts.
+            // We define an arbitrary but consistent order for sorting:
+            // VariablePointers come before all other NodePointers.
+            return p1IsVar ? -1 : 1;
+        }
+
+        // Proceed with original logic for cases where:
+        // 1. Both are VariablePointers (their depth is usually 0, so they won't hit depth1==1 block anyway,
+        //    and will return 0 if their parents are both null and they are not equal, which is fine for distinct variables).
+        // 2. Both are NOT VariablePointers (i.e., regular NodePointers from a DOM-like tree).
+        //    In this case, the existing logic, including the JXPathException for unrelated trees, is correct.
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
 
+        // This block is now only reached if:
+        // - Both p1 and p2 are non-null.
+        // - Their depths are equal.
+        // - They are not equal themselves.
+        // - AND (both are VariablePointers OR both are NOT VariablePointers).
+        // If both are VariablePointers, their depth is typically 0, so this `depth1 == 1` condition will be false.
+        // Therefore, this `if (depth1 == 1)` block will only be triggered for two non-VariablePointers
+        // that are distinct roots of different DOM trees, which is the intended behavior for the exception.
         if (depth1 == 1) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
