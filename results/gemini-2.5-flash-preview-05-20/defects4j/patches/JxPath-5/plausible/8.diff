diff --git a/tmp/b7d942e0-6d61-47f8-92e1-bf0f93c6f5ab_buggy.java b/tmp/133ab4fb-c908-4f03-b238-5547cdb7e115_fixed.java
index 5f8ac1a..3265c9d 100644
--- a/tmp/b7d942e0-6d61-47f8-92e1-bf0f93c6f5ab_buggy.java
+++ b/tmp/133ab4fb-c908-4f03-b238-5547cdb7e115_fixed.java
@@ -1,34 +1,86 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
+        // Handle null pointers first
+        if (p1 == null && p2 == null) {
+            return 0;
+        }
+        if (p1 == null) {
+            return -1; // null is "smaller" than any non-null pointer
+        }
+        if (p2 == null) {
+            return 1;  // non-null is "larger" than null
+        }
+
+        // If they are the same instance or logically equal, they are ordered identically.
+        // This check should come early as it applies to all pointer types.
+        if (p1.equals(p2)) {
+            return 0;
+        }
+
+        // Special handling for VariablePointers, as they don't belong to the regular document tree.
+        boolean p1IsVar = p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer;
+        boolean p2IsVar = p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer;
+
+        if (p1IsVar && p2IsVar) {
+            // Both are VariablePointers and are not equal (checked above).
+            // Order them deterministically by their variable names.
+            String name1 = ((org.apache.commons.jxpath.ri.model.VariablePointer) p1).getName().getName();
+            String name2 = ((org.apache.commons.jxpath.ri.model.VariablePointer) p2).getName().getName();
+            return name1.compareTo(name2);
+        } else if (p1IsVar) {
+            // p1 is a VariablePointer, p2 is not.
+            // Establish an arbitrary but consistent order: VariablePointers come before other NodePointers.
+            return -1;
+        } else if (p2IsVar) {
+            // p2 is a VariablePointer, p1 is not.
+            // Establish an arbitrary but consistent order: VariablePointers come before other NodePointers.
+            return 1;
+        }
+
+        // --- Original logic for comparing non-VariablePointers (or after var-specific handling) ---
+        // Pointers are not null, not equal, and not inter-variable-pointer types (or already ordered if both var).
+
+        // If at different depths, recurse up the deeper pointer's parent chain until depths match.
         if (depth1 < depth2) {
+            // p1 is shallower, p2 is deeper. Move p2 up towards p1.
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If 'r == 0' after moving p2 up, it means p1 is an ancestor of p2.
+            // In document order, ancestors come before descendants. So p1 < p2.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
+            // p1 is deeper, p2 is shallower. Move p1 up towards p2.
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            // If 'r == 0' after moving p1 up, it means p2 is an ancestor of p1.
+            // In document order, ancestors come before descendants. So p2 < p1, meaning p1 > p2.
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
-        }
+        // At this point, depth1 == depth2, and both p1 and p2 are non-null, not equal,
+        // and not VariablePointers (or their VariablePointer comparison yielded 0).
 
+        // If depth1 == 1, they are different root pointers.
+        // The original code threw a JXPathException here because they do not belong to the same logical tree
+        // and 'p1.parent' would be null, leading to a NullPointerException if we proceeded.
+        // Instead of throwing an exception, provide a stable, deterministic order for different roots.
         if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+            // They are distinct root pointers (e.g., two distinct XML documents).
+            // Use their string representation for a deterministic order.
+            return p1.toString().compareTo(p2.toString());
         }
+
+        // General case: same depth, not equal, not root. Recurse on parents to find common ancestor.
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
-            return r;
+            return r; // Parents were different, their comparison determines the order.
         }
 
+        // Parents are effectively the same (r == 0). This means p1 and p2 are siblings.
+        // Compare them using their parent's specific child comparison logic.
+        // p1.parent should not be null here because depth1 > 1.
         return p1.parent.compareChildNodePointers(p1, p2);
     }
