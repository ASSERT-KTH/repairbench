diff --git a/tmp/a98cfcf8-5129-40b4-8a57-ed08c80c5e1d_buggy.java b/tmp/ead5d4ef-afbb-4fa9-b3cd-db649cbdb69d_fixed.java
index 5f8ac1a..f7218af 100644
--- a/tmp/a98cfcf8-5129-40b4-8a57-ed08c80c5e1d_buggy.java
+++ b/tmp/ead5d4ef-afbb-4fa9-b3cd-db649cbdb69d_fixed.java
@@ -1,34 +1,96 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        // Special handling for VariablePointers and other "rootless" pointers.
+        // VariablePointers (and similar types that do not represent nodes in a document tree)
+        // have a depth of 0 and do not have a parent in the traditional tree sense.
+        // Attempting to compare them with document nodes via parent traversal leads to errors
+        // because they fundamentally do not belong to the same tree.
+        // For operations like "union" where different types of pointers are mixed,
+        // a consistent, albeit arbitrary, order is required rather than throwing an exception.
+
+        boolean p1IsVariable = (p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer);
+        boolean p2IsVariable = (p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer);
+
+        if (p1IsVariable && p2IsVariable) {
+            // Both are VariablePointers.
+            // If they are the same object or represent the same variable (checked by equals), they are equal.
+            if (p1 == null && p2 == null) {
+                return 0;
+            }
+            if (p1 != null && p1.equals(p2)) {
+                return 0;
+            }
+            // For two distinct VariablePointers, an arbitrary but consistent order is needed.
+            // Using identity hash code provides a deterministic (though arbitrary) ordering.
+            return System.identityHashCode(p1) - System.identityHashCode(p2);
+        }
+
+        if (p1IsVariable) {
+            // p1 is a VariablePointer, p2 is not (it's likely a document pointer or null).
+            // VariablePointers are typically considered "before" document pointers in sorted lists.
+            return -1;
+        }
+
+        if (p2IsVariable) {
+            // p2 is a VariablePointer, p1 is not (it's likely a document pointer or null).
+            // p1 (document pointer) comes "after" p2 (VariablePointer).
+            return 1;
+        }
+
+        // From this point, neither p1 nor p2 is a VariablePointer.
+        // The original logic for comparing document-tree pointers applies.
+
         if (depth1 < depth2) {
+            // p1 is higher up the tree than p2, or p2 is deeper.
+            // Try to align depths by moving p2 up towards its parent.
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If p1 and p2.parent are found to be the same (r == 0),
+            // it means p1 is an ancestor of p2. Thus, p1 comes before p2.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
+            // p2 is higher up the tree than p1, or p1 is deeper.
+            // Try to align depths by moving p1 up towards its parent.
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            // If p1.parent and p2 are found to be the same (r == 0),
+            // it means p2 is an ancestor of p1. Thus, p1 comes after p2.
             return r == 0 ? 1 : r;
         }
+        
+        // At this point, depth1 == depth2.
+
         if (p1 == null && p2 == null) {
+            // Both pointers are null (e.g., reached beyond root for both). They are equal.
             return 0;
         }
 
         if (p1 != null && p1.equals(p2)) {
+            // Pointers are equal (same node or equivalent).
             return 0;
         }
 
-        if (depth1 == 1) {
+        // If depths are equal (and > 0), and they are not equal,
+        // and we are at depth 1 (i.e., comparing root pointers of different trees),
+        // then they cannot be compared. This is the intended JXPathException for unrelated document trees.
+        if (depth1 == 1) { // Implicitly also depth2 == 1 since depths are equal at this point
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
+        
+        // If depths are equal and > 1, and they are not equal,
+        // recursively compare their parents.
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
+            // If parents are different, their comparison determines the order.
             return r;
         }
 
+        // If parents are equal, compare the immediate children (p1 and p2) under that common parent.
+        // This assumes p1.parent is not null (which is guaranteed if depth1 > 1).
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
