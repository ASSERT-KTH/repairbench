diff --git a/tmp/d243a744-b1dd-4c70-af9e-13be504a698a_buggy.java b/tmp/caf698e0-8d9f-45cb-bac2-6c7aa8120cf0_fixed.java
index 5f8ac1a..686c646 100644
--- a/tmp/d243a744-b1dd-4c70-af9e-13be504a698a_buggy.java
+++ b/tmp/caf698e0-8d9f-45cb-bac2-6c7aa8120cf0_fixed.java
@@ -1,34 +1,64 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        // Adjust depths to match by moving up the tree
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If a common ancestor is found (r == 0), it means p1 is an ancestor of p2,
+            // so p1 comes before p2. Otherwise, return the comparison result.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            // If a common ancestor is found (r == 0), it means p2 is an ancestor of p1,
+            // so p1 comes after p2. Otherwise, return the comparison result.
             return r == 0 ? 1 : r;
         }
+
+        // At this point, depth1 == depth2 (same depth)
+        
+        // Base case: both pointers are null
         if (p1 == null && p2 == null) {
             return 0;
         }
 
+        // Base case: pointers are equal (refer to the same node)
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
 
+        // If we are at depth 1 (root level) and pointers are distinct and non-null,
+        // they are distinct root nodes from potentially different logical trees
+        // (e.g., a variable pointer and a document pointer).
+        // Their parents are null, so `p1.parent.compareChildNodePointers` would cause an NPE.
+        // Instead of throwing an exception, provide a consistent arbitrary order.
         if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+            // Compare by class name first for a stable order across different pointer types.
+            // E.g., VariablePointer, PrimitiveNodePointer, DocumentPointer etc.
+            String class1 = p1.getClass().getName();
+            String class2 = p2.getClass().getName();
+            int r = class1.compareTo(class2);
+            if (r != 0) {
+                return r;
             }
+            // If they are of the same class (e.g., two different VariablePointers),
+            // use their XPath path string as a tie-breaker. asPath() provides a unique string.
+            return p1.asPath().compareTo(p2.asPath());
+        }
+
+        // If depth > 1, both pointers are non-null, not equal, and at the same depth.
+        // Recursively compare their parents. This will eventually lead to either:
+        // 1. A difference being found at a higher level (r != 0).
+        // 2. A common parent being found (r == 0), meaning they share a common ancestor.
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
+        // If parents are equal (r == 0), then compare the two children under that common parent.
+        // This line is only reached if depth1 > 1, guaranteeing p1.parent is not null.
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
