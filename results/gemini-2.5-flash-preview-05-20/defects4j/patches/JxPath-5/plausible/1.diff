diff --git a/tmp/0c4cd1f4-d505-473c-a342-e3a2f0049c73_buggy.java b/tmp/cb8b73f7-5608-422d-b599-8ba45693307d_fixed.java
index 5f8ac1a..b21e51b 100644
--- a/tmp/0c4cd1f4-d505-473c-a342-e3a2f0049c73_buggy.java
+++ b/tmp/cb8b73f7-5608-422d-b599-8ba45693307d_fixed.java
@@ -1,34 +1,79 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        // Handle null pointers explicitly at the very beginning.
+        // A null pointer should generally come after any non-null pointer for sorting.
+        if (p1 == null && p2 == null) {
+            return 0; // Both are null, considered equal
+        }
+        if (p1 == null) {
+            return 1; // p1 is null, p2 is not. p1 comes after p2.
+        }
+        if (p2 == null) {
+            return -1; // p2 is null, p1 is not. p1 comes before p2.
+        }
+
+        // Handle VariablePointers specifically for cross-type comparison.
+        // VariablePointers usually sort before other NodePointers in JXPath union operations.
+        boolean p1IsVariable = (p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer);
+        boolean p2IsVariable = (p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer);
+
+        if (p1IsVariable && !p2IsVariable) {
+            return -1; // VariablePointer comes before regular NodePointer
+        }
+        if (!p1IsVariable && p2IsVariable) {
+            return 1;  // Regular NodePointer comes after VariablePointer
+        }
+
+        // If both are VariablePointers OR both are non-VariablePointers.
+        // If both are VariablePointers, compare them directly.
+        // Their parents are null and depth is 0, so the recursive logic won't work for distinct variables.
+        if (p1IsVariable /* && p2IsVariable is implied here */) {
+            if (p1.equals(p2)) {
+                return 0;
+            }
+            // If two VariablePointers are not equal, order them by their string representation (e.g., name).
+            return p1.toString().compareTo(p2.toString());
+        }
+
+        // --- Original logic for comparing non-VariablePointers (NodePointers representing paths) ---
+
+        // Try to equalize depths by moving up the parent hierarchy
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            // If p1 is an ancestor of p2 (r == 0), p1 comes before p2.
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            // If p2 is an ancestor of p1 (r == 0), p1 comes after p2.
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
+        // At this point, depth1 == depth2, and both p1 and p2 are non-null and non-variable.
 
-        if (p1 != null && p1.equals(p2)) {
+        // If they are the same pointer instance or equivalent
+        if (p1.equals(p2)) {
             return 0;
         }
 
-        if (depth1 == 1) {
+        // If both pointers are at the root level (depth 0, parent is null) and are not equal,
+        // they represent different trees. This is an unresolvable comparison.
+        if (depth1 == 0 && p1.parent == null && p2.parent == null) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
+
+        // Recursively compare parents to find a common ancestor
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
-            return r;
+            return r; // Parents are different, so the order is determined by parent comparison
         }
 
+        // If parents are identical (r == 0), compare children within the same parent
+        // This relies on the specific NodePointer implementation's compareChildNodePointers.
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
