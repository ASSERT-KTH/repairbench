diff --git a/tmp/f1ccf090-afd5-45f4-9c56-1274d2249e6a_buggy.java b/tmp/2efe1e57-70c5-4b99-8852-8587f9864334_fixed.java
index 5f8ac1a..78a39bb 100644
--- a/tmp/f1ccf090-afd5-45f4-9c56-1274d2249e6a_buggy.java
+++ b/tmp/2efe1e57-70c5-4b99-8852-8587f9864334_fixed.java
@@ -1,34 +1,71 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        // 1. Handle null pointers first for robust comparison
+        if (p1 == null && p2 == null) {
+            return 0;
+        }
+        if (p1 == null) { // p2 must be non-null
+            return -1; // Null comes before non-null
+        }
+        if (p2 == null) { // p1 must be non-null
+            return 1; // Non-null comes after null
+        }
+
+        // 2. Check if pointers belong to different root contexts (different "trees").
+        // This is crucial for comparing VariablePointers (from a variable tree) and DOMNodePointers (from a DOM tree).
+        // JXPath specifies that order for nodes from different documents/trees is "undefined, but consistent."
+        if (p1.getRootNode() != p2.getRootNode()) {
+            // Provide an arbitrary but consistent order.
+            // Compare based on the hash codes of their root nodes.
+            int rootComparison = Integer.compare(p1.getRootNode().hashCode(), p2.getRootNode().hashCode());
+            if (rootComparison != 0) {
+                return rootComparison;
+            }
+            // If root hash codes are identical (highly unlikely for different root instances, but good for robustness),
+            // use their full paths as a tie-breaker to ensure consistency.
+            return p1.asPath().compareTo(p2.asPath());
+        }
+
+        // From this point, both pointers are non-null and belong to the same logical tree.
+
+        // 3. Adjust depths for comparison, moving up the tree until they are at the same level.
         if (depth1 < depth2) {
+            // p1 is at a higher level (closer to root) or is an ancestor of p2.
+            // Recursively compare p1 with p2's parent until depths align.
+            // If `r == 0`, it means p1 and p2's parent are "equal" (i.e., they share the same path up to that level).
+            // In this case, p1 is an ancestor of p2, so p1 should come before p2 (-1).
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
+            // p2 is at a higher level (closer to root) or is an ancestor of p1.
+            // Recursively compare p1's parent with p2 until depths align.
+            // If `r == 0`, it means p2 and p1's parent are "equal".
+            // In this case, p2 is an ancestor of p1, so p1 should come after p2 (1).
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
+        // 4. Depths are equal and pointers are from the same tree.
+        if (p1.equals(p2)) {
+            return 0; // Pointers are the same instance or represent the same node.
         }
 
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
-        }
+        // Pointers are different but at the same depth and from the same tree.
+        // This means they are siblings or cousins.
+        // Recursively compare their parents.
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
-            return r;
+            return r; // If parents are different, their order determines the child order.
         }
 
+        // Parents are the same, so p1 and p2 are siblings.
+        // Delegate to the parent to compare its children.
+        // At this point, depth1 >= 1 (since NodePointer.getDepth() for a RootNodePointer is typically 0, its children start at depth 1).
+        // Therefore, p1.parent (which is a RootNodePointer if depth1 was 1, or some other NodePointer) will not be null.
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
