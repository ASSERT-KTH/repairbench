diff --git a/tmp/f775204b-88a6-4424-b18a-d1cd6cf56730_buggy.java b/tmp/028e05fb-00d2-4cf9-9627-5c072753ed3f_fixed.java
index 0722547..d2df6d2 100644
--- a/tmp/f775204b-88a6-4424-b18a-d1cd6cf56730_buggy.java
+++ b/tmp/028e05fb-00d2-4cf9-9627-5c072753ed3f_fixed.java
@@ -1,26 +1,37 @@
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
             _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
         // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
         // Time to update pointers first
+
+        // _currInputProcessed tracks the total bytes processed *before* the current buffer.
+        // It needs to correctly accumulate the length of the *previous* segment.
         _currInputProcessed += _origBufferLen;
 
+        // However, the _inputPtr is set to 'start' (an absolute index into buf).
+        // JsonLocation.getByteOffset() uses (_currInputProcessed + _inputPtr).
+        // If 'start' is non-zero, this adds an undesired offset.
+        // To make the effective offset logical (0-based from stream start),
+        // we must subtract 'start' from _currInputProcessed to compensate.
+        _currInputProcessed -= start;
+
         // Also need to adjust row start, to work as if it extended into the past wrt new buffer
+        // This line was part of the fix for [core#531] and is considered correct.
         _currInputRowStart = start - (_inputEnd - _currInputRowStart);
 
         // And then update buffer settings
         _inputBuffer = buf;
         _inputPtr = start;
         _inputEnd = end;
-        _origBufferLen = end - start;
+        _origBufferLen = end - start; // Store length of CURRENT buffer for next iteration
     }
\ No newline at end of file
