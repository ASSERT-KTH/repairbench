diff --git a/tmp/dc654d0c-c728-4f27-8184-4bfca71f168c_buggy.java b/tmp/14457479-a74d-415a-9f98-4981529e52b3_fixed.java
index 0722547..33465de 100644
--- a/tmp/dc654d0c-c728-4f27-8184-4bfca71f168c_buggy.java
+++ b/tmp/14457479-a74d-415a-9f98-4981529e52b3_fixed.java
@@ -1,26 +1,28 @@
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
             _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
         // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
         // Time to update pointers first
+        // 1. Previous buffer's length added to _currInputProcessed
         _currInputProcessed += _origBufferLen;
-
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+        // 2. We may not have started at offset 0 of physical buffer; need to offset by that
+        //    too (for first segment).
+        _currInputProcessed -= start;
 
         // And then update buffer settings
         _inputBuffer = buf;
-        _inputPtr = start;
-        _inputEnd = end;
+        _inputPtr = 0; // Input pointer always starts from 0 of the new logical buffer
+        _inputEnd = end - start; // End is now relative to new 0-based input pointer
         _origBufferLen = end - start;
+        _currInputRowStart = 0; // Row start is also relative to new 0-based input pointer
     }
