diff --git a/tmp/7b74fd4a-ab9d-4f62-98d2-bd020b70f011_buggy.java b/tmp/f9f5f793-abda-4e36-bb3f-0308378e2741_fixed.java
index 0722547..9118d36 100644
--- a/tmp/7b74fd4a-ab9d-4f62-98d2-bd020b70f011_buggy.java
+++ b/tmp/f9f5f793-abda-4e36-bb3f-0308378e2741_fixed.java
@@ -1,26 +1,53 @@
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
             _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
         // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
+
         // Time to update pointers first
+        // This is the core fix for [core#531] in async mode.
+        // _currInputProcessed tracks the total bytes processed from the start of the logical stream.
+        // _inputPtr tracks the current position within the _inputBuffer (which is the actual byte[]).
+        // JsonLocation.getByteOffset() calculates as _currInputProcessed + _inputPtr + 1.
+        //
+        // On the very first call to feedInput for this parser instance:
+        // - _inputBuffer is null (or a placeholder like NO_BYTES in the parser's constructor).
+        // - The logical stream starts at 'buf[start]'. To make its effective byte offset 0 (so getByteOffset() returns 1),
+        //   _currInputProcessed must be initialized to -start. This compensates for _inputPtr being set to 'start'.
+        if (_inputBuffer == null) {
+            _currInputProcessed = -start;
+        } else {
+            // For subsequent calls:
+            // _currInputProcessed needs to advance by the length of the *previous* fed segment.
+            // _origBufferLen holds the length (end - start) of the segment from the *previous* feedInput call.
             _currInputProcessed += _origBufferLen;
             
+            // Additionally, if the new 'buf' provided also has a non-zero 'start' offset,
+            // this implies a logical shift or 'gap' in the stream relative to the previous buffer.
+            // _currInputProcessed should effectively absorb this 'start' offset to maintain correct byte offsets
+            // for the new segment, as _inputPtr will again be set to this new 'start'.
+            _currInputProcessed -= start;
+        }
+
         // Also need to adjust row start, to work as if it extended into the past wrt new buffer
+        // _currInputRowStart is the absolute offset of the current row start.
+        // The calculation 'start - (_inputEnd - _currInputRowStart)' adjusts it for the new segment:
+        // - '_inputEnd - _currInputRowStart' represents the bytes consumed in the last row of the *previous* buffer.
+        // - Subtracting this value and adding 'start' aligns _currInputRowStart to the beginning of the new segment.
         _currInputRowStart = start - (_inputEnd - _currInputRowStart);
 
-        // And then update buffer settings
+        // And then update buffer settings for the new input segment
         _inputBuffer = buf;
         _inputPtr = start;
         _inputEnd = end;
-        _origBufferLen = end - start;
+        _origBufferLen = end - start; // Store the length of the *current* segment for the next call
     }
\ No newline at end of file
