diff --git a/tmp/d31e996e-381a-44e5-9048-91ee66fa0ade_buggy.java b/tmp/1b4becf9-8070-49d0-87ff-7ee9028228d8_fixed.java
index 0722547..149854a 100644
--- a/tmp/d31e996e-381a-44e5-9048-91ee66fa0ade_buggy.java
+++ b/tmp/1b4becf9-8070-49d0-87ff-7ee9028228d8_fixed.java
@@ -1,26 +1,41 @@
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
             _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
         // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
-        // Time to update pointers first
-        _currInputProcessed += _origBufferLen;
+
+        // Fix for [core#531]: Asynchronous parser byte offset calculation
+        // First, check if we had any content left; if so, we must update
+        // _currInputProcessed to reflect consumed bytes from that buffer
+        // (this covers case where partial buffer was read, and we must include
+        // non-parsed left-over bytes from that buffer)
+        // NOTE: this check is actually redundant as previous checks ensure no input left
+        //       (it is needed for other base methods like 'releaseInputBuffer' maybe)
+        if (_inputPtr < _inputEnd) {
+             _currInputProcessed += (_inputEnd - _inputPtr);
+        }
+        // Then need to update _currInputProcessed to reflect actual position
+        // in input, NOT 'start', but actually based on what's been read
+        // from underlying source.
+        // It's the 'real' offset of first byte of new buffer.
+        _currInputProcessed = (_currInputProcessed - _origBufferLen) + start;
 
         // Also need to adjust row start, to work as if it extended into the past wrt new buffer
+        // (note: _inputEnd and _currInputRowStart are relative to *previous* input buffer here)
         _currInputRowStart = start - (_inputEnd - _currInputRowStart);
 
         // And then update buffer settings
         _inputBuffer = buf;
         _inputPtr = start;
         _inputEnd = end;
         _origBufferLen = end - start;
     }
\ No newline at end of file
