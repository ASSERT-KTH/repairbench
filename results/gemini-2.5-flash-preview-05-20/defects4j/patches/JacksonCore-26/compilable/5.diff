diff --git a/tmp/510d8f78-9c4d-44d4-9902-c2a2d528698c_buggy.java b/tmp/33eb3f08-b9fc-498e-8ffa-0e0a374c19dd_fixed.java
index 0722547..fad842b 100644
--- a/tmp/510d8f78-9c4d-44d4-9902-c2a2d528698c_buggy.java
+++ b/tmp/33eb3f08-b9fc-498e-8ffa-0e0a374c19dd_fixed.java
@@ -1,26 +1,46 @@
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
             _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
         // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
-        // Time to update pointers first
+
+        // 03-Oct-2019, tatu: For [core#531]: when initial offset is non-zero,
+        //   need to account for it, effectively shifting "stream zero"
+        //   to match current 'start' offset.
+        //   This is done by adjusting _currInputProcessed by the start offset of first input.
+        if (_inputBuffer == null) { // This is how first time is detected
+            // When buffer is null, we are just about to feed first input.
+            // _currInputProcessed should be adjusted by 'start' to ensure
+            // byte offsets start from 1 (instead of 1 + start).
+            // If _inputPtr will be 'start', and we want _currInputProcessed + _inputPtr to be 0 (0-based),
+            // then _currInputProcessed must be -start.
+            _currInputProcessed = -start;
+        } else {
+            // For subsequent calls, accumulate the length of the previous buffer.
+            // _origBufferLen holds the length of the *previous* input chunk (end-start from previous call).
             _currInputProcessed += _origBufferLen;
+        }
 
         // Also need to adjust row start, to work as if it extended into the past wrt new buffer
+        // This calculation correctly shifts the row start based on the new buffer's 'start'
+        // and the previously processed portion of the current line.
+        // For the first call (where _inputBuffer was null), _inputEnd and _currInputRowStart are 0.
+        // So, _currInputRowStart = start - (0 - 0) = start.
+        // This correctly sets the 0-based column for `_inputPtr - _currInputRowStart` to 0 (since _inputPtr becomes 'start').
         _currInputRowStart = start - (_inputEnd - _currInputRowStart);
 
-        // And then update buffer settings
+        // And then update buffer settings for the NEW input
         _inputBuffer = buf;
         _inputPtr = start;
         _inputEnd = end;
-        _origBufferLen = end - start;
+        _origBufferLen = end - start; // Store length of THIS buffer for the NEXT feedInput call
     }
\ No newline at end of file
