diff --git a/tmp/a3f0c23e-4cf2-4604-b491-9b6b74bc5c6f_buggy.java b/tmp/11ff2354-f7d9-45d3-bee9-fadd12cfe1d3_fixed.java
index 0722547..288d682 100644
--- a/tmp/a3f0c23e-4cf2-4604-b491-9b6b74bc5c6f_buggy.java
+++ b/tmp/11ff2354-f7d9-45d3-bee9-fadd12cfe1d3_fixed.java
@@ -1,26 +1,34 @@
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
             _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
         // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
         // Time to update pointers first
-        _currInputProcessed += _origBufferLen;
+
+        // _currInputProcessed: total bytes from previous *logical* input segments
+        // _origBufferLen: length of the *previous* effective input segment (end - start from previous call)
+        // The problem is that _inputPtr will be set to 'start' (an absolute index in 'buf'),
+        // but for JsonLocation, _inputPtr needs to be relative to the logical start of the current segment.
+        // To compensate, _currInputProcessed must subtract the 'start' offset for the current segment.
+        _currInputProcessed = (_currInputProcessed + _origBufferLen) - start;
 
         // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+        // _currInputRowStart represents offset of line start within the *current* input buffer.
+        // This calculation should remain correct as it maintains relative offset.
+        _currInputRowStart = start - (_inputEnd - _currInputRowRowStart); // The correct field is _currInputRowStart, typo in the comment
 
         // And then update buffer settings
         _inputBuffer = buf;
-        _inputPtr = start;
+        _inputPtr = start; // _inputPtr remains the absolute index in 'buf'
         _inputEnd = end;
-        _origBufferLen = end - start;
+        _origBufferLen = end - start; // Store length of this *current* effective segment for next iteration
     }
