diff --git a/tmp/491ec127-1e5d-42fc-b2dd-c88ec96db9ae_buggy.java b/tmp/cb498966-a3dd-4059-9a5c-6256919bf68e_fixed.java
index 0722547..9985694 100644
--- a/tmp/491ec127-1e5d-42fc-b2dd-c88ec96db9ae_buggy.java
+++ b/tmp/cb498966-a3dd-4059-9a5c-6256919bf68e_fixed.java
@@ -1,26 +1,18 @@
-    @Override
-    public void feedInput(byte[] buf, int start, int end) throws IOException
-    {
-        // Must not have remaining input
-        if (_inputPtr < _inputEnd) {
-            _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
-        }
-        if (end < start) {
-            _reportError("Input end (%d) may not be before start (%d)", end, start);
-        }
-        // and shouldn't have been marked as end-of-input
-        if (_endOfInput) {
-            _reportError("Already closed, can not feed more input");
-        }
     // Time to update pointers first
-        _currInputProcessed += _origBufferLen;
+    // Note: old `_inputEnd` is actually the length of data from previous buffer.
+    _currInputProcessed += _inputEnd; // accumulate previous buffer's full length (from its 0 to _inputEnd)
 
     // Also need to adjust row start, to work as if it extended into the past wrt new buffer
+    // This line is often associated with column tracking.
     _currInputRowStart = start - (_inputEnd - _currInputRowStart);
 
     // And then update buffer settings
     _inputBuffer = buf;
     _inputPtr = start;
     _inputEnd = end;
     _origBufferLen = end - start;
-    }
+
+    // Now, after new _inputPtr is set, adjust _currInputProcessed such that
+    // `_currInputProcessed + _inputPtr` (which is `start`) yields the logical
+    // current byte offset. This means subtracting `start` from `_currInputProcessed`.
+    _currInputProcessed -= _inputPtr; // Equivalent to `_currInputProcessed -= start;`
\ No newline at end of file
