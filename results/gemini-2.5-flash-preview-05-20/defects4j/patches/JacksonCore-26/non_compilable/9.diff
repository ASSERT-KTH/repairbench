diff --git a/tmp/8f27b8a3-f90a-48cc-b76a-fc9c79fd14ba_buggy.java b/tmp/01305981-0824-4209-b80a-7e21e44cf6a9_fixed.java
index 0722547..e9e16a3 100644
--- a/tmp/8f27b8a3-f90a-48cc-b76a-fc9c79fd14ba_buggy.java
+++ b/tmp/01305981-0824-4209-b80a-7e21e44cf6a9_fixed.java
@@ -1,26 +1,49 @@
+    // This field needs to be added to the class definition.
+    // It is initialized to 0.
+    // private int _firstInputStart = 0;
+
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
             _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
         // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
+
+        // Capture the 'start' offset of the very first buffer fed.
+        // This value will be used to rebase the overall byte offset calculation.
+        // This assumes _inputBuffer being null indicates the first feed.
+        if (_inputBuffer == null) {
+            _firstInputStart = start;
+        }
+
         // Time to update pointers first
+        // _currInputProcessed accumulates the length of the *previous* effective input buffer segment.
+        // The _origBufferLen holds the length of the segment from the prior feedInput call.
         _currInputProcessed += _origBufferLen;
 
         // Also need to adjust row start, to work as if it extended into the past wrt new buffer
+        // This calculation is part of the original fix for core#531.
         _currInputRowStart = start - (_inputEnd - _currInputRowStart);
 
         // And then update buffer settings
         _inputBuffer = buf;
         _inputPtr = start;
         _inputEnd = end;
-        _origBufferLen = end - start;
+        _origBufferLen = end - start; // Store length of the currently fed segment for next call.
+
+        // After updating _currInputProcessed, _inputPtr, and _origBufferLen,
+        // we adjust _currInputProcessed to effectively rebase the byte offset.
+        // The goal is that (absolute_stream_offset) = _currInputProcessed + _inputPtr - _firstInputStart.
+        // Since `JsonLocation` uses `_currInputProcessed + _inputPtr`, we subtract `_firstInputStart` from `_currInputProcessed`.
+        // This adjustment is applied to _currInputProcessed every time,
+        // ensuring that the `_firstInputStart` base is consistently removed.
+        _currInputProcessed -= _firstInputStart;
     }
\ No newline at end of file
