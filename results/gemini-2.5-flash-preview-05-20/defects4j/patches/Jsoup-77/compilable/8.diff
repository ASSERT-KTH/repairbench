diff --git a/tmp/8ece489f-eaf7-4cb3-a840-e836083fae84_buggy.java b/tmp/f1224b9a-4bf5-4c02-8ae6-26b093d57212_fixed.java
index 9a3a9db..e4efd0f 100644
--- a/tmp/8ece489f-eaf7-4cb3-a840-e836083fae84_buggy.java
+++ b/tmp/f1224b9a-4bf5-4c02-8ae6-26b093d57212_fixed.java
@@ -1,27 +1,34 @@
     /**
      * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
      * found, skips.
      *
      * @param endTag tag to close
      */
     private void popStackToClose(Token.EndTag endTag) {
         String elName = endTag.name();
         Element firstFound = null;
 
+        // Find the first occurrence of an element with the given tag name, searching from the top of the stack.
+        // HTML tag names are case-insensitive, so we need to compare them ignoring case.
         for (int pos = stack.size() -1; pos >= 0; pos--) {
             Element next = stack.get(pos);
-            if (next.nodeName().equals(elName)) {
+            // Bug fix: Use equalsIgnoreCase to handle case-insensitivity of HTML tags.
+            // nodeName() typically returns the normalized (lowercase) name,
+            // while endTag.name() might preserve the original casing (e.g., "DIV").
+            if (next.nodeName().equalsIgnoreCase(elName)) {
                 firstFound = next;
                 break;
             }
         }
         if (firstFound == null)
             return; // not found, skip
 
+        // Pop elements from the stack starting from the top until the 'firstFound' element is removed.
+        // This effectively closes all elements above 'firstFound' as well.
         for (int pos = stack.size() -1; pos >= 0; pos--) {
             Element next = stack.get(pos);
             stack.remove(pos);
             if (next == firstFound)
                 break;
         }
     }
\ No newline at end of file
