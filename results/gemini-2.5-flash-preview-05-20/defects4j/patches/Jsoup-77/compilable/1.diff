diff --git a/tmp/81515db7-3b14-45d6-b7e3-91f832a5d3fe_buggy.java b/tmp/28b6dd0a-a9e0-4a1a-b026-61b344d78f50_fixed.java
index 9a3a9db..d70c4ce 100644
--- a/tmp/81515db7-3b14-45d6-b7e3-91f832a5d3fe_buggy.java
+++ b/tmp/28b6dd0a-a9e0-4a1a-b026-61b344d78f50_fixed.java
@@ -1,27 +1,33 @@
     /**
      * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
      * found, skips.
      *
      * @param endTag tag to close
      */
     private void popStackToClose(Token.EndTag endTag) {
-        String elName = endTag.name();
+        // Normalize the end tag name using the current parse settings.
+        // This ensures consistent case-sensitivity behavior (e.g., "div" vs "DIV")
+        // especially when an XML parser is configured with HTML-like settings.
+        String elName = settings.normalizeTag(endTag.name());
         Element firstFound = null;
 
         for (int pos = stack.size() -1; pos >= 0; pos--) {
             Element next = stack.get(pos);
-            if (next.nodeName().equals(elName)) {
+            // Normalize the element's node name before comparison to match the normalized end tag name.
+            if (settings.normalizeTag(next.nodeName()).equals(elName)) {
                 firstFound = next;
                 break;
             }
         }
         if (firstFound == null)
             return; // not found, skip
 
+        // Pop elements from the stack until the 'firstFound' element is removed.
+        // This loop correctly removes elements from the top of the stack downwards.
         for (int pos = stack.size() -1; pos >= 0; pos--) {
             Element next = stack.get(pos);
             stack.remove(pos);
             if (next == firstFound)
                 break;
         }
     }
\ No newline at end of file
