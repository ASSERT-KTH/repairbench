diff --git a/tmp/27e67161-6752-4691-8e79-882ac75e4e8a_buggy.java b/tmp/2d1ba094-a03c-402e-9414-7af9948b2517_fixed.java
index 42c5923..e1d8378 100644
--- a/tmp/27e67161-6752-4691-8e79-882ac75e4e8a_buggy.java
+++ b/tmp/2d1ba094-a03c-402e-9414-7af9948b2517_fixed.java
@@ -1,89 +1,103 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+        // try to parse improper fraction (e.g., "3/4" or "-3/4")
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
+        // Save position before parsing numerator for error reporting
+        int numParseStart = pos.getIndex();
         // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs should be leading, invalid expression
+        // Minus signs are only allowed in the whole number part.
+        // If whole part was parsed, numerator must be non-negative.
+        if (num.intValue() < 0) {
+            pos.setErrorIndex(numParseStart); // Point to the start of the invalid numerator
+            pos.setIndex(initialIndex);
+            return null;
+        }
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+        case 0 : // End of string reached, '/' not found
+            // Fall through to default: Missing '/' is an error for a mixed number.
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
             // invalid '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
+        // Save position before parsing denominator for error reporting
+        int denParseStart = pos.getIndex();
         // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs must be leading, invalid
+        // Minus signs are only allowed in the whole number part.
+        // Denominator must always be positive.
+        if (den.intValue() < 0) {
+            pos.setErrorIndex(denParseStart); // Point to the start of the invalid denominator
+            pos.setIndex(initialIndex);
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+        return new Fraction(((long)Math.abs(w) * d) + n * MathUtils.sign(w), d); // Cast Math.abs(w) * d to long to prevent overflow before addition.
     }
\ No newline at end of file
