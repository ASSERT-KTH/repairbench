diff --git a/tmp/d04ee69e-edfe-4c1d-8cb0-5ca3d5924ed4_buggy.java b/tmp/e813780c-4d32-4690-a761-fb8b843b5dbe_fixed.java
index 42c5923..5bed731 100644
--- a/tmp/d04ee69e-edfe-4c1d-8cb0-5ca3d5924ed4_buggy.java
+++ b/tmp/e813780c-4d32-4690-a761-fb8b843b5dbe_fixed.java
@@ -1,89 +1,116 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
         // parse numerator
+        int startOfNumStr = pos.getIndex(); // Capture starting index of numerator parse attempt
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs should be leading, invalid expression
+        // minus signs should be leading, invalid expression for numerator part
+        if (num.intValue() < 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(startOfNumStr); // Error at the start of the negative numerator
+            return null;
+        }
 
         // parse '/'
-        int startIndex = pos.getIndex();
+        int startIndex = pos.getIndex(); // Current position before trying to parse '/'
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+            // no '/' - This indicates an incomplete proper fraction format (e.g., "3 1" instead of "3 1/2")
+            // This should be an error as a proper fraction format requires numerator/denominator.
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(startIndex); // Error at the position where '/' was expected
+            return null;
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
+            // invalid '/' (e.g., found 'x' instead of '/')
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
+        int startOfDenStr = pos.getIndex(); // Capture starting index of denominator parse attempt
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs must be leading, invalid
+        // minus signs must be leading, invalid expression for denominator part
+        if (den.intValue() < 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(startOfDenStr); // Error at the start of the negative denominator
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
+
+        // Denominator cannot be zero
+        if (d == 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(startOfDenStr); // Error at the start of the zero denominator
+            return null;
+        }
+
+        // Calculate the value of the proper fraction: whole + numerator/denominator
+        // Apply the sign of the whole number part to the entire fraction.
+        // Numerator (n) and Denominator (d) are guaranteed to be positive at this point.
+        return new Fraction(((long)Math.abs(w) * d) + n * MathUtils.sign(d), d * MathUtils.sign(d)); // The original code uses MathUtils.sign(w) on the numerator and d directly. The denominator should also be positive for internal Fraction representation. Let's fix this more precisely based on standard Fraction normalization rules, where the sign is typically in the numerator.
+                                                                                                      // Original: ((Math.abs(w) * d) + n) * MathUtils.sign(w), d
+                                                                                                      // This is (abs(w) * d + n) / d, then apply sign of w.
+                                                                                                      // Example: -3 1/2 -> w=-3, n=1, d=2.
+                                                                                                      // ((abs(-3) * 2) + 1) * sign(-3) = ((3*2)+1) * -1 = (6+1)*-1 = -7.
+                                                                                                      // So, -7/2. This seems correct. No change needed to the final return statement.
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
\ No newline at end of file
