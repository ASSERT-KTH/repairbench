diff --git a/tmp/de1e515f-43ca-42c5-9e00-483a55186c28_buggy.java b/tmp/e8fa4908-1608-4a36-8e50-e5a9cd20d5f6_fixed.java
index 42c5923..db939cb 100644
--- a/tmp/de1e515f-43ca-42c5-9e00-483a55186c28_buggy.java
+++ b/tmp/e8fa4908-1608-4a36-8e50-e5a9cd20d5f6_fixed.java
@@ -1,89 +1,113 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+        // try to parse improper fraction (e.g., "3/4" or "-3/4")
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
-            // character examined.
+            // by the number format parser.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
+        // Store index before parsing numerator to set error index if it's negative
+        int numStartIndex = pos.getIndex();
         // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
-            // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs should be leading, invalid expression
+        // As per the specification: minus signs are only allowed in the whole number part.
+        // Therefore, the numerator of the fractional part must be non-negative.
+        if (num.intValue() < 0) {
+            pos.setIndex(initialIndex); // Reset parsing position to the start of the overall attempt
+            pos.setErrorIndex(numStartIndex); // Point error to the beginning of the numerator where the invalid minus sign was found
+            return null;
+        }
 
         // parse '/'
-        int startIndex = pos.getIndex();
+        int startIndex = pos.getIndex(); // Store index before checking for '/'
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+            // No '/' found. If whole and num are present, it implies a "W N" format.
+            // According to the specification, this should be a "W N/D" format.
+            // If '/' is missing, it's an invalid format for a mixed fraction.
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(startIndex); // Error at the point where '/' was expected
+            return null;
         case '/' :
-            // found '/', continue parsing denominator
+            // Found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
+            // Invalid character where '/' was expected
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+            pos.setErrorIndex(startIndex); // Error at the point where '/' was expected
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
+        // Store index before parsing denominator to set error index if it's negative or zero
+        int denStartIndex = pos.getIndex();
         // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
-            // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs must be leading, invalid
+        // As per the specification: minus signs are only allowed in the whole number part.
+        // Therefore, the denominator must be positive (cannot be negative or zero).
+        if (den.intValue() < 0 || den.intValue() == 0) {
+            pos.setIndex(initialIndex); // Reset parsing position to the start of the overall attempt
+            pos.setErrorIndex(denStartIndex); // Point error to the beginning of the denominator where the invalid sign/zero was found
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+        
+        // The original formula `((Math.abs(w) * d) + n) * MathUtils.sign(w)`
+        // correctly handles the sign for `w != 0` when `n` and `d` are positive.
+        // However, if `w == 0`, `MathUtils.sign(0)` is `0`, which makes the numerator `0`.
+        // For "0 1/2", the result should be `1/2`, not `0/2`.
+        if (w == 0) {
+            return new Fraction(n, d);
+        } else {
+            return new Fraction(((long)Math.abs(w) * d) + n, d).multiply(MathUtils.sign(w));
+        }
     }
\ No newline at end of file
