diff --git a/tmp/27caeb0b-a76a-4e20-a2d8-b2a991a1bb69_buggy.java b/tmp/addc217e-e276-4b8b-9ecd-fb8584182cab_fixed.java
index 42c5923..539998f 100644
--- a/tmp/27caeb0b-a76a-4e20-a2d8-b2a991a1bb69_buggy.java
+++ b/tmp/addc217e-e276-4b8b-9ecd-fb8584182cab_fixed.java
@@ -1,89 +1,110 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
         // parse numerator
+        int numeratorStartIndex = pos.getIndex(); // Store index for error reporting
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
         // minus signs should be leading, invalid expression
+        // A negative numerator is not allowed in mixed number format (e.g., "2 -1/2").
+        // The negative sign should only apply to the whole number part.
+        if (num.intValue() < 0) {
+            pos.setIndex(initialIndex); // Restore original position for overall parse failure
+            pos.setErrorIndex(numeratorStartIndex); // Point error to start of negative numerator
+            return null;
+        }
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
             // no '/'
             // return num as a fraction
+            // This path suggests `whole` was parsed, then `num`, and no '/' was found.
+            // If `whole` was significant (e.g., not zero), returning `new Fraction(num.intValue(), 1)`
+            // ignores `whole`. However, this behavior is not related to the reported bug.
             return new Fraction(num.intValue(), 1);
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
             // invalid '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
+        int denominatorStartIndex = pos.getIndex(); // Store index for error reporting
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
         // minus signs must be leading, invalid
+        // A negative denominator is not allowed.
+        if (den.intValue() < 0) {
+            pos.setIndex(initialIndex); // Restore original position for overall parse failure
+            pos.setErrorIndex(denominatorStartIndex); // Point error to start of negative denominator
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
+        // Calculate the value of the mixed fraction.
+        // For a mixed number w n/d, the value is (abs(w) * d + n) / d.
+        // The sign of w is then applied to the result (e.g., -3 1/2 = -( (3*2+1)/2 ) = -7/2).
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
\ No newline at end of file
