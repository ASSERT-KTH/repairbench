diff --git a/tmp/cae7d913-a3e1-4911-9d9b-f18fe2351736_buggy.java b/tmp/4bf1eb5d-3968-40e7-b483-3e811023d9c4_fixed.java
index 42c5923..ccf2c20 100644
--- a/tmp/cae7d913-a3e1-4911-9d9b-f18fe2351736_buggy.java
+++ b/tmp/4bf1eb5d-3968-40e7-b483-3e811023d9c4_fixed.java
@@ -1,89 +1,119 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+        // try to parse improper fraction (e.g., "7/2" or "5")
+        // This is handled by the superclass FractionFormat.
+        // If it parses successfully, it's not a mixed number, so return it.
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
-        int initialIndex = pos.getIndex();
+        int initialIndex = pos.getIndex(); // Store initial index for resetting on error
 
-        // parse whitespace
+        // parse whitespace (e.g., " 1 2/3")
         parseAndIgnoreWhitespace(source, pos);
 
-        // parse whole
+        // parse whole number (e.g., "1" in "1 2/3")
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // No whole number found. This means it's not a mixed fraction format.
+            // Since super.parse failed, it's not a simple fraction either.
+            // So, this is an invalid format.
+            // The error index should already be set by getWholeFormat().parse if it failed.
             pos.setIndex(initialIndex); 
             return null;
         }
 
-        // parse whitespace
+        // parse whitespace (e.g., "1  2/3")
         parseAndIgnoreWhitespace(source, pos);
         
-        // parse numerator
+        // parse numerator (e.g., "2" in "1 2/3")
+        // Store the current index for error reporting if numerator is invalid
+        int numStartIndex = pos.getIndex(); 
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // No numerator found. Invalid format.
+            // Error index should be set by getNumeratorFormat().parse.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs should be leading, invalid expression
+        // As per Javadoc: "Minus signs are only allowed in the whole number part".
+        // Therefore, numerator must be positive.
+        if (num.intValue() < 0) {
+            pos.setErrorIndex(numStartIndex); // Point to the start of the negative numerator
+            pos.setIndex(initialIndex);      // Reset overall parsing position
+            return null;
+        }
 
-        // parse '/'
-        int startIndex = pos.getIndex();
+        // parse '/' character (e.g., "1 2/3")
+        // Store current index for error reporting if '/' is missing or invalid
+        int slashStartIndex = pos.getIndex(); 
         char c = parseNextCharacter(source, pos);
         switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
-        case '/' :
-            // found '/', continue parsing denominator
+        case 0 : // End of string reached, no '/' found. E.g., "2 1"
+            // This is an invalid mixed number format (missing denominator).
+            // A whole number and numerator were parsed, but no division symbol.
+            pos.setErrorIndex(slashStartIndex); // Point to where '/' was expected
+            pos.setIndex(initialIndex);
+            return null;
+        case '/' : // Found '/', continue parsing denominator
             break;
-        default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
+        default : // Found something other than '/', e.g., "2 1 x"
+            // Invalid character where '/' was expected.
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+            pos.setErrorIndex(slashStartIndex); // Point to the invalid character
             return null;
         }
 
-        // parse whitespace
+        // parse whitespace (e.g., "1 2 / 3")
         parseAndIgnoreWhitespace(source, pos);
 
-        // parse denominator
+        // parse denominator (e.g., "3" in "1 2/3")
+        // Store the current index for error reporting if denominator is invalid
+        int denStartIndex = pos.getIndex(); 
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // No denominator found. Invalid format.
+            // Error index should be set by getDenominatorFormat().parse.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs must be leading, invalid
+        // As per Javadoc: "Minus signs are only allowed in the whole number part".
+        // Therefore, denominator must be positive.
+        if (den.intValue() < 0) {
+            pos.setErrorIndex(denStartIndex); // Point to the start of the negative denominator
+            pos.setIndex(initialIndex);      // Reset overall parsing position
+            return null;
+        }
+
+        // Denominator cannot be zero.
+        if (den.intValue() == 0) {
+            pos.setErrorIndex(denStartIndex); // Point to the zero denominator
+            pos.setIndex(initialIndex);
+            return null;
+        }
 
+        // Construct the Fraction object from parsed components.
+        // The sign of the whole number determines the sign of the resulting fraction.
+        // Numerator and denominator are positive due to checks above.
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
+        
+        // Formula for mixed numbers: whole + numerator/denominator
+        // = (abs(whole) * denominator + numerator) / denominator, then apply sign of whole.
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
\ No newline at end of file
