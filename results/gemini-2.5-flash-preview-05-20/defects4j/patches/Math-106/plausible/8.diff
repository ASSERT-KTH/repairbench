diff --git a/tmp/d9a9c452-46d5-4761-a44b-c83e0336f72e_buggy.java b/tmp/c8f3665a-f905-49c3-b5c0-8e96814ab755_fixed.java
index 42c5923..fdd6dca 100644
--- a/tmp/d9a9c452-46d5-4761-a44b-c83e0336f72e_buggy.java
+++ b/tmp/c8f3665a-f905-49c3-b5c0-8e96814ab755_fixed.java
@@ -1,89 +1,107 @@
     /**
      * Parses a string to produce a {@link Fraction} object. This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      *
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+        // try to parse improper fraction or simple whole number (e.g., "3/2" or "5")
+        // This is done by the superclass (FractionFormat) which handles formats like "N/D" or "N".
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
 
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse numerator
+        int numStartIndex = pos.getIndex(); // Capture the start index of the numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs should be leading, invalid expression
+        // Minus signs are only allowed in the whole number part.
+        // Numerator in the fractional part (N/D) must be non-negative.
+        // It must also be less than the denominator but that check is done later,
+        // this method just ensures it's a valid number for the numerator position.
+        if (num.intValue() < 0) {
+            pos.setErrorIndex(numStartIndex); // Error points to the start of the negative numerator
+            pos.setIndex(initialIndex); // Reset the parsing position
+            return null;
+        }
 
         // parse '/'
-        int startIndex = pos.getIndex();
+        int slashStartIndex = pos.getIndex(); // Capture the start index for the expected '/'
         char c = parseNextCharacter(source, pos);
         switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
         case '/' :
             // found '/', continue parsing denominator
             break;
+        case 0 :
+            // End of string, but a '/' was expected after whole and numerator.
+            // This case handles inputs like "2 3" which should be an error for a mixed fraction.
+            // Fall through to default error handling.
         default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
+            // invalid character, '/' expected.
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+            pos.setErrorIndex(slashStartIndex); // Error points to where '/' was expected
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
+        int denStartIndex = pos.getIndex(); // Capture the start index of the denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs must be leading, invalid
+        // Denominator must be strictly positive.
+        // Minus signs are only allowed in the whole number part.
+        if (den.intValue() <= 0) {
+            pos.setErrorIndex(denStartIndex); // Error points to the start of the invalid denominator
+            pos.setIndex(initialIndex); // Reset the parsing position
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
+        // Calculate the value of the mixed fraction.
+        // The sign of the whole number (w) determines the sign of the entire fraction.
+        // The numerator (n) and denominator (d) of the fractional part must be positive.
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
\ No newline at end of file
