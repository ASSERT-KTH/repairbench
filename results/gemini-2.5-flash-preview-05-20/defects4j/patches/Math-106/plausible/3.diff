diff --git a/tmp/511e23bb-ebff-4e3e-b839-8ee62fca7828_buggy.java b/tmp/a7306d91-5be8-4dc4-a8e9-ec1a8119940e_fixed.java
index 42c5923..4a9e339 100644
--- a/tmp/511e23bb-ebff-4e3e-b839-8ee62fca7828_buggy.java
+++ b/tmp/a7306d91-5be8-4dc4-a8e9-ec1a8119940e_fixed.java
@@ -1,89 +1,127 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+        // try to parse improper fraction (e.g., "5/2" or "-5/2")
+        // This handles cases like "2/3" or "-2/3" that are not mixed fractions.
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
-            // invalid integer number
+            // invalid integer number or no whole number part.
             // set index back to initial, error index should already be set
-            // character examined.
+            // by getWholeFormat().parse if it failed.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
         // parse numerator
+        int numStartIndex = pos.getIndex(); // Capture start position of numerator for error handling
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs should be leading, invalid expression
+        // Minus signs are only allowed in the whole number part.
+        // Numerator must be positive.
+        if (num.intValue() < 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(numStartIndex); // Point to the invalid minus sign
+            return null;
+        }
 
         // parse '/'
-        int startIndex = pos.getIndex();
+        int slashStartIndex = pos.getIndex(); // Capture start position of '/' for error handling
         char c = parseNextCharacter(source, pos);
         switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+        case 0 : // No more characters, no '/' found.
+            // If whole and numerator are parsed but no '/', it's an error for mixed fraction format.
+            // E.g., "2 3" should not be parsed as a mixed number (2 + 3/1).
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(slashStartIndex); // Error at the point where '/' was expected.
+            return null;
         case '/' :
             // found '/', continue parsing denominator
             break;
-        default :
-            // invalid '/'
+        default : // Invalid character instead of '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+            pos.setErrorIndex(slashStartIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
+        int denStartIndex = pos.getIndex(); // Capture start position of denominator for error handling
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
         
-            // minus signs must be leading, invalid
+        // Minus signs are only allowed in the whole number part.
+        // Denominator must be positive.
+        if (den.intValue() < 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(denStartIndex); // Point to the invalid minus sign
+            return null;
+        }
         
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+
+        // Denominator cannot be zero
+        if (d == 0) {
+             pos.setIndex(initialIndex);
+             pos.setErrorIndex(denStartIndex); // Point to the zero denominator
+             return null;
+        }
+
+        // Convert W N/D to an improper fraction: W + N/D = (W*D + N)/D
+        // The sign of the whole number (W) applies to the entire fraction.
+        // At this point, 'n' and 'd' are guaranteed to be positive.
+        long numeratorValue;
+        if (w == 0) {
+            // If the whole number is zero (e.g., "0 1/2"), the fraction is simply n/d.
+            numeratorValue = n;
+        } else {
+            // For non-zero whole numbers, the magnitude of the numerator is |W|*D + N.
+            // The sign is determined by W. Example: -3 1/2 means -(3 + 1/2) = -7/2.
+            numeratorValue = ((long)Math.abs(w) * d) + n;
+            numeratorValue *= MathUtils.sign(w);
+        }
+        
+        return new Fraction((int)numeratorValue, d);
     }
\ No newline at end of file
