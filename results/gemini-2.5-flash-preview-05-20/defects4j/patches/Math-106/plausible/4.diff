diff --git a/tmp/4325011e-7ff6-4484-8f13-cffc782fbf38_buggy.java b/tmp/39ccd560-c125-4db5-8fe0-c86ba3564e76_fixed.java
index 42c5923..1891f27 100644
--- a/tmp/4325011e-7ff6-4484-8f13-cffc782fbf38_buggy.java
+++ b/tmp/39ccd560-c125-4db5-8fe0-c86ba3564e76_fixed.java
@@ -1,89 +1,107 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+        // try to parse improper fraction (e.g., "1/2", "-3/4", "5/2")
+        // This might be handled by a parent parser or a specific FractionFormat.
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
-        // parse whitespace
+        // parse whitespace before whole number
         parseAndIgnoreWhitespace(source, pos);
 
-        // parse whole
+        // parse whole number part
+        int startWhole = pos.getIndex(); // Capture position before parsing whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // No whole number found or invalid format
             pos.setIndex(initialIndex);
+            // pos.setErrorIndex() might already be set by getWholeFormat().parse if it failed
             return null;
         }
 
-        // parse whitespace
+        // parse whitespace after whole number
         parseAndIgnoreWhitespace(source, pos);
         
-        // parse numerator
+        // parse numerator part
+        int startNum = pos.getIndex(); // Capture position before parsing numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // No numerator found or invalid format
             pos.setIndex(initialIndex);
+            // pos.setErrorIndex() might already be set by getNumeratorFormat().parse
             return null;
         }
         
-            // minus signs should be leading, invalid expression
+        // Bug Fix: Minus signs are only allowed in the whole number part.
+        // Numerator cannot be negative for "W N/D" format.
+        if (num.intValue() < 0) {
+            pos.setIndex(initialIndex); // Reset to original start
+            pos.setErrorIndex(startNum); // Point to the negative sign in the numerator
+            return null;
+        }
 
-        // parse '/'
-        int startIndex = pos.getIndex();
+        // parse '/' separator
+        int slashStartIndex = pos.getIndex(); // Capture position before parsing '/'
         char c = parseNextCharacter(source, pos);
         switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+        case 0 : // End of string or no more characters found
+            // If we parsed a whole number and a numerator, but no '/' and denominator,
+            // this is not a valid proper fraction format "W N/D".
+            // The original code was returning num as a fraction (e.g., "3 4" -> 4/1),
+            // which ignores the whole part and is generally incorrect for "W N/D" format.
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(slashStartIndex); // Point to where '/' was expected
+            return null;
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
+            // Found an unexpected character instead of '/'
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+            pos.setErrorIndex(slashStartIndex); // Point to the character that was found instead of '/'
             return null;
         }
 
-        // parse whitespace
+        // parse whitespace after '/'
         parseAndIgnoreWhitespace(source, pos);
 
-        // parse denominator
+        // parse denominator part
+        int startDen = pos.getIndex(); // Capture position before parsing denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+            // No denominator found or invalid format
             pos.setIndex(initialIndex);
+            // pos.setErrorIndex() might already be set by getDenominatorFormat().parse
             return null;
         }
         
-            // minus signs must be leading, invalid
+        // Bug Fix: Minus signs are only allowed in the whole number part.
+        // Denominator cannot be negative for "W N/D" format.
+        if (den.intValue() < 0) {
+            pos.setIndex(initialIndex); // Reset to original start
+            pos.setErrorIndex(startDen); // Point to the negative sign in the denominator
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
+        
+        // Construct the fraction (e.g., -3 1/2 = (-3 * 2 + 1) / 2 = -7/2)
+        // The current formula correctly handles negative whole numbers, assuming n is positive.
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
\ No newline at end of file
