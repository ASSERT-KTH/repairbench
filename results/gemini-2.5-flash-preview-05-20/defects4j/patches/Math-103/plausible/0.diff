diff --git a/tmp/e19ad59e-fb21-47d0-8ff5-53411ae01382_buggy.java b/tmp/26250d04-d775-4a83-a9a9-3f33c80d023b_fixed.java
index 6cfa79b..20298bb 100644
--- a/tmp/e19ad59e-fb21-47d0-8ff5-53411ae01382_buggy.java
+++ b/tmp/26250d04-d775-4a83-a9a9-3f33c80d023b_fixed.java
@@ -1,12 +1,28 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+            // Calculate the number of standard deviations from the mean
+            double z = (x - mean) / standardDeviation;
+
+            // Handle extreme values directly to prevent convergence issues and return 0 or 1.
+            // This aligns with the Javadoc: "unless x is more than 20 standard deviations from the mean,
+            // in which case the convergence exception is caught and 0 or 1 is returned."
+            // By returning early for these extreme values, we effectively "catch" the potential
+            // exception by preventing the problematic calculation altogether.
+            if (z > 20) {
+                return 1.0;
+            }
+            if (z < -20) {
+                return 0.0;
+            }
+
+            // For values within the typical range (inclusive of 20 standard deviations),
+            // use the Erf function. The argument to Erf.erf is z / sqrt(2).
+            return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));
     }
\ No newline at end of file
