diff --git a/tmp/213b8c8c-5dd0-4517-9258-bdf19b5af4ed_buggy.java b/tmp/b79ae2b1-1445-4bb1-b11e-4d5a7d398389_fixed.java
index 6cfa79b..f569809 100644
--- a/tmp/213b8c8c-5dd0-4517-9258-bdf19b5af4ed_buggy.java
+++ b/tmp/b79ae2b1-1445-4bb1-b11e-4d5a7d398389_fixed.java
@@ -1,12 +1,24 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        // Calculate the number of standard deviations x is from the mean
+        double z = (x - mean) / standardDeviation;
+
+        // According to the Javadoc, for values more than 20 standard deviations
+        // from the mean, return 0 or 1 to avoid convergence issues with Erf.erf.
+        // This specifically addresses the MaxIterationsExceededException for extreme values.
+        if (z < -20) {
+            return 0.0;
+        } else if (z > 20) {
+            return 1.0;
+        } else {
+            // For values within 20 standard deviations, use the standard formula.
+            return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));
+        }
     }
\ No newline at end of file
