diff --git a/tmp/0a9c7bc1-9dcc-4934-8071-49d01c052fd8_buggy.java b/tmp/45becdf1-8ed4-4322-bbc1-1fcc270fd965_fixed.java
index 6cfa79b..cd826c8 100644
--- a/tmp/0a9c7bc1-9dcc-4934-8071-49d01c052fd8_buggy.java
+++ b/tmp/45becdf1-8ed4-4322-bbc1-1fcc270fd965_fixed.java
@@ -1,12 +1,30 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        // The formula for CDF of Normal Distribution is 0.5 * (1 + erf((x - mean) / (sigma * sqrt(2))))
+        double arg = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+
+        try {
+            return 0.5 * (1.0 + Erf.erf(arg));
+        } catch (MathException ex) {
+            // As per Javadoc, if Erf.erf fails to converge for extreme values,
+            // we should return 0 or 1 directly.
+            // The threshold is 20 standard deviations from the mean.
+            double z = (x - mean) / standardDeviation;
+            if (z > 20.0) { // x is more than 20 standard deviations above the mean
+                return 1.0;
+            } else if (z < -20.0) { // x is more than 20 standard deviations below the mean
+                return 0.0;
+            } else {
+                // If the convergence exception occurs for a value that is not extreme,
+                // re-throw the original exception.
+                throw ex;
+            }
+        }
     }
\ No newline at end of file
