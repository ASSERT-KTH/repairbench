diff --git a/tmp/77e4ebc4-544b-451e-a7c3-55fe3506b0e8_buggy.java b/tmp/11efba23-3c9a-44ea-bd8d-885e9bf8ad81_fixed.java
index 6cfa79b..4c4274e 100644
--- a/tmp/77e4ebc4-544b-451e-a7c3-55fe3506b0e8_buggy.java
+++ b/tmp/11efba23-3c9a-44ea-bd8d-885e9bf8ad81_fixed.java
@@ -1,12 +1,38 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+            // JIRA MATH-167: For extreme values, NormalDistribution.cumulativeProbability()
+            // should return 0 or 1 directly to prevent MaxIterationsExceededException
+            // from the Erf.erf function, as the probability is effectively 0 or 1.
+            // The Javadoc states "unless x is more than 20 standard deviations from the mean".
+            
+            // Calculate how many standard deviations x is from the mean.
+            // Assuming standardDeviation > 0. If standardDeviation were 0, this
+            // would be a division by zero, but NormalDistribution usually enforces positive std dev.
+            double n = (x - mean) / standardDeviation;
+
+            // Define the threshold for "extreme" values based on standard deviations.
+            // A common value used in such contexts is around 20 standard deviations.
+            final double EXTREME_DEVIATIONS = 20.0;
+
+            // If x is extremely far below the mean, the cumulative probability is effectively 0.
+            if (n <= -EXTREME_DEVIATIONS) {
+                return 0.0;
+            }
+
+            // If x is extremely far above the mean, the cumulative probability is effectively 1.
+            if (n >= EXTREME_DEVIATIONS) {
+                return 1.0;
+            }
+            
+            // Otherwise, calculate the cumulative probability using the error function.
+            // The argument to Erf.erf is (x - mean) / (standardDeviation * sqrt(2)).
+            // Since n = (x - mean) / standardDeviation, the argument becomes n / sqrt(2).
+            return 0.5 * (1.0 + Erf.erf(n / Math.sqrt(2.0)));
     }
\ No newline at end of file
