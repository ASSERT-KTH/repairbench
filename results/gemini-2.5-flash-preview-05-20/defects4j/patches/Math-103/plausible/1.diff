diff --git a/tmp/f583527f-da10-4041-8ef4-7c3cd30b5a67_buggy.java b/tmp/c0efad55-a1cf-4f10-aab2-eb96ade99c29_fixed.java
index 6cfa79b..b5bd9d8 100644
--- a/tmp/f583527f-da10-4041-8ef4-7c3cd30b5a67_buggy.java
+++ b/tmp/c0efad55-a1cf-4f10-aab2-eb96ade99c29_fixed.java
@@ -1,12 +1,25 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        // Calculate the standard score (z-score)
+        double z = (x - mean) / standardDeviation;
+
+        // Check for extreme values as per Javadoc. For values at or beyond 20 standard deviations
+        // from the mean, return 0 or 1 directly to prevent convergence exceptions
+        // from the underlying Erf.erf computation.
+        if (z >= 20) { // x is 20 or more standard deviations above the mean
+            return 1.0;
+        } else if (z <= -20) { // x is 20 or more standard deviations below the mean
+            return 0.0;
+        }
+
+        // For values within this range, proceed with the erf calculation.
+        // The argument to Erf.erf is z / sqrt(2)
+        return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));
     }
\ No newline at end of file
