diff --git a/tmp/dbd500b4-210e-402e-a165-fd84678be494_buggy.java b/tmp/990f8131-d4db-40ed-827a-b92892c0f583_fixed.java
index 63641d0..f62c96b 100644
--- a/tmp/dbd500b4-210e-402e-a165-fd84678be494_buggy.java
+++ b/tmp/990f8131-d4db-40ed-827a-b92892c0f583_fixed.java
@@ -1,33 +1,50 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+    ImmutableList.Builder<TemplateType> keysBuilder = ImmutableList.builder();
+    keysBuilder.addAll(fnType.getTemplateTypeMap().getTemplateKeys());
+
+    // Add templates from the 'this' type, if the function is a method on a templated class.
+    // This is crucial for methods on templated classes, where the template is on the class
+    // rather than directly on the method function itself.
+    if (fnType.getThisType().isTemplatized()) {
+      keysBuilder.addAll(fnType.getThisType().getTemplateTypeMap().getTemplateKeys());
+    }
+
+    // Add templates from the 'new.target' type if the function is a constructor.
+    // This ensures templates used in constructor return types (e.g., `new <T> Class<T>()`)
+    // are also considered for inference.
+    if (fnType.isConstructor() && fnType.getNewTargetType().isTemplatized()) {
+      keysBuilder.addAll(fnType.getNewTargetType().getTemplateTypeMap().getTemplateKeys());
+    }
+
+    final ImmutableList<TemplateType> keys = keysBuilder.build();
+
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
