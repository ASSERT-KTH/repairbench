diff --git a/tmp/e08c2788-62d3-4db0-9e63-b563e949622d_buggy.java b/tmp/6126390f-1fd9-41d9-8f12-53a066dfab5e_fixed.java
index 63641d0..01372b4 100644
--- a/tmp/e08c2788-62d3-4db0-9e63-b563e949622d_buggy.java
+++ b/tmp/6126390f-1fd9-41d9-8f12-53a066dfab5e_fixed.java
@@ -1,33 +1,73 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+    // Try to infer the template types.
+    // Initialize the inferred map with template types inferred from the
+    // 'this' context of the call target. This is crucial for correctly
+    // inferring template types that appear in the 'this' type of the
+    // function itself (e.g., methods on templated classes).
+    Map<TemplateType, JSType> inferred = new HashMap<>();
 
+    // Get the 'this' type of the function being called (fnType) at the call site.
+    // For `new C().method()`, this is the instance type of `C` (e.g., `C<UNKNOWN>`).
+    JSType callsiteThisType = NodeUtil.getThisType(n);
+    // Get the declared 'this' type of the function (fnType).
+    // For `C.prototype.method`, if `@this {C<T>}` is used, this would be `C<T>`.
+    JSType declaredFnThisType = fnType.getThisType();
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    if (declaredFnThisType != null && callsiteThisType != null) {
+      // Check if the declared 'this' type contains any of the template keys
+      // belonging to the function's template map.
+      boolean hasRelevantTemplatesInThis = false;
+      for (TemplateType key : keys) {
+        if (declaredFnThisType.containsTemplateType(key)) {
+          hasRelevantTemplatesInThis = true;
+          break;
+        }
+      }
+
+      if (hasRelevantTemplatesInThis) {
+        TypeUnifier unifier = new TypeUnifier(
+            registry,
+            isLoose(),
+            compiler.getOptions().getLanguageIn());
+        // Unify the declared 'this' type (which may contain template types)
+        // with the actual 'this' type at the call site. This will populate
+        // the unifier's inferred map for these template types.
+        unifier.unify(declaredFnThisType, callsiteThisType);
+        inferred.putAll(unifier.getInferredTemplateTypes());
+      }
+    }
+
+    // Now, infer additional template types from the formal parameters and
+    // the function's return type against the actual arguments and assignment
+    // context. The `inferTemplateTypesFromParameters` method returns a
+    // new map of inferences, which are then combined with (and potentially
+    // override) the 'this' type inferences already made.
+    inferred.putAll(inferTemplateTypesFromParameters(fnType, n));
+
+    // Replace all template types using the complete set of inferred types.
+    // If a template type couldn't be inferred, it will be replaced with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
