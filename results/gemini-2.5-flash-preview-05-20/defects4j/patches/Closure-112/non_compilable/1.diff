diff --git a/tmp/d7d24193-caff-485d-a935-9e1edb918c93_buggy.java b/tmp/ff131a66-5f27-4ef8-ab07-257441f96670_fixed.java
index 63641d0..cdcc4e0 100644
--- a/tmp/d7d24193-caff-485d-a935-9e1edb918c93_buggy.java
+++ b/tmp/ff131a66-5f27-4ef8-ab07-257441f96670_fixed.java
@@ -1,33 +1,55 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Fix for Issue 1058 and similar scenarios:
+    // If a template type was inferred as UNKNOWN, but it was originally
+    // part of the 'this' type of the function being called (fnType),
+    // and this 'UNKNOWN' inference was likely caused by an improper
+    // unification with an UNKNOWN 'this' type of a function literal argument,
+    // we should override this specific UNKNOWN inference.
+    // Instead of resolving the template type to UNKNOWN, we keep it as
+    // the template type itself. This prevents scenarios like 'Class<UNKNOWN>'
+    // when it should remain 'Class<CLASS>' or resolve to a more precise type
+    // from other parts of the signature.
+    JSType originalFnThisType = fnType.getThisType();
+    if (originalFnThisType != null && originalFnThisType.isTemplatedType()) {
+      for (TemplateType templateInThis : originalFnThisType.getTemplateTypes()) {
+        if (inferred.containsKey(templateInThis) && inferred.get(templateInThis).isUnknownType()) {
+          // If a template type within the 'this' type of fnType was inferred to UNKNOWN,
+          // revert this inference to the template type itself.
+          inferred.put(templateInThis, templateInThis);
+        }
+      }
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Replace all template types. If we couldn't find a replacement (e.g.,
+    // after the above patch), we typically replace it with UNKNOWN.
+    // However, if we put the TemplateType itself into 'inferred' as its mapping,
+    // the replacer will preserve it as a TemplateType.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
