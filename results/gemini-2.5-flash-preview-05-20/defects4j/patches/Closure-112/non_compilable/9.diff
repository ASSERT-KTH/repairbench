diff --git a/tmp/7bc112a8-8487-48e9-9dcd-a2afef1ddedf_buggy.java b/tmp/850a5816-0e69-4a9d-84bd-b6ab9a0586ae_fixed.java
index 63641d0..0c18a68 100644
--- a/tmp/7bc112a8-8487-48e9-9dcd-a2afef1ddedf_buggy.java
+++ b/tmp/850a5816-0e69-4a9d-84bd-b6ab9a0586ae_fixed.java
@@ -1,33 +1,69 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
+    // This map will store all inferred template types throughout the process.
+    Map<TemplateType, JSType> inferred = new LinkedHashMap<>();
+
+    Node callTarget = n.getFirstChild();
+    
+    // Step 1: Infer template types from the 'this' context of the call.
+    // The callTarget's JSType (e.g., the function `method` in `obj.method()`)
+    // might already have its 'this' type (e.g., `obj`'s type) partially or fully
+    // specialized, which can provide initial inferences for templates on the
+    // function's 'this' type.
+    JSType actualCallTargetType = callTarget.getJSType();
+    if (actualCallTargetType != null && actualCallTargetType.isFunctionType()) {
+      FunctionType actualFnType = actualCallTargetType.toMaybeFunctionType();
+      JSType actualThisType = actualFnType.getThisType();
+      JSType genericThisType = fnType.getThisType();
+      
+      // If the generic function has a templated 'this' type, attempt to unify it
+      // with the actual 'this' type derived from the call context.
+      if (genericThisType != null && genericThisType.isTemplatedType()) {
+         registry.getTemplateTypeReplacer().unify(genericThisType, actualThisType, inferred);
+      }
+    }
+
+    // Step 2: Infer template types from the function's parameters.
+    // We pass the original generic fnType, as `inferTemplateTypesFromParameters`
+    // is designed to work with generic types and can unify template variables
+    // based on parameter assignments.
+    Map<TemplateType, JSType> inferredFromParameters =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Step 3: Combine all inferences.
+    // Merge the parameter-based inferences into the overall `inferred` map.
+    // This allows parameter inferences (which are often more specific) to
+    // potentially override or refine template types already inferred from the
+    // 'this' context. `putAll` handles this by overriding existing keys.
+    inferred.putAll(inferredFromParameters);
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Step 4: Apply the combined inferences.
+    // Create a replacer with the comprehensive map of all inferred template types.
+    // If a template type couldn't be inferred, it defaults to UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
-    Node callTarget = n.getFirstChild();
     
+    // Visit the original generic fnType with the comprehensive replacer
+    // to get the fully specialized function type for this specific call.
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // Set the specialized function type on the call target node (the function being called).
     callTarget.setJSType(replacementFnType);
+    // Set the specialized return type on the call expression node itself.
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
