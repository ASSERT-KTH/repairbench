diff --git a/tmp/fdaa4871-7ac2-4839-a728-1a3599059228_buggy.java b/tmp/1ab5e5ac-4a15-46c8-82ed-464732bca453_fixed.java
index 63641d0..ae2009d 100644
--- a/tmp/fdaa4871-7ac2-4839-a728-1a3599059228_buggy.java
+++ b/tmp/1ab5e5ac-4a15-46c8-82ed-464732bca453_fixed.java
@@ -1,33 +1,59 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // Update the 'this' type for a templated function type, if necessary.
+    // The 'this' type of the function type itself is not visited by the
+    // TemplateTypeReplacer, so we have to do it manually here.
+    if (fnType.getThisType().isTemplatedType()) {
+      // The 'this' type on the original function type is templated.
+      // This means the 'this' type is something like `Foo<T>`.
+      // We need to apply the replacements to this type as well.
+      // The 'this' type for the *actual* call target
+      // (e.g., `new Foo<number>().method`) is
+      // `Foo<number>`.
+      // The `callTarget` node represents `new Foo<number>().method`.
+      // Its inferred 'this' type (from the `GETPROP` or `GETELEM` node)
+      // should be `new Foo<number>()`.
+      // That is: `callTarget.getThisType()`.
+      JSType actualCallTargetThisType = callTarget.getThisType();
+
+      if (actualCallTargetThisType != null && actualCallTargetThisType.isTemplatedType()) {
+        // If the actual 'this' type from the call target is also templated,
+        // apply the replacer to it.
+        // This covers cases where `T` (on `Foo<T>`) is inferred from other places.
+        actualCallTargetThisType = actualCallTargetThisType.visit(replacer);
+      }
+      // Now, update the 'this' type of the replacementFnType.
+      replacementFnType = replacementFnType.withThisType(actualCallTargetThisType);
+    }
+
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
