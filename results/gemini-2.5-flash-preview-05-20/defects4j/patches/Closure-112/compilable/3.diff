diff --git a/tmp/1f09a2fa-96c1-42e1-947d-187ea962f158_buggy.java b/tmp/ef115ca8-ec45-4150-9a12-17693936d6c5_fixed.java
index 63641d0..01cbf7b 100644
--- a/tmp/1f09a2fa-96c1-42e1-947d-187ea962f158_buggy.java
+++ b/tmp/ef115ca8-ec45-4150-9a12-17693936d6c5_fixed.java
@@ -1,33 +1,43 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // Only set the JSType of the call target if it's a NAME or FUNCTION.
+    // If it's a GETPROP or GETELEM, its type will be inferred by the type checker
+    // based on its receiver's type, which often correctly handles templates
+    // derived from the receiver's type (e.g., new C<T>()).
+    // Setting the JSType here for GETPROP/GETELEM nodes can sometimes
+    // override or interfere with a more precise inference that happens
+    // later during normal type checking of the property access.
+    if (callTarget.isName() || callTarget.isFunction()) {
       callTarget.setJSType(replacementFnType);
+    }
+
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
