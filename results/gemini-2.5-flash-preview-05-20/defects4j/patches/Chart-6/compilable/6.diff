diff --git a/tmp/d2c9915a-a2f7-4b0f-a302-16b993e2cc24_buggy.java b/tmp/259755d7-0c8b-4207-9621-811ca7f97b2e_fixed.java
index 351a97a..3934560 100644
--- a/tmp/d2c9915a-a2f7-4b0f-a302-16b993e2cc24_buggy.java
+++ b/tmp/259755d7-0c8b-4207-9621-811ca7f97b2e_fixed.java
@@ -1,18 +1,45 @@
     /**
      * Tests the list for equality with another object (typically also a list).
      *
      * @param obj  the other object (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public boolean equals(Object obj) {
 
         if (obj == this) {
             return true;
         }
         if (!(obj instanceof ShapeList)) {
             return false;
         }
-        return super.equals(obj);
 
+        // The original implementation returned super.equals(obj).
+        // This is problematic if ShapeList does not extend a class (like ArrayList)
+        // that implements a content-based equals method. If it extends Object,
+        // super.equals(obj) would only check for reference equality, which leads
+        // to test failures when comparing two different instances with identical content.
+        // Therefore, we need to compare the actual content (the shapes) stored in the lists.
+
+        ShapeList that = (ShapeList) obj;
+
+        // Assuming ShapeList has a size() method and a getShape(int) method
+        // to access its elements, similar to a List interface.
+
+        // 1. Compare the sizes of the lists.
+        if (this.size() != that.size()) {
+            return false;
+        }
+
+        // 2. Iterate through elements and compare them.
+        for (int i = 0; i < this.size(); i++) {
+            // Use Objects.equals for null-safe comparison of Shape objects.
+            // This correctly handles cases where shapes might be null.
+            if (!java.util.Objects.equals(this.getShape(i), that.getShape(i))) {
+                return false;
+            }
+        }
+
+        // If all elements are equal and sizes are equal, the lists are considered equal.
+        return true;
     }
\ No newline at end of file
