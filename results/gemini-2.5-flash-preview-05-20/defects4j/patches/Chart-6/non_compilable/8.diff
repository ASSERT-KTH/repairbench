diff --git a/tmp/90ab0744-328c-4554-96cf-1eb438617b31_buggy.java b/tmp/84bd7411-001e-44ce-92fd-0233ee187531_fixed.java
index 351a97a..89f1b52 100644
--- a/tmp/90ab0744-328c-4554-96cf-1eb438617b31_buggy.java
+++ b/tmp/84bd7411-001e-44ce-92fd-0233ee187531_fixed.java
@@ -1,18 +1,49 @@
     /**
      * Tests the list for equality with another object (typically also a list).
      *
      * @param obj  the other object (<code>null</code> permitted).
      *
      * @return A boolean.
      */
+    @Override // Indicate that this method overrides a method from a superclass (e.g., Object)
     public boolean equals(Object obj) {
 
         if (obj == this) {
             return true;
         }
+        // No need for explicit null check: (null instanceof ShapeList) is false.
         if (!(obj instanceof ShapeList)) {
             return false;
         }
-        return super.equals(obj);
 
+        // Cast obj to ShapeList for element comparison.
+        ShapeList that = (ShapeList) obj;
+
+        // Assume ShapeList has size() and get(int index) methods, common for list-like classes.
+        // The test methods using setShape(index, shape) imply such accessors exist.
+        if (this.size() != that.size()) {
+            return false;
+        }
+
+        // Compare elements one by one.
+        for (int i = 0; i < this.size(); i++) {
+            Shape s1 = this.get(i);
+            Shape s2 = that.get(i);
+
+            // Handle null elements explicitly.
+            // If both are null, they are equal for this position.
+            if (s1 == null) {
+                if (s2 != null) { // s1 is null, s2 is not null -> not equal
+                    return false;
+                }
+            } else {
+                // If s1 is not null, use its equals method to compare with s2.
+                // This correctly handles cases where s2 might be null (s1.equals(null) is false).
+                if (!s1.equals(s2)) {
+                    return false;
+                }
+            }
+        }
+        // If all checks pass, the lists are considered equal.
+        return true;
     }
