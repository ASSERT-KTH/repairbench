diff --git a/tmp/2dba909a-cb64-4d8e-ada2-39a597445e8b_buggy.java b/tmp/2d7e47ed-c117-4dd4-b4a3-fd29ce8551f5_fixed.java
index 351a97a..0beef3d 100644
--- a/tmp/2dba909a-cb64-4d8e-ada2-39a597445e8b_buggy.java
+++ b/tmp/2d7e47ed-c117-4dd4-b4a3-fd29ce8551f5_fixed.java
@@ -1,18 +1,52 @@
     /**
      * Tests the list for equality with another object (typically also a list).
      *
      * @param obj  the other object (<code>null</code> permitted).
      *
      * @return A boolean.
      */
+    @Override
     public boolean equals(Object obj) {
 
         if (obj == this) {
             return true;
         }
         if (!(obj instanceof ShapeList)) {
             return false;
         }
-        return super.equals(obj);
 
+        ShapeList that = (ShapeList) obj;
+
+        // Compare sizes
+        // Assuming ShapeList has a size() method (e.g., if it extends AbstractList or ArrayList, or has its own)
+        if (this.size() != that.size()) {
+            return false;
+        }
+
+        // Compare elements
+        // Assuming ShapeList has a getShape(int index) method to access elements,
+        // as implied by setShape(index, shape) in the tests.
+        for (int i = 0; i < this.size(); i++) {
+            java.awt.Shape s1 = this.getShape(i);
+            java.awt.Shape s2 = that.getShape(i);
+
+            // Handle null shapes explicitly
+            if (s1 == null) {
+                if (s2 != null) {
+                    return false; // One is null, the other is not
+                }
+            } else {
+                // If s1 is not null, s2 must also be not null and s1.equals(s2) must be true
+                if (!s1.equals(s2)) {
+                    return false; // Elements are not equal
+                }
+            }
+            // Alternatively, for Java 7+ and if `java.util.Objects` is allowed:
+            // if (!java.util.Objects.equals(s1, s2)) {
+            //     return false;
+            // }
+        }
+
+        // If all checks pass, the lists are equal
+        return true;
     }
\ No newline at end of file
