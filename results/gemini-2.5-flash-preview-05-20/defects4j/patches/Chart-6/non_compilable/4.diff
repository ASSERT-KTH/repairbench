diff --git a/tmp/f4f5463e-078d-411a-97ec-bab123050969_buggy.java b/tmp/420ba4e4-33b3-4ff0-bbfc-7a57af455291_fixed.java
index 351a97a..e5187c2 100644
--- a/tmp/f4f5463e-078d-411a-97ec-bab123050969_buggy.java
+++ b/tmp/420ba4e4-33b3-4ff0-bbfc-7a57af455291_fixed.java
@@ -1,18 +1,39 @@
+import java.awt.Shape;
+import java.util.Objects; // For Objects.equals to handle nulls more concisely
+
     /**
      * Tests the list for equality with another object (typically also a list).
      *
      * @param obj  the other object (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public boolean equals(Object obj) {
 
         if (obj == this) {
             return true;
         }
         if (!(obj instanceof ShapeList)) {
             return false;
         }
-        return super.equals(obj);
+        ShapeList that = (ShapeList) obj;
 
+        // Compare sizes first
+        if (this.size() != that.size()) {
+            return false;
+        }
+
+        // Compare elements pairwise
+        for (int i = 0; i < this.size(); i++) {
+            // Assuming ShapeList has getShape(int index) that returns Shape.
+            // If it implemented java.util.List directly, it would be this.get(i).
+            Shape s1 = this.getShape(i);
+            Shape s2 = that.getShape(i);
+
+            // Use Objects.equals for null-safe comparison
+            if (!Objects.equals(s1, s2)) {
+                return false;
+            }
+        }
+        return true;
     }
