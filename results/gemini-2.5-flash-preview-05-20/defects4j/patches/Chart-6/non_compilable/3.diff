diff --git a/tmp/3ec0f3fa-33fb-4f59-979c-9f598cce9cb7_buggy.java b/tmp/02e8e0e2-2e79-44c7-b8d2-b496449f58dd_fixed.java
index 351a97a..e88fbfc 100644
--- a/tmp/3ec0f3fa-33fb-4f59-979c-9f598cce9cb7_buggy.java
+++ b/tmp/02e8e0e2-2e79-44c7-b8d2-b496449f58dd_fixed.java
@@ -1,18 +1,40 @@
     /**
      * Tests the list for equality with another object (typically also a list).
      *
      * @param obj  the other object (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public boolean equals(Object obj) {
 
         if (obj == this) {
             return true;
         }
+        // Check for null and type. If obj is null, instanceof returns false.
         if (!(obj instanceof ShapeList)) {
             return false;
         }
-        return super.equals(obj);
 
+        // When a class wraps or composes a collection (e.g., a List),
+        // and its `equals` method relies on `super.equals(obj)` (which would be
+        // Object.equals(obj) for a class extending Object), it incorrectly
+        // performs only reference equality.
+        // For a list-like class, equality should be based on the contents of its
+        // internal collection. The original code's failure indicates that this
+        // content comparison is not being performed by the `super.equals(obj)` call.
+
+        // Assuming ShapeList manages its shapes in an internal List field.
+        // A common name for such an internal field might be 'delegate', 'data', or 'elements'.
+        // We will assume a field named 'delegate' for demonstration purposes.
+        // If this class actually extends a collection like ArrayList, the original
+        // `return super.equals(obj);` would conceptually be correct (as ArrayList's
+        // equals compares contents). However, given the failing tests and the common
+        // pattern for this type of bug, comparing the internal collection is the
+        // intended fix for a class that composes a list.
+        
+        ShapeList that = (ShapeList) obj;
+        
+        // Compare the internal list content for equality.
+        // Assuming the internal 'delegate' list is always initialized (non-null).
+        return this.delegate.equals(that.delegate);
     }
\ No newline at end of file
