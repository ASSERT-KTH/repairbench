diff --git a/tmp/397cff1f-e5f7-4951-a96d-8a9b15f9fda0_buggy.java b/tmp/532670f2-bcd8-4b9d-a7e2-f51462a0ea81_fixed.java
index 1b36a4f..51849cd 100644
--- a/tmp/397cff1f-e5f7-4951-a96d-8a9b15f9fda0_buggy.java
+++ b/tmp/532670f2-bcd8-4b9d-a7e2-f51462a0ea81_fixed.java
@@ -1,58 +1,76 @@
+import org.apache.commons.lang.StringUtils; // Assuming this import is available in the context
+
+public class WordUtils {
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+        // Ensure lower is not negative
+        if (lower < 0) {
+            lower = 0;
+        }
+        // Ensure lower does not exceed string length (important for substring and indexOf later)
+        if (lower > str.length()) {
+            lower = str.length();
+        }
+
+        // Adjust upper bound, capping at str.length() if necessary
+        // Also handling -1 meaning no limit
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
-        // if upper is less than lower, raise it to lower
+        // If upper is less than lower, raise it to lower.
+        // This ensures the upper limit is at least 'lower'.
         if (upper < lower) {
             upper = lower;
         }
 
         StringBuffer result = new StringBuffer();
+        int baseLength; // Length of the string before appending appendToEnd
+
+        // search for the first space AFTER the lower limit
         int index = StringUtils.indexOf(str, " ", lower);
-        if (index == -1) {
+
+        // If no space found after lower limit OR if the space is beyond the effective upper limit,
+        // then truncate at the upper limit.
+        if (index == -1 || index > upper) {
             result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
-            }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
-        } else {
+            baseLength = upper;
+        } else { // Space found at or before the effective upper limit
             result.append(str.substring(0, index));
+            baseLength = index;
+        }
+
+        // Append 'appendToEnd' ONLY if the string was indeed abbreviated
+        // (i.e., its base length is less than the original string's length)
+        if (baseLength < str.length()) {
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
+}
\ No newline at end of file
