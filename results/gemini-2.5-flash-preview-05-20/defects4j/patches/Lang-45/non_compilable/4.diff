diff --git a/tmp/91c47dd0-3f88-4404-bab6-60e66be08d8a_buggy.java b/tmp/4778f2d7-30cc-4108-ac7e-979a45eb92d6_fixed.java
index 1b36a4f..0d87a08 100644
--- a/tmp/91c47dd0-3f88-4404-bab6-60e66be08d8a_buggy.java
+++ b/tmp/4778f2d7-30cc-4108-ac7e-979a45eb92d6_fixed.java
@@ -1,58 +1,82 @@
+import org.apache.commons.lang.StringUtils; // Assuming StringUtils is available
+
+public class WordUtils {
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+        // If the lower limit is already beyond the string's length,
+        // no abbreviation by finding a space after 'lower' can occur.
+        // In this case, the original string should be returned.
+        // This handles cases like abbreviate("0123456789", 15, 20, null)
+        if (lower >= str.length()) {
+            return str;
+        }
+
+        // Adjust upper limit: if -1 or greater than string length, use string length.
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
-        // if upper is less than lower, raise it to lower
+        // Adjust upper if it's less than lower (as per Javadoc)
+        // Note: This step can make 'upper' exceed 'str.length()' if 'lower' is large.
         if (upper < lower) {
             upper = lower;
         }
 
+        // The effective upper limit for substring operations must not exceed str.length().
+        // This ensures StringIndexOutOfBoundsException is avoided.
+        int effectiveUpperForSubstring = Math.min(upper, str.length());
+
         StringBuffer result = new StringBuffer();
+        // StringUtils.indexOf handles `lower` being >= str.length() gracefully by returning -1.
         int index = StringUtils.indexOf(str, " ", lower);
+
         if (index == -1) {
-            result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
+            // No space found after the lower limit.
+            // Abbreviate string by the effective upper limit.
+            result.append(str.substring(0, effectiveUpperForSubstring));
+            // Append if actual abbreviation (truncation) occurred.
+            if (effectiveUpperForSubstring < str.length()) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
+        } else if (index > effectiveUpperForSubstring) {
+            // A space was found, but it's beyond the effective upper limit.
+            // Abbreviate strictly by the effective upper limit.
+            result.append(str.substring(0, effectiveUpperForSubstring));
+            // In this case, abbreviation always occurs, so append.
             result.append(StringUtils.defaultString(appendToEnd));
         } else {
+            // A space was found at or before the effective upper limit.
+            // Abbreviate to that space.
             result.append(str.substring(0, index));
+            // In this case, abbreviation always occurs (unless index == str.length(), which is unlikely for a space).
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
+}
\ No newline at end of file
