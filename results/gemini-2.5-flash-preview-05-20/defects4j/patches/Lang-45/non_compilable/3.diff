diff --git a/tmp/414ca7f6-94d9-444d-be5d-082b7392486f_buggy.java b/tmp/48d8364a-caa0-4a40-a39b-98223615cbd1_fixed.java
index 1b36a4f..6804ee4 100644
--- a/tmp/414ca7f6-94d9-444d-be5d-082b7392486f_buggy.java
+++ b/tmp/48d8364a-caa0-4a40-a39b-98223615cbd1_fixed.java
@@ -1,58 +1,73 @@
+import org.apache.commons.lang.StringUtils; // Assuming this import for StringUtils.EMPTY and StringUtils.indexOf
+
+public class WordUtils {
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+        // Ensure lower is not negative
+        if (lower < 0) {
+            lower = 0;
+        }
+
+        // Calculate the actual 'upper' limit for substring operation.
+        // It should never be greater than str.length().
+        // If -1 is passed, it means no upper bound, so use str.length().
+        int effectiveUpper;
         if (upper == -1 || upper > str.length()) {
-            upper = str.length();
-        }
-        // if upper is less than lower, raise it to lower
-        if (upper < lower) {
-            upper = lower;
+            effectiveUpper = str.length();
+        } else {
+            effectiveUpper = upper;
         }
 
+        // Apply the rule: "If the upper limit is lower than the lower limit, it will be
+        // adjusted to be the same as the lower limit."
+        // This implies effectiveUpper must be at least lower.
+        // However, effectiveUpper must also remain <= str.length().
+        // So, effectiveUpper becomes max(effectiveUpper, lower), but then it is capped at str.length().
+        effectiveUpper = Math.min(str.length(), Math.max(effectiveUpper, lower));
+
         StringBuffer result = new StringBuffer();
         int index = StringUtils.indexOf(str, " ", lower);
+
         if (index == -1) {
-            result.append(str.substring(0, upper));
+            result.append(str.substring(0, effectiveUpper));
             // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
+            if (effectiveUpper != str.length()) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
+        } else if (index > effectiveUpper) {
+            result.append(str.substring(0, effectiveUpper));
             result.append(StringUtils.defaultString(appendToEnd));
-        } else {
+        } else { // index <= effectiveUpper
             result.append(str.substring(0, index));
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
+}
\ No newline at end of file
