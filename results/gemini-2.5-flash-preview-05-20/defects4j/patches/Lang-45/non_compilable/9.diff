diff --git a/tmp/d78795f3-f731-42a4-bf2d-596cc03ed2fb_buggy.java b/tmp/b92563b9-a5d9-4c4e-b210-2c0f4998570c_fixed.java
index 1b36a4f..98f883d 100644
--- a/tmp/d78795f3-f731-42a4-bf2d-596cc03ed2fb_buggy.java
+++ b/tmp/b92563b9-a5d9-4c4e-b210-2c0f4998570c_fixed.java
@@ -1,58 +1,88 @@
+import org.apache.commons.lang.StringUtils; // Assuming this import is available based on the original code
+
+public class WordUtils {
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
-        if (upper == -1 || upper > str.length()) {
-            upper = str.length();
+        int strLen = str.length();
+
+        // Normalize lower limit:
+        // Ensure lower is non-negative.
+        // If lower is greater than the string length, cap it at the string length.
+        // This ensures indexOf starts within valid bounds or at the end, returning -1.
+        lower = Math.max(0, lower);
+        if (lower > strLen) {
+            lower = strLen;
         }
-        // if upper is less than lower, raise it to lower
+
+        // Normalize upper limit:
+        // If upper is -1 (no limit) or is greater than the string length, set it to the string length.
+        if (upper == -1 || upper > strLen) {
+            upper = strLen;
+        }
+
+        // If upper is less than lower, raise it to lower.
+        // At this point, both 'lower' and 'upper' are guaranteed to be within [0, strLen].
+        // So, 'upper' will remain within [0, strLen] after this adjustment.
         if (upper < lower) {
             upper = lower;
         }
+        // Now, we have: 0 <= lower <= upper <= strLen. These are safe bounds for substring operations.
 
         StringBuffer result = new StringBuffer();
+        // Search for the first space after the adjusted lower limit.
         int index = StringUtils.indexOf(str, " ", lower);
+
         if (index == -1) {
+            // Case 1: No space found after the lower limit.
+            // Abbreviate the string by truncating it at the adjusted upper limit.
             result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
+            
+            // Append 'appendToEnd' ONLY if the string was actually abbreviated.
+            // Abbreviation occurs if the resulting length ('upper') is less than the original string length.
+            if (upper != strLen) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
         } else if (index > upper) {
+            // Case 2: A space was found, but it is beyond the adjusted upper limit.
+            // Abbreviate the string by truncating it at the adjusted upper limit, ignoring the space.
             result.append(str.substring(0, upper));
+            // In this case, truncation always occurs (since index > upper, upper must be < index, and thus < strLen
+            // unless strLen is very small which is handled by upper normalization).
             result.append(StringUtils.defaultString(appendToEnd));
-        } else {
+        } else { // This means index is found and (lower <= index <= upper).
+            // Case 3: A space was found within the acceptable range (between lower and upper).
+            // Abbreviate the string at the position of this space.
             result.append(str.substring(0, index));
+            // In this case, truncation always occurs (since index < strLen if a space is found).
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
+}
\ No newline at end of file
