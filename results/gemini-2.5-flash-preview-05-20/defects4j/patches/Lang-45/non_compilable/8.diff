diff --git a/tmp/03511c4b-c7dc-46be-aff2-6b1932432916_buggy.java b/tmp/d3add3a0-e646-4a93-ada8-916ccf7eb2ae_fixed.java
index 1b36a4f..0449826 100644
--- a/tmp/03511c4b-c7dc-46be-aff2-6b1932432916_buggy.java
+++ b/tmp/d3add3a0-e646-4a93-ada8-916ccf7eb2ae_fixed.java
@@ -1,58 +1,79 @@
+import org.apache.commons.lang.StringUtils; // Assuming StringUtils is available
+
+public class WordUtils {
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
-        if (upper == -1 || upper > str.length()) {
-            upper = str.length();
-        }
-        // if upper is less than lower, raise it to lower
-        if (upper < lower) {
-            upper = lower;
+        int strLen = str.length();
+
+        // Clamp lower to be within [0, strLen]
+        lower = Math.max(lower, 0);
+        lower = Math.min(lower, strLen);
+
+        // Clamp upper:
+        // If -1, no limit, so use strLen.
+        // Otherwise, ensure it's not negative and not greater than strLen.
+        if (upper == -1) {
+            upper = strLen;
+        } else {
+            upper = Math.max(upper, 0);
+            upper = Math.min(upper, strLen);
         }
 
+        // Ensure upper is at least lower (after all other clamping).
+        // This is important for cases where original lower was very high,
+        // leading to lower being clamped to strLen, and upper might still be less than that.
+        upper = Math.max(upper, lower);
+
         StringBuffer result = new StringBuffer();
+        // Search for the first space from 'lower' onwards
         int index = StringUtils.indexOf(str, " ", lower);
-        if (index == -1) {
+
+        // Determine the abbreviation point and append `appendToEnd` if abbreviated
+        if (index == -1 || index > upper) {
+            // Case 1: No space found from 'lower' onwards, OR space is beyond 'upper' limit.
+            // Abbreviate to 'upper' limit.
             result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
+            // Append only if string was actually truncated (upper limit is less than original length)
+            if (upper < strLen) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
         } else {
+            // Case 2: Space found within or at the 'upper' limit.
+            // Abbreviate to the space.
             result.append(str.substring(0, index));
+            // Append only if string was actually truncated (abbreviated at space index)
+            // If a space was found, its index must be less than strLen, meaning it's an abbreviation.
+            if (index < strLen) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
+        }
         return result.toString();
     }
+}
\ No newline at end of file
