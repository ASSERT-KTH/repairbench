diff --git a/tmp/a0c4b6c3-0ea3-4721-8ed6-0aebb55f8f4b_buggy.java b/tmp/6878ef9e-45c3-4f14-bf32-47a3d1f20884_fixed.java
index 1b36a4f..d6028e7 100644
--- a/tmp/a0c4b6c3-0ea3-4721-8ed6-0aebb55f8f4b_buggy.java
+++ b/tmp/6878ef9e-45c3-4f14-bf32-47a3d1f20884_fixed.java
@@ -1,58 +1,85 @@
     /**
      * Abbreviates a string nicely.
      *
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      *
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+        // Clamp lower to be within [0, str.length()]
+        if (lower < 0) {
+            lower = 0;
+        }
+        // If lower is greater than the string length, effectively no abbreviation
+        // can start there, and substring/indexOf might fail. Clamp it.
+        if (lower > str.length()) {
+            lower = str.length();
+        }
+
+        // Clamp upper to be within [0, str.length()] or -1.
+        // If upper == -1, it means no upper limit from the user's perspective,
+        // so internally, we treat it as str.length().
+        // If upper is negative (but not -1), treat as 0.
+        if (upper < 0 && upper != -1) {
+            upper = 0;
+        }
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
-        // if upper is less than lower, raise it to lower
+
+        // Ensure upper is not less than lower.
+        // Since both lower and upper are already clamped to str.length(),
+        // raising upper to lower will not exceed str.length().
         if (upper < lower) {
             upper = lower;
         }
 
         StringBuffer result = new StringBuffer();
+        int finalLength;
+
+        // Search for the first space after the lower limit
         int index = StringUtils.indexOf(str, " ", lower);
+
         if (index == -1) {
+            // No space found after 'lower' limit
             result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
-            }
+            finalLength = upper;
         } else if (index > upper) {
+            // Space found, but it's beyond the 'upper' limit. Abbreviate at 'upper'.
             result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
+            finalLength = upper;
         } else {
+            // Space found within or at the 'upper' limit. Abbreviate at the space.
             result.append(str.substring(0, index));
+            finalLength = index;
+        }
+
+        // Append appendToEnd only if the string was indeed abbreviated
+        // This means the final length (before appending 'appendToEnd') is less than the original string length.
+        if (finalLength < str.length()) {
             result.append(StringUtils.defaultString(appendToEnd));
         }
+
         return result.toString();
     }
\ No newline at end of file
