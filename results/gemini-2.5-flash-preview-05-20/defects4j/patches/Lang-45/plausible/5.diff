diff --git a/tmp/283a7a49-0188-4a3f-887d-734e33a958a9_buggy.java b/tmp/0dbe6421-cf7f-4282-be63-c3a68741f98a_fixed.java
index 1b36a4f..001a3fd 100644
--- a/tmp/283a7a49-0188-4a3f-887d-734e33a958a9_buggy.java
+++ b/tmp/0dbe6421-cf7f-4282-be63-c3a68741f98a_fixed.java
@@ -1,58 +1,77 @@
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
-        if (upper == -1 || upper > str.length()) {
-            upper = str.length();
-        }
-        // if upper is less than lower, raise it to lower
-        if (upper < lower) {
-            upper = lower;
+        // Calculate effective lower and upper limits
+        // Ensure lower is within [0, str.length()]
+        int effectiveLower = Math.max(0, lower);
+        effectiveLower = Math.min(effectiveLower, str.length());
+
+        // Ensure upper is within [0, str.length()]
+        // If upper is -1, it means no upper limit, so it defaults to str.length()
+        int effectiveUpper = upper;
+        if (effectiveUpper == -1) {
+            effectiveUpper = str.length();
         }
+        effectiveUpper = Math.min(effectiveUpper, str.length()); // Clamp upper to string length
+        effectiveUpper = Math.max(0, effectiveUpper); // Ensure upper is not negative
+
+        // Ensure effectiveUpper is not less than effectiveLower.
+        // Since both effectiveLower and effectiveUpper are already clamped to str.length(),
+        // this operation will not push effectiveUpper beyond str.length().
+        effectiveUpper = Math.max(effectiveUpper, effectiveLower);
 
         StringBuffer result = new StringBuffer();
-        int index = StringUtils.indexOf(str, " ", lower);
+        // Find the first space after the effective lower limit
+        int index = StringUtils.indexOf(str, " ", effectiveLower);
+        
+        // Case 1: No space found after the effective lower limit.
+        // Truncate at the effective upper limit.
         if (index == -1) {
-            result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
+            result.append(str.substring(0, effectiveUpper));
+            // Only append if actual truncation occurred (i.e., effectiveUpper is less than original string length)
+            if (effectiveUpper != str.length()) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
+        } 
+        // Case 2: A space was found, but it is beyond the effective upper limit.
+        // Truncate at the effective upper limit, ignoring the space.
+        else if (index > effectiveUpper) {
+            result.append(str.substring(0, effectiveUpper));
+            // Append appendToEnd because truncation to effectiveUpper has occurred
             result.append(StringUtils.defaultString(appendToEnd));
-        } else {
+        } 
+        // Case 3: A space was found at or before the effective upper limit.
+        // Truncate at this space.
+        else { // index <= effectiveUpper
             result.append(str.substring(0, index));
+            // Append appendToEnd because truncation at the space has occurred
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
\ No newline at end of file
