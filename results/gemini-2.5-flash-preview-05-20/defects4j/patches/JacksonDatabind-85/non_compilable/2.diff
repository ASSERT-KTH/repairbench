diff --git a/tmp/46e59be2-97f6-4a3b-be65-48078f4deb22_buggy.java b/tmp/f740cf2e-b739-4a20-8e0b-858178d3f558_fixed.java
index d926eea..e414320 100644
--- a/tmp/46e59be2-97f6-4a3b-be65-48078f4deb22_buggy.java
+++ b/tmp/f740cf2e-b739-4a20-8e0b-858178d3f558_fixed.java
@@ -1,48 +1,68 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
+
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+        // This section handles string-based date serialization, considering explicit
+        // @JsonFormat overrides and ObjectMapper's default DateFormat.
+
+        // We need to create a new serializer instance if any of these conditions are true:
+        // - An explicit pattern is specified via @JsonFormat.
+        // - An explicit locale or timezone is specified via @JsonFormat.
+        // - The shape is explicitly STRING (even without other overrides), which might require
+        //   using the ObjectMapper's default DateFormat if it's a SimpleDateFormat.
+        if (format.hasPattern() || format.hasLocale() || format.hasTimeZone() || shape == JsonFormat.Shape.STRING)
+        {
             TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
+            Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
+
+            String pattern;
+            
+            // Determine the pattern to use:
+            // 1. Explicit pattern from @JsonFormat annotation takes highest precedence.
+            if (format.hasPattern()) {
+                pattern = format.getPattern();
+            } else {
+                // 2. If no explicit pattern, try to use the pattern from ObjectMapper's default DateFormat,
+                //    but only if it's a SimpleDateFormat (as we need its pattern string).
+                DateFormat defaultDateFormat = serializers.getDateFormat();
+                if (defaultDateFormat instanceof SimpleDateFormat) {
+                    pattern = ((SimpleDateFormat) defaultDateFormat).toPattern();
+                } else {
+                    // 3. Fallback: If no explicit pattern and ObjectMapper's default is not SimpleDateFormat,
+                    //    use the standard ISO-8601 pattern.
+                    pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                }
+            }
+
+            // Create a new SimpleDateFormat with the determined pattern, locale, and timezone.
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
+
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // Otherwise, no specific contextual format determined that requires a new SimpleDateFormat.
+        // The existing serializer instance's configuration (e.g., using StdDateFormat implicitly,
+        // or a pre-configured _customFormat that still applies) should be sufficient.
         return this;
     }
\ No newline at end of file
