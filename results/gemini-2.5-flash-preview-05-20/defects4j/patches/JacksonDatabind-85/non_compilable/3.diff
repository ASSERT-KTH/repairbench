diff --git a/tmp/72b9c67a-fbba-4b4a-9dd5-0614fe1ec1e0_buggy.java b/tmp/4a2bf15f-cf3f-4103-9fe3-1da4ebe50331_fixed.java
index d926eea..e3ee43d 100644
--- a/tmp/72b9c67a-fbba-4b4a-9dd5-0614fe1ec1e0_buggy.java
+++ b/tmp/4a2bf15f-cf3f-4103-9fe3-1da4ebe50331_fixed.java
@@ -1,48 +1,56 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
-            return this;
-        }
+
         // Simple case first: serialize as numeric timestamp?
+        if (format != null) {
             JsonFormat.Shape shape = format.getShape();
             if (shape.isNumeric()) {
                 return withFormat(Boolean.TRUE, null);
             }
+        }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+        // First: custom pattern/locale/timezone from @JsonFormat will override things
+        // IMPORTANT: The condition here was changed. It no longer implicitly uses
+        // StdDateFormat.DATE_FORMAT_STR_ISO8601 when only JsonFormat.Shape.STRING is present.
+        if (format != null && (format.hasPattern() || format.hasLocale() || format.hasTimeZone())) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                                     ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601; // Fallback to ISO if no pattern in @JsonFormat, but locale/timezone are
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
+        // Otherwise (no numeric, no explicit pattern/locale/timezone in @JsonFormat):
+        // If there's no `@JsonFormat` annotation, or `@JsonFormat` only specifies STRING shape (or default),
+        // we should use the globally configured DateFormat from `serializers.getConfig()`.
+        // This addresses [databind#1648] by ensuring `ObjectMapper.setDateFormat()` is respected.
+        // We only proceed if the current serializer isn't already using that specific DateFormat instance.
+        if ((format == null) || (format.getShape() == JsonFormat.Shape.STRING)) {
+            DateFormat df = serializers.getConfig().getDateFormat();
+            if (df != null && df != _customDateFormat) {
+                // If _useTimestamp is null, it means it's currently using string format implicitly.
+                // If it's explicitly Boolean.FALSE, it's also string.
+                // If it's Boolean.TRUE, it would have been handled by the numeric case.
+                return withFormat(Boolean.FALSE, df);
+            }
+        }
 
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // If none of the above specific format overrides or global settings apply,
+        // or if the serializer is already correctly configured, return this instance.
         return this;
     }
\ No newline at end of file
