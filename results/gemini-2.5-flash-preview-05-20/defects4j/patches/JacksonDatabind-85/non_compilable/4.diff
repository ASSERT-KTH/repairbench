diff --git a/tmp/98368587-696d-4bae-a6cb-bf72b45eecfc_buggy.java b/tmp/573207ef-a7db-4797-83bf-706b7f7d542d_fixed.java
index d926eea..780affc 100644
--- a/tmp/98368587-696d-4bae-a6cb-bf72b45eecfc_buggy.java
+++ b/tmp/573207ef-a7db-4797-83bf-706b7f7d542d_fixed.java
@@ -1,48 +1,80 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
+        // 08-Jun-2017, tatu: As per [databind#1648], need to also
+        //   take `TimeZone` and `Locale` from `SerializerProvider` if
+        //   not defined in format.
+        // Also: if `shape` is `STRING` but no pattern, default to `StdDateFormat`
+        // pattern which is ISO-8601.
+        // ^^^ NOTE: The above logic was incorrect. It should NOT use ISO-8601
+        // if no pattern is specified: rather, the default `DateFormat` from
+        // `ObjectMapper` should be used.
         if (format == null) {
             return this;
         }
+        
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
-                    }
-            df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
+        // If shape is STRING but no specific format instructions (pattern, locale, timezone),
+        // then the default DateFormat from ObjectMapper should apply.
+        // In this case, we return 'this' to let the default behavior take over,
+        // which will implicitly use the DateFormat configured on the ObjectMapper.
+        if (shape == JsonFormat.Shape.STRING &&
+                !format.hasPattern() && !format.hasLocale() && !format.hasTimeZone()) {
+            return this;
         }
 
-        // Otherwise, need one of these changes:
+        // Otherwise, need to create/configure a DateFormat instance
+        // Get the default DateFormat from the provider.
+        DateFormat defaultDateFormat = serializers.getConfig().getDateFormat();
 
+        // If JsonFormat specifies a pattern, locale, or timezone, we need to create a new DateFormat
+        if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
+            String pattern = format.getPattern(); // This will be null if !hasPattern()
+            Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
+            TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();
 
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+            // Case 1: Default is SimpleDateFormat. We can derive pattern from it and create new instance.
+            if (defaultDateFormat instanceof SimpleDateFormat) {
+                SimpleDateFormat sdf = (SimpleDateFormat) defaultDateFormat;
+                if (pattern == null) { // no pattern from format, use default's pattern
+                    pattern = sdf.toPattern();
+                }
+                SimpleDateFormat newSdf = new SimpleDateFormat(pattern, loc);
+                newSdf.setTimeZone(tz);
+                return withFormat(Boolean.FALSE, newSdf);
+            }
+            // Case 2: Default is StdDateFormat. We can apply overrides to it.
+            else if (defaultDateFormat instanceof StdDateFormat) {
+                StdDateFormat stdDf = (StdDateFormat) defaultDateFormat;
+                if (pattern != null) { // only apply pattern if specified
+                    stdDf = stdDf.withPattern(pattern);
+                }
+                // StdDateFormat `withLocale` and `withTimeZone` also exist
+                if (format.hasLocale()) {
+                    stdDf = stdDf.withLocale(loc);
+                }
+                if (format.hasTimeZone()) {
+                    stdDf = stdDf.withTimeZone(tz);
+                }
+                return withFormat(Boolean.FALSE, stdDf);
+            }
+            // Case 3: Other DateFormat type. Cannot safely modify/clone.
+            // Revert to original behavior: return 'this' if unhandled type.
+            // The existing comment "Ugh. No way to change `Locale`, create copy" refers to this.
+            return this; // Cannot apply contextual changes for this DateFormat type
+        }
 
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // All other cases (e.g., shape is not numeric, not STRING with no overrides, and no explicit pattern/locale/timezone overrides)
+        // should use the default serializer without specific DateFormat instance.
         return this;
     }
\ No newline at end of file
