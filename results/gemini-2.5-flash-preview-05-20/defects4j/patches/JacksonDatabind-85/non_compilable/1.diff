diff --git a/tmp/2801c6c6-703e-44e9-a664-7b6fb53f55d0_buggy.java b/tmp/8e3272f1-645a-4c94-a701-31bd3feeaf18_fixed.java
index d926eea..3ce9db6 100644
--- a/tmp/2801c6c6-703e-44e9-a664-7b6fb53f55d0_buggy.java
+++ b/tmp/8e3272f1-645a-4c94-a701-31bd3feeaf18_fixed.java
@@ -1,48 +1,71 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
+        // findFormatOverrides merges property annotations with global config defaults.
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
+
+        // If no format overrides are found (neither from annotations nor specific global config),
+        // use the current serializer's default behavior (return this).
         if (format == null) {
             return this;
         }
-        // Simple case first: serialize as numeric timestamp?
+
         JsonFormat.Shape shape = format.getShape();
+
+        // 1. Handle explicit numeric timestamp format requested
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+        // From this point, we are handling string/other formats, which will likely produce a string representation.
+
+        // 2. Handle cases where explicit pattern, locale, or timezone is defined in JsonFormat.Value.
+        // This implies constructing a new SimpleDateFormat based on these explicit overrides.
+        if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
+            // If a pattern is NOT explicitly set in @JsonFormat, but locale/timezone are,
+            // we use ISO8601 as a default pattern for constructing SimpleDateFormat.
             final String pattern = format.hasPattern()
                                     ? format.getPattern()
                                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
-                            : serializers.getLocale();
+                            : serializers.getLocale(); // Default locale from serializer config if not explicit
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
+            if (tz == null) { // If timezone was not specified in format, use serializerProvider's default
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
+            // Always return a new serializer with this specific DateFormat
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+        // 3. Handle the case where JsonFormat.Shape.STRING is explicitly set,
+        // but no pattern, locale, or timezone overrides are provided via @JsonFormat.
+        // This is crucial for fixing [databind#1648]: it means we should use the
+        // default DateFormat configured on the ObjectMapper/SerializationConfig.
+        if (shape == JsonFormat.Shape.STRING) {
+            DateFormat defaultDateFormat = serializers.getConfig().getDateFormat();
+            // If the current serializer is already configured to use this default string DateFormat,
+            // return `this` to avoid unnecessary re-creation.
+            // _useTimestamp == Boolean.FALSE indicates string format.
+            // Check if _customDateFormat matches defaultDateFormat (by instance identity)
+            // or if this serializer implicitly uses StdDateFormat and defaultDateFormat is also StdDateFormat.
+            if (_useTimestamp == Boolean.FALSE && (defaultDateFormat == _customDateFormat ||
+                    (_customDateFormat == null && defaultDateFormat instanceof StdDateFormat))) {
+                return this;
+            }
+            // Otherwise, return a new serializer instance configured with the defaultDateFormat.
+            return withFormat(Boolean.FALSE, defaultDateFormat);
+        }
 
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // 4. If none of the above conditions met, it means no specific JsonFormat overrides
+        // (neither shape, pattern, locale, nor timezone) were found.
+        // In this scenario, the serializer should use its default behavior.
+        // The `this` instance is already correctly configured for such a default (e.g., using StdDateFormat implicitly).
         return this;
     }
