diff --git a/tmp/90e86128-4e7f-48c8-924f-b197e830d940_buggy.java b/tmp/5fae9809-400f-44bf-a8c4-f7579b1682d3_fixed.java
index d926eea..c3bc084 100644
--- a/tmp/90e86128-4e7f-48c8-924f-b197e830d940_buggy.java
+++ b/tmp/5fae9809-400f-44bf-a8c4-f7579b1682d3_fixed.java
@@ -1,48 +1,85 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+        // If contextual format overrides exist that imply string output (shape STRING,
+        // or explicit pattern/locale/timezone):
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                         || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
+
+            // Case 1: Explicit pattern is defined
+            if (format.hasPattern()) {
+                final String pattern = format.getPattern();
                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
+                if (tz == null) { // If no custom TZ, use serializer's default
                     tz = serializers.getTimeZone();
                 }
                 df.setTimeZone(tz);
                 return withFormat(Boolean.FALSE, df);
             }
 
-        // Otherwise, need one of these changes:
+            // Case 2: No explicit pattern, but other string-related overrides (shape STRING, locale, tz)
+            // Use the default/configured DateFormat from the serializer provider
+            DateFormat defaultOrConfiguredFormat = serializers.getConfig().getDateFormat();
 
+            // 2.1: If it's Jackson's StdDateFormat, it supports `with` methods for contextualization
+            if (defaultOrConfiguredFormat instanceof StdDateFormat) {
+                StdDateFormat stdDf = (StdDateFormat) defaultOrConfiguredFormat;
+                // `withTimeZone` and `withLocale` methods clone the instance for thread-safety
+                if (tz != null) {
+                    stdDf = stdDf.withTimeZone(tz);
+                } else {
+                    // Apply serializer's default timezone if no explicit override
+                    stdDf = stdDf.withTimeZone(serializers.getTimeZone());
+                }
+                stdDf = stdDf.withLocale(loc);
+                return withFormat(Boolean.FALSE, stdDf);
+            }
+
+            // 2.2: If it's a SimpleDateFormat (e.g., configured via ObjectMapper.setDateFormat())
+            // SimpleDateFormat cannot change locale after construction (no setLocale()).
+            // So if locale is contextual, we must recreate it.
+            // Also, SimpleDateFormat is not thread-safe, so we generally clone or recreate.
+            if (defaultOrConfiguredFormat instanceof SimpleDateFormat) {
+                SimpleDateFormat sdf = (SimpleDateFormat) defaultOrConfiguredFormat;
+                String pattern = sdf.toPattern(); // Get the pattern from the existing SimpleDateFormat
+                
+                // Create a new SimpleDateFormat to apply potentially new locale and timezone
+                SimpleDateFormat newSdf = new SimpleDateFormat(pattern, loc);
+                if (tz != null) {
+                    newSdf.setTimeZone(tz);
+                } else {
+                    newSdf.setTimeZone(serializers.getTimeZone());
+                }
+                return withFormat(Boolean.FALSE, newSdf);
+            }
 
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+            // 2.3: For other DateFormat types or unhandleable combinations,
+            // fall back to the original serializer's default behavior.
+            // This means contextual TZ/Locale might not apply to the format itself.
+            return this;
+        }
 
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // Otherwise, no specific format override that implies string output,
+        // or `shape` is `NATURAL`/`ARRAY`/`OBJECT` and no pattern/locale/timezone in format,
+        // so use the default `this` serializer.
         return this;
     }
\ No newline at end of file
