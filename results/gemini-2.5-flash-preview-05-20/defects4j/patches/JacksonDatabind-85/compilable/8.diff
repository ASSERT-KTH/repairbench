diff --git a/tmp/182be10d-c4ef-443a-9f82-fc314b5b2aef_buggy.java b/tmp/f13b5ca6-290e-4177-9f4e-6e6f106a2423_fixed.java
index d926eea..829b6ee 100644
--- a/tmp/182be10d-c4ef-443a-9f82-fc314b5b2aef_buggy.java
+++ b/tmp/f13b5ca6-290e-4177-9f4e-6e6f106a2423_fixed.java
@@ -1,48 +1,50 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+        // [databind#1648]: contextual default format should be used when shape is STRING
+        // and no specific pattern, locale, or timezone is defined by @JsonFormat.
+        if ((shape == JsonFormat.Shape.STRING)
+                && !format.hasPattern() && !format.hasLocale() && !format.hasTimeZone()) {
+            // Use the DateFormat configured globally (via ObjectMapper)
+            return withFormat(Boolean.FALSE, serializers.getConfig().getDateFormat());
+        }
+
+        // If a specific pattern, locale, or timezone is provided by @JsonFormat,
+        // or if shape is STRING and any of these are present,
+        // create a new SimpleDateFormat based on these overrides.
+        // (This also covers cases where shape is not STRING but overrides are present)
+        if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                                     ? format.getPattern()
                                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // Otherwise (e.g. shape is not numeric, not STRING with overrides, not STRING
+        // with implicit default, and no pattern/locale/timezone override),
+        // return the original serializer. This covers shapes like ARRAY, OBJECT etc.
         return this;
     }
\ No newline at end of file
