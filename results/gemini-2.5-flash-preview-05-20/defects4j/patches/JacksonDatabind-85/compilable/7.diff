diff --git a/tmp/1dc4321e-f6c0-4ce4-9250-ffcea2391ff0_buggy.java b/tmp/95833574-12ce-4b2b-8a1d-b378c1d7038f_fixed.java
index d926eea..1bfce93 100644
--- a/tmp/1dc4321e-f6c0-4ce4-9250-ffcea2391ff0_buggy.java
+++ b/tmp/95833574-12ce-4b2b-8a1d-b378c1d7038f_fixed.java
@@ -1,48 +1,47 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+        // Separate cases where explicit format properties are given vs. just shape.
+        // First: custom pattern, locale, or timezone will override things, forcing SimpleDateFormat
+        if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                                 ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                                : StdDateFormat.DATE_FORMAT_STR_ISO8601; // Default to ISO8601 if pattern not given but other format properties are
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
+        // Otherwise, if only JsonFormat.Shape.STRING is specified (without pattern/locale/timezone),
+        // we should use the default DateFormat from ObjectMapper/SerializerProvider.
+        if (shape == JsonFormat.Shape.STRING) {
+            // Force string representation, but rely on ObjectMapper's DateFormat by passing null
+            return withFormat(Boolean.FALSE, null);
+        }
         
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // In other cases (e.g. Shape.ANY or unrecognized shapes, or no specific overrides
+        // beyond default behavior), return current instance.
         return this;
     }
\ No newline at end of file
