diff --git a/tmp/b52dbe3f-469b-4f10-8c2f-182801b33c8c_buggy.java b/tmp/e1e90884-caec-40f8-a90b-abb5d86d7315_fixed.java
index a38ec6d..97b2342 100644
--- a/tmp/b52dbe3f-469b-4f10-8c2f-182801b33c8c_buggy.java
+++ b/tmp/e1e90884-caec-40f8-a90b-abb5d86d7315_fixed.java
@@ -1,10 +1,26 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
+        // ctorType represents the JSType for 'Function'.
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+
+        if (resultEqualsValue) {
+          // This branch corresponds to `typeof x == "function"`.
+          // If the current `type` (which is an ObjectType) is a subtype of 'Function',
+          // then it must be a 'Function'. Otherwise, it's impossible for this ObjectType
+          // to satisfy `typeof x == "function"`, so return null.
+          return type.isSubtype(ctorType) ? ctorType : null;
+        } else {
+          // This branch corresponds to `typeof x != "function"`.
+          // If the current `type` (which is an ObjectType) is a subtype of 'Function',
+          // then it cannot satisfy `typeof x != "function"`, so return null.
+          // Otherwise (if it's an ObjectType but not a Function), it remains that type.
+          return type.isSubtype(ctorType) ? null : type;
         }
+      }
+      // For other `typeof` values (like "object", "string", etc.),
+      // if the expectation matches "object", return the type.
+      // Otherwise, if the current ObjectType doesn't match the expected `typeof` value,
+      // it means this branch is impossible, so return null.
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
