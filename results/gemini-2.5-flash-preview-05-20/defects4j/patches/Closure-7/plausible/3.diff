diff --git a/tmp/41678303-1e45-4ac6-b02e-f08b67c66678_buggy.java b/tmp/af03db2b-8e2c-47ad-96c8-24068510ed3f_fixed.java
index a38ec6d..56e6804 100644
--- a/tmp/41678303-1e45-4ac6-b02e-f08b67c66678_buggy.java
+++ b/tmp/af03db2b-8e2c-47ad-96c8-24068510ed3f_fixed.java
@@ -1,10 +1,33 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE); // Represents the 'Function' type
+
+        // If the comparison (e.g., typeof x == "function" or goog.isFunction(x)) evaluates to TRUE
+        if (resultEqualsValue) {
+          // If the current type 'type' can potentially be a Function (i.e., ctorType is a subtype of type),
+          // then narrow 'type' to 'Function'.
+          // Otherwise, if 'type' cannot be a Function (e.g., 'type' is a String), then this is an
+          // impossible state given the true comparison, so return null.
+          return ctorType.isSubtype(type) ? ctorType : null;
+        } else { // The comparison (e.g., typeof x == "function" or goog.isFunction(x)) evaluates to FALSE
+          // This means 'x' is NOT a function.
+          // If the current 'type' is a Function type (or a specific subtype of Function),
+          // then it's an impossible state given that we now know 'x' is not a function. Return null.
+          // Otherwise, if 'type' is an ObjectType that is NOT a Function (e.g., Array, Date, or a generic Object),
+          // then 'type' remains as is, as it correctly represents an object that is not a function.
+          return type.isSubtype(ctorType) ? null : type;
         }
+      }
+      // This block handles cases like "typeof x == 'object'".
+      // This line is reached only if 'value' is not "function".
+      // 'matchesExpectation("object")' helper determines the outcome based on 'value' and 'resultEqualsValue'.
+      // - If 'value' is "object" and 'resultEqualsValue' is true (i.e., typeof x == "object"):
+      //   'matchesExpectation("object")' returns true, so 'type' is returned. This is correct.
+      // - If 'value' is "object" and 'resultEqualsValue' is false (i.e., typeof x != "object"):
+      //   'matchesExpectation("object")' returns false, so 'null' is returned. This is correct as 'x' is not an object.
+      // - If 'value' is something else (e.g., "number", "string", etc.) and not "function":
+      //   'matchesExpectation("object")' returns false (as 'value' is not "object"), so 'null' is returned.
+      //   This is correct, as this visitor (caseObjectType) should not provide type information for non-object primitives.
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
