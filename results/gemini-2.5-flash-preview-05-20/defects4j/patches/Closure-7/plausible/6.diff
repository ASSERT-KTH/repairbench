diff --git a/tmp/ad0e7061-f804-4b64-8f0e-e2cd4968af89_buggy.java b/tmp/d5243d7d-9c20-4019-a942-8df9cd2f7a0e_fixed.java
index a38ec6d..e474816 100644
--- a/tmp/ad0e7061-f804-4b64-8f0e-e2cd4968af89_buggy.java
+++ b/tmp/d5243d7d-9c20-4019-a942-8df9cd2f7a0e_fixed.java
@@ -1,10 +1,27 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE); // Represents the Function type
+        if (resultEqualsValue) { // Corresponds to `typeof x === "function"` or `goog.isFunction(x)` is true
+          // If the expectation is that 'x' is a function, and 'type' is an ObjectType,
+          // then 'type' should be narrowed to the Function type.
+          return ctorType;
+        } else { // Corresponds to `typeof x !== "function"` or `goog.isFunction(x)` is false
+          // If the expectation is that 'x' is NOT a function, and 'type' is an ObjectType,
+          // we need to filter out the Function type from 'type'.
+          // If 'type' itself is the Function type (or a subtype of Function), it's a contradiction,
+          // so return null (meaning this specific type is excluded from the union).
+          // Otherwise, 'type' is a generic ObjectType (e.g., Object, Array) that is not a Function,
+          // so it remains a possibility and should be returned.
+          return type.isSubtype(ctorType) ? null : type;
         }
+      }
+      // This part handles other typeof string values (e.g., "object", "string", "number", etc.)
+      // and other checks (e.g., goog.isObject).
+      // 'matchesExpectation("object")' checks if the `value` is "object" and `resultEqualsValue` matches,
+      // or if `value` is not "object" and `resultEqualsValue` doesn't match.
+      // For instance, if `value` is "object" and `resultEqualsValue` is true, it keeps the type.
+      // If `value` is "string" and `resultEqualsValue` is true, it means `x` is a string,
+      // so `x` cannot be an object, thus `null` is returned (filtered out).
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
