diff --git a/tmp/2bd1768e-b833-4238-a583-e63e33988523_buggy.java b/tmp/b60896c7-ad40-4574-b0e5-07c119244fe8_fixed.java
index a38ec6d..0830f96 100644
--- a/tmp/2bd1768e-b833-4238-a583-e63e33988523_buggy.java
+++ b/tmp/b60896c7-ad40-4574-b0e5-07c119244fe8_fixed.java
@@ -1,10 +1,31 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
+        // U2U_CONSTRUCTOR_TYPE typically represents FunctionType (or FunctionType|UnknownType).
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+
+        if (resultEqualsValue) { // Handles cases like `typeof x == "function"` or `goog.isFunction(x)` (when true)
+          // If the original type is an ObjectType and we are asserting it's a function,
+          // then this ObjectType should be narrowed to FunctionType.
+          // ObjectType is a supertype of FunctionType, so a generic object can be a function.
+          return ctorType;
+        } else { // Handles cases like `typeof x != "function"` or `goog.isFunction(x)` (when false)
+          // If the original type is an ObjectType and we are asserting it's NOT a function,
+          // it means this specific ObjectType instance is not a Function.
+          // Other kinds of objects (like Array, Date, plain objects) are still valid here.
+          // Thus, the type remains ObjectType, effectively excluding FunctionType from it
+          // in the context of the overall type narrowing for unions.
+          // Returning 'null' here (as in the original code) would incorrectly filter
+          // out valid non-function object types (e.g., Array) if they were part of a union
+          // that included a generic ObjectType.
+          return type;
         }
+      }
+      // This handles `typeof x == "object"` or `typeof x != "object"`.
+      // If `value` is "object":
+      //   - If `resultEqualsValue` is true (`x == "object"`), then `matchesExpectation("object")` is true.
+      //     An ObjectType matches "object", so return `type` (the original ObjectType).
+      //   - If `resultEqualsValue` is false (`x != "object"`), then `matchesExpectation("object")` is false.
+      //     An ObjectType cannot be "not an object", so return `null` (impossible type).
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
