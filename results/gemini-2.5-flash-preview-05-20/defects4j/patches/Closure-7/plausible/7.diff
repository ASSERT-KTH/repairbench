diff --git a/tmp/a5959360-3f19-4161-b215-f289c3f809ff_buggy.java b/tmp/2a51fd2e-2e9e-4e9b-ac5b-e184d18e0d57_fixed.java
index a38ec6d..ef61ad1 100644
--- a/tmp/a5959360-3f19-4161-b215-f289c3f809ff_buggy.java
+++ b/tmp/2a51fd2e-2e9e-4e9b-ac5b-e184d18e0d57_fixed.java
@@ -1,10 +1,29 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE); // Represents the 'Function' type
+        if (resultEqualsValue) { // Corresponds to "typeof x === 'function'"
+          // If the current object type 'type' can potentially be a Function
+          // (i.e., Function is a subtype of 'type', e.g., type is Object),
+          // then narrow 'type' to 'Function'.
+          // Otherwise, this specific 'type' (e.g., Array) is not possible
+          // under this condition, so return null to remove it.
+          return ctorType.isSubtype(type) ? ctorType : null;
+        } else { // Corresponds to "typeof x !== 'function'"
+          // If the current object type 'type' is Function itself, or a subtype of Function,
+          // then it's impossible for 'x' to be of this 'type' given the condition.
+          // Return null to effectively remove it from the union.
+          // Otherwise, if 'type' is not Function (e.g., Object, Array),
+          // it's still possible for 'x' to be of this 'type'. So return 'type'.
+          return type.isSubtype(ctorType) ? null : type;
         }
+      }
+      // This part handles other typeof values like "object", "string", etc.
+      // applied to an ObjectType. The existing logic is correct for these cases.
+      // `matchesExpectation("object")` correctly evaluates to:
+      // - true if value is "object" and resultEqualsValue is true (keep object types)
+      // - false if value is "object" and resultEqualsValue is false (remove object types)
+      // - false if value is not "object" and resultEqualsValue is true (remove object types)
+      // - true if value is not "object" and resultEqualsValue is false (keep object types)
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
