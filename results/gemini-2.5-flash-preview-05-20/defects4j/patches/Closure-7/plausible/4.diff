diff --git a/tmp/30c70058-8fe8-4d57-8110-ea57a8df011f_buggy.java b/tmp/f67fe4f5-3fc4-48f6-925d-a2291a8748e9_fixed.java
index a38ec6d..16b230d 100644
--- a/tmp/30c70058-8fe8-4d57-8110-ea57a8df011f_buggy.java
+++ b/tmp/f67fe4f5-3fc4-48f6-925d-a2291a8748e9_fixed.java
@@ -1,10 +1,24 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        if (resultEqualsValue) {
+          // If 'typeof x == "function"' is true, then the type must be 'Function'.
+          // This applies to both generic ObjectType and explicit FunctionType.
+          return ctorType;
+        } else {
+          // If 'typeof x != "function"' is true:
+          // 1. If 'type' is a FunctionType (or subtype of Function), it is no longer possible.
+          // 2. If 'type' is a generic ObjectType (not a FunctionType), it is still possible.
+          if (type.isSubtype(ctorType)) {
+            // 'type' is a function type (e.g., FunctionType), but we know it's not a function.
+            // Remove this type from the possible types.
+            return null;
+          }
+          // 'type' is a generic object type (not a function type), and we know it's not a function.
+          // It can still be this type, so return it.
+          return type;
+        }
       }
       return matchesExpectation("object") ? type : null;
     }
