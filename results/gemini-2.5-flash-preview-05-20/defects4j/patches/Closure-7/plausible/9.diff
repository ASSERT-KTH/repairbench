diff --git a/tmp/172c2c60-4b64-4e10-a738-f77b8777da6f_buggy.java b/tmp/56bc95c2-25b7-473e-b960-6de3dfbef160_fixed.java
index a38ec6d..78a2ff6 100644
--- a/tmp/172c2c60-4b64-4e10-a738-f77b8777da6f_buggy.java
+++ b/tmp/56bc95c2-25b7-473e-b960-6de3dfbef160_fixed.java
@@ -1,10 +1,20 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        if (resultEqualsValue) {
+          // If we're looking for 'function' (e.g., typeof x === 'function' or goog.isFunction(x)):
+          // Return the Function type if the current ObjectType 'type' is compatible.
+          // This means 'type' is either the Function type itself or a supertype like 'Object'
+          // that can be narrowed down to 'Function'.
+          // ctorType.isSubtype(type) checks if Function is a subtype of 'type' (e.g., type is Object or Function).
+          return ctorType.isSubtype(type) ? ctorType : null;
+        } else {
+          // If we're looking for 'not function' (e.g., typeof x !== 'function' or !goog.isFunction(x)):
+          // If the current ObjectType 'type' is a function type, filter it out (return null).
+          // Otherwise, it's a non-function object type, so keep it (return type).
+          return type.isFunctionType() ? null : type;
+        }
       }
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
