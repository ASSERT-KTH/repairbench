diff --git a/tmp/e0e15792-d739-48e0-a72d-226532e2b4f9_buggy.java b/tmp/ccc83611-a775-465b-b48d-bb6ab4da7f7e_fixed.java
index a38ec6d..4690a14 100644
--- a/tmp/e0e15792-d739-48e0-a72d-226532e2b4f9_buggy.java
+++ b/tmp/ccc83611-a775-465b-b48d-bb6ab4da7f7e_fixed.java
@@ -1,10 +1,25 @@
     @Override
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
+        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE); // ctorType typically represents the 'Function' type.
+
+        if (resultEqualsValue) { // This branch handles the condition 'typeof x === "function"'
+          // If the current type 'type' can possibly be a function, then we narrow it to 'Function'.
+          // For example, if 'type' is a generic ObjectType, it can be a function, so we return Function.
+          // If 'type' is a specific object like 'ObjectObject' or 'ArrayType', it cannot be a function,
+          // so we return null to indicate incompatibility.
+          return type.canBe(ctorType) ? ctorType : null;
+        } else { // This branch handles the condition 'typeof x !== "function"'
+          // If the current type 'type' can possibly be a function (e.g., ObjectType or Function itself),
+          // we exclude the 'Function' part from it.
+          // If 'type' cannot be a function (e.g., ObjectObject, ArrayType), it already satisfies
+          // the condition, so we return 'type' as is.
+          return type.canBe(ctorType) ? type.getExcluding(ctorType) : type;
         }
+      }
+      // This part handles other 'typeof' checks (e.g., 'typeof x === "object"').
+      // It returns the type if it matches the expectation, otherwise null.
+      // Assuming matchesExpectation("object") correctly evaluates if the current type
+      // fits the "object" typeof result based on resultEqualsValue.
       return matchesExpectation("object") ? type : null;
     }
\ No newline at end of file
