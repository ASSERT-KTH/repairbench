diff --git a/tmp/b3fd80af-c2b8-440f-92b7-7a5f552819b7_buggy.java b/tmp/aef5c1d7-6dee-4945-bf61-f2e4f11d0fc2_fixed.java
index 735a993..8dedc36 100644
--- a/tmp/b3fd80af-c2b8-440f-92b7-7a5f552819b7_buggy.java
+++ b/tmp/aef5c1d7-6dee-4945-bf61-f2e4f11d0fc2_fixed.java
@@ -1,29 +1,37 @@
     /**
      * Appends an object to the builder padding on the right to a fixed length.
      * The <code>toString</code> of the object is used.
      * If the object is larger than the length, the right hand side is lost.
      * If the object is null, null text value is used.
      * 
      * @param obj  the object to append, null uses null text
      * @param width  the fixed field width, zero or negative has no effect
      * @param padChar  the pad character to use
      * @return this, to enable chaining
      */
     public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
         if (width > 0) {
             ensureCapacity(size + width);
             String str = (obj == null ? getNullText() : obj.toString());
             int strLen = str.length();
             if (strLen >= width) {
-                str.getChars(0, strLen, buffer, size);
+                // If the string length is greater than or equal to the desired width,
+                // copy only the first 'width' characters. This truncates the string
+                // from the right, as per the Javadoc: "If the object is larger than the length,
+                // the right hand side is lost."
+                // The original code copied 'strLen' characters, which could exceed
+                // the allocated 'width' capacity and lead to ArrayIndexOutOfBoundsException.
+                str.getChars(0, width, buffer, size);
             } else {
+                // If the string is shorter than the desired width,
+                // copy the full string and then pad the remaining characters.
                 int padLen = width - strLen;
                 str.getChars(0, strLen, buffer, size);
                 for (int i = 0; i < padLen; i++) {
                     buffer[size + strLen + i] = padChar;
                 }
             }
             size += width;
         }
         return this;
     }
\ No newline at end of file
