diff --git a/tmp/29c76fba-271e-438d-ac79-098d788a040d_buggy.java b/tmp/64f48969-a4a9-45aa-84c8-2df40352f64a_fixed.java
index e5ad041..d5d52c9 100644
--- a/tmp/29c76fba-271e-438d-ac79-098d788a040d_buggy.java
+++ b/tmp/64f48969-a4a9-45aa-84c8-2df40352f64a_fixed.java
@@ -1,19 +1,34 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
+        // 21-Apr-2016, tatu: But how can we re-resolve? Need TypeFactory!
+        //    For now, must NOT try to use this method; instead caller MUST use
+        //    TypeFactory.constructSpecializedType().
+        // For now: let's try to pass it, but fail if we have actual type variables
+        // to worry about.
+        // NOTE: only relevant for SimpleType, as other types need bindings.
+        if (!_bindings.isEmpty()) {
+            throw new IllegalArgumentException("SimpleType.narrow cannot be used on types with type parameters: "+_class.getName()+" vs "+subclass.getName());
+        }
+        
+        // FIX: If original type was static (e.g., `java.lang.Object`) but the narrowed
+        // subclass is not `Object.class`, then the new type should not be static.
+        // This ensures proper property introspection for specific types.
+        boolean newAsStatic = _asStatic && (subclass == Object.class);
+
         return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+                _valueHandler, _typeHandler, newAsStatic);
     }
