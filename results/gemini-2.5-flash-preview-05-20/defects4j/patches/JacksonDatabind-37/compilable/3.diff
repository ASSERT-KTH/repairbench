diff --git a/tmp/aab8c5c2-1433-473a-864c-301dd637b79d_buggy.java b/tmp/7cc0e7d9-ff35-4f22-b4eb-6bdd0d4a187c_fixed.java
index e5ad041..6f2eb1c 100644
--- a/tmp/aab8c5c2-1433-473a-864c-301dd637b79d_buggy.java
+++ b/tmp/7cc0e7d9-ff35-4f22-b4eb-6bdd0d4a187c_fixed.java
@@ -1,19 +1,33 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+        // The original code passed _bindings, _superClass, and _superInterfaces directly
+        // from the current type ('this') to the new SimpleType.
+        // This is problematic because these properties (especially _bindings) should be
+        // re-resolved and specific to the 'subclass', not inherited directly from the
+        // potentially more generic or differently-bound super-type.
+        // For a `SimpleType`, which typically represents a non-generic class, its `TypeBindings`
+        // should usually be empty. If the `subclass` is non-generic (like `JsonMapSchema` in the test case),
+        // passing potentially non-empty bindings from a generic `_class` can lead to
+        // incorrect type introspection (e.g., "0 known properties").
+        // By explicitly setting TypeBindings.emptyBindings(), we ensure the new SimpleType
+        // for the `subclass` starts with correct, empty bindings, which is appropriate for
+        // most simple, non-generic classes. The `_superClass` and `_superInterfaces` might
+        // still need full re-resolution by `TypeFactory`, but correcting `_bindings` is
+        // often the critical step for property discovery.
+        return new SimpleType(subclass, TypeBindings.emptyBindings(), _superClass, _superInterfaces,
                 _valueHandler, _typeHandler, _asStatic);
     }
\ No newline at end of file
