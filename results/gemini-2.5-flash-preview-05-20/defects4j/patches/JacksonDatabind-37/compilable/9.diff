diff --git a/tmp/a71a749c-5a24-46e8-a0b3-c3c25d593dd1_buggy.java b/tmp/71ac86b1-8d85-4983-ad74-f83cba4e3c99_fixed.java
index e5ad041..d5dd988 100644
--- a/tmp/a71a749c-5a24-46e8-a0b3-c3c25d593dd1_buggy.java
+++ b/tmp/71ac86b1-8d85-4983-ad74-f83cba4e3c99_fixed.java
@@ -1,19 +1,29 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+        // Problem: When narrowing to a specific subclass (e.g., a concrete POJO),
+        // the TypeBindings from the original (potentially generic) type should not
+        // be blindly inherited by the new SimpleType. A SimpleType for a raw,
+        // non-generic class should typically have empty bindings.
+        // Incorrectly carrying over bindings can lead to introspection issues
+        // (e.g., "0 known properties") because Jackson's internal type resolution
+        // or bean property discovery gets confused by incorrect generic type information.
+        // The fix is to use empty bindings for the new SimpleType unless the subclass
+        // itself is a generic type that requires specific bindings, which is not
+        // the case for SimpleType's primary use-case (raw, non-generic classes).
+        return new SimpleType(subclass, TypeBindings.emptyBindings(), _superClass, _superInterfaces,
                 _valueHandler, _typeHandler, _asStatic);
     }
\ No newline at end of file
