diff --git a/tmp/b7fca4dc-bef4-4a67-821f-20f0be1be789_buggy.java b/tmp/8827fc6a-1a55-48de-a9b9-76f27b91c297_fixed.java
index e5ad041..f6b22cb 100644
--- a/tmp/b7fca4dc-bef4-4a67-821f-20f0be1be789_buggy.java
+++ b/tmp/8827fc6a-1a55-48de-a9b9-76f27b91c297_fixed.java
@@ -1,19 +1,41 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+        //
+        // The original comment correctly identifies a problem: copying the TypeBindings,
+        // superClass, and superInterfaces from the current type to the narrower type
+        // is generally incorrect. These properties are specific to the original '_class'
+        // and its generic context, not necessarily to the 'subclass'.
+        //
+        // For a SimpleType, which represents a non-generic class (one that doesn't
+        // define its own type parameters like List<E> or Map<K,V>), its own bindings
+        // should typically be empty. Furthermore, its super-class and super-interfaces
+        // should be derived directly from the 'subclass' itself by the TypeFactory
+        // during introspection, rather than being inherited from the parent type.
+        // A JavaType instance usually does not have direct access to the TypeFactory
+        // to perform a full re-resolution of the type hierarchy.
+        //
+        // Therefore, when narrowing a SimpleType, the most appropriate action is to
+        // create a new SimpleType for the 'subclass' with reset (empty/null)
+        // bindings and supertype information. This relies on the higher-level
+        // TypeFactory and ClassIntrospector to correctly resolve the subclass's
+        // own type hierarchy when needed (e.g., for property discovery).
+        //
+        // The valueHandler, typeHandler, and asStatic flags are typically attributes
+        // of the type's usage or serialization behavior and should be preserved.
+        return new SimpleType(subclass, _bindings.emptyBindings(),
+                null, null, _valueHandler, _typeHandler, _asStatic);
     }
\ No newline at end of file
