diff --git a/tmp/990eb60a-0f11-4ff6-824b-b58d5ebd9034_buggy.java b/tmp/b223f15d-65b1-415b-8b2a-3aecc1a887a3_fixed.java
index e5ad041..9866d06 100644
--- a/tmp/990eb60a-0f11-4ff6-824b-b58d5ebd9034_buggy.java
+++ b/tmp/b223f15d-65b1-415b-8b2a-3aecc1a887a3_fixed.java
@@ -1,19 +1,22 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+        // The correct way to "re-resolve" with a narrower class is to use TypeFactory.
+        // It will correctly handle generic bindings, super-types, and convert to
+        // specific collection/map types if 'subclass' is one.
+        // The original logic just copied bindings, which is problematic for generic types.
+        return TypeFactory.defaultInstance().constructSpecializedType(this, subclass);
     }
\ No newline at end of file
