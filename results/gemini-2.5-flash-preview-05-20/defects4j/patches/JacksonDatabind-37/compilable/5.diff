diff --git a/tmp/d4c4a59f-597a-4943-af22-a0f3b93b2aca_buggy.java b/tmp/c56e3eaa-b516-44ff-8456-d4e1602b695b_fixed.java
index e5ad041..bce63a6 100644
--- a/tmp/d4c4a59f-597a-4943-af22-a0f3b93b2aca_buggy.java
+++ b/tmp/c56e3eaa-b516-44ff-8456-d4e1602b695b_fixed.java
@@ -1,19 +1,17 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+        // 15-Jan-2015, tatu: The original comment "Not correct; should really re-resolve..."
+        // refers to the fact that simply copying the existing _bindings, _superClass,
+        // and _superInterfaces is often incorrect. When narrowing to a specific
+        // 'subclass', the TypeFactory is responsible for re-resolving the
+        // complete type hierarchy and generic bindings for that 'subclass' from scratch.
+        // This method should therefore return a "clean" SimpleType for the subclass,
+        // retaining only non-structural properties like value/type handlers.
+        return new SimpleType(subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings(),
+                null, null, // Super type information will be re-resolved by TypeFactory
                 _valueHandler, _typeHandler, _asStatic);
     }
\ No newline at end of file
