diff --git a/tmp/3f24cdc9-65b1-4ff4-adcf-76676516a8d3_buggy.java b/tmp/2a261b8c-68d1-434d-a977-bd84f1b9f97f_fixed.java
index e5ad041..65999eb 100644
--- a/tmp/3f24cdc9-65b1-4ff4-adcf-76676516a8d3_buggy.java
+++ b/tmp/2a261b8c-68d1-434d-a977-bd84f1b9f97f_fixed.java
@@ -1,19 +1,24 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+        // The original implementation bypassed TypeFactory, which can lead to
+        // incorrect JavaType subclasses (e.g., SimpleType instead of MapType/CollectionType)
+        // or improper handling of generic type parameters.
+        // Re-resolving through TypeFactory ensures that the correct JavaType
+        // for the 'subclass' is created, inheriting generic information
+        // from 'this' type as needed.
+        return _factory.constructSpecializedType(this, subclass);
     }
\ No newline at end of file
