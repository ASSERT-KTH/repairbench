diff --git a/tmp/3de3b158-0871-4328-a0fe-3ee3de7aabc3_buggy.java b/tmp/ecb7b563-88e5-4a34-8e44-ce299353a1d0_fixed.java
index e5ad041..1b9f88f 100644
--- a/tmp/3de3b158-0871-4328-a0fe-3ee3de7aabc3_buggy.java
+++ b/tmp/ecb7b563-88e5-4a34-8e44-ce299353a1d0_fixed.java
@@ -1,19 +1,33 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+
+        // Fix: The original issue lies in simply copying _bindings, _superClass, and _superInterfaces
+        // directly from the parent type to the subclass type. This is incorrect as the subclass
+        // might have different generic parameters or a different direct superclass/interfaces.
+        // Without access to TypeFactory (which is the proper way to resolve all type information),
+        // the most critical part to re-evaluate for fixing "unrecognized properties" is the TypeBindings.
+        // The `narrowContentsBy` method of TypeBindings handles the case where the subclass
+        // is non-generic (returning empty bindings) or a specialized generic.
+        TypeBindings newBindings = _bindings.narrowContentsBy(subclass);
+
+        // While _superClass and _superInterfaces should ideally also be re-resolved based on
+        // 'subclass' (which requires TypeFactory to convert Class<?> to JavaType),
+        // addressing TypeBindings is often sufficient to resolve property discovery issues.
+        // This change aligns partially with the logic adopted in later Jackson versions for similar scenarios.
+        return new SimpleType(subclass, newBindings, _superClass, _superInterfaces,
                 _valueHandler, _typeHandler, _asStatic);
     }
