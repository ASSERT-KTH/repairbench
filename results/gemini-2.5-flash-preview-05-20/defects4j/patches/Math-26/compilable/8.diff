diff --git a/tmp/77003255-57fa-440d-9f62-b7b672869237_buggy.java b/tmp/16ceae85-378f-40fa-96a7-388c457c1afc_fixed.java
index 70ac98c..a570f8c 100644
--- a/tmp/77003255-57fa-440d-9f62-b7b672869237_buggy.java
+++ b/tmp/16ceae85-378f-40fa-96a7-388c457c1afc_fixed.java
@@ -1,95 +1,114 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
      *         converge.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
         if (a0 > overflow) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
         long p2 = 0;
         long q2 = 1;
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
             long a1 = (long)FastMath.floor(r1);
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
             if ((p2 > overflow) || (q2 > overflow)) {
                 throw new FractionConversionException(value, p2, q2);
             }
 
             double convergent = (double)p2 / (double)q2;
+            // The loop continues as long as n < maxIterations AND abs(convergent - value) > epsilon AND q2 < maxDenominator.
+            // If any of these conditions becomes false, the loop stops.
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
                 a0 = a1;
                 r0 = r1;
             } else {
                 stop = true;
             }
         } while (!stop);
 
         if (n >= maxIterations) {
+            // If the loop stopped because maxIterations was reached, throw an exception.
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // At this point, the loop stopped because either:
+        // 1. FastMath.abs(convergent - value) <= epsilon (and n < maxIterations, q2 < maxDenominator must still be true)
+        //    In this case, p2/q2 is a suitable fraction that meets the epsilon requirement.
+        // 2. q2 >= maxDenominator (and n < maxIterations, FastMath.abs(convergent - value) > epsilon must still be true)
+        //    In this case, p2/q2's denominator is too large.
+        //    The previous fraction p1/q1's denominator was within maxDenominator, but it did not satisfy the epsilon.
+        //    According to JIRA MATH-181, if no fraction satisfies both the epsilon and maxDenominator constraints,
+        //    a FractionConversionException should be thrown.
+
+        // If q2 < maxDenominator, it implies that the loop stopped because the epsilon condition was met.
+        // (Otherwise, if epsilon was *not* met, and q2 *was* < maxDenominator, AND n < maxIterations,
+        // the loop would have continued).
         if (q2 < maxDenominator) {
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
-            this.numerator = (int) p1;
-            this.denominator = (int) q1;
+            // This 'else' branch is reached when q2 >= maxDenominator.
+            // It means that the current convergent p2/q2 has a denominator that exceeds the maximum allowed.
+            // Furthermore, because the loop continued beyond the previous convergent (p1/q1),
+            // it implies that p1/q1, while having a denominator within maxDenominator (q1 < maxDenominator),
+            // did NOT satisfy the epsilon criterion.
+            // Therefore, no fraction could be found that satisfies both the epsilon and maxDenominator constraints.
+            throw new FractionConversionException(value, p2, q2);
         }
-
     }
\ No newline at end of file
