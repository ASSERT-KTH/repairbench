diff --git a/tmp/b8b93c59-ee1a-4c33-8f49-affa4788e046_buggy.java b/tmp/5ec52674-1eef-4ad8-af7d-bc9354ba51c4_fixed.java
index 70ac98c..91b04b3 100644
--- a/tmp/b8b93c59-ee1a-4c33-8f49-affa4788e046_buggy.java
+++ b/tmp/5ec52674-1eef-4ad8-af7d-bc9354ba51c4_fixed.java
@@ -1,95 +1,117 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
      *         converge.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
-        long overflow = Integer.MAX_VALUE;
+        // Removed 'long overflow = Integer.MAX_VALUE;' as it's insufficient for both positive and negative int range checks.
+
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+        // Check for integer overflow/underflow for the initial integer part.
+        // Numerator/denominator must fit in an int.
+        if (a0 > Integer.MAX_VALUE || a0 < Integer.MIN_VALUE) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
-        // to iterations.
+        // to iterations. If a0 is out of int range, the above check would
+        // have already thrown an exception. So, if we reach this point, a0 is
+        // guaranteed to be within int range.
         if (FastMath.abs(a0 - value) < epsilon) {
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
         long p2 = 0;
         long q2 = 1;
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
             long a1 = (long)FastMath.floor(r1);
+
+            // Compute next convergent (p2/q2)
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+
+            // Check for overflow/underflow of the numerator and denominator.
+            // If p2 or q2 exceed int range, throw an exception.
+            if (p2 > Integer.MAX_VALUE || p2 < Integer.MIN_VALUE ||
+                q2 > Integer.MAX_VALUE || q2 < Integer.MIN_VALUE) {
                 throw new FractionConversionException(value, p2, q2);
             }
 
             double convergent = (double)p2 / (double)q2;
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
                 a0 = a1;
                 r0 = r1;
             } else {
                 stop = true;
             }
         } while (!stop);
 
         if (n >= maxIterations) {
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // Final assignment: check the chosen convergent (p2/q2 or p1/q1)
+        // one last time before casting to int.
+        // This is a defensive check; ideally, the loop condition should
+        // have caught any overflow earlier.
         if (q2 < maxDenominator) {
+            if (p2 > Integer.MAX_VALUE || p2 < Integer.MIN_VALUE ||
+                q2 > Integer.MAX_VALUE || q2 < Integer.MIN_VALUE) {
+                throw new FractionConversionException(value, p2, q2);
+            }
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
+            if (p1 > Integer.MAX_VALUE || p1 < Integer.MIN_VALUE ||
+                q1 > Integer.MAX_VALUE || q1 < Integer.MIN_VALUE) {
+                throw new FractionConversionException(value, p1, q1);
+            }
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
\ No newline at end of file
