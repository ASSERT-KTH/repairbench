diff --git a/tmp/aa159bba-dc94-4810-9b73-cb2c6483a656_buggy.java b/tmp/c729ea20-a12d-4632-9f11-743ed5c6d9d8_fixed.java
index 70ac98c..8782135 100644
--- a/tmp/aa159bba-dc94-4810-9b73-cb2c6483a656_buggy.java
+++ b/tmp/c729ea20-a12d-4632-9f11-743ed5c6d9d8_fixed.java
@@ -1,95 +1,105 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
      *         converge.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
-        long overflow = Integer.MAX_VALUE;
+        // The original 'overflow' variable was Integer.MAX_VALUE.
+        // It's clearer to use Integer.MAX_VALUE and Integer.MIN_VALUE directly for range checks.
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+        // Check for initial integer part overflow against int limits
+        if (a0 > Integer.MAX_VALUE || a0 < Integer.MIN_VALUE) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
         long p2 = 0;
         long q2 = 1;
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
             long a1 = (long)FastMath.floor(r1);
+
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+
+            // Check for overflow of p2 (numerator) or q2 (denominator)
+            // p2 must be within [Integer.MIN_VALUE, Integer.MAX_VALUE]
+            // q2 must be positive and within [1, Integer.MAX_VALUE]
+            if (p2 > Integer.MAX_VALUE || p2 < Integer.MIN_VALUE ||
+                q2 > Integer.MAX_VALUE || q2 < 1) {
                 throw new FractionConversionException(value, p2, q2);
             }
 
             double convergent = (double)p2 / (double)q2;
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
                 a0 = a1;
                 r0 = r1;
             } else {
                 stop = true;
             }
         } while (!stop);
 
         if (n >= maxIterations) {
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // The final assignment uses values (p2, q2 or p1, q1) that
+        // have already passed the overflow checks in a previous iteration.
+        // So, casting to int here should be safe if no exception was thrown.
         if (q2 < maxDenominator) {
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
\ No newline at end of file
