diff --git a/tmp/bf65814f-2822-41f2-9f8e-e6ec83778a3b_buggy.java b/tmp/b93bd4a5-c5fb-4740-8ce4-b061a7db90f8_fixed.java
index 70ac98c..35c1db9 100644
--- a/tmp/bf65814f-2822-41f2-9f8e-e6ec83778a3b_buggy.java
+++ b/tmp/b93bd4a5-c5fb-4740-8ce4-b061a7db90f8_fixed.java
@@ -1,95 +1,119 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
      *         converge.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
-        long overflow = Integer.MAX_VALUE;
+        // Use long for intermediate calculations to prevent overflow before checking against int bounds.
+        final long maxIntValue = Integer.MAX_VALUE;
+        final long minIntValue = Integer.MIN_VALUE;
+
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+
+        // Check initial a0 for overflow against int bounds.
+        // a0 must fit into an int, as it will be the numerator if the value is an almost-integer.
+        if (a0 > maxIntValue || a0 < minIntValue) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
+        // The cast to int here is safe because a0 has already been checked against int bounds.
         if (FastMath.abs(a0 - value) < epsilon) {
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
-        long p2 = 0;
-        long q2 = 1;
+        long p2;
+        long q2;
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
             long a1 = (long)FastMath.floor(r1);
+
+            // Compute the new convergent terms p2 and q2
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+
+            // Check if p2 or q2 exceed int bounds.
+            // Denominators (q values) must also be positive.
+            // In a well-behaved continued fraction algorithm where a_i (i >= 1) are positive,
+            // q_i values are also positive and increasing, so q2 < 0 or q2 == 0 should not occur.
+            if ((p2 > maxIntValue || p2 < minIntValue) ||
+                (q2 > maxIntValue || q2 < minIntValue)) {
                 throw new FractionConversionException(value, p2, q2);
             }
 
             double convergent = (double)p2 / (double)q2;
+
+            // Stop condition:
+            // 1. Max iterations reached
+            // 2. Convergent is close enough to value (abs error <= epsilon)
+            // 3. Denominator exceeds maxDenominator (q2 >= maxDenominator)
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
                 a0 = a1;
                 r0 = r1;
             } else {
                 stop = true;
             }
         } while (!stop);
 
+        // If maxIterations is reached, it means we couldn't converge within the limits.
         if (n >= maxIterations) {
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // Select the best approximation:
+        // If the last computed convergent (p2/q2) has a denominator within limits, use it.
+        // Otherwise, use the previous one (p1/q1).
+        // Both p1, q1 and p2, q2 would have passed the int overflow checks in their respective iterations.
         if (q2 < maxDenominator) {
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
\ No newline at end of file
