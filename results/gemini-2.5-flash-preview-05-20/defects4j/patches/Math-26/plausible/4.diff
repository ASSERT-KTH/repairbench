diff --git a/tmp/4e21125a-f6f2-48e8-ae83-952fe40359eb_buggy.java b/tmp/71115670-1ce2-41fb-b249-cc0b71839b57_fixed.java
index 70ac98c..7d6d6f4 100644
--- a/tmp/4e21125a-f6f2-48e8-ae83-952fe40359eb_buggy.java
+++ b/tmp/71115670-1ce2-41fb-b249-cc0b71839b57_fixed.java
@@ -1,95 +1,148 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
      *         converge.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
-        long overflow = Integer.MAX_VALUE;
+        // 'overflow' variable name is misleading, it should be intLimit
+        // We use intLimit to explicitly check against Integer.MAX_VALUE and Integer.MIN_VALUE
+        long intLimit = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
+
+        // Check if the initial integer part itself overflows an int
+        if (a0 < Integer.MIN_VALUE || a0 > intLimit) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
         long p1 = a0;
         long q1 = 1;
 
         long p2 = 0;
         long q2 = 1;
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
             long a1 = (long)FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+            // a1 is guaranteed to be >= 1 here because r0 - a0 is (value - floor(value)),
+            // which is strictly between 0 and 1 for non-integer values (handled by epsilon check)
+            // so 1/(r0 - a0) > 1.
+
+            // Compute p2 = (a1 * p1) + p0;
+            // Need to check for long overflow in multiplication and addition.
+            // p1 and p0 can be negative based on prior values.
+            long p2_prod;
+            if (a1 == 0) { // Should not happen based on a1 >= 1.
+                p2_prod = 0;
+            } else if (p1 > 0) {
+                if (a1 > Long.MAX_VALUE / p1) { // Positive multiplication overflow
+                    throw new FractionConversionException(value, a1, p1);
+                }
+                p2_prod = a1 * p1;
+            } else { // p1 <= 0
+                if (p1 < Long.MIN_VALUE / a1) { // Negative multiplication overflow
+                    throw new FractionConversionException(value, a1, p1);
+                }
+                p2_prod = a1 * p1;
+            }
+            
+            // Check for addition overflow for p2_prod + p0
+            if (p2_prod > 0 && p0 > 0) {
+                if (p2_prod > Long.MAX_VALUE - p0) { // Positive addition overflow
+                    throw new FractionConversionException(value, p2_prod, p0);
+                }
+            } else if (p2_prod < 0 && p0 < 0) {
+                if (p2_prod < Long.MIN_VALUE - p0) { // Negative addition overflow
+                    throw new FractionConversionException(value, p2_prod, p0);
+                }
+            }
+            p2 = p2_prod + p0;
+
+            // Compute q2 = (a1 * q1) + q0;
+            // q1 and q0 are always non-negative (q0 starts at 0, q1 at 1, subsequent q values are positive).
+            // So a1 * q1 and (a1 * q1) + q0 will always be non-negative.
+            long q2_prod;
+            if (q1 > Long.MAX_VALUE / a1) { // Positive multiplication overflow
+                throw new FractionConversionException(value, a1, q1);
+            }
+            q2_prod = a1 * q1;
+            if (q2_prod > Long.MAX_VALUE - q0) { // Positive addition overflow
+                throw new FractionConversionException(value, q2_prod, q0);
+            }
+            q2 = q2_prod + q0;
+
+            // Now, p2 and q2 are guaranteed to be mathematically correct long values.
+            // Check if they fit within the Integer.MIN_VALUE and Integer.MAX_VALUE range.
+            if (p2 < Integer.MIN_VALUE || p2 > intLimit ||
+                q2 < Integer.MIN_VALUE || q2 > intLimit) {
                 throw new FractionConversionException(value, p2, q2);
             }
 
             double convergent = (double)p2 / (double)q2;
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
             q1 = q2;
                 a0 = a1;
                 r0 = r1;
             } else {
                 stop = true;
             }
         } while (!stop);
 
         if (n >= maxIterations) {
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // The values p2, q2, p1, q1 have already been checked to fit into int range
+        // in the loop before they become candidate for assignment.
         if (q2 < maxDenominator) {
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
\ No newline at end of file
