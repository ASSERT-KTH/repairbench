diff --git a/tmp/5b019d97-0a8c-4609-ba85-2b1737a34cdd_buggy.java b/tmp/96733bf9-3ccf-4d86-80a2-14833de02b3b_fixed.java
index 70ac98c..edbb9bd 100644
--- a/tmp/5b019d97-0a8c-4609-ba85-2b1737a34cdd_buggy.java
+++ b/tmp/96733bf9-3ccf-4d86-80a2-14833de02b3b_fixed.java
@@ -1,95 +1,114 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
      *         converge.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
-        long overflow = Integer.MAX_VALUE;
+        // The original `long overflow = Integer.MAX_VALUE;` was insufficient
+        // as it only checked for positive overflow. Numerators and denominators
+        // must fit within `int` range, including negative values.
+        // We will directly use Integer.MAX_VALUE and Integer.MIN_VALUE for bounds checking.
+
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
-            throw new FractionConversionException(value, a0, 1l);
+        
+        // Check if the initial integer part `a0` exceeds the int range.
+        // This `a0` will be the numerator if the value is an integer (or close to it)
+        // or an intermediate `p1` for the first iteration.
+        if (a0 > Integer.MAX_VALUE || a0 < Integer.MIN_VALUE) {
+            throw new FractionConversionException(value, a0, 1L);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
-            this.numerator = (int) a0;
+            this.numerator = (int) a0; // Safe cast due to check above
             this.denominator = 1;
             return;
         }
 
         long p0 = 1;
         long q0 = 0;
-        long p1 = a0;
+        long p1 = a0; // p1 starts as a0, so it's already checked to fit in int
         long q1 = 1;
 
-        long p2 = 0;
-        long q2 = 1;
+        long p2; // numerator candidate
+        long q2; // denominator candidate
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
             long a1 = (long)FastMath.floor(r1);
+            
+            // Calculate next convergent (p2/q2)
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+
+            // Check for overflow before p2/q2 are used or assigned to int
+            // Both numerator and denominator must fit in int.
+            if (p2 > Integer.MAX_VALUE || p2 < Integer.MIN_VALUE ||
+                q2 > Integer.MAX_VALUE || q2 < Integer.MIN_VALUE) {
                 throw new FractionConversionException(value, p2, q2);
             }
 
             double convergent = (double)p2 / (double)q2;
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+                // Continue iteration: update previous terms
                 p0 = p1;
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
-                a0 = a1;
+                a0 = a1; // The `a0` here is the new coefficient for the next iteration (a_n+1)
+                         // It can be large, but it's not directly stored as a numerator/denominator.
                 r0 = r1;
             } else {
                 stop = true;
             }
         } while (!stop);
 
         if (n >= maxIterations) {
             throw new FractionConversionException(value, maxIterations);
         }
 
+        // Select the convergent that satisfies maxDenominator criteria.
+        // If q2 exceeds maxDenominator, or is not positive, use the previous convergent (p1/q1).
+        // Note: q2 cannot be zero or negative in typical continued fraction computations for positive value.
+        // For negative values, q2 also remains positive.
         if (q2 < maxDenominator) {
-            this.numerator = (int) p2;
+            this.numerator = (int) p2; // p2 and q2 are guaranteed to fit in int due to earlier checks
             this.denominator = (int) q2;
         } else {
-            this.numerator = (int) p1;
+            this.numerator = (int) p1; // p1 and q1 are guaranteed to fit in int from previous iteration or initialization
             this.denominator = (int) q1;
         }
-
     }
\ No newline at end of file
