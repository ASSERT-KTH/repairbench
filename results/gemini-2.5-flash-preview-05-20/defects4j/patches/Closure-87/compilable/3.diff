diff --git a/tmp/d7ced5be-e1ff-48aa-b5b5-f25ffb2355ac_buggy.java b/tmp/87fdb8a1-c846-4099-848a-77d039ea8cf4_fixed.java
index 19fd63e..3bc54bf 100644
--- a/tmp/d7ced5be-e1ff-48aa-b5b5-f25ffb2355ac_buggy.java
+++ b/tmp/87fdb8a1-c846-4099-848a-77d039ea8cf4_fixed.java
@@ -1,24 +1,50 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
 
+          // If the single statement in the block is an EXPR_RESULT, we need to
+          // check if it's a problematic event handler call.
+          if (maybeExpr.getType() == Token.EXPR_RESULT) {
+            Node expr = maybeExpr.getFirstChild();
+            // The problematic case is a CALL or NEW instruction where the target
+            // is a GETPROP whose property name starts with "on" (e.g., f.onchange()).
+            // This is specific to implicit 'this' behavior in old IE for event handlers.
+            if (NodeUtil.isCallOrNew(expr)) {
+              Node target = expr.getFirstChild();
+              if (target.getType() == Token.GETPROP) {
+                String propName = target.getLastChild().getString();
+                // Heuristic for event handlers
+                if (propName != null && propName.startsWith("on")) {
+                  // Do not fold this EXPR_RESULT block, as it may lead to IE bug 291.
+                  return false;
+                }
+              }
+            }
+            // If it's an EXPR_RESULT but not a problematic event handler call, it's foldable.
+            return true;
+          } else {
+            // If it's not an EXPR_RESULT (e.g., a function expression/declaration,
+            // or class expression/declaration used as a statement), check if it's
+            // generally considered an expression node. VAR statements are not
+            // expression nodes and would correctly return false.
             return NodeUtil.isExpressionNode(maybeExpr);
           }
       }
+    }
 
     return false;
   }
\ No newline at end of file
