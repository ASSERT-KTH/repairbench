diff --git a/tmp/1be0cbf8-65b8-468f-bf2e-c0b6f55691a9_buggy.java b/tmp/6280382a-eb24-46a5-bb8f-f243e9b07622_fixed.java
index 19fd63e..a255ecf 100644
--- a/tmp/1be0cbf8-65b8-468f-bf2e-c0b6f55691a9_buggy.java
+++ b/tmp/6280382a-eb24-46a5-bb8f-f243e9b07622_fixed.java
@@ -1,24 +1,36 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
+          if (maybeExpr.getFirstChild().getType() == Token.CALL) {
+            Node calledFn = maybeExpr.getFirstChild().getFirstChild();
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
+            if (calledFn.getType() == Token.GETELEM) {
+              return false;
+            } else if (calledFn.getType() == Token.GETPROP &&
+                       calledFn.getLastChild().getString().startsWith("on")) {
+              return false;
+            }
+          }
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+          return true;
+        }
+        return false;
       }
     }
 
     return false;
   }
