diff --git a/tmp/08a819e9-ec2e-4439-b3e0-621ef4878c24_buggy.java b/tmp/3fb049da-4b87-4e8c-aca6-606d6826730a_fixed.java
index 19fd63e..bc21cae 100644
--- a/tmp/08a819e9-ec2e-4439-b3e0-621ef4878c24_buggy.java
+++ b/tmp/3fb049da-4b87-4e8c-aca6-606d6826730a_fixed.java
@@ -1,24 +1,37 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
 
+          // If the single statement in the block is an EXPR_RESULT and
+          // the expression it wraps is an event handler call, we should
+          // not consider this block foldable to prevent problematic
+          // IE behavior when the expression's return value might be used.
+          if (maybeExpr.getType() == Token.EXPR_RESULT) {
+              if (NodeUtil.isEventHandlerCall(maybeExpr.getFirstChild())) {
+                  return false;
+              }
+          }
+
+          // For all other cases, check if the child is a general expression node.
+          // This covers non-EXPR_RESULT expressions (if any could be a single statement),
+          // or EXPR_RESULTs that are not event handlers.
           return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
\ No newline at end of file
