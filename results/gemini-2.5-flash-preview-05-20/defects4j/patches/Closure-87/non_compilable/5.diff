diff --git a/tmp/fc35185b-1cd8-42df-8f69-f2cdd046180c_buggy.java b/tmp/46dea2ae-24fa-427c-9133-26786cb22b43_fixed.java
index 19fd63e..b7cbfa0 100644
--- a/tmp/fc35185b-1cd8-42df-8f69-f2cdd046180c_buggy.java
+++ b/tmp/46dea2ae-24fa-427c-9133-26786cb22b43_fixed.java
@@ -1,24 +1,63 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
 
+        // FIX: Prevent folding of EXPR_RESULT nodes that are problematic.
+        // This means assignments and certain method calls where their return
+        // value semantics could change if folded into an expression context
+        // (like being part of a conditional operator).
+        if (maybeExpr.isExprResult()) {
+          Node expressionInExprResult = maybeExpr.getFirstChild();
+
+          // Case 1: Calls that imply a 'this' context (method calls).
+          // This includes event handlers (e.g., 'obj.onclick()') and
+          // method calls via bracket notation (e.g., 'obj['method']()').
+          // These should not be folded into expressions.
+          if (expressionInExprResult.isCall()) {
+            // NodeUtil.isEventhandlerCall checks for 'obj.onxxxx()' patterns.
+            if (NodeUtil.isEventhandlerCall(expressionInExprResult)) {
+              return false;
+            }
+            // Check for method calls using bracket notation, like 'obj['x']()'.
+            // These also have 'this' context and are implied by testIssue291.
+            if (expressionInExprResult.getFirstChild().isGetElem()) {
+              return false;
+            }
+          }
+
+          // Case 2: Assignment expressions (e.g., 'x = y;').
+          // Their return value semantics can also be problematic if used
+          // implicitly in an expression context. NodeUtil.isExprAssign
+          // already confirms that maybeExpr is an EXPR_RESULT wrapping an ASSIGN.
+          if (NodeUtil.isExprAssign(maybeExpr)) {
+            return false;
+          }
+
+          // If it's an EXPR_RESULT but not one of the problematic cases above,
+          // then it is considered foldable. (e.g., '1 + 2;')
+          return true;
+        }
+
+        // For statements that are not EXPR_RESULTs but are expression nodes
+        // (e.g., the expression inside a RETURN node), they are generally foldable.
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
\ No newline at end of file
