diff --git a/tmp/31d79e95-ddd4-4348-966e-ef7771a2af47_buggy.java b/tmp/e0354e93-0bac-4fbe-8a35-3698a2e438df_fixed.java
index 19fd63e..95e5d3d 100644
--- a/tmp/31d79e95-ddd4-4348-966e-ef7771a2af47_buggy.java
+++ b/tmp/e0354e93-0bac-4fbe-8a35-3698a2e438df_fixed.java
@@ -1,24 +1,24 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
   private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
+    if (n.isExprResult()) { // 'n' is the single statement inside the block
       // IE has a bug where event handlers behave differently when
       // their return value is used vs. when their return value is in
       // an EXPR_RESULT. It's pretty freaking weird. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
       // We try to detect this case, and not fold EXPR_RESULTs
       // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+      // The child of EXPR_RESULT is the actual expression.
+      Node maybeExpr = n.getFirstChild();
+      if (NodeUtil.isEventHandlerCall(maybeExpr)) {
+        // If it's an event handler call within an EXPR_RESULT,
+        // do not fold it to prevent the IE bug.
+        return false;
       }
+      // For all other EXPR_RESULTs (i.e., not problematic event handlers),
+      // the block is considered foldable.
+      return true;
     }
-
+    // If the node is not an EXPR_RESULT (e.g., VAR, IF, RETURN),
+    // it's not an "expression block" in this context.
     return false;
   }
\ No newline at end of file
