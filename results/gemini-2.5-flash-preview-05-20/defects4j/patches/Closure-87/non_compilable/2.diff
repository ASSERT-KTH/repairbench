diff --git a/tmp/45677512-8c4a-497c-83e6-9d7390cae927_buggy.java b/tmp/0528c80a-b936-4dfa-9824-2000c2ed1473_fixed.java
index 19fd63e..d55783d 100644
--- a/tmp/45677512-8c4a-497c-83e6-9d7390cae927_buggy.java
+++ b/tmp/0528c80a-b936-4dfa-9824-2000c2ed1473_fixed.java
@@ -1,24 +1,49 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
 
+          // If the single statement is an EXPR_RESULT, we need to check if
+          // it's an event handler call that should not be folded due to the IE bug.
+          if (maybeExpr.getType() == Token.EXPR_RESULT) {
+            Node expr = maybeExpr.getFirstChild();
+            // Check if the expression is a CALL to a property that looks like an event handler.
+            if (expr != null && expr.getType() == Token.CALL) {
+              Node target = expr.getFirstChild(); // The function being called (e.g., GETPROP)
+              if (target != null && target.getType() == Token.GETPROP) {
+                Node propNode = target.getLastChild(); // The property name node (e.g., "onchange")
+                // Ensure the property name is a string literal (e.g., not a computed property).
+                if (propNode != null && propNode.isString()) {
+                  String propName = propNode.getString();
+                  // Heuristic: event handler names typically start with "on" and are longer than "on".
+                  if (propName.length() > 2 && propName.startsWith("on")) {
+                    // This is an EXPR_RESULT wrapping an event handler call.
+                    // According to the comment, we should NOT fold these to prevent behavioral changes.
+                    return false;
+                  }
+                }
+              }
+            }
+          }
+
+          // For all other cases (non-EXPR_RESULT, or EXPR_RESULT not matching the event handler pattern),
+          // return whether it's generally considered an expression node.
           return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
\ No newline at end of file
