diff --git a/tmp/64670d35-8fc9-41fc-b607-c6dd3bcbb52d_buggy.java b/tmp/4ab548f7-29c1-498f-bd77-a6aa4971fed5_fixed.java
index 19fd63e..589e06f 100644
--- a/tmp/64670d35-8fc9-41fc-b607-c6dd3bcbb52d_buggy.java
+++ b/tmp/4ab548f7-29c1-498f-bd77-a6aa4971fed5_fixed.java
@@ -1,24 +1,76 @@
+import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
+
+// Assume NodeUtil class is available in the context for NodeUtil.isExpressionNode
+// and provides other utility methods for AST nodes.
+
+// The class containing this method (e.g., PeepholeSubstituteAlternateSyntax)
+// would typically have NodeUtil accessible or defined elsewhere.
+// For this problem, we'll assume NodeUtil.isExpressionNode is implicitly available.
+
+// The 'isEventhandlerCall' helper method should be part of the same class or a utility class like NodeUtil.
+
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
-
+          if (maybeExpr.isExprResult()) {
+            Node expr = maybeExpr.getFirstChild();
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
-
+            if (expr != null && expr.isCall() && expr.getFirstChild() != null && expr.getFirstChild().isGetProp() &&
+                isEventhandlerCall(expr)) {
+              return false; // Not foldable due to IE event handler bug.
+            }
+          }
+          // For all other cases, or if the special IE bug case doesn't apply,
+          // check if the statement is generally an expression statement.
           return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
+
+  /**
+   * Helper method to determine if a CALL node is an event handler call.
+   * This method typically resides in NodeUtil.
+   *
+   * @param callNode The CALL node to check.
+   * @return true if the call targets a property whose name starts with "on".
+   */
+  private boolean isEventhandlerCall(Node callNode) {
+    // The target of the call (e.g., 'obj.onclick' in 'obj.onclick()')
+    Node target = callNode.getFirstChild();
+    if (target == null) {
+      return false;
+    }
+
+    String propertyName = null;
+    if (target.isGetProp()) {
+      // For GETPROP, the property name is the last child (a STRING node).
+      propertyName = target.getLastChild().getString();
+    }
+    // Note: The original Closure Compiler fix for issue 291 specifically
+    // checked for isGetProp(). It did not include GETELEM (e.g., obj['onclick']()).
+    // If GETELEM was to be included, this block would need:
+    // else if (target.isGetElem()) {
+    //   Node indexNode = target.getLastChild();
+    //   if (indexNode != null && indexNode.isStringLit()) {
+    //     propertyName = indexNode.getString();
+    //   }
+    // }
+
+    // Check if the property name starts with "on" (a common heuristic for event handlers).
+    return propertyName != null && propertyName.startsWith("on");
+  }
