diff --git a/tmp/6f5cb10d-34ab-4087-a046-844be8789d7f_buggy.java b/tmp/95deae36-a107-485e-8102-6905aedec5b4_fixed.java
index 19fd63e..451c029 100644
--- a/tmp/6f5cb10d-34ab-4087-a046-844be8789d7f_buggy.java
+++ b/tmp/95deae36-a107-485e-8102-6905aedec5b4_fixed.java
@@ -1,24 +1,29 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+          // A block is foldable if its single child is an actual expression node
+          // (like CALL, ASSIGN, etc.), OR if it's an EXPR_RESULT statement
+          // (which by definition contains an expression that's evaluated for its side effects).
+          // The check for problematic event handlers in EXPR_RESULTs should be handled
+          // by the consuming peephole pass, not this utility function.
+          return maybeExpr.isExpression() || maybeExpr.getType() == Token.EXPR_RESULT;
       }
     }
 
     return false;
   }
\ No newline at end of file
