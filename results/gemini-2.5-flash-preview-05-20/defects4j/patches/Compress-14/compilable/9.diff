diff --git a/tmp/a6a46f52-b8bd-4b5d-8bae-8ab599c1d623_buggy.java b/tmp/9f42a973-ea6c-4c6f-a8d8-e0e9687b3035_fixed.java
index b81eeca..8faff6b 100644
--- a/tmp/a6a46f52-b8bd-4b5d-8bae-8ab599c1d623_buggy.java
+++ b/tmp/9f42a973-ea6c-4c6f-a8d8-e0e9687b3035_fixed.java
@@ -1,78 +1,88 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         boolean allNUL = true;
         for (int i = start; i < end; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
+        // Work-around for leading NUL as per javadoc since Commons Compress 1.4.
+        // This is important for broken tar implementations that insert a leading NUL
+        // for fields like mtime/ctime, which should then be interpreted as 0.
+        // This check must occur after skipping leading spaces, as those are ignored.
+        // If start == end, it means the buffer only contained spaces and/or the trailing NULs/spaces
+        // (after being trimmed by previous steps), in which case we don't want to try to access buffer[start].
+        if (start < end && buffer[start] == 0) {
+            return 0L;
+        }
+
         // Must have trailing NUL or space
         byte trailer;
         trailer = buffer[end-1];
         if (trailer == 0 || trailer == ' '){
             end--;
         } else {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
         // May have additional NUL or space
         trailer = buffer[end-1];
         if (trailer == 0 || trailer == ' '){
             end--;
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
