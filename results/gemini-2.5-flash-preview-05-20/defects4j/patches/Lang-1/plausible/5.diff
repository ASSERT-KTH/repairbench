diff --git a/tmp/5c0869ac-71a2-4ffd-8fa3-f5dc69d98a3e_buggy.java b/tmp/0eb23cb4-c718-4c9c-a148-ae2d1063a26c_fixed.java
index e1cbe77..37362ad 100644
--- a/tmp/5c0869ac-71a2-4ffd-8fa3-f5dc69d98a3e_buggy.java
+++ b/tmp/0eb23cb4-c718-4c9c-a148-ae2d1063a26c_fixed.java
@@ -1,196 +1,237 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
     * <code>BigDecimal</code>.</p>
     *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
      * be Integer, Long or BigDecimal as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
-        if (StringUtils.isBlank(str)) {
+        if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        // Need to deal with all possible hex prefixes here
-        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
+
+        // --- Start of Hexadecimal Number Parsing ---
+        String hexPrefix = null;
         int pfxLen = 0;
+        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                hexPrefix = pfx;
+                pfxLen = pfx.length();
                 break;
             }
         }
-        if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+
+        if (hexPrefix != null) { // we have a hex number
+            String hexDigitsStr = str.substring(pfxLen);
+
+            // Handle negative sign from prefix for BigInteger constructor
+            boolean isNegative = hexPrefix.startsWith("-");
+            if (isNegative) {
+                hexDigitsStr = "-" + hexDigitsStr;
             }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+
+            // Check for empty hex string after prefix (e.g., "0x" or "-#") or just "-"
+            if (hexDigitsStr.isEmpty() || (isNegative && hexDigitsStr.length() == 1 && hexDigitsStr.charAt(0) == '-')) {
+                throw new NumberFormatException(str + " is not a valid number.");
             }
-            return createInteger(str);
+
+            try {
+                // Parse with radix 16 (hexadecimal) using BigInteger for full range
+                final java.math.BigInteger bi = new java.math.BigInteger(hexDigitsStr, 16);
+
+                // Determine the smallest fitting number type
+                if (bi.compareTo(java.math.BigInteger.valueOf(Integer.MAX_VALUE)) <= 0 &&
+                    bi.compareTo(java.math.BigInteger.valueOf(Integer.MIN_VALUE)) >= 0) {
+                    return bi.intValue();
                 }
+                if (bi.compareTo(java.math.BigInteger.valueOf(Long.MAX_VALUE)) <= 0 &&
+                    bi.compareTo(java.math.BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {
+                    return bi.longValue();
+                }
+                return bi;
+            } catch (final NumberFormatException e) {
+                // If BigInteger constructor throws an error (e.g., invalid hex digits like "0xGHI")
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
+        // --- End of Hexadecimal Number Parsing ---
+
+        // Rest of the existing code for non-hex numbers
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
         final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+        int numDecimals = 0;
+        if (decPos > -1) {
+            if (expPos > -1) {
+                if (expPos < decPos || expPos > str.length()) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
+            numDecimals = dec.length();
         } else {
             if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+                if (expPos > str.length()) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
+
+        // Helper methods (isDigits, isAllZeros) are assumed to be present in NumberUtils or accessible.
+        // Corrected isAllZeros usage to handle null 'dec' string.
         if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
             final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // Assumed NumberUtils has an isAllZeros helper:
+            // private static boolean isAllZeros(final String str) { ... }
+            final boolean allZeros = isAllZeros(mant) && (dec == null || isAllZeros(dec)) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
                         && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                        && ( (numeric.length() > 0 && numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric) ) ) {
                         try {
+                            // Assuming createLong is a helper method in this class or NumberUtils
                             return createLong(numeric);
                         } catch (final NumberFormatException nfe) { // NOPMD
                             // Too big for a long
                         }
+                        // Assuming createBigInteger is a helper method in this class or NumberUtils
                         return createBigInteger(numeric);
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        // Original code uses NumberUtils.createFloat, so retaining that
+                        final Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Original code uses NumberUtils.createDouble, so retaining that
+                        final Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
+                        // Assuming createBigDecimal is a helper method in this class or NumberUtils
                         return createBigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         }
         //User doesn't have a preference on the return type, so let's start
         //small and go from there...
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length());
         } else {
             exp = null;
         }
         if (dec == null && exp == null) { // no decimal point and no exponent
             //Must be an Integer, Long, Biginteger
             try {
+                // Assuming createInteger is a helper method in this class or NumberUtils
                 return createInteger(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             try {
+                // Assuming createLong is a helper method in this class or NumberUtils
                 return createLong(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
+            // Assuming createBigInteger is a helper method in this class or NumberUtils
             return createBigInteger(str);
         }
 
         //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        // Corrected isAllZeros usage to handle null 'dec' string.
+        final boolean allZeros = isAllZeros(mant) && (dec == null || isAllZeros(dec)) && isAllZeros(exp);
         try {
             if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
+                // Assuming createFloat is a helper method in this class or NumberUtils
                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
         try {
             if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
+                // Assuming createDouble is a helper method in this class or NumberUtils
                 final Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
 
+        // Assuming createBigDecimal is a helper method in this class or NumberUtils
         return createBigDecimal(str);
     }
\ No newline at end of file
