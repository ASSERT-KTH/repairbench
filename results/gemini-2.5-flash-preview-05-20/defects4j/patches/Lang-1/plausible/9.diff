diff --git a/tmp/f1f0f6be-d066-4aff-8625-0575a4c07e0b_buggy.java b/tmp/0a20c7ab-b0d6-4864-b152-636a14c6da2c_fixed.java
index e1cbe77..b65d836 100644
--- a/tmp/f1f0f6be-d066-4aff-8625-0575a4c07e0b_buggy.java
+++ b/tmp/0a20c7ab-b0d6-4864-b152-636a14c6da2c_fixed.java
@@ -1,196 +1,252 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
     * <code>BigDecimal</code>.</p>
     *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
      * be Integer, Long or BigDecimal as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
-        if (StringUtils.isBlank(str)) {
+        // Assuming StringUtils.isBlank is from org.apache.commons.lang3.StringUtils
+        if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
+        boolean isNegative = false;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length();
+                if (pfx.startsWith("-")) {
+                    isNegative = true;
+                }
                 break;
             }
         }
         if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+            String hexDigits = str.substring(pfxLen);
+            if (hexDigits.isEmpty()) { // e.g., "0x" or "-0x"
+                throw new NumberFormatException(str + " is not a valid number.");
             }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+            try {
+                // Parse as BigInteger first to handle arbitrary precision.
+                // The BigInteger constructor with radix treats the hexDigits string as positive value.
+                BigInteger bi = new BigInteger(hexDigits, 16);
+
+                // Apply sign if prefix indicated negative.
+                // Special handling for negative zero, which should just be zero.
+                if (isNegative && bi.compareTo(BigInteger.ZERO) == 0) {
+                    return BigInteger.ZERO;
+                }
+
+                // Apply the negative sign if needed for comparison and final value
+                final BigInteger signedBi = isNegative ? bi.negate() : bi;
+
+                // Check if it fits in Integer (Java's int range: -2^31 to 2^31-1)
+                if (signedBi.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) <= 0 &&
+                    signedBi.compareTo(BigInteger.valueOf(Integer.MIN_VALUE)) >= 0) {
+                    return Integer.valueOf(signedBi.intValue());
+                }
+
+                // Check if it fits in Long (Java's long range: -2^63 to 2^63-1)
+                if (signedBi.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 &&
+                    signedBi.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {
+                    return Long.valueOf(signedBi.longValue());
+                }
+
+                return signedBi;
+
+            } catch (final NumberFormatException e) {
+                // This will catch malformed hex strings, e.g., "0xG"
+                throw new NumberFormatException(str + " is not a valid number.");
             }
-            return createInteger(str);
         }
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        // Corrected expPos calculation: it should be the index of 'e' OR 'E', not sum of both plus 1
+        int expPos = -1;
+        int ePos = str.indexOf('e');
+        int EPos = str.indexOf('E');
+        if (ePos > -1) {
+            expPos = ePos;
+        }
+        if (EPos > -1) {
+            if (expPos == -1 || EPos < expPos) { // If 'E' is found and it's earlier or 'e' wasn't found
+                expPos = EPos;
+            }
+        }
 
         int numDecimals = 0; // Check required precision (LANG-693)
         if (decPos > -1) { // there is a decimal point
 
             if (expPos > -1) { // there is an exponent
+                // Additional check for negative expPos or if expPos is after string length
                 if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
             numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
         } else {
             if (expPos > -1) {
                 if (expPos > str.length()) { // prevents double exponent causing IOOBE
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // Assuming isAllZeros is an internal helper method from NumberUtils that handles null/empty strings
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
                         && exp == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
+                            // Assuming createLong is an internal helper method
                             return createLong(numeric);
                         } catch (final NumberFormatException nfe) { // NOPMD
                             // Too big for a long
                         }
+                        // Assuming createBigInteger is an internal helper method
                         return createBigInteger(numeric);
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        // Assuming createFloat is an internal helper method
+                        final Float f = createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        // Assuming createDouble is an internal helper method
+                        final Double d = createDouble(numeric);
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
+                        // Assuming createBigDecimal is an internal helper method
                         return createBigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         }
         //User doesn't have a preference on the return type, so let's start
         //small and go from there...
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length());
         } else {
             exp = null;
         }
         if (dec == null && exp == null) { // no decimal point and no exponent
             //Must be an Integer, Long, Biginteger
             try {
+                // Assuming createInteger is an internal helper method
                 return createInteger(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             try {
+                // Assuming createLong is an internal helper method
                 return createLong(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
+            // Assuming createBigInteger is an internal helper method
             return createBigInteger(str);
         }
 
         //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        // Assuming isAllZeros is an internal helper method from NumberUtils that handles null/empty strings
+        final boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);
         try {
             if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
+                // Assuming createFloat is an internal helper method
                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
         try {
             if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
+                // Assuming createDouble is an internal helper method
                 final Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
 
+        // Assuming createBigDecimal is an internal helper method
         return createBigDecimal(str);
     }
\ No newline at end of file
