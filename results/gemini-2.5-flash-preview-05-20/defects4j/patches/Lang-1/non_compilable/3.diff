diff --git a/tmp/a0991100-9b29-4b87-b06d-5c33227e987b_buggy.java b/tmp/fc913b27-47a3-4616-bc18-e435fd43822f_fixed.java
index e1cbe77..ae44e8c 100644
--- a/tmp/a0991100-9b29-4b87-b06d-5c33227e987b_buggy.java
+++ b/tmp/fc913b27-47a3-4616-bc18-e435fd43822f_fixed.java
@@ -1,196 +1,295 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// Assuming the existence of these helper methods from NumberUtils
+// (their content is not provided, but their typical behavior is assumed)
+// private static Number createFloat(String str) { return Float.valueOf(str); }
+// private static Number createDouble(String str) { return Double.valueOf(str); }
+// private static Integer createInteger(String str) { return Integer.decode(str); }
+// private static Long createLong(String str) { return Long.decode(str); }
+// private static BigInteger createBigInteger(String str) { return new BigInteger(str); } // This is for decimal
+// private static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+// private static boolean isAllZeros(String str) { return str == null || str.isEmpty() || str.chars().allMatch(c -> c == '0'); }
+
+// A dummy implementation of missing static helper methods for the purpose of compilation and demonstrating the fix.
+// In a real scenario, these would already exist in the NumberUtils class or be fully qualified from java.lang.*
+class StringUtils {
+    public static boolean isBlank(CharSequence cs) {
+        int strLen;
+        if (cs == null || (strLen = cs.length()) == 0) {
+            return true;
+        }
+        for (int i = 0; i < strLen; i++) {
+            if (!Character.isWhitespace(cs.charAt(i))) {
+                return false;
+            }
+        }
+        return true;
+    }
+}
+
+class NumberUtils {
+    public static Integer createInteger(final String str) {
+        return Integer.decode(str);
+    }
+
+    public static Long createLong(final String str) {
+        return Long.decode(str);
+    }
+
+    public static BigInteger createBigInteger(final String str) {
+        // This method from NumberUtils usually parses decimal.
+        return new BigInteger(str);
+    }
+
+    public static Float createFloat(final String str) {
+        return Float.valueOf(str);
+    }
+
+    public static Double createDouble(final String str) {
+        return Double.valueOf(str);
+    }
+
+    public static BigDecimal createBigDecimal(final String str) {
+        return new BigDecimal(str);
+    }
+
+    private static boolean isAllZeros(String str) {
+        return str == null || str.isEmpty() || str.chars().allMatch(c -> c == '0');
+    }
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
     * <code>BigDecimal</code>.</p>
     *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
      * be Integer, Long or BigDecimal as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
+        boolean negativeHex = false;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length(); // Assign the length of the matched prefix
+                if (pfx.charAt(0) == '-') { // Check if the matched prefix starts with '-'
+                    negativeHex = true;
+                }
                 break;
             }
         }
+
         if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
-            }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
-            }
+            // Try parsing as Integer, then Long, then BigInteger for hex values
+            try {
+                // createInteger uses Integer.decode, which correctly handles hex prefixes like "0x" and "#"
+                // and their signs, and will throw NFE for overflow.
                 return createInteger(str);
+            } catch (final NumberFormatException nfe) {
+                // Fall through to Long if Integer fails (e.g., value too large for Integer)
             }
+            try {
+                // createLong uses Long.decode, which correctly handles hex prefixes and signs,
+                // and will throw NFE for overflow.
+                return createLong(str);
+            } catch (final NumberFormatException nfe) {
+                // Fall through to BigInteger if Long fails (e.g., value too large for Long)
+            }
+            // If it's too large for Long, it must be a BigInteger.
+            // BigInteger(String, radix) constructor expects the string *without* the prefix
+            // and the sign must be applied separately if the original prefix was negative.
+            String hexDigitsStr = str.substring(pfxLen);
+            if (hexDigitsStr.isEmpty()) {
+                 throw new NumberFormatException("For input string: \"" + str + "\"");
+            }
+            BigInteger bi = new BigInteger(hexDigitsStr, 16);
+            if (negativeHex) {
+                bi = bi.negate();
+            }
+            return bi;
+        }
+
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
         final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
         // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
         // and the parsing which will detect if e or E appear in a number due to using the wrong offset
 
         int numDecimals = 0; // Check required precision (LANG-693)
         if (decPos > -1) { // there is a decimal point
 
             if (expPos > -1) { // there is an exponent
                 if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
             numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
         } else {
             if (expPos > -1) {
                 if (expPos > str.length()) { // prevents double exponent causing IOOBE
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             final String numeric = str.substring(0, str.length() - 1);
             final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
                         && exp == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
                         } catch (final NumberFormatException nfe) { // NOPMD
                             // Too big for a long
                         }
                         return createBigInteger(numeric);
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         final Float f = NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
                         final Double d = NumberUtils.createDouble(numeric);
                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
                         return createBigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         }
         //User doesn't have a preference on the return type, so let's start
         //small and go from there...
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length());
         } else {
             exp = null;
         }
         if (dec == null && exp == null) { // no decimal point and no exponent
             //Must be an Integer, Long, Biginteger
             try {
                 return createInteger(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             try {
                 return createLong(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             return createBigInteger(str);
         }
 
         //Must be a Float, Double, BigDecimal
         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         try {
             if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
         try {
             if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
                 final Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
 
         return createBigDecimal(str);
     }
+
+    // Dummy isDigits method for compilation, actual implementation would be in NumberUtils
+    private static boolean isDigits(String str) {
+        if (str == null || str.isEmpty()) {
+            return false;
+        }
+        for (char c : str.toCharArray()) {
+            if (!Character.isDigit(c)) {
+                return false;
+            }
+        }
+        return true;
+    }
+}
\ No newline at end of file
