diff --git a/tmp/dbafbfdb-1c15-4c0d-8ff2-7b39449dc004_buggy.java b/tmp/7d166bd9-855d-430d-b9cf-619a101ddadc_fixed.java
index cce9d1e..672ffcc 100644
--- a/tmp/dbafbfdb-1c15-4c0d-8ff2-7b39449dc004_buggy.java
+++ b/tmp/7d166bd9-855d-430d-b9cf-619a101ddadc_fixed.java
@@ -1,14 +1,27 @@
     /**
      * <p>Stop the stopwatch.</p>
      * 
      * <p>This method ends a new timing session, allowing the time to be retrieved.</p>
      *
      * @throws IllegalStateException if the StopWatch is not running.
      */
     public void stop() {
         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {
             throw new IllegalStateException("Stopwatch is not running. ");
         }
+        
+        // The problem in testLang315 is that if the stopwatch is suspended,
+        // stopTime should have been set when suspend() was called,
+        // marking the end of the active running period.
+        // If stop() is called while suspended, stopTime should *not* be updated
+        // to System.currentTimeMillis() as this would include the time spent while suspended.
+        // It should only be updated if the stopwatch was actively running.
+        if (this.runningState == STATE_RUNNING) {
             stopTime = System.currentTimeMillis();
+        }
+        // If the stopwatch was STATE_SUSPENDED, stopTime would have already been set
+        // by the suspend() method to mark the end of the last running segment.
+        // Therefore, no update to stopTime is needed in this case.
+
         this.runningState = STATE_STOPPED;
     }
\ No newline at end of file
