diff --git a/tmp/d21a4636-7d8c-4cca-8bd4-bd46212b2b33_buggy.java b/tmp/6951ee9f-c5c5-4d20-9fcc-86006f0df8a3_fixed.java
index f95e529..0410dd5 100644
--- a/tmp/d21a4636-7d8c-4cca-8bd4-bd46212b2b33_buggy.java
+++ b/tmp/6951ee9f-c5c5-4d20-9fcc-86006f0df8a3_fixed.java
@@ -1,165 +1,172 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
         double x = mid;
         double v = x;
         double w = x;
         double d = 0;
         double e = 0;
         double fx = computeObjectiveValue(x);
         if (!isMinim) {
-            fx = -fx;
+            fx = -fx; // Internally work with a minimized value
         }
         double fv = fx;
         double fw = fx;
 
+        // Initialize current with the best point found so far (x)
         UnivariatePointValuePair previous = null;
         UnivariatePointValuePair current
             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
 
         int iter = 0;
         while (true) {
             final double m = 0.5 * (a + b);
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
             // Default stopping criterion.
+            // Note: x holds the best point found so far.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
             if (!stop) {
                 double p = 0;
                 double q = 0;
                 double r = 0;
                 double u = 0;
 
                 if (FastMath.abs(e) > tol1) { // Fit parabola.
                     r = (x - w) * (fx - fv);
                     q = (x - v) * (fx - fw);
                     p = (x - v) * q - (x - w) * r;
                     q = 2 * (q - r);
 
                     if (q > 0) {
                         p = -p;
                     } else {
                         q = -q;
                     }
 
                     r = e;
                     e = d;
 
                     if (p > q * (a - x) &&
                         p < q * (b - x) &&
                         FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                         // Parabolic interpolation step.
                         d = p / q;
                         u = x + d;
 
                         // f must not be evaluated too close to a or b.
                         if (u - a < tol2 || b - u < tol2) {
                             if (x <= m) {
                                 d = tol1;
                             } else {
                                 d = -tol1;
                             }
                         }
                     } else {
                         // Golden section step.
                         if (x < m) {
                             e = b - x;
                         } else {
                             e = a - x;
                         }
                         d = GOLDEN_SECTION * e;
                     }
                 } else {
                     // Golden section step.
                     if (x < m) {
                         e = b - x;
                     } else {
                         e = a - x;
                     }
                     d = GOLDEN_SECTION * e;
                 }
 
                 // Update by at least "tol1".
                 if (FastMath.abs(d) < tol1) {
                     if (d >= 0) {
                         u = x + tol1;
                     } else {
                         u = x - tol1;
                     }
                 } else {
                     u = x + d;
                 }
 
                 double fu = computeObjectiveValue(u);
                 if (!isMinim) {
-                    fu = -fu;
+                    fu = -fu; // Internally work with a minimized value
                 }
 
                 // User-defined convergence checker.
+                // 'current' here represents the *last evaluated point* (u, fu).
+                // 'x' and 'fx' continue to represent the *best point found so far*.
                 previous = current;
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
 
                 if (checker != null) {
                     if (checker.converged(iter, previous, current)) {
-                        return current;
+                        // Bug fix: Return the best point found so far (x), not just the last evaluated point (u).
+                        return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
                     }
                 }
 
                 // Update a, b, v, w and x.
-                if (fu <= fx) {
+                if (fu <= fx) { // If the new point u is better than or equal to the current best x
                     if (u < x) {
                         b = x;
                     } else {
                         a = x;
                     }
                     v = w;
                     fv = fw;
                     w = x;
                     fw = fx;
-                    x = u;
-                    fx = fu;
-                } else {
+                    x = u; // Update x to the new best point
+                    fx = fu; // Update fx to the new best value
+                } else { // If the new point u is worse than the current best x
                     if (u < x) {
                         a = u;
                     } else {
                         b = u;
                     }
                     if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                        Precision.equals(w, x)) { // Using Precision.equals with a default epsilon
                         v = w;
                         fv = fw;
                         w = u;
                         fw = fu;
                     } else if (fu <= fv ||
                                Precision.equals(v, x) ||
                                Precision.equals(v, w)) {
                         v = u;
                         fv = fu;
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return current;
+                // Bug fix: Return the best point found so far (x), not just the last evaluated point (u)
+                // that 'current' would hold.
+                return new UnivariatePointValuePair(x, isMinim ? fx : -fx);
             }
             ++iter;
         }
     }
\ No newline at end of file
