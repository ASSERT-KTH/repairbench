diff --git a/tmp/bfdbbaeb-1e4e-46d6-b7c4-ea257cf1549a_buggy.java b/tmp/3e4a38f6-52a3-4efe-883a-b7c04f455a24_fixed.java
index f95e529..3254536 100644
--- a/tmp/bfdbbaeb-1e4e-46d6-b7c4-ea257cf1549a_buggy.java
+++ b/tmp/3e4a38f6-52a3-4efe-883a-b7c04f455a24_fixed.java
@@ -1,165 +1,183 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
 
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
 
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
 
         double x = mid;
         double v = x;
         double w = x;
         double d = 0;
         double e = 0;
-        double fx = computeObjectiveValue(x);
+        double fx = computeObjectiveValue(x); // fx is the original objective value at x
         if (!isMinim) {
-            fx = -fx;
+            fx = -fx; // For maximization, work with -f(x) internally to minimize
         }
         double fv = fx;
         double fw = fx;
 
-        UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        // Store the overall best point found so far. This point is returned upon termination.
+        // The value stored in best.getValue() is always the actual objective function value,
+        // not the transformed one used internally for minimization.
+        UnivariatePointValuePair best = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+
+        // Variables for the convergence checker. These track the last two evaluated points,
+        // not necessarily the overall best point.
+        UnivariatePointValuePair previousForChecker = null;
+        UnivariatePointValuePair currentForChecker
+            = new UnivariatePointValuePair(x, isMinim ? fx : -fx); // Initialize with the starting point for the checker
 
         int iter = 0;
         while (true) {
             final double m = 0.5 * (a + b);
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
             final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
+            // Default stopping criterion (Brent's criterion).
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
             if (!stop) {
                 double p = 0;
                 double q = 0;
                 double r = 0;
                 double u = 0;
 
                 if (FastMath.abs(e) > tol1) { // Fit parabola.
                     r = (x - w) * (fx - fv);
                     q = (x - v) * (fx - fw);
                     p = (x - v) * q - (x - w) * r;
                     q = 2 * (q - r);
 
                     if (q > 0) {
                         p = -p;
                     } else {
                         q = -q;
                     }
 
                     r = e;
                     e = d;
 
                     if (p > q * (a - x) &&
                         p < q * (b - x) &&
                         FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                         // Parabolic interpolation step.
                         d = p / q;
                         u = x + d;
 
                         // f must not be evaluated too close to a or b.
                         if (u - a < tol2 || b - u < tol2) {
                             if (x <= m) {
                                 d = tol1;
                             } else {
                                 d = -tol1;
                             }
                         }
                     } else {
                         // Golden section step.
                         if (x < m) {
                             e = b - x;
                         } else {
                             e = a - x;
                         }
                         d = GOLDEN_SECTION * e;
                     }
                 } else {
                     // Golden section step.
                     if (x < m) {
                         e = b - x;
                     } else {
                         e = a - x;
                     }
                     d = GOLDEN_SECTION * e;
                 }
 
                 // Update by at least "tol1".
                 if (FastMath.abs(d) < tol1) {
                     if (d >= 0) {
                         u = x + tol1;
                     } else {
                         u = x - tol1;
                     }
                 } else {
                     u = x + d;
                 }
 
-                double fu = computeObjectiveValue(u);
+                double fu = computeObjectiveValue(u); // fu is the original objective value at u
                 if (!isMinim) {
-                    fu = -fu;
+                    fu = -fu; // For maximization, work with -f(u) internally
                 }
 
-                // User-defined convergence checker.
-                previous = current;
-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+                // Update the overall best point found so far.
+                // actualFu is the actual objective value at u.
+                final double actualFu = isMinim ? fu : -fu;
+                if ((isMinim && actualFu < best.getValue()) ||
+                    (!isMinim && actualFu > best.getValue())) {
+                    best = new UnivariatePointValuePair(u, actualFu);
+                }
+
+                // Update points for the user-defined convergence checker.
+                previousForChecker = currentForChecker;
+                currentForChecker = new UnivariatePointValuePair(u, actualFu);
 
                 if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return current;
+                    // Check convergence with the two most recently evaluated points.
+                    if (checker.converged(iter, previousForChecker, currentForChecker)) {
+                        return best; // If converged, return the overall best point found so far.
                     }
                 }
 
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
+                // Update a, b, v, w and x. These are Brent's internal state variables
+                // for finding the minimum/maximum in the current interval.
+                // Comparisons use the internally transformed values (fu, fx, fv, fw).
+                if (fu <= fx) { // fu is better or equal than fx
                     if (u < x) {
                         b = x;
                     } else {
                         a = x;
                     }
                     v = w;
                     fv = fw;
                     w = x;
                     fw = fx;
                     x = u;
                     fx = fu;
-                } else {
+                } else { // fu is worse than fx
                     if (u < x) {
                         a = u;
                     } else {
                         b = u;
                     }
                     if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                        Precision.equals(w, x)) { // fu is better or equal than fw
                         v = w;
                         fv = fw;
                         w = u;
                         fw = fu;
-                    } else if (fu <= fv ||
+                    } else if (fu <= fv || // fu is better or equal than fv
                                Precision.equals(v, x) ||
                                Precision.equals(v, w)) {
                         v = u;
                         fv = fu;
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return current;
+                return best; // Return the overall best point found so far.
             }
             ++iter;
         }
     }
\ No newline at end of file
