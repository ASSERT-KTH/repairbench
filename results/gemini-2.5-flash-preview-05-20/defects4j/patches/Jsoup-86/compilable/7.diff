diff --git a/tmp/61491de1-e152-4297-a88a-f2e377f81dcb_buggy.java b/tmp/3fbdfbb3-2aca-41e5-9b09-7aa0b0783819_fixed.java
index b8e7fdb..d33813c 100644
--- a/tmp/61491de1-e152-4297-a88a-f2e377f81dcb_buggy.java
+++ b/tmp/3fbdfbb3-2aca-41e5-9b09-7aa0b0783819_fixed.java
@@ -1,15 +1,47 @@
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
         String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
+
+        // An XML declaration or processing instruction must have at least a leading '?' or '!'
+        // and some content, for example "?x" or "!D".
+        // The substring operation `data.substring(1, data.length() -1)` requires `data.length()` to be at least 2
+        // to avoid an IndexOutOfBoundsException if `data` is just "?" or "!".
+        if (data.length() < 2) {
+            return null; // Not enough data to be a valid XML declaration/processing instruction
+        }
+
+        // Check if the data starts with '?' or '!' as expected for XML declarations/processing instructions.
+        // If not, it's not a valid candidate for an XmlDeclaration.
+        char firstChar = data.charAt(0);
+        if (firstChar != '?' && firstChar != '!') {
+            return null; // Does not start with '?' or '!', so not an XML declaration/PI
+        }
+
+        // Determine if it's a processing instruction (starts with '?') or a DOCTYPE/other declaration (starts with '!')
+        // The `isProcessingInstruction` flag for `XmlDeclaration` should be true if it's `<?...?>` and false if `<!...>`
+        boolean isProcessingInstruction = (firstChar == '?');
+
+        // Extract the content that would form the element name and attributes.
+        // This assumes the `data` string includes the leading '?' or '!' and a corresponding trailing character
+        // (e.g., '?' for PI/XMLDecl, or '>' for DOCTYPE if the original string was like `<!DOCTYPE html>`).
+        // For example, if `data` is "?xml version="1.0"", `subData` will be "xml version="1.0"".
+        // If `data` is "!DOCTYPE html", `subData` will be "DOCTYPE htm".
+        String subData = data.substring(1, data.length() - 1);
+
+        // Attempt to parse `subData` as an XML element.
+        // This heuristic extracts the declaration's name and attributes.
+        Document doc = Jsoup.parse("<" + subData + ">", baseUri(), Parser.xmlParser());
         XmlDeclaration decl = null;
+
+        // If parsing was successful and yielded a single element, create an XmlDeclaration.
         if (doc.childNodeSize() > 0) {
             Element el = doc.child(0);
-            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
+            // Create XmlDeclaration with the parsed element's tag name and attributes.
+            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), isProcessingInstruction);
             decl.attributes().addAll(el.attributes());
         }
         return decl;
     }
\ No newline at end of file
