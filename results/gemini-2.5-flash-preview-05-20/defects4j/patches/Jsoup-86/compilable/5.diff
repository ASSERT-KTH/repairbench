diff --git a/tmp/8bcff391-f107-47e2-b101-71ad5234e56f_buggy.java b/tmp/33856b3b-f68c-4ae9-8a40-76bc73994845_fixed.java
index b8e7fdb..b13dbb9 100644
--- a/tmp/8bcff391-f107-47e2-b101-71ad5234e56f_buggy.java
+++ b/tmp/33856b3b-f68c-4ae9-8a40-76bc73994845_fixed.java
@@ -1,15 +1,104 @@
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
-        String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
-        XmlDeclaration decl = null;
+        String data = getData(); // This is the content inside <!--...-->
+
+        // Determine if it's a Processing Instruction (PI) or a DOCTYPE Declaration
+        // PIs start with '?' (e.g., <?xml version="1.0"?>)
+        // DOCTYPEs start with '!' (e.g., <!DOCTYPE html>)
+        boolean isProcessingInstruction = data.startsWith("?");
+        boolean isDocType = data.startsWith("!");
+
+        // If it doesn't start with either expected prefix, it's not a valid XML Declaration or PI.
+        if (!isProcessingInstruction && !isDocType) {
+            return null;
+        }
+
+        // A valid declaration/PI must have at least a prefix ('?' or '!') and a name (e.g., '?a' or '!b').
+        // If data is just '?' or '!', its length is 1, and substring(1) or substring(1, data.length() - 1)
+        // would result in an IndexOutOfBoundsException or empty content.
+        if (data.length() < 2) {
+            return null;
+        }
+
+        String declName = null;
+        Attributes declAttributes = new Attributes();
+        
+        // Use the parser settings from the owner document for tag normalization
+        Parser parser = NodeUtils.parser(ownerDocument());
+        if (parser == null) { // Fallback if ownerDocument is null or has no parser
+            parser = Parser.xmlParser(); // Use default XML parser
+        }
+
+        if (isProcessingInstruction) {
+            // For PIs, the data is typically like "?xml version='1.0'?" or "?target instruction".
+            // We need to extract "xml version='1.0'" or "target instruction".
+            String contentToParse = data.substring(1); // Remove leading '?'
+            if (contentToParse.endsWith("?")) { // Remove optional trailing '?' if present
+                contentToParse = contentToParse.substring(0, contentToParse.length() - 1);
+            }
+
+            if (contentToParse.isEmpty()) { // e.g., `<??>` (data was `?` after stripping) or `<? >`
+                return null;
+            }
+
+            // Parse the extracted content as a dummy HTML element to get the tag name and attributes.
+            // Example: "<xml version='1.0'>" -> tagName "xml", attributes {version="1.0"}
+            Document doc = Jsoup.parse("<" + contentToParse + ">", baseUri(), parser);
             if (doc.childNodeSize() > 0) {
                 Element el = doc.child(0);
-            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
-            decl.attributes().addAll(el.attributes());
+                declName = parser.settings().normalizeTag(el.tagName());
+                declAttributes.addAll(el.attributes());
+            } else {
+                return null; // Malformed PI content, could not parse as an element
+            }
+
+        } else { // isDocType (starts with '!')
+            // For DOCTYPE Declarations: data is like "!DOCTYPE html PUBLIC '...' '...'".
+            // We need to parse "html PUBLIC '...' '...'".
+            String contentToParse = data.substring(1).trim(); // Remove leading '!' and trim whitespace
+
+            // The content should start with "DOCTYPE" followed by the actual document type name.
+            int firstSpace = contentToParse.indexOf(' ');
+
+            if (firstSpace == -1) { // e.g., "!DOCTYPE" (data is '!DOCTYPE')
+                return null; // Not a valid DOCTYPE declaration (missing name)
+            }
+
+            String docTypeKeyword = contentToParse.substring(0, firstSpace);
+            if (!docTypeKeyword.equalsIgnoreCase("DOCTYPE")) {
+                return null; // Unexpected content after '!'
+            }
+
+            String remainder = contentToParse.substring(firstSpace).trim(); // e.g., "html PUBLIC '...' '...'"
+            if (remainder.isEmpty()) { // e.g., "<!DOCTYPE>" (data was '!DOCTYPE')
+                return null; // Missing actual document type name
+            }
+
+            // Parse the remainder (e.g., "html PUBLIC '...' SYSTEM '...'") as if it were an element's content.
+            // This allows Jsoup's parser to extract the actual document type name ("html") as the tag name,
+            // and Public/System IDs as attributes.
+            // Example: "<html PUBLIC '...' SYSTEM '...'>" -> tagName "html", attributes {PUBLIC='...', SYSTEM='...'}
+            Document doc = Jsoup.parse("<" + remainder + ">", baseUri(), parser);
+            if (doc.childNodeSize() > 0) {
+                Element el = doc.child(0);
+                declName = parser.settings().normalizeTag(el.tagName());
+                declAttributes.addAll(el.attributes());
+            } else {
+                return null; // Malformed DOCTYPE content, could not parse main part
+            }
+        }
+
+        // If a name couldn't be extracted, return null (e.g., malformed content).
+        if (declName == null) {
+            return null;
         }
+
+        // Create the XmlDeclaration using the extracted name and attributes.
+        // The `isProcessingInstruction` flag is critical to differentiate between PIs and DOCTYPEs.
+        XmlDeclaration decl = new XmlDeclaration(declName, isProcessingInstruction);
+        decl.attributes().addAll(declAttributes);
         return decl;
     }
\ No newline at end of file
