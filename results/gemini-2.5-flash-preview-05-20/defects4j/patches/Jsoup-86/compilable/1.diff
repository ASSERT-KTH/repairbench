diff --git a/tmp/99916707-5c6c-42af-b866-07e027827ebd_buggy.java b/tmp/b0983f38-131b-4f66-816a-1db10b9f9cfe_fixed.java
index b8e7fdb..2f440b2 100644
--- a/tmp/99916707-5c6c-42af-b866-07e027827ebd_buggy.java
+++ b/tmp/b0983f38-131b-4f66-816a-1db10b9f9cfe_fixed.java
@@ -1,15 +1,31 @@
     /**
      * Attempt to cast this comment to an XML Declaration note.
      * @return an XML declaration if it could be parsed as one, null otherwise.
      */
     public XmlDeclaration asXmlDeclaration() {
         String data = getData();
+        // An XML declaration's data string (e.g., "?xml version="1.0"") typically starts with '?' or '!'
+        // and its content needs to be parsed as an element.
+        // The `substring(1, data.length() - 1)` part expects the data to be at least 2 characters long
+        // to correctly extract the inner content for parsing.
+        // For example, if data is "?", its length is 1, so `substring(1, 0)` would throw IndexOutOfBoundsException.
+        // If the comment data is too short to represent a valid XML declaration format, return null.
+        if (data.length() < 2) {
+            return null;
+        }
+
+        // The substring extracts the content between the assumed leading '?' or '!' and trailing '?' or '>'.
+        // For example, if data is "?xml version="1.0"", substring(1, len-1) results in "xml version="1.0"".
+        // This content is then wrapped in '<' and '>' to parse it as a dummy XML element.
         Document doc = Jsoup.parse("<" + data.substring(1, data.length() - 1) + ">", baseUri(), Parser.xmlParser());
         XmlDeclaration decl = null;
+        // If parsing the dummy element was successful and produced a child element.
         if (doc.childNodeSize() > 0) {
             Element el = doc.child(0);
-            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
+            // The isProcessingInstruction boolean in XmlDeclaration indicates if it's a <?...?> (true)
+            // or a <!DOCTYPE...> (false). This is determined by whether the original data started with '?'.
+            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("?"));
             decl.attributes().addAll(el.attributes());
         }
         return decl;
     }
\ No newline at end of file
