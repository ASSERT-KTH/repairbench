diff --git a/tmp/950119a0-f9e5-4e6e-9dce-7e3ad7fcf6f0_buggy.java b/tmp/cab5501b-7815-4ca9-8e54-f0104d0a3f99_fixed.java
index e31352b..a7c504c 100644
--- a/tmp/950119a0-f9e5-4e6e-9dce-7e3ad7fcf6f0_buggy.java
+++ b/tmp/cab5501b-7815-4ca9-8e54-f0104d0a3f99_fixed.java
@@ -1,15 +1,32 @@
     /**
      * Returns a paint for the specified value.
      * 
      * @param value  the value (must be within the range specified by the
      *         lower and upper bounds for the scale).
      * 
      * @return A paint for the specified value.
      */
     public Paint getPaint(double value) {
+        // Clamp the input value to ensure it stays within the defined bounds.
+        // The original code correctly calculates 'v' but then uses the unclamped 'value'
+        // for the grayscale calculation.
         double v = Math.max(value, this.lowerBound);
         v = Math.min(v, this.upperBound);
-        int g = (int) ((value - this.lowerBound) / (this.upperBound
+
+        // Calculate the grayscale component 'g' using the clamped value 'v'.
+        // This ensures 'g' remains within the valid range [0, 255] for Color components,
+        // preventing the IllegalArgumentException.
+        int g = (int) ((v - this.lowerBound) / (this.upperBound
                 - this.lowerBound) * 255.0);
+        
+        // Due to potential floating-point inaccuracies, or if lowerBound == upperBound
+        // (though the constructor prevents this), ensuring g is within [0, 255] explicitly
+        // is a good defensive practice, even if the above calculation should generally
+        // produce values within this range when 'v' is clamped.
+        // However, with the current structure and guaranteed `lowerBound < upperBound`,
+        // `g` will already be in the [0, 255] range after the cast.
+        // For example, if v = lowerBound, g = 0. If v = upperBound, g = 255.
+        // intermediate values will be between 0 and 255.
+
         return new Color(g, g, g);
     }
\ No newline at end of file
