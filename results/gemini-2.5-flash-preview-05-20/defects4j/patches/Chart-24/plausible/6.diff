diff --git a/tmp/38b16004-a118-4cab-bc55-42648c640ccd_buggy.java b/tmp/fc24f32b-f950-4231-97a1-079e57c7593e_fixed.java
index e31352b..769f7f0 100644
--- a/tmp/38b16004-a118-4cab-bc55-42648c640ccd_buggy.java
+++ b/tmp/fc24f32b-f950-4231-97a1-079e57c7593e_fixed.java
@@ -1,15 +1,34 @@
     /**
      * Returns a paint for the specified value.
      * 
      * @param value  the value (must be within the range specified by the
      *         lower and upper bounds for the scale).
      * 
      * @return A paint for the specified value.
      */
     public Paint getPaint(double value) {
+        // Clamp the input value 'value' to the scale's bounds.
+        // The resulting 'v' will always be within [this.lowerBound, this.upperBound].
         double v = Math.max(value, this.lowerBound);
         v = Math.min(v, this.upperBound);
-        int g = (int) ((value - this.lowerBound) / (this.upperBound
+        
+        // Calculate the gray component (0-255) based on the clamped value 'v'.
+        // The original code used 'value' here, which could be outside the bounds
+        // and lead to 'g' being outside [0, 255], causing an IllegalArgumentException
+        // in the Color constructor.
+        // By using 'v', the normalized value (v - this.lowerBound) / (this.upperBound - this.lowerBound)
+        // is guaranteed to be in the range [0.0, 1.0], leading to 'g' in [0, 255].
+        int g = (int) ((v - this.lowerBound) / (this.upperBound
                 - this.lowerBound) * 255.0);
+
+        // Due to potential floating-point inaccuracies, or if lowerBound == upperBound
+        // (though the constructor should prevent this scenario),
+        // it's good practice to ensure 'g' is strictly within [0, 255].
+        // However, with 'v' being clamped, this should theoretically not be needed
+        // under normal circumstances as (int) of a value in [0.0, 255.0] results in [0, 255].
+        // Still, adding defensive clamping here is harmless.
+        g = Math.max(0, g);
+        g = Math.min(255, g);
+
         return new Color(g, g, g);
     }
\ No newline at end of file
