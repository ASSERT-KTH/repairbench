diff --git a/tmp/9464fa1b-609d-4450-83e6-a62aca9e5310_buggy.java b/tmp/c060efc3-9982-4279-9980-7c2e4d911d7a_fixed.java
index e31352b..6db1a78 100644
--- a/tmp/9464fa1b-609d-4450-83e6-a62aca9e5310_buggy.java
+++ b/tmp/c060efc3-9982-4279-9980-7c2e4d911d7a_fixed.java
@@ -1,15 +1,29 @@
     /**
      * Returns a paint for the specified value.
      * 
      * @param value  the value (must be within the range specified by the
      *         lower and upper bounds for the scale).
      * 
      * @return A paint for the specified value.
      */
     public Paint getPaint(double value) {
+        // Clamp the input value to be within the defined lower and upper bounds.
+        // This ensures that calculations based on 'v' will not result in out-of-range values.
         double v = Math.max(value, this.lowerBound);
         v = Math.min(v, this.upperBound);
-        int g = (int) ((value - this.lowerBound) / (this.upperBound
+
+        // Calculate the grayscale component 'g'.
+        // The previous bug was that 'value' was used here instead of the clamped 'v'.
+        // Using 'value' could lead to 'g' being negative or greater than 255,
+        // resulting in an IllegalArgumentException when creating the Color object.
+        int g = (int) ((v - this.lowerBound) / (this.upperBound
                 - this.lowerBound) * 255.0);
+        
+        // Handle potential floating point inaccuracies that might make g slightly
+        // outside [0, 255] even after clamping v, especially for edge cases.
+        // This makes the conversion to int robust.
+        g = Math.max(0, g);
+        g = Math.min(255, g);
+
         return new Color(g, g, g);
     }
\ No newline at end of file
