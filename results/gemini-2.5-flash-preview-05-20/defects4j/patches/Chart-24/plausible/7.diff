diff --git a/tmp/64fe952d-ccf2-43d1-8dd9-43b294b5987d_buggy.java b/tmp/54354dc0-8661-4378-bf24-458c91c7e708_fixed.java
index e31352b..bcea2e6 100644
--- a/tmp/64fe952d-ccf2-43d1-8dd9-43b294b5987d_buggy.java
+++ b/tmp/54354dc0-8661-4378-bf24-458c91c7e708_fixed.java
@@ -1,15 +1,28 @@
     /**
      * Returns a paint for the specified value.
      * 
      * @param value  the value (must be within the range specified by the
      *         lower and upper bounds for the scale).
      * 
      * @return A paint for the specified value.
      */
     public Paint getPaint(double value) {
+        // Clamp the value to be within the lower and upper bounds of the scale.
+        // This 'v' is the actual value that should be mapped to a gray shade.
         double v = Math.max(value, this.lowerBound);
         v = Math.min(v, this.upperBound);
-        int g = (int) ((value - this.lowerBound) / (this.upperBound
+
+        // Calculate the gray component 'g' based on the clamped value 'v'.
+        // The original code used 'value' instead of 'v', which could lead
+        // to 'g' being outside the [0, 255] range when 'value' was outside
+        // [lowerBound, upperBound].
+        int g = (int) ((v - this.lowerBound) / (this.upperBound
                 - this.lowerBound) * 255.0);
+        
+        // Ensure 'g' is within the valid range [0, 255] due to potential
+        // floating point inaccuracies or if the clamping logic was to change
+        // (though Math.max/min should handle it well).
+        g = Math.max(0, Math.min(255, g));
+        
         return new Color(g, g, g);
     }
\ No newline at end of file
