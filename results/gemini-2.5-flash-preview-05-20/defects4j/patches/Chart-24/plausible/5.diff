diff --git a/tmp/59f06e9f-9b3d-45c0-8aef-9339df69fa7a_buggy.java b/tmp/b084d71f-e68c-424f-9cbb-00694c2d86a6_fixed.java
index e31352b..14d94cd 100644
--- a/tmp/59f06e9f-9b3d-45c0-8aef-9339df69fa7a_buggy.java
+++ b/tmp/b084d71f-e68c-424f-9cbb-00694c2d86a6_fixed.java
@@ -1,15 +1,29 @@
     /**
      * Returns a paint for the specified value.
      * 
      * @param value  the value (must be within the range specified by the
      *         lower and upper bounds for the scale).
      * 
      * @return A paint for the specified value.
      */
     public Paint getPaint(double value) {
+        // Clamp the value to ensure it's within the defined bounds.
+        // This handles cases where the input value is outside the scale's range.
         double v = Math.max(value, this.lowerBound);
         v = Math.min(v, this.upperBound);
-        int g = (int) ((value - this.lowerBound) / (this.upperBound
+
+        // Calculate the gray component (g) using the clamped value 'v'.
+        // The previous bug used the original 'value' which could be outside
+        // the bounds, leading to 'g' being out of the [0, 255] range
+        // required by java.awt.Color.
+        int g = (int) ((v - this.lowerBound) / (this.upperBound
                 - this.lowerBound) * 255.0);
+
+        // Ensure g is within the valid range [0, 255] in case of floating point
+        // inaccuracies or edge cases where upperBound == lowerBound (resulting in NaN which casts to 0).
+        // While the clamping of 'v' should ensure this for most valid scales,
+        // explicit clamping here provides robustness.
+        g = Math.max(0, Math.min(255, g));
+        
         return new Color(g, g, g);
     }
\ No newline at end of file
