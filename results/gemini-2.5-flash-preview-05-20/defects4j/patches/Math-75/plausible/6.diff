diff --git a/tmp/f3549ca4-9883-4745-8e7c-308be6f25aec_buggy.java b/tmp/d548e23f-8e03-40e4-9f24-32d1a1f5af2a_fixed.java
index 877a1a1..39bcb57 100644
--- a/tmp/f3549ca4-9883-4745-8e7c-308be6f25aec_buggy.java
+++ b/tmp/d548e23f-8e03-40e4-9f24-32d1a1f5af2a_fixed.java
@@ -1,14 +1,28 @@
     /**
       * Returns the percentage of values that are equal to v
      * (as a proportion between 0 and 1).
      * <p>
      * Returns <code>Double.NaN</code> if no values have been added.</p>
      *
      * @param v the value to lookup
      * @return the proportion of values equal to v
      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
      */
     @Deprecated
     public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+        // The original implementation incorrectly called getCumPct,
+        // which returns the cumulative percentage (less than or equal to v),
+        // instead of the percentage of values equal to v.
+        // This method should calculate (count of v) / (total count of all values).
+        long sumFreq = getSumFreq(); // Get the total number of values added
+
+        if (sumFreq == 0) {
+            return Double.NaN; // Return NaN if no values have been added
+        }
+
+        // Get the count of the specific value 'v'
+        long countV = getCount(v);
+
+        // Calculate the percentage
+        return (double) countV / sumFreq;
     }
\ No newline at end of file
