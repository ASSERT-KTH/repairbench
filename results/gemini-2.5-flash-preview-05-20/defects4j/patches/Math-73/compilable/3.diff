diff --git a/tmp/b23665ef-c427-4f01-b972-75f6c9eaf56c_buggy.java b/tmp/1f477ba4-ab54-449c-b3d7-e5125d86f530_fixed.java
index 757067a..89a8126 100644
--- a/tmp/b23665ef-c427-4f01-b972-75f6c9eaf56c_buggy.java
+++ b/tmp/1f477ba4-ab54-449c-b3d7-e5125d86f530_fixed.java
@@ -1,63 +1,84 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // Corrected: should be 'min', not 'yMin'
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0); // Corrected: should be 'max', not 'yMax'
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // If we reach this point, it means:
+        // 1. None of initial, min, max are roots (within accuracy).
+        // 2. Neither (min, initial) nor (initial, max) bracket a root.
+        // This implies that yInitial * yMin >= 0 and yInitial * yMax >= 0.
+        // Since none of the values are zero, this means yMin, yInitial, and yMax
+        // must all have the same sign. This violates the bracketing condition
+        // specified in the Javadoc.
+        if (yMin * yInitial > 0 && yInitial * yMax > 0) {
+            throw new IllegalArgumentException
+                ("Function values at points are not bracketing: " +
+                 "f(min)=" + yMin + ", f(initial)=" + yInitial + ", f(max)=" + yMax);
+        }
 
         // full Brent algorithm starting with provided initial guess
+        // At this point, it implies that min and max must bracket the root,
+        // as otherwise the above check would have failed.
+        // (If yMin and yMax bracket, but initial doesn't help narrow,
+        // then yMin * yInitial < 0 or yInitial * yMax < 0 would have been false,
+        // AND yMin * yMax < 0 must be true. This means yInitial has the same sign as one endpoint.
+        // E.g., if yMin < 0, yMax > 0, yInitial < 0. Then yInitial * yMin > 0 (false for exception check)
+        // but yInitial * yMax < 0 (true for initial/max bracket). So it would have taken the `if (yInitial * yMax < 0)` branch.
+        // So the flow ensures this path is only taken if no bracketing is found among any of the three points,
+        // leading to the IllegalArgumentException.)
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
