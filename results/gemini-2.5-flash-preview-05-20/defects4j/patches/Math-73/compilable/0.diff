diff --git a/tmp/e21b78de-45e8-471f-9357-0dd8bafcc585_buggy.java b/tmp/39099270-2212-43ab-b3e1-d4fcec139cde_fixed.java
index 757067a..b0c0ce5 100644
--- a/tmp/e21b78de-45e8-471f-9357-0dd8bafcc585_buggy.java
+++ b/tmp/39099270-2212-43ab-b3e1-d4fcec139cde_fixed.java
@@ -1,63 +1,82 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        // Evaluate function values at all three points upfront.
         double yInitial = f.value(initial);
+        double yMin = f.value(min);
+        double yMax = f.value(max);
+
+        // Return the initial guess if it is good enough
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
+        // Return the first endpoint if it is good enough
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // Corrected: Should set result to the x-value (min), not the y-value (yMin)
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
+        // Return the second endpoint if it is good enough
+        if (Math.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0); // Corrected: Should set result to the x-value (max), not the y-value (yMax)
+            return result;
+        }
+
+        // Throws IllegalArgumentException if the values of the function
+        // at the three points (min, initial, max) have the same sign.
+        // This is true if yInitial has the same sign as yMin, AND
+        // yInitial has the same sign as yMax.
+        if (yInitial * yMin > 0 && yInitial * yMax > 0) {
+            throw new IllegalArgumentException(
+                "Function values at points min, initial, max have same sign. No bracketing found.");
+        }
+
+        // Reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
+            // The root is bracketed by min and initial. Use initial as the guess.
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
-
-        // reduce interval if initial and max bracket the root
+        // Reduce interval if initial and max bracket the root
+        // This path is taken only if (yInitial * yMin >= 0).
         if (yInitial * yMax < 0) {
+            // The root is bracketed by initial and max. Use initial as the guess.
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
-
-        // full Brent algorithm starting with provided initial guess
+        // If control reaches here, it implies:
+        // 1. No trivial root found at initial, min, or max.
+        // 2. The function values at min, initial, and max do NOT all have the same sign.
+        // 3. No bracketing was found between (min, initial) or (initial, max).
+        // Since (yInitial * yMin >= 0) and (yInitial * yMax >= 0) are true, and not all three
+        // have the same sign, the only remaining possibility for a root to exist is if
+        // (yMin * yMax < 0) but initial does not help narrow the bracket.
+        // In this case, the algorithm proceeds with the full [min, max] interval.
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
\ No newline at end of file
