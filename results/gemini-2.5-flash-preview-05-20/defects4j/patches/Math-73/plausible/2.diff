diff --git a/tmp/3c7020b8-f95f-4914-a076-1913b434ba55_buggy.java b/tmp/79874a6b-b8d4-4f29-9bfa-1a2b52cc8247_fixed.java
index 757067a..370fb6a 100644
--- a/tmp/3c7020b8-f95f-4914-a076-1913b434ba55_buggy.java
+++ b/tmp/79874a6b-b8d4-4f29-9bfa-1a2b52cc8247_fixed.java
@@ -1,63 +1,66 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // FIX: Should set the result to the x-coordinate (min), not the function value (yMin).
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0); // FIX: Should set the result to the x-coordinate (max), not the function value (yMax).
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        // If we reach this point, it means:
+        // 1. Neither initial, min, nor max are close enough to a root.
+        // 2. yInitial * yMin >= 0 (initial and min do not bracket the root)
+        // 3. yInitial * yMax >= 0 (initial and max do not bracket the root)
+        // These two conditions together imply that yMin, yInitial, and yMax all have the same sign.
+        // According to the Javadoc, this scenario should throw an IllegalArgumentException.
+        throw new IllegalArgumentException("Function values at points do not bracket a root.");
     }
\ No newline at end of file
