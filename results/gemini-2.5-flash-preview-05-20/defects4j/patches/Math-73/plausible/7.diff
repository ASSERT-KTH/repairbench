diff --git a/tmp/e595217c-04b1-45ce-a40e-3cc7f2bd3cea_buggy.java b/tmp/8f88c3ae-8a1d-4b57-9a84-e084574fadf4_fixed.java
index 757067a..3a37864 100644
--- a/tmp/e595217c-04b1-45ce-a40e-3cc7f2bd3cea_buggy.java
+++ b/tmp/8f88c3ae-8a1d-4b57-9a84-e084574fadf4_fixed.java
@@ -1,63 +1,68 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            // Bug fix: should set the result to the x-value (min), not the y-value (yMin)
+            setResult(min, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            // Bug fix: should set the result to the x-value (max), not the y-value (yMax)
+            setResult(max, 0);
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        // At this point, none of the values are close to zero, and
+        // (yInitial * yMin >= 0) and (yInitial * yMax >= 0).
+        // This implies that yMin, yInitial, and yMax all have the same sign.
+        // As per the Javadoc, this is an IllegalArgumentException condition for non-bracketing.
+        throw new IllegalArgumentException(
+            "Function values at min, initial, and max have the same sign. " +
+            "No root in the interval.");
     }
\ No newline at end of file
