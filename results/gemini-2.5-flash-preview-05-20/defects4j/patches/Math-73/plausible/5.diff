diff --git a/tmp/dd4600ec-2f28-4b0f-bcdb-34ea9424fe7f_buggy.java b/tmp/c73be3f6-8c35-42ca-a02d-678c7e478f5e_fixed.java
index 757067a..2ad3ed0 100644
--- a/tmp/dd4600ec-2f28-4b0f-bcdb-34ea9424fe7f_buggy.java
+++ b/tmp/c73be3f6-8c35-42ca-a02d-678c7e478f5e_fixed.java
@@ -1,63 +1,78 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // Fix: Should return the x-value (min), not the y-value (yMin)
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0); // Fix: Should return the x-value (max), not the y-value (yMax)
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // If at this point, no bracketing occurred with the initial guess,
+        // and the function values at min, initial, and max all have the same sign,
+        // then throw an exception. The previous `if` blocks mean:
+        // (yInitial * yMin >= 0) AND (yInitial * yMax >= 0).
+        // Combined with the earlier `Math.abs` checks, this implies yMin, yInitial, and yMax
+        // all have the same non-zero sign.
+        if (yMin * yInitial > 0 && yInitial * yMax > 0) {
+            throw new IllegalArgumentException
+                ("Function values at min, initial, and max have the same sign. " +
+                 "No bracketing could be performed.");
+        }
 
         // full Brent algorithm starting with provided initial guess
+        // This case means that either min and max bracket the root (yMin * yMax < 0),
+        // or one of the points is exactly zero (which is handled by functionValueAccuracy),
+        // but no bracketing with the 'initial' point was found.
+        // The underlying solve method handles the specific Brent algorithm logic for this case.
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
