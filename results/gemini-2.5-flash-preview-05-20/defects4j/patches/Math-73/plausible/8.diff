diff --git a/tmp/b0a74a94-0444-459e-80c7-ef66e6fdc7cd_buggy.java b/tmp/46289bca-b0b4-4c22-a93b-ffca114d9564_fixed.java
index 757067a..6ae10b7 100644
--- a/tmp/b0a74a94-0444-459e-80c7-ef66e6fdc7cd_buggy.java
+++ b/tmp/46289bca-b0b4-4c22-a93b-ffca114d9564_fixed.java
@@ -1,63 +1,89 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // FIX: Should set the x-coordinate (min), not the y-coordinate (yMin)
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0); // FIX: Should set the x-coordinate (max), not the y-coordinate (yMax)
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // If we reach this point, it means no root was found directly at min, initial, or max,
+        // and no bracketing interval was found between (min,initial) or (initial,max).
+        // This implies that (yInitial * yMin >= 0) AND (yInitial * yMax >= 0).
+        // Since we've already checked for values being close to zero, this means:
+        // (yInitial * yMin > 0) AND (yInitial * yMax > 0).
+        // This indicates that yInitial, yMin, and yMax all have the same sign.
+        // As per the Javadoc, this scenario should throw an IllegalArgumentException.
+        if ((yInitial * yMin > 0) && (yInitial * yMax > 0)) {
+            throw new IllegalArgumentException(
+                "Function values at min, initial, and max have the same sign. " +
+                "No bracketing interval could be found. " +
+                "min=" + min + ", max=" + max + ", initial=" + initial +
+                ", yMin=" + yMin + ", yMax=" + yMax + ", yInitial=" + yInitial);
+        }
 
-        // full Brent algorithm starting with provided initial guess
+        // This final call is reached if min and max bracket the root, but initial does not
+        // form a tighter bracket with either min or max.
+        // This case is covered by the Javadoc's "note that it is allowed to have endpoints
+        // with the same sign if the initial point has opposite sign function-wise".
+        // However, if the above `if` block was true (all same sign), this line would not be reached.
+        // If the above `if` block was false, AND the previous `if` blocks were false,
+        // it implies that a bracket *does* exist between min and max (yMin * yMax < 0).
+        // For example, if yMin=-1, yInitial=0.5, yMax=1. In this scenario, the (min,initial) bracket is formed (yInitial * yMin < 0) and the function returns early.
+        // The original logic here assumes that if no sub-bracket is found, the general Brent algorithm
+        // with the full interval [min, max] and initial guess 'initial' will proceed.
+        // Given the test failure, it seems the underlying solver does not always throw the expected exception
+        // or the requirement is for this top-level method to throw it more directly.
+        // The added check handles the scenario where all three points share the same sign.
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
