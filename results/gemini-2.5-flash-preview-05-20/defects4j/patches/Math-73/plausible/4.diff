diff --git a/tmp/dd8f3eb6-0945-49c9-a0e9-abd391a404b3_buggy.java b/tmp/c5e76257-3950-49bc-8e16-5b84b80e210b_fixed.java
index 757067a..46e68a4 100644
--- a/tmp/dd8f3eb6-0945-49c9-a0e9-abd391a404b3_buggy.java
+++ b/tmp/c5e76257-3950-49bc-8e16-5b84b80e210b_fixed.java
@@ -1,63 +1,72 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // BUG FIX: Was setResult(yMin, 0); should be min (x-coordinate)
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0); // BUG FIX: Was setResult(yMax, 0); should be max (x-coordinate)
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // At this point, none of the initial points are roots, and:
+        // (yInitial * yMin >= 0) implies yInitial and yMin have the same sign.
+        // (yInitial * yMax >= 0) implies yInitial and yMax have the same sign.
+        // This collectively means yMin, yInitial, and yMax all have the same sign.
+        // According to the Javadoc for this method, this situation should throw an IllegalArgumentException.
+        throw new IllegalArgumentException(
+            "Function values at points are not bracketing a root: " +
+            "f(min)=" + yMin + ", f(initial)=" + yInitial + ", f(max)=" + yMax);
 
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        // The original line below is removed as it would imply continuing to solve
+        // even when a bracketing interval isn't found among the initial points,
+        // which contradicts the specified exception condition.
+        // return solve(f, min, yMin, max, yMax, initial, yInitial);
     }
\ No newline at end of file
