diff --git a/tmp/716dc586-2440-4719-a635-80e8d2ce8c6f_buggy.java b/tmp/7908583f-4e2d-48f7-9790-5370477c5ccf_fixed.java
index 757067a..3e3e449 100644
--- a/tmp/716dc586-2440-4719-a635-80e8d2ce8c6f_buggy.java
+++ b/tmp/7908583f-4e2d-48f7-9790-5370477c5ccf_fixed.java
@@ -1,63 +1,77 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // Corrected: should be 'min' not 'yMin' for the result value
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
+            // The Javadoc for the internal solve method suggests min, f(min), max, f(max), initial, f(initial)
+            // So if min and initial bracket, the new interval is (min, initial)
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0); // Corrected: should be 'max' not 'yMax' for the result value
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
+            // If initial and max bracket, the new interval is (initial, max)
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // If we reach here, it means:
+        // 1. Neither initial, min, nor max were roots themselves (checked by functionValueAccuracy).
+        // 2. yInitial and yMin have the same sign (because yInitial * yMin < 0 was false).
+        // 3. yInitial and yMax have the same sign (because yInitial * yMax < 0 was false).
+        // Therefore, yMin, yInitial, and yMax all have the same sign.
+        // This is a non-bracketing situation for the three points according to the Javadoc.
+        // Throw an IllegalArgumentException as specified.
+        throw new IllegalArgumentException
+            ("Function values at points do not bracket a root. " +
+             "Expected signs to be opposite, but got: f(min)=" + yMin +
+             ", f(initial)=" + yInitial + ", f(max)=" + yMax);
 
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        // The original code would proceed to call the full Brent algorithm,
+        // but this violates the Javadoc's pre-condition.
+        // return solve(f, min, yMin, max, yMax, initial, yInitial); // This line is now unreachable.
     }
\ No newline at end of file
