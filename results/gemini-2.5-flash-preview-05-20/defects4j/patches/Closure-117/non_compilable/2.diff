diff --git a/tmp/e745462f-447d-4c8a-8a38-73ce8be1a69c_buggy.java b/tmp/d8c482d2-7466-4e44-91ef-ed7abd1c9ad7_fixed.java
index 39981f0..68ae326 100644
--- a/tmp/e745462f-447d-4c8a-8a38-73ce8be1a69c_buggy.java
+++ b/tmp/d8c482d2-7466-4e44-91ef-ed7abd1c9ad7_fixed.java
@@ -1,65 +1,80 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
-
     // The best type name is the actual type name.
+    JSType actualType = getJSType(n);
+    if (dereference) {
+      ObjectType dereferenced = actualType.dereference();
+      if (dereferenced != null) {
+        actualType = dereferenced;
+      }
+    }
 
     // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+    // prototype chain. In some cases, we want to show the qualified name
+    // (e.g., "Foo.prototype.bar"), especially if the actual type is generic
+    // (like "function" or "?"). If the actual type is specific (like "C2"),
+    // we prefer that.
     if (n.isGetProp()) {
+      // Check if the actual type provides a specific, descriptive name.
+      // If it's a generic type (e.g., function, object without constructor, unknown),
+      // then finding the qualified name from the prototype chain might be more descriptive.
+      if (actualType != null &&
+          !(actualType.isUnknownType() || actualType.isNoType() || actualType.isAllType() ||
+            (actualType.isFunctionType() && actualType.toObjectType() == null) || // Generic function type
+            (actualType.isObjectType() && actualType.toObjectType().getConstructor() == null && !actualType.isFunctionPrototypeType()))) { // Generic object type, e.g. {}
+        // If the actual type is a specific named type (like C2), use it.
+        return actualType.toString();
+      }
+
+      // Otherwise, proceed with the original GETPROP logic to find the
+      // defining class/interface and its qualified name.
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
+        // Don't show complex function names or anonymous types for the qualified name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
           return objectType.toString() + "." + propName;
         }
       }
     }
 
-    JSType type = getJSType(n);
-    if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
-      }
-    }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
-      return type.toString();
+    // Fallback if not a GETPROP or if GETPROP logic didn't return a name.
+    // This part tries to use the actual JSType or the node's qualified name.
+    if (actualType.isFunctionPrototypeType() ||
+        (actualType.toObjectType() != null &&
+         actualType.toObjectType().getConstructor() != null)) {
+      return actualType.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
-    } else if (type.isFunctionType()) {
+    } else if (actualType.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
-      return type.toString();
+      return actualType.toString();
     }
   }
\ No newline at end of file
