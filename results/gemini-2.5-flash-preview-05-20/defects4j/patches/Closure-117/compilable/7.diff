diff --git a/tmp/9d7ed755-d59e-4988-8b9b-19ccd11bfe6c_buggy.java b/tmp/b5a637ac-f845-4e04-8979-ee19563d2422_fixed.java
index 39981f0..7f5226b 100644
--- a/tmp/9d7ed755-d59e-4988-8b9b-19ccd11bfe6c_buggy.java
+++ b/tmp/b5a637ac-f845-4e04-8979-ee19563d2422_fixed.java
@@ -1,65 +1,85 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+      // Store the original base object type. This is useful for error messages
+      // where the property was not found, as we want to report the type it was
+      // accessed on, not necessarily the type where it might have been defined.
+      ObjectType baseObjectType = objectType;
+
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
+          // Climb the prototype chain to find the *defining* type of the property.
+          // If the property is not found, objectType will become null.
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
         // Don't show complex function names or anonymous types.
         // Instead, try to get a human-readable type name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
+          // If the property was found and its defining type has a good name,
+          // return "DefiningType.propName".
           return objectType.toString() + "." + propName;
+        } else {
+          // If the property was NOT found (objectType is null after the loop),
+          // or the found type's name is not desirable (e.g., anonymous function type),
+          // we should fall back to reporting the name of the *base* object type
+          // that the property was accessed on, if that name is readable.
+          if (baseObjectType != null &&
+              (baseObjectType.getConstructor() != null ||
+               baseObjectType.isFunctionPrototypeType())) {
+            return baseObjectType.toString();
+          }
+          // Else, fall through to the general naming logic outside this block.
         }
       }
     }
 
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
\ No newline at end of file
