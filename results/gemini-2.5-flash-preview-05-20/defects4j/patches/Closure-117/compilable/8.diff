diff --git a/tmp/ebb3556c-948d-4daf-a6f8-719ab22fb5cc_buggy.java b/tmp/eb91825a-6f4a-4c07-b689-85808697ea3d_fixed.java
index 39981f0..0699761 100644
--- a/tmp/ebb3556c-948d-4daf-a6f8-719ab22fb5cc_buggy.java
+++ b/tmp/eb91825a-6f4a-4c07-b689-85808697ea3d_fixed.java
@@ -1,65 +1,77 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
+
+        // Handle interfaces first.
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
+          ObjectType definingInterface = FunctionType.getTopDefiningInterface(
               objectType, propName);
+          if (definingInterface != null) {
+            return definingInterface.toString() + "." + propName;
+          }
         } else {
-          // classes
+          // For classes: only climb the prototype chain if the property is NOT
+          // an own property of the current objectType. If it's an own property,
+          // we should fall through to get the type of the node itself.
+          if (!objectType.hasOwnProperty(propName)) {
             while (objectType != null && !objectType.hasOwnProperty(propName)) {
               objectType = objectType.getImplicitPrototype();
             }
-        }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
+            // If found on a prototype (objectType is not null now)
+            // and it's a type with a constructor or a function prototype,
+            // return the prototype chain declaration name.
             if (objectType != null &&
                 (objectType.getConstructor() != null ||
                  objectType.isFunctionPrototypeType())) {
               return objectType.toString() + "." + propName;
             }
           }
         }
+      }
+    }
 
+    // Fall through to general case if no specific declaration site was found
+    // or if the property was an own property (in which case we want the type of the value).
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
\ No newline at end of file
