diff --git a/tmp/ee126b87-375f-4e46-9acf-2f4391340781_buggy.java b/tmp/a8fda7a2-728a-4e26-96a9-07ea4a6c4f91_fixed.java
index 39981f0..de01005 100644
--- a/tmp/ee126b87-375f-4e46-9acf-2f4391340781_buggy.java
+++ b/tmp/a8fda7a2-728a-4e26-96a9-07ea4a6c4f91_fixed.java
@@ -1,65 +1,94 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
         // Don't show complex function names or anonymous types.
         // Instead, try to get a human-readable type name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
           return objectType.toString() + "." + propName;
         }
       }
     }
 
     JSType type = getJSType(n);
+
+    // Prioritize display name for named constructors.
+    // This handles cases like `C2` where we want "C2" instead of "function C2()"
+    // or "C2.prototype".
+    if (type.isFunctionType()) {
+      FunctionType functionType = type.toMaybeFunctionType();
+      if (functionType != null && functionType.isConstructor() && functionType.getDisplayName() != null) {
+        return functionType.getDisplayName();
+      }
+    }
+
+    // If the node itself has a qualified name, it is often the most readable,
+    // especially for symbolic constants (e.g., goog.events.EventType.CLICK).
+    // However, avoid using it if the type already has a meaningful, specific name
+    // that is preferred (e.g., for constructor functions or prototype types).
+    String qualifiedName = n.getQualifiedName();
+    if (qualifiedName != null) {
+      if (!(type.isFunctionPrototypeType() ||
+            type.isFunctionType() || // Function types (non-constructors already handled)
+            (type.isObject() && type.toObjectType().getConstructor() != null && type.toObjectType().getDisplayName() != null) || // Named object types like Array, Object
+            type.isNoType() || type.isUnknownType())) { // Avoid returning qualified name if type is unknown/none, as its toString() is uninformative
+        return qualifiedName;
+      }
+    }
+
+    // Now apply dereference if requested. This usually transforms a constructor
+    // type into its prototype type.
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
+
+    // For function prototype types or object types with a constructor (like Object, Array).
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
-    String qualifiedName = n.getQualifiedName();
-    if (qualifiedName != null) {
-      return qualifiedName;
-    } else if (type.isFunctionType()) {
+    
+    // Remaining function types (anonymous, non-constructors without display name).
+    if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
+      // General fallback.
       return type.toString();
     }
   }
\ No newline at end of file
