diff --git a/tmp/d4348498-771b-47e2-8f7c-169924ac07c3_buggy.java b/tmp/57e38fb5-ac55-4bfe-ac4c-4ff16393e231_fixed.java
index 39981f0..ae2631d 100644
--- a/tmp/d4348498-771b-47e2-8f7c-169924ac07c3_buggy.java
+++ b/tmp/57e38fb5-ac55-4bfe-ac4c-4ff16393e231_fixed.java
@@ -1,65 +1,85 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
+      // Get the type of the object expression (the receiver of the property access).
+      JSType baseType = getJSType(n.getFirstChild());
+      // Dereference it to an ObjectType, if possible. This represents the object
+      // on which the property lookup initially occurs (e.g., C2 for `this.c2_`).
+      ObjectType initialObjectType = baseType.dereference();
+
+      if (initialObjectType != null) {
         String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+        // This variable will be used to climb the prototype chain and find the
+        // specific type where the property is actually defined.
+        ObjectType definingType = initialObjectType;
+
+        if (definingType.getConstructor() != null &&
+            definingType.getConstructor().isInterface()) {
+          // If it's an interface, find the top-most interface that defines the property.
+          definingType = FunctionType.getTopDefiningInterface(
+              definingType, propName);
         } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+          // For classes (or regular objects), climb the prototype chain
+          // until the property is found or the chain ends.
+          while (definingType != null && !definingType.hasOwnProperty(propName)) {
+            definingType = definingType.getImplicitPrototype();
           }
         }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+        // If a defining type was found on the prototype chain (i.e., property exists)
+        // and it's suitable for display (has a constructor or is a function prototype),
+        // return the name of the defining type plus the property name.
+        if (definingType != null &&
+            (definingType.getConstructor() != null ||
+             definingType.isFunctionPrototypeType())) {
+          return definingType.toString() + "." + propName;
+        } else {
+          // If the property was not found (definingType is null after the loop),
+          // or if the defining type was found but is not suitable for display
+          // (e.g., an anonymous type where we prefer not to show the full type string),
+          // we should still report the context of the error.
+          // In such cases (like "property not defined" errors), the relevant type
+          // is the `initialObjectType` on which the access was attempted.
+          return initialObjectType.toString();
         }
       }
     }
 
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
\ No newline at end of file
