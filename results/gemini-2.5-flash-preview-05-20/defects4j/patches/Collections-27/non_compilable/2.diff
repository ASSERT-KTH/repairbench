diff --git a/tmp/33d95a47-e638-4b56-9703-3dce4b1635d6_buggy.java b/tmp/3faf3eb8-366c-436b-b70e-5a8e2d6c680b_fixed.java
index e69de29..7680f2d 100644
--- a/tmp/33d95a47-e638-4b56-9703-3dce4b1635d6_buggy.java
+++ b/tmp/3faf3eb8-366c-436b-b70e-5a8e2d6c680b_fixed.java
@@ -0,0 +1,41 @@
+    private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
+        in.defaultReadObject();
+
+        // Validate the deserialized 'valueCollectionType' field to prevent unsafe deserialization.
+        // This field specifies the type of Collection to use for values, and an arbitrary class
+        // could be used to instantiate malicious objects.
+        if (valueCollectionType != null) {
+            // Define a whitelist of safe and commonly used Collection types that can be instantiated.
+            // This list should include mutable collection types from java.util that have a no-argument constructor.
+            final Class<?>[] safeCollectionTypes = new Class<?>[] {
+                java.util.ArrayList.class,
+                java.util.HashSet.class,
+                java.util.LinkedList.class,
+                java.util.Vector.class,    // Legacy but sometimes used
+                java.util.Stack.class,     // Legacy but sometimes used
+                java.util.ArrayDeque.class, // Double-ended queue
+                java.util.concurrent.CopyOnWriteArrayList.class, // Thread-safe list
+                java.util.concurrent.CopyOnWriteArraySet.class   // Thread-safe set
+            };
+
+            boolean isSafe = false;
+            for (final Class<?> safeType : safeCollectionTypes) {
+                // Check if the deserialized valueCollectionType is assignable from a safe type.
+                // This means valueCollectionType itself IS a safeType or a subclass of a safeType.
+                if (safeType.isAssignableFrom(valueCollectionType)) {
+                    isSafe = true;
+                    break;
+                }
+            }
+
+            // If the deserialized class is not a Collection or is not in our whitelist (or a subclass thereof),
+            // then it is considered unsafe.
+            if (!java.util.Collection.class.isAssignableFrom(valueCollectionType) || !isSafe) {
+                throw new java.lang.UnsupportedOperationException(
+                    "MultiValueMap does not support the deserialization of the class " +
+                    valueCollectionType.getName() + " as a value collection type. " +
+                    "This is to prevent unsafe deserialization vulnerabilities."
+                );
+            }
+        }
+    }
\ No newline at end of file
