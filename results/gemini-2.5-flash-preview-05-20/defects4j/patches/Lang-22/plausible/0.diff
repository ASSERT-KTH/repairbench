diff --git a/tmp/b785d6d1-8925-4cae-92bd-f494185d92f4_buggy.java b/tmp/36198e14-92cc-4302-831f-9115a0cc95f9_fixed.java
index e0a0552..35c7b8a 100644
--- a/tmp/b785d6d1-8925-4cae-92bd-f494185d92f4_buggy.java
+++ b/tmp/36198e14-92cc-4302-831f-9115a0cc95f9_fixed.java
@@ -1,54 +1,102 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
      *
+     * <p>Special cases:
+     * <ul>
+     * <li>The invocations {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},
+     * {@code gcd(Integer.MIN_VALUE, 0)} and {@code gcd(0, Integer.MIN_VALUE)}
+     * throw an {@code ArithmeticException}, because the result {@code 2^31}
+     * cannot be represented as a positive {@code int} number.</li>
+     * <li>{@code gcd(x, 0)} is {@code |x|}</li>
+     * <li>{@code gcd(0, y)} is {@code |y|}</li>
+     * <li>{@code gcd(0, 0)} is {@code 0}</li>
+     * </ul></p>
+     *
      * @param u  a non-zero number
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
-        // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
+        // From Commons Math, with additional handling for edge cases as per Javadoc and test failures.
+
+        // Handle GCD of zero cases according to Javadoc:
+        // gcd(x, 0) is |x|
+        // gcd(0, y) is |y|
+        // gcd(0, 0) is 0
+        // Also, special case for MIN_VALUE overflow when one operand is 0.
+        if (u == 0) {
+            if (v == 0) {
+                return 0; // gcd(0,0) = 0
             }
+            // If gcd is 2^31, it cannot be represented as a positive int.
+            if (v == Integer.MIN_VALUE) {
+                throw new ArithmeticException("overflow: gcd is 2^31");
+            }
+            return Math.abs(v); // gcd(0,y) = |y|
+        } else if (v == 0) {
+            // If gcd is 2^31, it cannot be represented as a positive int.
+            if (u == Integer.MIN_VALUE) {
+                throw new ArithmeticException("overflow: gcd is 2^31");
+            }
+            return Math.abs(u); // gcd(x,0) = |x|
+        }
+
+        // The original `if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { return 1; }`
+        // was buggy for 0. For values like 1 or -1, the binary GCD algorithm below
+        // handles them correctly (e.g., gcd(MIN_VALUE, 1) naturally yields 1).
+        // This shortcut is no longer needed and was problematic.
+
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
         if (u > 0) { u = -u; } // make u negative
         if (v > 0) { v = -v; } // make v negative
+
         // B1. [Find power of 2]
         int k = 0;
-        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
-            u/=2; v/=2; k++; // cast out twos.
+        // while u and v are both even...
+        // and k is less than 31 (to prevent 1 << 31 overflow later and indicate 2^31 is unrepresentable positive int)
+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
+            u /= 2;
+            v /= 2;
+            k++; // cast out twos.
         }
         if (k == 31) {
+            // This indicates the gcd is 2^31, which cannot be represented as a positive int.
+            // This can happen if u and v were both Integer.MIN_VALUE, or other numbers
+            // that lead to 2^31 as gcd (and are not caught by the zero checks above).
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        //     one is odd.
-        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
+
+        // B2. Initialize: u and v have been divided by 2^k and at least one is odd.
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
+        int t = ((u & 1) == 1) ? v : -(u / 2)/*B3*/;
+        
         do {
-            /* assert u<0 && v<0; */
+            /* assert u<0 && v<0; */ // This comment refers to the *initial* u,v. After replacements, they can be positive temporarily.
+                                     // However, the algorithm relies on t being reduced and replacing one of u or v.
             // B4/B3: cast out twos from t.
             while ((t & 1) == 0) { // while t is even..
                 t /= 2; // cast out twos
             }
             // B5 [reset max(u,v)]
             if (t > 0) {
-                u = -t;
+                u = -t; // u becomes the new negative odd number
             } else {
-                v = t;
+                v = t;  // v is replaced by the negative odd number t
             }
             // B6/B3. at this point both u and v should be odd.
             t = (v - u) / 2;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)
         } while (t != 0);
-        return -u*(1<<k); // gcd is u*2^k
+
+        // gcd is u * 2^k. Note: u is negative here, so -u makes it positive.
+        // 1 << k calculates 2^k.
+        return -u * (1 << k);
     }
\ No newline at end of file
