diff --git a/tmp/cfb923fa-10ac-4282-a25a-040bec1a020c_buggy.java b/tmp/5e60b363-ef07-4299-9044-3a4d81883cb4_fixed.java
index e0a0552..43ce37d 100644
--- a/tmp/cfb923fa-10ac-4282-a25a-040bec1a020c_buggy.java
+++ b/tmp/5e60b363-ef07-4299-9044-3a4d81883cb4_fixed.java
@@ -1,54 +1,60 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
      *
      * @param u  a non-zero number
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
         // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
-        }
+        // The original implementation included a check:
+        // if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
+        //     return 1;
+        // }
+        // However, Math.abs(Integer.MIN_VALUE) returns Integer.MIN_VALUE.
+        // Since Integer.MIN_VALUE (-2147483648) is less than or equal to 1,
+        // this check incorrectly returned 1 for gcd(Integer.MIN_VALUE, X) where X was not +/-1.
+        // The rest of the algorithm correctly handles cases where one number is 1 or -1,
+        // so this initial optimization is not strictly necessary and introduces a bug.
+
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
         if (u > 0) { u = -u; } // make u negative
         if (v > 0) { v = -v; } // make v negative
         // B1. [Find power of 2]
         int k = 0;
         while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...
             u /= 2; v /= 2; k++; // cast out twos.
         }
         if (k == 31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
         int t = ((u & 1) == 1) ? v : -(u / 2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
         do {
             /* assert u<0 && v<0; */
             // B4/B3: cast out twos from t.
             while ((t & 1) == 0) { // while t is even..
                 t /= 2; // cast out twos
             }
             // B5 [reset max(u,v)]
             if (t > 0) {
                 u = -t;
             } else {
                 v = t;
             }
             // B6/B3. at this point both u and v should be odd.
             t = (v - u) / 2;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)
         } while (t != 0);
         return -u * (1 << k); // gcd is u*2^k
     }
\ No newline at end of file
