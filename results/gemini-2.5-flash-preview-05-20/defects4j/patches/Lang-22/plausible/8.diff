diff --git a/tmp/eeec3006-811b-41f9-bd7c-5c9124415e38_buggy.java b/tmp/09b91dd8-197d-4290-b399-9616437fa090_fixed.java
index e0a0552..d676349 100644
--- a/tmp/eeec3006-811b-41f9-bd7c-5c9124415e38_buggy.java
+++ b/tmp/09b91dd8-197d-4290-b399-9616437fa090_fixed.java
@@ -1,54 +1,84 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
      *
      * @param u  a non-zero number
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
-    private static int greatestCommonDivisor(int u, int v) {
+    private static int greatestCommonDivisor(int uOrig, int vOrig) {
+        // Use long for all calculations to avoid overflow problems when taking absolute value
+        // or during other intermediate calculations involving Integer.MIN_VALUE.
+        long u = uOrig;
+        long v = vOrig;
+
         // From Commons Math:
         // if either operand is abs 1, return 1:
+        // Note: Math.abs(Long.MIN_VALUE) is Long.MIN_VALUE due to overflow,
+        // but this condition (Long.MIN_VALUE <= 1) is still false.
+        // This initial check mostly handles cases like gcd(X, 1) or gcd(1, X).
         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
             return 1;
         }
+
         // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
+        // -2^63, while positive numbers can only be as large as 2^63-1
         // (i.e. we can't necessarily negate a negative number without
-        // overflow)
+        // overflow, though -Long.MIN_VALUE is still Long.MIN_VALUE)
         if (u > 0) { u = -u; } // make u negative
         if (v > 0) { v = -v; } // make v negative
+
         // B1. [Find power of 2]
         int k = 0;
+        // The loop condition and divisions work correctly with long.
         while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...
             u /= 2; v /= 2; k++; // cast out twos.
         }
+        
+        // This check detects cases where the GCD is 2^31 (absolute value of Long.MIN_VALUE),
+        // which cannot be represented as a positive int.
         if (k == 31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
+        
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
-        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
+        long t = ((u & 1) == 1) ? v : -(u / 2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
         do {
             /* assert u<0 && v<0; */
             // B4/B3: cast out twos from t.
             while ((t & 1) == 0) { // while t is even..
                 t /= 2; // cast out twos
             }
             // B5 [reset max(u,v)]
             if (t > 0) {
                 u = -t;
             } else {
                 v = t;
             }
             // B6/B3. at this point both u and v should be odd.
             t = (v - u) / 2;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)
         } while (t != 0);
-        return -u*(1<<k); // gcd is u*2^k
+        
+        // The GCD is |u| * 2^k.
+        // Since u is negative (or Long.MIN_VALUE), -u will be the positive absolute value.
+        // 1L << k ensures the shift is done as a long operation.
+        long result = -u * (1L << k);
+
+        // Final check to ensure the result fits within a positive int.
+        // The only case this would be necessary beyond k==31 is if -u itself was extremely large
+        // and k was small, leading to a product > Integer.MAX_VALUE.
+        // For gcd, this primarily means the result is 2^31 (when inputs are MIN_VALUE, MIN_VALUE),
+        // which is already handled by the k==31 check.
+        if (result > Integer.MAX_VALUE) {
+             throw new ArithmeticException("overflow: gcd is 2^31");
+        }
+
+        return (int) result;
     }
\ No newline at end of file
