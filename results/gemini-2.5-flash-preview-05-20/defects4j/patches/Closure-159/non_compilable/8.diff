diff --git a/tmp/627f5d4d-ff1d-4d2e-bf82-ab414b5c0763_buggy.java b/tmp/e5b657f5-799c-44ae-97dd-c1d441b50ca0_fixed.java
index de9af32..f7484b7 100644
--- a/tmp/627f5d4d-ff1d-4d2e-bf82-ab414b5c0763_buggy.java
+++ b/tmp/e5b657f5-799c-44ae-97dd-c1d441b50ca0_fixed.java
@@ -1,18 +1,38 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node functionNode = node.getFirstChild();
+      // The functionNode can be a NAME, GETPROP, GETELEM, or even a FUNCTION
+      // expression. We are interested in cases where a named function
+      // is directly called or called via .call/.apply etc.
+      // We want to find the root name of the function being called.
+      // For `foo()`, functionNode is `foo` (NAME).
+      // For `obj.method()`, functionNode is `obj.method` (GETPROP).
+      // For `func.call()`, functionNode is `func.call` (GETPROP).
+      // We need to extract `foo`, `obj`, `func` respectively.
+
+      Node nameNode = functionNode;
+      // Traverse down the GETPROP/GETELEM chain to find the actual name.
+      // E.g., for `a.b.c()`, functionNode is `a.b.c`, we want `a`.
+      // For `func.call()`, functionNode is `func.call`, we want `func`.
+      while (nameNode.isGetProp() || nameNode.isGetElem()) {
+        nameNode = nameNode.getFirstChild();
       }
+
+      // If the root node is a NAME, then it's a direct reference to a named function.
+      if (nameNode.getType() == Token.NAME) {
+        changed.add(nameNode.getString());
+      }
+      // Note: If functionNode is something like a FUNCTION (anonymous function expression)
+      // or a NEW expression, we don't add its name (as it doesn't have one, or it's a constructor).
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
