diff --git a/tmp/0ea0b5a1-0f94-40cc-b387-d8068782e129_buggy.java b/tmp/b395ef1b-e6e9-479e-8bc7-c3cc020117b1_fixed.java
index de9af32..5fe8b9e 100644
--- a/tmp/0ea0b5a1-0f94-40cc-b387-d8068782e129_buggy.java
+++ b/tmp/b395ef1b-e6e9-479e-8bc7-c3cc020117b1_fixed.java
@@ -1,18 +1,52 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node callTarget = node.getFirstChild(); // The expression representing the function being called
+
+      // Case 1: The call target is a simple name or a qualified name (e.g., 'foo()' or 'Foo.Bar.baz()')
+      if (callTarget.isQualifiedName()) {
+        changed.add(callTarget.getQualifiedName());
+      }
+      // Case 2: The call target is a GETPROP (e.g., 'obj.method()' or 'funcRef.call()')
+      else if (callTarget.getType() == Token.GETPROP) {
+        // A GETPROP node has two children: the target object/expression and the property name.
+        // The property name is usually a STRING node.
+        Node propertyNameNode = callTarget.getChildAtIndex(1);
+        
+        if (propertyNameNode != null && propertyNameNode.isString()) {
+          String propertyName = propertyNameNode.getString();
+          
+          // Subcase 2a: It's a '.call' or '.apply' invocation (e.g., 'initialize.call(this, options)')
+          if ("call".equals(propertyName) || "apply".equals(propertyName)) {
+            // The actual function being called is the target object/expression of the GETPROP.
+            Node actualFunctionTarget = callTarget.getFirstChild();
+            // If this target is a qualified name (e.g., 'initialize' or 'Foo.Bar.baz'), add it.
+            if (actualFunctionTarget.isQualifiedName()) {
+              changed.add(actualFunctionTarget.getQualifiedName());
+            }
+            // If actualFunctionTarget is not a qualified name (e.g., '(function(){}).call()'),
+            // we don't extract a static name here. The recursive traversal below will handle its children.
+          }
+          // Subcase 2b: It's a regular method call (e.g., 'obj.method()')
+          // If the GETPROP itself forms a qualified name, it would have been caught by callTarget.isQualifiedName() above.
+          // If not (e.g., 'this.method()'), we generally don't add the method name directly
+          // unless it represents a named function available for inlining.
+          // The current `InlineFunctions` pass typically handles top-level functions or functions assigned to qualified names.
+        }
       }
+      // Other types of callTarget (e.g., GETELEM for arr[0](), or FUNCTION literal for (function(){})())
+      // are not processed for a static name here, as they typically don't represent functions
+      // that are directly inlinable by their name in the same way.
+      // Their sub-expressions will be recursively visited.
     }
 
+    // Recursively visit all children of the current node to find nested calls.
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
