diff --git a/tmp/a7adade4-e3c4-45e9-a194-0ca94061e87f_buggy.java b/tmp/b9ced039-18e1-43fa-808a-85bb77a3c2be_fixed.java
index de9af32..09f0533 100644
--- a/tmp/a7adade4-e3c4-45e9-a194-0ca94061e87f_buggy.java
+++ b/tmp/b9ced039-18e1-43fa-808a-85bb77a3c2be_fixed.java
@@ -1,18 +1,41 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node callTarget = node.getFirstChild();
+      if (callTarget.getType() == Token.NAME) {
+        // Direct call: foo()
+        changed.add(callTarget.getString());
+      } else if (callTarget.getType() == Token.GETPROP) {
+        // Property access: obj.method() or fun.call() / fun.apply()
+        Node propertyNameNode = callTarget.getLastChild();
+        if (propertyNameNode != null && propertyNameNode.isString()) {
+          String propertyName = propertyNameNode.getString();
+          if ("call".equals(propertyName) || "apply".equals(propertyName)) {
+            // This is fun.call(...) or fun.apply(...)
+            // The actual function being called is the object of the GETPROP node.
+            // We are interested in its simple name if it's a direct reference to a declared function.
+            Node actualFunction = callTarget.getFirstChild();
+            if (actualFunction.isName()) {
+              // e.g., 'initialize' in 'initialize.call(this, options)'
+              changed.add(actualFunction.getString());
+            }
+            // Other cases like obj.method.call() are not added as 'method' because
+            // InlineFunctions primarily tracks simple-named function declarations.
+          }
+          // For obj.method(), where 'method' is not 'call' or 'apply',
+          // we do not add 'method' to the set, consistent with the original
+          // logic which only added simple NAME calls (e.g. foo()).
+        }
       }
     }
 
+    // Recursively traverse children
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
