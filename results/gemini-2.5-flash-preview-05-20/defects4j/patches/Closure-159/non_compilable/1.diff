diff --git a/tmp/d538491a-8033-4520-8f83-13600691faa9_buggy.java b/tmp/517f1a88-501d-48b0-ad0e-3f147d1cd307_fixed.java
index de9af32..9d1cb7a 100644
--- a/tmp/d538491a-8033-4520-8f83-13600691faa9_buggy.java
+++ b/tmp/517f1a88-501d-48b0-ad0e-3f147d1cd307_fixed.java
@@ -1,18 +1,29 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node callee = node.getFirstChild();
+      Node rootCallee = callee;
+      // Traverse down the first child chain of the callee.
+      // This handles cases like:
+      //   - `foo()`: rootCallee remains `foo` (a NAME node)
+      //   - `obj.method()`: rootCallee becomes `obj`
+      //   - `obj.method().anotherMethod()`: rootCallee becomes `obj`
+      //   - `initialize.call()`: rootCallee becomes `initialize`
+      while (rootCallee != null &&
+             (rootCallee.isGetProp() || rootCallee.isGetElem() || rootCallee.isCall())) {
+        rootCallee = rootCallee.getFirstChild();
+      }
+      if (rootCallee != null && rootCallee.isName()) {
+        changed.add(rootCallee.getString());
       }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
