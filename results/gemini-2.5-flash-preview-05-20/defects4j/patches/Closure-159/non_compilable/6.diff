diff --git a/tmp/ef5d0f0b-85e0-42a8-815b-ba9a5ca3d321_buggy.java b/tmp/b5d503c7-a00d-4998-a786-a4f812b044af_fixed.java
index de9af32..892dc8c 100644
--- a/tmp/ef5d0f0b-85e0-42a8-815b-ba9a5ca3d321_buggy.java
+++ b/tmp/b5d503c7-a00d-4998-a786-a4f812b044af_fixed.java
@@ -1,18 +1,47 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node callTarget = node.getFirstChild();
+      if (callTarget != null) {
+        if (callTarget.getType() == Token.NAME) {
+          // Case 1: Direct function call: e.g., 'foo()'
+          changed.add(callTarget.getString());
+        } else if (callTarget.getType() == Token.GETPROP) {
+          // Case 2: Method call: e.g., 'obj.method()' or 'func.call()'
+          // The property name is the last child of the GETPROP node.
+          Node propertyNameNode = callTarget.getLastChild();
+          if (propertyNameNode != null && propertyNameNode.isString()) {
+            String propertyName = propertyNameNode.getString();
+            // If it's a 'call' or 'apply' method, the *actual* function being called
+            // is the object on which 'call'/'apply' is invoked.
+            if ("call".equals(propertyName) || "apply".equals(propertyName)) {
+              Node actualFunctionNode = callTarget.getFirstChild();
+              // If the actual function is a simple named function, add its name.
+              if (actualFunctionNode != null && actualFunctionNode.getType() == Token.NAME) {
+                changed.add(actualFunctionNode.getString());
+              }
+            }
+            // For other GETPROP calls (e.g., obj.method()), we typically don't
+            // add 'method' to the set of globally "called functions" for inlining,
+            // as this set is usually for top-level named functions.
+            // The recursive descent will process the 'obj' part if it contains further calls.
+          }
+        }
+        // Other types of call targets (e.g., a function expression `(function(){})()`,
+        // or a complex expression `(expr)()`) are not named functions that would be
+        // added to the 'changed' set by this mechanism.
       }
     }
 
+    // Recursively traverse children for other calls.
+    // This method is intended to find *all* calls within the given node and its descendants,
+    // including those inside function declarations.
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
