diff --git a/tmp/94360a8e-1077-4028-80a3-3610fbaeac36_buggy.java b/tmp/61e2c566-13c1-478b-b6b3-7afa5bceeeb3_fixed.java
index de9af32..61c87fd 100644
--- a/tmp/94360a8e-1077-4028-80a3-3610fbaeac36_buggy.java
+++ b/tmp/61e2c566-13c1-478b-b6b3-7afa5bceeeb3_fixed.java
@@ -1,18 +1,35 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node callTarget = node.getFirstChild();
+      if (callTarget.getType() == Token.NAME) {
+        // Direct call: e.g., foo()
+        changed.add(callTarget.getString());
+      } else if (callTarget.getType() == Token.GETPROP) {
+        // Potential call via .call or .apply, or obj.method()
+        // Check if it's .call or .apply
+        Node property = callTarget.getSecondChild();
+        // property will be a Token.STRING_KEY node representing the property name (e.g., "call", "apply")
+        // No need for property != null as getSecondChild() for GETPROP always returns the property name.
+        // property.isString() is true for Token.STRING_KEY.
+        String propName = property.getString();
+        if ("call".equals(propName) || "apply".equals(propName)) {
+            // It's a call like func.call(this, ...) or func.apply(this, ...)
+            // The actual function name is the first child of the GETPROP node.
+            Node actualFunction = callTarget.getFirstChild();
+            if (actualFunction.getType() == Token.NAME) {
+                changed.add(actualFunction.getString());
+            }
+        }
       }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
