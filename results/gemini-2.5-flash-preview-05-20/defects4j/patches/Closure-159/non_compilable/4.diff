diff --git a/tmp/a3bfbb8d-938b-4ef2-b5ea-6ed3f4cbcf0b_buggy.java b/tmp/42c1f349-dd3c-4b2b-ac91-d5e5aac0b0b5_fixed.java
index de9af32..3a15266 100644
--- a/tmp/a3bfbb8d-938b-4ef2-b5ea-6ed3f4cbcf0b_buggy.java
+++ b/tmp/42c1f349-dd3c-4b2b-ac91-d5e5aac0b0b5_fixed.java
@@ -1,18 +1,48 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node functionExpression = node.getFirstChild();
+      if (functionExpression != null) {
+        String calledFunctionName = null;
+
+        if (functionExpression.isGetProp()) {
+          // This handles cases like `obj.method()` or `func.call()`.
+          Node propertyNameNode = functionExpression.getLastChild();
+          if (propertyNameNode != null && propertyNameNode.isString()) {
+            String methodName = propertyNameNode.getString();
+            if ("call".equals(methodName) || "apply".equals(methodName)) {
+              // For `func.call(...)` or `func.apply(...)`, the actual function
+              // is the object on which `.call` or `.apply` is invoked.
+              // This is the first child of the GETPROP node.
+              Node targetFunction = functionExpression.getFirstChild();
+              if (targetFunction != null) {
+                calledFunctionName = targetFunction.getQualifiedName();
+              }
+            } else {
+              // For a regular method call `obj.method()`, the called function
+              // is the qualified name of the GETPROP expression itself.
+              calledFunctionName = functionExpression.getQualifiedName();
+            }
+          }
+        } else if (functionExpression.isName()) {
+          // This handles direct calls to named functions, e.g., `foo()`.
+          calledFunctionName = functionExpression.getString();
+        }
+
+        // If a valid function name was extracted, add it to the set.
+        if (calledFunctionName != null) {
+          changed.add(calledFunctionName);
+        }
       }
     }
 
+    // Recursively traverse all children of the current node.
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
