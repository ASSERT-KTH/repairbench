diff --git a/tmp/a5c802d4-a539-4fd6-b04f-e8bfc6edb35b_buggy.java b/tmp/e1d245ed-4897-4e34-b6fc-e101b4cd9ec1_fixed.java
index de9af32..0a3235e 100644
--- a/tmp/a5c802d4-a539-4fd6-b04f-e8bfc6edb35b_buggy.java
+++ b/tmp/e1d245ed-4897-4e34-b6fc-e101b4cd9ec1_fixed.java
@@ -1,18 +1,44 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node functionExpression = node.getFirstChild();
+      if (functionExpression.isName()) {
+        // Direct call to a named function: `foo()`
+        changed.add(functionExpression.getString());
+      } else if (functionExpression.isGetProp()) {
+        // Handle method calls, specifically `func.call()` or `func.apply()`
+        Node propertyName = functionExpression.getSecondChild();
+        Node targetObject = functionExpression.getFirstChild();
+
+        if (propertyName != null && propertyName.isString()) {
+          String propString = propertyName.getString();
+          // If it's a .call() or .apply() method, the actual function called
+          // is the target object (e.g., 'initialize' in 'initialize.call').
+          if ("call".equals(propString) || "apply".equals(propString)) {
+            if (targetObject.isName()) {
+              changed.add(targetObject.getString());
+            }
+            // For other target object types (e.g., `(expr).call()`),
+            // the general recursion below will eventually visit the expression
+            // and find any names within it.
+          }
+          // For other GETPROP calls (e.g., obj.method()), we don't add the method name
+          // directly here, consistent with the original logic's focus on simple named calls.
+          // The recursion will still traverse into the GETPROP node's children.
+        }
       }
+      // Other types of function expressions (e.g., FUNCTION nodes for anonymous calls,
+      // or PAREN nodes for parenthesized expressions) are handled by the general recursion,
+      // as their children will eventually be visited.
     }
 
+    // Recurse into children nodes
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
