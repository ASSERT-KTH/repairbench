diff --git a/tmp/be91f435-d9ac-477a-8cf9-dd0dc1786d79_buggy.java b/tmp/e38cc7c4-1e3b-4592-8f08-3a204a3c6136_fixed.java
index de9af32..7dde472 100644
--- a/tmp/be91f435-d9ac-477a-8cf9-dd0dc1786d79_buggy.java
+++ b/tmp/e38cc7c4-1e3b-4592-8f08-3a204a3c6136_fixed.java
@@ -1,18 +1,35 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node functionCallTarget = node.getFirstChild(); // This is the expression representing the function being called
+
+      // We need to find the base name of the function being called,
+      // even if it's part of a property access chain (e.g., 'obj.method', 'namespace.sub.func').
+      Node current = functionCallTarget;
+      // Traverse down the GETPROP/GETELEM chain to find the root name.
+      // For 'a.b.c()', 'functionCallTarget' is 'GETPROP(GETPROP(NAME a, NAME b), NAME c)'.
+      // We want to extract 'a'.
+      // For 'initialize.call()', 'functionCallTarget' is 'GETPROP(NAME initialize, NAME call)'.
+      // We want to extract 'initialize'.
+      while (current != null && (current.isGetProp() || current.isGetElem())) {
+        current = current.getFirstChild();
+      }
+
+      // If the root of the expression is a simple NAME node, add its string to the set.
+      if (current != null && current.isName()) {
+        changed.add(current.getString());
       }
+      // If the function being called is a complex expression (e.g., an anonymous function
+      // or a result of another call), it won't have a simple name string and is skipped.
     }
 
+    // Recursively visit all children of the current node to find other function calls.
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
