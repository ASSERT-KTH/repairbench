diff --git a/tmp/07ad0d9d-5703-4e32-8834-ef4094860b97_buggy.java b/tmp/897572ae-3aa1-4dd4-8d42-0227b814926c_fixed.java
index a9a5e27..8d93c94 100644
--- a/tmp/07ad0d9d-5703-4e32-8834-ef4094860b97_buggy.java
+++ b/tmp/897572ae-3aa1-4dd4-8d42-0227b814926c_fixed.java
@@ -1,24 +1,34 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // Check for overflow when negating Long.MIN_VALUE.
+                // -Long.MIN_VALUE results in Long.MIN_VALUE, which is an overflow.
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
-        }
+            default:
+                // For other val2 values, perform multiplication and check for overflow.
+                // This check relies on the property that if val1 * val2 overflows,
+                // the result 'total' will wrap around, and total / val2 will not equal val1.
+                // This is generally robust for non-zero val2 (which is ensured by the switch cases).
                 long total = val1 * val2;
                 if (total / val2 != val1) {
                   throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
                 }
                 return total;
         }
+    }
\ No newline at end of file
