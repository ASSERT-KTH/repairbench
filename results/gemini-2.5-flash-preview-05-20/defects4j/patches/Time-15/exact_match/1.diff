diff --git a/tmp/a43af4c5-5f69-4784-97ff-90c84c5f59d0_buggy.java b/tmp/54f0de01-1203-401a-8dc4-85efa3764007_fixed.java
index a9a5e27..03e4553 100644
--- a/tmp/a43af4c5-5f69-4784-97ff-90c84c5f59d0_buggy.java
+++ b/tmp/54f0de01-1203-401a-8dc4-85efa3764007_fixed.java
@@ -1,24 +1,35 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // Check for overflow: Long.MIN_VALUE * -1 overflows to Long.MIN_VALUE.
+                // The mathematical result of -Long.MIN_VALUE is Long.MAX_VALUE + 1,
+                // which cannot be represented as a long.
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
+        // For other val2 values, perform multiplication and check for overflow.
+        // val2 is implicitly promoted to long for the multiplication.
         long total = val1 * val2;
+        // Check for overflow by verifying that the result, when divided by val2,
+        // returns the original val1. If an overflow occurred, this condition
+        // typically holds true as the 'total' value will have wrapped around.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
