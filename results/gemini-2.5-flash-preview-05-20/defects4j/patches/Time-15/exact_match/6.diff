diff --git a/tmp/adc56ca5-90b5-45c4-888d-e5ff2beb5b33_buggy.java b/tmp/c562bb8f-adf9-4524-88c9-06fceb9884c5_fixed.java
index a9a5e27..8dde075 100644
--- a/tmp/adc56ca5-90b5-45c4-888d-e5ff2beb5b33_buggy.java
+++ b/tmp/c562bb8f-adf9-4524-88c9-06fceb9884c5_fixed.java
@@ -1,24 +1,38 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // When val2 is -1, -val1 is returned.
+                // Multiplying Long.MIN_VALUE by -1 results in an overflow
+                // because abs(Long.MIN_VALUE) is greater than Long.MAX_VALUE.
+                // In Java, -Long.MIN_VALUE evaluates to Long.MIN_VALUE due to overflow.
+                // We must detect this specific overflow case.
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
+        
+        // Perform the multiplication. 'total' might hold a wrapped-around value if overflow occurs.
         long total = val1 * val2;
+        
+        // Check for overflow. If 'total' divided by 'val2' does not return the original 'val1',
+        // it implies that an overflow occurred during the multiplication.
+        // This check is generally robust for non-zero 'val2' values.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
