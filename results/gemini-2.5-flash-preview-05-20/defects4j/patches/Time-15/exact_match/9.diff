diff --git a/tmp/32cf1fe2-3c5f-4416-b24e-724357beb0d0_buggy.java b/tmp/ddb1b448-f77b-483c-8ab3-982ce611f6b5_fixed.java
index a9a5e27..3779880 100644
--- a/tmp/32cf1fe2-3c5f-4416-b24e-724357beb0d0_buggy.java
+++ b/tmp/ddb1b448-f77b-483c-8ab3-982ce611f6b5_fixed.java
@@ -1,24 +1,33 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // MIN_VALUE cannot be negated without overflow, so special check is needed
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
+        // For other values of val2, perform the multiplication and check for overflow.
+        // val2 is promoted to long for the multiplication.
         long total = val1 * val2;
+        // The check 'total / val2 != val1' detects overflow in general integer multiplication.
+        // If an overflow occurs, the result 'total' wraps around, and dividing it by 'val2'
+        // will not yield the original 'val1'. This check is valid as val2 is not zero.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
