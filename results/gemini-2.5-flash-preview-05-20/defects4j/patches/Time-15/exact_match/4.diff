diff --git a/tmp/2688b161-0cbb-45b4-9335-9c5a0ea036be_buggy.java b/tmp/4fa82746-a3df-47e0-9419-5d88b7f66ba0_fixed.java
index a9a5e27..43429ea 100644
--- a/tmp/2688b161-0cbb-45b4-9335-9c5a0ea036be_buggy.java
+++ b/tmp/4fa82746-a3df-47e0-9419-5d88b7f66ba0_fixed.java
@@ -1,24 +1,33 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // MIN_VALUE cannot be negated without overflow, so this is a special case.
+                // -Long.MIN_VALUE results in Long.MIN_VALUE itself in Java due to two's complement.
+                // Mathematically, it should be Long.MAX_VALUE + 1, which overflows a long.
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
         long total = val1 * val2;
+        // Check for overflow. If the multiplication overflowed, dividing the result
+        // by val2 will not yield the original val1. This is a common and effective
+        // way to detect overflow when val2 is not 0, 1, or -1 (which are handled).
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
