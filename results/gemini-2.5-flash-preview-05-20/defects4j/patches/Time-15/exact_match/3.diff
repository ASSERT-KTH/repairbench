diff --git a/tmp/10dd12bf-49e6-450b-af77-0d173a03f4ec_buggy.java b/tmp/150cdb16-599b-4f74-95b8-5e88292dd28e_fixed.java
index a9a5e27..a74577f 100644
--- a/tmp/10dd12bf-49e6-450b-af77-0d173a03f4ec_buggy.java
+++ b/tmp/150cdb16-599b-4f74-95b8-5e88292dd28e_fixed.java
@@ -1,24 +1,33 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // Special case for Long.MIN_VALUE * -1 which overflows a long
+                // because -Long.MIN_VALUE == Long.MIN_VALUE in Java due to two's complement.
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
         long total = val1 * val2;
+        // Check for overflow. If val1 * val2 does not equal total / val2,
+        // it means an overflow occurred during the multiplication.
+        // This check is generally robust unless val2 is 0 (handled above) or if val1 is 0.
+        // If val1 is 0, total is 0, and 0 / val2 == 0, so 0 != 0 is false, returning 0, which is correct.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
