diff --git a/tmp/0f32e231-a01c-4c7c-88c2-266ac29bef0e_buggy.java b/tmp/acc92085-a568-44c0-9c32-104a7ae3fc89_fixed.java
index a9a5e27..c4fcf86 100644
--- a/tmp/0f32e231-a01c-4c7c-88c2-266ac29bef0e_buggy.java
+++ b/tmp/acc92085-a568-44c0-9c32-104a7ae3fc89_fixed.java
@@ -1,24 +1,31 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // Check for overflow when multiplying by -1
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
         long total = val1 * val2;
+        // Check for overflow using the division property: if a * b does not overflow, then (a * b) / b == a.
+        // This check covers most overflow cases, including for other large val2 values.
+        // The specific case of Long.MIN_VALUE * -1 is handled separately above.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
