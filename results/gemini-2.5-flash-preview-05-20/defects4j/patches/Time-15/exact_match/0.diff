diff --git a/tmp/6c619a73-c85d-4b2e-8dfe-4767e91ab666_buggy.java b/tmp/31f44b53-1aa5-493b-aa00-9638a5d508a5_fixed.java
index a9a5e27..0d750ad 100644
--- a/tmp/6c619a73-c85d-4b2e-8dfe-4767e91ab666_buggy.java
+++ b/tmp/31f44b53-1aa5-493b-aa00-9638a5d508a5_fixed.java
@@ -1,24 +1,33 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // Check for overflow specifically for Long.MIN_VALUE * -1
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
         long total = val1 * val2;
+        // General check for overflow: if total / val2 is not val1, then an overflow occurred.
+        // This check works for all val2 not equal to 0, 1, or -1 as they are handled above.
+        // Note: For val2 == 0, division by zero would occur, but it's handled by the switch.
+        // For val2 == Integer.MIN_VALUE, if val1 is -1, total is -1 * MIN_INT which is 2147483648L.
+        // 2147483648L / Integer.MIN_VALUE is -1L. So -1L != -1L is false, and no exception is thrown, which is correct.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
