diff --git a/tmp/1b59a91d-6967-47c3-8761-c8a2c4514ffe_buggy.java b/tmp/c5852973-f698-4a6a-9131-982d22cc88e0_fixed.java
index a9a5e27..b5f76a7 100644
--- a/tmp/1b59a91d-6967-47c3-8761-c8a2c4514ffe_buggy.java
+++ b/tmp/c5852973-f698-4a6a-9131-982d22cc88e0_fixed.java
@@ -1,24 +1,33 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                // MIN_VALUE * -1 is MIN_VALUE, so this is an overflow
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
         long total = val1 * val2;
+        // Check for overflow. If val2 is non-zero, then total/val2 should equal val1.
+        // If total/val2 is not val1, then total has overflowed.
+        // This check is sufficient because val2 is int, so it's not large enough
+        // to cause multiple wraps that could make the check pass.
+        // The specific Long.MIN_VALUE * -1 case is handled above.
         if (total / val2 != val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
