diff --git a/tmp/fb61c13a-39fe-4938-98e5-813af3ce49d2_buggy.java b/tmp/1ebfc2c6-c32f-4db4-becb-b3ee65c4cfcb_fixed.java
index 6b160ef..c78821c 100644
--- a/tmp/fb61c13a-39fe-4938-98e5-813af3ce49d2_buggy.java
+++ b/tmp/1ebfc2c6-c32f-4db4-becb-b3ee65c4cfcb_fixed.java
@@ -1,68 +1,77 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      * 
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
             int signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
             signatureLength = in.read(dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
             signatureLength = in.read(tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
             // COMPRESS-117 - improve auto-recognition
+            // This block tries to instantiate a TarArchiveInputStream from the header
+            // and check if it can find an entry. If it can, it's considered a TAR.
+            // The original bug was that it would return a TarArchiveInputStream even if
+            // getNextEntry() returned null, implying no valid entry was found, which
+            // is incorrect for autodetection.
             try {
                 TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
+                // Only return if an actual entry is found. If getNextEntry() returns null,
+                // it means no valid entry was found (e.g., end of archive or invalid header without entries).
+                // In such cases, it should not be identified as a TAR archive.
+                if (tais.getNextEntry() != null) {
                     return new TarArchiveInputStream(in);
+                }
             } catch (Exception e) { // NOPMD
                 // can generate IllegalArgumentException as well as IOException
                 // autodetection, simply not a TAR
-                // ignored
+                // ignored, means it's not a TAR
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
