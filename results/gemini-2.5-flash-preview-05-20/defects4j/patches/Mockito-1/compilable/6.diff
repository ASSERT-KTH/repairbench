diff --git a/tmp/bc45384a-a935-4f8e-8a9a-147d34afb6bd_buggy.java b/tmp/c613f293-9cbc-4622-bc3e-cd61f9731003_fixed.java
index 1c875ad..3832a72 100644
--- a/tmp/bc45384a-a935-4f8e-8a9a-147d34afb6bd_buggy.java
+++ b/tmp/c613f293-9cbc-4622-bc3e-cd61f9731003_fixed.java
@@ -1,31 +1,44 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
+            
+            // Ensure the matcher is a CapturesArguments instance and that there's a corresponding
+            // raw argument at the current position to avoid ArrayIndexOutOfBoundsException.
+            // This also implies that if the number of matchers exceeds the number of actual arguments,
+            // we won't try to access non-existent arguments.
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+                Object currentArgument = invocation.getRawArguments()[position];
+
+                // Determine if the method is a varargs method AND if the current argument being processed
+                // is the vararg array (which is always the last argument in a varargs method's raw arguments).
+                boolean isCurrentArgumentVarargArrayPosition = invocation.getMethod().isVarArgs() && 
+                                                               position == invocation.getRawArguments().length - 1;
+                
+                // Determine if the current matcher is specifically a vararg matcher (e.g., AnyVararg).
+                // This assumes AnyVararg is the primary matcher designed to capture elements of a vararg array.
+                boolean isMatcherForVarargElements = m instanceof org.mockito.internal.matchers.AnyVararg;
+
+                if (isCurrentArgumentVarargArrayPosition && isMatcherForVarargElements) {
+                    // If it's the vararg array and the matcher is for vararg elements,
+                    // we need to capture each element from the array.
+                    if (currentArgument != null && currentArgument.getClass().isArray()) {
+                        for (int i = 0; i < Array.getLength(currentArgument); i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(currentArgument, i));
+                        }
+                    }
+                    // Since we've processed all elements of the vararg array (or handled a null/empty vararg array),
+                    // and the vararg is always the last argument, there's no need to process further matchers.
+                    return; 
+                } else {
+                    // This branch handles:
+                    // 1. Regular arguments (not a vararg method, or not the vararg position).
+                    // 2. Vararg method, but current position is not the vararg array position (for fixed arguments before vararg).
+                    // 3. Vararg method, current position IS vararg array position, but the matcher is NOT a vararg-specific matcher
+                    //    (e.g., an `anyObject()` or `eq(null)` used to match the vararg array itself, not its contents).
+                    // In these cases, we capture the argument as a single object.
+                    // Using `invocation.getArgumentAt` is generally more robust for type handling.
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
