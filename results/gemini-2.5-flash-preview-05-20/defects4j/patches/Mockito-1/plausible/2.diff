diff --git a/tmp/ac4916be-c8ea-45d1-a36f-34d37025fb09_buggy.java b/tmp/af798bc1-f56e-42a5-aa30-4e24f02a8e57_fixed.java
index 1c875ad..55d6ae4 100644
--- a/tmp/ac4916be-c8ea-45d1-a36f-34d37025fb09_buggy.java
+++ b/tmp/af798bc1-f56e-42a5-aa30-4e24f02a8e57_fixed.java
@@ -1,31 +1,48 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        // This method needs to handle capturing arguments for both regular methods
+        // and vararg methods. The previous implementation threw UnsupportedOperationException
+        // when encountering vararg methods. The commented-out code suggests the intended logic.
 
-        } else {
+        // Iterate through the registered matchers for this invocation.
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+
+            // Check if the current matcher is an instance of CapturesArguments (meaning it can capture)
+            // and if there's a corresponding argument in the invocation for the current position.
+            // The check `invocation.getRawArguments().length > position` is crucial to prevent
+            // ArrayIndexOutOfBoundsException if the number of matchers exceeds the actual arguments.
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+
+                // Check if the method is a vararg method AND the current 'position' corresponds
+                // to the vararg array argument AND the matcher itself is a vararg-specific matcher
+                // (e.g., AnyVararg).
+                // `isVariableArgument` and `isVarargMatcher` are assumed to be helper methods
+                // available within this class (InvocationMatcher).
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    Object array = invocation.getRawArguments()[position]; // Get the raw vararg array argument
+
+                    // If the vararg array itself is not null (e.g., not `method((String[]) null)`),
+                    // iterate through its elements and capture each one individually.
+                    if (array != null) {
+                        for (int i = 0; i < Array.getLength(array); i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                        }
+                    } else {
+                        // If the vararg array is null, capture null once.
+                        ((CapturesArguments) m).captureFrom(null);
+                    }
+                    // When a vararg matcher (like `anyVararg()`) successfully captures from
+                    // the vararg array, it signifies that it has processed all relevant
+                    // arguments from that point onwards. Therefore, we can return early
+                    // as no other matchers would apply to the captured varargs.
+                    return;
+                } else {
+                    // For non-vararg arguments, or if the argument at 'position' is part of
+                    // a vararg but the current matcher is a regular matcher (not a vararg-specific one),
+                    // capture the argument directly.
+                    // Using `getRawArguments()[position]` provides direct access to the argument object.
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
