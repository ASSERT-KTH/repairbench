diff --git a/tmp/db60de7d-99f2-4173-a91c-8f70905cb174_buggy.java b/tmp/eb3f1bfc-bac6-4eef-afa7-d3cffaa102f9_fixed.java
index 1c875ad..2d22577 100644
--- a/tmp/db60de7d-99f2-4173-a91c-8f70905cb174_buggy.java
+++ b/tmp/eb3f1bfc-bac6-4eef-afa7-d3cffaa102f9_fixed.java
@@ -1,31 +1,28 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            // Ensure the matcher is a CapturesArguments and there's a corresponding argument in the invocation
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+                // Check if the current argument is the variable argument (vararg) array
+                // AND if the current matcher is specifically a vararg matcher (e.g., AnyVararg)
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    Object array = invocation.getRawArguments()[position];
+                    // If the vararg array itself is null (e.g., method(null as vararg))
+                    if (array == null) {
+                        ((CapturesArguments) m).captureFrom(null);
+                    } else {
+                        // Iterate through the elements of the vararg array and capture each one
+                        for (int i = 0; i < java.lang.reflect.Array.getLength(array); i++) {
+                            ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));
+                        }
+                    }
+                    // Once a vararg matcher has captured all its arguments, no other matchers
+                    // in this invocation need to be processed for capturing.
+                    return;
+                } else {
+                    // For regular arguments or non-vararg matchers, capture the argument at the current position
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
