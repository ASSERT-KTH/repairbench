diff --git a/tmp/dc140619-3caa-4027-82f0-6a70d68472b6_buggy.java b/tmp/2357ae09-b487-4d51-9f22-429abb21fdf5_fixed.java
index 1c875ad..66bc5ad 100644
--- a/tmp/dc140619-3caa-4027-82f0-6a70d68472b6_buggy.java
+++ b/tmp/2357ae09-b487-4d51-9f22-429abb21fdf5_fixed.java
@@ -1,31 +1,39 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        // The original code threw an UnsupportedOperationException when dealing with varargs.
+        // The commented-out section in the original code provides the intended logic
+        // for handling both regular arguments and vararg arguments for argument capturing.
+        // This fix replaces the problematic 'if/else' structure and the exception
+        // with the more comprehensive logic from the commented-out section.
+        // It's assumed that `isVariableArgument` and `isVarargMatcher` helper methods
+        // are available and correctly implemented within the class context.
 
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+
+            // Check if the current matcher is an argument captor and if there's
+            // a corresponding argument in the invocation at this position.
+            // invocation.getRawArguments().length > position prevents ArrayIndexOutOfBoundsException
+            // if there are more matchers than actual arguments.
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+                // If the method argument at 'position' is the variable argument (vararg array itself)
+                // AND the matcher is specifically designed to capture varargs (e.g., AnyVararg).
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    Object varargArray = invocation.getRawArguments()[position];
+
+                    // For varargs, iterate through each element of the array and capture them individually.
+                    // Array.getLength and Array.get are used to handle potential primitive arrays as well.
+                    for (int i = 0; i < java.lang.reflect.Array.getLength(varargArray); i++) {
+                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargArray, i));
+                    }
+                    // According to the original comment, once all varargs are captured by a vararg matcher,
+                    // it does not make sense to process other matchers, so we return early.
+                    return;
+                } else {
+                    // For regular arguments, or for a vararg argument where the matcher is NOT
+                    // a specific vararg matcher (i.e., it's a regular matcher for the vararg array itself),
+                    // capture the argument directly.
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
