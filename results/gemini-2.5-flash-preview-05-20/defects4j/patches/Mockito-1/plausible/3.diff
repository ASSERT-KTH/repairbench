diff --git a/tmp/40648f10-cc31-491d-912b-302e100ee1f9_buggy.java b/tmp/e7d48ed4-81cc-424e-bf91-14560abe1396_fixed.java
index 1c875ad..62d08aa 100644
--- a/tmp/40648f10-cc31-491d-912b-302e100ee1f9_buggy.java
+++ b/tmp/e7d48ed4-81cc-424e-bf91-14560abe1396_fixed.java
@@ -1,31 +1,30 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+                // This condition checks if the argument at 'position' is a vararg array
+                // and if the current matcher is specifically designed to capture varargs.
+                // The methods `isVariableArgument` and `isVarargMatcher` are assumed to be
+                // private helper methods existing within this class (InvocationMatcher).
+                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    Object array = invocation.getRawArguments()[position];
+                    // Defensive null check for the vararg array itself.
+                    // A vararg method called with `null` for the vararg argument will pass a null array.
+                    if (array != null) {
+                        for (int i = 0; i < java.lang.reflect.Array.getLength(array); i++) {
+                            ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));
+                        }
+                    }
+                    // Since all elements of the vararg array have been captured by this matcher,
+                    // there's no need to process further matchers for this invocation.
+                    // This implies that a single vararg matcher typically consumes all remaining arguments
+                    // if it's placed at the vararg position.
+                    return;
+                } else {
+                    // For regular (non-vararg) arguments, or if the matcher is not a vararg-specific matcher,
+                    // capture the argument at the current position directly.
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
