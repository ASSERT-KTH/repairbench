diff --git a/tmp/86bba875-24ca-4c7f-aaba-dc74cfa8403d_buggy.java b/tmp/146453c3-22a1-461b-aa7d-f86151d0a0b0_fixed.java
index 1c875ad..e289138 100644
--- a/tmp/86bba875-24ca-4c7f-aaba-dc74cfa8403d_buggy.java
+++ b/tmp/146453c3-22a1-461b-aa7d-f86151d0a0b0_fixed.java
@@ -1,31 +1,44 @@
+import java.lang.reflect.Array;
+
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        // The original implementation threw UnsupportedOperationException for vararg methods.
+        // The commented-out code below provides a more complete and correct implementation
+        // for capturing arguments, including handling of varargs.
+        // This fix replaces the incomplete logic with the proposed full implementation.
 
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
+            // Check if the current matcher is an argument captor
+            // and if there are enough raw arguments in the invocation for this position.
+            // The condition 'invocation.getRawArguments().length > position' ensures we don't
+            // try to access an argument that doesn't exist (e.g., if matchers count > actual args count).
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+                // Check if the current argument position corresponds to the method's vararg array
+                // AND if the matcher itself is specifically designed to handle varargs (like AnyVararg).
+                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    // If it's a vararg, the argument at this position is the vararg array itself.
+                    Object array = invocation.getRawArguments()[position];
+                    
+                    // Handle the case where the vararg array itself is null (e.g., method(null))
+                    if (array != null) {
+                        // Iterate through the elements of the vararg array and capture each one.
+                        for (int i = 0; i < Array.getLength(array); i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(array, i));
                         }
+                    } else {
+                        // If the vararg array is null, capture null as a single argument.
+                        ((CapturesArguments) m).captureFrom(null);
                     }
                     
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+                    // Once all varargs elements have been captured by a vararg-specific matcher,
+                    // we can stop processing further matchers, as it's typically a 'catch-all' scenario.
+                    return;
+                } else {
+                    // For non-vararg arguments, or vararg arguments matched by non-vararg specific captors
+                    // (e.g., a generic ArgumentCaptor capturing the vararg array itself),
+                    // capture the raw argument directly.
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+                }
+            }
+        }
     }
\ No newline at end of file
