diff --git a/tmp/69e0239f-bd3e-4b79-b032-c13654c7b949_buggy.java b/tmp/0336618a-5f4e-48cb-9afe-d77a626c792a_fixed.java
index 1c875ad..b4209cf 100644
--- a/tmp/69e0239f-bd3e-4b79-b032-c13654c7b949_buggy.java
+++ b/tmp/0336618a-5f4e-48cb-9afe-d77a626c792a_fixed.java
@@ -1,31 +1,28 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        // This method needs to handle capturing arguments for both
+        // regular methods and vararg methods.
+        // For vararg methods, the 'matchers' list might correspond to
+        // a flattened view of the arguments (fixed args + vararg array elements),
+        // while invocation.getRawArguments() contains the vararg array itself
+        // as the last element.
+
+        // The helper method `getArgumentsToMatch` (presumably present in this class)
+        // provides a flattened list of arguments that aligns with how matchers are
+        // typically structured for matching, including handling varargs.
+        // This approach avoids the need for separate vararg handling logic and
+        // the UnsupportedOperationException.
+        List<Object> actualArgs = getArgumentsToMatch(invocation);
 
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
+            // Check if the current matcher is designed to capture arguments
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                // Ensure that there is an actual argument corresponding to this matcher position
+                // This handles cases where matchers might outnumber the actual arguments (e.g., if
+                // a verification expects more arguments than were supplied in the invocation).
+                if (position < actualArgs.size()) {
+                    ((CapturesArguments) m).captureFrom(actualArgs.get(position));
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
