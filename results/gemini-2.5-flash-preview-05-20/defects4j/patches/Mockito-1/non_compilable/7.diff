diff --git a/tmp/b9350e56-28a5-42c7-8a1e-256ef623fc75_buggy.java b/tmp/f557ccf7-3491-472e-afe8-7d7d944a2408_fixed.java
index 1c875ad..208ca52 100644
--- a/tmp/b9350e56-28a5-42c7-8a1e-256ef623fc75_buggy.java
+++ b/tmp/f557ccf7-3491-472e-afe8-7d7d944a2408_fixed.java
@@ -1,31 +1,103 @@
+import org.mockito.internal.matchers.AnyVararg;
+import org.mockito.internal.invocation.Invocation;
+import org.mockito.ArgumentMatcher;
+import org.mockito.Matcher;
+import java.lang.reflect.Array;
+import java.util.List;
+
+// Note: This class (InvocationMatcher) context is assumed.
+// 'matchers' field and 'isVariableArgument', 'isVarargMatcher' helper methods (or their logic) are assumed/provided.
+public class InvocationMatcher {
+
+    private final List<Matcher> matchers; // Assumed to be a field in the class
+
+    public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {
+        this.matchers = matchers;
+        // Other constructor logic if any
+    }
+
+    // This method is provided to be fixed
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
+
             if (m instanceof CapturesArguments) {
+                // Determine if this matcher is for the vararg argument slot
+                boolean isVarargPosition = invocation.getMethod().isVarArgs()
+                                        && position == invocation.getMethod().getParameterTypes().length - 1;
+
+                // Determine if this matcher is an AnyVararg matcher (or similar vararg-specific matcher)
+                // This checks for the specific matcher that captures all vararg elements.
+                boolean isMatcherForVararg = (m instanceof AnyVararg); // This typically comes from AnyVararg.ANY_VARARG
+
+                if (isVarargPosition && isMatcherForVararg) {
+                    Object varargArray = null;
+
+                    // When a vararg method is invoked, the actual arguments (rawArguments) might not
+                    // contain an entry at the logical vararg position if the vararg array is empty.
+                    // Example: method(Object... args) called as method().
+                    //   invocation.getRawArguments().length would be 0.
+                    //   logical vararg position would be 0 (from getParameterTypes().length - 1).
+                    // Example: method(Object... args) called as method("a", "b").
+                    //   invocation.getRawArguments() would be {"a", "b"}. length is 2.
+                    //   logical vararg position would be 0.
+                    // Example: method(String s, Object... args) called as method("x", "y").
+                    //   invocation.getRawArguments() would be {"x", {"y"}}. length is 2. (Note: {y} is the vararg array)
+                    //   logical vararg position would be 1.
+
+                    if (invocation.getRawArguments().length > position) {
+                        // The actual arguments contain an element at this position,
+                        // which should be the vararg array (or null if the vararg array itself was passed as null).
+                        varargArray = invocation.getRawArguments()[position];
+                    } else if (invocation.getRawArguments().length == position && invocation.getMethod().isVarArgs()) {
+                        // This specific case handles invocation like method(Object... args) called as method(),
+                        // where rawArguments.length is 0, but the logical vararg position is also 0.
+                        // In this scenario, the vararg array is conceptually an empty array of the correct component type.
+                        Class<?> componentType = invocation.getMethod().getParameterTypes()[position].getComponentType();
+                        varargArray = Array.newInstance(componentType, 0);
+                    }
+                    // Note: If invocation.getRawArguments().length < position for a vararg matcher,
+                    // it implies a mismatch in arguments vs matchers before the vararg, which Mockito
+                    // would handle as an argument mismatch error elsewhere.
+
+                    if (varargArray == null) {
+                        // If the vararg array itself was passed as null (e.g., foo.varargs((String[])null))
+                        ((CapturesArguments) m).captureFrom(null);
+                    } else {
+                        // Iterate through the elements of the vararg array and capture each one.
+                        // Array.getLength will throw IllegalArgumentException if varargArray is not an array,
+                        // but getRawArguments()[position] for a vararg method should always be an array or null.
+                        for (int i = 0; i < Array.getLength(varargArray); i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));
+                        }
+                    }
+                    // Since a vararg matcher was found and processed, it has captured all relevant
+                    // arguments from this point. No need to process other matchers.
+                    return;
+                } else {
+                    // This branch handles:
+                    // 1. Methods that are not varargs.
+                    // 2. Vararg methods, but the current matcher is NOT a vararg-specific matcher (e.g., `eq("fixedArg")`).
+                    // 3. Vararg methods, but the current argument position is NOT the vararg argument position.
+
+                    // Ensure that an argument exists at this position in the actual invocation
+                    if (invocation.getRawArguments().length > position) {
                         ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                     }
+                    // If invocation.getRawArguments().length <= position, it means there are more matchers
+                    // than actual arguments for a non-vararg or non-vararg-special-case argument.
+                    // In Mockito, this usually leads to an argument mismatch error, but for argument capturing,
+                    // we simply don't capture if the argument isn't present in the invocation.
+                }
+            }
+        }
     }
 }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+// Assuming these interfaces/classes exist as part of Mockito's internal API
+interface CapturesArguments {
+    void captureFrom(Object argument);
 }
+
+// Assuming Matcher is from org.mockito.Matcher
+// Assuming Invocation is from org.mockito.internal.invocation.Invocation
\ No newline at end of file
