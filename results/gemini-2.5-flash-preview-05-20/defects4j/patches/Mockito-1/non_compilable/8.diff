diff --git a/tmp/1549b570-af9c-4c62-b11d-34014f3ea2f0_buggy.java b/tmp/559ada69-50cb-4c90-a14e-3260d1387b8c_fixed.java
index 1c875ad..edf64ec 100644
--- a/tmp/1549b570-af9c-4c62-b11d-34014f3ea2f0_buggy.java
+++ b/tmp/559ada69-50cb-4c90-a14e-3260d1387b8c_fixed.java
@@ -1,31 +1,59 @@
+import org.mockito.internal.matchers.AnyVararg;
+import org.mockito.internal.matchers.CapturesArguments;
+import org.mockito.invocation.Invocation;
+import org.mockito.Matcher;
+
+import java.lang.reflect.Array;
+import java.util.List; // Assuming 'matchers' is a List<Matcher>
+
+public class InvocationMatcher { // Assuming this is the class containing the method
+    private final List<Matcher> matchers; // Assuming 'matchers' field exists
+
+    // Constructor placeholder, actual constructor would be more complex
+    public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {
+        this.matchers = matchers;
+    }
+
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Object[] rawArguments = invocation.getRawArguments();
         
-        } else {
+        // Determine if the method is a vararg method
+        boolean methodIsVararg = invocation.getMethod().isVarArgs();
+        
+        // The index of the last formal parameter, which would be the vararg array if it's a vararg method
+        int lastFormalParameterIndex = -1;
+        if (methodIsVararg) {
+            lastFormalParameterIndex = invocation.getMethod().getParameterTypes().length - 1;
+        }
+
+        // Iterate through the matchers to capture arguments
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
+
+            // Only process if the matcher is an argument captor
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
-            }
-        }
+                CapturesArguments captor = (CapturesArguments) m;
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+                // Special handling for the AnyVararg matcher when used with a vararg method
+                // It captures all remaining arguments from its position onwards.
+                if (methodIsVararg && position == lastFormalParameterIndex && m == AnyVararg.ANY_VARARG) {
+                    // Capture all actual arguments from this 'position' until the end of the raw arguments list
+                    for (int i = position; i < rawArguments.length; i++) {
+                        // Use invocation.getArgumentAt for robustness (handling primitives, boxing, etc.)
+                        captor.captureFrom(invocation.getArgumentAt(i, Object.class));
+                    }
+                    // After AnyVararg processes, no further matchers need to be processed for argument capturing
+                    return;
+                } else {
+                    // For regular matchers (not AnyVararg, or AnyVararg not at the vararg position),
+                    // and for non-vararg methods, capture the argument at the current 'position'.
+                    // Ensure there's an actual argument at this position to prevent IndexOutOfBoundsException.
+                    if (rawArguments.length > position) {
+                        // Use invocation.getArgumentAt for robustness (handling primitives, boxing, etc.)
+                        captor.captureFrom(invocation.getArgumentAt(position, Object.class));
+                    }
+                }
+            }
+        }
+    }
 }
\ No newline at end of file
