diff --git a/tmp/419843e4-2bb1-41d8-ae75-ab54e4241c13_buggy.java b/tmp/b367a820-fc44-40c1-a4df-af458e7b9854_fixed.java
index 388771b..53cd51e 100644
--- a/tmp/419843e4-2bb1-41d8-ae75-ab54e4241c13_buggy.java
+++ b/tmp/b367a820-fc44-40c1-a4df-af458e7b9854_fixed.java
@@ -1,37 +1,59 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
+
         TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
-            for (int index = start; index <= end; index++) {
+
+        // FIX: Reset the min/max Y values because they are copied from the original
+        // series but need to be re-calculated based on the subset of data added.
+        // The add() method relies on these being initialized appropriately (e.g., to
+        // positive/negative infinity) to correctly track the new min/max values.
+        copy.minY = Double.POSITIVE_INFINITY;
+        copy.maxY = Double.NEGATIVE_INFINITY;
+        // If there are similar fields for min/max X values, they should also be reset here.
+        // For example:
+        // copy.minX = Double.POSITIVE_INFINITY;
+        // copy.maxX = Double.NEGATIVE_INFINITY;
+
+
+        copy.data = new java.util.ArrayList(); // Clear the data list of the copied object
+
+        // Only proceed if there is data in the original series and the start index is valid
+        if (this.data.size() > 0 && start < this.data.size()) {
+            // Adjust the 'end' index to not exceed the actual bounds of the data
+            // This prevents IndexOutOfBoundsException if 'end' is greater than (data.size() - 1)
+            int adjustedEnd = Math.min(end, this.data.size() - 1);
+
+            for (int index = start; index <= adjustedEnd; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
+                    // This add() method will now correctly update the min/max Y
+                    // values for the 'copy' object from scratch due to the reset above.
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
-                    e.printStackTrace();
+                    e.printStackTrace(); // Log the error, consistent with original behavior.
                 }
             }
         }
         return copy;
     }
\ No newline at end of file
