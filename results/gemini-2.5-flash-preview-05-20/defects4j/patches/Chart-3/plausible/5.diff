diff --git a/tmp/22b48855-8700-494c-97e9-5100ccc5e4ae_buggy.java b/tmp/0168ea57-ee95-4498-8f41-e2faf0f14f34_fixed.java
index 388771b..e665d51 100644
--- a/tmp/22b48855-8700-494c-97e9-5100ccc5e4ae_buggy.java
+++ b/tmp/0168ea57-ee95-4498-8f41-e2faf0f14f34_fixed.java
@@ -1,37 +1,51 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
+
+        // BUG FIX: The min/max Y values are copied from the original series
+        // by super.clone(), but they should be recalculated based only on
+        // the subset of data copied. Resetting them to NaN (or initial
+        // empty state) ensures the add() method correctly updates them.
+        // In JFreeChart's TimeSeries, minY and maxY are initialized to Double.NaN.
+        // Protected access is assumed for these fields within the class hierarchy.
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
+
         if (this.data.size() > 0) {
+            // Note: The original code relies on IndexOutOfBoundsException if 'end'
+            // exceeds this.data.size() - 1. For this fix, we maintain that behavior.
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
+                    // The add method will update copy.minY and copy.maxY based on 'clone'
+                    // and the fact that copy.minY/maxY were reset to NaN.
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
