diff --git a/tmp/5803373b-cde8-4feb-bbf3-437d2f47d3a4_buggy.java b/tmp/4f3390f3-0328-4ce9-ac2c-496ff09f6bf7_fixed.java
index 388771b..cd6ca7f 100644
--- a/tmp/5803373b-cde8-4feb-bbf3-437d2f47d3a4_buggy.java
+++ b/tmp/4f3390f3-0328-4ce9-ac2c-496ff09f6bf7_fixed.java
@@ -1,37 +1,64 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
+
+        // FIX: Reset minY and maxY (and potentially other aggregate statistics
+        // like minX, maxX, cached range/domain objects) that were shallow-copied
+        // from the original series. They should reflect the new, empty series
+        // state before new data items are added.
+        // Assuming TimeSeries uses Double.NaN as initial values for an empty series.
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
+        // Depending on TimeSeries class structure, similar resets might be needed for:
+        // copy.minX = Double.NaN;
+        // copy.maxX = Double.NaN;
+        // copy.range = null;
+        // copy.domain = null;
+
+
         if (this.data.size() > 0) {
-            for (int index = start; index <= end; index++) {
+            // Ensure 'end' index does not exceed the actual bounds of the series.
+            // If 'end' is greater than or equal to this.data.size(), get(index)
+            // would throw IndexOutOfBoundsException. This clamps it to the last valid index.
+            int seriesLastIndex = this.data.size() - 1;
+            int effectiveEnd = Math.min(end, seriesLastIndex);
+
+            // If start is beyond the series last index, no data will be copied.
+            // The loop condition handles this implicitly, as 'index' won't be <= effectiveEnd.
+            if (start <= effectiveEnd) { // Only iterate if there's a valid range to copy
+                for (int index = start; index <= effectiveEnd; index++) {
                     TimeSeriesDataItem item
                             = (TimeSeriesDataItem) this.data.get(index);
                     TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                     try {
                         copy.add(clone);
                     }
                     catch (SeriesException e) {
+                        // The original code prints stack trace. For production,
+                        // it might be better to rethrow or log more formally.
                         e.printStackTrace();
                     }
                 }
             }
+        }
         return copy;
     }
