diff --git a/tmp/fb3abd60-6ae9-4688-97ee-c383b7e9ea7d_buggy.java b/tmp/514fca25-ce53-449f-95dc-d0240e001a4b_fixed.java
index 388771b..3e5e328 100644
--- a/tmp/fb3abd60-6ae9-4688-97ee-c383b7e9ea7d_buggy.java
+++ b/tmp/514fca25-ce53-449f-95dc-d0240e001a4b_fixed.java
@@ -1,37 +1,65 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
+     * @throws IllegalArgumentException if {@code start} or {@code end} are
+     *                                  out of bounds or {@code end} < {@code start}.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
-        TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
+        // Ensure that the requested range is within the bounds of the current data.
+        // If the series is empty, and start=0, end=-1 (empty range), this condition
+        // should not prevent copying an empty series. However, the existing logic
+        // for handling start/end implicitly relies on this.
+        // If data.size() is 0, then any start>=0, end>=0 will mean get(index) is out of bounds.
+        // For a new TimeSeries, the loop will simply not run if this.data.size() is 0.
+        // Thus, we check if the requested end index is out of bounds *relative to the existing data*.
+        if (this.data.size() > 0 && end >= this.data.size()) {
+            throw new IllegalArgumentException("The 'end' index (" + end
+                    + ") is out of bounds for a series with " + this.data.size()
+                    + " items.");
+        }
+
+        // The original code used super.clone() which performs a shallow copy,
+        // including copying the min/max Y values from the original series.
+        // While copy.data was reset, the min/max Y fields were not, and the
+        // add method would only expand the range, not shrink it.
+        // To fix this, we create a brand new TimeSeries object. This ensures
+        // that its internal min/max Y bounds are correctly initialized (e.g., to NaN)
+        // and will be re-calculated from scratch as items are added.
+        // Assuming TimeSeries has a constructor that takes the key (name) and
+        // that this constructor initializes internal fields like minY/maxY correctly.
+        TimeSeries copy = new TimeSeries(getKey());
+
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
-                    copy.add(clone);
+                    copy.add(clone); // This should now correctly update min/max Y for the new series
                 }
                 catch (SeriesException e) {
+                    // This catch block usually indicates a duplicate time period,
+                    // which shouldn't happen when copying unique items.
+                    // printStackTrace() is usually not good practice in production code,
+                    // but we maintain the original behavior if it's part of the design.
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
\ No newline at end of file
