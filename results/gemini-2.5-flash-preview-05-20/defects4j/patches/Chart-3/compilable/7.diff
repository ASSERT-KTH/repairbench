diff --git a/tmp/6125a512-2bc3-4296-9769-93af9f84aa21_buggy.java b/tmp/983b5fc5-3630-455b-a11c-87221216aa04_fixed.java
index 388771b..7840c73 100644
--- a/tmp/6125a512-2bc3-4296-9769-93af9f84aa21_buggy.java
+++ b/tmp/983b5fc5-3630-455b-a11c-87221216aa04_fixed.java
@@ -1,37 +1,64 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
+
+        // Validate that 'end' is within the bounds of the actual data.
+        // If the series is not empty, 'end' must be less than the size.
+        // This prevents IndexOutOfBoundsException from this.data.get(index) later.
+        if (this.data.size() > 0 && end >= this.data.size()) {
+            throw new IllegalArgumentException("Index 'end' out of bounds.");
+        }
+
         TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
+        // BUG FIX: The original code only reinitializes 'copy.data' to a new ArrayList,
+        // but it does NOT reset the calculated min/max Y values (and potentially X values)
+        // that were copied via 'super.clone()'. These min/max values should be
+        // re-calculated based *only* on the subset of data being copied.
+        // A common pattern in JFreeChart's TimeSeries class (or similar data series classes)
+        // is to have a 'clear()' method that not only clears the data list but also
+        // resets all internal calculated range (min/max) values to their initial sentinel states
+        // (e.g., Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY).
+        // This ensures that the 'add()' method, when called subsequently for the subset data,
+        // correctly establishes the new min/max range from scratch.
+        copy.clear();
+
+        // The original code included a check 'if (this.data.size() > 0)'.
+        // This guard is important to prevent IndexOutOfBoundsException if the original
+        // series is empty, but 'start' and 'end' indices are non-negative (e.g., start=0, end=0).
+        // In such a case, the loop would try to access this.data.get(0) on an empty list.
+        // If this.data.size() is 0, the loop below correctly does not execute.
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
+                    // This catch block swallows the exception and only prints stack trace.
+                    // Depending on desired behavior, it might need to re-throw or handle.
+                    // Keeping original behavior as problem is about min/max Y.
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
\ No newline at end of file
