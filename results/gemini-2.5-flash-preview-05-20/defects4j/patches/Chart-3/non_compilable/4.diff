diff --git a/tmp/6a083c5b-f349-415b-941d-4a697483bc5c_buggy.java b/tmp/5bbe6f61-14e2-4d67-8912-ae537de2d526_fixed.java
index 388771b..166b767 100644
--- a/tmp/6a083c5b-f349-415b-941d-4a697483bc5c_buggy.java
+++ b/tmp/5bbe6f61-14e2-4d67-8912-ae537de2d526_fixed.java
@@ -1,37 +1,59 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
+        // Ensure 'end' index is within the bounds of the current data.
+        if (end >= this.data.size()) {
+            throw new IllegalArgumentException("The 'end' index specified ("
+                    + end + ") is greater than or equal to the number of items in the series ("
+                    + this.data.size() + ").");
+        }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
+
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
+
+        // BUG FIX: Reset the min/max X and Y values.
+        // When super.clone() is called, it performs a shallow copy,
+        // which includes the minX, maxX, minY, and maxY values from
+        // the original TimeSeries. For a subset copy, these values
+        // need to be recalculated based on the new data items.
+        // Resetting them to their initial sentinel values ensures that
+        // the add() method correctly updates them for the copied subset.
+        copy.minX = Double.POSITIVE_INFINITY;
+        copy.maxX = Double.NEGATIVE_INFINITY;
+        copy.minY = Double.POSITIVE_INFINITY;
+        copy.maxY = Double.NEGATIVE_INFINITY;
+
+        // The original `if (this.data.size() > 0)` check can be removed
+        // because the preceding bounds checks on `start` and `end` implicitly
+        // handle cases where `this.data.size()` might be 0 or when the range is invalid.
+        // If data.size() is 0, `end >= this.data.size()` will throw an exception for any non-negative `end`.
         for (int index = start; index <= end; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
             }
             catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
-        }
         return copy;
     }
