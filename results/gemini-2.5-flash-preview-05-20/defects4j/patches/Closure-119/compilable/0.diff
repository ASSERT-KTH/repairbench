diff --git a/tmp/ffb06553-ade2-449d-a6b8-86e31a7202a6_buggy.java b/tmp/5ae0f0a5-f202-4d3e-8ef3-ebe038e8dc03_fixed.java
index 6dd359b..9ee3547 100644
--- a/tmp/ffb06553-ade2-449d-a6b8-86e31a7202a6_buggy.java
+++ b/tmp/5ae0f0a5-f202-4d3e-8ef3-ebe038e8dc03_fixed.java
@@ -1,125 +1,151 @@
     public void collect(JSModule module, Scope scope, Node n) {
       Node parent = n.getParent();
 
       String name;
       boolean isSet = false;
       Name.Type type = Name.Type.OTHER;
       boolean isPropAssign = false;
 
       switch (n.getType()) {
         case Token.GETTER_DEF:
         case Token.SETTER_DEF:
         case Token.STRING_KEY:
           // This may be a key in an object literal declaration.
           name = null;
           if (parent != null && parent.isObjectLit()) {
             name = getNameForObjLitKey(n);
           }
           if (name == null) {
             return;
           }
           isSet = true;
           switch (n.getType()) {
             case Token.STRING_KEY:
               type = getValueType(n.getFirstChild());
               break;
             case Token.GETTER_DEF:
               type = Name.Type.GET;
               break;
             case Token.SETTER_DEF:
               type = Name.Type.SET;
               break;
             default:
               throw new IllegalStateException("unexpected:" + n);
           }
           break;
         case Token.NAME:
           // This may be a variable get or set.
           if (parent != null) {
             switch (parent.getType()) {
               case Token.VAR:
                 isSet = true;
                 Node rvalue = n.getFirstChild();
                 type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
                 break;
               case Token.ASSIGN:
                 if (parent.getFirstChild() == n) {
                   isSet = true;
                   type = getValueType(n.getNext());
                 }
                 break;
               case Token.GETPROP:
+                // If n is a NAME, and its parent is GETPROP (e.g., 'e' in 'e.name'),
+                // we don't need to explicitly process 'e' here for global names.
+                // The GETPROP case will handle the qualified name 'e.name'.
+                // If 'e' is a local variable, the GETPROP case will now correctly ignore it.
+                // Therefore, no action is needed here, and we can remove the return;
+                // to allow the general name processing to occur, but it's okay to skip too.
+                // Given the fix below in GETPROP, returning here is also fine
+                // because the qualified name will be handled. Let's keep it to minimize changes.
                 return;
               case Token.FUNCTION:
                 Node gramps = parent.getParent();
                 if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
                   return;
                 }
                 isSet = true;
                 type = Name.Type.FUNCTION;
                 break;
               case Token.INC:
               case Token.DEC:
                 isSet = true;
                 type = Name.Type.OTHER;
                 break;
+              case Token.CATCH: // Add specific handling for CATCH parameter declaration
+                isSet = true;
+                type = Name.Type.OTHER;
+                break;
               default:
                 if (NodeUtil.isAssignmentOp(parent) &&
                     parent.getFirstChild() == n) {
                   isSet = true;
                   type = Name.Type.OTHER;
                 }
             }
           }
           name = n.getString();
           break;
         case Token.GETPROP:
           // This may be a namespaced name get or set.
+          // Check if the base name of this GETPROP is a local variable.
+          // If so, this entire qualified name is not a global name that we track.
+          Node base = n.getFirstChild();
+          if (base.isName() && scope.isDeclared(base.getString(), /* recurse= */ true)) {
+            return;
+          }
+
           if (parent != null) {
             switch (parent.getType()) {
               case Token.ASSIGN:
                 if (parent.getFirstChild() == n) {
                   isSet = true;
                   type = getValueType(n.getNext());
                   isPropAssign = true;
                 }
                 break;
               case Token.INC:
               case Token.DEC:
                 isSet = true;
                 type = Name.Type.OTHER;
                 break;
               case Token.GETPROP:
+                // If this GETPROP is part of a longer qualified name (e.g., 'a.b' in 'a.b.c'),
+                // we only care about the outermost qualified name.
                 return;
               default:
                 if (NodeUtil.isAssignmentOp(parent) &&
                     parent.getFirstChild() == n) {
                   isSet = true;
                   type = Name.Type.OTHER;
                 }
             }
           }
           name = n.getQualifiedName();
           if (name == null) {
             return;
           }
           break;
         default:
           return;
       }
 
       // We are only interested in global names.
+      // 'isGlobalNameReference' checks if the name is not declared in the current scope.
+      // If it's declared in the current scope, it's considered local.
       if (!isGlobalNameReference(name, scope)) {
         return;
       }
 
       if (isSet) {
         if (isGlobalScope(scope)) {
           handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
         } else {
+          // If it's a local set, handle it to track its declaration within the scope.
+          // This is mainly for functions, not general vars.
+          // For catch parameters, they are handled by scope.isDeclared.
           handleSetFromLocal(module, scope, n, parent, name);
         }
       } else {
         handleGet(module, scope, n, parent, name);
       }
     }
\ No newline at end of file
