diff --git a/tmp/9eae2d68-81d9-4a7c-87b9-e3596948d0fd_buggy.java b/tmp/9f6943d5-ff55-494e-976d-84d6f81934df_fixed.java
index 81872ca..905bdb7 100644
--- a/tmp/9eae2d68-81d9-4a7c-87b9-e3596948d0fd_buggy.java
+++ b/tmp/9f6943d5-ff55-494e-976d-84d6f81934df_fixed.java
@@ -1,70 +1,81 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
+        // To work-around some tar implementations that insert a leading NUL
+        // this method returns 0 if it detects a leading NUL since Commons Compress 1.4.
+        // This check is now performed *after* skipping leading spaces,
+        // as a leading NUL can sometimes be preceded by spaces (e.g. {' ', 0}).
+        // Also, check start < end to prevent AIOOBE if the buffer is all spaces.
+        if (start < end && buffer[start] == 0) {
+            return 0L;
+        }
+
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
+        byte trailer = buffer[end - 1]; // Initialize with the last character in the original range
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
-            trailer = buffer[end - 1];
-        }
+            // If 'end' has reached 'start', all remaining content has been trimmed.
+            // Breaking here prevents trying to access buffer[end - 1], which would be buffer[start - 1]
+            // and potentially cause an ArrayIndexOutOfBoundsException.
             if (start == end) {
+                break;
+            }
+            trailer = buffer[end - 1]; // Get the new character at the end for the next iteration.
+        }
+        if (start == end) { // All characters were trimmed, or no valid digits found after trimming.
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, trailer));
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
