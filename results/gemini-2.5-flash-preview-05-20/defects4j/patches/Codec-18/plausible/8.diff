diff --git a/tmp/747be39a-1908-4d6a-8e9c-00330a1c2247_buggy.java b/tmp/6f09497f-4947-4b69-b2bc-af2d47aa0c90_fixed.java
index ae1bc64..c3b83a4 100644
--- a/tmp/747be39a-1908-4d6a-8e9c-00330a1c2247_buggy.java
+++ b/tmp/6f09497f-4947-4b69-b2bc-af2d47aa0c90_fixed.java
@@ -1,42 +1,51 @@
     /**
      * <p>
      * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.
      * </p>
      *
      * <p>
      * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.
      * The comparison is case sensitive.
      * </p>
      *
      * <pre>
      * StringUtils.equals(null, null)   = true
      * StringUtils.equals(null, "abc")  = false
      * StringUtils.equals("abc", null)  = false
      * StringUtils.equals("abc", "abc") = true
      * StringUtils.equals("abc", "ABC") = false
      * </pre>
      *
      * <p>
      * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).
      * </p>
      *
      * @see Object#equals(Object)
      * @param cs1
      *            the first CharSequence, may be <code>null</code>
      * @param cs2
      *            the second CharSequence, may be <code>null</code>
      * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>
      * @since 1.10
      */
     public static boolean equals(final CharSequence cs1, final CharSequence cs2) {
         if (cs1 == cs2) {
             return true;
         }
         if (cs1 == null || cs2 == null) {
             return false;
         }
         if (cs1 instanceof String && cs2 instanceof String) {
             return cs1.equals(cs2);
         }
-        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
+        // Check lengths first for non-String CharSequences.
+        // If lengths differ, they cannot be equal.
+        final int length = cs1.length();
+        if (length != cs2.length()) {
+            return false;
+        }
+        // If lengths are equal, then compare characters for the common length.
+        // The original code passed Math.max(cs1.length(), cs2.length()),
+        // which caused StringIndexOutOfBoundsException if lengths were different.
+        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, length);
     }
\ No newline at end of file
