diff --git a/tmp/6ab97486-f6eb-45c0-991a-50aa78fc4a56_buggy.java b/tmp/24a94b75-6457-4b0c-9536-28533030855c_fixed.java
index c18eb8b..0b11dc7 100644
--- a/tmp/6ab97486-f6eb-45c0-991a-50aa78fc4a56_buggy.java
+++ b/tmp/24a94b75-6457-4b0c-9536-28533030855c_fixed.java
@@ -1,30 +1,58 @@
     /**
      * <p>Compares two CharSequences, returning {@code true} if they represent
      * equal sequences of characters.</p>
      *
      * <p>{@code null}s are handled without exceptions. Two {@code null}
      * references are considered to be equal. The comparison is case sensitive.</p>
      *
      * <pre>
      * StringUtils.equals(null, null)   = true
      * StringUtils.equals(null, "abc")  = false
      * StringUtils.equals("abc", null)  = false
      * StringUtils.equals("abc", "abc") = true
      * StringUtils.equals("abc", "ABC") = false
      * </pre>
      *
      * @see java.lang.CharSequence#equals(Object)
      * @param cs1  the first CharSequence, may be {@code null}
      * @param cs2  the second CharSequence, may be {@code null}
      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
      */
     public static boolean equals(CharSequence cs1, CharSequence cs2) {
         if (cs1 == cs2) {
             return true;
         }
         if (cs1 == null || cs2 == null) {
             return false;
         }
-            return cs1.equals(cs2);
+
+        // At this point, both cs1 and cs2 are non-null and not the same object reference.
+        // The original problem was that cs1.equals(cs2) might not perform
+        // content comparison for different CharSequence implementations.
+        // For example, String.equals(Object) only returns true if the object
+        // is another String, and StringBuilder.equals(Object) performs
+        // only reference equality.
+
+        // If one of the CharSequences is a String, use its contentEquals method,
+        // which correctly compares content with any CharSequence.
+        if (cs1 instanceof String) {
+            return ((String) cs1).contentEquals(cs2);
+        }
+        if (cs2 instanceof String) {
+            // If cs1 is not a String but cs2 is, compare from cs2's perspective.
+            return ((String) cs2).contentEquals(cs1);
+        }
+
+        // If neither is a String (e.g., StringBuilder vs StringBuilder, or
+        // StringBuilder vs CustomCharSequence), perform character-by-character comparison.
+        if (cs1.length() != cs2.length()) {
+            return false;
+        }
+        for (int i = 0; i < cs1.length(); i++) {
+            if (cs1.charAt(i) != cs2.charAt(i)) {
+                return false;
+            }
+        }
+        return true;
     }
\ No newline at end of file
