diff --git a/tmp/e0a73911-25b5-41a3-b441-5e1fca1e0e69_buggy.java b/tmp/b666b23b-b2db-46b5-a636-8beab7bc39b1_fixed.java
index c18eb8b..544b5bf 100644
--- a/tmp/e0a73911-25b5-41a3-b441-5e1fca1e0e69_buggy.java
+++ b/tmp/b666b23b-b2db-46b5-a636-8beab7bc39b1_fixed.java
@@ -1,30 +1,52 @@
     /**
      * <p>Compares two CharSequences, returning {@code true} if they represent
      * equal sequences of characters.</p>
      *
      * <p>{@code null}s are handled without exceptions. Two {@code null}
      * references are considered to be equal. The comparison is case sensitive.</p>
      *
      * <pre>
      * StringUtils.equals(null, null)   = true
      * StringUtils.equals(null, "abc")  = false
      * StringUtils.equals("abc", null)  = false
      * StringUtils.equals("abc", "abc") = true
      * StringUtils.equals("abc", "ABC") = false
      * </pre>
      *
      * @see java.lang.CharSequence#equals(Object)
      * @param cs1  the first CharSequence, may be {@code null}
      * @param cs2  the second CharSequence, may be {@code null}
      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
      */
     public static boolean equals(CharSequence cs1, CharSequence cs2) {
         if (cs1 == cs2) {
             return true;
         }
         if (cs1 == null || cs2 == null) {
             return false;
         }
+
+        // Optimization for String comparison, as String.equals is highly optimized.
+        // It correctly handles comparison of String with String.
+        if (cs1 instanceof String && cs2 instanceof String) {
             return cs1.equals(cs2);
         }
+
+        // Compare CharSequence by character.
+        // This is necessary because String.equals(Object) will return false if the
+        // object is not a String, even if its contents are character-wise identical.
+        // StringBuilder.equals(Object) (and often other CharSequence implementations)
+        // does not compare content and relies on Object.equals, which is reference equality.
+        int length = cs1.length();
+        if (length != cs2.length()) {
+            return false;
+        }
+
+        for (int i = 0; i < length; i++) {
+            if (cs1.charAt(i) != cs2.charAt(i)) {
+                return false;
+            }
+        }
+        return true;
+    }
\ No newline at end of file
