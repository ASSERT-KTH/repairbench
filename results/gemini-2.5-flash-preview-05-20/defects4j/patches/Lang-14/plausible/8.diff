diff --git a/tmp/c49b5c62-8fb3-440e-9b70-e1832a1f2232_buggy.java b/tmp/42ec17c0-3d4b-46c5-b651-65fc6443d470_fixed.java
index c18eb8b..e959ecf 100644
--- a/tmp/c49b5c62-8fb3-440e-9b70-e1832a1f2232_buggy.java
+++ b/tmp/42ec17c0-3d4b-46c5-b651-65fc6443d470_fixed.java
@@ -1,30 +1,49 @@
     /**
      * <p>Compares two CharSequences, returning {@code true} if they represent
      * equal sequences of characters.</p>
      *
      * <p>{@code null}s are handled without exceptions. Two {@code null}
      * references are considered to be equal. The comparison is case sensitive.</p>
      *
      * <pre>
      * StringUtils.equals(null, null)   = true
      * StringUtils.equals(null, "abc")  = false
      * StringUtils.equals("abc", null)  = false
      * StringUtils.equals("abc", "abc") = true
      * StringUtils.equals("abc", "ABC") = false
      * </pre>
      *
      * @see java.lang.CharSequence#equals(Object)
      * @param cs1  the first CharSequence, may be {@code null}
      * @param cs2  the second CharSequence, may be {@code null}
      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
      */
     public static boolean equals(CharSequence cs1, CharSequence cs2) {
         if (cs1 == cs2) {
             return true;
         }
         if (cs1 == null || cs2 == null) {
             return false;
         }
-            return cs1.equals(cs2);
+
+        // Optimization: If one is a String, use its contentEquals method, which handles CharSequence comparison.
+        if (cs1 instanceof String) {
+            return ((String) cs1).contentEquals(cs2);
+        } else if (cs2 instanceof String) {
+            // Symmetrically, if cs2 is a String and cs1 is not, use cs2's contentEquals.
+            return ((String) cs2).contentEquals(cs1);
+        } else {
+            // Fallback for other CharSequence types (e.g., StringBuilder vs StringBuilder, or custom CharSequences)
+            // where contentEquals is not directly available or beneficial.
+            if (cs1.length() != cs2.length()) {
+                return false;
+            }
+            for (int i = 0; i < cs1.length(); i++) {
+                if (cs1.charAt(i) != cs2.charAt(i)) {
+                    return false;
+                }
+            }
+            return true;
+        }
     }
\ No newline at end of file
