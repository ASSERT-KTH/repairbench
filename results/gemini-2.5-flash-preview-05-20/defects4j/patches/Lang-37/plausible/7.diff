diff --git a/tmp/bd50c19c-fdf2-4180-bdd6-b8080dcfcc36_buggy.java b/tmp/c13b6337-52c2-4970-866d-bfa935f1c4be_fixed.java
index d5b1b52..1a04409 100644
--- a/tmp/bd50c19c-fdf2-4180-bdd6-b8080dcfcc36_buggy.java
+++ b/tmp/c13b6337-52c2-4970-866d-bfa935f1c4be_fixed.java
@@ -1,36 +1,41 @@
     /**
      * <p>Adds all the elements of the given arrays into a new array.</p>
      * <p>The new array contains all of the element of <code>array1</code> followed
      * by all of the elements <code>array2</code>. When an array is returned, it is always
      * a new array.</p>
      *
      * <pre>
      * ArrayUtils.addAll(null, null)     = null
      * ArrayUtils.addAll(array1, null)   = cloned copy of array1
      * ArrayUtils.addAll(null, array2)   = cloned copy of array2
      * ArrayUtils.addAll([], [])         = []
      * ArrayUtils.addAll([null], [null]) = [null, null]
      * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
      * </pre>
      *
      * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
      * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
      * @return The new array, <code>null</code> if both arrays are <code>null</code>.
      *      The type of the new array is the type of the first array,
      *      unless the first array is null, in which case the type is the same as the second array.
      * @since 2.1
      */
     @SuppressWarnings("unchecked")
     public static <T> T[] addAll(T[] array1, T... array2) {
         if (array1 == null) {
             return clone(array2);
         } else if (array2 == null) {
             return clone(array1);
         }
         final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+        T[] joinedArray = (T[]) java.lang.reflect.Array.newInstance(type1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        try {
             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+        } catch (ArrayStoreException e) {
+            // Re-throw ArrayStoreException as IllegalArgumentException as per test case expectation.
+            // This indicates array2 contains elements that cannot be stored in an array of type1.
+            throw new IllegalArgumentException("Cannot store elements of array2 into array of type " + type1.getName(), e);
+        }
         return joinedArray;
     }
\ No newline at end of file
