diff --git a/tmp/e0e6524a-fe63-4037-b021-debc38e74695_buggy.java b/tmp/22033d53-74c4-47c6-9819-adcce62ea70c_fixed.java
index d5b1b52..2454484 100644
--- a/tmp/e0e6524a-fe63-4037-b021-debc38e74695_buggy.java
+++ b/tmp/22033d53-74c4-47c6-9819-adcce62ea70c_fixed.java
@@ -1,36 +1,61 @@
+import java.lang.reflect.Array; // Assuming this import is available or Array.class is implicitly in scope
+
+// The clone method is assumed to be available elsewhere in ArrayUtils
+// For demonstration, a placeholder for clone() is included if it were not part of the snippet.
+// public static <T> T[] clone(T[] array) {
+//     if (array == null) {
+//         return null;
+//     }
+//     return array.getClass().cast(Array.newInstance(array.getClass().getComponentType(), array.length));
+// }
+
     /**
      * <p>Adds all the elements of the given arrays into a new array.</p>
      * <p>The new array contains all of the element of <code>array1</code> followed
      * by all of the elements <code>array2</code>. When an array is returned, it is always
      * a new array.</p>
      *
      * <pre>
      * ArrayUtils.addAll(null, null)     = null
      * ArrayUtils.addAll(array1, null)   = cloned copy of array1
      * ArrayUtils.addAll(null, array2)   = cloned copy of array2
      * ArrayUtils.addAll([], [])         = []
      * ArrayUtils.addAll([null], [null]) = [null, null]
      * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
      * </pre>
      *
      * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
      * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
      * @return The new array, <code>null</code> if both arrays are <code>null</code>.
      *      The type of the new array is the type of the first array,
      *      unless the first array is null, in which case the type is the same as the second array.
      * @since 2.1
      */
     @SuppressWarnings("unchecked")
     public static <T> T[] addAll(T[] array1, T... array2) {
         if (array1 == null) {
+            // Assuming clone handles null and returns null if array2 is also null
             return clone(array2);
         } else if (array2 == null) {
             return clone(array1);
         }
+
         final Class<?> type1 = array1.getClass().getComponentType();
+        final Class<?> type2 = array2.getClass().getComponentType();
+
+        // Check if elements of array2's runtime component type can be stored
+        // in an array of array1's runtime component type.
+        // For example, if array1 is Integer[] and array2 is Long[], then
+        // Integer.class.isAssignableFrom(Long.class) is false, indicating incompatibility.
+        if (!type1.isAssignableFrom(type2)) {
+            // Throw IllegalArgumentException if component types are incompatible,
+            // as expected by testJira567.
+            throw new IllegalArgumentException("Cannot store elements of array2's component type (" + type2.getName() +
+                                               ") into an array of array1's component type (" + type1.getName() + ")");
+        }
+
         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
         return joinedArray;
     }
