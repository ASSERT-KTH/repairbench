diff --git a/tmp/92f7b181-c7f4-49a5-a0e9-3c865b9c6b2f_buggy.java b/tmp/c4643217-df4c-48c9-ab55-7c424f061f2a_fixed.java
index 5abdeb5..17cd70c 100644
--- a/tmp/92f7b181-c7f4-49a5-a0e9-3c865b9c6b2f_buggy.java
+++ b/tmp/c4643217-df4c-48c9-ab55-7c424f061f2a_fixed.java
@@ -1,29 +1,29 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            // Only don't count lhs if the entire cfgNode itself is the assignment.
+            if (!(cfgNode.isAssign() && cfgNode.getFirstChild() == n)) {
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
