diff --git a/tmp/cc036fde-5356-471e-a4cd-6838923fc2b6_buggy.java b/tmp/a82be054-1598-4fef-a855-9efdc9464e08_fixed.java
index 5abdeb5..d884e23 100644
--- a/tmp/cc036fde-5356-471e-a4cd-6838923fc2b6_buggy.java
+++ b/tmp/a82be054-1598-4fef-a855-9efdc9464e08_fixed.java
@@ -1,29 +1,35 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // Count a node as a "use" if it's a NAME node and matches the variable name.
+          // The previous logic contained a special exception for the left-hand side of
+          // an assignment. However, for flow-sensitive inlining, an assignment
+          // involving the variable within the current CFG node represents a significant
+          // interaction that should prevent inlining, similar to a read.
+          //
+          // Removing the specific exclusion for LHS of assignments ensures that
+          // all references to the variable, including modifications, contribute
+          // to the use count within the CFG node. This correctly signals to the
+          // inliner that the variable is "used" (i.e., interacted with in a way
+          // that impacts inlining safety) within this node, preventing problematic
+          // inlining scenarios as seen in testVarAssinInsideHookIssue965 (related to Issue 965).
+          // The TODO regarding SIDE_EFFECT_PREDICATE suggests this broader counting
+          // is necessary until more precise side-effect analysis is integrated.
+          if (n.isName() && n.getString().equals(varName)) {
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
