diff --git a/tmp/f1855ff1-24ce-4d84-a5d8-c5f0f817a762_buggy.java b/tmp/9a4d7dd4-2970-46fe-8a98-87e92626db63_fixed.java
index 5abdeb5..fe9cd23 100644
--- a/tmp/f1855ff1-24ce-4d84-a5d8-c5f0f817a762_buggy.java
+++ b/tmp/9a4d7dd4-2970-46fe-8a98-87e92626db63_fixed.java
@@ -1,29 +1,48 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // A variable is considered "used" if it is read (an R-value)
+            // or if it's assigned within an expression whose value is then used.
+            // It's not a "use" if it's a pure definition (like var declaration,
+            // function parameter, catch variable, or a top-level assignment statement).
+
+            // Case 1: If it's not an LValue, it's a direct read (R-value). Count it.
+            if (!NodeUtil.isLValue(n)) {
               numUsesWithinCfgNode++;
+            } else {
+              // Case 2: It's an LValue (a definition site).
+              // We only count L-values that are part of an assignment expression
+              // where the assignment's result is then used.
+              // This is indicated if the assignment (parent) is not a top-level statement.
+              if (parent != null && parent.isAssign() && parent.getFirstChild() == n) {
+                 Node assignNode = parent;
+                 Node grandparent = assignNode.getParent();
+                 // If the assignment node's grandparent is null (no parent),
+                 // or if the grandparent is a statement block (e.g., EXPR_RESULT, BLOCK),
+                 // then this assignment is a top-level statement and not a "use" for inlining.
+                 // Otherwise, it's part of a larger expression whose value is consumed.
+                 if (grandparent != null && !NodeUtil.isStatementBlock(grandparent)) {
+                    // This assignment is part of a larger expression.
+                    // E.g., `(i = 5)` in `x = (i = 5) + y;` or `return (i=5), z;`
+                    // In these cases, the value of the assignment (which is `i`) is used.
+                    numUsesWithinCfgNode++;
+                 }
+              }
+            }
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
