diff --git a/tmp/14f5dd7a-d533-4549-ae28-bd413e9ebacc_buggy.java b/tmp/0f86a12f-123a-4408-9fcd-1db121f9d125_fixed.java
index 5abdeb5..44ea65a 100644
--- a/tmp/14f5dd7a-d533-4549-ae28-bd413e9ebacc_buggy.java
+++ b/tmp/0f86a12f-123a-4408-9fcd-1db121f9d125_fixed.java
@@ -1,29 +1,32 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
+            // This exception should only apply when the cfgNode itself is the
+            // assignment. For nested assignments (e.g., in a ternary or
+            // logical expression), the LHS of the assignment should be counted
+            // as a "use" or modification that prevents inlining.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
+              !( (parent == cfgNode) && parent.isAssign() &&
                  (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
