diff --git a/tmp/4563f12c-1a7b-4410-857b-b3e7642993ee_buggy.java b/tmp/a14f83f6-7c08-4727-af24-c94aa02f5a69_fixed.java
index 5abdeb5..cf33b4d 100644
--- a/tmp/4563f12c-1a7b-4410-857b-b3e7642993ee_buggy.java
+++ b/tmp/a14f83f6-7c08-4727-af24-c94aa02f5a69_fixed.java
@@ -1,29 +1,37 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
+     *
+     * <p>This function counts all occurrences of the variable name within the
+     * cfgNode, including assignments to the variable. This is because the
+     * presence of an assignment within a control flow graph node can impact
+     * the safety of inlining, even if it's not a direct 'read' use.
+     * This addresses issues where variables assigned within
+     * conditional expressions (e.g., `i = 5` in `cond ? (i=5) : 0`) were
+     * incorrectly inlined because the assignment was not counted as a use
+     * by the previous logic.
+     * TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
+     * and potentially revert this to only counting read uses if side-effect
+     * detection becomes sufficiently robust.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Count all occurrences of the variable name, including LHS of assignments.
+            // The previous exclusion for LHS of assignments was too broad and
+            // led to incorrect inlining decisions when variables were conditionally
+            // assigned within the control flow graph node.
             numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
