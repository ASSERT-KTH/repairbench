diff --git a/tmp/6eff7047-6878-4dbc-ac44-0a19af0877e8_buggy.java b/tmp/2083cb50-d4e4-41c9-9c5d-82f249b8cb08_fixed.java
index 5abdeb5..f68a69b 100644
--- a/tmp/6eff7047-6878-4dbc-ac44-0a19af0877e8_buggy.java
+++ b/tmp/2083cb50-d4e4-41c9-9c5d-82f249b8cb08_fixed.java
@@ -1,29 +1,28 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Count all occurrences of the variable name.
+            // For flow-sensitive inlining, an assignment to the variable
+            // within a CFG node (e.g., `x = y`) also constitutes a reference
+            // to 'x' that must be recognized. If 'x' is replaced by an inlined
+            // value (e.g., `0 = y`), it would change the semantics or create
+            // invalid code. Therefore, both read and write occurrences of
+            // the variable name within the CFG node should prevent inlining.
             numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
