diff --git a/tmp/c474dd0c-e7a9-44b4-ad4d-2161a87ab5b8_buggy.java b/tmp/e1a9ea91-7060-4cdf-84a0-e4d6113fa2a6_fixed.java
index 5abdeb5..59962b4 100644
--- a/tmp/c474dd0c-e7a9-44b4-ad4d-2161a87ab5b8_buggy.java
+++ b/tmp/e1a9ea91-7060-4cdf-84a0-e4d6113fa2a6_fixed.java
@@ -1,29 +1,49 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+
+            // The original condition `!(parent.isAssign() && (parent.getFirstChild() == n))`
+            // meant "Don't count lhs of *any* assignment".
+            // This is generally correct for a strict definition of "use" (read).
+            //
+            // However, for flow-sensitive inlining, a variable assigned on the
+            // LHS of a nested assignment (e.g., `(x = 5)` inside `1 ? (x = 5) : 0`)
+            // should be considered a "use" of the variable for inlining purposes.
+            // The value of the assignment expression (`x = 5` evaluates to `5`)
+            // is "used" by its parent, which complicates inlining.
+            //
+            // The exception should only apply if the `cfgNode` itself *is*
+            // the assignment node (i.e., `cfgNode` represents a top-level assignment).
+            // In such a case, the variable is being defined/reassigned, not "used"
+            // in a way that requires its value to be read.
+            //
+            // So, count `n` if:
+            // 1. `n` is not the LHS of an assignment, OR
+            // 2. `n` *is* the LHS of an assignment, BUT that assignment node is NOT the `cfgNode` itself.
+            boolean isLhsOfAssign = parent.isAssign() && (parent.getFirstChild() == n);
+
+            if (!isLhsOfAssign || parent != cfgNode) {
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
