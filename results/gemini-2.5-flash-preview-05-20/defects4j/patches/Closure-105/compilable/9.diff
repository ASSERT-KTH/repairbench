diff --git a/tmp/59860108-ccdf-4ff5-acbd-60a9f21aaa6f_buggy.java b/tmp/51859ecb-4ccd-45ff-848d-c389751318cd_fixed.java
index ef65dd9..af9b5fb 100644
--- a/tmp/59860108-ccdf-4ff5-acbd-60a9f21aaa6f_buggy.java
+++ b/tmp/51859ecb-4ccd-45ff-848d-c389751318cd_fixed.java
@@ -1,92 +1,108 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
+    boolean needsJoinString = false; // Flag to indicate if the next element should be preceded by joinString
+
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+        if (needsJoinString) { // If there was a previous element (string or non-string), append joinString
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
-      } else {
+        needsJoinString = true; // A string was processed, so the next element needs a join string
+      } else { // Not an immutable value (e.g., NAME, CALL, etc.)
         if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+          // Flush accumulated string literals
+          foldedSize += sb.length() + 2; // + 2 for the quotes.
           arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+          sb = new StringBuilder(); // Reset sb
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
+        needsJoinString = true; // A non-string was added, so the next element needs a join string.
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
         // No folding could actually be performed.
+        // This condition previously caused issues because the number of elements
+        // in arrayFoldedChildren might be less than arrayNode.getChildCount()
+        // due to folding, but still not just one element.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
+          // This check implies no actual folding occurred in terms of reducing
+          // the number of elements or merging strings.
+          // However, string values might still have been converted to their
+          // canonical string forms (e.g., 5 -> "5").
+          // If no element count reduction occurred, and no string value
+          // was changed, then it's not an optimization.
+          // The current logic handles the string transformation within sb,
+          // so this check is primarily for the cost comparison.
+          // If the cost is higher, it returns.
         }
+
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
