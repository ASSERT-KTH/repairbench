diff --git a/tmp/8d848943-48a2-4149-9720-395a7c24b09b_buggy.java b/tmp/66e11e9b-8854-43bb-bed2-8fefdec2ac23_fixed.java
index ef65dd9..113b572 100644
--- a/tmp/8d848943-48a2-4149-9720-395a7c24b09b_buggy.java
+++ b/tmp/66e11e9b-8854-43bb-bed2-8fefdec2ac23_fixed.java
@@ -1,92 +1,117 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
-    int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
+
+    boolean hadPreviousConstant = false; // Tracks if the previous element processed was a constant
+
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+        if (hadPreviousConstant) { // If previous element was a constant, add joinString
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
-      } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+        hadPreviousConstant = true;
+      } else { // Non-immutable value
+        if (hadPreviousConstant) { // We were accumulating a constant string segment
           arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+          sb = new StringBuilder(); // Reset sb
+          hadPreviousConstant = false; // Reset flag as we broke the constant segment
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+    // After loop, add any remaining accumulated string
+    if (hadPreviousConstant) {
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
+    int foldedSize; // Declare foldedSize here
+
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
+        foldedSize = InlineCostEstimator.getCost(emptyStringNode);
+        if (foldedSize > originalSize) {
+          return;
+        }
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
-        }
-        arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
+          foldedSize = InlineCostEstimator.getCost(replacement);
           foldedStringNode = replacement;
+        } else {
+          foldedSize = InlineCostEstimator.getCost(foldedStringNode);
         }
+        if (foldedSize > originalSize) {
+          return;
+        }
+        arrayNode.detachChildren();
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
-        }
+        // No full folding could actually be performed, but adjacent constants were merged.
+        // The result will be a new array literal with merged constants,
+        // followed by a .join() call.
         int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
+        foldedSize = kJoinOverhead;
+        foldedSize += InlineCostEstimator.getCost(right); // Cost of the separator node itself
+
+        // Cost of the array literal itself: '[' ']' and commas
+        foldedSize += 2; // For '[' and ']'
+        if (arrayFoldedChildren.size() > 0) {
+            foldedSize += (arrayFoldedChildren.size() - 1); // For commas between array elements in the literal
+        }
+        for (Node node : arrayFoldedChildren) {
+          foldedSize += InlineCostEstimator.getCost(node);
+        }
+
         if (foldedSize > originalSize) {
           return;
         }
+        // If no elements were merged (i.e., the number of children in the new
+        // array is the same as the original), then no folding was performed.
+        // In this case, we don't want to replace the node, even if the cost
+        // calculation somehow indicates a win (e.g., due to different string
+        // quoting styles or internal compiler representation).
+        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+          return;
+        }
+
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
