diff --git a/tmp/86c8e65a-90a9-484b-ac20-18c7d06cff33_buggy.java b/tmp/5ea4299c-e8a6-478b-bb38-4fd6e86c97ad_fixed.java
index ef65dd9..58eeae3 100644
--- a/tmp/86c8e65a-90a9-484b-ac20-18c7d06cff33_buggy.java
+++ b/tmp/5ea4299c-e8a6-478b-bb38-4fd6e86c97ad_fixed.java
@@ -1,92 +1,117 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
+
+    // Flag to track if the current element is the first in a sequence of
+    // contiguous string-like values. This controls whether the joinString
+    // should be prepended.
+    boolean firstElementInSequence = true;
+
+    // Flag to track if 'sb' currently holds accumulated string content
+    // from immutable values. This is true if *any* immutable value
+    // has been appended to sb since the last non-immutable value or
+    // the beginning of the array. It ensures that even empty string literals
+    // created by folding are added to arrayFoldedChildren.
+    boolean hadContiguousString = false;
+
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+        if (!firstElementInSequence) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
+        firstElementInSequence = false;
+        hadContiguousString = true; // We are accumulating a string
       } else {
-        if (sb.length() > 0) {
+        // If we were accumulating a string, flush it to a Node.
+        if (hadContiguousString) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+          sb = new StringBuilder(); // Reset for next string sequence
+          hadContiguousString = false; // Reset, no longer accumulating
         }
+        // Add the non-string element itself.
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
+        // Reset firstElementInSequence as a non-string breaks the sequence.
+        firstElementInSequence = true;
       }
       elem = elem.getNext();
     }
 
-    if (sb.length() > 0) {
+    // After the loop, if there's any accumulated string content, flush it.
+    // This covers cases where the array ends with string-like values.
+    if (hadContiguousString) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
-        // No folding could actually be performed.
+        // No folding could actually be performed (i.e., no adjacent strings
+        // were merged) if the number of elements in the folded list is the
+        // same as the original array. In such cases, we should only proceed
+        // if the overall cost is reduced.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
