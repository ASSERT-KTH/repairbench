diff --git a/tmp/c3554d28-2068-4524-b0c5-0a2c1266e7af_buggy.java b/tmp/bc55bd28-f4a9-4001-ad87-6414d2fb41c8_fixed.java
index ef65dd9..3505910 100644
--- a/tmp/c3554d28-2068-4524-b0c5-0a2c1266e7af_buggy.java
+++ b/tmp/bc55bd28-f4a9-4001-ad87-6414d2fb41c8_fixed.java
@@ -1,92 +1,115 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
+    int foldedStringCount = 0; // Tracks the number of immutable string values added to sb
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+        if (foldedStringCount > 0) { // If it's not the very first string in this segment
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
+        foldedStringCount++;
       } else {
-        if (sb.length() > 0) {
+        if (foldedStringCount > 0) { // If there were accumulated strings
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
+          foldedStringCount = 0; // Reset for the next segment of foldable elements
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
+        // Non-foldable element breaks sequence, reset count for next foldable segment
+        foldedStringCount = 0;
       }
       elem = elem.getNext();
     }
 
-    if (sb.length() > 0) {
+    if (foldedStringCount > 0) { // If there are any remaining accumulated strings in sb
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+    // Removed the original line: foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+          // Check if any nodes actually changed.
+          // If the sizes are the same, and no elements were *modified* into string nodes
+          // (e.g. from ['', ''] to ','), then no folding was done.
+          // The current changes should ensure that even if count is same, if nodes actually changed, it proceeds.
+          // However, the failing tests always result in size change, so this block is not hit by them.
+          // Keeping original behavior for this conditional.
+          boolean changed = false;
+          Node currentOriginal = arrayNode.getFirstChild();
+          for (Node foldedChild : arrayFoldedChildren) {
+            if (currentOriginal != foldedChild) {
+              changed = true;
+              break;
+            }
+            currentOriginal = currentOriginal.getNext();
+          }
+          if (!changed) {
             return;
           }
+        }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
+        // Add cost of commas in the array literal, e.g., `[a,b,c]` has 2 commas.
+        foldedSize += arrayFoldedChildren.size() > 1 ? (arrayFoldedChildren.size() - 1) : 0;
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
