diff --git a/tmp/a942fcd6-9edf-4ff3-bf9e-df433bba9ce7_buggy.java b/tmp/1a564fc1-378b-4d00-b5e6-f4851db7cfc5_fixed.java
index fb2b020..9c636a9 100644
--- a/tmp/a942fcd6-9edf-4ff3-bf9e-df433bba9ce7_buggy.java
+++ b/tmp/1a564fc1-378b-4d00-b5e6-f4851db7cfc5_fixed.java
@@ -1,27 +1,34 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
+    // The generic 'Object' type (JSTypeNative.OBJECT_TYPE) should not have
+    // properties inferred onto it by constraints. If this object is the
+    // generic 'Object' type, we return early to prevent modifying it.
+    // This check prevents side-effects of modifying the global Object type.
+    if (this.isNativeObjectType() && this.equals(getNativeType(JSTypeNative.OBJECT_TYPE))) {
+      return;
+    }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
