diff --git a/tmp/a1a0c576-d0a6-484c-80b8-154af60708e6_buggy.java b/tmp/c4493124-372b-4771-b131-425cccba2f76_fixed.java
index fb2b020..cb80761 100644
--- a/tmp/a1a0c576-d0a6-484c-80b8-154af60708e6_buggy.java
+++ b/tmp/c4493124-372b-4771-b131-425cccba2f76_fixed.java
@@ -1,27 +1,28 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
+        // Fix: Only define inferred properties if they are not already present.
+        // If a property exists (hasProperty(prop) is true), its type will be
+        // checked against the constraint later during unification or assignability
+        // checks. This prevents redundant re-inference that could cause warnings.
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
-          }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
