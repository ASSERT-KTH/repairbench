diff --git a/tmp/1c1dcfb8-20c2-4a6e-ba58-e817df2781fc_buggy.java b/tmp/9a90d4d9-929e-4f15-94cd-40d2e36c1125_fixed.java
index fb2b020..d7892fb 100644
--- a/tmp/1c1dcfb8-20c2-4a6e-ba58-e817df2781fc_buggy.java
+++ b/tmp/9a90d4d9-929e-4f15-94cd-40d2e36c1125_fixed.java
@@ -1,27 +1,34 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+          // If the property is not present on this object, and the constraint
+          // property is not UNKNOWN, then make the inferred type optional.
+          // This matches the behavior of properties being optional if not explicitly
+          // defined in an object literal, and allows for structural matching
+          // against partial record types.
+          // The check for !typeToInfer.isUnknownType() is crucial to prevent
+          // UNKNOWN|undefined types, which can lead to unwanted warnings.
+          if (!hasProperty(prop) && !typeToInfer.isUnknownType()) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
