diff --git a/tmp/8cc12d52-d235-40e3-bd66-fa1635a3c216_buggy.java b/tmp/36dce20e-95b1-48b2-8d9e-fa69e2593942_fixed.java
index fb2b020..9f649c0 100644
--- a/tmp/8cc12d52-d235-40e3-bd66-fa1635a3c216_buggy.java
+++ b/tmp/36dce20e-95b1-48b2-8d9e-fa69e2593942_fixed.java
@@ -1,27 +1,32 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+            // If the property is not present at all on this object,
+            // we should infer it with the type from the constraint.
+            // The previous logic of taking getLeastSupertype with VOID_TYPE
+            // would incorrectly make required properties optional (e.g., string becomes (void|string)),
+            // leading to warnings when a non-void type is expected.
+            // We should just use the propType from the constraint directly.
+            typeToInfer = propType; // FIX: Use the property type directly from the constraint.
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
