diff --git a/tmp/fdbebcdb-5ba8-4042-97a9-53c0aaf8da2b_buggy.java b/tmp/97a839f7-63b2-4b15-8316-4dbc55cf9def_fixed.java
index fb2b020..2bde34f 100644
--- a/tmp/fdbebcdb-5ba8-4042-97a9-53c0aaf8da2b_buggy.java
+++ b/tmp/97a839f7-63b2-4b15-8316-4dbc55cf9def_fixed.java
@@ -1,27 +1,36 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
+          // If the property is not explicitly declared on this object,
+          // we should infer its type based on the constraint.
+          //
+          // The previous logic incorrectly handled cases where the property
+          // did not exist on 'this' object by inferring it as VOID_TYPE
+          // (i.e., `getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType)`).
+          // This effectively discarded the valuable type information from the
+          // constraint, leading to incorrect type inference and subsequent errors.
+          //
+          // The correct behavior is to infer the property with the type
+          // specified by the constraint (`propType`), regardless of whether
+          // it previously existed or not. The `defineInferredProperty`
+          // method should handle the addition of new properties or the
+          // refinement/merging of existing inferred properties.
+          defineInferredProperty(prop, propType, null);
         }
       }
     }
   }
\ No newline at end of file
