diff --git a/tmp/c349e1d7-a395-44b7-9200-7dfb403559d8_buggy.java b/tmp/11fb89e5-ee68-4b99-89fe-12965efca9b9_fixed.java
index fb2b020..49bd523 100644
--- a/tmp/c349e1d7-a395-44b7-9200-7dfb403559d8_buggy.java
+++ b/tmp/11fb89e5-ee68-4b99-89fe-12965efca9b9_fixed.java
@@ -1,27 +1,38 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+          // If the property is not explicitly declared on 'this' (meaning it's an inferred property).
+          if (hasProperty(prop)) {
+            // If 'this' already has the property (it's present in the object literal),
+            // then we infer its type to match the constraint's property type.
+            // Any potential type mismatch here will be caught by the caller during
+            // assignability checks.
+            defineInferredProperty(prop, propType, null);
+          } else {
+            // If 'this' does NOT have the property at all (it's missing from the object literal).
+            // We only infer this property if the constraint itself declares it as optional.
+            // If the constraint requires this property, and it's missing, then 'this'
+            // simply does not match the constraint, and we should not add it as an
+            // optional property to mask the error. The caller will report the mismatch.
+            if (constraintObj.isPropertyOptional(prop)) {
+              defineInferredProperty(prop, propType, null);
+            }
           }
-          defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
