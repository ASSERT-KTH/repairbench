diff --git a/tmp/15a42102-47f7-4e23-ad2e-8bbcaa9ba466_buggy.java b/tmp/c003ba30-a6f5-4df9-877c-94634c4b712d_fixed.java
index fb2b020..4006d07 100644
--- a/tmp/15a42102-47f7-4e23-ad2e-8bbcaa9ba466_buggy.java
+++ b/tmp/c003ba30-a6f5-4df9-877c-94634c4b712d_fixed.java
@@ -1,27 +1,62 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // We only want to match constraints on anonymous types.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
+        JSType constraintPropType = constraintObj.getPropertyType(prop);
+
+        // If the anonymous object already has this property (either declared or inferred).
+        if (hasProperty(prop)) {
+          // Get the type of the property on 'this' object.
+          JSType thisPropType = getPropertyType(prop);
+          // Recursively match the property types. This will ensure compatibility and potentially
+          // refine 'thisPropType' if it's an inferrable type (e.g., from an anonymous object literal)
+          // and needs narrowing based on the constraint.
+          thisPropType.matchConstraint(constraintPropType);
+
+          // Removed the `defineInferredProperty` call from here.
+          // The original code would call `defineInferredProperty` if `!isPropertyTypeDeclared(prop)`.
+          // This was likely the source of "unexpected warnings" for `testIssue700` because
+          // it might have been redundantly redefining an already established property with the same type,
+          // or causing unintended side effects in the type system.
+          // `matchConstraint` on the property type itself should handle any necessary refinements.
+        } else {
+          // The anonymous object does NOT have this property.
+          // Determine if the constraint property is required or optional.
+          // A property is considered optional if its type is VOID or UNDEFINED,
+          // or if it's a union type that includes VOID or UNDEFINED.
+          boolean isConstraintPropRequired =
+              !(constraintPropType.isNoType() || constraintPropType.isUnknownType() ||
+                constraintPropType.isVoidType() || constraintPropType.isUndefined());
+          
+          if (constraintPropType.isUnionType()) {
+            boolean foundOptionalComponent = false;
+            for (JSType alternate : constraintPropType.toUnionType().getAlternates()) {
+              if (alternate.isVoidType() || alternate.isUndefined()) {
+                foundOptionalComponent = true;
+                break;
+              }
+            }
+            if (foundOptionalComponent) {
+                isConstraintPropRequired = false;
+            }
+          }
+
+          if (isConstraintPropRequired) {
+            // This is a missing required property. This should ideally result in a type error.
+            // By not defining the property, the `isSubtypeOf` check later will fail for
+            // required properties, leading to an appropriate error. We do NOT silently add it.
+          } else {
+            // The constraint property is optional, and it's missing from 'this'.
+            // In this context (matching constraints on *anonymous types*), it's reasonable
+            // to infer/add this missing optional property to explicitly define it.
+            // This behavior is similar to the original code's intent for truly missing properties,
+            // but now correctly scoped to only optional properties.
+            // The original code used `getLeastSupertype(JSTypeNative.VOID_TYPE, propType)`, which
+            // typically resolves to `propType` itself.
+            defineInferredProperty(prop, constraintPropType, null);
+          }
         }
       }
     }
   }
\ No newline at end of file
