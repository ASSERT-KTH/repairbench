diff --git a/tmp/ce9ede2d-c550-48e5-900e-e7c5fdc3f8e6_buggy.java b/tmp/1f65679a-4356-4e38-befb-abb0f7f7003a_fixed.java
index 49a5702..1326fda 100644
--- a/tmp/ce9ede2d-c550-48e5-900e-e7c5fdc3f8e6_buggy.java
+++ b/tmp/1f65679a-4356-4e38-befb-abb0f7f7003a_fixed.java
@@ -1,66 +1,99 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+    // Determine if the result of 'n' is effectively used.
+    // NodeUtil.isExpressionResultUsed has a known subtlety for
+    // children of COMMA nodes. Specifically, for 'a, b', the result of 'a' is
+    // discarded, while the result of 'b' becomes the result of the COMMA node.
+    // We adjust the 'isResultUsed' logic here to accurately reflect this.
+    boolean isResultUsed;
+    if (parent.getType() == Token.COMMA) {
+      if (n == parent.getLastChild()) {
+        // If 'n' is the last child of a comma, its result IS the comma's result.
+        // So, whether its result is used depends on whether the comma node itself is used.
+        isResultUsed = NodeUtil.isExpressionResultUsed(parent);
+      } else {
+        // If 'n' is a non-last child of a comma, its result is discarded by the comma operator.
+        // Therefore, it is never "used" in terms of its value affecting the outcome of the comma expression.
+        isResultUsed = false;
+      }
+    } else {
+      // For all other parent types, we rely on NodeUtil's existing logic.
+      isResultUsed = NodeUtil.isExpressionResultUsed(n);
+    }
+
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (parent.getType() == Token.COMMA) {
+      // If the result of 'n' (a child of a COMMA) is considered used, then we don't report an error.
       if (isResultUsed) {
         return;
       }
+      // If 'n' is the last child of a comma, and its result is *not* used (isResultUsed is false),
+      // then we need to check its ancestors. This determines if the entire comma expression's result
+      // is implicitly unused (e.g., if the comma expression is directly under an EXPR_RESULT or BLOCK).
       if (n == parent.getLastChild()) {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA) continue;
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
           else break;
         }
       }
+      // If 'n' is not the last child of the comma (e.g., '2' in 'a = (2, 3)'),
+      // and its result is not used (isResultUsed is already false from our custom calculation),
+      // we fall through to the final side-effect check, which is the desired behavior.
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
+      // For parents that are neither COMMA, EXPR_RESULT, nor BLOCK, the expression's
+      // result is generally considered "used" by the parent unless it's a specific FOR loop
+      // initialization/increment clause which can be side-effect free.
       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
         return;
       }
     }
+    
+    // Final check: if the expression has no side effects OR it's a simple operator
+    // and its result is not being used, then it's useless code.
     if (
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
