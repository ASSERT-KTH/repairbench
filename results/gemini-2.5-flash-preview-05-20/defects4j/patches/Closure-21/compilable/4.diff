diff --git a/tmp/d740988b-3bcf-4c19-8d61-3be2254718fe_buggy.java b/tmp/fffabd23-44fd-473a-a819-9058f620f3b0_fixed.java
index 49a5702..7f20733 100644
--- a/tmp/d740988b-3bcf-4c19-8d61-3be2254718fe_buggy.java
+++ b/tmp/fffabd23-44fd-473a-a819-9058f620f3b0_fixed.java
@@ -1,66 +1,103 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
+    // `isResultUsed` for `n` is calculated here, but its direct use for
+    // COMMA parents is overridden by the specific COMMA logic below.
+    // It is still relevant for other parent types in the subsequent `else if` block.
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
     if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
+      boolean commaResultUsed = false;
       if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+        // If 'n' is the last child of a COMMA, its value becomes the result
+        // of the COMMA expression. We need to check if the COMMA expression's
+        // result is ultimately used.
+        Node current = parent;
+        while (current != null) {
+          // If the current node (or an ancestor) directly uses its result,
+          // then the entire comma expression's result is used.
+          if (NodeUtil.isExpressionResultUsed(current)) {
+            commaResultUsed = true;
+            break;
           }
+          // If the current node is a statement (like EXPR_RESULT or BLOCK),
+          // then the result of the expression (including the comma) is discarded.
+          // This marks the end of the chain of usage for the comma expression.
+          if (current.isExprResult() || current.isBlock()) {
+            commaResultUsed = false;
+            break;
           }
+          current = current.getParent();
+        }
+      } else {
+        // If 'n' is not the last child of a COMMA, its value is always
+        // discarded by the COMMA operator itself. So, its result is not used.
+        commaResultUsed = false;
+      }
+
+      // If the comma expression (or the part of it containing 'n') is used,
+      // then 'n' is not useless for its result.
+      if (commaResultUsed) {
+        return;
+      }
+      // Otherwise, proceed to check for side-effects, as the result of `n`
+      // (either directly or via the comma expression) is not ultimately used.
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
+      // If the parent is not a statement (EXPR_RESULT or BLOCK), then the
+      // result of 'n' must be used, UNLESS 'n' is in a special position
+      // where its result is truly unused but not an error (e.g., FOR loop parts).
       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
-        return;
+        return; // The result of `n` is used by its parent in this context, so it's not useless.
       }
     }
+
+    // If we reach here, it means 'n' is part of a statement (EXPR_RESULT, BLOCK),
+    // or it's a non-last child of a COMMA, or it's the last child of a COMMA
+    // where the entire COMMA expression is unused, or it's in a FOR loop part
+    // that is explicitly allowed to be unused (though still checked for side effects).
+    // In all these cases, 'n's result is not effectively used.
     if (
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
