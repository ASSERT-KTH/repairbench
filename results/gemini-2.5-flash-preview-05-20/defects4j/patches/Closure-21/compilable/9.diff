diff --git a/tmp/9b0fb64b-25e4-4adc-9d41-1cb6fbb4107a_buggy.java b/tmp/1c77a0f0-ae52-410a-aea1-7284a2bb68e1_fixed.java
index 49a5702..f48be60 100644
--- a/tmp/9b0fb64b-25e4-4adc-9d41-1cb6fbb4107a_buggy.java
+++ b/tmp/1c77a0f0-ae52-410a-aea1-7284a2bb68e1_fixed.java
@@ -1,66 +1,77 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    //
+    // UPDATE: Tests indicate that empty statements (VOID nodes)
+    // should be reported as useless code. The original comment might
+    // reflect a design choice that is now contradicted by tests.
+    // Removed `n.isEmpty()` from this early return.
+    if (n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
-    if (n.isExprResult()) {
-      return;
-    }
+    //
+    // UPDATE: Returning early for EXPR_RESULT prevents the useless expression
+    // wrapped inside from being reported. Removing this return allows the
+    // child expression to be processed correctly by the main check.
+    // if (n.isExprResult()) { // Removed this block
+    //   return;
+    // }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (parent.getType() == Token.COMMA) {
       if (isResultUsed) {
         return;
       }
       if (n == parent.getLastChild()) {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA) continue;
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
           else break;
         }
       }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
+    } else if (!NodeUtil.isStatement(n) && parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
+      // UPDATE: Added !NodeUtil.isStatement(n) to ensure this block
+      // only applies to expressions, not statements (like EMPTY, which
+      // should always be reported if they reach the main check).
       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
         return;
       }
     }
     if (
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
