diff --git a/tmp/4a01cf23-5eb2-437d-9887-6f8ac0eacae9_buggy.java b/tmp/a64cd027-8f66-43df-824e-44c5e3879029_fixed.java
index 49a5702..326480b 100644
--- a/tmp/4a01cf23-5eb2-437d-9887-6f8ac0eacae9_buggy.java
+++ b/tmp/a64cd027-8f66-43df-824e-44c5e3879029_fixed.java
@@ -1,66 +1,87 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
+      // For children of a COMMA, if 'n' is the last child, its result is the COMMA's result.
+      // If 'n' is not the last child, its result is discarded by the COMMA.
+      // So isResultUsed should only be true for the last child.
       if (n == parent.getLastChild()) {
+        // If the last child's result is used (meaning the COMMA's result is also used),
+        // then this node is not useless.
+        if (isResultUsed) { // This check should only be relevant for the last child of a COMMA
+          return;
+        }
+        // If the last child's result is not used (meaning the COMMA's result is not used),
+        // we check the ancestor chain to see if the COMMA itself is eventually used.
+        // If not, then this last child is useless.
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+          if (ancestorType == Token.COMMA) continue; // Skip intermediate COMMA ancestors.
+          // If the COMMA is part of an expression whose result is used by its non-COMMA ancestor,
+          // then the COMMA (and its last child) are not useless.
+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
+            return;
+          } else {
+            // If the ancestor is an EXPR_RESULT or BLOCK, the COMMA's result is not used.
+            // So the COMMA (and its last child) are useless. Break and let it be flagged.
+            break;
           }
         }
+      }
+      // If 'n' is NOT the last child of a COMMA, its result is discarded by the COMMA.
+      // So 'isResultUsed' should always be false for non-last children of a COMMA.
+      // In this case, 'n' is useless if it has no side effects.
+      // It should fall through to the final side-effect check.
+      // No 'return' is needed here, as the initial 'isResultUsed' check is now inside
+      // the 'n == parent.getLastChild()' block.
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
         return;
       }
     }
     if (
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
