diff --git a/tmp/3499fd1b-e06e-48f5-b10e-200827b623fa_buggy.java b/tmp/c48f07ba-7b8f-4059-a414-dd07c65698c0_fixed.java
index 49a5702..d5c7dc7 100644
--- a/tmp/3499fd1b-e06e-48f5-b10e-200827b623fa_buggy.java
+++ b/tmp/c48f07ba-7b8f-4059-a414-dd07c65698c0_fixed.java
@@ -1,66 +1,100 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+    // Determine if 'n' itself has its direct result used by its parent.
+    // This is a general indicator of usefulness, but needs special handling for COMMA.
+    boolean isResultUsedByParent = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+    // --- Start of refined logic for useless code detection ---
+
+    // Special handling for COMMA nodes.
+    // A node within a COMMA expression is only useful if it's the last child
+    // AND the COMMA expression's result is used.
     if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
       if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+        // If n is the last child of a COMMA node, its result is the result of the COMMA node.
+        // Its usefulness depends on whether the COMMA node's result is used.
+        if (NodeUtil.isExpressionResultUsed(parent)) {
+          return; // The result of the COMMA (and thus n) is used, so n is useful.
         }
+        // If the COMMA's result is not used, it means n is potentially useless.
+        // Fall through to the final side-effect check.
+      } else {
+        // If n is NOT the last child of a COMMA node, its result is always discarded by the COMMA operator.
+        // Therefore, it is only useful if it has side effects.
+        // Always fall through to the final side-effect check. Do not return based on 'isResultUsedByParent' here.
       }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+      // After handling COMMA specific logic, if not returned, proceed to the final check.
+    } else { // Parent is NOT a COMMA.
+      // General case: if the result of 'n' is used by its parent, it's useful.
+      if (isResultUsedByParent) {
         return;
       }
+
+      // If the result of 'n' is NOT used by its parent, we need further checks.
+      // If the parent is not an EXPR_RESULT or BLOCK, it implies 'n' is in a larger expression context
+      // (e.g., assignment, function call argument, conditional expression).
+      // In these contexts, even if `isResultUsedByParent` is false, the expression might still be implicitly useful
+      // (e.g., conditions in `if`, `while`, `for` loops, or the initial/increment expressions in `for` loops).
+      if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
+        // The original logic `if (! (FOR_LOOP_COND)) return;` meant:
+        // if it's NOT the FOR loop init/increment/condition special case, then it's considered useful and we return.
+        // This covers cases like `if (x==y);` where `x==y` is useful.
+        if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+               (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+          return; // 'n' is useful due to its context (e.g., conditional, argument, etc.)
         }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+        // If it *is* the FOR loop special case (init/increment) and result is not used,
+        // it means we fall through to the final side-effect check.
+      }
+      // If the parent IS an EXPR_RESULT or BLOCK, and isResultUsedByParent is false,
+      // it means 'n' is potentially useless, so fall through to the final side-effect check.
+    }
+
+    // --- End of refined logic for useless code detection ---
+
+    // This is the common useless code check: report if the expression has no side effects and is not a simple operator.
+    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
