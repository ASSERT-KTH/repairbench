diff --git a/tmp/313fc720-7e00-4cda-897e-84ea247ad1e8_buggy.java b/tmp/9229cf1e-7e66-4ac5-9705-ed80b5cdace7_fixed.java
index 49a5702..7cab303 100644
--- a/tmp/313fc720-7e00-4cda-897e-84ea247ad1e8_buggy.java
+++ b/tmp/9229cf1e-7e66-4ac5-9705-ed80b5cdace7_fixed.java
@@ -1,66 +1,91 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
     if (parent.getType() == Token.COMMA) {
       if (isResultUsed) {
+        // If 'n' is the last child of a COMMA and its result is used,
+        // then 'n' is useful.
         return;
       }
       if (n == parent.getLastChild()) {
+        // If 'n' is the last child of a COMMA, and its result is not used (isResultUsed is false),
+        // we need to check if the COMMA expression itself is at a statement-like position
+        // where its result is discarded (e.g., direct child of EXPR_RESULT or BLOCK).
+        // If the COMMA's result is used by an ancestor, then 'n' is useful.
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+          if (ancestorType == Token.COMMA) continue; // Skip intermediate COMMA ancestors
+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
+            // The COMMA's result is used by a non-statement parent.
+            return; // 'n' is useful in this context.
+          } else {
+            // The COMMA's result is discarded (ancestor is EXPR_RESULT or BLOCK).
+            // Proceed to the side-effect check for 'n'.
+            break;
           }
         }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
+      }
+      // If 'n' is NOT the last child of a COMMA, its result is always discarded by the COMMA operator.
+      // So, if its result is not used, it should fall through to the side-effect check.
+      // No 'return' here for this case.
+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK && parent.getType() != Token.COMMA) {
+      // This block handles cases where the parent is NOT an EXPR_RESULT, BLOCK, or COMMA.
+      // In general, if 'n' is a child of such a parent, its result is used by the parent.
+      // The only exceptions are specific positions within a FOR loop.
       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+        // If it's not a FOR loop initializer or increment, and its result wasn't explicitly used
+        // (isResultUsed was false), then 'n' is implicitly useful in this context.
         return;
       }
     }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+    // If we reach this point, it means 'n''s result is not explicitly used by its parent
+    // (isResultUsed was false), and it's in a context where a side-effect-free
+    // expression would be considered useless (e.g., direct child of EXPR_RESULT/BLOCK,
+    // a non-last child of COMMA, or a FOR loop initializer/increment).
+    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
\ No newline at end of file
