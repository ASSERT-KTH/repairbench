diff --git a/tmp/b42d9050-5744-4ee7-99bc-c10a0e3e37b1_buggy.java b/tmp/fe58a033-2e85-428b-88ec-7f3c3c1370b1_fixed.java
index 63a7c80..9f20a00 100644
--- a/tmp/b42d9050-5744-4ee7-99bc-c10a0e3e37b1_buggy.java
+++ b/tmp/fe58a033-2e85-428b-88ec-7f3c3c1370b1_fixed.java
@@ -1,77 +1,99 @@
     /**
      * Arranges the items within a container.
      *
      * @param container  the container.
-     * @param constraint  the constraint.
      * @param g2  the graphics device.
+     * @param constraint  the constraint.
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
+        
+        // Ensure initial height constraints are non-negative
+        double availableHeight = constraint.getHeight();
+
         if (this.topBlock != null) {
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                    new Range(0.0, availableHeight), // Max height for top block
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
-        w[1] = w[0];
+        
+        w[1] = w[0]; // Bottom block takes full container width
         if (this.bottomBlock != null) {
+            // Clamp available height to 0.0 to prevent negative range for bottom block
+            double bottomAvailableHeight = Math.max(0.0, availableHeight - h[0]);
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                    bottomAvailableHeight), LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        
+        // Calculate the height available for left, right, and center blocks
+        // Clamp to 0.0 to prevent negative fixed height
+        h[2] = Math.max(0.0, availableHeight - h[1] - h[0]);
+
         if (this.leftBlock != null) {
+            // Left block has fixed height h[2], max width is container width
             RectangleConstraint c3 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
+                    LengthConstraintType.RANGE, h[2], null, // Fixed height h[2] (clamped)
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
-        h[3] = h[2];
+        
+        h[3] = h[2]; // Right block takes the same fixed height as left/center
         if (this.rightBlock != null) {
+            // Right block has fixed height h[2], max width is remaining width
+            // Clamp to 0.0 to prevent negative range for right block
+            double rightAvailableWidth = Math.max(0.0, constraint.getWidth() - w[2]);
             RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
+                    new Range(0.0, rightAvailableWidth),
+                    LengthConstraintType.RANGE, h[2], null, // Fixed height h[2] (clamped)
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+        
+        h[4] = h[2]; // Center block takes the same fixed height as left/right
+        // Center block width is the total width minus space taken by left and right.
+        // Clamp to 0.0.
+        w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);
+        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); // Center block has fixed width and height (both clamped)
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
 
+        // Set bounds for the blocks
         if (this.topBlock != null) {
             this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                     h[0]));
         }
         if (this.bottomBlock != null) {
+            // Original calculation h[0] + h[2] correctly places the bottom block
+            // at constraint.getHeight() - h[1] given h[2] = constraint.getHeight() - h[0] - h[1]
             this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                     w[1], h[1]));
         }
         if (this.leftBlock != null) {
             this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                     h[2]));
         }
         if (this.rightBlock != null) {
             this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                     w[3], h[3]));
         }
         if (this.centerBlock != null) {
             this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                     h[4]));
         }
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     }
