diff --git a/tmp/93f42904-6cba-484e-aa85-7fa638801886_buggy.java b/tmp/42f633f0-6d3c-44d3-a0e9-fdda7fb6fe7e_fixed.java
index 63a7c80..48bf243 100644
--- a/tmp/93f42904-6cba-484e-aa85-7fa638801886_buggy.java
+++ b/tmp/42f633f0-6d3c-44d3-a0e9-fdda7fb6fe7e_fixed.java
@@ -1,77 +1,123 @@
     /**
      * Arranges the items within a container.
      *
      * @param container  the container.
      * @param constraint  the constraint.
      * @param g2  the graphics device.
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        double[] w = new double[5]; // Stores arranged widths: [full_width_for_top_bottom, bottom_width, left_width, right_width, center_width]
+        double[] h = new double[5]; // Stores arranged heights: [top_height, bottom_height, middle_height_for_LR_C, right_height, center_height]
+
+        // --- Arrange Top Block ---
+        w[0] = constraint.getWidth(); // Full width available for top and bottom blocks
+        double tempHeight = constraint.getHeight(); // Remaining height for subsequent vertical blocks
+
         if (this.topBlock != null) {
+            // Top block is given full width, and constrained by overall height.
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                    new Range(0.0, constraint.getHeight()), // Max height is container's fixed height
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
+            // Reduce available height for bottom/middle sections by top block's height
+            tempHeight = Math.max(0.0, tempHeight - h[0]);
         }
-        w[1] = w[0];
+
+        // --- Arrange Bottom Block ---
+        w[1] = w[0]; // Bottom block uses same full width as top
         if (this.bottomBlock != null) {
+            // Bottom block is given full width, and constrained by remaining height after top.
+            // Ensure remaining height for bottom block is not negative.
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                    tempHeight), // Use tempHeight (remaining after top) as upper bound
+                    LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
+            // Reduce available height for middle section by bottom block's height
+            tempHeight = Math.max(0.0, tempHeight - h[1]);
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        // --- Calculate Height for Left/Right/Center Blocks ---
+        // This is the remaining height after accounting for top and bottom blocks.
+        // It must be non-negative.
+        h[2] = tempHeight; // tempHeight now holds the height remaining for L/R/C
+
+        // --- Arrange Left Block ---
+        double tempWidth = constraint.getWidth(); // Remaining width for subsequent horizontal blocks
+
         if (this.leftBlock != null) {
+            // Left block is given remaining width after right, and fixed height h[2].
             RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
+                    new Range(0.0, constraint.getWidth()), // Max width is container's fixed width
+                    LengthConstraintType.RANGE, h[2], null, // Fixed height determined above
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
+            // Reduce available width for right/center sections by left block's width
+            tempWidth = Math.max(0.0, tempWidth - w[2]);
         }
-        h[3] = h[2];
+
+        // --- Arrange Right Block ---
+        h[3] = h[2]; // Right block uses same height as left/center
         if (this.rightBlock != null) {
+            // Right block is given remaining width after left, and fixed height h[2].
+            // Ensure remaining width for right block is not negative.
             RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
+                    new Range(0.0, tempWidth), // Use tempWidth (remaining after left) as upper bound
+                    LengthConstraintType.RANGE, h[2], null, // Fixed height determined above
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
+            // Reduce available width for center section by right block's width
+            tempWidth = Math.max(0.0, tempWidth - w[3]);
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+
+        // --- Calculate Width for Center Block ---
+        // This is the remaining width after accounting for left and right blocks.
+        // It must be non-negative.
+        w[4] = tempWidth; // tempWidth now holds the width remaining for center
+        h[4] = h[2]; // Center block uses same height as left/right
+
+        // --- Arrange Center Block ---
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
 
+        // --- Set Bounds for all Blocks ---
+        // Top block bounds
         if (this.topBlock != null) {
             this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                     h[0]));
         }
+        // Bottom block bounds
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], // Y-coordinate: top_height + middle_height
                     w[1], h[1]));
         }
+        // Left block bounds
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], // Y-coordinate: top_height
                     h[2]));
         }
+        // Right block bounds
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], // X-coordinate: left_width + center_width
                     w[3], h[3]));
         }
+        // Center block bounds
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], // X-coordinate: left_width, Y-coordinate: top_height
                     h[4]));
         }
+        
+        // Return the size specified by the input constraint, as this is an arrangeFF (Fixed-Fixed) method.
+        // The return value should match the fixed dimensions provided by the constraint.
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     }
\ No newline at end of file
