diff --git a/tmp/e3bf3d6d-bd4f-4e84-a23e-cb579c0ad930_buggy.java b/tmp/d4383a85-43b3-4bbb-9745-128778e19494_fixed.java
index 03b03d7..95ab988 100644
--- a/tmp/e3bf3d6d-bd4f-4e84-a23e-cb579c0ad930_buggy.java
+++ b/tmp/d4383a85-43b3-4bbb-9745-128778e19494_fixed.java
@@ -1,25 +1,45 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
+        // These variables hold local time values, not UTC instants.
+        long instantBeforeLocalProbe = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long instantAfterLocalProbe = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+
+        // This check attempts to identify if 'instant' is in a normal period, a gap, or an overlap.
+        // If instantBeforeLocalProbe == instantAfterLocalProbe, it implies a normal period.
+        // While the condition's robustness for detecting non-overlap/gap is debatable,
+        // the subsequent fixed call to convertLocalToUTC will correctly handle non-ambiguous cases.
+        if (instantBeforeLocalProbe == instantAfterLocalProbe) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        
+        // The third parameter of convertLocalToUTC(long instantLocal, boolean strict, long nonNullInstant)
+        // expects a UTC instant (nonNullInstant) to help resolve ambiguity.
+        // The original code passed local time values (instantAfterLocalProbe / instantBeforeLocalProbe),
+        // which is incorrect according to the method signature.
+        //
+        // To fix this, we need to pass a UTC instant that falls within the desired offset period.
+        // Adding/subtracting 3 hours from the original instant creates a UTC reference
+        // that is likely in the "later" or "earlier" offset context, respectively,
+        // assisting convertLocalToUTC in picking the correct ambiguous instant.
+        long nonNullReferenceInstant = earlierOrLater ? 
+                                       (instant + 3 * DateTimeConstants.MILLIS_PER_HOUR) : // Reference for the later offset
+                                       (instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);  // Reference for the earlier offset
+        
+        return convertLocalToUTC(local, false, nonNullReferenceInstant);
         
         // calculate result
           // currently in later offset
           // currently in earlier offset
     }
\ No newline at end of file
