diff --git a/tmp/82964c45-f343-498e-8c11-431aaef073a7_buggy.java b/tmp/49b64272-d0d9-49b0-9cac-cd05f189ca2a_fixed.java
index 03b03d7..12f93aa 100644
--- a/tmp/82964c45-f343-498e-8c11-431aaef073a7_buggy.java
+++ b/tmp/49b64272-d0d9-49b0-9cac-cd05f189ca2a_fixed.java
@@ -1,25 +1,39 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
-     * @param instant  the instant to adjust
+     * @param instant  the instant to adjust (UTC milliseconds)
      * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
+     * @return the adjusted instant millis (UTC milliseconds)
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
+        // These are local time milliseconds to detect transitions.
+        long instantBeforeLocal = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long instantAfterLocal = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        
+        if (instantBeforeLocal == instantAfterLocal) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
-        // work out range of instants that have duplicate local times
+        // work out local time corresponding to the given instant
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Determine the correct reference instant (UTC milliseconds) for convertLocalToUTC.
+        // This reference instant's offset will guide the conversion in an overlap.
+        long referenceInstantForConversion;
+        if (earlierOrLater) {
+            // To get the later offset, use a reference instant that is safely in the later offset period.
+            // Adding a day typically ensures we are past any daily transition.
+            referenceInstantForConversion = instant + DateTimeConstants.MILLIS_PER_DAY;
+        } else {
+            // To get the earlier offset, use a reference instant that is safely in the earlier offset period.
+            // Subtracting a day typically ensures we are before any daily transition.
+            referenceInstantForConversion = instant - DateTimeConstants.MILLIS_PER_DAY;
+        }
+        
+        // Convert the local time back to UTC, using the determined reference instant
+        // to pick the correct offset during an overlap.
+        return convertLocalToUTC(local, false, referenceInstantForConversion);
     }
\ No newline at end of file
