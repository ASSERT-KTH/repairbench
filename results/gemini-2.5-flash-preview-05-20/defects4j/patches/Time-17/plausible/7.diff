diff --git a/tmp/b4e90efb-d150-4b4b-81a3-0897a141c748_buggy.java b/tmp/99ce9283-a2dd-4149-85df-34a2a99fcdbe_fixed.java
index 03b03d7..0a53cdd 100644
--- a/tmp/b4e90efb-d150-4b4b-81a3-0897a141c748_buggy.java
+++ b/tmp/99ce9283-a2dd-4149-85df-34a2a99fcdbe_fixed.java
@@ -1,25 +1,28 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
+        long instantBeforeLocal = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long instantAfterLocal = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        if (instantBeforeLocal == instantAfterLocal) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // The preferredOffsetMillis parameter expects a UTC instant, not a local one.
+        // instant +/- 3 hours are appropriate UTC hints to pick the earlier/later offset.
+        long preferredUTC = earlierOrLater ?
+            (instant + 3 * DateTimeConstants.MILLIS_PER_HOUR) :
+            (instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+            
+        return convertLocalToUTC(local, false, preferredUTC);
     }
\ No newline at end of file
