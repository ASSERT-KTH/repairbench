diff --git a/tmp/07f6d5c1-eb0f-42a6-beaa-51a283c2c0c7_buggy.java b/tmp/b962295e-78e6-465c-9c5f-2001a73053fe_fixed.java
index 03b03d7..ecab711 100644
--- a/tmp/07f6d5c1-eb0f-42a6-beaa-51a283c2c0c7_buggy.java
+++ b/tmp/b962295e-78e6-465c-9c5f-2001a73053fe_fixed.java
@@ -1,25 +1,36 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        // These are local milliseconds, not UTC instants.
+        long instantBeforeLocal = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long instantAfterLocal = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        
+        // If the local times before and after a 6-hour window around 'instant' are the same,
+        // it means there's no DST change (overlap or gap) that affects this 'instant' in a significant way.
+        // In such a case, the instant is not ambiguous, so return it as is.
+        // (Less than indicates a gap, equal is normal case, greater than indicates an overlap
+        //  when comparing local times derived from surrounding UTC instants).
+        if (instantBeforeLocal == instantAfterLocal) {
+            return instant;  
         }
         
-        // work out range of instants that have duplicate local times
+        // Work out the local time corresponding to the original UTC instant.
+        // This local time might be ambiguous during an overlap (e.g., occurs twice).
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Adjust the offset to be the earlier or later one during an overlap.
+        // The convertLocalToUTC method takes a 'reference instant' to resolve ambiguities.
+        // As per DateTimeZone.convertLocalToUTC Javadoc, passing 0L will default to the earlier UTC instant,
+        // and passing Long.MAX_VALUE will default to the later UTC instant when local time is ambiguous.
+        long referenceInstantForConvertLocalToUTC = earlierOrLater ? Long.MAX_VALUE : 0L;
+        
+        return convertLocalToUTC(local, false, referenceInstantForConvertLocalToUTC);
     }
\ No newline at end of file
