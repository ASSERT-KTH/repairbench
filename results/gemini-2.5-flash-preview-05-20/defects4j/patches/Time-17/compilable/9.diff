diff --git a/tmp/a06f397e-8cf8-470d-8e4d-0d24a81787aa_buggy.java b/tmp/68dec548-f91d-4529-b777-62b7033d9049_fixed.java
index 03b03d7..71f2dd5 100644
--- a/tmp/a06f397e-8cf8-470d-8e4d-0d24a81787aa_buggy.java
+++ b/tmp/68dec548-f91d-4529-b777-62b7033d9049_fixed.java
@@ -1,25 +1,29 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // The third parameter 'preferredInstant' in convertLocalToUTC (which calls getMillisKeepLocal)
+        // expects a UTC instant. The original code passed local instants, which was incorrect.
+        // Using Long.MAX_VALUE or Long.MIN_VALUE as preferredInstant correctly forces getMillisKeepLocal
+        // to pick the later or earlier of the two ambiguous instants during an overlap.
+        return convertLocalToUTC(local, false, earlierOrLater ? Long.MAX_VALUE : Long.MIN_VALUE);
         
         // calculate result
           // currently in later offset
           // currently in earlier offset
     }
