diff --git a/tmp/55b039a1-5646-41d6-8b70-ab38fd29e02f_buggy.java b/tmp/5d8d0cb6-f412-4525-9705-1ecb90b2ca4a_fixed.java
index 03b03d7..ae5b95a 100644
--- a/tmp/55b039a1-5646-41d6-8b70-ab38fd29e02f_buggy.java
+++ b/tmp/5d8d0cb6-f412-4525-9705-1ecb90b2ca4a_fixed.java
@@ -1,25 +1,41 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        // evaluate if anything is happening over the 2-day period,
+        // if not then nothing to do.
+        // Changed to use getOffset for a more robust check of offset stability.
+        if (getOffset(instant - DateTimeConstants.MILLIS_PER_DAY) == getOffset(instant + DateTimeConstants.MILLIS_PER_DAY)) {
+            return instant;  // not an overlap or gap in the surrounding 2 days
         }
         
         // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long local = convertUTCToLocal(instant); // This gets the local time value for the input instant
+        
+        // Determine the hint for convertLocalToUTC.
+        // The original code passed local millis here, which was a bug.
+        // Calculate 'instantWithOffset' by adding the current UTC offset to the instant.
+        // This 'instantWithOffset' numerically represents the local time of 'instant',
+        // but when passed as a 'sourceInstant' to convertLocalToUTC, it's interpreted as a UTC hint.
+        long offset = getOffset(instant);
+        long instantWithOffset = instant + offset;
         
         // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        if (earlierOrLater) {
+            // We want the later offset in case of an overlap.
+            // Provide a hint slightly after the current instant's local value (interpreted as UTC)
+            // to guide convertLocalToUTC towards the later offset.
+            return convertLocalToUTC(local, false, instantWithOffset + 1);
+        } else {
+            // We want the earlier offset in case of an overlap.
+            // Provide a hint slightly before the current instant's local value (interpreted as UTC)
+            // to guide convertLocalToUTC towards the earlier offset.
+            return convertLocalToUTC(local, false, instantWithOffset - 1);
+        }
     }
\ No newline at end of file
