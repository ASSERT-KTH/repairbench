diff --git a/tmp/3828717d-8e89-498b-981d-674525c2c847_buggy.java b/tmp/7377f29a-1b13-4694-9138-20177989b318_fixed.java
index 03b03d7..24c9306 100644
--- a/tmp/3828717d-8e89-498b-981d-674525c2c847_buggy.java
+++ b/tmp/7377f29a-1b13-4694-9138-20177989b318_fixed.java
@@ -1,25 +1,26 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
+        // instantBefore and instantAfter here are local times
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // The original line was:
+        // return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // The 'false' for returnLatest was a bug, it should be 'earlierOrLater'.
+        // The third parameter (hint) should be the original 'instant' (UTC), not the local times instantBefore/After.
+        return convertLocalToUTC(local, earlierOrLater, instant);
     }
\ No newline at end of file
