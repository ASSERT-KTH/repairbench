diff --git a/tmp/2ad5abc4-a2bd-46f2-a560-50293005e14f_buggy.java b/tmp/fd402d58-de97-4bb1-9076-2e0b1c72bf0d_fixed.java
index 43937f5..2137a4c 100644
--- a/tmp/2ad5abc4-a2bd-46f2-a560-50293005e14f_buggy.java
+++ b/tmp/fd402d58-de97-4bb1-9076-2e0b1c72bf0d_fixed.java
@@ -1,3 +1,16 @@
-  private static boolean isReduceableFunctionExpression(Node n) {
-    return NodeUtil.isFunctionExpression(n);
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  if (isReduceableFunctionExpression(n)) { // Case 1: n is a direct FUNCTION node
+    reduceFunction(t, n);
+  } else if (n.isGetterDef() || n.isSetterDef()) { // Case 2: n is a GETTER_DEF/SETTER_DEF
+    Node functionNode = n.getLastChild(); // Get the actual FUNCTION node inside
+    if (isReduceableFunctionExpression(functionNode)) {
+      reduceFunction(t, functionNode); // reduceFunction is called with the FUNCTION node
+    }
+  } else if (n.isCall()) { // Case 3: n is a CALL node (e.g., an IIFE)
+    Node fn = n.getFirstChild(); // Get the function expression if it's an IIFE
+    if (isReduceableFunctionExpression(fn) && fn.isFunction()) {
+      reduceFunction(t, fn); // reduceFunction is called with the FUNCTION node
+    }
+  }
 }
\ No newline at end of file
