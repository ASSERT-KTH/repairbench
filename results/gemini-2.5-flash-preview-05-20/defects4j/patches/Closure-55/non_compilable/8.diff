diff --git a/tmp/ab85871f-026e-48c4-a579-d41e5744e6ea_buggy.java b/tmp/e3a3fd9d-f0a1-4600-abb0-9a2c039e54b7_fixed.java
index 43937f5..394ed10 100644
--- a/tmp/ab85871f-026e-48c4-a579-d41e5744e6ea_buggy.java
+++ b/tmp/e3a3fd9d-f0a1-4600-abb0-9a2c039e54b7_fixed.java
@@ -1,3 +1,21 @@
   private static boolean isReduceableFunctionExpression(Node n) {
-    return NodeUtil.isFunctionExpression(n);
+    // A function is considered "reducible" for rewriting purposes if it's a standard function expression
+    // and not part of an accessor property (getter or setter).
+    // Functions inside getter/setter definitions have special semantics and should not be treated
+    // as regular function expressions for inlining or similar transformations, as this can break the AST
+    // and lead to invalid code, as demonstrated by testIssue538.
+    if (!NodeUtil.isFunctionExpression(n)) {
+      // If it's not a function expression (Token.FUNCTION), it's not reducible.
+      return false;
+    }
+
+    // Check if the function expression is the child of a GETTER_DEF or SETTER_DEF node.
+    // If it is, it should not be reduced.
+    Node parent = n.getParent();
+    if (parent != null && (parent.isGetterDef() || parent.isSetterDef())) {
+      return false;
+    }
+
+    // Otherwise, it's a reduceable function expression.
+    return true;
   }
\ No newline at end of file
