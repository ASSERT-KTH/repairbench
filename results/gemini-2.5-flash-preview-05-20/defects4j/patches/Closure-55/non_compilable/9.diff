diff --git a/tmp/5ae6a74a-738d-4e31-957c-88668309aa37_buggy.java b/tmp/c5a291e8-f2c6-48f6-a4d9-ad78982de79c_fixed.java
index 43937f5..df0dfdf 100644
--- a/tmp/5ae6a74a-738d-4e31-957c-88668309aa37_buggy.java
+++ b/tmp/c5a291e8-f2c6-48f6-a4d9-ad78982de79c_fixed.java
@@ -1,3 +1,57 @@
   private static boolean isReduceableFunctionExpression(Node n) {
-    return NodeUtil.isFunctionExpression(n);
+    // Original implementation: return NodeUtil.isFunctionExpression(n);
+    // This correctly identifies direct function expressions (Token.FUNCTION).
+
+    // The test `testIssue538` involves object literal getters (e.g., `get name(){...}`).
+    // These are represented by `GETTER_DEF` nodes, which contain a `Token.FUNCTION` node as a child.
+    // The FunctionRewriter is expected to optimize these functions.
+    // If the compiler desugars `GETTER_DEF` nodes into `Object.defineProperty` calls
+    // (e.g., `Object.defineProperty(obj, 'name', { get: function(){...} })`) before
+    // FunctionRewriter runs, then `n` could be a `Token.CALL` node for `Object.defineProperty`.
+
+    // The error `java.lang.IllegalStateException: Expected function but was call Reference node CALL`
+    // suggests that somewhere, a `CALL` node is being processed where a `FUNCTION` node is expected.
+    // If this function (`isReduceableFunctionExpression`) is responsible for identifying
+    // all nodes that *contain* a reduceable function expression (even if `n` itself is not `Token.FUNCTION`),
+    // and if it returns `true` for such a `CALL` node, it would lead to the downstream error.
+    // The current `NodeUtil.isFunctionExpression(n)` returns `false` for `CALL` nodes, so it's not the cause.
+
+    // To address the `testIssue538` and the `CALL` error, this function needs to:
+    // 1. Identify direct function expressions (Token.FUNCTION).
+    // 2. Potentially identify `CALL` nodes that are `Object.defineProperty` calls which define getters/setters,
+    //    as these calls effectively represent a function definition that might be reducible.
+    //    By making `isReduceableFunctionExpression` return `true` for such `CALL` nodes, it signals
+    //    to the `FunctionRewriter` that it contains a reducible function, even if the rewriter
+    //    subsequently needs to extract the actual function node from the `CALL` structure.
+
+    if (NodeUtil.isFunctionExpression(n)) {
+      return true;
+    }
+
+    // Check if 'n' is a CALL node for `Object.defineProperty` which is defining a getter or setter.
+    // Example structure: `Object.defineProperty(obj, 'prop', { get: function() {...} })`
+    // n: CALL
+    //   child 0: GETPROP (Object.defineProperty) or NAME (defineProperty if global)
+    //   child 1: obj
+    //   child 2: prop
+    //   child 3: OBJECTLIT (descriptor)
+    if (n.isCall() && n.getChildCount() >= 4) { // Object.defineProperty takes at least 3 args + target
+      Node callee = n.getFirstChild();
+      if (callee != null && callee.matchesQualifiedName("Object.defineProperty")) {
+        Node descriptor = n.getChildAtIndex(3); // The descriptor object is the 4th child (index 3)
+        if (descriptor != null && descriptor.isObjectLit()) {
+          // Iterate through properties in the descriptor object
+          for (Node prop : descriptor.children()) {
+            // Check if it's a 'get' or 'set' property, and its value is a function expression
+            if (prop.isStringKey() && (prop.getString().equals("get") || prop.getString().equals("set"))) {
+              if (prop.hasChildren() && NodeUtil.isFunctionExpression(prop.getFirstChild())) {
+                return true; // This CALL node contains a reduceable function expression within its descriptor.
+              }
+            }
+          }
+        }
+      }
+    }
+
+    return false;
   }
\ No newline at end of file
