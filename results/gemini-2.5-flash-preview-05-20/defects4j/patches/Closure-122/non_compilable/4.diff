diff --git a/tmp/4d092160-e336-4dbe-9244-caed5697e67b_buggy.java b/tmp/50bbc210-ca12-4994-a7f8-66b25c416b1c_fixed.java
index 308b324..7d80271 100644
--- a/tmp/4d092160-e336-4dbe-9244-caed5697e67b_buggy.java
+++ b/tmp/50bbc210-ca12-4994-a7f8-66b25c416b1c_fixed.java
@@ -1,11 +1,27 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
    */
+  // Pattern to find JSDoc-like '@' tags in a non-JSDoc block comment.
+  // This pattern matches:
+  // - The start of the comment content (^) or a newline character (\n)
+  // - Followed by zero or more whitespace characters (\s*)
+  // - Followed by an optional asterisk (\*?) (escaped)
+  // - Followed by zero or more whitespace characters (\s*)
+  // - Followed by an at-sign (@)
+  private static final Pattern SUSPICIOUS_COMMENT_PATTERN =
+      Pattern.compile("(^|\\n)\\s*\\*?\\s*@");
+
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    String commentContent = comment.getValue();
+
+    // Check if the comment content matches the suspicious JSDoc-like pattern.
+    if (SUSPICIOUS_COMMENT_PATTERN.matcher(commentContent).find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
