diff --git a/tmp/738ab75f-3526-4a23-812b-ebaf12385c1d_buggy.java b/tmp/78937027-6823-4f04-aea4-3769302334fc_fixed.java
index 308b324..e6737ec 100644
--- a/tmp/738ab75f-3526-4a23-812b-ebaf12385c1d_buggy.java
+++ b/tmp/78937027-6823-4f04-aea4-3769302334fc_fixed.java
@@ -1,11 +1,38 @@
+import java.util.regex.Pattern; // Add this import if not already present
+
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // A comment is suspicious if it's a standard block comment (starts with /*, not /**)
+    // but contains JSDoc-like tags. JSDoc tags typically start with '@'.
+    // We analyze the content of the comment (comment.getValue()) to find these patterns.
+    // The comment.getValue() method returns the string between the /* and */.
+
+    String commentValue = comment.getValue();
+    if (commentValue == null) {
+      return; // Should not happen for valid comments, but a defensive check.
+    }
+
+    // This regular expression looks for an '@' symbol in the comment value
+    // that is preceded by:
+    // (?:^|\n) - The beginning of the string (^) or a newline character (\n).
+    // \s*     - Zero or more whitespace characters.
+    // \*?     - An optional asterisk character.
+    // \s*     - Zero or more whitespace characters.
+    // @       - The literal '@' character that marks a JSDoc tag.
+    //
+    // This pattern covers cases like:
+    // - `/* @param {string} name */` (value: " @param {string} name ")
+    // - `/*\n * @type {number}\n */` (value: "\n * @type {number}\n ")
+    // - `/*\n *@returns {void} */` (value: "\n *@returns {void} ")
+    // - `/* some text\n * @deprecated */` (value: " some text\n * @deprecated ")
+    Pattern jsdocTagPattern = Pattern.compile("(?:^|\\n)\\s*\\*?\\s*@");
+
+    if (jsdocTagPattern.matcher(commentValue).find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
