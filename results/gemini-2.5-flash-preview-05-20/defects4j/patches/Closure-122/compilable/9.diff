diff --git a/tmp/4fb955d1-0be2-4027-9439-ba2cf92eeac0_buggy.java b/tmp/b13911a8-33bc-49da-81f6-4e855e05167d_fixed.java
index 308b324..4be83d2 100644
--- a/tmp/4fb955d1-0be2-4027-9439-ba2cf92eeac0_buggy.java
+++ b/tmp/b13911a8-33bc-49da-81f6-4e855e05167d_fixed.java
@@ -1,11 +1,37 @@
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // JSDoc comments typically start with '/**'. Regular block comments start with '/*'.
+    // This function handles '/*' style comments. If such a comment contains JSDoc-like tags,
+    // it's considered suspicious because it might have been intended as JSDoc but missed the '/**' start.
+
+    // A JSDoc-like tag generally starts with '@' at the beginning of a line within the comment
+    // content (after stripping the '/*' and '*/' delimiters by comment.getValue()).
+    // This includes cases like:
+    // - '@tag' (at the very beginning of the comment content)
+    // - ' *@tag' (after a newline, with optional leading space and an optional '*' character)
+    // - ' * @tag' (after a newline, with optional leading space and an optional '*' character, then more space)
+    // - '  @tag' (after a newline, with leading spaces)
+
+    // Regex explanation:
+    // (?m) : Enable multiline mode. In this mode, '^' and '$' match the start/end of a line,
+    //        in addition to the start/end of the entire string.
+    // ^    : Matches the beginning of a line (due to (?m)).
+    // \\s* : Matches zero or more whitespace characters.
+    // \\*? : Matches zero or one literal '*' character (optional, to handle cases like " *@tag" or " * @tag").
+    // \\s* : Matches zero or more whitespace characters.
+    // @    : Matches the literal '@' character.
+    //
+    // This regex effectively checks for the presence of "@" at the start of any line within
+    // the comment's value, allowing for various common JSDoc formatting styles.
+    java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("(?m)^\\s*\\*?\\s*@");
+    java.util.regex.Matcher matcher = pattern.matcher(comment.getValue());
+
+    if (matcher.find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
