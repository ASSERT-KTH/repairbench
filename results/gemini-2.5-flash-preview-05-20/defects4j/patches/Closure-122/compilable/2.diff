diff --git a/tmp/65958f33-b8c8-4585-bf03-bdb213f192d1_buggy.java b/tmp/140d557a-da4e-42cf-b98d-54a09ff40cf7_fixed.java
index 308b324..2828078 100644
--- a/tmp/65958f33-b8c8-4585-bf03-bdb213f192d1_buggy.java
+++ b/tmp/140d557a-da4e-42cf-b98d-54a09ff40cf7_fixed.java
@@ -1,11 +1,32 @@
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // The original checks were too specific and did not correctly handle variations
+    // in comment formatting or the way `comment.getValue()` processes the comment
+    // content (e.g., stripping leading "/*", "*/", and often leading '*' characters
+    // on subsequent lines).
+
+    // A more robust approach is to use a regular expression to find any '@' tag
+    // that appears at the beginning of a line within the comment content,
+    // accounting for various leading whitespace and an optional '*' character
+    // that might have been removed by `getValue()`.
+    //
+    // Pattern breakdown:
+    // (?m) : Enable multiline mode, so '^' matches the start of each line.
+    // ^    : Matches the beginning of a line.
+    // \s*  : Matches zero or more whitespace characters.
+    // \*?  : Matches an optional asterisk (escaped for regex, since `getValue()`
+    //        might remove it from `* @`).
+    // \s*  : Matches zero or more whitespace characters.
+    // @    : Matches the literal '@' character.
+    java.util.regex.Pattern suspiciousCommentPattern =
+        java.util.regex.Pattern.compile("(?m)^\\s*\\*?\\s*@");
+
+    if (suspiciousCommentPattern.matcher(comment.getValue()).find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
