diff --git a/tmp/fd09ec39-8225-4cce-afd4-35361b123c41_buggy.java b/tmp/13935a6f-63d2-46d7-a07a-272207da7e8c_fixed.java
index 308b324..ed447c4 100644
--- a/tmp/fd09ec39-8225-4cce-afd4-35361b123c41_buggy.java
+++ b/tmp/13935a6f-63d2-46d7-a07a-272207da7e8c_fixed.java
@@ -1,11 +1,37 @@
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // JSDoc comments typically start with /**
+    // Block comments start with /*
+    // This function checks if a regular block comment (starting with /*) contains JSDoc-like tags.
+    // A JSDoc-like tag starts with '@' and can appear:
+    // 1. At the very beginning of the comment content (after '/*')
+    //    e.g., /*@type {number}*/  (comment.getValue() for this is "@type {number}")
+    // 2. On a new line, potentially with leading whitespace and an optional asterisk.
+    //    e.g., /*
+    //           * @type {number}
+    //           */  (comment.getValue() for this is "\n * @type {number}\n")
+    //    e.g., /*
+    //           *@type {number}
+    //           */  (comment.getValue() for this is "\n*@type {number}\n")
+
+    // The original checks `indexOf("/* @")` (which is always false as `/*` is not in `comment.getValue()`)
+    // and `indexOf("\n * @")` (which is too rigid about whitespace).
+
+    // The regex pattern covers these cases:
+    // ( ^ | \n )   : Matches either the start of the string (^) or a newline character (\n).
+    // \s*          : Matches zero or more whitespace characters.
+    // \*?          : Matches an optional asterisk character (*).
+    // \s*          : Matches zero or more whitespace characters.
+    // @            : Matches the literal '@' character.
+    java.util.regex.Pattern jsdocTagPattern = java.util.regex.Pattern.compile("(^|\\n)\\s*\\*?\\s*@");
+    java.util.regex.Matcher matcher = jsdocTagPattern.matcher(comment.getValue());
+
+    if (matcher.find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
