diff --git a/tmp/d819eb88-6ab7-45e1-90fc-9478c3172d45_buggy.java b/tmp/ff43e16c-63e2-4ba8-b36a-a4b46a6714bd_fixed.java
index 308b324..eaebfa3 100644
--- a/tmp/d819eb88-6ab7-45e1-90fc-9478c3172d45_buggy.java
+++ b/tmp/ff43e16c-63e2-4ba8-b36a-a4b46a6714bd_fixed.java
@@ -1,11 +1,25 @@
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // JSDoc-like comments often contain an '@' symbol on a new line,
+    // optionally preceded by a '*' and/or spaces, or at the very beginning of the comment content.
+    // The getValue() method usually returns the content between /* and */.
+
+    // Regex explanation:
+    // (?m) enables multiline mode, so '^' matches the start of the string AND the start of each line.
+    // (?:^|\n) matches either the very beginning of the string or a newline character.
+    // \s* matches zero or more whitespace characters.
+    // \*? matches an optional asterisk.
+    // \s* matches zero or more whitespace characters.
+    // @ matches the literal '@' character.
+    // This pattern broadly covers cases like: "@type", "\n@type", "\n *@type", "\n * @type", etc.
+    java.util.regex.Pattern JSDOC_LIKE_TAG_PATTERN = java.util.regex.Pattern.compile("(?m)(?:^|\\n)\\s*\\*?\\s*@");
+
+    if (JSDOC_LIKE_TAG_PATTERN.matcher(comment.getValue()).find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
