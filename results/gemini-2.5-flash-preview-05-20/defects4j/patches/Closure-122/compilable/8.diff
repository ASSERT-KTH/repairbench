diff --git a/tmp/8c6a8043-9f1e-4ff5-a1c3-1d05b82712d7_buggy.java b/tmp/dac1df35-f91e-465c-b9e5-e9fd96ceaf0e_fixed.java
index 308b324..9926215 100644
--- a/tmp/8c6a8043-9f1e-4ff5-a1c3-1d05b82712d7_buggy.java
+++ b/tmp/dac1df35-f91e-465c-b9e5-e9fd96ceaf0e_fixed.java
@@ -1,11 +1,33 @@
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    String value = comment.getValue();
+
+    // JSDoc comments typically use "@" tags.
+    // We check for two main patterns that indicate a JSDoc-like tag:
+    // 1. An "@" tag at the very beginning of the comment's content (after stripping leading whitespace).
+    //    Examples: "/*@type {number}*/", "/* @type {number}*/"
+    if (value.trim().startsWith("@")) {
+      errorReporter.warning(
+          SUSPICIOUS_COMMENT_WARNING,
+          sourceName,
+          comment.getLineno(), "", 0);
+      return; 
+    }
+
+    // 2. An "@" tag on a subsequent line, typically preceded by a "*" and optional whitespace.
+    //    The pattern looks for: newline, any amount of whitespace, literal asterisk,
+    //    any amount of whitespace, literal at-sign.
+    //    Examples: "/*\n * @type {number}*/", "/*\n *@type {number}*/",
+    //              "/*\n   *   @type {number}*/"
+    // We use a regular expression for this flexible matching.
+    java.util.regex.Pattern jsdocTagPattern = java.util.regex.Pattern.compile("\\n\\s*\\*\\s*@");
+    java.util.regex.Matcher matcher = jsdocTagPattern.matcher(value);
+    if (matcher.find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
\ No newline at end of file
