diff --git a/tmp/3e44d380-be3d-4fdc-806d-4b9ea05ce5c8_buggy.java b/tmp/42ee308c-b3f8-4ec8-a63c-836a99af8a6e_fixed.java
index 7e64f1d..a9e2bf8 100644
--- a/tmp/3e44d380-be3d-4fdc-806d-4b9ea05ce5c8_buggy.java
+++ b/tmp/42ee308c-b3f8-4ec8-a63c-836a99af8a6e_fixed.java
@@ -1,78 +1,130 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                String opt = Util.stripLeadingHyphens(arg); // e.g. "f=bar", "foo=bar", "Dproperty=value", "Dvalue"
 
+                // Check if the whole stripped argument (e.g., "foo=bar") is a known option.
+                // This covers cases where the option name itself is "foo=bar", which is unlikely but possible.
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    // Check for '=' sign (e.g., -f=bar, --foo=bar, -Dkey=value)
+                    int equalSign = arg.indexOf('=');
+
+                    if (equalSign != -1) // Argument contains '='
+                    {
+                        // Extract the part before '=' as the potential option name (stripped of hyphens)
+                        String optionName = Util.stripLeadingHyphens(arg.substring(0, equalSign)); // 'f', 'foo', 'Dproperty'
+                        String optionValue = arg.substring(equalSign + 1);      // 'bar', 'value'
+
+                        // If the part before '=' (e.g., "f", "foo") is a known option
+                        if (options.hasOption(optionName))
+                        {
+                            tokens.add(arg.substring(0, equalSign)); // Add the option part (e.g., "-f", "--foo")
+                            tokens.add(optionValue);                 // Add the value part (e.g., "bar")
+                        }
+                        // Handle the special "-Dkey=value" case according to rule 1:
+                        // where 'D' is an option, but 'Dkey' is not.
+                        // This applies to single-dash options with length > 2 (e.g., "-D...")
+                        else if (arg.startsWith("-") && !arg.startsWith("--") && arg.length() > 2)
+                        {
+                            String shortOptName = String.valueOf(arg.charAt(1)); // Extract 'D' from "-Dkey=value"
+                            if (options.hasOption(shortOptName)) // Check if 'D' is a known option
                             {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                                // This is a special property handling where the option is short (e.g., -D)
+                                // and the rest (e.g., 'key=value') is its value.
+                                tokens.add(arg.substring(0, 2)); // Add "-D"
+                                tokens.add(arg.substring(2));   // Add "key=value"
                             }
                             else
                             {
+                                // Not a recognized option with '=', not a recognized D-type option.
                                 eatTheRest = stopAtNonOption;
                                 tokens.add(arg);
                             }
                         }
+                        else
+                        {
+                            // If it had '=', but the part before '=' isn't a recognized option,
+                            // and it's not a special short D-type option.
+                            eatTheRest = stopAtNonOption;
+                            tokens.add(arg);
+                        }
+                    }
+                    else // Argument does not contain '=' (e.g., "-f", "--foo", "-Dvalue")
+                    {
+                        // This handles concatenated short options and their values, like '-Dvalue'.
+                        // Rule 1: "If an Option exists for the first character of the arguments entry AND an Option does not exist for the whole argument"
+                        // `options.hasOption(opt)` is already false (checked in the outer `else`).
+                        // Now, check if the first character after the hyphen is a known option.
+                        if (arg.length() > 1 && options.hasOption(String.valueOf(arg.charAt(1)))) // Checks if 'D' from "-Dvalue" is an option
+                        {
+                            tokens.add(arg.substring(0, 2)); // Add "-D"
+                            tokens.add(arg.substring(2));   // Add "value"
                         }
                         else
+                        {
+                            // If it's not a known option, and not a special concatenated value like -Dvalue
+                            eatTheRest = stopAtNonOption;
+                            tokens.add(arg);
+                        }
+                    }
+                }
+            }
+            else // Argument does not start with '-' (i.e., it's a non-option argument)
             {
                 tokens.add(arg);
             }
 
+            // If eatTheRest flag is set, add all remaining arguments as non-options.
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
