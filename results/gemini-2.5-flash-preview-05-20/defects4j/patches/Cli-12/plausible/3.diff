diff --git a/tmp/5236c1cf-5961-4e4b-8cd3-39785ac4117c_buggy.java b/tmp/6fbfe4af-5b8c-4bb7-9fa9-f4f5904e3da1_fixed.java
index 7e64f1d..9ccbb15 100644
--- a/tmp/5236c1cf-5961-4e4b-8cd3-39785ac4117c_buggy.java
+++ b/tmp/6fbfe4af-5b8c-4bb7-9fa9-f4f5904e3da1_fixed.java
@@ -1,78 +1,103 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
+                int equalsPos = arg.indexOf('=');
+                
+                // If an '=' is found, attempt to split the argument into option and value
+                // This handles --long=value, -short=value, -Dprop=value
+                if (equalsPos > -1)
+                {
+                    String optName = arg.substring(0, equalsPos); // e.g., "--foo", "-f", "-D"
+                    String optValue = arg.substring(equalsPos + 1); // e.g., "bar", "property=value"
+
+                    // Check if the part before '=' is a valid option (after stripping hyphens)
+                    if (options.hasOption(Util.stripLeadingHyphens(optName)))
+                    {
+                        tokens.add(optName); // Add the option token as it appeared in the arguments (e.g., "--foo")
+                        tokens.add(optValue); // Add the value token (e.g., "bar")
+                        continue; // Move to the next argument as this one has been fully processed
+                    }
+                }
+
+                // If no '=' was found, or if the part before '=' was not a valid option,
+                // then proceed with the original logic for other types of options/arguments.
+                
+                // This section now mirrors the original 'else if (arg.startsWith("-"))' block,
+                // but the 'equals' case is already handled above.
+                
                 String opt = Util.stripLeadingHyphens(arg); 
 
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    // This block handles the special properties option like "-Dfoo" where no '=' is present,
+                    // but a short option is combined with its argument.
+                    // The condition ensures it's a single hyphen and the prefix is a valid option.
+                    if (arg.length() > 1 && !arg.startsWith("--") && options.hasOption(arg.substring(0, 2)))
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        tokens.add(arg.substring(0, 2)); // Add "-D"
+                        tokens.add(arg.substring(2)); // Add "foo"
                     }
                     else
                     {
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
-            else
+            else // Argument does not start with '-'
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
