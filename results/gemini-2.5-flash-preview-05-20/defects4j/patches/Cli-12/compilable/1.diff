diff --git a/tmp/15b40b22-f7ae-41b5-b139-4beb1815fac5_buggy.java b/tmp/d4a7e027-57af-41e3-b0d3-2fdab5cc50e2_fixed.java
index 7e64f1d..e856e9b 100644
--- a/tmp/15b40b22-f7ae-41b5-b139-4beb1815fac5_buggy.java
+++ b/tmp/d4a7e027-57af-41e3-b0d3-2fdab5cc50e2_fixed.java
@@ -1,78 +1,94 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                int equalsPos = arg.indexOf('=');
 
-                if (options.hasOption(opt))
+                // Case 1: Option with value using an equals sign, like --foo=bar or -f=bar
+                // This also handles cases like -Dproperty=value if 'D' is a registered option
+                // and the intent is to treat 'property=value' as its argument.
+                if (equalsPos != -1 && equalsPos < arg.length() - 1) // Ensure '=' exists and is not the last character (i.e., value is not empty)
+                {
+                    String optName = arg.substring(0, equalsPos); // e.g., "-f" or "--foo"
+                    String optValue = arg.substring(equalsPos + 1); // e.g., "bar"
+
+                    // Check if the part before '=' (stripped of leading hyphens) is a valid option.
+                    if (options.hasOption(Util.stripLeadingHyphens(optName)))
+                    {
+                        tokens.add(optName);   // Add "-f" or "--foo"
+                        tokens.add(optValue);  // Add "bar"
+                        continue; // Argument processed, move to the next one
+                    }
+                }
+
+                // If we reach here, it means either:
+                // 1. No '=' was found in the argument (e.g., "-f", "--foo", "-Dkeyvalue").
+                // 2. An '=' was found, but the part before '=' was NOT a recognized option (e.g., "--unknown=value").
+                // In these cases, we fall back to checking the entire argument (stripped of hyphens).
+
+                String strippedArg = Util.stripLeadingHyphens(arg);
+
+                // Check if the entire stripped argument is a known option (e.g., "-f", "--foo")
+                if (options.hasOption(strippedArg))
                 {
                     tokens.add(arg);
                 }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
+                else // Unrecognized option
                 {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
-            }
-            else
+            else // Argument does not start with '-' (it's a non-option argument)
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
+                // Add the remaining arguments directly to the tokens list
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
