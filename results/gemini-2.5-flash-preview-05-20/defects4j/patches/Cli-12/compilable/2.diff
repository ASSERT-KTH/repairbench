diff --git a/tmp/d7b87be2-ff33-4ba6-9330-11ca6863de81_buggy.java b/tmp/d0508747-127b-4e2b-95a1-dd80be275e84_fixed.java
index 7e64f1d..d459dac 100644
--- a/tmp/d7b87be2-ff33-4ba6-9330-11ca6863de81_buggy.java
+++ b/tmp/d0508747-127b-4e2b-95a1-dd80be275e84_fixed.java
@@ -1,78 +1,115 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                // Find the index of the first '=' character
+                int equalSignIndex = arg.indexOf('=');
 
-                if (options.hasOption(opt))
+                // Case 1: Argument contains an '=' and it's not immediately after the hyphen(s)
+                if (equalSignIndex != -1 && equalSignIndex > 0) // e.g., "-f=bar", "--foo=bar"
                 {
-                    tokens.add(arg);
+                    // Extract the part before '=' as the potential option string (e.g., "-f", "--foo")
+                    String optionPart = arg.substring(0, equalSignIndex);
+                    // Extract the part after '=' as the value string (e.g., "bar", "property=value")
+                    String valuePart = arg.substring(equalSignIndex + 1);
+
+                    // Strip leading hyphens from the option part to check if it's a known option name
+                    String strippedOptionPart = Util.stripLeadingHyphens(optionPart);
+
+                    // If the stripped option part (e.g., "f", "foo", "D") is a registered option
+                    if (options.hasOption(strippedOptionPart))
+                    {
+                        // Add the option part with its original hyphens (e.g., "-f", "--foo", "-D")
+                        tokens.add(optionPart);
+                        // Add the value part
+                        tokens.add(valuePart);
                     }
                     else
                     {
-                    if (options.hasOption(arg.substring(0, 2)))
+                        // The part before '=' is not a known option. Treat the whole argument as unrecognized.
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg);
+                    }
+                }
+                else // Case 2: Argument does not contain an '=' or it's malformed (e.g., "=foo", "-=foo")
+                {
+                    // This is the original logic for options without equals, or the "-D" special case.
+                    String opt = Util.stripLeadingHyphens(arg); // e.g., "f", "foo", "Dkey"
+
+                    if (options.hasOption(opt)) // e.g., for "-f" or "--foo" where 'f'/'foo' is a defined option
+                    {
+                        tokens.add(arg);
+                    }
+                    else // The entire `opt` (e.g., "Dkey") is not a registered option.
+                    {
+                        // Apply the special rule for "-D" or similar cases where the first character forms an option,
+                        // and the rest is its value, without an explicit '='.
+                        // This corresponds to Rule 1 in the Javadoc.
+                        if (arg.length() > 1 && options.hasOption(arg.substring(0, 2)))
                         {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                            // Example: "-Dproperty" where 'D' is an option and 'property' is its value.
+                            tokens.add(arg.substring(0, 2)); // Add e.g., "-D"
+                            tokens.add(arg.substring(2));    // Add e.g., "property"
                         }
                         else
                         {
+                            // Not a recognized option, not a special short-option-with-value case.
+                            // Treat as an unrecognized option or stop parsing if stopAtNonOption is true.
                             eatTheRest = stopAtNonOption;
                             tokens.add(arg);
                         }
                     }
                 }
-            else
+            }
+            else // Argument does not start with a hyphen, so it's a regular argument.
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
