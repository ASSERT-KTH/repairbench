diff --git a/tmp/c8e056b3-e22d-4b3a-bdd5-1a0327b6f0b6_buggy.java b/tmp/9ea85935-429c-4105-bc9a-95d1ba57b09f_fixed.java
index 7e64f1d..d136f4b 100644
--- a/tmp/c8e056b3-e22d-4b3a-bdd5-1a0327b6f0b6_buggy.java
+++ b/tmp/9ea85935-429c-4105-bc9a-95d1ba57b09f_fixed.java
@@ -1,78 +1,108 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                String opt = Util.stripLeadingHyphens(arg); // e.g., "foo=bar", "f=bar", "foo", "f", "Dproperty=value"
 
-                if (options.hasOption(opt))
+                // Check for options with attached values like `--foo=bar`, `-f=bar`, `-Dproperty=value`
+                int equalSignPos = opt.indexOf('='); 
+
+                if (equalSignPos != -1) // If there is an '=' in the stripped part
                 {
-                    tokens.add(arg);
+                    String optionName = opt.substring(0, equalSignPos);    // e.g., "foo", "f", "D"
+                    String optionValue = opt.substring(equalSignPos + 1); // e.g., "bar", "property=value"
+
+                    if (options.hasOption(optionName))
+                    {
+                        // The part before '=' is a known option.
+                        // Reconstruct the original hyphenated option part (e.g., "--foo", "-f", "-D")
+                        String originalOptionPrefix = arg.substring(0, arg.length() - opt.length());
+                        tokens.add(originalOptionPrefix + optionName); // Add the option part
+                        tokens.add(optionValue);                       // Add the value part
                     }
                     else
                     {
-                    if (options.hasOption(arg.substring(0, 2)))
+                        // The part before '=' is not a known option. Treat the whole argument as a single token.
+                        // This handles cases like `--unrecognized=value` or `-unrecognized=value`.
+                        // The GnuParser usually treats these as unrecognized options.
+                        tokens.add(arg);
+                        // Do not set eatTheRest here, as it's still a hyphenated argument, not a non-option.
+                        // If it were a truly unrecognized option, the GnuParser itself would throw UnrecognizedOptionException.
+                    }
+                }
+                else if (options.hasOption(opt)) // Original logic for standalone options like `--foo` or `-f`
+                {
+                    tokens.add(arg);
+                }
+                else // `opt` is not a known option, and no '=' was found in `opt`.
+                {
+                    // This handles cases like `-fvalue` (short option with attached value, no '=')
+                    // or `-Dkey` (property option where 'D' is the option and 'key' is the value).
+                    // This is based on Rule 1 in the Javadoc.
+                    if (arg.length() >= 2 && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2))))
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        tokens.add(arg.substring(0, 2)); // Add the option part (e.g., "-D" or "-f")
+                        tokens.add(arg.substring(2));   // Add the remaining part as value (e.g., "key" or "value")
                     }
                     else
                     {
+                        // Unrecognized option starting with hyphen, or other specific rule not matched.
+                        // In GnuParser, if `stopAtNonOption` is true, an unrecognized option (starting with -) will stop flattening.
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
-            else
+            else // This means the argument does not start with a hyphen (e.g., "file.txt" or "value")
             {
                 tokens.add(arg);
+                eatTheRest = stopAtNonOption; // This is a non-option, so stop flattening if `stopAtNonOption` is true.
             }
 
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
