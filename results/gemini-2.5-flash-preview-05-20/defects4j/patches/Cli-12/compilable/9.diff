diff --git a/tmp/a1e21dd5-d8fd-44a8-a32d-f2c00a645a5c_buggy.java b/tmp/6304ca47-ea37-4564-a61d-c51afe151f1d_fixed.java
index 7e64f1d..713e5f5 100644
--- a/tmp/a1e21dd5-d8fd-44a8-a32d-f2c00a645a5c_buggy.java
+++ b/tmp/6304ca47-ea37-4564-a61d-c51afe151f1d_fixed.java
@@ -1,78 +1,124 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                String opt;
+                String value = null;
+                int equalSignIndex = arg.indexOf('=');
 
+                // Check if the argument contains an equals sign, indicating a value is attached
+                if (equalSignIndex != -1)
+                {
+                    // Split the argument into the option part and the value part
+                    opt = arg.substring(0, equalSignIndex); // e.g., "-f", "--foo"
+                    value = arg.substring(equalSignIndex + 1); // e.g., "bar"
+
+                    // Check if the stripped option name (e.g., "f", "foo") is a known option
+                    if (options.hasOption(Util.stripLeadingHyphens(opt)))
+                    {
+                        // If it's a known option, add the option and its value as separate tokens
+                        tokens.add(opt);    // Add the option part (e.g., "-f", "--foo")
+                        tokens.add(value);  // Add the value part (e.g., "bar")
+                    }
+                    else
+                    {
+                        // If the option part before '=' is not recognized, treat the whole argument
+                        // as a non-option or unrecognized option.
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg);
+                    }
+                }
+                else // Argument does not contain '=', e.g., "-f", "--foo", "-D"
+                {
+                    // Get the stripped option name (e.g., "f", "foo", "D")
+                    opt = Util.stripLeadingHyphens(arg);
+
+                    // Check if the stripped option name is a known option
                     if (options.hasOption(opt))
                     {
+                        // If it's a known option without an attached value, add it as is
                         tokens.add(arg);
                     }
                     else
                     {
-                    if (options.hasOption(arg.substring(0, 2)))
+                        // This block handles special cases like "-Dproperty=value" where
+                        // '-D' acts as the option and 'property=value' is its argument.
+                        // Rule 1: "If an Option exists for the first character of the arguments entry
+                        // AND an Option does not exist for the whole argument then
+                        // add the first character as an option to the processed tokens list e.g. "-D"
+                        // and add the rest of the entry to the also."
+
+                        // Check if the argument has at least two characters (e.g., "-D")
+                        // AND if the character immediately following the leading hyphen(s)
+                        // is a recognized option (e.g., 'D' for "-D").
+                        // The original code `options.hasOption(arg.substring(0, 2))` was problematic
+                        // because `hasOption` expects the option's name ("D"), not its prefixed string ("-D").
+                        if (arg.length() > 1 && options.hasOption(String.valueOf(arg.charAt(1))))
                         {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                            tokens.add(arg.substring(0, 2)); // Add the option prefix (e.g., "-D")
+                            tokens.add(arg.substring(2));    // Add the rest of the argument (e.g., "property=value")
                         }
                         else
                         {
+                            // If it's not a known option and not a special properties option,
+                            // treat it as a non-option argument or unrecognized option.
                             eatTheRest = stopAtNonOption;
                             tokens.add(arg);
                         }
                     }
                 }
-            else
+            }
+            else // Not starting with '-' (regular argument)
             {
                 tokens.add(arg);
             }
 
+            // If eatTheRest is true (due to encountering "--" or a non-option with stopAtNonOption),
+            // add all remaining arguments directly without further processing.
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
