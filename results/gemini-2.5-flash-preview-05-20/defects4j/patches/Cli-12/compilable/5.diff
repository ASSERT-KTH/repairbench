diff --git a/tmp/34a55d6c-b70f-47e1-b4b9-8f7e4aabd86b_buggy.java b/tmp/f4f3ef63-f28a-4a34-8964-6deaea2e9d33_fixed.java
index 7e64f1d..9e507ca 100644
--- a/tmp/34a55d6c-b70f-47e1-b4b9-8f7e4aabd86b_buggy.java
+++ b/tmp/f4f3ef63-f28a-4a34-8964-6deaea2e9d33_fixed.java
@@ -1,78 +1,106 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                // Strip leading hyphens for option name lookup, but keep original 'arg' for splitting
+                String strippedArg = Util.stripLeadingHyphens(arg); 
 
-                if (options.hasOption(opt))
+                int equalSignPos = arg.indexOf('=');
+
+                // Case 1: Argument contains an equals sign (e.g., --foo=bar, -f=value, -Dkey=value)
+                if (equalSignPos != -1)
                 {
-                    tokens.add(arg);
+                    String optionNamePart = arg.substring(0, equalSignPos); // e.g., "--foo", "-f", "-D"
+                    String optionValuePart = arg.substring(equalSignPos + 1); // e.g., "bar", "value", "key=value"
+
+                    // Check if the part before '=' (stripped of hyphens) is a known option.
+                    // This covers --longopt=value, -shortopt=value, and -Dkey=value if 'D' is a registered option.
+                    if (options.hasOption(Util.stripLeadingHyphens(optionNamePart)))
+                    {
+                        tokens.add(optionNamePart); // Add the option name part (e.g., "--foo", "-f", "-D")
+                        tokens.add(optionValuePart); // Add the value part (e.g., "bar", "value", "key=value")
                     }
                     else
                     {
-                    if (options.hasOption(arg.substring(0, 2)))
+                        // It has an '=', but the option part before '=' is not recognized.
+                        // Treat the whole argument as unrecognized.
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg);
+                    }
+                }
+                // Case 2: Argument does not contain an equals sign, but is a direct option (e.g., -f, --foo)
+                else if (options.hasOption(strippedArg))
+                {
+                    tokens.add(arg);
+                }
+                // Case 3: Special GNU-like handling for options like "-Dkey" (rule 1 from Javadoc)
+                // "If an Option exists for the first character of the arguments entry AND an Option does not exist for the whole argument"
+                // Example: for "-Dkey", check if option 'D' exists AND "Dkey" is not a recognized option.
+                // If so, split into "-D" and "key".
+                else if (arg.length() > 1 && // Ensure there's a character after the initial hyphen (e.g., "-D")
+                         options.hasOption(String.valueOf(arg.charAt(1))) && // Check if the single character (e.g., 'D') is a registered option
+                         !options.hasOption(strippedArg)) // Ensure the whole stripped argument (e.g., "Dkey") is not a registered option itself
                 {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                    tokens.add(arg.substring(0, 2)); // Add the first two characters (e.g., "-D")
+                    tokens.add(arg.substring(2));    // Add the rest (e.g., "key")
                 }
+                // Case 4: None of the above - Unrecognized option or a non-option (that might stop parsing)
                 else
                 {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
-            }
-            else
+            else // Not starting with '-', so it's a non-option argument
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
+                // Add all remaining arguments as non-options.
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
