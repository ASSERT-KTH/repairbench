diff --git a/tmp/c993d2b5-1896-44de-8b5e-a8c24d3a3144_buggy.java b/tmp/20829fbd-18bb-4963-9d93-f84d7258abf0_fixed.java
index 7e64f1d..02d22a1 100644
--- a/tmp/c993d2b5-1896-44de-8b5e-a8c24d3a3144_buggy.java
+++ b/tmp/20829fbd-18bb-4963-9d93-f84d7258abf0_fixed.java
@@ -1,78 +1,113 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
                 String opt = Util.stripLeadingHyphens(arg);
 
-                if (options.hasOption(opt))
+                // Check for options with equals sign (e.g., --foo=bar, -f=bar, -Dprop=value)
+                int equals = opt.indexOf('=');
+                if (equals != -1)
                 {
-                    tokens.add(arg);
+                    String optName = opt.substring(0, equals);
+                    String optValue = opt.substring(equals + 1);
+
+                    // Determine the original prefix (single or double dash)
+                    // The substring call here needs to be careful: arg.length() - opt.length()
+                    // gives the length of the prefix.
+                    String prefix = arg.substring(0, arg.length() - opt.length());
+
+                    // If 'optName' is a registered option (e.g., "foo", "f", "D"), split it.
+                    if (options.hasOption(optName))
+                    {
+                        tokens.add(prefix + optName); // Add "--foo" or "-f" or "-D"
+                        tokens.add(optValue);         // Add "bar" or "property=value"
                     }
                     else
                     {
-                    if (options.hasOption(arg.substring(0, 2)))
+                        // If 'optName' itself is not a known option, treat the whole arg as unrecognized
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg);
+                    }
+                }
+                else // No '=' in the option string (e.g., -D, --foo, -f, -Dprop, -fvalue)
+                {
+                    if (options.hasOption(opt)) // E.g., options.hasOption("foo") for "--foo", or "f" for "-f"
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        tokens.add(arg);
+                    }
+                    // This handles short options with attached arguments, like "-Dprop" or "-fvalue"
+                    // It applies if arg starts with a single dash, is longer than 2 chars (e.g., "-fX"),
+                    // and the *first character* of the stripped option is a known option.
+                    else if (arg.startsWith("-") && arg.length() > 2 && !arg.startsWith("--"))
+                    {
+                        String firstChar = String.valueOf(opt.charAt(0));
+                        if (options.hasOption(firstChar))
+                        {
+                            tokens.add(arg.substring(0, 2)); // e.g., "-D" or "-f"
+                            tokens.add(opt.substring(1));    // e.g., "prop" or "value"
                         }
                         else
                         {
                             eatTheRest = stopAtNonOption;
                             tokens.add(arg);
                         }
                     }
+                    else // Unrecognized single token (e.g., "--unknown", "-unknown")
+                    {
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg);
+                    }
+                }
             }
-            else
+            else // Not starting with '-' (a non-option argument)
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
