diff --git a/tmp/f92b6ddf-1206-44b8-b0ab-e66dd8dd48f5_buggy.java b/tmp/c0408dff-f709-4990-aae2-be511bf45241_fixed.java
index 7e64f1d..5ac2803 100644
--- a/tmp/f92b6ddf-1206-44b8-b0ab-e66dd8dd48f5_buggy.java
+++ b/tmp/c0408dff-f709-4990-aae2-be511bf45241_fixed.java
@@ -1,78 +1,112 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                int equalsPos = arg.indexOf('=');
 
-                if (options.hasOption(opt))
+                // Case 1: Argument contains an equals sign (e.g., "--foo=bar", "-f=bar", "-Dprop=value")
+                if (equalsPos != -1 && equalsPos > 0) // Ensure '=' exists and is not at the very beginning
                 {
-                    tokens.add(arg);
+                    String optionToken = arg.substring(0, equalsPos); // e.g., "-f", "--foo", "-D"
+                    String optionValue = arg.substring(equalsPos + 1); // e.g., "bar", "prop=value"
+
+                    // Strip hyphens to check against defined options (e.g., "f", "foo", "D")
+                    String strippedOptionName = Util.stripLeadingHyphens(optionToken);
+
+                    if (options.hasOption(strippedOptionName))
+                    {
+                        tokens.add(optionToken); // Add the option part (e.g., "-f", "--foo")
+                        tokens.add(optionValue); // Add the value part (e.g., "bar")
+                    }
+                    else
+                    {
+                        // Not a recognized option with '=' (e.g., "--unknown=value").
+                        // Treat as an unrecognized token.
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg); // Add the full unrecognized token
+                    }
                 }
+                // Case 2: Argument does not contain an equals sign (e.g., "-f", "--foo", "-Dprop", "-abc")
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    String strippedArg = Util.stripLeadingHyphens(arg); // e.g., "f", "foo", "Dprop", "abc"
+
+                    // Javadoc Rule 1: Special handling for short options that take an argument directly appended (e.g., "-DpropertyName")
+                    // "If an Option exists for the first character of the arguments entry AND an Option does not exist for the whole argument"
+                    // Example: arg is "-DpropertyName". 'D' is an option, but "DpropertyName" is not.
+                    // This applies only to short options (single hyphen, not double).
+                    if (arg.length() > 1 && !arg.startsWith("--") && options.hasOption(arg.substring(1, 2)) && !options.hasOption(strippedArg))
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        // The option character is `arg.charAt(1)` (e.g., 'D')
+                        // The rest `arg.substring(2)` is its argument (e.g., "propertyName")
+                        tokens.add(arg.substring(0, 2)); // Add the option token itself (e.g., "-D")
+                        tokens.add(arg.substring(2));   // Add the argument value (e.g., "propertyName")
                     }
+                    // Case 2.1: Standard recognized option (e.g., "-f", "--foo", "--version")
+                    else if (options.hasOption(strippedArg))
+                    {
+                        tokens.add(arg);
+                    }
+                    // Case 2.2: Unrecognized option or bundled short options like "-abc".
+                    // The GnuParser is expected to handle the unbundling of short options later.
                     else
                     {
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
-            else
+            else // Argument does not start with '-' (e.g., "file.txt")
             {
                 tokens.add(arg);
             }
 
+            // If a '--' was encountered or stopAtNonOption is true and a non-option was found
             if (eatTheRest)
             {
+                // Add all remaining arguments without further processing
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
