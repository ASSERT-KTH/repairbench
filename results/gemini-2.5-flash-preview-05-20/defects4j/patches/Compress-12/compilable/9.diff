diff --git a/tmp/ddde4712-636f-4b5a-a898-b588c39692bc_buggy.java b/tmp/bd8a58e4-69f3-4fc0-8854-5cd4fa6e77d2_fixed.java
index b5a206b..f7a01b3 100644
--- a/tmp/ddde4712-636f-4b5a-a898-b588c39692bc_buggy.java
+++ b/tmp/bd8a58e4-69f3-4fc0-8854-5cd4fa6e77d2_fixed.java
@@ -1,80 +1,91 @@
     /**
      * Get the next entry in this tar archive. This will skip
      * over any remaining data in the current entry, if there
      * is one, and place the input stream at the header of the
      * next entry, and read the header and instantiate a new
      * TarEntry from the header bytes and return that entry.
      * If there are no more entries in the archive, null will
      * be returned to indicate that the end of the archive has
      * been reached.
      *
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
     public TarArchiveEntry getNextTarEntry() throws IOException {
+        try {
             if (hasHitEOF) {
                 return null;
             }
 
             if (currEntry != null) {
                 long numToSkip = entrySize - entryOffset;
 
                 while (numToSkip > 0) {
                     long skipped = skip(numToSkip);
                     if (skipped <= 0) {
+                        // This RuntimeException will now be caught and wrapped in an IOException
                         throw new RuntimeException("failed to skip current tar entry");
                     }
                     numToSkip -= skipped;
                 }
 
                 readBuf = null;
             }
 
             byte[] headerBuf = getRecord();
 
             if (hasHitEOF) {
                 currEntry = null;
                 return null;
             }
 
+            // The TarArchiveEntry constructor can throw IllegalArgumentException (a RuntimeException)
+            // if the header is malformed. This will now be caught and wrapped.
             currEntry = new TarArchiveEntry(headerBuf);
             entryOffset = 0;
             entrySize = currEntry.getSize();
 
             if (currEntry.isGNULongNameEntry()) {
                 // read in the name
                 StringBuffer longName = new StringBuffer();
                 byte[] buf = new byte[SMALL_BUFFER_SIZE];
                 int length = 0;
                 while ((length = read(buf)) >= 0) {
                     longName.append(new String(buf, 0, length));
                 }
+                // Recursive call to getNextEntry(). If it throws a RuntimeException,
+                // it will propagate up to this outer try-catch block.
                 getNextEntry(); 
                 if (currEntry == null) {
                     // Bugzilla: 40334
                     // Malformed tar file - long entry name not followed by entry
                     return null;
                 }
                 // remove trailing null terminator
                 if (longName.length() > 0
                     && longName.charAt(longName.length() - 1) == 0) {
                     longName.deleteCharAt(longName.length() - 1);
                 }
                 currEntry.setName(longName.toString());
             }
 
             if (currEntry.isPaxHeader()){ // Process Pax headers
                 paxHeaders();
             }
 
             if (currEntry.isGNUSparse()){ // Process sparse files
                 readGNUSparse();
             }
 
             // If the size of the next element in the archive has changed
             // due to a new size being reported in the posix header
             // information, we update entrySize here so that it contains
             // the correct value.
             entrySize = currEntry.getSize();
             return currEntry;
+        } catch (RuntimeException e) {
+            // Catch any RuntimeException (including IllegalArgumentException from TarArchiveEntry
+            // constructor or the "failed to skip" RuntimeException) and wrap it in an IOException.
+            throw new IOException("error reading TarEntry", e);
+        }
     }
\ No newline at end of file
