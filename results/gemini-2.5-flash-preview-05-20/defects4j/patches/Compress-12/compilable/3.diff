diff --git a/tmp/9d901521-595d-4813-a15e-d47352e68f8f_buggy.java b/tmp/8812128f-4314-4598-ad30-4fca273c9ad5_fixed.java
index b5a206b..01ae7f9 100644
--- a/tmp/9d901521-595d-4813-a15e-d47352e68f8f_buggy.java
+++ b/tmp/8812128f-4314-4598-ad30-4fca273c9ad5_fixed.java
@@ -1,80 +1,134 @@
     /**
      * Get the next entry in this tar archive. This will skip
      * over any remaining data in the current entry, if there
      * is one, and place the input stream at the header of the
      * next entry, and read the header and instantiate a new
      * TarEntry from the header bytes and return that entry.
      * If there are no more entries in the archive, null will
      * be returned to indicate that the end of the archive has
      * been reached.
      *
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
     public TarArchiveEntry getNextTarEntry() throws IOException {
         if (hasHitEOF) {
             return null;
         }
 
         if (currEntry != null) {
             long numToSkip = entrySize - entryOffset;
-
+            if (numToSkip > 0) { // Only skip if there's remaining data/padding
                 while (numToSkip > 0) {
                     long skipped = skip(numToSkip);
                     if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip current tar entry");
+                        // This indicates an issue, possibly a corrupt archive
+                        // or that skip did not make progress.
+                        throw new IOException("Failed to skip current tar entry, entrySize=" + entrySize + ", entryOffset=" + entryOffset + ", numToSkip=" + numToSkip);
                     }
                     numToSkip -= skipped;
                 }
-
-            readBuf = null;
+            }
+            readBuf = null; // Clear internal buffer to ensure next getRecord() reads new block
         }
 
-        byte[] headerBuf = getRecord();
+        byte[] headerBuf = getRecord(); // Read the potential header for the *next* entry
 
         if (hasHitEOF) {
             currEntry = null;
             return null;
         }
 
-        currEntry = new TarArchiveEntry(headerBuf);
+        currEntry = new TarArchiveEntry(headerBuf); // Tentatively create current entry
         entryOffset = 0;
-        entrySize = currEntry.getSize();
+        entrySize = currEntry.getSize(); // Size of this entry
 
+        // Special handling for GNU long name entries and Pax headers.
+        // These are metadata entries that describe the *next* actual entry.
+        // The common pattern is to read their content, skip their padding,
+        // then read the actual entry's header in the same method invocation.
         if (currEntry.isGNULongNameEntry()) {
-            // read in the name
+            // Read the long name content.
             StringBuffer longName = new StringBuffer();
             byte[] buf = new byte[SMALL_BUFFER_SIZE];
             int length = 0;
+            // The 'read' method limits itself to entrySize, so this loop will stop naturally.
             while ((length = read(buf)) >= 0) {
                 longName.append(new String(buf, 0, length));
             }
-            getNextEntry();
-            if (currEntry == null) {
-                // Bugzilla: 40334
-                // Malformed tar file - long entry name not followed by entry
+
+            // After reading the long name content, ensure the stream is aligned to the next 512-byte block.
+            // entryOffset should equal entrySize here if fully read.
+            long numPadBytes = (512 - (entrySize % 512)) % 512;
+            if (numPadBytes > 0) {
+                long skipped = skip(numPadBytes);
+                if (skipped != numPadBytes) {
+                    throw new IOException("Failed to skip padding for GNU long name entry. Expected " + numPadBytes + ", skipped " + skipped);
+                }
+            }
+            readBuf = null; // Clear internal buffer to ensure getRecord() reads new block
+            
+            // Now, read the header of the *actual* entry described by the long name.
+            headerBuf = getRecord();
+            if (hasHitEOF) {
+                currEntry = null;
                 return null;
             }
-            // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
+            currEntry = new TarArchiveEntry(headerBuf); // This is now the actual entry
+            entryOffset = 0;
+            entrySize = currEntry.getSize(); // Update entrySize for the actual entry
+
+            // Apply the long name to the newly read actual entry
+            if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) {
                 longName.deleteCharAt(longName.length() - 1);
             }
             currEntry.setName(longName.toString());
+
+        } else if (currEntry.isPaxHeader()){ // Process Pax headers
+            // Assuming paxHeaders() reads the content of the PaxHeader entry and
+            // internally stores the parsed headers (e.g., in a map accessible later or modifies currEntry).
+            paxHeaders(); // Reads content of the pax header entry itself
+
+            // After reading the pax header content, ensure the stream is aligned to the next 512-byte block.
+            // entrySize here is still the size of the PaxHeader entry itself.
+            long numPadBytes = (512 - (entrySize % 512)) % 512;
+            if (numPadBytes > 0) {
+                long skipped = skip(numPadBytes);
+                if (skipped != numPadBytes) {
+                    throw new IOException("Failed to skip padding for Pax header entry. Expected " + numPadBytes + ", skipped " + skipped);
+                }
             }
+            readBuf = null; // Clear internal buffer for new header
+
+            // Read the header of the *actual* entry described by the Pax headers.
+            headerBuf = getRecord();
+            if (hasHitEOF) {
+                currEntry = null;
+                return null;
+            }
+            TarArchiveEntry nextEntry = new TarArchiveEntry(headerBuf); // This is the actual entry
+
+            // Apply collected pax headers to the actual entry.
+            // This assumes paxHeaders() method sets up necessary internal state,
+            // or modifies the current currEntry object such that it applies to the next entry.
+            // A typical implementation would involve `nextEntry.applyPaxHeadersToEntry(someCollectedMap);`
+            // Given the original void `paxHeaders()` call and subsequent checks on `currEntry`,
+            // we assume `paxHeaders()` implicitly applies headers to the entry being processed.
+            // The critical part here is replacing `currEntry` with `nextEntry`.
+            currEntry = nextEntry; // Replace currEntry with the actual entry
+            entryOffset = 0;
+            entrySize = currEntry.getSize(); // Update entrySize for the actual entry
 
-        if (currEntry.isPaxHeader()){ // Process Pax headers
-            paxHeaders();
         }
 
         if (currEntry.isGNUSparse()){ // Process sparse files
             readGNUSparse();
         }
 
         // If the size of the next element in the archive has changed
         // due to a new size being reported in the posix header
         // information, we update entrySize here so that it contains
         // the correct value.
         entrySize = currEntry.getSize();
         return currEntry;
     }
\ No newline at end of file
