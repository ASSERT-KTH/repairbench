diff --git a/tmp/81e9306c-7660-40d4-b0e1-af5bc7bf20a5_buggy.java b/tmp/818f1930-bf06-4358-9f92-f803ca124461_fixed.java
index b5a206b..6ac5460 100644
--- a/tmp/81e9306c-7660-40d4-b0e1-af5bc7bf20a5_buggy.java
+++ b/tmp/818f1930-bf06-4358-9f92-f803ca124461_fixed.java
@@ -1,80 +1,100 @@
     /**
      * Get the next entry in this tar archive. This will skip
      * over any remaining data in the current entry, if there
      * is one, and place the input stream at the header of the
      * next entry, and read the header and instantiate a new
      * TarEntry from the header bytes and return that entry.
      * If there are no more entries in the archive, null will
      * be returned to indicate that the end of the archive has
      * been reached.
      *
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
     public TarArchiveEntry getNextTarEntry() throws IOException {
         if (hasHitEOF) {
             return null;
         }
 
         if (currEntry != null) {
             long numToSkip = entrySize - entryOffset;
 
             while (numToSkip > 0) {
                 long skipped = skip(numToSkip);
-                if (skipped <= 0) {
+                // If skipped is 0, it means we are at EOF or there's nothing more to skip.
+                // If it's -1, it also means EOF.
+                // We should only throw if we were expecting to skip bytes but couldn't,
+                // and we are not at EOF. However, the original code throws on <= 0,
+                // so we keep that behavior unless it's the root cause of another issue.
+                if (skipped <= 0 && !hasHitEOF) { // Added !hasHitEOF to prevent error if EOF
                     throw new RuntimeException("failed to skip current tar entry");
                 }
                 numToSkip -= skipped;
             }
 
             readBuf = null;
         }
 
         byte[] headerBuf = getRecord();
 
         if (hasHitEOF) {
             currEntry = null;
             return null;
         }
 
+        // Fix for COMPRESS-178: Catch IllegalArgumentException during TarArchiveEntry
+        // construction, which indicates a malformed header, and rethrow as IOException
+        // to conform to the ArchiveInputStream API contract for I/O errors.
+        try {
             currEntry = new TarArchiveEntry(headerBuf);
+        } catch (IllegalArgumentException e) {
+            // A malformed header indicates a corrupted archive.
+            // Mark EOF so subsequent calls return null.
+            hasHitEOF = true; 
+            throw new IOException("Malformed tar header", e);
+        }
+        
         entryOffset = 0;
         entrySize = currEntry.getSize();
 
         if (currEntry.isGNULongNameEntry()) {
             // read in the name
             StringBuffer longName = new StringBuffer();
             byte[] buf = new byte[SMALL_BUFFER_SIZE];
             int length = 0;
+            // The isGNULongNameEntry indicates the current entry is a "long name" entry itself.
+            // Its "data" is the long name. This read is from the input stream.
             while ((length = read(buf)) >= 0) {
                 longName.append(new String(buf, 0, length));
             }
-            getNextEntry();
+            // After reading the long name, the stream should be positioned at the *next* entry's header.
+            // Recursively call getNextEntry to get the actual entry described by the long name.
+            getNextEntry(); // This call will now process the actual entry header
             if (currEntry == null) {
                 // Bugzilla: 40334
                 // Malformed tar file - long entry name not followed by entry
                 return null;
             }
             // remove trailing null terminator
             if (longName.length() > 0
                 && longName.charAt(longName.length() - 1) == 0) {
                 longName.deleteCharAt(longName.length() - 1);
             }
             currEntry.setName(longName.toString());
         }
 
         if (currEntry.isPaxHeader()){ // Process Pax headers
             paxHeaders();
         }
 
         if (currEntry.isGNUSparse()){ // Process sparse files
             readGNUSparse();
         }
 
         // If the size of the next element in the archive has changed
         // due to a new size being reported in the posix header
         // information, we update entrySize here so that it contains
         // the correct value.
         entrySize = currEntry.getSize();
         return currEntry;
     }
\ No newline at end of file
