diff --git a/tmp/16e2bbc2-bbda-4ffc-b5d6-f2aa7fcf4b64_buggy.java b/tmp/e9eca072-80f4-410a-9c8c-9995802a7928_fixed.java
index b5a206b..a733892 100644
--- a/tmp/16e2bbc2-bbda-4ffc-b5d6-f2aa7fcf4b64_buggy.java
+++ b/tmp/e9eca072-80f4-410a-9c8c-9995802a7928_fixed.java
@@ -1,80 +1,108 @@
     /**
      * Get the next entry in this tar archive. This will skip
      * over any remaining data in the current entry, if there
      * is one, and place the input stream at the header of the
      * next entry, and read the header and instantiate a new
      * TarEntry from the header bytes and return that entry.
      * If there are no more entries in the archive, null will
      * be returned to indicate that the end of the archive has
      * been reached.
      *
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
     public TarArchiveEntry getNextTarEntry() throws IOException {
         if (hasHitEOF) {
             return null;
         }
 
         if (currEntry != null) {
             long numToSkip = entrySize - entryOffset;
 
             while (numToSkip > 0) {
                 long skipped = skip(numToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip current tar entry");
                 }
                 numToSkip -= skipped;
             }
 
             readBuf = null;
+
+            // After skipping all data for the current entry,
+            // we must also skip any padding bytes to reach the next record boundary.
+            // The 'skip' method defined in this class only skips data bytes within the entry,
+            // not padding. The padding is part of the physical block layout of tar.
+            long bytesToSkipForPadding = TarUtils.alignSize(entrySize) - entrySize;
+            if (bytesToSkipForPadding > 0) {
+                long skipped = 0;
+                while (skipped < bytesToSkipForPadding) {
+                    // Read dummy bytes to advance the underlying stream and update the total bytes read.
+                    // Using recordBuf as a temporary buffer.
+                    long rem = bytesToSkipForPadding - skipped;
+                    int readLen = (int)Math.min(recordBuf.length, rem);
+                    long n = is.read(recordBuf, 0, readLen);
+                    if (n < 0) {
+                        // Unexpected EOF while skipping padding
+                        throw new IOException("truncated tar archive");
+                    }
+                    count(n); // Update total bytes read from the archive
+                    skipped += n;
+                }
+            }
         }
 
         byte[] headerBuf = getRecord();
 
         if (hasHitEOF) {
             currEntry = null;
             return null;
         }
 
         currEntry = new TarArchiveEntry(headerBuf);
         entryOffset = 0;
         entrySize = currEntry.getSize();
 
         if (currEntry.isGNULongNameEntry()) {
             // read in the name
             StringBuffer longName = new StringBuffer();
             byte[] buf = new byte[SMALL_BUFFER_SIZE];
             int length = 0;
             while ((length = read(buf)) >= 0) {
                 longName.append(new String(buf, 0, length));
             }
-            getNextEntry();
-            if (currEntry == null) {
+            // After reading the long name data, the 'currEntry' (the long name entry itself)
+            // is still active. The next call to getNextEntry() will process the *actual*
+            // entry whose name was just read. The padding of the long name entry will
+            // be skipped by the logic added at the beginning of this function on the recursive call.
+            TarArchiveEntry nextEntry = getNextTarEntry();
+            if (nextEntry == null) {
                 // Bugzilla: 40334
                 // Malformed tar file - long entry name not followed by entry
                 return null;
             }
+            currEntry = nextEntry; // The recursive call sets currEntry, we need to pick it up.
+
             // remove trailing null terminator
             if (longName.length() > 0
                 && longName.charAt(longName.length() - 1) == 0) {
                 longName.deleteCharAt(longName.length() - 1);
             }
             currEntry.setName(longName.toString());
         }
 
         if (currEntry.isPaxHeader()){ // Process Pax headers
             paxHeaders();
         }
 
         if (currEntry.isGNUSparse()){ // Process sparse files
             readGNUSparse();
         }
 
         // If the size of the next element in the archive has changed
         // due to a new size being reported in the posix header
         // information, we update entrySize here so that it contains
         // the correct value.
         entrySize = currEntry.getSize();
         return currEntry;
     }
\ No newline at end of file
