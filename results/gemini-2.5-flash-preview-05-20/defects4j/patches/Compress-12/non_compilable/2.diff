diff --git a/tmp/a31991c7-9783-48da-9314-57b187d3930d_buggy.java b/tmp/0fb2f698-1711-44bb-8637-b37a29f1270e_fixed.java
index b5a206b..d3d113a 100644
--- a/tmp/a31991c7-9783-48da-9314-57b187d3930d_buggy.java
+++ b/tmp/0fb2f698-1711-44bb-8637-b37a29f1270e_fixed.java
@@ -1,80 +1,93 @@
     /**
      * Get the next entry in this tar archive. This will skip
      * over any remaining data in the current entry, if there
      * is one, and place the input stream at the header of the
      * next entry, and read the header and instantiate a new
      * TarEntry from the header bytes and return that entry.
      * If there are no more entries in the archive, null will
      * be returned to indicate that the end of the archive has
      * been reached.
      *
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
     public TarArchiveEntry getNextTarEntry() throws IOException {
         if (hasHitEOF) {
             return null;
         }
 
         if (currEntry != null) {
             long numToSkip = entrySize - entryOffset;
 
             while (numToSkip > 0) {
                 long skipped = skip(numToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip current tar entry");
                 }
                 numToSkip -= skipped;
             }
+            // After consuming or skipping the current entry's data,
+            // we must also skip any padding bytes to ensure the stream
+            // is aligned to the next 512-byte record boundary before
+            // attempting to read the next header.
+            skipRecordPadding();
 
             readBuf = null;
         }
 
         byte[] headerBuf = getRecord();
 
         if (hasHitEOF) {
             currEntry = null;
             return null;
         }
 
         currEntry = new TarArchiveEntry(headerBuf);
         entryOffset = 0;
         entrySize = currEntry.getSize();
 
         if (currEntry.isGNULongNameEntry()) {
             // read in the name
             StringBuffer longName = new StringBuffer();
             byte[] buf = new byte[SMALL_BUFFER_SIZE];
             int length = 0;
+            // The long name is the data of this special entry. Read it completely.
             while ((length = read(buf)) >= 0) {
                 longName.append(new String(buf, 0, length));
             }
-            getNextEntry();
-            if (currEntry == null) {
+
+            // After reading the long name data, we need to get the actual entry
+            // that this long name refers to. This is done by a recursive call.
+            // The recursive call will handle skipping the padding for this
+            // GNULongNameEntry (since its data has been read, entryOffset == entrySize).
+            TarArchiveEntry actualEntry = getNextTarEntry();
+            if (actualEntry == null) {
                 // Bugzilla: 40334
                 // Malformed tar file - long entry name not followed by entry
                 return null;
             }
+            // Update currEntry to the actual entry, as this is the one we are returning.
+            currEntry = actualEntry;
             // remove trailing null terminator
             if (longName.length() > 0
                 && longName.charAt(longName.length() - 1) == 0) {
                 longName.deleteCharAt(longName.length() - 1);
             }
             currEntry.setName(longName.toString());
         }
 
         if (currEntry.isPaxHeader()){ // Process Pax headers
             paxHeaders();
         }
 
         if (currEntry.isGNUSparse()){ // Process sparse files
             readGNUSparse();
         }
 
         // If the size of the next element in the archive has changed
         // due to a new size being reported in the posix header
         // information, we update entrySize here so that it contains
         // the correct value.
         entrySize = currEntry.getSize();
         return currEntry;
     }
\ No newline at end of file
