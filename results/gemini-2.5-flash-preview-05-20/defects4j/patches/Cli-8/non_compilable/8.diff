diff --git a/tmp/30ac2746-d720-4867-b6c2-2a12ea459d1b_buggy.java b/tmp/08ec5a0a-62bd-4400-bf5a-6ea29e435967_fixed.java
index 8e93a5e..6d22581 100644
--- a/tmp/30ac2746-d720-4867-b6c2-2a12ea459d1b_buggy.java
+++ b/tmp/08ec5a0a-62bd-4400-bf5a-6ea29e435967_fixed.java
@@ -1,43 +1,112 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
+            // text.substring(pos) gets the remainder of the text after the current wrap point.
+            // .trim() removes any leading whitespace (like the space character the text was wrapped at).
+            // padding is then prepended to the trimmed remaining text.
             text = padding + text.substring(pos).trim();
+            
+            // findWrapPos is then called on this newly formed 'text' which includes the padding.
+            // width is the total line width.
+            // nextLineTabStop is the start position of content within this 'text' string.
             pos = findWrapPos(text, width, nextLineTabStop);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
+
+    /**
+     * Finds the next text wrap position after `startPos` for the specified line.
+     * This method tries to wrap at a space, but if a long word is encountered
+     * that exceeds the `width`, it will be broken.
+     *
+     * @param text The text to be wrapped.
+     * @param width The width of the line (total column width).
+     * @param startPos The position on the string from which the content actually starts (e.g., after padding).
+     *
+     * @return The position on the string where the wrap should occur, or -1 if no wrap is necessary.
+     */
+    protected int findWrapPos(String text, int width, int startPos)
+    {
+        // 1. Handle explicit line breaks or tabs within the allowed effective width
+        int pos = text.indexOf('\n', startPos);
+        if (pos != -1 && pos <= width)
+        {
+            return pos;
+        }
+
+        pos = text.indexOf('\t', startPos);
+        if (pos != -1 && pos <= width)
+        {
+            return pos;
+        }
+
+        // 2. Check if the remaining text from 'startPos' fits within the effective width
+        // The effective width for wrapping content is 'width - startPos'.
+        // If 'text.length() - startPos' (length of content after startPos)
+        // is less than or equal to 'width - startPos' (available width for content),
+        // then the content fits, and no wrap is needed.
+        if (text.length() - startPos <= width - startPos)
+        {
+            return -1;
+        }
+
+        // 3. Look for the last space character before 'width' (total column limit).
+        // Start searching backward from 'width', but ensure the position is within text bounds.
+        // The search should not go beyond the end of the string.
+        pos = Math.min(width, text.length() - 1);
+
+        char c;
+
+        // Search backward from 'pos' down to 'startPos' (inclusive).
+        // 'startPos' ensures we don't break within the padding.
+        while (pos >= startPos)
+        {
+            c = text.charAt(pos);
+
+            if (c == ' ' || c == '\n' || c == '\r') // Found a break character
+            {
+                return pos;
+            }
+            pos--;
+        }
+
+        // 4. If no space/newline found within the range [startPos, width],
+        // perform a hard wrap at 'width'.
+        // This assumes 'text' is long enough to be truncated at 'width'.
+        return width;
+    }
\ No newline at end of file
