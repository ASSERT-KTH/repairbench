diff --git a/tmp/321332c8-224a-47e9-b7c7-140d0e072366_buggy.java b/tmp/f35a9d66-e905-414c-abce-b492f68a2e09_fixed.java
index 8e93a5e..dcf97fa 100644
--- a/tmp/321332c8-224a-47e9-b7c7-140d0e072366_buggy.java
+++ b/tmp/f35a9d66-e905-414c-abce-b492f68a2e09_fixed.java
@@ -1,43 +1,98 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, nextLineTabStop);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
+
+    /**
+     * <p>Finds the next text wrap position after `startPos` for the specified
+     * text and width.</p>
+     *
+     * @param text The text to be searched for the wrap position.
+     * @param width The maximum number of characters per line.
+     * @param startPos The position in the text to start searching for the
+     * wrap position.
+     *
+     * @return The position in the text where the wrap should occur, or -1 if
+     * no wrap position is found.
+     */
+    protected int findWrapPos(String text, int width, int startPos)
+    {
+        int pos = -1;
+
+        // the line ends before the max wrap width (width)
+        if (text.length() <= width)
+        {
+            return -1;
+        }
+
+        // try to find a natural line break
+        // Search backwards from the end of the line (index width-1 or text.length()-1) down to startPos
+        int searchLimit = Math.min(text.length() - 1, width - 1);
+        for (int i = searchLimit; i >= startPos; --i)
+        {
+            if (Character.isWhitespace(text.charAt(i)))
+            {
+                pos = i;
+                break;
+            }
+        }
+
+        // if no natural line break was found, then cut at the wrap width
+        // or if the break is at 'startPos' (meaning the content starts with whitespace and no real break was found)
+        if (pos == -1 || pos == startPos)
+        {
+            // Force break at 'width' (total line length).
+            // Ensure this position does not exceed actual text length.
+            pos = Math.min(text.length(), width);
+        }
+        else
+        {
+            // if the break is at a space, this space is not displayed.
+            // Move 'pos' to the character just before the whitespace block.
+            while (pos > startPos && Character.isWhitespace(text.charAt(pos - 1)))
+            {
+                --pos;
+            }
+        }
+
+        return pos;
+    }
\ No newline at end of file
