diff --git a/tmp/e616559f-b379-4ccf-ab95-570869c7d4b6_buggy.java b/tmp/78e27c00-8382-4802-a445-a99e9cf520e5_fixed.java
index 8e93a5e..acceaec 100644
--- a/tmp/e616559f-b379-4ccf-ab95-570869c7d4b6_buggy.java
+++ b/tmp/78e27c00-8382-4802-a445-a99e9cf520e5_fixed.java
@@ -1,43 +1,66 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // Handle the first line, which does not have nextLineTabStop padding
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // All following lines must be padded with nextLineTabStop space characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            // Get the remaining text, trimming leading/trailing whitespace (e.g., the space used for wrapping)
+            String remainingText = text.substring(pos).trim();
 
-            if (pos == -1)
+            // If no text remains, we are done
+            if (remainingText.isEmpty())
             {
-                sb.append(text);
+                return sb;
+            }
+
+            // Construct the current line string with padding
+            String currentLineString = padding + remainingText;
+
+            // Calculate the effective width for the content part of the line
+            // This is the total line width minus the padding for the next line's tab stop
+            int contentWidth = width - nextLineTabStop;
 
+            // Find the wrap position within the 'remainingText' (content part),
+            // considering the effective content width. The search starts from 0 of remainingText.
+            int wrapPosInContent = findWrapPos(remainingText, contentWidth, 0);
+
+            if (wrapPosInContent == -1)
+            {
+                // The remaining content fits on this line
+                sb.append(currentLineString);
                 return sb;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the portion of the current line up to the wrap point
+            // The actual position in currentLineString is padding length + wrapPosInContent
+            sb.append(rtrim(currentLineString.substring(0, nextLineTabStop + wrapPosInContent))).append(defaultNewLine);
+
+            // Update 'text' for the next iteration to be the unpadded remaining part
+            // (from the original remainingText, starting after the wrap point)
+            text = remainingText.substring(wrapPosInContent);
         }
     }
\ No newline at end of file
