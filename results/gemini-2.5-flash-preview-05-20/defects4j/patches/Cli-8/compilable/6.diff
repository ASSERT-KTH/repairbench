diff --git a/tmp/56fcc8e1-df70-40a1-8d6d-b71f847b15ae_buggy.java b/tmp/a8940226-4c9f-49b7-bcc1-52af992dd833_fixed.java
index 8e93a5e..7efe544 100644
--- a/tmp/56fcc8e1-df70-40a1-8d6d-b71f847b15ae_buggy.java
+++ b/tmp/a8940226-4c9f-49b7-bcc1-52af992dd833_fixed.java
@@ -1,43 +1,66 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // First line is not padded
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+
+        // Append the first line and a new line
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // All following lines must be padded with nextLineTabStop space characters
         final String padding = createPadding(nextLineTabStop);
 
+        // 'remainingText' holds the portion of the original text yet to be wrapped
+        String remainingText = text.substring(pos);
+
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            // Calculate the effective width for the content of the current line,
+            // accounting for the padding that will be prepended.
+            int effectiveWidth = width - nextLineTabStop;
+
+            // Find the wrap position in the 'remainingText' (which is unpadded content).
+            // 'startPos' for findWrapPos should be 0 because 'remainingText' is the current segment.
+            pos = findWrapPos(remainingText, effectiveWidth, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                // No more wrapping needed for the 'remainingText'
+                // Append the padding and the remaining content
+                sb.append(padding).append(remainingText);
                 return sb;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the padding, the wrapped portion of 'remainingText', and a new line
+            sb.append(padding)
+              .append(rtrim(remainingText.substring(0, pos)))
+              .append(defaultNewLine);
+
+            // Update 'remainingText' for the next iteration.
+            // Trim leading whitespace, as it's typically the space after a word break.
+            remainingText = remainingText.substring(pos).trim();
+
+            // If remainingText is empty after trimming, we are done
+            if (remainingText.isEmpty())
+            {
+                return sb;
+            }
         }
     }
\ No newline at end of file
