diff --git a/tmp/50910111-1408-4932-b1e0-76cf2b25a515_buggy.java b/tmp/b43328be-baf4-44b1-8efd-e1449ad4336b_fixed.java
index 8e93a5e..df33d29 100644
--- a/tmp/50910111-1408-4932-b1e0-76cf2b25a515_buggy.java
+++ b/tmp/b43328be-baf4-44b1-8efd-e1449ad4336b_fixed.java
@@ -1,43 +1,50 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // Bugfix: Include the character at 'pos' in the first line before trimming.
+        // If 'pos' is a delimiter (space, newline), rtrim will remove it.
+        // If 'pos' is a hard break character, it will be included.
+        sb.append(rtrim(text.substring(0, pos + 1))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
+            // The trim() here is correct, as it removes the leading delimiter
+            // (space, newline) from the remaining text.
             text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, nextLineTabStop);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Bugfix: Similar to the first line, include the character at 'pos'
+            // for subsequent wrapped lines before trimming.
+            sb.append(rtrim(text.substring(0, pos + 1))).append(defaultNewLine);
         }
     }
