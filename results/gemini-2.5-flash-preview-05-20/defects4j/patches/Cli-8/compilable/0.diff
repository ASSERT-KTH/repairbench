diff --git a/tmp/a6109ced-59e8-47d7-9e2a-43258ee609d0_buggy.java b/tmp/6d262445-8570-4634-9d78-a8e5c402f396_fixed.java
index 8e93a5e..6c4f722 100644
--- a/tmp/a6109ced-59e8-47d7-9e2a-43258ee609d0_buggy.java
+++ b/tmp/6d262445-8570-4634-9d78-a8e5c402f396_fixed.java
@@ -1,43 +1,49 @@
     /**
      * <p>Render the specified text and return the rendered Options
      * in a StringBuffer.</p>
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
+            // The .trim() call here was incorrect as it removed leading whitespace
+            // from the remainder of the text (text.substring(pos)), which might
+            // include intentional indentation or a leading newline that should be
+            // handled implicitly by renderWrappedText's line-breaking logic.
+            // By removing .trim(), the original leading whitespace from the
+            // content is preserved, and the padding is added correctly.
+            text = padding + text.substring(pos);
             pos = findWrapPos(text, width, nextLineTabStop);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
