diff --git a/tmp/5663df80-8620-4b50-888b-76da06cea677_buggy.java b/tmp/b28dcb29-ca04-4efa-aa38-abe55dd49236_fixed.java
index a3709ee..cd5cda9 100644
--- a/tmp/5663df80-8620-4b50-888b-76da06cea677_buggy.java
+++ b/tmp/b28dcb29-ca04-4efa-aa38-abe55dd49236_fixed.java
@@ -1,71 +1,78 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
         // A result that is aliased by a non-local name, is the effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
         return NodeUtil.isImmutableValue(value.getLastChild())
             || (locals.apply(value)
                 && evaluatesToLocalValue(value.getLastChild(), locals));
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
+        // If it's a pre-increment/decrement (e.g., ++x, --x), the result is a
+        // new primitive number, which is always local.
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+          return true;
         } else {
-          return true;
+          // If it's a post-increment/decrement (e.g., x++, x--), the result is
+          // the original value of the operand.
+          return evaluatesToLocalValue(value.getFirstChild(), locals);
         }
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
+        return NodeUtil.isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
         // There is no information about the locality of object properties.
+        // Assumed non-local unless explicitly covered by locals predicate.
         return locals.apply(value);
       case Token.CALL:
-        return callHasLocalResult(value)
-            || isToStringMethodCall(value)
+        return NodeUtil.callHasLocalResult(value)
+            || NodeUtil.isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // A new object is generally a reference that can escape. It's
+        // considered local only if the constructed value itself is an immutable
+        // primitive wrapper (e.g., new String('')), or if it's explicitly
+        // marked as local by the predicate.
+        return NodeUtil.isImmutableValue(value) || locals.apply(value);
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+        // Literals objects with non-literal children are allowed. The container
+        // itself is local.
         return true;
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // TODO(johnlenis): should IN operator be included in #isSimpleOperator?
         return true;
       default:
-        // Other op force a local value:
+        // Other ops force a local value:
         //  x = '' + g (x is now an local string)
         //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+        if (NodeUtil.isAssignmentOp(value)
+            || NodeUtil.isSimpleOperator(value)
+            || NodeUtil.isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
\ No newline at end of file
