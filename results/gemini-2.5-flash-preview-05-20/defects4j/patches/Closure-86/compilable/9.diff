diff --git a/tmp/906ece74-0e0a-4bb2-b0fa-20b2c19ab561_buggy.java b/tmp/ed65fb00-e0d5-40dd-890a-d54f1d4053fe_fixed.java
index a3709ee..a70cd5e 100644
--- a/tmp/906ece74-0e0a-4bb2-b0fa-20b2c19ab561_buggy.java
+++ b/tmp/ed65fb00-e0d5-40dd-890a-d54f1d4053fe_fixed.java
@@ -1,71 +1,78 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
         // A result that is aliased by a non-local name, is the effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
         return NodeUtil.isImmutableValue(value.getLastChild())
             || (locals.apply(value)
                 && evaluatesToLocalValue(value.getLastChild(), locals));
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        // For pre-increment/decrement (++x, --x), the result is a new primitive number.
+        // For post-increment/decrement (x++, x--), the result is the original value of x.
+        if (value.getBooleanProp(Node.INCRDECR_PROP)) { // True for pre-inc/dec (++x, --x)
+          return true; // Result is always a primitive number (local)
+        } else { // False for post-inc/dec (x++, x--)
+          // The result is the original value of the child (x), so its locality matters.
           return evaluatesToLocalValue(value.getFirstChild(), locals);
-        } else {
-          return true;
         }
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
         return isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
         // There is no information about the locality of object properties.
         return locals.apply(value);
       case Token.CALL:
         return callHasLocalResult(value)
             || isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
         // TODO(nicksantos): This needs to be changed so that it
         // returns true iff we're sure the value was never aliased from inside
         // the constructor (similar to callHasLocalResult)
-        return true;
+        // Based on testLocalValue("new x()") expecting false,
+        // and the fact that a new object is mutable and can easily escape scope,
+        // it's generally not considered local by default without deeper analysis.
+        return false; // Changed from 'true' to 'false'
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
         // Literals objects with non-literal children are allowed.
+        // NodeUtilTest::testLocalValue1 expects these to be true.
         return true;
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // 'in' operator always returns a boolean, which is a local primitive.
         return true;
       default:
         // Other op force a local value:
         //  x = '' + g (x is now an local string)
         //  x -= g (x is now an local number)
         if (isAssignmentOp(value)
             || isSimpleOperator(value)
             || isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
