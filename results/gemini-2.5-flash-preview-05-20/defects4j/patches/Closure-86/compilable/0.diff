diff --git a/tmp/9adaa6ba-51fe-4371-aca3-b2e3170bf912_buggy.java b/tmp/3d3d2832-9d27-4d72-99da-5e9467acd575_fixed.java
index a3709ee..393af4c 100644
--- a/tmp/9adaa6ba-51fe-4371-aca3-b2e3170bf912_buggy.java
+++ b/tmp/3d3d2832-9d27-4d72-99da-5e9467acd575_fixed.java
@@ -1,71 +1,78 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
         // A result that is aliased by a non-local name, is the effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
         return NodeUtil.isImmutableValue(value.getLastChild())
             || (locals.apply(value)
                 && evaluatesToLocalValue(value.getLastChild(), locals));
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        if (value.getBooleanProp(Node.INCRDECR_PROP)) { // INCRDECR_PROP means post-increment (result is original value)
           return evaluatesToLocalValue(value.getFirstChild(), locals);
-        } else {
-          return true;
+        } else { // No INCRDECR_PROP means pre-increment (result is new primitive value)
+          return true; // Result is always a number, which is a local immutable value.
         }
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
         return isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
         // There is no information about the locality of object properties.
+        // A property access itself is generally not considered a "local value"
+        // in the sense of a primitive or literal. It refers to a potentially
+        // non-local property. Only if the entire expression itself is
+        // explicitly identified as a local by the predicate can it be local.
         return locals.apply(value);
       case Token.CALL:
         return callHasLocalResult(value)
             || isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // A newly constructed object is known to be local if its constructor
+        // is known to produce local results (e.g., primitive wrappers like Array, Object,
+        // or constructors explicitly marked @pure).
+        // It's also local if the 'new' expression itself is identified as a local value
+        // by the predicate (e.g., if it's the RHS of a local variable assignment).
+        return callHasLocalResult(value)
+            || locals.apply(value);
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
         // Literals objects with non-literal children are allowed.
         return true;
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // 'in' operator always returns a boolean, which is a local immutable value.
         return true;
       default:
-        // Other op force a local value:
+        // Other operators that force a local value (e.g., arithmetic ops, logical ops, comparisons).
         //  x = '' + g (x is now an local string)
         //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+        if (isAssignmentOp(value) // e.g., x += y, x |= y (result is number/string)
+            || isSimpleOperator(value) // e.g., !, ~, +, -, typeof, void, ==, !=, >, <, etc. (result is primitive)
+            || isImmutableValue(value)) { // e.g., null, undefined, number, string, boolean
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
\ No newline at end of file
