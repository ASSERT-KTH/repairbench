diff --git a/tmp/6f0a77af-de90-4c60-9e54-0b81c57d5d73_buggy.java b/tmp/f4ac3ef2-ac67-49ed-951b-99d95733e001_fixed.java
index a3709ee..a3c5233 100644
--- a/tmp/6f0a77af-de90-4c60-9e54-0b81c57d5d73_buggy.java
+++ b/tmp/f4ac3ef2-ac67-49ed-951b-99d95733e001_fixed.java
@@ -1,71 +1,78 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+        Node rhs = value.getLastChild();
+        // If RHS is a truly immutable primitive, function, or regexp, it's local.
+        // NodeUtil.isImmutableValue is problematic for ARRAYLIT/OBJECTLIT
+        // as it considers them immutable even though their contents are not.
+        // We filter out ARRAYLIT and OBJECTLIT from this initial check.
+        if (NodeUtil.isImmutableValue(rhs)
+            && !(rhs.isArrayLit() || rhs.isObjectLit())) {
+          return true;
+        }
+        // For mutable values (including ARRAYLIT/OBJECTLIT), the result of the
+        // assignment is local if the assignment itself ensures locality
+        // (e.g., assigning to a local variable that doesn't escape) AND
+        // the right-hand side is also considered local (e.g., its components are local).
+        return locals.apply(value) && evaluatesToLocalValue(rhs, locals);
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+          // Post-increment/decrement, returns the original value, so check its locality.
           return evaluatesToLocalValue(value.getFirstChild(), locals);
         } else {
+          // Pre-increment/decrement, returns a new number, which is local.
           return true;
         }
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
         return isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
-        // There is no information about the locality of object properties.
+        // There is no information about the locality of object properties by default.
         return locals.apply(value);
       case Token.CALL:
         return callHasLocalResult(value)
             || isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // A NEW expression results in a new object. It's local only if we can prove it doesn't escape.
+        // By default, assume it's not local unless the 'locals' predicate specifically knows otherwise.
+        return locals.apply(value);
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+        // Literals objects with non-literal children are allowed as the literal instance itself is new and local.
         return true;
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // The IN operator always results in a local boolean value.
         return true;
       default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+        // Other operators typically force a local value (e.g., arithmetic, comparison, logical ops produce primitives).
         if (isAssignmentOp(value)
             || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+            || isImmutableValue(value)) { // This last part handles primitive literals directly (like '1', 'true') if they somehow fall here.
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
