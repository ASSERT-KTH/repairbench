diff --git a/tmp/c73d109d-e79a-4f75-a452-b1ebe51dc3c9_buggy.java b/tmp/673a841b-776c-4dc3-8528-e64b17d436cc_fixed.java
index a3709ee..37ccfc1 100644
--- a/tmp/c73d109d-e79a-4f75-a452-b1ebe51dc3c9_buggy.java
+++ b/tmp/673a841b-776c-4dc3-8528-e64b17d436cc_fixed.java
@@ -1,71 +1,101 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
         // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+        // same as returning a non-local name.
+        Node lhs = value.getFirstChild();
+        Node rhs = value.getLastChild();
+
+        // If the RHS is a primitive literal value (e.g., 1, 'a', true, null),
+        // the result of the assignment is that primitive, which is local.
+        if (NodeUtil.isLiteralValue(rhs, true)) {
+          return true;
+        }
+
+        // If the RHS is a reference (e.g., [], {}, new X(), function()),
+        // its locality depends on how it's assigned.
+        // If assigned to a non-local name or property, the reference escapes.
+        if (lhs.isName()) {
+          // If LHS is a local name, then the assignment result is local
+          // (e.g., `var a = []` implies `a` and `[]` are local within the function).
+          // Otherwise (LHS is a non-local name, e.g., a global), the assignment result is non-local.
+          return locals.apply(lhs);
+        } else if (lhs.isGetProp() || lhs.isGetElem()) {
+          // Assigning to a property (e.g., obj.prop = val) typically makes the value non-local
+          // because the object itself might be non-local or the property is publicly accessible.
+          return false;
+        } else {
+          // For other complex LHS types (e.g., array/object destructuring, etc.),
+          // be conservative and assume non-local.
+          return false;
+        }
+
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
+        // For post-increment/decrement (x++), the result is the original value of x.
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
           return evaluatesToLocalValue(value.getFirstChild(), locals);
         } else {
+          // For pre-increment/decrement (++x), the result is a new numeric value, which is local.
           return true;
         }
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
+        // Immutable literal names ('undefined', 'Infinity', 'NaN') are local.
+        // Otherwise, check if the name is considered local by the predicate.
         return isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
-        // There is no information about the locality of object properties.
+        // There is no general information about the locality of object properties.
+        // Rely on the 'locals' predicate to determine if this specific property access is known to be local.
         return locals.apply(value);
       case Token.CALL:
+        // A call result is local if the call is known to return a local value (e.g., certain pure functions,
+        // toString() calls), or if the 'locals' predicate can determine its locality.
         return callHasLocalResult(value)
             || isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // A newly created object is a new reference. It is local unless it escapes.
+        // Rely on the 'locals' predicate to determine if the specific 'NEW' expression is considered local
+        // (e.g., if the object is immediately assigned to a local variable and doesn't escape via the constructor).
+        return locals.apply(value);
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+        // Literal objects and functions create new, isolated references which are considered local within the expression.
         return true;
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // The IN operator returns a boolean primitive, which is always local.
         return true;
       default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+        // Other operators that force a local value (e.g., binary ops, unary ops that result in primitives):
+        //  x = '' + g (result is local string)
+        //  x -= g (result is local number)
+        if (isAssignmentOp(value) // e.g., +=, -=, *=, etc., which produce primitive results.
+            || isSimpleOperator(value) // e.g., +, -, *, /, ==, !=, typeof, void, instanceof; these return primitives.
+            || isImmutableValue(value)) { // Catch-all for any remaining immutable constants.
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
