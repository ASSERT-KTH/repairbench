diff --git a/tmp/f74400a1-a0f6-455b-b1ff-7199024fa6e1_buggy.java b/tmp/53597576-6f72-44c0-8d20-7cec230953a1_fixed.java
index 71189c3..4f762bb 100644
--- a/tmp/f74400a1-a0f6-455b-b1ff-7199024fa6e1_buggy.java
+++ b/tmp/53597576-6f72-44c0-8d20-7cec230953a1_fixed.java
@@ -1,46 +1,56 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+            // Validate required options and groups.
+            // These options must be validated irrespective of whether they were explicitly found
+            // on the command line, as default values or implied presence might satisfy their requirements.
+            // This also ensures group structures are validated.
+            if (option.isRequired() || option instanceof Group) {
                 option.validate(commandLine);
             }
 
-            // if the child option is present then validate it
+            // If the child option is present on the command line (i.e., parsed from input tokens),
+            // increment the count to check against maximum.
+            // Also, validate it if it hasn't already been validated by the preceding block
+            // (i.e., if it's an optional, present option).
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
-
                     break;
                 }
 
+                // If the option is present AND it's not a required option or a Group (which were
+                // already validated in the first block), then validate it now.
+                // This prevents redundant validation which can cause issues if validation
+                // transforms the stored value type (e.g., String to File).
+                if (!(option.isRequired() || option instanceof Group)) {
                     option.validate(commandLine);
                 }
             }
+        }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
