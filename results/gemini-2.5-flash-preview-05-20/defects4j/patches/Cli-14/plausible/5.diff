diff --git a/tmp/222bb66c-ed81-4a85-b5b1-43871f5f90c7_buggy.java b/tmp/8d8850f7-5bc6-4a14-abac-e695ef9708c9_fixed.java
index 71189c3..354faf4 100644
--- a/tmp/222bb66c-ed81-4a85-b5b1-43871f5f90c7_buggy.java
+++ b/tmp/8d8850f7-5bc6-4a14-abac-e695ef9708c9_fixed.java
@@ -1,46 +1,54 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+            // Determine if the option requires structural validation (e.g., if it's required or a group)
+            boolean structuralValidationNeeded = option.isRequired() || option instanceof Group;
+            if (structuralValidationNeeded) {
+                // Perform structural validation. This call might process and store
+                // validated values (e.g., convert a String filename to a File object).
                 option.validate(commandLine);
             }
 
-            // if the child option is present then validate it
+            // If the child option is present in the command line, perform checks related to its presence
             if (commandLine.hasOption(option)) {
+                // Increment the count of present options and check against the maximum allowed
                 if (++present > maximum) {
                     unexpected = option;
-
                     break;
                 }
 
+                // If the option was NOT already validated by the structuralValidationNeeded block
+                // (i.e., it's an optional option that was simply present), then validate it now.
+                // This prevents redundant validation calls, which could cause ClassCastExceptions
+                // if the first validation transformed the argument's type in the commandLine.
+                if (!structuralValidationNeeded) {
                     option.validate(commandLine);
                 }
             }
+        }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
