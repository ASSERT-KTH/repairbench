diff --git a/tmp/73ddafee-d93f-4555-8316-fd9f492ba6f3_buggy.java b/tmp/da69ce4f-acb9-4e1c-aa75-b2130c29d078_fixed.java
index 71189c3..535a7d0 100644
--- a/tmp/73ddafee-d93f-4555-8316-fd9f492ba6f3_buggy.java
+++ b/tmp/da69ce4f-acb9-4e1c-aa75-b2130c29d078_fixed.java
@@ -1,46 +1,52 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+            // Determine if the option needs validation.
+            // An option needs validation if:
+            // 1. It is a Group (groups always need to check their internal constraints and children).
+            // 2. It is a required option (its absence or invalid state would throw an exception).
+            // 3. It is present on the command line (even if not required, if supplied, it must be valid).
+            boolean needsValidation = false;
+            if (option instanceof Group || option.isRequired() || commandLine.hasOption(option)) {
+                needsValidation = true;
+            }
+
+            // Validate the option exactly once if any of the above conditions are met.
+            if (needsValidation) {
                 option.validate(commandLine);
             }
 
-            // if the child option is present then validate it
+            // The 'present' count and 'maximum' check only apply to options that were actually found on the command line.
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
-
                     break;
                 }
-
-                option.validate(commandLine);
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
