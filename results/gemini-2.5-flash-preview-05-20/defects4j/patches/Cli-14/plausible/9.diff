diff --git a/tmp/f798e61b-6491-491e-8ed3-874d6c8333df_buggy.java b/tmp/d92bc945-26c5-40aa-a3eb-7c79ebb0bcf0_fixed.java
index 71189c3..bc08080 100644
--- a/tmp/f798e61b-6491-491e-8ed3-874d6c8333df_buggy.java
+++ b/tmp/d92bc945-26c5-40aa-a3eb-7c79ebb0bcf0_fixed.java
@@ -1,46 +1,64 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
-                option.validate(commandLine);
-            }
-
-            // if the child option is present then validate it
+            // First, count present options and check against the maximum limit.
+            // This logic should run for any option found in the command line.
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
-
                     break;
                 }
+            }
 
+            // Determine if the current option needs to be validated.
+            // An option should be validated if:
+            // 1. It is required (its internal validate() method will handle its presence/absence).
+            // 2. It is a Group (its internal validate() method will handle its children recursively).
+            // 3. It is present in the command line (its internal validate() method will validate its arguments, if any).
+            //
+            // The key is to ensure that option.validate(commandLine) is called exactly once per option per iteration.
+            // If an option is both required and present, the original code would validate it twice,
+            // which can lead to ClassCastException if the first validation transformed the argument type (e.g., String to File).
+            boolean shouldValidate = false;
+            if (option.isRequired() || option instanceof Group) {
+                // Options that are required or are groups must always be validated.
+                // Their own validate() method handles their specific requirements.
+                shouldValidate = true;
+            } else if (commandLine.hasOption(option)) {
+                // If the option is neither required nor a group, but it IS present
+                // in the command line, then it still needs to be validated (e.g., its arguments).
+                // The 'else if' ensures we don't re-set 'shouldValidate' if it was already true
+                // due to being required or a group, thus preventing double validation.
+                shouldValidate = true;
+            }
+
+            if (shouldValidate) {
                 option.validate(commandLine);
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
