diff --git a/tmp/6d208715-9a63-45dc-a2f6-b5b4c2fc572e_buggy.java b/tmp/bcac7d93-06c7-4490-af8f-61c926fd29ba_fixed.java
index 71189c3..b5fd5b3 100644
--- a/tmp/6d208715-9a63-45dc-a2f6-b5b4c2fc572e_buggy.java
+++ b/tmp/bcac7d93-06c7-4490-af8f-61c926fd29ba_fixed.java
@@ -1,46 +1,61 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+            // Flag to track if option.validate has already been called for this option
+            // during the current iteration of the loop. This is crucial to prevent
+            // redundant validation calls, especially when validators might transform
+            // the type of the argument value (e.g., String to File).
+            boolean validatedThisOptionInLoop = false;
+
+            // First validation pass: for required options or groups.
+            // Required options need to be validated to ensure they are present (or throw if missing).
+            // Groups need recursive validation.
+            boolean needsPreValidation = option.isRequired() || option instanceof Group;
+            if (needsPreValidation) {
                 option.validate(commandLine);
+                validatedThisOptionInLoop = true;
             }
 
-            // if the child option is present then validate it
+            // Second validation pass: for options that are explicitly present in the command line.
+            // This also handles counting the 'present' options.
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
-
                     break;
                 }
 
+                // If the option was not already validated in the 'needsPreValidation' block
+                // (e.g., it's an optional option that was present), then validate it now.
+                // This prevents double validation which can lead to ClassCastException
+                // if a validator has already transformed the argument value.
+                if (!validatedThisOptionInLoop) {
                     option.validate(commandLine);
                 }
             }
+        }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
