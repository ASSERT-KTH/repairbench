diff --git a/tmp/33604a61-4cda-489e-89c2-1cbf81500964_buggy.java b/tmp/1b994267-ca81-461f-8eb4-d10c5c4906c9_fixed.java
index c53ca2a..9fb028b 100644
--- a/tmp/33604a61-4cda-489e-89c2-1cbf81500964_buggy.java
+++ b/tmp/1b994267-ca81-461f-8eb4-d10c5c4906c9_fixed.java
@@ -1,54 +1,73 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
+            // If getVertices() returns an empty array, it means the PolygonsSet has no
+            // closed loops that define a finite area. This typically implies the region
+            // is either entirely empty or covers the whole space.
             final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
+            final Object attribute = tree.getAttribute();
+
+            if (attribute instanceof Boolean) {
+                // If the attribute is a Boolean, it directly indicates whether the space is full or empty.
+                if ((Boolean) attribute) {
+                    // The instance covers the whole space (infinite size)
                     setSize(Double.POSITIVE_INFINITY);
                     setBarycenter(Vector2D.NaN);
                 } else {
+                    // The instance is empty (zero size)
+                    setSize(0);
+                    setBarycenter(new Vector2D(0, 0));
+                }
+            } else {
+                // If getVertices() is empty but the tree attribute is not a Boolean
+                // (e.g., it's a BoundaryAttribute or null, which happens for degenerate cases
+                // or internal nodes), it implies that the region has no defined finite interior.
+                // In such scenarios, the size is considered zero. A BoundaryAttribute on the
+                // root and no vertices means the region is effectively empty in terms of area.
                 setSize(0);
                 setBarycenter(new Vector2D(0, 0));
             }
         } else if (v[0][0] == null) {
-            // there is at least one open-loop: the polygon is infinite
+            // There is at least one open-loop: the polygon is infinite.
+            // This happens when the loops don't completely enclose a finite area.
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
-            // all loops are closed, we compute some integrals around the shape
+            // All loops are closed, we compute some integrals around the shape.
+            // This calculates the finite area and barycenter for closed polygons.
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
                     final double factor = x0 * y1 - y0 * x1;
                     sum  += factor;
                     sumX += factor * (x0 + x1);
                     sumY += factor * (y0 + y1);
                 }
             }
 
             if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+                // The polygon has a finite outside surrounded by an infinite inside.
+                // This means the region itself is infinite.
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
+                // The polygon has a finite area.
                 setSize(sum / 2);
                 setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
             }
-
         }
-
     }
\ No newline at end of file
