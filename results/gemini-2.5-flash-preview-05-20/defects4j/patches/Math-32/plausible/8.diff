diff --git a/tmp/a4d30ad3-6af8-44fa-9c0f-c294b9758ebe_buggy.java b/tmp/873cd227-80f1-4d31-97e2-6871663fd52a_fixed.java
index c53ca2a..32bcdf0 100644
--- a/tmp/a4d30ad3-6af8-44fa-9c0f-c294b9758ebe_buggy.java
+++ b/tmp/873cd227-80f1-4d31-97e2-6871663fd52a_fixed.java
@@ -1,54 +1,68 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
+            // The region has no closed loops of vertices.
+            // This usually means it's an empty set, the whole space, or a degenerate region (e.g., a point or a line segment).
             final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
+            final Object attribute = tree.getAttribute(); // Get the raw attribute
+
+            if (attribute instanceof Boolean) {
+                // If the attribute is a Boolean, it signifies a truly empty or full space.
+                if ((Boolean) attribute) {
+                    // The instance covers the whole space (Boolean.TRUE)
                     setSize(Double.POSITIVE_INFINITY);
                     setBarycenter(Vector2D.NaN);
                 } else {
+                    // The instance is empty (Boolean.FALSE)
+                    setSize(0);
+                    setBarycenter(new Vector2D(0, 0));
+                }
+            } else {
+                // The attribute is not a Boolean (e.g., it's a BoundaryAttribute).
+                // If there are no vertices (v.length == 0) and it's not the whole space,
+                // it implies a degenerate region with zero area.
                 setSize(0);
                 setBarycenter(new Vector2D(0, 0));
             }
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             // all loops are closed, we compute some integrals around the shape
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
                     final double factor = x0 * y1 - y0 * x1;
                     sum  += factor;
                     sumX += factor * (x0 + x1);
                     sumY += factor * (y0 + y1);
                 }
             }
 
             if (sum < 0) {
                 // the polygon as a finite outside surrounded by an infinite inside
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
                 setSize(sum / 2);
                 setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
             }
 
         }
 
     }
\ No newline at end of file
