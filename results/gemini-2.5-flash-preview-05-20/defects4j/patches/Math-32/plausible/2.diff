diff --git a/tmp/244322c8-7436-42f0-9690-63804fa0e779_buggy.java b/tmp/6873215f-6023-481d-84d7-1b572ffb7916_fixed.java
index c53ca2a..3dae4f2 100644
--- a/tmp/244322c8-7436-42f0-9690-63804fa0e779_buggy.java
+++ b/tmp/6873215f-6023-481d-84d7-1b572ffb7916_fixed.java
@@ -1,54 +1,91 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
+        // If no vertices are found, the region is either empty, full, or degenerate (e.g., points/lines with no enclosed area).
         if (v.length == 0) {
-            final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
+            final BSPTree<Euclidean2D> tree = getTree(false); // Get the root of the BSP tree
+            Object attribute = tree.getAttribute(); // Get the attribute associated with the root node
+
+            if (attribute instanceof Boolean) {
+                // If the attribute is a Boolean, it directly indicates if the region is the whole space or an empty space.
+                if ((Boolean) attribute) {
+                    // The instance covers the whole space
                     setSize(Double.POSITIVE_INFINITY);
                     setBarycenter(Vector2D.NaN);
                 } else {
+                    // The instance represents an empty space
+                    setSize(0);
+                    setBarycenter(new Vector2D(0, 0));
+                }
+            } else {
+                // If the attribute is not a Boolean (e.g., BoundaryAttribute, or null),
+                // and getVertices() returned an empty array, it means no closed loops
+                // could be extracted from the boundary definition. In such cases, the region
+                // is considered to have zero area. This addresses the ClassCastException.
                 setSize(0);
                 setBarycenter(new Vector2D(0, 0));
             }
         } else if (v[0][0] == null) {
-            // there is at least one open-loop: the polygon is infinite
+            // This condition typically means there's at least one "open loop" or
+            // an unclosed boundary segment detected, implying an infinite polygon.
+            // For example, a single line in 2D divides the plane into two infinite half-planes.
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
-            // all loops are closed, we compute some integrals around the shape
+            // All loops are closed, indicating a finite region.
+            // We compute the area and barycenter using the shoelace formula (Gauss's area formula).
 
-            double sum  = 0;
-            double sumX = 0;
-            double sumY = 0;
+            double sum  = 0;  // Sum for area calculation
+            double sumX = 0;  // Sum for X-coordinate of barycenter
+            double sumY = 0;  // Sum for Y-coordinate of barycenter
 
             for (Vector2D[] loop : v) {
+                // Ensure the loop has at least two points to form a segment for area calculation.
+                // A single point loop or empty loop contributes no area.
+                if (loop == null || loop.length < 2) {
+                    continue;
+                }
+
+                // Initialize with the last point of the loop to close the polygon
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
+
+                // Iterate through points in the loop to compute cross products
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
-                    final double factor = x0 * y1 - y0 * x1;
+                    final double factor = x0 * y1 - y0 * x1; // (x_i * y_{i+1} - y_i * x_{i+1})
                     sum  += factor;
-                    sumX += factor * (x0 + x1);
-                    sumY += factor * (y0 + y1);
+                    sumX += factor * (x0 + x1); // (x_i + x_{i+1})
+                    sumY += factor * (y0 + y1); // (y_i + y_{i+1})
                 }
             }
 
+            // The 'sum' variable, derived from the shoelace formula, represents twice the signed area.
+            // A negative sum typically indicates that the polygon defines a finite 'outside' (hole)
+            // surrounded by an infinite 'inside', or a winding order that's considered 'negative'.
             if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+                // This typically means the effective area is infinite (e.g., a hole in an infinite plane)
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
-                setSize(sum / 2);
+                // If sum is non-negative, calculate finite size and barycenter.
+                // Handle the case where sum is zero (degenerate polygon with no area) to avoid division by zero.
+                if (sum == 0) {
+                    setSize(0);
+                    // For zero area, barycenter is technically undefined. Setting it to (0,0) as a conventional default
+                    // consistent with the empty space case.
+                    setBarycenter(new Vector2D(0, 0));
+                } else {
+                    setSize(sum / 2); // Area is sum / 2
+                    // Barycenter coordinates are (sumX / (3 * sum), sumY / (3 * sum))
                     setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
                 }
-
             }
-
+        }
     }
\ No newline at end of file
