diff --git a/tmp/e4d5d2f6-6675-41c5-a556-0d010048129d_buggy.java b/tmp/42b94d33-3615-4020-bb94-6f90e0506cb1_fixed.java
index c53ca2a..01fe232 100644
--- a/tmp/e4d5d2f6-6675-41c5-a556-0d010048129d_buggy.java
+++ b/tmp/42b94d33-3615-4020-bb94-6f90e0506cb1_fixed.java
@@ -1,54 +1,87 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
             final BSPTree<Euclidean2D> tree = getTree(false);
+            // The attribute of a BSPTree node can be a Boolean (for leaf nodes representing full/empty regions)
+            // or a BoundaryAttribute (for internal nodes describing boundary segments).
+            // If getVertices() returns an empty array, it means no closed loops were found.
+            // This situation arises for empty/full regions, or for degenerate regions (like lines or points in 2D space,
+            // or complex self-intersecting polygons with zero net enclosed area).
+            //
+            // If the tree is a leaf node (tree.getCut() == null), its attribute is expected to be a Boolean
+            // representing whether the region is full (Boolean.TRUE) or empty (Boolean.FALSE), as per PolygonsSet's
+            // and AbstractRegion's tree construction logic.
+            //
+            // If the tree is an internal node (tree.getCut() != null), its attribute might be a BoundaryAttribute.
+            // In such a case, if getVertices() still returned an empty array, it indicates a degenerate region
+            // with zero geometrical size, which is neither fully empty nor fully covers the plane.
+            if (tree.getCut() == null) {
+                // It's a leaf node. Its attribute should be Boolean.
                 if ((Boolean) tree.getAttribute()) {
                     // the instance covers the whole space
                     setSize(Double.POSITIVE_INFINITY);
                     setBarycenter(Vector2D.NaN);
                 } else {
+                    // the instance is empty
+                    setSize(0);
+                    setBarycenter(new Vector2D(0, 0));
+                }
+            } else {
+                // It's an internal node, meaning it has a defined cut and potentially a complex boundary.
+                // If getVertices() returns no loops for an internal node, it implies a degenerate region
+                // with zero geometrical area (e.g., a line segment or a point in 2D).
                 setSize(0);
                 setBarycenter(new Vector2D(0, 0));
             }
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             // all loops are closed, we compute some integrals around the shape
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
+                // Defensive check: ensure loop is not empty before accessing its last element.
+                // In normal cases, getVertices() should provide non-empty loops.
+                if (loop.length == 0) {
+                    continue; 
+                }
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
                     final double factor = x0 * y1 - y0 * x1;
                     sum  += factor;
                     sumX += factor * (x0 + x1);
                     sumY += factor * (y0 + y1);
                 }
             }
 
             if (sum < 0) {
                 // the polygon as a finite outside surrounded by an infinite inside
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
                 setSize(sum / 2);
+                // Avoid division by zero if sum is zero for very small or degenerate polygons
+                if (sum == 0) {
+                    setBarycenter(new Vector2D(0, 0)); // Or Vector2D.NaN if it's truly undefinable
+                } else {
                     setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
                 }
+            }
 
         }
 
     }
\ No newline at end of file
