diff --git a/tmp/cea23020-e433-4ee6-bb5d-ea48a98f3718_buggy.java b/tmp/d1ff3166-af79-42fc-b658-93436f313d06_fixed.java
index c53ca2a..f6d0360 100644
--- a/tmp/cea23020-e433-4ee6-bb5d-ea48a98f3718_buggy.java
+++ b/tmp/d1ff3166-af79-42fc-b658-93436f313d06_fixed.java
@@ -1,54 +1,67 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
+            // The instance has a simplified tree (empty or full), meaning getTree(false).getCut() == null.
             final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
+            final Object attribute = tree.getAttribute();
+
+            if (attribute instanceof Boolean) {
+                if ((Boolean) attribute) {
+                    // The instance covers the whole space (attribute is Boolean.TRUE)
                     setSize(Double.POSITIVE_INFINITY);
                     setBarycenter(Vector2D.NaN);
                 } else {
+                    // The instance is empty (attribute is Boolean.FALSE)
+                    setSize(0);
+                    setBarycenter(new Vector2D(0, 0));
+                }
+            } else {
+                // The attribute is not a Boolean (e.g., it's a BoundaryAttribute).
+                // If v.length == 0 and the attribute is not Boolean.TRUE,
+                // it implies the region is empty or represents only a boundary with no interior area.
+                // In such cases, the size is 0.
                 setSize(0);
                 setBarycenter(new Vector2D(0, 0));
             }
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             // all loops are closed, we compute some integrals around the shape
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
                     final double factor = x0 * y1 - y0 * x1;
                     sum  += factor;
                     sumX += factor * (x0 + x1);
                     sumY += factor * (y0 + y1);
                 }
             }
 
             if (sum < 0) {
                 // the polygon as a finite outside surrounded by an infinite inside
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
                 setSize(sum / 2);
                 setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
             }
 
         }
 
     }
\ No newline at end of file
