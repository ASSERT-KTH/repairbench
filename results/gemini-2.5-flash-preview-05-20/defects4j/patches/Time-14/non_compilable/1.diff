diff --git a/tmp/7ffe2be0-9df6-4957-ad6c-6bf4d8b626e1_buggy.java b/tmp/9b7ece75-190d-4f19-8542-ec1fb821cb14_fixed.java
index 10616db..9246e96 100644
--- a/tmp/7ffe2be0-9df6-4957-ad6c-6bf4d8b626e1_buggy.java
+++ b/tmp/9b7ece75-190d-4f19-8542-ec1fb821cb14_fixed.java
@@ -1,19 +1,26 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // When converting a MonthDay (or similar partial without a year) to an instant,
+            // a reference year must be used. The default base instant (0L, Jan 1, 1970) is
+            // not a leap year, which causes issues when handling February 29 or month-end adjustments.
+            // MonthDay typically uses a leap year (e.g., 2000 for ISOChronology) as its base year
+            // for internal calculations involving dayOfMonth and monthOfYear fields
+            // to correctly handle leap days and end-of-month adjustments.
+            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0, 0, 0, 0L); // Use a leap year (2000 for ISO) as base
+            
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
-            instant = add(instant, valueToAdd);
+            instant = add(instant, valueToAdd); // This calls the specific field's add method
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
