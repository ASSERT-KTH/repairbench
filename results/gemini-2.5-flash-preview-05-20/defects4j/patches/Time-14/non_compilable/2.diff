diff --git a/tmp/82e2bda6-aec0-45d0-980c-47972e9eef36_buggy.java b/tmp/7c27ab12-b11e-41c8-9ea5-de3b2b767fb3_fixed.java
index 10616db..1ab751e 100644
--- a/tmp/82e2bda6-aec0-45d0-980c-47972e9eef36_buggy.java
+++ b/tmp/7c27ab12-b11e-41c8-9ea5-de3b2b767fb3_fixed.java
@@ -1,19 +1,44 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+
+        // The problem for MonthDay (which is contiguous) is that converting to
+        // a long instant and back can lose the desired 'leap day' behavior.
+        // The MonthDayChronology uses year 2000 (a leap year) internally,
+        // but the add(long, int) operation sometimes adjusts Feb 29 to Feb 28.
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
-            for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            // First, perform the standard addition using the superclass's logic.
+            // This covers most cases, including month wrapping and general clamping.
+            int[] newValues = super.add(partial, fieldIndex, values, valueToAdd);
+
+            // Special handling for MonthDay's leap year/end-of-month adjustment
+            // This applies when adding to the month field and the day needs adjustment
+            // (e.g., March 31 minus 1 month should be Feb 29, not Feb 28).
+            if (fieldIndex == partial.indexOf(DateTimeFieldType.monthOfYear())) {
+                int originalDay = values[partial.indexOf(DateTimeFieldType.dayOfMonth())];
+                int newMonth = newValues[partial.indexOf(DateTimeFieldType.monthOfYear())];
+                int newDay = newValues[partial.indexOf(DateTimeFieldType.dayOfMonth())];
+
+                // If the new month is February and the original day implies a leap day (29 or greater),
+                // and the calculated new day was clamped to 28 (non-leap February),
+                // then adjust it to 29 (as MonthDay's February 29 implies a leap year context).
+                if (newMonth == 2) { // Target month is February
+                    // Check if the original day was 29, or would have been clamped to 29 (e.g., March 31 -> Feb)
+                    if (originalDay == 29 || originalDay > 29) {
+                        // If the result was clamped to 28 (meaning it incorrectly treated Feb as non-leap)
+                        if (newDay == 28) {
+                            newValues[partial.indexOf(DateTimeFieldType.dayOfMonth())] = 29;
                         }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+                    }
+                }
+            }
+            return newValues;
         } else {
+            // For non-contiguous partials, delegate to the superclass which handles them generically.
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
