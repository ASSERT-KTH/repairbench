diff --git a/tmp/862468d9-8391-42f0-8bd0-1606dbbe8937_buggy.java b/tmp/4e543050-b95d-4f56-b3b8-812a6069d85e_fixed.java
index 10616db..5835a5c 100644
--- a/tmp/862468d9-8391-42f0-8bd0-1606dbbe8937_buggy.java
+++ b/tmp/4e543050-b95d-4f56-b3b8-812a6069d85e_fixed.java
@@ -1,19 +1,39 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
             // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // MonthDay (and similar partials that lack a year field but deal with month/day)
+            // requires a consistent year context for calculations, especially for Feb 29
+            // and end-of-month adjustments. The default instant (0L = 1970-01-01) is
+            // not a leap year, causing issues.
+            // We use a known leap year (2000) as the base for the instant to ensure
+            // correct behavior for Feb 29 and month-end truncations.
+            
+            // Start with Jan 1, 2000 (a leap year) as the base instant.
+            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0); 
+            
+            // Populate the instant with the values from the partial.
+            // This ensures that even if partial represents Feb 29, it's set against
+            // a leap year backdrop, making it valid.
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
-            instant = add(instant, valueToAdd);
+
+            // Now, 'instant' safely represents the partial's date within a leap year context.
+            // Apply the addition using the appropriate field (determined by fieldIndex).
+            org.joda.time.DurationField field = partial.getFieldType(fieldIndex).getDurationType().getField(iChronology);
+            instant = field.add(instant, valueToAdd);
+
+            // Convert the resulting instant back to the partial's fields.
+            // iChronology.get(partial, instant) will correctly extract month and day,
+            // handling month-end truncations based on the actual date represented by 'instant'.
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
