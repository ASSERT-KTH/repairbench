diff --git a/tmp/63505269-9f94-44d2-b4e7-c85cffc4d998_buggy.java b/tmp/2a7b104d-6cd1-4d00-b60f-966bd31e9d9b_fixed.java
index 10616db..1989a6f 100644
--- a/tmp/63505269-9f94-44d2-b4e7-c85cffc4d998_buggy.java
+++ b/tmp/2a7b104d-6cd1-4d00-b60f-966bd31e9d9b_fixed.java
@@ -1,19 +1,23 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
             // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // For MonthDay, the internal instant must use a consistent leap year
+            // to correctly handle Feb 29. Initializing with 0L (1970-01-01) is problematic
+            // because 1970 is not a leap year. Use a known leap year (e.g., 1972) as base.
+            long instant = iChronology.getDateTimeMillis(1972, 1, 1, 0, 0, 0, 0);
+
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
