diff --git a/tmp/0761a11b-a185-425b-98b5-f4a6bfd18474_buggy.java b/tmp/ec07818a-bf4c-4a6c-a87a-ddbec7fb85b8_fixed.java
index 10616db..bc433b8 100644
--- a/tmp/0761a11b-a185-425b-98b5-f4a6bfd18474_buggy.java
+++ b/tmp/ec07818a-bf4c-4a6c-a87a-ddbec7fb85b8_fixed.java
@@ -1,19 +1,38 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // MonthDay is a special partial that needs to handle leap year rules correctly
+            // without being bound to a specific year's leap status.
+            // To do this, we use a fixed leap year (e.g., 2000) as the base for calculations.
+            // The specific year (2000) does not affect the final MonthDay value,
+            // only its leap status is important for day-of-month adjustments.
+
+            // Initialize an instant using a leap year (e.g., 2000)
+            // This ensures Feb 29 can always be created and used in intermediate calculations.
+            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0);
+
+            // Set the existing values of the partial (month, day) onto this base instant.
+            // This will correctly create an instant like 2000-02-29 or 2000-03-31, etc.
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+
+            // Perform the addition using the field's `add(long, int)` method.
+            // This `add` method implicitly handles month-end adjustments (e.g., Mar 31 + 1 month -> Apr 30).
+            // Because the base year (2000) is a leap year, it will correctly allow Feb 29 when applicable.
             instant = add(instant, valueToAdd);
+
+            // Extract the new values (month and day) from the modified instant.
+            // The chronology will correctly extract the month and day from the 2000-based instant.
             return iChronology.get(partial, instant);
         } else {
+            // For non-contiguous partials, revert to the superclass's implementation.
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
