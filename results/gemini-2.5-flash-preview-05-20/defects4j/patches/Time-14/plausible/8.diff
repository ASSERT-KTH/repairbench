diff --git a/tmp/72356e24-4361-4014-a938-ba06f6b87e92_buggy.java b/tmp/3c17c223-120a-4a1a-b299-0a003cd9d1e9_fixed.java
index 10616db..e3d1f17 100644
--- a/tmp/72356e24-4361-4014-a938-ba06f6b87e92_buggy.java
+++ b/tmp/3c17c223-120a-4a1a-b299-0a003cd9d1e9_fixed.java
@@ -1,19 +1,25 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
             // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // When converting a MonthDay (which has no year) to a long instant,
+            // a year context is needed. If the original MonthDay is Feb 29,
+            // using 0L (epoch 1970-01-01, which is not a leap year) will cause
+            // an IllegalFieldValueException when setting the day to 29 in February.
+            // By setting the base year to a known leap year (e.g., 2000), Feb 29
+            // can be correctly represented during the intermediate instant calculation.
+            long instant = iChronology.setYear(0L, 2000); 
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
