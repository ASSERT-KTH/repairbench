diff --git a/tmp/1bf52dec-6398-46ea-a04b-b8236b5151c8_buggy.java b/tmp/db8790e8-8a55-462a-a685-df2dc859a9f4_fixed.java
index 10616db..a1a7621 100644
--- a/tmp/1bf52dec-6398-46ea-a04b-b8236b5151c8_buggy.java
+++ b/tmp/db8790e8-8a55-462a-a685-df2dc859a9f4_fixed.java
@@ -1,19 +1,29 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
             // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // MonthDay doesn't contain a year, but calculations involving dayOfMonth
+            // and monthOfYear (especially Feb 29th and month-end adjustments)
+            // require a year context. Using a fixed leap year (e.g., 2000) for the
+            // internal instant representation ensures that Feb 29th is a valid day
+            // and allows month-end adjustments to behave consistently (e.g., March 31
+            // becomes Feb 29 in a leap year context, rather than Feb 28).
+            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0); // Use a leap year as a base for calculations
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+            // Now 'instant' holds the date in year 2000 (e.g., 2000-02-29 if original values were [2,29]).
+            // Perform the addition using the field's specific add method.
+            // This 'add' refers to the add(long instant, int value) method of this DateTimeField.
             instant = add(instant, valueToAdd);
+            // Convert the resulting instant back to the MonthDay partial, extracting month and day.
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
