diff --git a/tmp/603ba200-8068-407d-af14-07c62731a01a_buggy.java b/tmp/7945e990-b186-4dd0-b764-fe6453bfbbe1_fixed.java
index 10616db..ec24ab3 100644
--- a/tmp/603ba200-8068-407d-af14-07c62731a01a_buggy.java
+++ b/tmp/7945e990-b186-4dd0-b764-fe6453bfbbe1_fixed.java
@@ -1,19 +1,32 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // The original code initialized 'instant' to 0L, which corresponds to 1970-01-01.
+            // 1970 is not a leap year. When trying to set MonthDay fields like 02-29
+            // on a 1970 base instant, it leads to IllegalFieldValueException because 02-29-1970 is invalid.
+            // MonthDay internally uses a fixed leap year (2000) for its calculations to handle
+            // leap year days correctly without a specific year context.
+            // Therefore, we should initialize the base instant with a leap year
+            // (e.g., 2000-01-01) to allow correct handling of February 29th.
+            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0); // Use a leap year as the base.
+
             for (int i = 0, isize = partial.size(); i < isize; i++) {
+                // Set the current values of the partial onto the chosen base instant.
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+            // Now, perform the addition using the appropriate field's 'add' method.
+            // This 'add' refers to the add(long instant, int valueToAdd) method of this field.
             instant = add(instant, valueToAdd);
+            // Extract the fields from the modified instant back into the values array.
             return iChronology.get(partial, instant);
         } else {
+            // For non-contiguous partials, fall back to the superclass implementation.
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
