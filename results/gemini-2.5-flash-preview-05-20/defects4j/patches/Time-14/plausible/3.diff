diff --git a/tmp/d728a163-4f59-42f9-98ea-acb28b26e38e_buggy.java b/tmp/7e6cfb35-991b-4d3b-be8f-06ec1a3b831b_fixed.java
index 10616db..d0f3f92 100644
--- a/tmp/d728a163-4f59-42f9-98ea-acb28b26e38e_buggy.java
+++ b/tmp/7e6cfb35-991b-4d3b-be8f-06ec1a3b831b_fixed.java
@@ -1,19 +1,33 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
             // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+            // MonthDay (and other contiguous partials without a year field like DayOfMonth)
+            // typically use a fixed reference year for calculations that involve converting
+            // to/from a full instant (milliseconds since epoch).
+            // The default 0L instant corresponds to 1970-01-01, which is not a leap year.
+            // If the partial includes a Feb 29th, applying it to a non-leap year
+            // will cause an IllegalFieldValueException.
+            // Joda-Time's MonthDay uses 2000 as its reference year (which is a leap year).
+            // We initialize the instant using this reference year to ensure Feb 29th is valid.
+            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0, 0, 0, 0);
+
             for (int i = 0, isize = partial.size(); i < isize; i++) {
+                // Apply the current values of the partial to the reference instant
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+            // Now perform the addition on the constructed instant
+            // This `add` call refers to the `public long add(long instant, int valueToAdd)`
+            // method of this (DateTimeField) class, which handles the actual field arithmetic.
             instant = add(instant, valueToAdd);
+            // Convert the resulting instant back to the partial's field values
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
