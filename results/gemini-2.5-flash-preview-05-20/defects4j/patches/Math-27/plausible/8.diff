diff --git a/tmp/6b79d05c-685d-40d6-8b78-d14f5a7f5703_buggy.java b/tmp/24faa056-a713-42af-a3e6-614eaa0536fe_fixed.java
index 490e9f7..3a8aaff 100644
--- a/tmp/6b79d05c-685d-40d6-8b78-d14f5a7f5703_buggy.java
+++ b/tmp/24faa056-a713-42af-a3e6-614eaa0536fe_fixed.java
@@ -1,11 +1,20 @@
     /**
      * <p>
      * Gets the fraction percentage as a <tt>double</tt>. This calculates the
      * fraction as the numerator divided by denominator multiplied by 100.
      * </p>
      *
      * @return the fraction percentage as a <tt>double</tt>.
      */
     public double percentageValue() {
-        return multiply(100).doubleValue();
+        // The original implementation `return multiply(100).doubleValue();`
+        // could lead to integer overflow within the Fraction's internal arithmetic
+        // when multiplying the numerator by 100, especially if the numerator
+        // is already large (e.g., Integer.MAX_VALUE / 99). This happens before
+        // the value is converted to a double, resulting in an incorrect or
+        // wrapped-around negative value.
+        //
+        // To fix this, perform the calculation using double-precision floating-point
+        // arithmetic from the start, preventing intermediate integer overflows.
+        return ((double) getNumerator() / getDenominator()) * 100.0;
     }
\ No newline at end of file
