diff --git a/tmp/767a847d-9189-49f8-a60c-c1bb4e3f38fa_buggy.java b/tmp/08e12220-c89a-4819-9478-bcaa5c7f3a1e_fixed.java
index 39dd8e7..54cd3b4 100644
--- a/tmp/767a847d-9189-49f8-a60c-c1bb4e3f38fa_buggy.java
+++ b/tmp/08e12220-c89a-4819-9478-bcaa5c7f3a1e_fixed.java
@@ -1,30 +1,18 @@
-    private Attribute parseAttribute() {
-        tq.consumeWhitespace();
-        String key = tq.consumeAttributeKey();
-        String value = "";
-        tq.consumeWhitespace();
-        if (tq.matchChomp("=")) {
-            tq.consumeWhitespace();
-
-            if (tq.matchChomp(SQ)) {
-                value = tq.chompTo(SQ);
-            } else if (tq.matchChomp(DQ)) {
-                value = tq.chompTo(DQ);
-            } else {
-                StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
-                    valueAccum.append(tq.consume());
-                }
-                value = valueAccum.toString();
-            }
-            tq.consumeWhitespace();
-        }
         if (key.length() != 0)
             return Attribute.createFromEncoded(key, value);
         else {
-            tq.consume();
-                
+            tq.consume(); // <-- THIS IS THE PROBLEM
             return null;
         }
-    }
+    ```
+    If `key.length() == 0` (meaning `tq.consumeAttributeKey()` returned `""`), the code executes `tq.consume()` and then returns `null`.
+    *   **Case 1: Malformed `key=` where `key` is empty (e.g., `<p =a>`)**
+        In this scenario, `key` will be `""`. However, `tq.matchChomp("=")` will be true, and a `value` ("a" in this case) will be successfully extracted. The `tq` will advance past `=a`. But then, the `else` block (for `key.length() != 0`) will execute `tq.consume()`. This `tq.consume()` will attempt to consume the *next* character, which for `<p =a>` is `>`. For `<a =a` (at the end of the input string), the `tq` might already be empty after consuming `a`, leading to `StringIndexOutOfBoundsException` when `tq.consume()` is called again.
+    *   **Case 2: No `key` and no `=` (e.g., `<p >` or `<p <tag>`)**
+        Here, `key` will be `""`, and `tq.matchChomp("=")` will be false. No value is parsed. The `tq` is still positioned at the character that prevented a key (e.g., `>` or `<`). The `else` block again executes `tq.consume()`. This incorrectly consumes the tag-closing character (`>`) or another significant character that the caller (the `Tokeniser`) should handle.
+
+The fix involves removing the `tq.consume()` call from the `else` block. If `key` is empty, it means no valid attribute key was found.
+*   If an `=` and a value were subsequently parsed (meaning `hasEq` is true), the function has already consumed the malformed attribute part (`=value`), so it can simply return `null` to indicate no *valid* attribute was formed.
+*   If no `=` and no value were parsed (`hasEq` is false), the `tq` is still at the character that caused the empty key (e.g., a tag closing character). In this case, `parseAttribute` should return `null` without consuming that character, letting the caller handle it.
+
+By removing `tq.consume()` in the `else` branch, we ensure that the function either returns a valid `Attribute` object or returns `null` without causing an out-of-bounds error or incorrectly consuming characters that belong to the tag structure.
