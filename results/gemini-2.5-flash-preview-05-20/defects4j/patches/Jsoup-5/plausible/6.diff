diff --git a/tmp/7902ff05-2621-4c31-baf4-0e1448cb1038_buggy.java b/tmp/67f63074-0038-493c-814b-d848440446d4_fixed.java
index 39dd8e7..3fea5aa 100644
--- a/tmp/7902ff05-2621-4c31-baf4-0e1448cb1038_buggy.java
+++ b/tmp/67f63074-0038-493c-814b-d848440446d4_fixed.java
@@ -1,30 +1,58 @@
     private Attribute parseAttribute() {
-        tq.consumeWhitespace();
-        String key = tq.consumeAttributeKey();
-        String value = "";
-        tq.consumeWhitespace();
-        if (tq.matchChomp("=")) {
-            tq.consumeWhitespace();
+        tq.consumeWhitespace(); // Consume leading whitespace for attribute name
+        String key = tq.consumeAttributeKey(); // Consume the attribute key
 
-            if (tq.matchChomp(SQ)) {
+        String value = ""; // Initialize value as empty string
+        tq.consumeWhitespace(); // Consume whitespace between key and '='
+
+        // Check if an '=' follows the key
+        boolean hasEq = tq.matchChomp("="); 
+        if (hasEq) {
+            tq.consumeWhitespace(); // Consume whitespace after '='
+
+            // Parse the attribute value based on its enclosure
+            if (tq.matchChomp(SQ)) { // Single quoted value
                 value = tq.chompTo(SQ);
-            } else if (tq.matchChomp(DQ)) {
+            } else if (tq.matchChomp(DQ)) { // Double quoted value
                 value = tq.chompTo(DQ);
-            } else {
+            } else { // Unquoted value
                 StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
+                // Consume characters until a tag delimiter ('<', '/>', '>'), whitespace, or end of stream
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
-            tq.consumeWhitespace();
+            tq.consumeWhitespace(); // Consume whitespace after the value
         }
-        if (key.length() != 0)
-            return Attribute.createFromEncoded(key, value);
-        else {
+
+        // Decide whether to return a valid Attribute or null (for malformed cases)
+        if (key.length() == 0) {
+            // If the key is empty, it's not a valid attribute name.
+            // This happens if tq.consumeAttributeKey() didn't find a valid key char (e.g., started with '=', '.', '>', etc.).
+            
+            if (hasEq) {
+                // Case: ` =value` (e.g., from "<p =a>")
+                // An explicit assignment was found, but the key was empty.
+                // The value (if any) has already been consumed by the parser.
+                // We discard this malformed attribute. Do NOT consume any more characters
+                // as the value parsing already advanced the queue past the value.
+                return null;
+            } else {
+                // Case: ` .attribute` or ` !attribute` (e.g., from "<p .....")
+                // An empty key was found and no assignment (`=`) followed.
+                // The character that caused `consumeAttributeKey()` to return empty (e.g., '.', '!')
+                // is still at the current TokenQueue position.
+                // We must consume this character to advance the queue and prevent an infinite loop
+                // in the calling Tokeniser state, which expects progress.
+                if (!tq.isEmpty()) { // Ensure there's a character to consume
                     tq.consume();
-                
+                }
                 return null;
             }
+        } else {
+            // The key is not empty, so it's a valid attribute (or at least its key is valid).
+            // Create and return the attribute.
+            return Attribute.createFromEncoded(key, value);
+        }
     }
\ No newline at end of file
