diff --git a/tmp/a6b43ff5-b980-42c6-9d07-89ecb3be0f11_buggy.java b/tmp/684b85f5-1d59-4b36-b084-0b8ac9587e15_fixed.java
index 39dd8e7..95638dd 100644
--- a/tmp/a6b43ff5-b980-42c6-9d07-89ecb3be0f11_buggy.java
+++ b/tmp/684b85f5-1d59-4b36-b084-0b8ac9587e15_fixed.java
@@ -1,30 +1,41 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
-        if (tq.matchChomp("=")) {
+
+        // Introduce a flag to track if '=' was matched and consumed
+        boolean hasEq = tq.matchChomp("=");
+
+        if (hasEq) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
         }
-        if (key.length() != 0)
+
+        if (key.length() != 0) {
             return Attribute.createFromEncoded(key, value);
-        else {
+        } else {
+            // Key is empty, indicating a malformed attribute.
+            // If an '=' was NOT present, we need to consume the character that prevented a key from being parsed (e.g., '/', '"').
+            // We must also ensure the queue is not empty before attempting to consume.
+            if (!hasEq && !tq.isEmpty()) {
                 tq.consume();
-                
+            }
+            // In either case (whether '=' was handled or not, or a junk character was consumed),
+            // we return null as no valid attribute key was found.
             return null;
         }
     }
\ No newline at end of file
