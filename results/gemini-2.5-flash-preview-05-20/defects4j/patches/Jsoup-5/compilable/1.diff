diff --git a/tmp/0c44aa6d-6e4d-4c25-aced-427c72c94653_buggy.java b/tmp/4a0ec176-784f-412e-93b9-0ec1f05b05f8_fixed.java
index 39dd8e7..2dfb7c8 100644
--- a/tmp/0c44aa6d-6e4d-4c25-aced-427c72c94653_buggy.java
+++ b/tmp/4a0ec176-784f-412e-93b9-0ec1f05b05f8_fixed.java
@@ -1,30 +1,53 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
-        if (tq.matchChomp("=")) {
-            tq.consumeWhitespace();
         
-            if (tq.matchChomp(SQ)) {
+        // Capture whether an '=' exists directly after the key (and its whitespace).
+        // This is done once to correctly determine the attribute type and consume the '='.
+        boolean hasEq = tq.matchChomp("=");
+
+        // New logic to handle malformed attribute keys like "....." for cases like "<p .....".
+        // If a key was consumed (meaning key.length() > 0), AND it was NOT followed by an '=',
+        // AND the key does not start with a valid HTML attribute name character (letter or digit),
+        // then this key is considered invalid and should not form an attribute.
+        // This heuristic ensures "....." is discarded, leading to <p></p> instead of <p .....="">.
+        // The key has already been "chomped" by consumeAttributeKey(), so no additional consumption is needed here.
+        if (key.length() > 0 && !hasEq && !Character.isLetterOrDigit(key.charAt(0))) {
+            return null; // Discard this malformed attribute; it should not be formed.
+        }
+
+        if (hasEq) { // If an '=' was found, indicating a potential value
+            tq.consumeWhitespace(); // Consume whitespace after '='
+
+            if (tq.matchChomp(SQ)) { // Single quoted value
                 value = tq.chompTo(SQ);
-            } else if (tq.matchChomp(DQ)) {
+            } else if (tq.matchChomp(DQ)) { // Double quoted value
                 value = tq.chompTo(DQ);
             } else {
+                // Unquoted value: scan until an HTML tag closing character, whitespace, or end of stream.
                 StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
-            tq.consumeWhitespace();
+            tq.consumeWhitespace(); // Consume whitespace after the value
         }
-        if (key.length() != 0)
+        
+        // If a valid (non-empty and not-discarded by the new logic) key was parsed, create an attribute.
+        if (key.length() != 0) {
             return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-                
-            return null;
+        } else {
+            // If key.length() is 0 (meaning consumeAttributeKey returned an empty string),
+            // it indicates that no valid key was found. This happens if the first character
+            // was an attribute delimiter (like '=') or the TokenQueue was empty.
+            // In such cases, no attribute should be created, and we must advance the queue
+            // past the problematic character if it exists, to avoid infinite loops or re-processing.
+            if (!tq.isEmpty()) { // Crucial check to prevent StringIndexOutOfBoundsException
+                tq.consume(); // Consume the character that prevented a key from being formed
+            }
+            return null; // No attribute could be parsed
         }
     }
\ No newline at end of file
