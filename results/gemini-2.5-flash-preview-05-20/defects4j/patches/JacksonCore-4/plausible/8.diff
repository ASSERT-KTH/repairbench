diff --git a/tmp/aaeabe31-b2c6-4cd8-9826-ae0e3b1ba1ee_buggy.java b/tmp/014b8536-cea6-4f7a-9d55-141c6e7d8051_fixed.java
index c6cb157..232ef13 100644
--- a/tmp/aaeabe31-b2c6-4cd8-9826-ae0e3b1ba1ee_buggy.java
+++ b/tmp/014b8536-cea6-4f7a-9d55-141c6e7d8051_fixed.java
@@ -1,14 +1,48 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen;
+
+        // Determine base growth.
+        // Default growth is 50% (len + len/2).
+        // If current length is less than MAX_SEGMENT_LEN, cap at MAX_SEGMENT_LEN.
+        // If current length is already at or above MAX_SEGMENT_LEN, apply 25% growth.
+
+        if (len < MAX_SEGMENT_LEN) {
+            // Grow by 50% by default, but don't exceed MAX_SEGMENT_LEN.
+            newLen = len + (len >> 1); // equivalent to len + len/2
+            if (newLen > MAX_SEGMENT_LEN || newLen < len) { // Check for cap or potential overflow for very large len
+                newLen = MAX_SEGMENT_LEN;
+            }
+        } else {
+            // Current length is already at or above MAX_SEGMENT_LEN.
+            // As per comment: "above intended maximum, slow to increase by 25%".
+            // Calculate 25% of current length.
+            int quarterLen = (len >> 2); // equivalent to len / 4
+            if (quarterLen < 1) { // Ensure at least 1 character growth for very small lengths or when len is huge and >> 2 is 0
+                quarterLen = 1;
+            }
+            newLen = len + quarterLen;
+
+            // Handle potential integer overflow when adding quarterLen.
+            // If newLen wrapped around to a value smaller than or equal to len, it means overflow occurred.
+            // In such a case, set to Integer.MAX_VALUE to indicate largest possible buffer.
+            if (newLen <= len && len < Integer.MAX_VALUE) { // len < Integer.MAX_VALUE check avoids issues if len itself is MAX_VALUE
+                newLen = Integer.MAX_VALUE;
+            }
+        }
+
+        // Final safeguard to ensure the new length is strictly greater than the old length,
+        // unless the current length is already Integer.MAX_VALUE (cannot grow further).
+        if (newLen <= len && len < Integer.MAX_VALUE) {
+            newLen = len + 1;
+        }
+
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
