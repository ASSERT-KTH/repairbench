diff --git a/tmp/1c77a065-4717-423e-b914-3fff802e1253_buggy.java b/tmp/a1ed78eb-ea34-439d-bc64-4044f0dba6a8_fixed.java
index c6cb157..39a4c56 100644
--- a/tmp/1c77a065-4717-423e-b914-3fff802e1253_buggy.java
+++ b/tmp/a1ed78eb-ea34-439d-bc64-4044f0dba6a8_fixed.java
@@ -1,14 +1,57 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen;
+
+        // Original code's special case: if current length is exactly MAX_SEGMENT_LEN, grow by 1.
+        if (len == MAX_SEGMENT_LEN) {
+            newLen = MAX_SEGMENT_LEN + 1;
+        }
+        // If current length is less than MAX_SEGMENT_LEN, apply default 50% growth, capped at MAX_SEGMENT_LEN.
+        else if (len < MAX_SEGMENT_LEN) {
+            newLen = len + (len >> 1); // Grow by 50%
+            if (newLen > MAX_SEGMENT_LEN) {
+                newLen = MAX_SEGMENT_LEN; // Cap at MAX_SEGMENT_LEN
+            }
+        }
+        // This is the crucial part: if current length is already greater than MAX_SEGMENT_LEN
+        // (e.g., 262145 when MAX_SEGMENT_LEN is 262144, as seen in the test failure).
+        // The original code would shrink it to MAX_SEGMENT_LEN.
+        // The comment suggests "slow to increase by 25%".
+        else { // len > MAX_SEGMENT_LEN
+            newLen = len + (len >> 2); // Grow by 25%
+        }
+
+        // --- Defensive checks for array size limits and ensuring growth ---
+        // Java array maximum size is Integer.MAX_VALUE - 8
+        final int maxArrayLen = Integer.MAX_VALUE - 8;
+
+        // Ensure newLen does not exceed Java's max array length
+        if (newLen > maxArrayLen) {
+            newLen = maxArrayLen;
+        }
+
+        // Ensure newLen is strictly greater than len to guarantee expansion,
+        // unless already at absolute max length.
+        if (newLen <= len) {
+            // This condition is met if:
+            // 1. `len` is very large, and the calculated growth (`len >> X`) is 0.
+            // 2. An integer overflow occurred causing `newLen` to wrap around.
+            // 3. `len` is already `maxArrayLen`.
+            if (len < maxArrayLen) {
+                // If not yet at the absolute max, try to grow by at least 1.
+                newLen = len + 1;
+            } else {
+                // If already at maxArrayLen, cannot expand further.
+                return curr; // Return current segment, no expansion.
+            }
+        }
+
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
