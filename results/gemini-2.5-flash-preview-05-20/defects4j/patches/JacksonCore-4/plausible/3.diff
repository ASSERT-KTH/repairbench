diff --git a/tmp/cc78a931-2a96-4390-9a1d-fa2df12f332b_buggy.java b/tmp/f07d867a-70ab-4b01-ad37-4ed037ff9d6f_fixed.java
index c6cb157..7c1a903 100644
--- a/tmp/cc78a931-2a96-4390-9a1d-fa2df12f332b_buggy.java
+++ b/tmp/f07d867a-70ab-4b01-ad37-4ed037ff9d6f_fixed.java
@@ -1,14 +1,34 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen;
+
+        // Original code had specific handling for len == MAX_SEGMENT_LEN,
+        // expanding by just 1. We keep this behavior.
+        if (len == MAX_SEGMENT_LEN) {
+            newLen = MAX_SEGMENT_LEN + 1;
+        } else if (len < MAX_SEGMENT_LEN) {
+            // "Let's grow by 50% by default"
+            // Ensure we don't jump directly past MAX_SEGMENT_LEN
+            // if current len is much smaller.
+            newLen = len + (len >> 1); // grow by 50%
+            if (newLen > MAX_SEGMENT_LEN) {
+                newLen = MAX_SEGMENT_LEN;
+            }
+        } else { // len > MAX_SEGMENT_LEN
+            // "but above intended maximum, slow to increase by 25%"
+            newLen = len + (len >> 2); // grow by 25%
+            // Ensure actual growth (protect against (len >> 2) being 0 for small len,
+            // or potential overflow if len is extremely large, though unlikely here).
+            if (newLen <= len) {
+                newLen = len + 1;
+            }
+        }
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
