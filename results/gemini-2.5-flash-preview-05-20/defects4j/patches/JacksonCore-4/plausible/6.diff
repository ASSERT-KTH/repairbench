diff --git a/tmp/6b9a51f2-7bc8-4169-bbe4-2d63e940238d_buggy.java b/tmp/ec554a1c-dd07-4e9f-850f-ca80b3fc8972_fixed.java
index c6cb157..d4e3900 100644
--- a/tmp/6b9a51f2-7bc8-4169-bbe4-2d63e940238d_buggy.java
+++ b/tmp/ec554a1c-dd07-4e9f-850f-ca80b3fc8972_fixed.java
@@ -1,14 +1,45 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen;
+
+        // The original logic was:
+        // int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        // This causes a bug when `len > MAX_SEGMENT_LEN`, because `Math.min(MAX_SEGMENT_LEN, ...)`
+        // would cap the new length at `MAX_SEGMENT_LEN`, which is smaller than `len`, leading to shrinkage.
+        // The comment "above intended maximum, slow to increase by 25%" indicates different behavior is needed.
+
+        if (len < MAX_SEGMENT_LEN) {
+            // Below intended maximum, grow by 50%.
+            // The original code implicitly capped this at MAX_SEGMENT_LEN,
+            // so we retain that behavior for this growth phase.
+            newLen = Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        } else if (len == MAX_SEGMENT_LEN) {
+            // Exactly at intended maximum, grow by 1 to get past it.
+            // This was the explicit case in the original logic.
+            newLen = MAX_SEGMENT_LEN + 1;
+        } else { // len > MAX_SEGMENT_LEN
+            // Already above intended maximum, increase by 25% as per comment.
+            // This is the key fix for the reported bug.
+            newLen = len + (len >> 2);
+        }
+
+        // Final sanity check: ensure newLen is strictly greater than len.
+        // This handles cases where the calculated growth might be zero (for very small `len` values)
+        // or where an integer overflow might occur for extremely large `len` values (though unlikely
+        // given typical MAX_SEGMENT_LEN and test cases).
+        if (newLen <= len) {
+            // Enforce at least 1 unit of growth.
+            // (Note: For `len == Integer.MAX_VALUE`, `len + 1` would overflow, but that's
+            // a general array size limit issue not directly related to MAX_SEGMENT_LEN).
+            newLen = len + 1;
+        }
+
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
