diff --git a/tmp/0dbaa72d-2e43-4668-9188-4179547f3247_buggy.java b/tmp/78336352-09b6-4251-b373-3430aef48a15_fixed.java
index c6cb157..8751a07 100644
--- a/tmp/0dbaa72d-2e43-4668-9188-4179547f3247_buggy.java
+++ b/tmp/78336352-09b6-4251-b373-3430aef48a15_fixed.java
@@ -1,14 +1,47 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen;
+
+        // If current length is exactly MAX_SEGMENT_LEN, grow by 1 to ensure progress.
+        // This handles the special case where the buffer has reached its "normal" maximum.
+        if (len == MAX_SEGMENT_LEN) {
+            newLen = MAX_SEGMENT_LEN + 1;
+        }
+        // If current length is less than MAX_SEGMENT_LEN, grow by 50%,
+        // but cap the new length at MAX_SEGMENT_LEN to prevent excessive allocation
+        // if the 50% growth would exceed MAX_SEGMENT_LEN.
+        else if (len < MAX_SEGMENT_LEN) {
+            newLen = len + (len >> 1); // Grow by 50% (len + len/2)
+            if (newLen > MAX_SEGMENT_LEN) {
+                newLen = MAX_SEGMENT_LEN;
+            }
+        }
+        // If current length is already greater than MAX_SEGMENT_LEN (as per the failing test case),
+        // apply a slower growth rate (25%) as indicated by comments, without capping below
+        // the current length. This ensures the buffer always expands if it's already
+        // larger than MAX_SEGMENT_LEN.
+        else { // len > MAX_SEGMENT_LEN
+            newLen = len + (len >> 2); // Grow by 25% (len + len/4)
+        }
+
+        // Final sanity check: ensure newLen is strictly greater than len and handles potential overflow.
+        // This is crucial to guarantee expansion and prevent issues if len is extremely large
+        // (e.g., near Integer.MAX_VALUE) or if a calculated newLen somehow resulted in no growth or shrink.
+        if (newLen <= len) {
+            // If newLen did not grow, force a minimum expansion of 1
+            newLen = len + 1;
+            // Check for integer overflow, if len was already Integer.MAX_VALUE
+            if (newLen < 0) { // Overflowed
+                newLen = Integer.MAX_VALUE;
+            }
+        }
+
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
