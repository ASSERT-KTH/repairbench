diff --git a/tmp/ca7fc95f-9ab3-442b-b728-8d90b9039eea_buggy.java b/tmp/75ffdad1-25d5-4909-8ed6-5369b4f02cb5_fixed.java
index c6cb157..b7d37f8 100644
--- a/tmp/ca7fc95f-9ab3-442b-b728-8d90b9039eea_buggy.java
+++ b/tmp/75ffdad1-25d5-4909-8ed6-5369b4f02cb5_fixed.java
@@ -1,14 +1,46 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+
+        int newLen;
+
+        // Logic based on original comments:
+        // "Let's grow by 50% by default" applies when current length is less than MAX_SEGMENT_LEN.
+        // "but above intended maximum, slow to increase by 25%" applies when current length is at or beyond MAX_SEGMENT_LEN.
+
+        if (len < MAX_SEGMENT_LEN) {
+            // Default 50% growth: len + (len / 2)
+            newLen = len + (len >> 1);
+            // If this growth pushes it past MAX_SEGMENT_LEN, cap it at MAX_SEGMENT_LEN.
+            // This is consistent with the original Math.min(MAX_SEGMENT_LEN, ...) behavior
+            // for lengths below MAX_SEGMENT_LEN.
+            if (newLen > MAX_SEGMENT_LEN) {
+                newLen = MAX_SEGMENT_LEN;
+            }
+        } else {
+            // When current length is at or beyond MAX_SEGMENT_LEN (the "intended maximum"),
+            // apply a slower 25% growth (len + (len / 4)).
+            // This path also ensures that the buffer continues to grow,
+            // addressing the problem where it would shrink from MAX_SEGMENT_LEN+1 to MAX_SEGMENT_LEN.
+            newLen = len + (len >> 2); // 25% growth
+            // No explicit upper cap here, as the test expects growth beyond MAX_SEGMENT_LEN
+            // up to 500,000 characters.
+        }
+
+        // Essential safeguard: Ensure the new length is always strictly greater than the current length.
+        // This covers edge cases where the growth calculation might result in zero growth (e.g., for very small lengths
+        // where 'len >> N' is 0, or if 'len' is extremely large causing overflow that makes newLen <= len).
+        if (newLen <= len) {
+            newLen = len + 1; // Always grow by at least 1 character
+        }
+
+        // Arrays.copyOf handles the actual array creation; it will correctly
+        // throw OutOfMemoryError if the requested size is too large for the JVM.
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
