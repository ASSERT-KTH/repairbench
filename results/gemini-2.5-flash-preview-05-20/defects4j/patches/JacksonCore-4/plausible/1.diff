diff --git a/tmp/b3e174ae-68ab-4a0c-828e-7d8b3d262b5a_buggy.java b/tmp/d79591db-aeb5-4ad9-b75f-03dce5afb6b6_fixed.java
index c6cb157..2128db2 100644
--- a/tmp/b3e174ae-68ab-4a0c-828e-7d8b3d262b5a_buggy.java
+++ b/tmp/d79591db-aeb5-4ad9-b75f-03dce5afb6b6_fixed.java
@@ -1,14 +1,41 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
-        return (_currentSegment = Arrays.copyOf(curr, newLen));
+        int newLen;
+
+        // Determine new length based on current length relative to MAX_SEGMENT_LEN
+        if (len < MAX_SEGMENT_LEN) {
+            // Default growth: expand by 50%
+            newLen = len + (len >> 1);
+            // Ensure this doesn't accidentally exceed MAX_SEGMENT_LEN if 50% growth is too much.
+            // The original logic capped at MAX_SEGMENT_LEN unless it was exactly MAX_SEGMENT_LEN.
+            newLen = Math.min(MAX_SEGMENT_LEN, newLen);
+        } else if (len == MAX_SEGMENT_LEN) {
+            // Special case: if we are exactly at MAX_SEGMENT_LEN, allow one more byte.
+            // This pushes it slightly beyond the 'normal' max.
+            newLen = MAX_SEGMENT_LEN + 1;
+        } else { // len > MAX_SEGMENT_LEN
+            // If already above MAX_SEGMENT_LEN (e.g., due to previous MAX_SEGMENT_LEN + 1 growth),
+            // slow down growth to 25%.
+            newLen = len + (len >> 2); // Grow by 25%
+        }
+
+        // Final safety check: ensure the new length is strictly greater than the current length.
+        // This handles cases where `len >> X` might be 0 (for very small `len`) or
+        // potential integer overflows that could cause `newLen` to be less than or equal to `len`.
+        if (newLen <= len) {
+            // If len + 1 overflows (i.e., len is Integer.MAX_VALUE), newLen becomes negative.
+            // Arrays.copyOf will then throw NegativeArraySizeException, which is the correct behavior
+            // when maximum capacity is reached.
+            newLen = len + 1;
+        }
+
+        // Return the new expanded array, making it the current segment
+        return (_currentSegment = java.util.Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
