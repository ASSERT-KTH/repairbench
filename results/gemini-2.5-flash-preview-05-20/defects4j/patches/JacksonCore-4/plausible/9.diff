diff --git a/tmp/ac895733-d897-4d7c-8303-dccd008f8f5e_buggy.java b/tmp/e682b71f-2ee6-4045-8727-73254574180a_fixed.java
index c6cb157..45dc843 100644
--- a/tmp/ac895733-d897-4d7c-8303-dccd008f8f5e_buggy.java
+++ b/tmp/e682b71f-2ee6-4045-8727-73254574180a_fixed.java
@@ -1,14 +1,43 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen;
+
+        // "Let's grow by 50% by default" (when below MAX_SEGMENT_LEN)
+        // "but above intended maximum, slow to increase by 25%"
+        // MAX_SEGMENT_LEN is an "intended maximum", not a strict hard limit.
+
+        if (len < MAX_SEGMENT_LEN) {
+            // Grow by 50%, capped at MAX_SEGMENT_LEN
+            newLen = len + (len >> 1); // len + len/2
+            if (newLen > MAX_SEGMENT_LEN) {
+                newLen = MAX_SEGMENT_LEN;
+            }
+        } else if (len == MAX_SEGMENT_LEN) {
+            // Special case: if at the intended maximum, expand by just 1
+            // This allows exceeding MAX_SEGMENT_LEN by a small amount for the next step.
+            newLen = MAX_SEGMENT_LEN + 1;
+        } else { // len > MAX_SEGMENT_LEN
+            // If already above MAX_SEGMENT_LEN, apply the "slow to increase by 25%" rule.
+            newLen = len + (len >> 2); // len + len/4
+
+            // Ensure newLen is strictly greater than len, and handle potential overflow
+            // if len is very large or growth factor is 0 (e.g., len=1, 2, 3 for >>2)
+            if (newLen <= len) {
+                // If it didn't grow or overflowed to a smaller/negative number,
+                // try to grow by at least 1, up to Integer.MAX_VALUE.
+                newLen = len + 1;
+                if (newLen < 0) { // Indicates overflow from len + 1
+                    newLen = Integer.MAX_VALUE; // Cap at max possible array size
+                }
+            }
+        }
+
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
