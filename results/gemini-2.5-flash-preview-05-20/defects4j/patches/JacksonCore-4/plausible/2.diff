diff --git a/tmp/7cb4c1de-747f-4f83-a4e4-c96927d6b396_buggy.java b/tmp/56290ac9-b883-4bd0-b5a6-b39ce4b2a501_fixed.java
index c6cb157..97026c6 100644
--- a/tmp/7cb4c1de-747f-4f83-a4e4-c96927d6b396_buggy.java
+++ b/tmp/56290ac9-b883-4bd0-b5a6-b39ce4b2a501_fixed.java
@@ -1,14 +1,33 @@
     /**
      * Method called to expand size of the current segment, to
      * accommodate for more contiguous content. Usually only
      * used when parsing tokens like names if even then.
      */
     public char[] expandCurrentSegment()
     {
         final char[] curr = _currentSegment;
-        // Let's grow by 50% by default
         final int len = curr.length;
-        // but above intended maximum, slow to increase by 25%
-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        int newLen;
+
+        // Determine new length based on current length relative to MAX_SEGMENT_LEN
+        if (len < MAX_SEGMENT_LEN) {
+            // Normal growth: 50% increase, but not exceeding MAX_SEGMENT_LEN
+            newLen = Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
+        } else {
+            // We are already at or above the intended maximum segment length.
+            // According to the comment "but above intended maximum, slow to increase by 25%".
+            // This means we should continue to grow, but at a reduced rate.
+            // Grow by 25% (len + len/4)
+            newLen = len + (len >> 2);
+
+            // Safety check: ensure new length is strictly greater than current length.
+            // This handles cases where (len >> 2) might be 0 for very small lengths,
+            // or prevents potential issues with integer overflow near Integer.MAX_VALUE
+            // (though highly unlikely for char[] buffer sizes in practice).
+            if (newLen <= len) {
+                newLen = len + 1;
+            }
+        }
+        
         return (_currentSegment = Arrays.copyOf(curr, newLen));
     }
\ No newline at end of file
