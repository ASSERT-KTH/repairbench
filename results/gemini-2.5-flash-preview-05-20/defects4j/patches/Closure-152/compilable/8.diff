diff --git a/tmp/3e4000a9-e224-4bc5-8a1a-8b3baa813447_buggy.java b/tmp/68dbd2d8-49f4-49e4-ae70-e8c2ec774269_fixed.java
index 58a1651..ff2cc9e 100644
--- a/tmp/3e4000a9-e224-4bc5-8a1a-8b3baa813447_buggy.java
+++ b/tmp/68dbd2d8-49f4-49e4-ae70-e8c2ec774269_fixed.java
@@ -1,32 +1,40 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // The original code caused a ClassCastException if typeOfThis resolved
+    // to a UnionType or a primitive type (like StringType).
+    // To fix this, we first resolve typeOfThis to a generic JSType.
+    // Then, we use JSType.toObjectType() to convert it into an ObjectType.
+    // If the resolved type is not an ObjectType or a union of ObjectTypes
+    // that can be coerced to a single ObjectType, toObjectType() will return null.
+    // This aligns with the "warning handled upstream" comment, as a null typeOfThis
+    // would signal an invalid @this type to the TypeCheck pass.
+    JSType resolvedRawTypeOfThis = safeResolve(typeOfThis, t, scope);
+    typeOfThis = resolvedRawTypeOfThis != null ? resolvedRawTypeOfThis.toObjectType() : null;
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
