diff --git a/tmp/2dd19376-fa9f-461e-9fe0-c95d1f52e982_buggy.java b/tmp/ce59cc7b-ec01-4ec7-8b7c-137778b2674a_fixed.java
index 58a1651..46079ce 100644
--- a/tmp/2dd19376-fa9f-461e-9fe0-c95d1f52e982_buggy.java
+++ b/tmp/ce59cc7b-ec01-4ec7-8b7c-137778b2674a_fixed.java
@@ -1,32 +1,58 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isUnionType()) {
+      // If it's a UnionType, we need to find an ObjectType representation.
+      // Restrict by non-null/undefined first, as null/undefined are not objects.
+      UnionType unionType = resolvedTypeOfThis.toMaybeUnionType();
+      JSType restricted = unionType.restrictByNotNullOrUndefined();
+
+      // Get the least common supertype of the restricted union.
+      // For (Date|Array), this will typically resolve to the native ObjectType.
+      // For (string|Date), this will typically resolve to the UnknownType.
+      // Both ObjectType and UnknownType are valid ObjectType instances.
+      JSType leastSupertype = restricted.getLeastSupertype(t.getNativeType(JSTypeNative.NO_TYPE));
+
+      // The least supertype of a union of objects or mixed types is typically an ObjectType
+      // (like Object or UnknownType). If it's not, there's a deeper inconsistency.
+      typeOfThis = (ObjectType) leastSupertype;
+    } else if (resolvedTypeOfThis.isObjectType()) {
+      // If it's already an ObjectType (or a subclass), cast directly.
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      // If it's a PrimitiveType (e.g., string, number, boolean) or other JSType.
+      // Convert it to its corresponding wrapper ObjectType (e.g., String, Number, Boolean).
+      // This handles cases like `@this {string}` where the primitive 'string'
+      // needs to be represented as the 'String' object type for the `typeOfThis` field.
+      typeOfThis = resolvedTypeOfThis.toObjectType();
+    }
+
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
