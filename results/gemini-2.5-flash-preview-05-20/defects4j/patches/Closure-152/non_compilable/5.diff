diff --git a/tmp/a01ca625-3bd9-45e2-9a38-7cf88a6227ea_buggy.java b/tmp/a8f91f4c-9cf7-4fca-8414-690d9264c3fc_fixed.java
index 58a1651..f536bca 100644
--- a/tmp/a01ca625-3bd9-45e2-9a38-7cf88a6227ea_buggy.java
+++ b/tmp/a8f91f4c-9cf7-4fca-8414-690d9264c3fc_fixed.java
@@ -1,32 +1,50 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isObjectType()) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis.isUnionType()) {
+      ObjectType candidate = resolvedTypeOfThis.toObjectType();
+      if (candidate != null) {
+        // If the union can be represented as a common object type (e.g., !(Date|Array) -> Object)
+        typeOfThis = candidate;
+      } else {
+        // If the union contains non-object types (e.g., (Date|Array) due to null, or (string|Date))
+        // it's not a valid @this object type. Assign NoType.
+        typeOfThis = registry.getNoType(); // NoType is an ObjectType
+      }
+    } else {
+      // If resolvedTypeOfThis is not an ObjectType and not a UnionType (e.g., StringType, NumberType),
+      // it's not a valid @this object type. Assign NoType.
+      typeOfThis = registry.getNoType(); // NoType is an ObjectType
+    }
+
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
