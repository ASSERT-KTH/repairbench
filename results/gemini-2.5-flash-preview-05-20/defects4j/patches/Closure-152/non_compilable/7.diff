diff --git a/tmp/e4081a49-b135-4226-a28a-e61fc3eb1953_buggy.java b/tmp/72d85841-0d31-4cac-8e1f-50b60b67be81_fixed.java
index 58a1651..2cdbcf0 100644
--- a/tmp/e4081a49-b135-4226-a28a-e61fc3eb1953_buggy.java
+++ b/tmp/72d85841-0d31-4cac-8e1f-50b60b67be81_fixed.java
@@ -1,32 +1,62 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Fix: Avoid ClassCastException if typeOfThis resolves to a non-ObjectType or UnionType.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis == null) {
+      // If resolution yields null (e.g., type name not found),
+      // fallback to UNKNOWN_TYPE for internal consistency.
+      // The actual error about the unresolved type will be reported upstream.
+      typeOfThis = getRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+    } else if (resolvedTypeOfThis.isObjectType()) {
+      // If the resolved type is directly an ObjectType, assign it.
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis.isUnionType()) {
+      // If it's a UnionType, we need to check its components.
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      // If the union consists purely of ObjectTypes (e.g., !(Date|Array)),
+      // it is generally considered acceptable for the `@this` type.
+      // We assign a common ObjectType for internal consistency and to prevent ClassCastException,
+      // letting more specific type checks happen upstream if needed.
+      if (unionType.isUnionOfObjectTypes()) {
+        typeOfThis = getRegistry().getNativeObjectType(JSTypeNative.OBJECT_TYPE);
+      } else {
+        // If the UnionType contains non-ObjectTypes (e.g., (Array|Date|null) or string|Date),
+        // it's not a valid `@this` type that can be represented as a direct ObjectType.
+        // Fallback to UNKNOWN_TYPE. The warning will be reported upstream.
+        typeOfThis = getRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+      }
+    } else {
+      // For any other non-ObjectType (e.g., PrimitiveType like 'string'),
+      // it's not a valid `@this` type. Fallback to UNKNOWN_TYPE.
+      // The warning will be reported upstream.
+      typeOfThis = getRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
