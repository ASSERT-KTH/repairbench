diff --git a/tmp/4db16393-cf8f-4ae6-9dff-8bc435d1a88f_buggy.java b/tmp/a62a2fdc-3e68-4919-a69c-1cd8de17439d_fixed.java
index 58a1651..cc33da8 100644
--- a/tmp/4db16393-cf8f-4ae6-9dff-8bc435d1a88f_buggy.java
+++ b/tmp/a62a2fdc-3e68-4919-a69c-1cd8de17439d_fixed.java
@@ -1,32 +1,47 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // The original code was: typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // This caused a ClassCastException if safeResolve returned a UnionType
+    // or a PrimitiveType, as 'typeOfThis' field is declared as ObjectType.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      // If the resolved type is an ObjectType, it can be directly assigned.
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      // If the resolved type is not an ObjectType (e.g., UnionType, PrimitiveType),
+      // it cannot be assigned to the 'typeOfThis' field directly without a ClassCastException.
+      // To prevent the exception and allow upstream type checks to handle the invalid
+      // '@this' type (as indicated by the comment), we set typeOfThis to the
+      // UNKNOWN_TYPE object. This maintains the invariant that 'typeOfThis' is
+      // always an ObjectType, even if it represents an invalid or unresolved type.
+      typeOfThis = t.getNativeType(JSTypeNative.UNKNOWN_TYPE).toObjectType();
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
