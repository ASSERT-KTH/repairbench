diff --git a/tmp/19aa5034-2bdb-4df7-91dd-284f94d11e9d_buggy.java b/tmp/51e5401f-0f37-4ce7-8114-b05bdd9e37f4_fixed.java
index 58a1651..b3f4477 100644
--- a/tmp/19aa5034-2bdb-4df7-91dd-284f94d11e9d_buggy.java
+++ b/tmp/51e5401f-0f37-4ce7-8114-b05bdd9e37f4_fixed.java
@@ -1,32 +1,46 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+
+    // The original code caused a ClassCastException if safeResolve returned
+    // a UnionType or PrimitiveType, as 'typeOfThis' is declared as ObjectType.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isObjectType()) {
+      // If the resolved type is an ObjectType, assign it directly.
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      // If the resolved type is not an ObjectType (e.g., UnionType, StringType),
+      // it cannot be assigned to the ObjectType field 'typeOfThis'.
+      // To prevent ClassCastException and ensure 'typeOfThis' remains an ObjectType,
+      // assign a suitable fallback ObjectType (e.g., UnknownType).
+      // The actual type check and warning are handled upstream.
+      typeOfThis = getNativeType(JSType.NamedType.UNKNOWN_TYPE);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
