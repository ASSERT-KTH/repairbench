diff --git a/tmp/109aac22-bddc-46b5-9044-bf3ce8074daa_buggy.java b/tmp/15ee994c-4748-4b5c-b13c-85a2825ef525_fixed.java
index ce3d60f..8234049 100644
--- a/tmp/109aac22-bddc-46b5-9044-bf3ce8074daa_buggy.java
+++ b/tmp/15ee994c-4748-4b5c-b13c-85a2825ef525_fixed.java
@@ -1,16 +1,31 @@
     private void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {
         int cache = 0;
-        int shift = 7;
+        int bitInByte = 0; // Tracks the current bit position within the byte, from 0 (MSB) to 7 (LSB)
+
         for (int i = 0; i < length; i++) {
-            cache |= ((bits.get(i) ? 1 : 0) << shift);
-            --shift;
-            if (shift == 0) {
-                header.write(cache);
-                shift = 7;
-                cache = 0;
+            // Get the bit from BitSet. True is 1, false is 0.
+            int bit = bits.get(i) ? 1 : 0;
+
+            // Place the bit into the cache at the correct position.
+            // (7 - bitInByte) calculates the shift amount for MSB-first packing.
+            // For bitInByte = 0 (first bit), shift is 7.
+            // For bitInByte = 7 (eighth bit), shift is 0.
+            cache |= (bit << (7 - bitInByte));
+
+            bitInByte++; // Move to the next bit position within the current byte
+
+            // If we have accumulated 8 bits (bitInByte becomes 8), write the byte.
+            if (bitInByte == 8) {
+                header.write(cache); // Write the full byte
+                cache = 0;           // Reset cache for the next byte
+                bitInByte = 0;       // Reset bit position for the next byte
             }
         }
-        if (length > 0 && shift > 0) {
-            header.write(cache);
+
+        // After the loop, if there are any remaining bits in the cache that didn't
+        // form a full byte (i.e., 'length' was not a multiple of 8), write them.
+        // 'bitInByte > 0' indicates that some bits were accumulated but not yet written.
+        if (bitInByte > 0) {
+            header.write(cache); // Write the partially filled byte (remaining bits are 0-padded)
         }
     }
\ No newline at end of file
