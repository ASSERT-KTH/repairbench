diff --git a/tmp/31ee3cac-265c-4a0f-905c-88391e398733_buggy.java b/tmp/2bc5b24c-203a-4ec3-8152-7404476cea53_fixed.java
index ce3d60f..c6375ed 100644
--- a/tmp/31ee3cac-265c-4a0f-905c-88391e398733_buggy.java
+++ b/tmp/2bc5b24c-203a-4ec3-8152-7404476cea53_fixed.java
@@ -1,16 +1,32 @@
     private void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {
         int cache = 0;
-        int shift = 7;
+        int shift = 7; // Represents the bit position (0-7) within the current byte, starting from MSB.
+                       // For the first bit, it's shifted by 7 to occupy the MSB position.
         for (int i = 0; i < length; i++) {
+            // Get the bit at index 'i' from the BitSet.
+            // If true, 1; if false, 0.
+            // Shift this bit to the 'shift' position within 'cache'.
+            // OR it with cache to accumulate bits.
             cache |= ((bits.get(i) ? 1 : 0) << shift);
-            --shift;
-            if (shift == 0) {
-                header.write(cache);
-                shift = 7;
-                cache = 0;
+            --shift; // Move to the next lower bit position for the next bit.
+            
+            // If 'shift' becomes less than 0 (i.e., -1), it means 8 bits have been successfully packed
+            // (from position 7 down to 0). The byte is now full and ready to be written.
+            if (shift < 0) {
+                header.write(cache); // Write the full byte.
+                shift = 7; // Reset shift for the next byte, starting again from MSB.
+                cache = 0; // Reset cache for the next byte.
             }
         }
-        if (length > 0 && shift > 0) {
+        // After the loop, if there are any remaining bits in 'cache' that haven't formed a full byte.
+        // This happens if 'length' is not a multiple of 8.
+        // The condition 'shift != 7' correctly identifies this:
+        // - If 'length' was 0, 'shift' remains 7, so no write. Correct.
+        // - If 'length' was a multiple of 8, the last byte would have been written in the loop,
+        //   and 'shift' would have been reset to 7. So 'shift != 7' would be false. Correct.
+        // - If 'length' was not a multiple of 8, 'shift' will be somewhere between 0 and 6 (inclusive).
+        //   In this case, 'shift != 7' is true, and the partial byte in 'cache' is written. Correct.
+        if (shift != 7) {
             header.write(cache);
         }
     }
\ No newline at end of file
