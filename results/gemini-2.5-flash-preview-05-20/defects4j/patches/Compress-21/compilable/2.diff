diff --git a/tmp/7fa8e680-3442-479c-b2a4-193b3935e5f6_buggy.java b/tmp/75eea363-021d-4d9d-ae3a-c7bb08b84a6e_fixed.java
index ce3d60f..6a7b585 100644
--- a/tmp/7fa8e680-3442-479c-b2a4-193b3935e5f6_buggy.java
+++ b/tmp/75eea363-021d-4d9d-ae3a-c7bb08b84a6e_fixed.java
@@ -1,16 +1,32 @@
     private void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {
         int cache = 0;
+        // 'shift' represents the bit position within the current byte being assembled in 'cache'.
+        // It starts at 7 (most significant bit) and goes down to 0 (least significant bit).
         int shift = 7;
         for (int i = 0; i < length; i++) {
+            // Get the i-th bit from the BitSet. If true, it's 1; otherwise, it's 0.
+            // Shift this bit to its correct position within 'cache' and OR it.
             cache |= ((bits.get(i) ? 1 : 0) << shift);
+            // Move to the next bit position (towards the least significant bit).
             --shift;
-            if (shift == 0) {
-                header.write(cache);
-                shift = 7;
-                cache = 0;
+
+            // If 'shift' becomes less than 0 (i.e., -1), it means we have just placed the 8th bit
+            // (the one at position 0). The 'cache' now holds a complete byte.
+            if (shift < 0) {
+                header.write(cache); // Write the accumulated full byte to the output stream.
+                shift = 7; // Reset 'shift' to 7 to start assembling the next byte from its MSB.
+                cache = 0; // Clear 'cache' to begin accumulating bits for the new byte.
             }
         }
-        if (length > 0 && shift > 0) {
+        // After the loop, if there are any remaining bits in 'cache' that did not form a complete byte,
+        // they need to be written as a partial byte.
+        // This condition ensures:
+        // 1. 'shift != 7': If 'shift' is 7, it means either no bits were processed, or a full byte was just
+        //    written and 'shift' was reset. In both cases, 'cache' would be 0, and no partial byte needs writing.
+        //    If 'shift' is any value from 0 to 6, it means 'cache' holds a partial byte.
+        // 2. 'length > 0': Ensures we only write if at least one bit was processed in total.
+        //    (This covers the edge case where length is 0, in which case nothing should be written).
+        if (shift != 7 && length > 0) {
             header.write(cache);
         }
     }
\ No newline at end of file
