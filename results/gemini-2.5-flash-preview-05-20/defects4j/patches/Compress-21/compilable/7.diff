diff --git a/tmp/b421260d-5dcc-46a4-ba61-2e2ef0b7d8e1_buggy.java b/tmp/923406e0-0253-4ad8-88e3-28df8171c5c1_fixed.java
index ce3d60f..627da40 100644
--- a/tmp/b421260d-5dcc-46a4-ba61-2e2ef0b7d8e1_buggy.java
+++ b/tmp/923406e0-0253-4ad8-88e3-28df8171c5c1_fixed.java
@@ -1,16 +1,23 @@
     private void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {
         int cache = 0;
-        int shift = 7;
+        int shift = 7; // Represents the bit position (0-7) for the current byte, starting with the most significant bit
         for (int i = 0; i < length; i++) {
+            // Get the i-th bit from the BitSet and set it in the 'cache' at the current 'shift' position
             cache |= ((bits.get(i) ? 1 : 0) << shift);
-            --shift;
-            if (shift == 0) {
-                header.write(cache);
-                shift = 7;
-                cache = 0;
+            --shift; // Move to the next lower bit position
+            // If 'shift' becomes less than 0 (i.e., -1), it means 8 bits have been accumulated in 'cache'
+            if (shift < 0) {
+                header.write(cache); // Write the full byte to the header
+                shift = 7; // Reset shift for the next byte (start with MSB)
+                cache = 0; // Clear cache for the next byte
             }
         }
-        if (length > 0 && shift > 0) {
+        // After the loop, if there are any remaining bits in 'cache' (i.e., a partial byte was formed),
+        // write them. This is indicated by 'shift' not being its initial value of 7.
+        // If 'length' was a multiple of 8, the last byte was written inside the loop,
+        // 'shift' was reset to 7, and 'cache' to 0, so this condition will be false, which is correct.
+        // If 'length' was 0, the loop is not entered, 'shift' remains 7, and this condition is false, correct.
+        if (shift != 7) {
             header.write(cache);
         }
     }
\ No newline at end of file
