diff --git a/tmp/82b852a8-a93c-4032-8171-abbcc20c4490_buggy.java b/tmp/b058467f-c059-4568-af1c-e3ede3faec76_fixed.java
index b9f1241..fdd512e 100644
--- a/tmp/82b852a8-a93c-4032-8171-abbcc20c4490_buggy.java
+++ b/tmp/b058467f-c059-4568-af1c-e3ede3faec76_fixed.java
@@ -1,60 +1,70 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant as the default.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
         chrono = selectChronology(chrono);
         
+        // According to the Javadoc for parseInto, this method "ignores the
+        // getDefaultYear() default year and parses using the year from the
+        // supplied instant as the default."
+        // The defaultYear parameter to DateTimeParserBucket controls this.
+        // If 0 is passed, the bucket's computeMillis method uses the year
+        // from instantLocal. If a non-zero value is passed, that value is used
+        // as the default year. To align with the Javadoc's specified behavior
+        // for parseInto, we should always pass 0, indicating that the bucket
+        // should derive the default year from the initial instantLocal.
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
+            instantLocal, chrono, iLocale, iPivotYear, 0); 
+        
         int newPos = parser.parseInto(bucket, text, position);
         instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
             chrono = chrono.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
             chrono = chrono.withZone(bucket.getZone());
         }
         instant.setChronology(chrono);
         if (iZone != null) {
             instant.setZone(iZone);
         }
         return newPos;
     }
\ No newline at end of file
