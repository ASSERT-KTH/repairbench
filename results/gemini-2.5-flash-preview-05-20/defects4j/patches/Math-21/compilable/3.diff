diff --git a/tmp/f99eb992-a1e8-4a45-8e84-0728c5f53f36_buggy.java b/tmp/7b10f8b3-b308-4fb2-9bec-e40c19de3104_fixed.java
index 6708762..b8c2a42 100644
--- a/tmp/f99eb992-a1e8-4a45-8e84-0728c5f53f36_buggy.java
+++ b/tmp/7b10f8b3-b308-4fb2-9bec-e40c19de3104_fixed.java
@@ -1,99 +1,131 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
+        
+        // Deep copy the matrix data as it will be modified during decomposition.
+        // matrix.getData() returns a reference to the internal array, so a deep copy is necessary.
+        final double[][] c = new double[order][order];
+        final double[][] originalData = matrix.getData();
+        for (int i = 0; i < order; ++i) {
+            System.arraycopy(originalData[i], 0, c[i], 0, order);
+        }
+
         final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
+        // index stores the permutation of original row/column indices
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
-        int r = 0;
+        int r = 0; // Current rank / column being processed in the Cholesky factor
         for (boolean loop = true; loop;) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+            // find maximal diagonal element in the remaining submatrix
+            // 'p' will store the index within the 'index' array
+            // that corresponds to the row with the largest diagonal element.
+            int p = r; // Initialize p to the current pivot position in the index array
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                // Compare diagonal elements c[original_row_index][original_row_index]
+                // index[i] gives the original row index for the i-th element in the current permutation
+                if (c[index[i]][index[i]] > c[index[p]][index[p]]) {
+                    p = i;
                 }
             }
 
-
-            // swap elements
-            if (swap[r] != r) {
+            // swap elements in the index array if the maximal element is not at the current position 'r'
+            if (p != r) {
                 int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+                index[r] = index[p];
+                index[p] = tmp;
             }
 
+            // ir is the original row/column index of the current pivot
+            final int ir = index[r];
+
             // check diagonal element
-            int ir = index[r];
             if (c[ir][ir] < small) {
+                // Diagonal element is considered zero or numerically insignificant
 
                 if (r == 0) {
+                    // If the first diagonal element (after pivoting to be maximal) is too small,
+                    // the matrix is considered non-positive semidefinite.
                     throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                 }
 
-                // check remaining diagonal elements
+                // If r > 0, check remaining diagonal elements
                 for (int i = r; i < order; ++i) {
+                    // If any remaining diagonal element is significantly negative,
+                    // the matrix is not positive semidefinite.
                     if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
                         throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
+                // All remaining diagonal elements are close to zero, so we consider
+                // the rank found. The loop will terminate.
                 ++r;
                 loop = false;
 
             } else {
+                // Diagonal element is significant, proceed with decomposition
 
-                // transform the matrix
+                // Calculate the square root of the diagonal element
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
+                b[r][r] = sqrt; // Store L_rr (diagonal element of the Cholesky factor)
+
+                // Calculate the inverse of the square root
                 final double inverse  = 1 / sqrt;
+
+                // Update the remaining submatrix and calculate off-diagonal elements of L
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
+                    final int ii = index[i]; // Original row index for the current row 'i' in the pivoted system
+
+                    // Calculate L_ir (element of the Cholesky factor)
                     final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
+                    b[i][r] = e; // Store L_ir
+
+                    // Update the diagonal element of the remaining submatrix A' = A - L_r L_r^T
+                    // This corresponds to A'_{ii} = A_{ii} - L_{ii,r}^2
                     c[ii][ii] -= e * e;
+
+                    // Update off-diagonal elements of the remaining submatrix
+                    // This corresponds to A'_{ij} = A_{ij} - L_{ii,r} * L_{jj,r}
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                        final int ij = index[j]; // Original column index for the current column 'j'
+                        final double f = c[ii][ij] - e * b[j][r]; // c[ii][ij] is c[index[i]][index[j]]
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Maintain symmetry in 'c' for the remaining submatrix
                     }
                 }
 
-                // prepare next iteration
+                // Prepare for the next iteration: increment rank and continue if not all columns processed
                 loop = ++r < order;
             }
         }
 
-        // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+        // build the root matrix (L)
+        rank = r; // The determined rank of the matrix
+        root = MatrixUtils.createRealMatrix(order, r); // The root matrix has dimensions order x rank
+
+        // Populate the root matrix using the calculated 'b' elements and the 'index' permutation.
+        // b[i][j] stores the element L_{index[i], pivoted_column_j}
+        // root.setEntry(original_row_index, root_column_index, value)
+        for (int i = 0; i < order; ++i) { // Iterate through all original row indices (0 to order-1)
+            for (int j = 0; j < r; ++j) { // Iterate through the columns of the root matrix (0 to rank-1)
+                // index[i] provides the original row index that corresponds to the
+                // i-th row in the permuted 'b' matrix.
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
