diff --git a/tmp/5929d407-1adf-484f-bf41-07ad790b1d24_buggy.java b/tmp/ea20b79d-f843-433c-8c39-80152672f28d_fixed.java
index 6708762..ea1743c 100644
--- a/tmp/5929d407-1adf-484f-bf41-07ad790b1d24_buggy.java
+++ b/tmp/ea20b79d-f843-433c-8c39-80152672f28d_fixed.java
@@ -1,99 +1,111 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
 
         int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
         int r = 0;
         for (boolean loop = true; loop;) {
 
             // find maximal diagonal element
-            swap[r] = r;
+            // At each step 'r', we search for the largest diagonal element
+            // in the remaining submatrix (from logical row 'r' to 'order-1').
+            // 'swap[r]' will store the logical index (within the 'index' array)
+            // of the row containing this maximal diagonal element.
+            swap[r] = r; // Initialize: assume the current logical row 'r' has the maximum.
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                // Compare c[index[i]][index[i]] with c[index[swap[r]]][index[swap[r]]].
+                // index[i] is the physical row/column index of the current candidate.
+                // index[swap[r]] is the physical row/column index of the current maximum found for this step.
+                if (c[index[i]][index[i]] > c[index[swap[r]]][index[swap[r]]]) { // BUG FIX: changed index[swap[i]] to index[swap[r]]
+                    swap[r] = i; // Update 'swap[r]' to store the logical index 'i' if a larger element is found.
                 }
             }
 
 
             // swap elements
+            // If the maximal element is not already at the current pivot position 'r',
+            // swap the physical indices in the 'index' array to bring it to 'r'.
             if (swap[r] != r) {
                 int tmp = index[r];
                 index[r] = index[swap[r]];
                 index[swap[r]] = tmp;
             }
 
             // check diagonal element
-            int ir = index[r];
+            int ir = index[r]; // 'ir' is the physical index of the current pivot row/column.
             if (c[ir][ir] < small) {
 
                 if (r == 0) {
+                    // If the first diagonal element (after pivoting) is too small,
+                    // the matrix might not be positive semidefinite.
                     throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                 }
 
-                // check remaining diagonal elements
+                // If the current diagonal element is small, it means this column is
+                // considered linearly dependent. Check remaining elements for negativity.
                 for (int i = r; i < order; ++i) {
+                    // Check if any remaining diagonal elements are significantly negative.
                     if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
+                        // If so, the original matrix is not positive semidefinite.
                         throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
+                // All remaining diagonal elements are close to zero.
+                // We've found the rank of the matrix. Decomposition stops.
                 ++r;
                 loop = false;
 
             } else {
 
-                // transform the matrix
+                // The diagonal element is sufficiently large, proceed with Cholesky transformation.
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
+                b[r][r] = sqrt; // Set the diagonal element of the lower triangular matrix B.
                 final double inverse  = 1 / sqrt;
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
-                    c[ii][ii] -= e * e;
+                    final int ii = index[i]; // Physical row index for 'i'-th logical row.
+                    final double e = inverse * c[ii][ir]; // Calculate L_ir element (M_ir / L_rr).
+                    b[i][r] = e; // Store L_ir in B.
+                    c[ii][ii] -= e * e; // Update diagonal element: M_ii = M_ii - L_ir^2.
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                        final int ij = index[j]; // Physical column index for 'j'-th logical column.
+                        final double f = c[ii][ij] - e * b[j][r]; // Update M_ij = M_ij - L_ir * L_jr.
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Update symmetric element M_ji.
                     }
                 }
 
-                // prepare next iteration
+                // Prepare for the next iteration: increment logical row counter.
                 loop = ++r < order;
             }
         }
 
-        // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+        // build the root matrix (L)
+        rank = r; // The rank of the matrix is 'r' (number of non-discarded columns).
+        root = MatrixUtils.createRealMatrix(order, r); // The root matrix has dimensions order x rank.
+        for (int i = 0; i < order; ++i) { // Iterate through all original rows.
+            for (int j = 0; j < r; ++j) { // Iterate through the 'rank' columns.
+                // The element b[i][j] corresponds to the (i-th logical row, j-th logical column) of L.
+                // To get the correct entry in the 'root' matrix (which is in original row order),
+                // we use index[i] to map the logical row 'i' back to its original physical row.
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
