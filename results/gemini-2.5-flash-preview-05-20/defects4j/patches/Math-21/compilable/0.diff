diff --git a/tmp/f3f38cba-5fe3-489a-9f3b-0e3970a66577_buggy.java b/tmp/99576e69-7a9a-4250-8e39-6a7aa217f3b6_fixed.java
index 6708762..187cf01 100644
--- a/tmp/f3f38cba-5fe3-489a-9f3b-0e3970a66577_buggy.java
+++ b/tmp/99576e69-7a9a-4250-8e39-6a7aa217f3b6_fixed.java
@@ -1,99 +1,116 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
+        // The matrix data is modified in place during the decomposition.
+        // If the original matrix needs to remain unchanged, a copy should be made here.
+        // For this fix, we assume it's acceptable for the internal data array 'c' to be a reference.
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
+        // The index array stores the permutation of original column/row indices.
+        // index[k] gives the original matrix's row/column index that is currently at pivot position k.
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
-            index[i] = i;
+            index[i] = i; // Initialize to identity permutation
         }
 
-        int r = 0;
+        int r = 0; // Current rank / number of non-discarded columns processed so far
         for (boolean loop = true; loop;) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+            // find maximal diagonal element among the remaining (unprocessed) diagonal elements
+            // 'best' stores the index within the 'index' array (from 'r' to 'order-1')
+            // that points to the largest diagonal element in the current working matrix 'c'.
+            int best = r;
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                // Compare c[original_idx_i][original_idx_i] with c[original_idx_best][original_idx_best]
+                if (c[index[i]][index[i]] > c[index[best]][index[best]]) {
+                    best = i;
                 }
             }
 
-
-            // swap elements
-            if (swap[r] != r) {
+            // swap elements in the 'index' array if the maximal element is not at the current pivot position 'r'
+            if (best != r) {
                 int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+                index[r] = index[best];
+                index[best] = tmp;
             }
 
-            // check diagonal element
-            int ir = index[r];
-            if (c[ir][ir] < small) {
+            // check diagonal element at the current pivot position (which is now index[r])
+            int ir = index[r]; // ir is the original matrix index for the current pivot
+            if (c[ir][ir] < small) { // If diagonal element is too small (close to zero)
 
                 if (r == 0) {
+                    // If the very first diagonal element after pivoting is too small,
+                    // the matrix is considered non-positive semidefinite unless it's a zero matrix.
+                    // However, in this specific case, it's flagged as an error if it's strictly less than 'small'.
                     throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                 }
 
-                // check remaining diagonal elements
+                // check remaining diagonal elements for significantly negative values
+                // If any remaining diagonal element is sufficiently negative, the matrix is not PSD.
+                // The loop iterates over indices in the 'index' array from 'r' to 'order-1'.
                 for (int i = r; i < order; ++i) {
+                    // c[index[i]][index[i]] is the diagonal element in the original matrix's
+                    // coordinate system corresponding to the i-th pivoted position.
                     if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                        // There is at least one sufficiently negative diagonal element,
+                        // indicating the symmetric positive semidefinite matrix assumption is violated.
+                        // The exception should report the original matrix index.
+                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], index[i], small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+                // All remaining diagonal elements are close to zero (between -small and small).
+                // We consider the rank of the matrix to be 'r', and stop the decomposition.
+                ++r; // Increment r to reflect the actual rank (number of non-discarded columns)
+                loop = false; // Exit the main decomposition loop
+            } else { // Diagonal element at c[ir][ir] is large enough (>= small)
 
-            } else {
-
-                // transform the matrix
+                // Perform the Cholesky transformation step
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
+                b[r][r] = sqrt; // Store the diagonal element of the Cholesky factor L
                 final double inverse  = 1 / sqrt;
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
-                    c[ii][ii] -= e * e;
+                    final int ii = index[i]; // Original index corresponding to row 'i' in the current pivot order
+                    final double e = inverse * c[ii][ir]; // Calculate L_ir (current column 'r' element of L)
+                    b[i][r] = e; // Store in 'b' matrix
+                    c[ii][ii] -= e * e; // Update diagonal element for the next iteration
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
+                        final int ij = index[j]; // Original index corresponding to column 'j'
+                        // Update off-diagonal elements: c_ij - L_ir * L_jr
                         final double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Maintain symmetry in 'c' working matrix
                     }
                 }
 
-                // prepare next iteration
-                loop = ++r < order;
+                // Prepare for the next iteration
+                loop = ++r < order; // Increment r, and continue if r is still less than order
             }
         }
 
-        // build the root matrix
+        // build the root matrix (L such that M = L * L^T)
+        // The 'rank' is the number of non-zero (or non-small) diagonal elements found.
         rank = r;
+        // The root matrix 'root' has 'order' rows and 'rank' columns.
         root = MatrixUtils.createRealMatrix(order, r);
         for (int i = 0; i < order; ++i) {
             for (int j = 0; j < r; ++j) {
+                // The 'b' matrix stores the Cholesky factor elements based on the pivoted order.
+                // b[i][j] corresponds to the L_k,j where 'k' is the 'i'-th row in the *permuted* system.
+                // 'index[i]' gives the original row index that was mapped to the 'i'-th pivoted row.
+                // So, root.setEntry(original_row_index, column_index, value)
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
