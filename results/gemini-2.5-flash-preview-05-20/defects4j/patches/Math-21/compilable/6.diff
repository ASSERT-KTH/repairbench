diff --git a/tmp/766a365c-1c86-4b3a-b8e4-aa240479f65c_buggy.java b/tmp/3e2a371f-82b2-4bcc-8df7-da6bc77cf398_fixed.java
index 6708762..ea94add 100644
--- a/tmp/766a365c-1c86-4b3a-b8e4-aa240479f65c_buggy.java
+++ b/tmp/3e2a371f-82b2-4bcc-8df7-da6bc77cf398_fixed.java
@@ -1,99 +1,113 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
+        // The 'index' array maintains the current permutation of original column indices.
+        // index[k] stores the original column index that is currently at position k in the
+        // permuted matrix.
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
-        int r = 0;
+        int r = 0; // 'r' represents the current column being processed for the Cholesky factor.
         for (boolean loop = true; loop;) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+            // Find maximal diagonal element among the remaining unprocessed columns
+            // (from the current pivot position 'r' to 'order-1').
+            // 'bestIdx' will store the index (within the 'index' array) of the column
+            // that has the maximum diagonal element.
+            int bestIdx = r;
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                // Compare c[index[i]][index[i]] (diagonal of permuted column i)
+                // with c[index[bestIdx]][index[bestIdx]] (diagonal of current best candidate).
+                if (c[index[i]][index[i]] > c[index[bestIdx]][index[bestIdx]]) {
+                    bestIdx = i;
                 }
             }
 
-
-            // swap elements
-            if (swap[r] != r) {
+            // Swap elements in the 'index' array to bring the column with the maximal
+            // diagonal element to the current pivot position 'r'.
+            if (bestIdx != r) {
                 int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+                index[r] = index[bestIdx];
+                index[bestIdx] = tmp;
             }
 
-            // check diagonal element
+            // 'ir' is the original column index of the current pivot.
             int ir = index[r];
             if (c[ir][ir] < small) {
+                // If the current pivot's diagonal element is below the threshold 'small',
+                // it implies this column is linearly dependent on previous ones, or the matrix is singular.
+                // We must check if any of the *remaining* diagonal elements (from 'r' to 'order-1')
+                // are significantly negative. If so, the matrix is not positive semidefinite.
 
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
-
-                // check remaining diagonal elements
-                for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                for (int i = r; i < order; ++i) { // Loop from the current 'r' to the end of the matrix.
+                    int currentDiagOriginalIndex = index[i]; // Original column index for current diagonal element.
+                    if (c[currentDiagOriginalIndex][currentDiagOriginalIndex] < -small) {
+                        // Found a sufficiently negative diagonal element. This indicates
+                        // the matrix is not positive semidefinite.
+                        throw new NonPositiveDefiniteMatrixException(c[currentDiagOriginalIndex][currentDiagOriginalIndex],
+                                                                     currentDiagOriginalIndex, small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
+                // If we reach here, it means all remaining diagonal elements (from r to order-1)
+                // are non-negative and below the 'small' threshold. This is consistent with a
+                // positive semidefinite matrix that is rank deficient.
+                // The decomposition terminates here, and 'r' represents the rank.
                 loop = false;
 
             } else {
+                // The current pivot's diagonal element is significant (>= small).
+                // Proceed with the standard Cholesky transformation steps.
 
-                // transform the matrix
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
                 b[r][r] = sqrt;
                 final double inverse  = 1 / sqrt;
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
+                    final int ii = index[i]; // Original row index for current row 'i'
+                    final double e = inverse * c[ii][ir]; // Calculate L[i][r]
+                    b[i][r] = e; // Store L[i][r] in b matrix (corresponding to permuted indices)
+
+                    // Update the diagonal element c[ii][ii]
                     c[ii][ii] -= e * e;
+
+                    // Update the off-diagonal elements c[ii][ij] and c[ij][ii]
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
+                        final int ij = index[j]; // Original column index for column 'j'
                         final double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        c[ij][ii] = f; // Maintain symmetry in the remaining submatrix 'c'
                     }
                 }
 
-                // prepare next iteration
-                loop = ++r < order;
+                // Prepare for the next iteration: increment 'r' and check loop condition.
+                loop = (++r < order);
             }
         }
 
-        // build the root matrix
-        rank = r;
+        // Build the root matrix (L) using the calculated 'b' values and the final permutation 'index'.
+        rank = r; // 'r' now holds the correct rank of the decomposed matrix.
         root = MatrixUtils.createRealMatrix(order, r);
         for (int i = 0; i < order; ++i) {
             for (int j = 0; j < r; ++j) {
+                // root.setEntry(originalRowIndex, columnOfL, value)
+                // index[i] maps the permuted row 'i' back to its original row index.
+                // b[i][j] is the element L[permuted_row_i][permuted_col_j]
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
