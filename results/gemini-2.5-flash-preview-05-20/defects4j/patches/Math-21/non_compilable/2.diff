diff --git a/tmp/d073fc12-033e-48a9-8bc0-0204b4a7141c_buggy.java b/tmp/d783b21f-3500-4ef6-9d88-6bc813d004ab_fixed.java
index 6708762..954c721 100644
--- a/tmp/d073fc12-033e-48a9-8bc0-0204b4a7141c_buggy.java
+++ b/tmp/d783b21f-3500-4ef6-9d88-6bc813d004ab_fixed.java
@@ -1,99 +1,146 @@
+import org.apache.commons.math3.exception.NonPositiveDefiniteMatrixException;
+import org.apache.commons.math3.linear.MatrixUtils;
+import org.apache.commons.math3.linear.RealMatrix;
+import org.apache.commons.math3.util.FastMath;
+
+// Assume RectangularCholeskyDecomposition class members and constructor signature are:
+// public class RectangularCholeskyDecomposition {
+// private RealMatrix root;
+// private int rank;
+
+// public RectangularCholeskyDecomposition(RealMatrix matrix, double small) throws NonPositiveDefiniteMatrixException {
+// ...
+// }
+
+// public RealMatrix getRootMatrix() {
+// return root;
+// }
+
+// public int getRank() {
+// return rank;
+// }
+
+// }
+
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
-        final double[][] b = new double[order][order];
+        // Create a deep copy of the matrix data to work on
+        final double[][] c = new double[order][order];
+        for (int i = 0; i < order; ++i) {
+            System.arraycopy(matrix.getData()[i], 0, c[i], 0, order);
+        }
+        final double[][] b = new double[order][order]; // This matrix will hold the Cholesky factor L in permuted form
 
-        int[] swap  = new int[order];
-        int[] index = new int[order];
+        int[] swap  = new int[order]; // Temporary array for pivoting
+        int[] index = new int[order]; // Permutation array (maps logical index to original index)
         for (int i = 0; i < order; ++i) {
-            index[i] = i;
+            index[i] = i; // Initialize with identity permutation
         }
 
-        int r = 0;
-        for (boolean loop = true; loop;) {
+        int currentRank = 0;    // Number of independent columns found so far (actual rank)
+        int currentOrder = order; // Effective size of the submatrix currently being processed
 
-            // find maximal diagonal element
-            swap[r] = r;
-            for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+        // Main loop for decomposition. Loop until all 'currentOrder' elements are processed or discarded.
+        for (int r = 0; r < currentOrder; /* r is incremented conditionally */) {
+
+            // Find maximal diagonal element in the remaining submatrix (from logical row/col r to currentOrder-1)
+            swap[r] = r; // Assume current logical position r has the max
+            for (int i = r + 1; i < currentOrder; ++i) { // Iterate from next logical position within active submatrix
+                int ii  = index[i];     // Original row index of current candidate diagonal element
+                int isi = index[swap[r]]; // Original row index of current max diagonal element
+                if (c[ii][ii] > c[isi][isi]) { // Compare diagonal elements using their original indices in c
+                    swap[r] = i; // Store the logical position (i) that holds the new max
                 }
             }
 
-
-            // swap elements
+            // Swap elements in the index array to bring the column with maximal diagonal to the current logical position 'r'
             if (swap[r] != r) {
                 int tmp = index[r];
                 index[r] = index[swap[r]];
                 index[swap[r]] = tmp;
             }
 
-            // check diagonal element
+            // Get the original index corresponding to the current logical position 'r'
             int ir = index[r];
+
+            // Check the diagonal element at the pivoted position
             if (c[ir][ir] < small) {
+                // If the diagonal element is below the threshold, this column is considered dependent/zero.
+                // We discard this column (it doesn't contribute to the rank).
 
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
-
-                // check remaining diagonal elements
-                for (int i = r; i < order; ++i) {
+                // Before discarding, check for any sufficiently negative diagonal elements among the remaining active ones.
+                // If found, the matrix is not positive semidefinite.
+                for (int i = r; i < currentOrder; ++i) {
                     if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                        // Pass the original index (index[i]) of the problematic element.
+                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], index[i], small);
                     }
                 }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+                // Discard this column: effectively move it to the end of the 'active' part of the index array.
+                // Swap the current logical position 'r' with the last active logical position 'currentOrder - 1'.
+                int tmp = index[r];
+                index[r] = index[currentOrder - 1];
+                index[currentOrder - 1] = tmp;
 
-            } else {
+                // Reduce the effective size of the matrix to process for the next iteration.
+                // This effectively removes the discarded column from the active set.
+                --currentOrder;
+                // 'r' is not incremented here. The loop will re-evaluate the element now at 'index[r]'
+                // (which was swapped in from 'currentOrder - 1'). This ensures we try to find a valid
+                // pivot for the current logical 'r' position from the remaining columns.
 
-                // transform the matrix
+            } else { // c[ir][ir] >= small. This column is independent and can be decomposed.
+
+                // Perform the Cholesky transformation for the current column 'r'
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
+                b[r][r] = sqrt; // Store the diagonal element of the Cholesky factor L
+
                 final double inverse  = 1 / sqrt;
-                for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
-                    c[ii][ii] -= e * e;
-                    for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
-                        c[ii][ij] = f;
-                        c[ij][ii] = f;
+                // Update elements in the current column 'r' and remaining submatrix
+                for (int i = r + 1; i < currentOrder; ++i) { // Iterate through subsequent logical rows
+                    final int ii = index[i]; // Original row index for logical row 'i'
+                    final double e = inverse * c[ii][ir]; // Compute L_ii,r
+                    b[i][r] = e; // Store in b at logical position (i, r)
+
+                    // Update the remaining part of the current row and symmetric elements
+                    c[ii][ii] -= e * e; // Update diagonal element
+                    for (int j = r + 1; j < i; ++j) { // Iterate through previous logical columns for cross-terms
+                        final int ij = index[j]; // Original column index for logical column 'j'
+                        final double f = c[ii][ij] - e * b[j][r]; // Compute C_ii,ij - L_ii,r * L_ij,r
+                        c[ii][ij] = f; // Update C_ii,ij
+                        c[ij][ii] = f; // Update symmetric C_ij,ii (since C is symmetric)
                     }
                 }
-
-                // prepare next iteration
-                loop = ++r < order;
+                currentRank++; // Increment rank as a successful independent column was found
+                r++; // Move to the next logical column for the next iteration
             }
         }
 
-        // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+        // Set the final rank of the matrix
+        rank = currentRank;
+
+        // Build the root matrix (L) from 'b' using the permutation information
+        // The root matrix will have 'order' rows and 'rank' columns.
+        root = MatrixUtils.createRealMatrix(order, rank);
+        for (int i = 0; i < order; ++i) { // Iterate through all rows of the output root matrix (N original rows)
+            for (int j = 0; j < rank; ++j) { // Iterate through all columns of the output root matrix (rank columns)
+                // The element b[i][j] contains the L_ij component where 'i' is the logical row index
+                // and 'j' is the logical column index from the decomposition process.
+                // We need to set root[original_row_index][j] = b[logical_row_index][j].
+                // The original row index for the current logical row 'i' is given by index[i].
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
