diff --git a/tmp/9c657c98-1d9f-4e82-b4bf-a41ef55e10c9_buggy.java b/tmp/2cc74013-4b61-43d4-9584-3c4ae7cd2652_fixed.java
index fd8eae5..5f7188b 100644
--- a/tmp/9c657c98-1d9f-4e82-b4bf-a41ef55e10c9_buggy.java
+++ b/tmp/2cc74013-4b61-43d4-9584-3c4ae7cd2652_fixed.java
@@ -1,47 +1,76 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
+
+        if (!this.allowDuplicateXValues) {
+            // Case: Duplicates are NOT allowed.
+            // Check if an item with this x-value already exists.
             int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
+            if (index >= 0) {
+                // Item found, update it.
                 XYDataItem existing = (XYDataItem) this.data.get(index);
                 try {
                     overwritten = (XYDataItem) existing.clone();
                 }
                 catch (CloneNotSupportedException e) {
                     throw new SeriesException("Couldn't clone XYDataItem!");
                 }
                 existing.setY(y);
-        }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            } else {
+                // Item not found, add it.
                 if (this.autoSort) {
+                    // Use the insertion point provided by indexOf(x) (which is a negative value from binarySearch)
                     this.data.add(-index - 1, new XYDataItem(x, y));
+                } else {
+                    // Not sorted, just append.
+                    this.data.add(new XYDataItem(x, y));
+                }
+                // Check if this addition will exceed the maximum item count...
+                if (getItemCount() > this.maximumItemCount) {
+                    this.data.remove(0);
+                }
+            }
+        } else {
+            // Case: Duplicates ARE allowed.
+            // Always add a new item.
+            if (this.autoSort) {
+                // Find the correct insertion point for the new XYDataItem(x, y)
+                // using the xAndYComparator for precise sorting.
+                int insertIndex = Collections.binarySearch(this.data, new XYDataItem(x, y), this.xAndYComparator);
+                if (insertIndex < 0) {
+                    // Item not found, calculate insertion point.
+                    insertIndex = -insertIndex - 1;
+                } else {
+                    // An item with exactly (x, y) was found.
+                    // To maintain order and add duplicates *after* existing ones,
+                    // advance the index past any items that are "equal" to the new one.
+                    while (insertIndex < this.data.size() && this.xAndYComparator.compare(new XYDataItem(x, y), (XYDataItem) this.data.get(insertIndex)) == 0) {
+                        insertIndex++;
+                    }
                 }
-            else {
+                this.data.add(insertIndex, new XYDataItem(x, y));
+            } else {
+                // Not sorted, just append.
                 this.data.add(new XYDataItem(x, y));
             }
-            // check if this addition will exceed the maximum item count...
+            // Check if this addition will exceed the maximum item count...
             if (getItemCount() > this.maximumItemCount) {
                 this.data.remove(0);
             }
         }
         fireSeriesChanged();
         return overwritten;
     }
\ No newline at end of file
