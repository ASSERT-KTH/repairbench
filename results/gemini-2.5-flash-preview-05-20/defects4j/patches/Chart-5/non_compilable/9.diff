diff --git a/tmp/b02ec253-07d1-47c2-bdd2-7fd0558600f5_buggy.java b/tmp/bc89bbe8-417c-4be8-a251-2991a520b307_fixed.java
index fd8eae5..7f67f00 100644
--- a/tmp/b02ec253-07d1-47c2-bdd2-7fd0558600f5_buggy.java
+++ b/tmp/bc89bbe8-417c-4be8-a251-2991a520b307_fixed.java
@@ -1,47 +1,76 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
         int index = indexOf(x);
         if (index >= 0 && !this.allowDuplicateXValues) {
+            // Found existing item, and duplicates are not allowed, so update
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
             }
             catch (CloneNotSupportedException e) {
                 throw new SeriesException("Couldn't clone XYDataItem!");
             }
             existing.setY(y);
         }
         else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            // Item not found (index < 0) OR duplicates are allowed (allowDuplicateXValues is true).
+            // In either case, we need to add a new item.
             if (this.autoSort) {
+                // If auto-sorting, we need to find the correct insertion point.
+                if (index < 0) {
+                    // x not found by binarySearch, so 'index' is -(insertion point)-1.
+                    // Convert to actual insertion point and add.
                     this.data.add(-index - 1, new XYDataItem(x, y));
+                } else {
+                    // x found (index >= 0), and allowDuplicateXValues is true.
+                    // We need to add a new item, but place it after any existing
+                    // items with the same X-value to maintain sorted order for duplicates.
+                    int insertIndex = index;
+                    final XYDataItem newItem = new XYDataItem(x, y);
+
+                    // Determine the comparator based on the series' sort order.
+                    // This comparator is used to find the insertion point for duplicates.
+                    java.util.Comparator comparator = this.sortOrder == SortOrder.ASCENDING
+                            ? XYDataItem.BY_X_ASCENDING_COMPARATOR
+                            : XYDataItem.BY_X_DESCENDING_COMPARATOR;
+
+                    // Iterate forward from the found 'index' to find the first position
+                    // where the current item's X-value is strictly greater than (or
+                    // strictly less than for descending order) the new item's X-value.
+                    // This ensures the new item is placed after all existing duplicates.
+                    while (insertIndex < this.data.size()) {
+                        XYDataItem currentItem = (XYDataItem) this.data.get(insertIndex);
+                        if (comparator.compare(currentItem, newItem) > 0) {
+                            break; // Found the spot: currentItem.x > newItem.x (or < for descending)
+                        }
+                        insertIndex++;
+                    }
+                    this.data.add(insertIndex, newItem);
+                }
             }
             else {
+                // Not autoSort, just append the new item to the end of the list.
                 this.data.add(new XYDataItem(x, y));
             }
             // check if this addition will exceed the maximum item count...
             if (getItemCount() > this.maximumItemCount) {
                 this.data.remove(0);
             }
         }
         fireSeriesChanged();
         return overwritten;
     }
\ No newline at end of file
