diff --git a/tmp/4715f6b9-327d-4750-b270-141f2de8dfd2_buggy.java b/tmp/8ef47771-c6ed-4523-9af7-4ac720220797_fixed.java
index fd8eae5..093235d 100644
--- a/tmp/4715f6b9-327d-4750-b270-141f2de8dfd2_buggy.java
+++ b/tmp/8ef47771-c6ed-4523-9af7-4ac720220797_fixed.java
@@ -1,47 +1,74 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
+
+        // If duplicates are NOT allowed, we first check for an existing item to update.
+        if (!this.allowDuplicateXValues) {
+            // Find existing item by X-value.
+            // indexOf(x) uses Collections.binarySearch on X-values only.
             int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
+            if (index >= 0) { // Item with this x-value already exists, so update it.
                 XYDataItem existing = (XYDataItem) this.data.get(index);
                 try {
                     overwritten = (XYDataItem) existing.clone();
-            }
-            catch (CloneNotSupportedException e) {
+                } catch (CloneNotSupportedException e) {
                     throw new SeriesException("Couldn't clone XYDataItem!");
                 }
                 existing.setY(y);
+                // The item was updated in place, no need to add/remove from list.
+                fireSeriesChanged();
+                return overwritten;
             }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            // If we reach here, it means duplicates are NOT allowed, and 'x' was not found.
+            // So, we proceed to add a new item. The 'index' from indexOf(x) is negative,
+            // and we'll use that to determine the insertion point if autoSort is true.
+        }
+
+        // --- Logic for ADDING a new item ---
+        // This branch is executed if:
+        // 1. Duplicates ARE allowed (so we always add).
+        // 2. Duplicates are NOT allowed, AND 'x' was not found (so we add a new unique item).
+        XYDataItem newItem = new XYDataItem(x, y);
+
         if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+            // Determine the correct insertion point for the new item to maintain sort order.
+            // We use `xAndYComparator` which considers both X and Y.
+            // Collections.binarySearch returns (-(insertion point) - 1) if not found,
+            // or the index if an identical item (same x, same y based on comparator) is found.
+            int insertionIndex = Collections.binarySearch(this.data, newItem, this.xAndYComparator);
+            if (insertionIndex < 0) {
+                // Item not found, so insert at the calculated insertion point.
+                this.data.add(-insertionIndex - 1, newItem);
+            } else {
+                // An item with the same X and Y value was found (or at least, comparator returned 0).
+                // If duplicates are allowed, we still add this new item.
+                // The standard behavior for Collections.binarySearch finding an equal element is
+                // to return one of the indices. Inserting at this index is acceptable.
+                this.data.add(insertionIndex, newItem);
             }
-            else {
-                this.data.add(new XYDataItem(x, y));
+        } else {
+            // Not auto-sorted, just append the new item to the end of the list.
+            this.data.add(newItem);
         }
-            // check if this addition will exceed the maximum item count...
+
+        // Check if this addition will exceed the maximum item count.
         if (getItemCount() > this.maximumItemCount) {
-                this.data.remove(0);
-            }
+            this.data.remove(0); // Remove the oldest item (at index 0).
         }
+
         fireSeriesChanged();
-        return overwritten;
+        return overwritten; // This will be null if an item was added, or a copy of the old item if updated.
     }
\ No newline at end of file
