diff --git a/tmp/ea7aa6f8-1dc7-4345-b477-d07808833421_buggy.java b/tmp/5ea9644f-ccb0-4a80-89e4-86a756edb773_fixed.java
index fd8eae5..36aeffe 100644
--- a/tmp/ea7aa6f8-1dc7-4345-b477-d07808833421_buggy.java
+++ b/tmp/5ea9644f-ccb0-4a80-89e4-86a756edb773_fixed.java
@@ -1,47 +1,60 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
         int index = indexOf(x);
         if (index >= 0 && !this.allowDuplicateXValues) {
+            // Case 1: Overwrite existing item (duplicates not allowed, x found)
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
             }
             catch (CloneNotSupportedException e) {
                 throw new SeriesException("Couldn't clone XYDataItem!");
             }
             existing.setY(y);
         }
         else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            // Case 2: Add new item (x not found OR duplicates allowed)
+            XYDataItem newItem = new XYDataItem(x, y);
             if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                int insertPos;
+                if (index < 0) {
+                    // Item not found, calculate standard insertion point
+                    insertPos = -(index + 1);
+                } else {
+                    // Item found, and duplicates are allowed.
+                    // We need to insert the new item after all existing items
+                    // with the same X-value to maintain insertion order for duplicates.
+                    insertPos = index;
+                    while (insertPos < this.data.size()
+                            && this.data.get(insertPos).getX().equals(x)) {
+                        insertPos++;
+                    }
+                }
+                this.data.add(insertPos, newItem);
             }
             else {
-                this.data.add(new XYDataItem(x, y));
+                // Not auto-sorted, just append the new item
+                this.data.add(newItem);
             }
             // check if this addition will exceed the maximum item count...
             if (getItemCount() > this.maximumItemCount) {
                 this.data.remove(0);
             }
         }
         fireSeriesChanged();
         return overwritten;
     }
