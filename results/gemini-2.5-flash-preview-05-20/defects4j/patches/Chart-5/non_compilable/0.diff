diff --git a/tmp/aa29f2f0-653b-46ff-adb2-61771901de80_buggy.java b/tmp/07706129-4875-4e54-a6d6-b45fe46a1972_fixed.java
index fd8eae5..e0825c1 100644
--- a/tmp/aa29f2f0-653b-46ff-adb2-61771901de80_buggy.java
+++ b/tmp/07706129-4875-4e54-a6d6-b45fe46a1972_fixed.java
@@ -1,47 +1,66 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
-        XYDataItem overwritten = null;
+        // Find the index of the item. This uses binary search.
+        // If not found, it returns -(insertion point) - 1.
         int index = indexOf(x);
+
+        XYDataItem overwritten = null;
         if (index >= 0 && !this.allowDuplicateXValues) {
+            // Case 1: Item found, and duplicates are NOT allowed -> Update existing item
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
             }
             catch (CloneNotSupportedException e) {
                 throw new SeriesException("Couldn't clone XYDataItem!");
             }
             existing.setY(y);
         }
         else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            // Case 2: Item not found (index < 0), OR duplicates ARE allowed -> Add new item
+            XYDataItem newItem = new XYDataItem(x, y);
             if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                // If auto-sorting, we need to find the correct insertion point.
+                int insertionIndex = index;
+                if (insertionIndex < 0) {
+                    // Item not found, 'index' is -(insertion point) - 1,
+                    // so convert to actual insertion point.
+                    insertionIndex = -(insertionIndex + 1);
+                } else {
+                    // Item found (insertionIndex >= 0).
+                    // This path is taken only if 'this.allowDuplicateXValues' is true
+                    // (because if false, the 'if (index >= 0 && !this.allowDuplicateXValues)'
+                    // branch above would have been taken).
+                    // If duplicates are allowed, we need to insert the new item after
+                    // any existing items with the same x-value to maintain sort order.
+                    while (insertionIndex < this.data.size() && this.data.get(insertionIndex).getX().equals(x)) {
+                        insertionIndex++;
+                    }
+                }
+                this.data.add(insertionIndex, newItem);
             }
             else {
-                this.data.add(new XYDataItem(x, y));
+                // Not auto-sorted, just append the new item.
+                this.data.add(newItem);
             }
-            // check if this addition will exceed the maximum item count...
+            // Check if this addition will exceed the maximum item count...
             if (getItemCount() > this.maximumItemCount) {
                 this.data.remove(0);
             }
         }
         fireSeriesChanged();
         return overwritten;
     }
\ No newline at end of file
