diff --git a/tmp/00408779-a97c-41ed-8c96-bb5edc64b03f_buggy.java b/tmp/063df99f-485a-449d-aebe-07c760939414_fixed.java
index fd8eae5..89becff 100644
--- a/tmp/00408779-a97c-41ed-8c96-bb5edc64b03f_buggy.java
+++ b/tmp/063df99f-485a-449d-aebe-07c760939414_fixed.java
@@ -1,47 +1,70 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
-        // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
+        // Find if an item with this x-value already exists.
+        // This 'index' is used primarily for the update case.
         int index = indexOf(x); 
+
+        // Case 1: Duplicates are NOT allowed AND an item with this x-value exists.
+        // In this scenario, we update the existing item.
         if (index >= 0 && !this.allowDuplicateXValues) {
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
             }
             catch (CloneNotSupportedException e) {
                 throw new SeriesException("Couldn't clone XYDataItem!");
             }
             existing.setY(y);
         }
+        // Case 2: Either no item with this x-value was found (index < 0),
+        //         OR duplicates ARE allowed (this.allowDuplicateXValues is true).
+        //         In both these scenarios, we ADD a new item.
         else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+            XYDataItem newItem = new XYDataItem(x, y);
+
             if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
+                // When auto-sorting, we need to find the correct insertion point
+                // using Collections.binarySearch. This correctly uses XYDataItem's
+                // compareTo method (which considers both x and y) to maintain sort order.
+                int insertionIndex = Collections.binarySearch(this.data, newItem);
+                if (insertionIndex < 0) {
+                    // Item not found, insert at the calculated insertion point.
+                    this.data.add(-insertionIndex - 1, newItem);
+                } else {
+                    // Item with same x-value (and possibly y-value, depending on compareTo)
+                    // was found. Since we are in the 'else' block, it means either:
+                    // 1. original 'index' was < 0 (x not found), which implies this branch won't be taken unless binarySearch
+                    //    found something that indexOf didn't, or more specifically,
+                    //    if an equal item was found, 'insertionIndex' would be >=0.
+                    // 2. this.allowDuplicateXValues is true. In this case, we add the new item.
+                    //    The original XYSeries.add() method inserts at the found 'insertionIndex'.
+                    this.data.add(insertionIndex, newItem);
+                }
             }
             else {
-                this.data.add(new XYDataItem(x, y));
+                // Not auto-sorting, just append the new item to the end of the list.
+                this.data.add(newItem);
             }
-            // check if this addition will exceed the maximum item count...
+
+            // Check if this addition will exceed the maximum item count...
             if (getItemCount() > this.maximumItemCount) {
-                this.data.remove(0);
+                this.data.remove(0); // Remove the oldest item
             }
         }
         fireSeriesChanged();
         return overwritten;
     }
\ No newline at end of file
