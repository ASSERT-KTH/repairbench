diff --git a/tmp/c46e999a-ef70-4f05-a462-4f9752c465bc_buggy.java b/tmp/73be95a4-c607-4f0c-a4b6-86caf14333d7_fixed.java
index 41ea16c..3560d83 100644
--- a/tmp/c46e999a-ef70-4f05-a462-4f9752c465bc_buggy.java
+++ b/tmp/73be95a4-c607-4f0c-a4b6-86caf14333d7_fixed.java
@@ -1,63 +1,76 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
       }
 
       // TODO(user): Better source information.
       for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
 
       Node replacement;
       // All assignments evaluate to true, so make sure that the
       // expr statement evaluates to true in case it matters.
       nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+      // The 'nodes' list now contains [assign1, assign2, ..., assignK, TRUE].
+      // We need to construct a COMMA expression that evaluates to:
+      // assign1, assign2, ..., assignK, TRUE
+      // This will be structured as: COMMA(assign1, COMMA(assign2, ..., COMMA(assignK, TRUE)...))
+
+      if (nodes.isEmpty()) {
+        // This case should not be reachable because Token.TRUE is added above.
+        // However, if it were to occur, the expression should evaluate to true.
+        replacement = Node.newTrueNode();
+      } else if (nodes.size() == 1) {
+        // If only the TRUE node exists (e.g., for `x = {}` and varmap is empty)
+        replacement = nodes.get(0); // This will be the TRUE node itself
+      } else {
+        // Build the COMMA tree from right to left (innermost to outermost).
+        // Start with the last two elements as the initial COMMA node's children.
+        // For nodes = [E1, E2, ..., Ek, TRUE]:
+        // Initial rightMostComma = COMMA(Ek, TRUE)
+        Node rightMostComma = new Node(Token.COMMA, nodes.get(nodes.size() - 2), nodes.get(nodes.size() - 1));
+
+        // Iterate backwards from the third to last element (Ek-1) down to the first element (E1).
+        // Each iteration wraps the current 'rightMostComma' with the next preceding element.
+        // Example: COMMA(Ek-1, COMMA(Ek, TRUE))
+        for (int i = nodes.size() - 3; i >= 0; i--) {
+          rightMostComma = new Node(Token.COMMA, nodes.get(i), rightMostComma);
+        }
+        replacement = rightMostComma;
       }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
       Node replace = ref.getParent();
+      // Copy source information to the new tree *after* it's fully constructed.
       replacement.copyInformationFromForTree(replace);
 
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
       } else {
         replace.getParent().replaceChild(replace, replacement);
       }
     }
\ No newline at end of file
