diff --git a/tmp/5c1b228c-a68e-4b08-bd1a-5864ce26831b_buggy.java b/tmp/e65bd1e2-ee9d-48f0-b127-7eae80ceb32f_fixed.java
index 41ea16c..79f3c09 100644
--- a/tmp/5c1b228c-a68e-4b08-bd1a-5864ce26831b_buggy.java
+++ b/tmp/e65bd1e2-ee9d-48f0-b127-7eae80ceb32f_fixed.java
@@ -1,63 +1,76 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
       }
 
       // TODO(user): Better source information.
       for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
 
       Node replacement;
       // All assignments evaluate to true, so make sure that the
       // expr statement evaluates to true in case it matters.
       nodes.add(new Node(Token.TRUE));
 
+      // Handle the single-node case explicitly.
+      // If nodes has only one element (i.e., just the Token.TRUE node),
+      // it should be the replacement directly, not wrapped in a COMMA.
+      if (nodes.size() == 1) {
+        replacement = nodes.get(0);
+      } else {
         // Join these using COMMA.  A COMMA node must have 2 children, so we
         // create a tree. In the tree the first child be the COMMA to match
         // the parser, otherwise tree equality tests fail.
+        // The `Lists.reverse` call is crucial for the specific COMMA tree construction
+        // logic below, so it must only happen if we actually build a COMMA tree.
         nodes = Lists.reverse(nodes);
         replacement = new Node(Token.COMMA);
         Node cur = replacement;
         int i;
         for (i = 0; i < nodes.size() - 2; i++) {
           cur.addChildToFront(nodes.get(i));
           Node t = new Node(Token.COMMA);
           cur.addChildToFront(t);
           cur = t;
         }
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
+      }
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
 
       if (replace.getType() == Token.VAR) {
+        // If the parent is a VAR node (e.g., `var x = {}`), the replacement
+        // needs to be wrapped in an EXPR_RESULT node to form a valid statement.
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
       } else {
+        // If the parent is not a VAR node (e.g., `x = {}`), the replacement
+        // stands as a valid expression.
         replace.getParent().replaceChild(replace, replacement);
       }
     }
\ No newline at end of file
