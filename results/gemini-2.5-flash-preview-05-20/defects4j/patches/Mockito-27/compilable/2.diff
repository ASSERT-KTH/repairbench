diff --git a/tmp/3d73457c-c73b-431d-93bb-1809625fe6e1_buggy.java b/tmp/a11d797d-003c-41c0-83d5-87c5656c4ab7_fixed.java
index 5c5286c..8ad6ab3 100644
--- a/tmp/3d73457c-c73b-431d-93bb-1809625fe6e1_buggy.java
+++ b/tmp/a11d797d-003c-41c0-83d5-87c5656c4ab7_fixed.java
@@ -1,6 +1,18 @@
     public <T> void resetMock(T mock) {
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
+        // The original settings of the mock, including listeners, default answers, etc.,
+        // are stored within the old mock handler. We need to retrieve them to preserve
+        // the mock's configuration during reset.
+        MockSettingsImpl originalSettings = (MockSettingsImpl) oldMockHandler.getMockSettings();
+
+        // Create a new mock handler. This constructor typically handles clearing
+        // invocations and stubbings from the old handler, while retaining
+        // the original mock settings (passed or implicitly copied).
         MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));
+
+        // Create a new MethodInterceptorFilter. The crucial change here is to pass
+        // the `originalSettings` instead of creating new default settings.
+        // This ensures that all custom settings, like invocation listeners, are preserved.
+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, originalSettings);
         ((Factory) mock).setCallback(0, newFilter);
     }
\ No newline at end of file
