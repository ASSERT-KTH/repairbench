diff --git a/tmp/c5ae40a3-a96d-4b21-9c79-28b1f8d9aeeb_buggy.java b/tmp/040db643-bee1-4b63-84b3-8ebea63bdb85_fixed.java
index 5c5286c..c36b75f 100644
--- a/tmp/c5ae40a3-a96d-4b21-9c79-28b1f8d9aeeb_buggy.java
+++ b/tmp/040db643-bee1-4b63-84b3-8ebea63bdb85_fixed.java
@@ -1,6 +1,18 @@
     public <T> void resetMock(T mock) {
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
+        // Create a new MockHandler. This new handler will clear recorded invocations and stubs
+        // but should preserve the original MockSettings (e.g., listeners, default answer).
         MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));
+
+        // Retrieve the original MockSettings from the old mock handler.
+        // This is crucial to preserve configurations like invocation listeners,
+        // extra interfaces, or custom default answers that were set during mock creation.
+        MockSettingsImpl originalSettings = (MockSettingsImpl) oldMockHandler.getMockSettings();
+
+        // Create a new MethodInterceptorFilter using the new handler (with reset state)
+        // and the original settings (with preserved configuration).
+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, originalSettings);
+        
+        // Apply the new filter to the mock.
         ((Factory) mock).setCallback(0, newFilter);
     }
\ No newline at end of file
