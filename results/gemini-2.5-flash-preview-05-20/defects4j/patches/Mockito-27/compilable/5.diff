diff --git a/tmp/b7a52671-90da-4ff3-93ce-b68173820ef9_buggy.java b/tmp/2e5110c7-3fbe-414d-83bf-b83e50448829_fixed.java
index 5c5286c..73904aa 100644
--- a/tmp/b7a52671-90da-4ff3-93ce-b68173820ef9_buggy.java
+++ b/tmp/2e5110c7-3fbe-414d-83bf-b83e50448829_fixed.java
@@ -1,6 +1,24 @@
     public <T> void resetMock(T mock) {
+        // Get the current mock handler attached to the mock object.
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));
+
+        // Retrieve the original mock settings from the old handler.
+        // These settings contain important configuration like invocation listeners, default answer, extra interfaces, etc.
+        MockSettingsImpl settings = (MockSettingsImpl) oldMockHandler.getMockSettings();
+
+        // Create a new MockHandler. This new handler will be "clean" (no stubbings or recorded invocations)
+        // but it will be configured with all the original settings obtained in the previous step.
+        // This ensures that properties like invocation listeners and custom default answers are preserved.
+        MockHandler<T> newMockHandler = new MockHandler<T>(settings);
+
+        // Create a new MethodInterceptorFilter. This filter acts as the entry point for method calls
+        // on the mock. It's crucial to pass the newly created 'newMockHandler' and,
+        // importantly, the *original* 'settings' to this filter.
+        // The original buggy code was creating new default settings for the filter, which would lose
+        // any custom settings like invocation listeners or a custom default answer.
+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);
+
+        // Set the newly created filter as the callback for the CGLIB proxy (the mock object).
+        // This effectively replaces the old handler and filter with the new, reset ones.
         ((Factory) mock).setCallback(0, newFilter);
     }
\ No newline at end of file
