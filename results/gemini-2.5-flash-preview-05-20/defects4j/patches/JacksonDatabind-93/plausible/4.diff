diff --git a/tmp/ef27ccaf-7655-48ec-ae5f-612bea707e57_buggy.java b/tmp/1afd2ca5-ab71-4278-9eb3-8ad99a9a2a6b_fixed.java
index 2d9cf24..24048b0 100644
--- a/tmp/ef27ccaf-7655-48ec-ae5f-612bea707e57_buggy.java
+++ b/tmp/1afd2ca5-ab71-4278-9eb3-8ad99a9a2a6b_fixed.java
@@ -1,33 +1,39 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
         String full = raw.getName();
 
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
             }
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
             if (full.startsWith(PREFIX_STRING)) {
+                // As per the comment, this check applies only to classes, not interfaces.
+                // The `getSuperclass()` method for interfaces returns `null`, which can lead to
+                // a NullPointerException when `getSimpleName()` is called on a `null` class.
+                // This check ensures we only proceed if `raw` is a concrete class.
+                if (!raw.isInterface()) {
                     for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
                         String name = cls.getSimpleName();
                         // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                         if ("AbstractPointcutAdvisor".equals(name)
                                 // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                                 || "AbstractApplicationContext".equals(name)) {
                             break main_check;
                         }
                     }
                 }
+            }
             return;
         } while (false);
 
         throw JsonMappingException.from(ctxt,
                 String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
\ No newline at end of file
