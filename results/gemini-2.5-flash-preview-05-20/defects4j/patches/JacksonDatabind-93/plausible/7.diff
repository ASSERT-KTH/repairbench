diff --git a/tmp/5d458c7c-3a39-4ec6-b791-61237f69b4f2_buggy.java b/tmp/40a5ce40-4040-4254-be11-a61a3e0f8b46_fixed.java
index 2d9cf24..3ecbb0f 100644
--- a/tmp/5d458c7c-3a39-4ec6-b791-61237f69b4f2_buggy.java
+++ b/tmp/40a5ce40-4040-4254-be11-a61a3e0f8b46_fixed.java
@@ -1,33 +1,50 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
+
+        // 04-Feb-2019, tatu: As per [databind#1872] -- if raw class is null, we can't block
+        //    it based on name, but it's probably not a deserializable type anyway
+        //    (e.g. `JavaType` may be just a placeholder). Block for security.
+        if (raw == null) {
+            throw JsonMappingException.from(ctxt,
+                    String.format("Illegal type (unresolved Class) to deserialize: prevented for security reasons"));
+        }
+
         String full = raw.getName();
 
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
             }
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
+            // (Note: the previous "only applies to classes, not interfaces" was implicitly handled
+            // for "Object.class" being superclass for all "real" classes, but interfaces
+            // return `null` for `getSuperclass()`, which resulted in NPE in loop)
             if (full.startsWith(PREFIX_STRING)) {
+                // If the raw class is an interface, skip the superclass check as per the comment.
+                // The loop should only apply to classes, not interfaces.
+                if (raw.isInterface()) {
+                    return; // Interface: not applicable for this check
+                }
                 for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
                             // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                             || "AbstractApplicationContext".equals(name)) {
                         break main_check;
                     }
                 }
             }
             return;
         } while (false);
 
         throw JsonMappingException.from(ctxt,
                 String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
\ No newline at end of file
