diff --git a/tmp/9e1194a9-6fb8-4795-880c-66bb2e61ddfd_buggy.java b/tmp/5b6ca5f0-fd67-4588-834b-641a61658944_fixed.java
index 602226b..02c0b25 100644
--- a/tmp/9e1194a9-6fb8-4795-880c-66bb2e61ddfd_buggy.java
+++ b/tmp/5b6ca5f0-fd67-4588-834b-641a61658944_fixed.java
@@ -1,26 +1,46 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
         Node parent = n.getParent();
+
+        // Check if it's a variable declared with 'var'.
+        // If n is a NAME node and its parent is a VAR node, it's a var declaration.
         if (parent.isVar()) {
+          // A variable declared via `var name = initializer;`
+          // In goog.scope, such a variable must be an alias to a qualified name.
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+            // This is a qualified name alias: var alias = goog.dom.something;
             String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
+            // 'v' is already the Var object for 'name'.
+            aliases.put(name, v);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            // Get the qualified name string from the initial value node.
+            // v.getInitialValue() provides the node for the RHS of the assignment.
+            String qualifiedName = v.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
           } else {
-          // TODO(robbyw): Support using locals for private variables.
+            // This is a 'var' declaration but its initializer is not a qualified name.
+            // e.g., var x = 10; var x = goog.dom + 10; var x = goog['dom'];
+            // These are not allowed in goog.scope.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
+        } else if (n.isFunction()) {
+          // This handles function declarations: 'function f() {}'
+          // In goog.scope, all local variables, including function declarations,
+          // must be aliases. Function declarations cannot be aliases to qualified names.
+          // Therefore, they are always reported as errors.
+          //
+          // The comments about "Bleeding functions" and "Parameters of the scope function"
+          // imply that certain types of functions/parameters are handled by other checks
+          // or are implicitly filtered out from this check.
+          // A simple `function f() {}` declared directly within a `goog.scope` block
+          // is a regular local variable that should be reported if it's not an alias.
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
+        // Other types of variables (e.g., function parameters, catch variables)
+        // are implicitly skipped by the above conditions (their parents are not VAR,
+        // and they are not FUNCTION nodes themselves). This aligns with the
+        // comments suggesting they are handled by other checks/errors.
       }
     }
\ No newline at end of file
