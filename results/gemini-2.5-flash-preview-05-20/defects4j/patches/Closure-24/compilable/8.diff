diff --git a/tmp/6bd51d4a-7526-4e3a-bbe7-d3c857bec674_buggy.java b/tmp/e39aec94-9949-4087-af7c-4f2cbd871edf_fixed.java
index 602226b..6221e16 100644
--- a/tmp/6bd51d4a-7526-4e3a-bbe7-d3c857bec674_buggy.java
+++ b/tmp/e39aec94-9949-4087-af7c-4f2cbd871edf_fixed.java
@@ -1,26 +1,45 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
+        // int type = n.getType(); // This variable is unused and can be removed, but leaving it as per problem instructions.
         Node parent = n.getParent();
-        if (parent.isVar()) {
+
+        // Only process variables that are declared in the current local scope.
+        // For ScopedAliases, we are typically interested in local variables.
+        if (v.isLocal()) {
+          // An alias is defined as a VAR declaration whose assigned value is a qualified name.
+          // First, check if the variable's parent is a VAR node (e.g., `var x = ...;`).
+          if (parent != null && parent.isVar()) {
+            // This is a 'var' declaration. Now, check if it is a valid alias.
+            // An alias requires an initial value that is a qualified name.
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+              // This is a valid alias (e.g., `var aliasName = qualified.name;`).
               String name = n.getString();
               Var aliasVar = scope.getVar(name);
               aliases.put(name, aliasVar);
 
               String qualifiedName =
                   aliasVar.getInitialValue().getQualifiedName();
               transformation.addAlias(name, qualifiedName);
               // Bleeding functions already get a BAD_PARAMETERS error, so just
               // do nothing.
               // Parameters of the scope function also get a BAD_PARAMETERS
               // error.
             } else {
-          // TODO(robbyw): Support using locals for private variables.
+              // This is a 'var' declaration, but it's not an alias.
+              // Examples: `var x = 10;`, `var x;`, `var x = goog.dom + 10;`
+              // These should be reported as non-alias locals.
+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+            }
+          } else {
+            // This branch handles local variables that are NOT 'var' declarations.
+            // This includes function declarations (e.g., `function f() {}`),
+            // function parameters, and catch block variables.
+            // As per `testNonAliasLocal` expecting an error for `function f() {}`,
+            // these are also considered non-alias locals and should be reported.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
