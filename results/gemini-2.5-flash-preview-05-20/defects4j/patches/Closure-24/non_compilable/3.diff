diff --git a/tmp/3ba08a4d-61ef-49bd-918f-7d3deafc0d53_buggy.java b/tmp/17539aeb-c1bc-46df-9af4-130f3e3348de_fixed.java
index 602226b..19ecc24 100644
--- a/tmp/3ba08a4d-61ef-49bd-918f-7d3deafc0d53_buggy.java
+++ b/tmp/17539aeb-c1bc-46df-9af4-130f3e3348de_fixed.java
@@ -1,26 +1,35 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
+        // The original code checked n.getParent().isVar().
+        // This implicitly excluded function declarations and parameters, etc.
+        // The test testNonAliasLocal includes 'function f() {}' which
+        // implies function declarations that are not aliases should also cause an error.
+        // The comments indicate that parameters and bleeding functions
+        // already get a BAD_PARAMETERS error, implying they should not
+        // get GOOG_SCOPE_NON_ALIAS_LOCAL.
+        //
+        // By checking v.isLocal() (for var, let, const) or v.isFunction(),
+        // we correctly target the variables that should be considered
+        // "non-alias locals" while respecting the exclusions for parameters
+        // and bleeding functions (which are typically global or specifically exposed).
+        if (v.isLocal() || v.isFunction()) {
+          // Check if it's an alias assignment (e.g., var x = goog.foo.bar;)
+          // An alias must have an initializer that is a qualified name.
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
 
             String qualifiedName =
                 aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
           } else {
-          // TODO(robbyw): Support using locals for private variables.
+            // It's a local variable (var/let/const) or a function declaration,
+            // but not an alias. Report it as a non-alias local.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
