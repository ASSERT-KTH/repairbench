diff --git a/tmp/77be6dd1-e616-436b-a638-329d0d92944c_buggy.java b/tmp/b2832e83-3794-4ab2-97d0-b59968ee8619_fixed.java
index 602226b..329de35 100644
--- a/tmp/77be6dd1-e616-436b-a638-329d0d92944c_buggy.java
+++ b/tmp/b2832e83-3794-4ab2-97d0-b59968ee8619_fixed.java
@@ -1,26 +1,35 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+
+        // Bleeding functions already get a BAD_PARAMETERS error, so just do nothing.
+        // Parameters of the scope function also get a BAD_PARAMETERS error.
+        if (v.isBleedingFunction() || v.isParam()) {
+          continue;
+        }
+
+        // In a goog.scope block, only 'var' declarations that alias a qualified name
+        // are allowed. All other local declarations (e.g., 'var x = 10', 'function f() {}')
+        // should be reported as errors.
+        //
+        // An alias is identified by:
+        // 1. It being a 'var' declaration (n.getParent().isVar())
+        // 2. It having an initializer (n.hasChildren())
+        // 3. Its initializer being a qualified name (n.getFirstChild().isQualifiedName())
+        if (n.getParent().isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+          // This is a valid alias, process it.
           String name = n.getString();
-          Var aliasVar = scope.getVar(name);
+          Var aliasVar = scope.getVar(name); // Retrieves the Var object again, effectively 'v'.
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // This variable or function declaration is not a valid alias according to
+          // goog.scope rules. Report an error.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
-    }
