diff --git a/tmp/2690b367-3178-4804-a2d5-9347fbad2539_buggy.java b/tmp/07490526-5cd9-4fb8-aa6c-336097aab4c8_fixed.java
index 602226b..5fdc141 100644
--- a/tmp/2690b367-3178-4804-a2d5-9347fbad2539_buggy.java
+++ b/tmp/07490526-5cd9-4fb8-aa6c-336097aab4c8_fixed.java
@@ -1,26 +1,44 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+
+        // Parameters of the scope function and bleeding functions are handled
+        // by other checks (e.g., BAD_PARAMETERS), so we ignore them here.
+        if (v.isParam() || v.isBleedingFunction()) {
+          continue;
+        }
+
+        // Determine if the current variable is an alias.
+        // An alias is defined as a VAR declaration where its initial value
+        // is a qualified name (e.g., `var alias = goog.dom.something`).
+        boolean isAlias = false;
+        if (parent.isVar()) { // This checks if it's a `var` declaration (e.g., `var x = ...`)
+            Node value = n.getFirstChild(); // Get the right-hand side (initial value) of the assignment
+            if (value != null && value.isQualifiedName()) {
+                // If the initial value is a qualified name, then it's an alias.
+                isAlias = true;
+            }
+        }
+
+        if (isAlias) {
+          // This is an actual alias. Register it for transformation.
           String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
+          // Use the 'v' (Var) object directly, no need to lookup again from scope.
+          aliases.put(name, v);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          // Get the qualified name from the initial value of the alias variable.
+          String qualifiedName = v.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // This is a local variable that is not an alias.
+          // This covers:
+          // - `var x = 10;` (a VAR declaration, but value is not a qualified name)
+          // - `var x = goog.dom + 10;` (value is an ADD operation, not a qualified name)
+          // - `var x = goog['dom'];` (value is a GETELEM operation, not a qualified name)
+          // - `function f() {}` (a FUNCTION declaration, which is not a VAR declaration)
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
-    }
