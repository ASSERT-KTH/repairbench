diff --git a/tmp/928e0894-492a-40f5-82bf-f0f74b48ba58_buggy.java b/tmp/f7fe6b2e-6cca-47dd-be6d-1d71c349ecd7_fixed.java
index 602226b..23b7939 100644
--- a/tmp/928e0894-492a-40f5-82bf-f0f74b48ba58_buggy.java
+++ b/tmp/f7fe6b2e-6cca-47dd-be6d-1d71c349ecd7_fixed.java
@@ -1,26 +1,44 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        Node n = v.getNode(); // n is the NAME node (e.g., 'x' in 'var x = 10')
+
+        // Get the initial value of the variable.
+        // For 'var x = 10;', initialValue is the NUMBER node '10'.
+        // For 'var x = goog.foo.bar;', initialValue is the GETPROP node for 'goog.foo.bar'.
+        // For 'function f() {}', initialValue is the FUNCTION node.
+        // For 'var x;', initialValue is null.
+        // For a function parameter 'a' in 'function(a){}', initialValue is null.
+        Node initialValue = v.getInitialValue();
+
+        // Determine if the variable should be treated as an alias.
+        // An alias is a variable initialized with a qualified name (e.g., 'goog.foo.bar').
+        // It must have an initial value, and that value must be a qualified name.
+        boolean isAlias = initialValue != null && initialValue.isQualifiedName();
+
+        if (isAlias) {
+          // This variable is an alias (e.g., 'var x = goog.foo.bar;')
+          String name = n.getString(); // The local name (e.g., "x")
+
+          // Store the alias variable.
+          // Note: scope.getVar(name) would return 'v' itself.
+          aliases.put(name, v);
+
+          // Get the full qualified name from the initial value node.
+          String qualifiedName = initialValue.getQualifiedName();
+
+          // Add this alias transformation to be applied later.
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // This variable is not an alias (e.g., 'var x = 10;', 'function f() {}', 'var x;')
+
+          // According to comments, bleeding functions and parameters
+          // already get a BAD_PARAMETERS error, so we should not report
+          // GOOG_SCOPE_NON_ALIAS_LOCAL for them to avoid duplicate/conflicting errors.
+          // For all other local variables that are not aliases, report them.
+          if (!v.isParameter() && !v.isBleedingFn()) {
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
