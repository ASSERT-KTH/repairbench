diff --git a/tmp/f73823bc-cde0-4311-90bf-39faac84f35d_buggy.java b/tmp/57f0cda3-9670-4c1b-91b7-28a068b3a9d6_fixed.java
index 602226b..785978c 100644
--- a/tmp/f73823bc-cde0-4311-90bf-39faac84f35d_buggy.java
+++ b/tmp/57f0cda3-9670-4c1b-91b7-28a068b3a9d6_fixed.java
@@ -1,26 +1,35 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        Node n = v.getNode(); // The NAME node for the variable
+
+        // Parameters of the `goog.scope` function itself are handled by another error
+        // (BAD_PARAMETERS), so they should not be reported as GOOG_SCOPE_NON_ALIAS_LOCAL.
+        // Bleeding functions (if treated as parameters in some context) also fall under this.
+        if (v.isParam()) {
+          continue;
+        }
+
+        // An alias is defined as a local variable initialized with a qualified name.
+        Node initialValue = v.getInitialValue();
+
+        // Check if the initial value exists and if it is a qualified name (e.g., goog.foo.Bar).
+        if (initialValue != null && initialValue.isQualifiedName()) {
+          // This variable is an alias.
+          String name = n.getString(); // The local name (e.g., 'Foo' in `var Foo = goog.foo.Foo;`)
+          String qualifiedName = initialValue.getQualifiedName(); // The full qualified name ('goog.foo.Foo')
+
+          // Store the alias mapping.
+          aliases.put(name, v); // 'v' is the Var object representing the alias.
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // This variable is a local variable but not an alias.
+          // This includes cases like:
+          // - `var x = 10;` (initialValue is a NUMBER, not a qualified name)
+          // - `var x;` (initialValue is null)
+          // - `function f() {}` (initialValue is the FUNCTION node itself, not a qualified name)
+          // - `var x = goog['dom'];` (initialValue is a GETELEM, not a qualified name)
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
-    }
