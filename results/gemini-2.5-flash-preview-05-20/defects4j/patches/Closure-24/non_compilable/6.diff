diff --git a/tmp/9d9892d4-58f4-4404-ae06-cca61d5b5588_buggy.java b/tmp/dba45333-a74b-4194-82df-e37bba394cc1_fixed.java
index 602226b..fa0e5c9 100644
--- a/tmp/9d9892d4-58f4-4404-ae06-cca61d5b5588_buggy.java
+++ b/tmp/dba45333-a74b-4194-82df-e37bba394cc1_fixed.java
@@ -1,26 +1,4 @@
-    private void findAliases(NodeTraversal t) {
-      Scope scope = t.getScope();
-      for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
-        }
-      }
+        if (parent.isVar()) { // This condition skips function declarations and parameters
+          // ... logic for var declarations ...
         }
\ No newline at end of file
