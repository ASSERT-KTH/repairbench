diff --git a/tmp/8bf71029-6d8d-4ceb-8312-80d175b6fe02_buggy.java b/tmp/e92fce5c-2c5d-454e-aef3-c81c9e620cc7_fixed.java
index 602226b..40b47dd 100644
--- a/tmp/8bf71029-6d8d-4ceb-8312-80d175b6fe02_buggy.java
+++ b/tmp/e92fce5c-2c5d-454e-aef3-c81c9e620cc7_fixed.java
@@ -1,26 +1,35 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
         // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+        // do nothing. Parameters of the scope function also get a BAD_PARAMETERS
+        // error. These variables should be skipped as they are handled by other
+        // checks.
+        if (v.isBleedingFunction() || v.isParameter()) {
+          continue;
+        }
+
+        Node initialValue = v.getInitialValue();
+
+        // An alias is defined as a local variable whose initial value is a qualified name.
+        // For example: `var x = goog.some.path;`
+        if (initialValue != null && initialValue.isQualifiedName()) {
+          String name = v.getName();
+          // The Var 'v' itself is the aliasVar.
+          aliases.put(name, v);
+
+          String qualifiedName = initialValue.getQualifiedName();
+          transformation.addAlias(name, qualifiedName);
         } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
+          // If a local variable is not an alias (i.e., its initial value is not a qualified name,
+          // or it has no initial value, or it's a function declaration, etc.),
+          // it should be reported as a non-alias local variable in a goog.scope.
+          // This includes cases like:
+          // `var x = 10;`
+          // `var x = goog.dom + 10;`
+          // `var x = goog['dom'];` (as goog['dom'] is not a qualified name node)
+          // `function f() {}`
+          report(t, v.getNode(), GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());
         }
       }
     }
\ No newline at end of file
