diff --git a/tmp/a933d8e7-af5e-4b28-90ca-21786d179af0_buggy.java b/tmp/b3e7fde5-f73f-44fb-8db4-103c3eeb6c01_fixed.java
index 0502fea..dd6e425 100644
--- a/tmp/a933d8e7-af5e-4b28-90ca-21786d179af0_buggy.java
+++ b/tmp/b3e7fde5-f73f-44fb-8db4-103c3eeb6c01_fixed.java
@@ -1,9 +1,15 @@
     public BaseSettings withDateFormat(DateFormat df) {
         if (_dateFormat == df) {
             return this;
         }
-        TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();
+        // When a new DateFormat is provided, the TimeZone of the BaseSettings object
+        // should NOT implicitly change to the TimeZone of the provided DateFormat.
+        // It should retain its current TimeZone (_timeZone).
+        // The original code: TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();
+        // This line was causing the TimeZone to change, violating the test's expectation.
+        // We should always use the existing _timeZone for the new settings instance.
         return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,
                 _typeResolverBuilder, df, _handlerInstantiator, _locale,
-                tz, _defaultBase64);
+                _timeZone, // Use the existing _timeZone, do not derive from the new DateFormat
+                _defaultBase64);
     }
\ No newline at end of file
