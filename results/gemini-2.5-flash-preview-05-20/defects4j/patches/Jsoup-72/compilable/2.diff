diff --git a/tmp/3ab0c965-37ee-4bfa-b402-82affa5a1114_buggy.java b/tmp/bbf124b1-c81f-461f-aa84-63027ff62f9e_fixed.java
index d666a67..1dd661d 100644
--- a/tmp/3ab0c965-37ee-4bfa-b402-82affa5a1114_buggy.java
+++ b/tmp/bbf124b1-c81f-461f-aa84-63027ff62f9e_fixed.java
@@ -1,36 +1,53 @@
     /**
      * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
      * <p />
      * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
      * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
      * some more duplicates.
      */
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
+        // Defensive check: If count is negative, it's an invalid range for string construction.
+        // Returning an empty string is a robust way to handle this, preventing a StringIndexOutOfBoundsException.
+        if (count < 0) {
+            return "";
+        }
+
         // limit (no cache):
         if (count > maxStringCacheLen)
             return new String(charBuf, start, count);
 
         // calculate hash:
         int hash = 0;
         int offset = start;
         for (int i = 0; i < count; i++) {
+            // Defensive check for potential out-of-bounds access in charBuf, although
+            // the primary issue identified is with `count` being negative.
+            // If `offset` becomes >= charBuf.length, it would be an ArrayIndexOutOfBoundsException,
+            // not a StringIndexOutOfBoundsException with -1.
+            if (offset >= charBuf.length || offset < 0) {
+                 // This path implies the `start` or `count` provided is invalid relative to charBuf's actual length.
+                 // If the goal is to fix StringIndexOutOfBoundsException: -1, the above `count < 0` is the direct fix.
+                 // This `if` can be removed if caller guarantees `start + count` is within `charBuf` bounds.
+                 // For now, assuming current context.
+                 return new String(charBuf, start, count); // Fallback to avoid AIOOB, assuming new String will catch if (start, count) is still invalid
+            }
             hash = 31 * hash + charBuf[offset++];
         }
 
         // get from cache
         final int index = hash & stringCache.length - 1;
         String cached = stringCache[index];
 
         if (cached == null) { // miss, add
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
         } else { // hashcode hit, check equality
             if (rangeEquals(charBuf, start, count, cached)) { // hit
                 return cached;
             } else { // hashcode conflict
                 cached = new String(charBuf, start, count);
                 stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
             }
         }
         return cached;
     }
\ No newline at end of file
