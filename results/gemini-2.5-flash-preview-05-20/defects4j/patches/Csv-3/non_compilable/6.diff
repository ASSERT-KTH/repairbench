diff --git a/tmp/cf7074b1-abd5-4e0c-a504-028db7e62ff9_buggy.java b/tmp/c376cf99-a31a-4fd8-9aa4-57d5d8e121a4_fixed.java
index 1ad070d..eea235d 100644
--- a/tmp/cf7074b1-abd5-4e0c-a504-028db7e62ff9_buggy.java
+++ b/tmp/c376cf99-a31a-4fd8-9aa4-57d5d8e121a4_fixed.java
@@ -1,38 +1,53 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
+        case FF: // TODO is this correct? (Kept as is, as it's consistent with escaping literal special characters)
+        case TAB: // TODO is this correct? Do tabs need to be escaped? (Kept as is)
+        case BACKSPACE: // TODO is this correct? (Kept as is)
+            return c; // If the char after escape is a control char, return the char itself.
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // Check if the character is the escape character itself, the quote character, or the delimiter.
+            // If so, return it literally (e.g., \\ -> \, \" -> ", \, -> ,)
+            if (c == format.getEscapeCharacter()) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            }
+            if (format.isQuoteSet() && c == format.getQuoteCharacter()) {
+                return c;
+            }
+            if (format.isDelimiterSet() && c == format.getDelimiter()) {
+                return c;
+            }
+            
+            // For any other character (e.g., \N, \a), the tests imply that the escape character
+            // should *not* have been consumed. To achieve this, push the character 'c' back
+            // into the stream and return the escape character itself. The lexer will then
+            // process the escape character, and 'c' will be processed in the next read.
+            in.unread(c);
+            return format.getEscapeCharacter();
         }
     }
\ No newline at end of file
