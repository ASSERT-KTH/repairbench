diff --git a/tmp/cca5399c-87d7-47dc-8828-d104a6377972_buggy.java b/tmp/a48752af-4b0a-4763-829c-f1689283d1c3_fixed.java
index 1ad070d..debe7af 100644
--- a/tmp/cca5399c-87d7-47dc-8828-d104a6377972_buggy.java
+++ b/tmp/a48752af-4b0a-4763-829c-f1689283d1c3_fixed.java
@@ -1,38 +1,38 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // If the character is the quote or escape character, return it directly.
+            // This handles cases like \", \\, /', // etc.
+            if (c == quote || c == escape) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            }
+            // For any other character (e.g., \N, \a), it's not a special escape sequence.
+            // Treat the escape character as a literal, and put the current character 'c' back into the stream.
+            in.unread(c);
+            return escape; // Return the escape character itself
         }
     }
