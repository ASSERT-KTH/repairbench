diff --git a/tmp/d7010e2a-e6c0-4262-816f-04786214aeea_buggy.java b/tmp/c8cfc0e5-4abc-4e5b-85b6-16fb0ea9c62a_fixed.java
index 1ad070d..7e5ce07 100644
--- a/tmp/d7010e2a-e6c0-4262-816f-04786214aeea_buggy.java
+++ b/tmp/c8cfc0e5-4abc-4e5b-85b6-16fb0ea9c62a_fixed.java
@@ -1,38 +1,50 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
         case FF: // TODO is this correct?
         case TAB: // TODO is this correct? Do tabs need to be escaped?
         case BACKSPACE: // TODO is this correct?
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
             // Now check for meta-characters
+            // If the character is the escape character itself, it should be treated as escaped
+            // e.g., if escape is '\', then '\\' should yield '\'
+            if (c == this.format.getEscapeCharacter()) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            } else {
+                // If it's not a special escape sequence (r,n,t,b,f) or the escape char itself,
+                // then it means the escape char was effectively literal.
+                // For example, in MySQL, \N is a null value, which should be preserved as \N.
+                // Or \a should be preserved as \a.
+                // To achieve this, push the character 'c' back to the stream,
+                // and return the escape character itself so it gets appended.
+                in.unread(c);
+                return this.format.getEscapeCharacter();
+            }
         }
     }
