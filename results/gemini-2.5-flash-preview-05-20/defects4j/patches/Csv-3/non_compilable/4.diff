diff --git a/tmp/eb5f4dec-ff14-4cc9-be59-59396d5d0fe3_buggy.java b/tmp/fe5633ac-43a6-4633-be37-4e7e0c00b3a1_fixed.java
index 1ad070d..e1cd42d 100644
--- a/tmp/eb5f4dec-ff14-4cc9-be59-59396d5d0fe3_buggy.java
+++ b/tmp/fe5633ac-43a6-4633-be37-4e7e0c00b3a1_fixed.java
@@ -1,38 +1,55 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // The escape character (format.getEscapeCharacter()) has already been consumed.
+            // 'c' is the character immediately following the escape character.
+
+            // If 'c' is the escape character itself, it means the escape character was escaped.
+            // In this case, we return 'c' as a literal (e.g., "//" becomes "/").
+            if (c == format.getEscapeCharacter()) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            } else {
+                // For any other character 'c' that is not a recognized special escape sequence
+                // (like 'r', 'n', 't', 'b', 'f') and is not the escape character itself,
+                // the escape character is treated as a literal character, and 'c' is also
+                // treated as a literal.
+                // To achieve this, we "unread" 'c' so it can be read as a normal character
+                // in the next read operation.
+                in.unread(c);
+                // And we return the escape character itself, which was the character that
+                // triggered this readEscape() call. This ensures the escape character
+                // is preserved in the output.
+                return format.getEscapeCharacter();
+            }
         }
     }
