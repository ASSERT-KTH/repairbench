diff --git a/tmp/5bb89e8b-b487-4737-8b29-ce85145342c3_buggy.java b/tmp/10e58535-ac20-438b-86fa-b516bf483c67_fixed.java
index 1ad070d..538102d 100644
--- a/tmp/5bb89e8b-b487-4737-8b29-ce85145342c3_buggy.java
+++ b/tmp/10e58535-ac20-438b-86fa-b516bf483c67_fixed.java
@@ -1,38 +1,47 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
+        case FF:
+        case TAB:
+        case BACKSPACE:
+            return c; // Escaped control characters unescape to themselves.
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // Check if 'c' is the escape character itself (e.g., in '\\' or '//').
+            // This is a common CSV behavior for escaping the escape character.
+            // 'format' is assumed to be an accessible field of the class (CSVLexer).
+            if (format != null && format.isEscapeCharacterSet() && c == format.getEscapeCharacter().charValue()) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            }
+            // For any other character (e.g., 'N' in '\N', or 'a' in '\a'),
+            // it's not a recognized special escape sequence.
+            // According to the Javadoc: "return END_OF_STREAM if char following the escape is invalid".
+            // This assumes the caller (nextToken) will interpret END_OF_STREAM in this context
+            // as "this is not a predefined escape sequence, treat the original escape char and 'c' as literals".
+            return END_OF_STREAM;
         }
     }
