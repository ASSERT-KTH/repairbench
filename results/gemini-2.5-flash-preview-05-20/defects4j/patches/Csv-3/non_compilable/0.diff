diff --git a/tmp/d042f938-9439-4e4e-a5ac-a62fcd0ff59e_buggy.java b/tmp/e0e12ec7-a38d-420d-899b-df2b379744a5_fixed.java
index 1ad070d..2a657d7 100644
--- a/tmp/d042f938-9439-4e4e-a5ac-a62fcd0ff59e_buggy.java
+++ b/tmp/e0e12ec7-a38d-420d-899b-df2b379744a5_fixed.java
@@ -1,38 +1,46 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // If the character following the escape is the escape character itself,
+            // then it should be treated as an escaped literal.
+            // E.g., for CSVFormat with escape='/', "//" should yield "/".
+            if (c == format.getEscapeChar()) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            }
+            // For other unknown escape sequences (e.g., "\N", "\a" if '\' is escape),
+            // treat the escape character as a literal, and make the current char 'c' available for literal reading.
+            // This effectively makes "\X" parse as "\" followed by "X".
+            in.unread(c); // Put 'c' back onto the stream so it can be read as a literal.
+            return in.getLastChar(); // Return the original escape character itself, which was just consumed by the lexer.
         }
     }
