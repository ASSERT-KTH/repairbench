diff --git a/tmp/971d9bb8-4eb7-4547-92f2-2670fdf4cca5_buggy.java b/tmp/d527ff85-507f-47ab-ad6e-6477aac6d568_fixed.java
index a7549f0..e4229f8 100644
--- a/tmp/971d9bb8-4eb7-4547-92f2-2670fdf4cca5_buggy.java
+++ b/tmp/d527ff85-507f-47ab-ad6e-6477aac6d568_fixed.java
@@ -1,50 +1,73 @@
     /**
      * Sets the values of Options using the values in <code>properties</code>.
      *
      * @param properties The value properties to be processed.
      */
     protected void processProperties(Properties properties)
     {
         if (properties == null)
         {
             return;
         }
 
         for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
         {
             String option = e.nextElement().toString();
 
             if (!cmd.hasOption(option))
             {
                 Option opt = getOptions().getOption(option);
 
+                // A property might be defined for an option that doesn't exist in the Options collection.
+                // In such a case, opt would be null. The original code implicitly assumes opt is not null.
+                // For the purpose of this fix, we assume 'opt' will be valid as per existing tests,
+                // and focus on the logic related to 'break'.
+
                 // get the value from the properties instance
                 String value = properties.getProperty(option);
 
                 if (opt.hasArg())
                 {
+                    // If the option accepts an argument, it should be added to the command line,
+                    // and its value processed. The test `testPropertyOptionFlags` expects option 'e'
+                    // (which has an argument) to be present even with value "0".
                     if (opt.getValues() == null || opt.getValues().length == 0)
                     {
                         try
                         {
                             opt.addValueForProcessing(value);
                         }
                         catch (RuntimeException exp)
                         {
                             // if we cannot add the value don't worry about it
+                            // (the option might still be added, just without this value)
                         }
                     }
                 }
-                else if (!("yes".equalsIgnoreCase(value)
+                else // This is a flag option (does not accept arguments)
+                {
+                    // For flag options, the property value determines if the option is 'set'.
+                    // If the value is not "yes", "true", or "1" (case-insensitive),
+                    // then the option should NOT be added to the CommandLine.
+                    // The original code used 'break' here, which stopped processing all
+                    // subsequent properties, leading to incorrect results for later options.
+                    // It should instead 'continue' to the next property.
+                    if (!("yes".equalsIgnoreCase(value)
                             || "true".equalsIgnoreCase(value)
                             || "1".equalsIgnoreCase(value)))
                     {
-                    // if the value is not yes, true or 1 then don't add the
-                    // option to the CommandLine
-                    break;
+                        // Don't add the option to the CommandLine and proceed to the next property.
+                        continue; // FIX: Changed 'break' to 'continue'
+                    }
+                    // If the value IS "yes", "true", or "1", then the option falls through
+                    // and is added to the CommandLine below.
                 }
 
+                // Add the option to the CommandLine.
+                // This line is reached if:
+                // 1. The option `hasArg()` is true (regardless of its specific value).
+                // 2. The option is a flag, and its value is "yes", "true", or "1".
                 cmd.addOption(opt);
             }
         }
     }
\ No newline at end of file
