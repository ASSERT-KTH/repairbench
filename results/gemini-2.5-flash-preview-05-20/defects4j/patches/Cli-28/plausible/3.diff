diff --git a/tmp/a5a7376e-4d5c-4fe7-9d48-b8dda0614169_buggy.java b/tmp/2d596c8e-7148-44af-a875-8e81b8466b07_fixed.java
index a7549f0..38c208a 100644
--- a/tmp/a5a7376e-4d5c-4fe7-9d48-b8dda0614169_buggy.java
+++ b/tmp/2d596c8e-7148-44af-a875-8e81b8466b07_fixed.java
@@ -1,50 +1,68 @@
     /**
      * Sets the values of Options using the values in <code>properties</code>.
      *
      * @param properties The value properties to be processed.
      */
     protected void processProperties(Properties properties)
     {
         if (properties == null)
         {
             return;
         }
 
         for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
         {
             String option = e.nextElement().toString();
 
+            // Check if the option is already present in cmd (from parsed command line)
+            // If it is, properties should not override it, so skip.
             if (!cmd.hasOption(option))
             {
                 Option opt = getOptions().getOption(option);
 
+                // Ensure the option actually exists in the parser's options definition
+                if (opt == null) {
+                    continue; // Skip if the property name doesn't correspond to a known option
+                }
+
                 // get the value from the properties instance
                 String value = properties.getProperty(option);
 
                 if (opt.hasArg())
                 {
+                    // If the option takes an argument, add the value for processing
+                    // only if no values have been added yet (or if it's multi-valued, allow multiple)
+                    // The original code only added if getValues() was null or empty, preserving original behavior
                     if (opt.getValues() == null || opt.getValues().length == 0)
                     {
                         try
                         {
                             opt.addValueForProcessing(value);
                         }
                         catch (RuntimeException exp)
                         {
                             // if we cannot add the value don't worry about it
+                            // (e.g., if it's a number option and value is not a number)
+                            continue; // Do not add the option if value processing failed
                         }
                     }
+                    // After processing the argument value, add the option to the CommandLine
+                    cmd.addOption(opt);
                 }
-                else if (!("yes".equalsIgnoreCase(value)
+                else // This is a flag option (does not take an argument)
+                {
+                    // A flag option from properties should only be added if its value indicates 'true'
+                    if ("yes".equalsIgnoreCase(value)
                         || "true".equalsIgnoreCase(value)
-                        || "1".equalsIgnoreCase(value)))
+                        || "1".equalsIgnoreCase(value))
                     {
-                    // if the value is not yes, true or 1 then don't add the
-                    // option to the CommandLine
-                    break;
-                }
-
                         cmd.addOption(opt);
                     }
+                    // If the value is anything else (e.g., "false", "no", "0", or arbitrary string),
+                    // the flag option should *not* be added to the CommandLine.
+                    // The original bug was a 'break;' statement here, which stopped processing
+                    // all subsequent properties. Removing 'break;' fixes this.
+                }
+            }
         }
     }
\ No newline at end of file
