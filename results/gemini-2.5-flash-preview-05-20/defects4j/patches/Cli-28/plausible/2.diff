diff --git a/tmp/93041c26-54f3-47cb-9a44-f24844616101_buggy.java b/tmp/9a99185e-6326-41f0-9a90-87fc2cbd2b1c_fixed.java
index a7549f0..399dd2c 100644
--- a/tmp/93041c26-54f3-47cb-9a44-f24844616101_buggy.java
+++ b/tmp/9a99185e-6326-41f0-9a90-87fc2cbd2b1c_fixed.java
@@ -1,50 +1,74 @@
     /**
      * Sets the values of Options using the values in <code>properties</code>.
      *
      * @param properties The value properties to be processed.
      */
     protected void processProperties(Properties properties)
     {
         if (properties == null)
         {
             return;
         }
 
         for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
         {
             String option = e.nextElement().toString();
 
+            // If the option has already been added to the command line, skip it.
+            // This prevents overwriting options explicitly provided on the command line.
             if (!cmd.hasOption(option))
             {
                 Option opt = getOptions().getOption(option);
 
+                // If the option retrieved from properties does not exist in the defined options, skip it.
+                if (opt == null) {
+                    continue;
+                }
+
                 // get the value from the properties instance
                 String value = properties.getProperty(option);
 
+                boolean addOption = false; // Flag to determine if the option should be added to the CommandLine
+
                 if (opt.hasArg())
                 {
+                    // If the option accepts an argument, add the value from properties.
+                    // The option is considered present in the CommandLine if it has an argument.
                     if (opt.getValues() == null || opt.getValues().length == 0)
                     {
                         try
                         {
                             opt.addValueForProcessing(value);
                         }
                         catch (RuntimeException exp)
                         {
-                            // if we cannot add the value don't worry about it
+                            // If we cannot add the value (e.g., due to type conversion),
+                            // the original code continued without breaking. The option itself
+                            // is still added to the CommandLine, just potentially without a valid value
+                            // or with a default if applicable.
                         }
                     }
+                    addOption = true; // For options with arguments, their mere presence (and an attempt to set a value) means they should be added.
                 }
-                else if (!("yes".equalsIgnoreCase(value)
+                else // Option does NOT have an argument (it's a flag option)
+                {
+                    // For flag options, add them to the CommandLine only if their property value
+                    // is "yes", "true", or "1" (case-insensitive).
+                    if ("yes".equalsIgnoreCase(value)
                         || "true".equalsIgnoreCase(value)
-                        || "1".equalsIgnoreCase(value)))
+                        || "1".equalsIgnoreCase(value))
                     {
-                    // if the value is not yes, true or 1 then don't add the
-                    // option to the CommandLine
-                    break;
+                        addOption = true;
+                    }
+                    // If the value is "false", "no", "0", or any other non-truthy value,
+                    // 'addOption' remains false, and the option will not be added to the CommandLine.
                 }
 
+                // Add the option to the CommandLine if the 'addOption' flag is true.
+                if (addOption)
+                {
                     cmd.addOption(opt);
                 }
             }
         }
+    }
\ No newline at end of file
