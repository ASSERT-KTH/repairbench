diff --git a/tmp/d5b7e97d-9457-453e-b268-2646566536cf_buggy.java b/tmp/32f160dd-3f2e-4e18-8c59-7b61d35bc91e_fixed.java
index fbd0884..48a9006 100644
--- a/tmp/d5b7e97d-9457-453e-b268-2646566536cf_buggy.java
+++ b/tmp/32f160dd-3f2e-4e18-8c59-7b61d35bc91e_fixed.java
@@ -1,23 +1,39 @@
     /**
      * Flip qd array if warranted.
      * @param n number of rows in the block
      * @param step within the array (1 for flipping all elements, 2 for flipping
      * only every other element)
      * @return true if qd array was flipped
      */
     private boolean flipIfWarranted(final int n, final int step) {
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
-            int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
+            // The goal is to reverse the order of 4-element blocks in the 'work' array.
+            // That is, swap block 0 with block (n-1), block 1 with block (n-2), and so on.
+            // The original implementation swapped work[i+k] with work[j-k], which
+            // caused elements within the blocks themselves to be reversed during the swap.
+            // This meant that if block A was [a, b, c, d] and block B was [p, q, r, s],
+            // after the swap the elements would be [s, r, q, p] and [d, c, b, a],
+            // instead of the expected [p, q, r, s] and [a, b, c, d].
+            // This bug only becomes apparent for certain configurations or matrix sizes,
+            // leading to incorrect eigenvalue calculations.
+
+            int j = 4 * n - 1; // j is the index of the last element in the last block
+            for (int i = 0; i < j; i += 4) { // i is the index of the first element in the current left block
+                // 'i' points to the start of the current block from the left (e.g., work[i], work[i+1]...)
+                // 'j' points to the end of the current block from the right (e.g., work[j], work[j-1]...)
+                // To swap block 'i' with block 'j', preserving their internal order,
+                // we need to swap work[i+k] with work[(start_of_right_block) + k].
+                // The start index of the block at 'j' is 'j - 3'.
+                int rightBlockStart = j - 3;
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    work[i + k] = work[rightBlockStart + k]; // Corrected index for the right block
+                    work[rightBlockStart + k] = tmp;          // Corrected index for the right block
                 }
-                j -= 4;
+                j -= 4; // Move 'j' to the end of the next block from the right
             }
             return true;
         }
         return false;
     }
\ No newline at end of file
