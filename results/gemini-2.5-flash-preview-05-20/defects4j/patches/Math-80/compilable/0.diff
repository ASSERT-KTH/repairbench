diff --git a/tmp/9823bf22-8637-47da-80a4-1bd00e12c118_buggy.java b/tmp/b218b935-ba66-4886-ad66-bee8ff8896ae_fixed.java
index fbd0884..2c91a4a 100644
--- a/tmp/9823bf22-8637-47da-80a4-1bd00e12c118_buggy.java
+++ b/tmp/b218b935-ba66-4886-ad66-bee8ff8896ae_fixed.java
@@ -1,23 +1,44 @@
     /**
      * Flip qd array if warranted.
      * @param n number of rows in the block
      * @param step within the array (1 for flipping all elements, 2 for flipping
      * only every other element)
      * @return true if qd array was flipped
      */
     private boolean flipIfWarranted(final int n, final int step) {
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
-            int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
+            // The 'work' array contains 'n' blocks of 4 elements each,
+            // representing parts of the QD (Quotient-Difference) array.
+            // Flipping means reversing the order of these 4-element blocks,
+            // e.g., B_0, B_1, ..., B_{n-1} becomes B_{n-1}, ..., B_1, B_0.
+            // The elements within each block should maintain their relative order.
+
+            // 'jBlockStart' is the starting index of the block at the right end
+            // that is currently being swapped with the block at 'i'.
+            int jBlockStart = 4 * (n - 1);
+
+            // 'i' iterates through the starting indices of the blocks from the left.
+            // 'jBlockStart' iterates through the starting indices of the blocks from the right.
+            // The loop continues as long as 'i' is less than 'jBlockStart',
+            // ensuring that blocks are swapped symmetrically from both ends
+            // until they meet or cross (for odd 'n', the middle block remains in place).
+            for (int i = 0; i < jBlockStart; i += 4) {
+                // 'k' iterates through the elements within a 4-element block.
+                // 'step' determines if all elements (step=1) or every other element (step=2)
+                // within the block are swapped.
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    // Swap work[i+k] (element k of the left block)
+                    // with work[jBlockStart+k] (element k of the right block).
+                    // This preserves the internal order of elements within the swapped blocks.
+                    work[i + k] = work[jBlockStart + k];
+                    work[jBlockStart + k] = tmp;
                 }
-                j -= 4;
+                // Move 'jBlockStart' inwards by one block size (4 elements).
+                jBlockStart -= 4;
             }
             return true;
         }
         return false;
     }
\ No newline at end of file
