diff --git a/tmp/1a30c01e-5f85-4063-b892-0117f10cb13d_buggy.java b/tmp/836db553-6370-459c-90ae-261cd9e32668_fixed.java
index fbd0884..7c838a7 100644
--- a/tmp/1a30c01e-5f85-4063-b892-0117f10cb13d_buggy.java
+++ b/tmp/836db553-6370-459c-90ae-261cd9e32668_fixed.java
@@ -1,23 +1,40 @@
     /**
      * Flip qd array if warranted.
      * @param n number of rows in the block
      * @param step within the array (1 for flipping all elements, 2 for flipping
      * only every other element)
      * @return true if qd array was flipped
      */
     private boolean flipIfWarranted(final int n, final int step) {
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
+                // The inner loop iterates through a 4-element chunk.
+                // The original issue was that work[i+k] and work[j-k] were swapped
+                // without checking if indices had crossed. This could lead to elements
+                // being swapped twice (back to their original positions).
+                // For example, if n=1, block size is 4. j=3. i=0.
+                // k=0: swap(work[0], work[3])
+                // k=1: swap(work[1], work[2])
+                // k=2: swap(work[2], work[1]) -- This undoes k=1 swap!
+                // k=3: swap(work[3], work[0]) -- This undoes k=0 swap!
+                // The fix is to ensure i+k < j-k.
                 for (int k = 0; k < 4; k += step) {
+                    if (i + k < j - k) { // Only swap if indices haven't met or crossed
                         final double tmp = work[i + k];
                         work[i + k] = work[j - k];
                         work[j - k] = tmp;
+                    } else {
+                        // Indices have met or crossed. No need to swap further
+                        // as it would either swap an element with itself or
+                        // undo a previous swap.
+                        break;
+                    }
                 }
                 j -= 4;
             }
             return true;
         }
         return false;
     }
\ No newline at end of file
