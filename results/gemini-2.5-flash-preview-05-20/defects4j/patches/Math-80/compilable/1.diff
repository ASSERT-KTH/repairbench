diff --git a/tmp/963aaa95-000a-47f4-b509-d12e7c71ab77_buggy.java b/tmp/5fcfe37c-d574-4653-9b22-3392ccf3ab62_fixed.java
index fbd0884..a0d56bf 100644
--- a/tmp/963aaa95-000a-47f4-b509-d12e7c71ab77_buggy.java
+++ b/tmp/5fcfe37c-d574-4653-9b22-3392ccf3ab62_fixed.java
@@ -1,23 +1,38 @@
     /**
      * Flip qd array if warranted.
      * @param n number of rows in the block
      * @param step within the array (1 for flipping all elements, 2 for flipping
      * only every other element)
      * @return true if qd array was flipped
      */
     private boolean flipIfWarranted(final int n, final int step) {
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
-            int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
+            // The original code attempted to reverse the entire work array element by element,
+            // but had an indexing flaw where elements could be swapped back (e.g., for n=1).
+            // A common "flip" in this context (e.g., for qd arrays in eigenvalue algorithms)
+            // means reversing the order of the 4-element blocks.
+            // For example, block 0 swaps with block (n-1), block 1 swaps with block (n-2), etc.
+
+            // Initialize pointers for the first and last blocks to be swapped
+            int leftBlockStartIndex = 0;
+            int rightBlockStartIndex = 4 * (n - 1);
+
+            // Iterate through pairs of blocks from the ends towards the middle
+            // 'p' represents the logical block index (0 to n/2 - 1)
+            for (int p = 0; p < n / 2; ++p) {
+                // Swap corresponding elements within the current left and right blocks
+                // The 'step' variable determines which elements inside the 4-element block are swapped.
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    final double tmp = work[leftBlockStartIndex + k];
+                    work[leftBlockStartIndex + k] = work[rightBlockStartIndex + k];
+                    work[rightBlockStartIndex + k] = tmp;
                 }
-                j -= 4;
+                // Move pointers to the next pair of blocks
+                leftBlockStartIndex += 4;
+                rightBlockStartIndex -= 4;
             }
             return true;
         }
         return false;
     }
\ No newline at end of file
