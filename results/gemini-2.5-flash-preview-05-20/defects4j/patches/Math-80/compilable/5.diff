diff --git a/tmp/ff7cf988-584e-452d-973f-252f26a06686_buggy.java b/tmp/55f9d502-253b-4c66-9fb9-6a746eed9949_fixed.java
index fbd0884..c7fc4c5 100644
--- a/tmp/ff7cf988-584e-452d-973f-252f26a06686_buggy.java
+++ b/tmp/55f9d502-253b-4c66-9fb9-6a746eed9949_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Flip qd array if warranted.
      * @param n number of rows in the block
      * @param step within the array (1 for flipping all elements, 2 for flipping
      * only every other element)
      * @return true if qd array was flipped
      */
     private boolean flipIfWarranted(final int n, final int step) {
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
-            int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+            // The original implementation was reversing the *elements* in the entire 4*n block.
+            // This is incorrect for a qd array, which is typically flipped by reordering *blocks* of 4 elements.
+            // Each block corresponds to a logical 'qd' element or set of related values.
+            final int blockSize = 4;
+            // Iterate through half the number of blocks to perform pairwise swaps
+            for (int i_block = 0; i_block < n / 2; ++i_block) {
+                // Calculate the starting index of the left block
+                int leftBlockStart = i_block * blockSize;
+                // Calculate the starting index of the corresponding block from the right end
+                int rightBlockStart = (n - 1 - i_block) * blockSize;
+
+                // Perform the swap for elements within the blocks, respecting the 'step' parameter
+                for (int k = 0; k < blockSize; k += step) {
+                    final double tmp = work[leftBlockStart + k];
+                    work[leftBlockStart + k] = work[rightBlockStart + k];
+                    work[rightBlockStart + k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
         return false;
     }
\ No newline at end of file
