diff --git a/tmp/5ad53b77-c8ca-4132-a04b-df368b8867fb_buggy.java b/tmp/c182824b-9099-45ba-90fb-efffc431e517_fixed.java
index fbd0884..eee787c 100644
--- a/tmp/5ad53b77-c8ca-4132-a04b-df368b8867fb_buggy.java
+++ b/tmp/c182824b-9099-45ba-90fb-efffc431e517_fixed.java
@@ -1,23 +1,33 @@
     /**
      * Flip qd array if warranted.
      * @param n number of rows in the block
      * @param step within the array (1 for flipping all elements, 2 for flipping
      * only every other element)
      * @return true if qd array was flipped
      */
     private boolean flipIfWarranted(final int n, final int step) {
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
-            int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
+            // The original loop structure was performing an element-wise reversal across the entire
+            // segment work[0] to work[4*n - 1].
+            // However, the 'work' array elements are grouped into blocks of 4 (qd array).
+            // A "flip" in this context typically means reversing the order of these blocks.
+            // So, block 'i' should swap with block 'j', preserving the internal order within the blocks.
+            //
+            // 'i' represents the starting index of the left-side block.
+            // 'j' should represent the starting index of the right-side block.
+            // Initially, the leftmost block starts at index 0.
+            // The rightmost block starts at index 4 * (n - 1).
+            int j = 4 * (n - 1); // j now represents the start index of the right-side block
+            for (int i = 0; i < j; i += 4) { // i iterates through blocks from the left
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    final double tmp = work[i + k];       // Element in the left block
+                    work[i + k] = work[j + k];            // Element in the right block
+                    work[j + k] = tmp;                    // Swap these elements
                 }
-                j -= 4;
+                j -= 4; // Move j to the start of the next block to the left
             }
             return true;
         }
         return false;
     }
\ No newline at end of file
