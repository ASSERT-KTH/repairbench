diff --git a/tmp/1f15e274-bfa4-4cab-b88a-cba4b5f39e45_buggy.java b/tmp/9ab82be7-4602-4bca-b69b-06fe1ed5f913_fixed.java
index 47915ed..33c6ba9 100644
--- a/tmp/1f15e274-bfa4-4cab-b88a-cba4b5f39e45_buggy.java
+++ b/tmp/9ab82be7-4602-4bca-b69b-06fe1ed5f913_fixed.java
@@ -1,22 +1,30 @@
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) {
         if (methodsGuru.isToString(invocation.getMethod())) {
             Object mock = invocation.getMock();
             MockName name = mockUtil.getMockName(mock);
             if (name.isDefault()) {
                 return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
             } else {
                 return name.toString();
             }
         } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
             // see issue 184.
-            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
-            //Only for compareTo() method by the Comparable interface
-            return 1;
+            // When a mock is compared to itself (same reference), compareTo() should return 0 to be consistent with equals() and hashCode().
+            // For different instances, it should return a non-zero value, as they are not the same.
+            // This ensures that collections like TreeSet behave as expected when adding the same mock instance multiple times.
+            Object mock = invocation.getMock();
+            Object argument = invocation.getArguments()[0]; // compareTo methods typically have one argument
+
+            if (mock == argument) {
+                return 0;
+            } else {
+                return 1; // Return 1 (any non-zero value) for different instances
+            }
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();
         return returnValueFor(returnType);
     }
\ No newline at end of file
