diff --git a/tmp/ebb17c0b-730b-4d3f-9f6e-e720b8878d61_buggy.java b/tmp/8bea94a5-9de3-4df9-ac71-a18691d36afc_fixed.java
index 47915ed..c814f4a 100644
--- a/tmp/ebb17c0b-730b-4d3f-9f6e-e720b8878d61_buggy.java
+++ b/tmp/8bea94a5-9de3-4df9-ac71-a18691d36afc_fixed.java
@@ -1,22 +1,28 @@
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) {
         if (methodsGuru.isToString(invocation.getMethod())) {
             Object mock = invocation.getMock();
             MockName name = mockUtil.getMockName(mock);
             if (name.isDefault()) {
                 return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
             } else {
                 return name.toString();
             }
         } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
             //see issue 184.
-            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
+            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same.
             //Only for compareTo() method by the Comparable interface
-            return 1;
+            // The argument to compareTo should be checked against the mock instance itself.
+            Object other = invocation.getArguments()[0];
+            if (other == invocation.getMock()) {
+                return 0; // Return 0 if the mock is compared to itself
+            } else {
+                return 1; // Otherwise, return 1 (or any non-zero value) indicating they are different.
+            }
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();
         return returnValueFor(returnType);
     }
\ No newline at end of file
