diff --git a/tmp/f4e3f455-286e-4ba8-859c-7cb75cbe5b1f_buggy.java b/tmp/51e79bf1-2f50-4d19-baaa-e86b546f973d_fixed.java
index 233a867..5979ae3 100644
--- a/tmp/f4e3f455-286e-4ba8-859c-7cb75cbe5b1f_buggy.java
+++ b/tmp/51e79bf1-2f50-4d19-baaa-e86b546f973d_fixed.java
@@ -1,73 +1,87 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
+   * 2) The function body itself must not contain side effects that
+   * could alter program behavior when inlined (e.g., modifying global state,
+   * making non-pure function calls, or modifying aliased properties/variables
+   * passed as arguments).
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
+    // Check for side effects in the function body that are not "pure"
+    // (i.e., they affect state outside the function's local scope or are
+    // non-pure function calls). This includes:
+    // - Calls to functions that have side effects (e.g., `modifiyX()` in testIssue1101a).
+    // - Assignments to non-local variables or properties (e.g., `x.prop = 2` in testIssue1101b).
+    // Inlining such functions directly can change the execution order or frequency of
+    // these side effects, leading to incorrect program behavior.
+    if (NodeUtil.containsNonPureSideEffects(block, compiler)) {
+      return CanInlineResult.NO;
+    }
 
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
 
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
