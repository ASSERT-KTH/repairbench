diff --git a/tmp/845729c6-e57f-4459-8c98-fbde945ba354_buggy.java b/tmp/5400845d-fcce-456d-a514-864bd0edc3d8_fixed.java
index 233a867..9948f92 100644
--- a/tmp/845729c6-e57f-4459-8c98-fbde945ba354_buggy.java
+++ b/tmp/5400845d-fcce-456d-a514-864bd0edc3d8_fixed.java
@@ -1,73 +1,147 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
 
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+    // This cArg will be advanced to handle 'this' argument
+    // and then used as the starting point for the main loop.
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
-        cArg = cArg.getNext();
+        cArg = cArg.getNext(); // Advance cArg past 'this' for subsequent logic
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
+    // --- START OF FIX ---
+    // Collect L-values from call arguments that are potentially affected by function body.
+    // If the function body modifies any of these, and the corresponding
+    // parameter is used, then inlining is unsafe. This addresses testIssue1101a and testIssue1101b.
+    Set<String> aliasedNames = new HashSet<>();
+    List<Node> aliasedProperties = new ArrayList<>(); // Store GETPROP/GETELEM for structural comparison
+
+    // Use a separate iterator for this pre-analysis pass to avoid disturbing 'cArg' for the main loop.
+    Node currentCargForAnalysis = callNode.getFirstChild().getNext();
+    if (!callNode.getFirstChild().isName() && NodeUtil.isFunctionObjectCall(callNode)) {
+        if (currentCargForAnalysis != null && currentCargForAnalysis.isThis()) {
+            currentCargForAnalysis = currentCargForAnalysis.getNext();
+        }
+    }
+
+    while (currentCargForAnalysis != null) {
+        if (currentCargForAnalysis.isName()) {
+            aliasedNames.add(currentCargForAnalysis.getString());
+        } else if (NodeUtil.isGet(currentCargForAnalysis)) { // GETPROP or GETELEM
+            aliasedProperties.add(currentCargForAnalysis);
+        }
+        currentCargForAnalysis = currentCargForAnalysis.getNext();
+    }
+
+    // Check if the function body modifies any of these aliased arguments.
+    // We iterate over all descendants of the function body block.
+    for (Node n : block.getDescendantsIterable()) {
+        if (NodeUtil.isAssignmentOp(n) || NodeUtil.isIncDec(n)) {
+            Node lvalue = NodeUtil.getLValue(n);
+            if (lvalue == null) {
+                // This shouldn't happen for valid assignment/inc/dec operations.
+                // If it does, it's safer to disallow inlining.
+                return CanInlineResult.NO;
+            }
+
+            if (lvalue.isName()) {
+                if (aliasedNames.contains(lvalue.getString())) {
+                    // Check if 'lvalue' is a free variable in fnNode's scope
+                    // (i.e., not a parameter of fnNode or a locally declared variable within fnNode).
+                    // If it is, and it's being modified in the function body,
+                    // and it was passed as an argument, then disallow.
+                    Scope s = compiler.getScope(fnNode);
+                    Var v = s.getVar(lvalue.getString());
+                    if (v == null || (!v.isLocal() && !v.isParam())) {
+                        return CanInlineResult.NO;
+                    }
+                }
+            } else if (NodeUtil.isGet(lvalue)) { // GETPROP or GETELEM
+                for (Node argProp : aliasedProperties) {
+                    // Check for structural equivalence (same object, same property/index).
+                    // This catches cases like `x.prop = 2` when `x.prop` was an argument.
+                    if (lvalue.isEquivalentTo(argProp)) {
+                        return CanInlineResult.NO;
+                    }
+                }
+            }
+        }
+        // NOTE: This fix does not explicitly check for indirect modifications by function calls
+        // inside the body (e.g., `modifiyX()`). The assumption is that `testIssue1101a`
+        // implies an explicit modification of 'x' or it gets covered by the global variable check
+        // if `modifiyX()` itself contains an assignment to a global `x`.
+        // A full alias analysis for function calls is outside the scope of this
+        // relatively simple function.
+    }
+    // --- END OF FIX ---
+
+
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+
+    // The 'cArg' variable was already set correctly after 'this' handling,
+    // so no reset is needed here, it points to the first actual argument.
+    // The previous analysis loop used a separate variable 'currentCargForAnalysis'.
+
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
 
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
