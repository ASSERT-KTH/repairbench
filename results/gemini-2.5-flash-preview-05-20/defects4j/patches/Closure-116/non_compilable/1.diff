diff --git a/tmp/160988ac-90af-40ff-9e36-d5575dd8ece7_buggy.java b/tmp/c330116a-2c98-489d-b0b3-0b2e490f0f6f_fixed.java
index 233a867..ddc8a06 100644
--- a/tmp/160988ac-90af-40ff-9e36-d5575dd8ece7_buggy.java
+++ b/tmp/c330116a-2c98-489d-b0b3-0b2e490f0f6f_fixed.java
@@ -1,73 +1,85 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
 
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
+      if (fnParam != null) { // There's a formal parameter
+        if (cArg != null) { // There's a corresponding argument
 
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+
+          // If the argument refers to a variable or property that is modified
+          // by side effects within the function body, then inlining might
+          // change the argument's value after the modification, whereas the
+          // original parameter captures the value at the time of the call.
+          // This is a semantic change.
+          // The 'is.Call' argument is true for normal function calls, false for .call/.apply.
+          if (mayChangeReferencedValue(
+              fnNode, callNode.getFirstChild(), cArg, fnParam,
+              !(NodeUtil.isFunctionObjectCall(callNode) || NodeUtil.isFunctionObjectApply(callNode)))) {
+            return CanInlineResult.NO;
+          }
         }
 
-        // Move to the next name.
+        // Move to the next parameter.
         fnParam = fnParam.getNext();
       }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+      // Move to the next call argument, if it exists.
+      // Arguments that do not map to a formal parameter (extra arguments)
+      // or arguments whose formal parameters have been processed
+      // are advanced here. Their side effects, if any, are generally
+      // handled by the inliner correctly by preserving evaluation order.
       if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
-          return CanInlineResult.NO;
-        }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
