diff --git a/tmp/582cb873-626d-44c3-ab6e-0322f7766e98_buggy.java b/tmp/8322af9a-cea3-4a7b-a7e3-2dd0c6492df9_fixed.java
index 233a867..ad6b38d 100644
--- a/tmp/582cb873-626d-44c3-ab6e-0322f7766e98_buggy.java
+++ b/tmp/8322af9a-cea3-4a7b-a7e3-2dd0c6492df9_fixed.java
@@ -1,73 +1,97 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
+   *
+   * 2) If a call's argument is a mutable L-value (a name, property access, or
+   * element access), and the function body contains side effects that could
+   * modify this L-value, the function cannot be inlined if the L-value is
+   * referenced within the function body after the modification.
+   * For instance, this will not be inlined:
+   * <pre>
+   *     function foo(a) { return modifiyX() + a; } // modifiyX() modifies x
+   *     x = foo(x);
+   * </pre>
+   * or:
+   * <pre>
+   *     function foo(a) { x.prop = 2; return a; }
+   *     x = foo(x.prop);
+   * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
 
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
+        // TODO(johnleno): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
 
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+
+          // Check for mutable L-value arguments that are modified by the function body.
+          // If cArg is a name, GETPROP or GETELEM, it's an L-value.
+          // If the function body (block) modifies this L-value, inlining is unsafe
+          // because the value of the inlined argument might change within the inlined block.
+          if ((cArg.isName() || cArg.isGetProp() || cArg.isGetElem())
+              && NodeUtil.canBeModified(cArg, block)) {
+            return CanInlineResult.NO;
+          }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
