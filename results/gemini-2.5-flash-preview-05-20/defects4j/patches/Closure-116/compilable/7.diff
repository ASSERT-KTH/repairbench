diff --git a/tmp/a3214530-437a-40d6-9ffe-9a7721ad24c0_buggy.java b/tmp/ac827cdd-6d56-4106-b975-e4f7563a78e8_fixed.java
index 233a867..7b1face 100644
--- a/tmp/a3214530-437a-40d6-9ffe-9a7721ad24c0_buggy.java
+++ b/tmp/ac827cdd-6d56-4106-b975-e4f7563a78e8_fixed.java
@@ -1,73 +1,90 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
 
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
 
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
+
+        // NEW CHECK: If the function body contains side effects that could
+        // affect mutable state (e.g., assignments to global variables,
+        // or function calls that modify state), and the argument itself
+        // is a reference to a mutable location (NAME, GETPROP, GETELEM),
+        // then inlining might change the evaluation order or behavior.
+        // This covers cases where an argument like 'x.prop' is read, but
+        // the function body contains a side effect like 'x.prop = 2',
+        // leading to a read-after-write vs. write-after-read conflict.
+        // It also covers cases where a global variable passed as an argument
+        // might be indirectly modified by a function call within the body.
+        if (NodeUtil.mayEffectMutableState(block, compiler)) {
+            if (cArg.isName() || cArg.isGetProp() || cArg.isGetElem()) {
+                 return CanInlineResult.NO;
+            }
+        }
+
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
