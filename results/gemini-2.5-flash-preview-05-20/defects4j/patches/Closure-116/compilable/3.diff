diff --git a/tmp/4c878d85-a8fa-458f-8c43-ea23a0db270f_buggy.java b/tmp/1110c61e-aa5b-4231-9b4d-3a249ee0d448_fixed.java
index 233a867..47de986 100644
--- a/tmp/4c878d85-a8fa-458f-8c43-ea23a0db270f_buggy.java
+++ b/tmp/1110c61e-aa5b-4231-9b4d-3a249ee0d448_fixed.java
@@ -1,73 +1,78 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
 
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+      if (cArg != null) { // We have a call argument
+        boolean argHasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);
+
+        if (fnParam != null) { // We have a corresponding function parameter
+          int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());
+          if (argHasSideEffects) {
+            // Rule 1: If argument has side effects, parameter must be referenced exactly once.
+            if (refCount != 1) {
+              return CanInlineResult.NO;
+            }
+          }
+          // If arg has no side effects, or refCount == 1, continue.
+        } else { // No corresponding function parameter (extra argument passed)
+          if (argHasSideEffects) {
+            // Rule: If extra argument has side effects, and is not consumed by a parameter,
+            // then its side effects would be lost (or changed in evaluation context) if inlined.
+            return CanInlineResult.NO;
+          }
+          // If extra argument has no side effects, it's fine (it's simply ignored).
+        }
+        // Move to the next call argument.
+        cArg = cArg.getNext();
+      } else { // cArg is null, but fnParam is not (too many function parameters for arguments provided).
+        // This is generally fine. The parameter will either be undefined or take a default value.
+        // No side effect concern for missing arguments here.
+      }
+
+      // Move to the next function parameter.
       if (fnParam != null) {
-        if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
-
-        // Move to the next name.
         fnParam = fnParam.getNext();
       }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
-          return CanInlineResult.NO;
-        }
-        cArg = cArg.getNext();
-      }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
