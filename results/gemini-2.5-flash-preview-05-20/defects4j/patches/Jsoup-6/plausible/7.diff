diff --git a/tmp/ec28ab6e-2cc1-4894-a7ed-ffc945cc9681_buggy.java b/tmp/2552f54f-f1f2-41b5-9e00-53d595a17f7f_fixed.java
index 99141e0..10aba54 100644
--- a/tmp/ec28ab6e-2cc1-4894-a7ed-ffc945cc9681_buggy.java
+++ b/tmp/2552f54f-f1f2-41b5-9e00-53d595a17f7f_fixed.java
@@ -1,33 +1,52 @@
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // Pattern for HTML entities: &#ddd; &#xhhh; &name;
+        // Group 1: entity name (e.g., "amp") or numerical part (e.g., "#123" or "#xABC")
+        // Group 2: "x" or "X" for hexadecimal
+        // Group 3: numerical value (e.g., "123" or "ABC")
+        // Note: unescapePattern is expected to be a pre-compiled Pattern object,
+        // typically defined as: Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+        Matcher m = unescapePattern.matcher(string); 
+        StringBuffer accum = new StringBuffer(string.length()); 
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
+            String num = m.group(3); // numerical entity value (e.g., "123" or "ABC")
             if (num != null) {
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                    int base = m.group(2) != null ? 16 : 10; // Group 2 captures 'x' or 'X' for hex
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
+                    // If parsing fails, charval remains -1, and the original entity will be kept.
+                } 
             } else {
-                String name = m.group(1);
+                String name = m.group(1); // named entity (e.g., "amp")
+                // 'full' is expected to be a Map<String, Integer> containing known HTML entities.
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            if (charval != -1) { // A valid character value was successfully parsed
+                String c;
+                if (charval > 0xFFFF) { // Handle supplementary characters (Unicode code points > U+FFFF)
+                    // These require surrogate pairs, Character.toString((char) charval) would truncate.
+                    c = new String(Character.toChars(charval));
+                } else { // Basic multilingual plane characters
+                    c = Character.toString((char) charval);
+                }
+                // Matcher.appendReplacement treats '\' and '$' as special characters.
+                // To insert them literally, they must be quoted using Matcher.quoteReplacement.
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
             } else { 
-                m.appendReplacement(accum, m.group(0));
+                // Charval is -1, meaning the entity was not recognized or invalid (e.g., &unknown;).
+                // In this case, keep the original entity string.
+                // It's also good practice to quote m.group(0) in case the matched entity string
+                // itself contains characters that are special to appendReplacement (unlikely for entities).
+                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
             }
         }
-        m.appendTail(accum);
+        m.appendTail(accum); // Append any remaining part of the string after the last match
         return accum.toString();
     }
\ No newline at end of file
