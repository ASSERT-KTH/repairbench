diff --git a/tmp/b888508b-3e2c-45a6-b5dc-ff0c66b0ef69_buggy.java b/tmp/6dd92425-8e65-41f6-8257-775b48ead97f_fixed.java
index 99141e0..dbdce93 100644
--- a/tmp/b888508b-3e2c-45a6-b5dc-ff0c66b0ef69_buggy.java
+++ b/tmp/6dd92425-8e65-41f6-8257-775b48ead97f_fixed.java
@@ -1,33 +1,49 @@
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
         Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
         StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
         // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
         while (m.find()) {
             int charval = -1;
             String num = m.group(3);
             if (num != null) {
                 try {
                     int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
                 } // skip
             } else {
                 String name = m.group(1);
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+            // The original code had a problematic condition: "if (charval != -1 || charval > 0xFFFF)".
+            // The comment "// out of range" implied that `charval > 0xFFFF` should not be unescaped directly
+            // using `(char) charval` as it truncates supplementary characters.
+            // Additionally, `Matcher.appendReplacement` throws IllegalArgumentException if the replacement
+            // string contains '$' or '\' without being quoted.
+
+            // Fix 1: Ensure replacement string is quoted using Matcher.quoteReplacement().
+            // Fix 2: Clarify handling of charval based on validity and BMP range.
+            // If charval is valid and within the Basic Multilingual Plane (BMP), unescape it.
+            // Otherwise (if invalid or outside BMP), append the original matched sequence.
+            if (charval != -1 && charval <= 0xFFFF) {
                 String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // charval is either -1 (invalid entity) or > 0xFFFF (supplementary character).
+                // In these cases, we append the original matched string as is,
+                // implying that this unescape method doesn't fully handle
+                // supplementary characters or invalid entities, or that the original entity
+                // itself should be preserved.
+                // It's safe to quote m.group(0) defensively, though not strictly necessary for this pattern.
+                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
\ No newline at end of file
