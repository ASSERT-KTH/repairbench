diff --git a/tmp/a41b4c5c-e785-4520-979d-09c763cbb8c6_buggy.java b/tmp/5fb7a79e-3066-44bc-aecd-651f759a4499_fixed.java
index 99141e0..a120d55 100644
--- a/tmp/a41b4c5c-e785-4520-979d-09c763cbb8c6_buggy.java
+++ b/tmp/5fb7a79e-3066-44bc-aecd-651f759a4499_fixed.java
@@ -1,33 +1,43 @@
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
         Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
         StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
         // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
         while (m.find()) {
             int charval = -1;
             String num = m.group(3);
             if (num != null) {
                 try {
                     int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
                 } // skip
             } else {
                 String name = m.group(1);
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+            // Unescape only if charval is a recognized entity AND its character value
+            // is within the Basic Multilingual Plane (0-0xFFFF).
+            // Entities that are unrecognized (charval == -1) or represent characters
+            // outside the BMP (charval > 0xFFFF) are left as their original string form.
+            // This behavior is consistent with the likely intent given the original `charval > 0xFFFF`
+            // condition and `Character.toString((char) charval)` usage.
+            if (charval != -1 && charval <= 0xFFFF) {
                 String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+                // The replacement string 'c' might contain special regex characters ($ or \).
+                // Matcher.appendReplacement expects these to be quoted if they are literal characters.
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
             } else {
+                // If entity is not recognized (charval == -1) or out of BMP range (charval > 0xFFFF),
+                // append the original matched string without unescaping.
                 m.appendReplacement(accum, m.group(0));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
\ No newline at end of file
