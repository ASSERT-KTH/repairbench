diff --git a/tmp/46718d9e-1d3b-4ef0-a7ad-972fada91308_buggy.java b/tmp/4fa3775d-7998-47de-9a74-afa8a714d0ff_fixed.java
index 99141e0..500d487 100644
--- a/tmp/46718d9e-1d3b-4ef0-a7ad-972fada91308_buggy.java
+++ b/tmp/4fa3775d-7998-47de-9a74-afa8a714d0ff_fixed.java
@@ -1,33 +1,49 @@
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // Assuming unescapePattern and full are accessible (e.g., static fields in the same class)
+        // unescapePattern regex: &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
+        Matcher m = unescapePattern.matcher(string);
+        StringBuffer accum = new StringBuffer(string.length()); 
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
+            String num = m.group(3); // Captured numeric value for numeric entities (e.g., "92" from "&#92;")
             if (num != null) {
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                    // group(2) captures 'x' or 'X' indicating a hexadecimal entity
+                    int base = m.group(2) != null ? 16 : 10; 
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
+                    // If the number is malformed, charval remains -1, causing the original entity to be preserved.
+                }
             } else {
-                String name = m.group(1);
+                String name = m.group(1); // Captured name for named entities (e.g., "amp" from "&amp;")
+                // 'full' is presumed to be a Map<String, Integer> containing entity name to charval mappings
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            // Check if charval is a valid Unicode code point.
+            // If charval is -1 (not found/parsed) or not a valid Unicode code point,
+            // then the original matched entity string should be kept.
+            if (charval != -1 && Character.isValidCodePoint(charval)) {
+                // Convert the integer charval to a String.
+                // Character.toChars() handles all Unicode code points, including those outside the Basic Multilingual Plane (BMP),
+                // by returning a char array (e.g., surrogate pairs).
+                String c = String.valueOf(Character.toChars(charval));
+                
+                // Use Matcher.quoteReplacement to treat backslashes (\) and dollar signs ($) in the
+                // replacement string literally. This prevents IllegalArgumentException if 'c' contains them.
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // If charval is invalid or not found, append the original matched entity string (m.group(0)).
+                // Also quote this replacement to handle cases where the original entity text
+                // might contain special regex characters (though less common for entities).
+                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
\ No newline at end of file
