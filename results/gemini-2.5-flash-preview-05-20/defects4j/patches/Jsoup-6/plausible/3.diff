diff --git a/tmp/846b67f5-8022-4a21-bbce-2e7669b111c9_buggy.java b/tmp/db7b71d4-bcc7-4b80-ae7c-2d931871671d_fixed.java
index 99141e0..4f0f368 100644
--- a/tmp/846b67f5-8022-4a21-bbce-2e7669b111c9_buggy.java
+++ b/tmp/db7b71d4-bcc7-4b80-ae7c-2d931871671d_fixed.java
@@ -1,33 +1,59 @@
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // unescapePattern and full (Map for named entities) are assumed to be static fields.
+        Matcher m = unescapePattern.matcher(string);
+        StringBuffer accum = new StringBuffer(string.length());
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
+            String num = m.group(3); // Numeric entity value (e.g., "92" for &#92;)
             if (num != null) {
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator (e.g., 'x' in &#x5C;)
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
+                    // charval remains -1, effectively skipping this entity conversion
+                }
             } else {
-                String name = m.group(1);
+                String name = m.group(1); // Named entity (e.g., "amp" for &amp;)
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            String replacement;
+            // Determine the actual character(s) to replace the entity with
+            if (charval != -1) { // An entity was successfully parsed to a number or found in map
+                // Check if it's a valid Unicode code point (0 to 0x10FFFF)
+                if (charval >= Character.MIN_CODE_POINT && charval <= Character.MAX_CODE_POINT) {
+                    // HTML character references should not resolve to surrogate code points (0xD800-0xDFFF)
+                    if (charval < 0xD800 || charval > 0xDFFF) {
+                        if (charval <= 0xFFFF) { // Basic Multilingual Plane (BMP) character
+                            replacement = Character.toString((char) charval);
+                        } else { // Supplementary character (outside BMP, requires two char units)
+                            replacement = new String(Character.toChars(charval));
+                        }
+                    } else {
+                        // It's a surrogate code point (e.g., &#xD800;). HTML entities for these are generally invalid.
+                        // So, keep the original entity string as the replacement.
+                        replacement = m.group(0);
+                    }
+                } else {
+                    // The 'charval' parsed is outside the valid Unicode code point range (e.g., negative, or > 0x10FFFF).
+                    // Keep the original entity string as the replacement.
+                    replacement = m.group(0);
+                }
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // The entity was not resolved (e.g., &unknown; or a numeric entity with bad format).
+                // Keep the original entity string as the replacement.
+                replacement = m.group(0);
             }
+
+            // All replacement strings must be quoted for appendReplacement,
+            // as they may contain '\' or '$' characters which have special meaning in regex replacements.
+            m.appendReplacement(accum, Matcher.quoteReplacement(replacement));
         }
         m.appendTail(accum);
         return accum.toString();
     }
\ No newline at end of file
