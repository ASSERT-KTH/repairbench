diff --git a/tmp/1275c038-edbe-4747-87aa-55405d8a95d4_buggy.java b/tmp/aed4d3dc-bc7a-42b6-9362-ae81f08c328c_fixed.java
index 99141e0..83c3f25 100644
--- a/tmp/1275c038-edbe-4747-87aa-55405d8a95d4_buggy.java
+++ b/tmp/aed4d3dc-bc7a-42b6-9362-ae81f08c328c_fixed.java
@@ -1,33 +1,68 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+class Entities { // Assuming Entities class is relevant for constants
+    // These static fields are assumed to be present in the original context.
+    // full and unescapePattern are likely initialized elsewhere in the class.
+    // For example:
+    private static final Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+    private static final java.util.HashMap<String, Integer> full = new java.util.HashMap<>();
+    static {
+        // Populate 'full' map with HTML entities, e.g.,
+        // full.put("amp", 38);
+        // full.put("lt", 60);
+        // full.put("gt", 62);
+        // full.put("quot", 34);
+        // full.put("apos", 39);
+        // full.put("dollar", 36); // for &#36;
+        // full.put("bsol", 92);   // for &#92;
+        // The actual map population is external to this function.
+    }
+
+
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
         Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
         StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
         // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
         while (m.find()) {
             int charval = -1;
             String num = m.group(3);
             if (num != null) {
                 try {
                     int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
                 } // skip
             } else {
                 String name = m.group(1);
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            // The original condition `charval != -1 || charval > 0xFFFF` is redundant
+            // because `charval > 0xFFFF` implies `charval != -1`.
+            // If `charval` is -1 (entity not found or invalid), it should fall to the else block.
+            // If `charval` is a valid code point (0 to 0x10FFFF), it should be unescaped.
+            if (charval != -1) {
+                // Character.toString((char) charval) truncates code points > 0xFFFF.
+                // Character.toChars handles supplementary code points (U+10000 to U+10FFFF)
+                // by returning a char array for surrogate pairs.
+                // new String(char[]) then creates the correct string.
+                // Matcher.appendReplacement requires special characters like '\' and '$' to be escaped.
+                // Matcher.quoteReplacement handles this correctly.
+                String c = new String(Character.toChars(charval));
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
             } else {
+                // If charval is -1 (entity not recognized or parse error),
+                // revert to the original matched string.
                 m.appendReplacement(accum, m.group(0));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
+}
\ No newline at end of file
