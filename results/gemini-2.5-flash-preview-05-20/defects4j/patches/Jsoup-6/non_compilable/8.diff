diff --git a/tmp/08120f38-bad2-4644-9e57-9165eef9ddcc_buggy.java b/tmp/2c211675-2cf6-4210-9120-078a16f4e392_fixed.java
index 99141e0..92be804 100644
--- a/tmp/08120f38-bad2-4644-9e57-9165eef9ddcc_buggy.java
+++ b/tmp/2c211675-2cf6-4210-9120-078a16f4e392_fixed.java
@@ -1,33 +1,49 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+// Assuming unescapePattern and full map are available in the class scope.
+// For example:
+// private static final Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+// private static final java.util.Map<String, Integer> full = new java.util.HashMap<>();
+
+// This class definition is for context, only the unescape function is requested.
+// public class Entities {
+//    private static final Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+//    private static final java.util.Map<String, Integer> full = new java.util.HashMap<>();
+//
+//    // ... static initializer for 'full' map
+// }
+
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
         Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        StringBuffer accum = new StringBuffer(string.length()); 
 
         while (m.find()) {
             int charval = -1;
             String num = m.group(3);
             if (num != null) {
                 try {
                     int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
                 } // skip
             } else {
                 String name = m.group(1);
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
             if (charval != -1 || charval > 0xFFFF) { // out of range
                 String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+                // Fix: Properly escape the replacement string to prevent IllegalArgumentException
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // Fix: Also quote the original matched string for robustness, though less likely to be the direct cause
+                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
