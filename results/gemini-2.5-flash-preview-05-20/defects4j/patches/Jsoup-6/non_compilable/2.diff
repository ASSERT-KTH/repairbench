diff --git a/tmp/d8e9231e-1510-4f3a-85f7-f9c490e84b51_buggy.java b/tmp/1e29f7fa-f769-47ad-b8fd-f4fef987a5dc_fixed.java
index 99141e0..d92863b 100644
--- a/tmp/d8e9231e-1510-4f3a-85f7-f9c490e84b51_buggy.java
+++ b/tmp/1e29f7fa-f769-47ad-b8fd-f4fef987a5dc_fixed.java
@@ -1,33 +1,51 @@
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        // unescapePattern is a static field, likely defined as:
+        // private static final Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+        Matcher m = unescapePattern.matcher(string);
+        StringBuffer accum = new StringBuffer(string.length()); 
 
         while (m.find()) {
             int charval = -1;
             String num = m.group(3);
-            if (num != null) {
+            if (num != null) { // numeric entity
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                    int base = m.group(2) != null ? 16 : 10; // group 2 is hex indicator 'x' or 'X'
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
-            } else {
+                } // skip if number format is bad
+            } else { // named entity
                 String name = m.group(1);
+                // full is a static map, likely `java.util.Map<String, Integer> full;`
+                // containing HTML entity name to code point mappings.
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            // If a valid character value was found from a numeric or named entity
+            if (charval != -1) {
+                String c;
+                // HTML5 spec: handle invalid code points by replacing with U+FFFD (REPLACEMENT CHARACTER)
+                // Invalid code points include surrogate range (U+D800 to U+DFFF) and
+                // code points beyond the maximum Unicode value (U+10FFFF).
+                if ((charval >= 0xD800 && charval <= 0xDFFF) || // Surrogate code points
+                    charval > 0x10FFFF) { // Code points outside valid Unicode range
+                    c = Character.toString(0xFFFD); // U+FFFD REPLACEMENT CHARACTER
                 } else {
+                    // Correctly convert int code point to String, handles supplementary characters
+                    c = Character.toString(charval); 
+                }
+                // Fix: Matcher.appendReplacement requires the replacement string to be quoted
+                // if it contains special regex characters like '\' or '$'.
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
+            } else {
+                // charval == -1 means no valid entity was found or conversion failed.
+                // In this case, preserve the original matched string (e.g., "&#bad;").
                 m.appendReplacement(accum, m.group(0));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
\ No newline at end of file
