diff --git a/tmp/cf707c0e-281c-42f7-bb8a-9982d4816811_buggy.java b/tmp/d40e8b54-02d5-4430-8cef-c4e35ece09a6_fixed.java
index 99141e0..de8371b 100644
--- a/tmp/cf707c0e-281c-42f7-bb8a-9982d4816811_buggy.java
+++ b/tmp/d40e8b54-02d5-4430-8cef-c4e35ece09a6_fixed.java
@@ -1,33 +1,47 @@
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
         Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
         StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
         // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
         while (m.find()) {
             int charval = -1;
-            String num = m.group(3);
+            String num = m.group(3); // numerical entity: #decimal or #xhex
             if (num != null) {
                 try {
                     int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
-            } else {
+                } // charval remains -1
+            } else { // named entity
                 String name = m.group(1);
+                // The 'full' map stores Character objects, which are 16-bit BMP characters.
+                // Numeric entities can represent characters beyond the BMP.
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            // Check if charval is a valid Unicode code point and not -1 (indicating failure to parse/find)
+            if (charval != -1 && Character.isValidCodePoint(charval)) {
+                // Character.toString(int) correctly handles both BMP and supplementary characters,
+                // returning a String of 1 or 2 chars as needed.
+                String c = Character.toString(charval); 
+                // It is crucial to use Matcher.quoteReplacement() for the replacement string.
+                // This method escapes literal backslashes (\) and dollar signs ($) in the
+                // replacement string to prevent them from being interpreted as special regex
+                // syntax (e.g., back-references or group references), which could lead to
+                // IllegalArgumentException.
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // If charval is -1 (entity not found or parse error) or an invalid Unicode code point,
+                // retain the original entity string as found in the input.
+                // We must also quote m.group(0) because appendReplacement interprets its argument as a replacement string,
+                // meaning if the original entity contained '\' or '$', it would cause the same error.
+                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
\ No newline at end of file
