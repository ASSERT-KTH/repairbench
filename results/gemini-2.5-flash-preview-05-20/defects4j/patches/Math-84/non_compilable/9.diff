diff --git a/tmp/365a71ba-83d7-40b3-8e37-5bf8426db577_buggy.java b/tmp/d69cbc13-e357-4083-8c44-b34173133abd_fixed.java
index 5f1dcf2..b28e13f 100644
--- a/tmp/365a71ba-83d7-40b3-8e37-5bf8426db577_buggy.java
+++ b/tmp/d69cbc13-e357-4083-8c44-b34173133abd_fixed.java
@@ -1,41 +1,73 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        // The outer optimize method handles the iteration loop and convergence check.
+        // This method should perform one single step of the MultiDirectional algorithm.
 
         incrementIterationsCounter();
 
-            // save the original vertex
+        // save the original vertex to use as a base for calculations
+        // 'simplex' is a member variable, and it's assumed to be sorted (best point at index 0)
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
+        // evaluateNewSimplex is assumed to calculate a new point and,
+        // if it improves the worst point in 'this.simplex', replaces it and re-sorts 'this.simplex'.
+        // It then returns the new point.
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
+        // After reflection, 'this.simplex' might have been updated.
+        // Check if the reflected point is better than the original best point.
         if (comparator.compare(reflected, best) < 0) {
+            // Reflection was very good, try expansion.
+            // Save the state of the simplex after reflection, as expansion might fail.
+            final RealPointValuePair[] simplexAfterReflection = simplex;
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
-                return;
+            // Compute the expanded simplex from the *current* (potentially reflected) simplex state.
+            // The original code passed 'original' here, which was incorrect for expansion.
+            final RealPointValuePair expanded = evaluateNewSimplex(simplexAfterReflection, khi, comparator);
 
+            // If expanded point is not better than reflected point (or equal), revert to reflected simplex.
+            // If expanded is truly better, 'this.simplex' already holds the expanded state.
+            if (comparator.compare(expanded, reflected) >= 0) {
+                // Expanded was not an improvement over reflected, so stick with the reflected simplex state.
+                simplex = simplexAfterReflection;
             }
+            // No return here, continue to the end of the iteration.
 
-            // compute the contracted simplex
+        } else {
+            // Reflected point was not better than the original best point. Try contraction.
+            // Contraction should be based on the original simplex state.
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
 
-            // check convergence
-                return;
-            }
+            // If contracted point is not better than the original best point, perform a shrink operation.
+            // 'simplex' is potentially updated by 'contracted' if it was good enough to replace the worst point.
+            if (comparator.compare(contracted, best) >= 0) {
+                // Neither reflection nor contraction improved the best point.
+                // Perform a shrink operation. This is crucial to prevent getting stuck.
+                // The shrink factor (sigma) is typically 0.5. Assuming it's a member variable or constant.
+                // For MultiDirectional, it shrinks all points (except the best) towards the best.
+                final double sigma = 0.5; // Assuming sigma is a defined constant or member.
+                final RealPointValuePair currentBest = simplex[0]; // The best point in the current simplex
 
+                for (int i = 1; i < simplex.length; ++i) {
+                    final double[] newPointCoords = new double[currentBest.getPoint().length];
+                    for (int j = 0; j < newPointCoords.length; ++j) {
+                        // Calculate new coordinate: best_coord + sigma * (current_coord - best_coord)
+                        newPointCoords[j] = currentBest.getPoint()[j] +
+                                            sigma * (original[i].getPoint()[j] - currentBest.getPoint()[j]);
                     }
-
+                    // Evaluate the new point and replace it in the simplex.
+                    // This creates a new RealPointValuePair and re-evaluates its value.
+                    simplex[i] = new RealPointValuePair(newPointCoords, evaluate(newPointCoords));
+                }
+                // After shrinking all points, the simplex must be re-sorted.
+                sort(simplex, comparator);
+            }
+        }
+        // End of one iteration. The outer optimize method will now check for convergence
+        // or maximum iterations.
     }
\ No newline at end of file
