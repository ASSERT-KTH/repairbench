diff --git a/tmp/31f253fe-0812-4858-b284-ada82464bb01_buggy.java b/tmp/3d939e48-0227-4ed5-bf3b-ad16f798413e_fixed.java
index 5f1dcf2..7e92ac1 100644
--- a/tmp/31f253fe-0812-4858-b284-ada82464bb01_buggy.java
+++ b/tmp/3d939e48-0227-4ed5-bf3b-ad16f798413e_fixed.java
@@ -1,41 +1,66 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (true) { // Loop until convergence or max iterations/evaluations
 
             incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+            // Save the simplex state before this iteration for convergence check.
+            // The convergence checker compares the simplex from the previous iteration
+            // with the simplex from the current iteration.
+            final RealPointValuePair[] previousSimplex = simplex;
+
+            // save the original vertex state from the start of the iteration
+            // (before any step modifies `this.simplex`)
+            final RealPointValuePair[] originalSimplexState = simplex;
+            final RealPointValuePair best = originalSimplexState[0];
 
             // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
+            // `evaluateNewSimplex` modifies `this.simplex` in place by creating a new array.
+            final RealPointValuePair reflected = evaluateNewSimplex(originalSimplexState, 1.0, comparator);
+
+            if (comparator.compare(reflected, best) < 0) { // Reflected point is better than the original best.
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                // Store the current (reflected) simplex state in case we need to revert.
+                final RealPointValuePair[] simplexAfterReflection = simplex;
+                // Evaluate expansion based on the *original* simplex (originalSimplexState)
+                final RealPointValuePair expanded = evaluateNewSimplex(originalSimplexState, khi, comparator);
+
+                if (comparator.compare(expanded, reflected) < 0) { // Expanded point is better than reflected.
+                    // Accept the expanded simplex. `this.simplex` is already updated to `expanded` state.
+                    // No action needed.
+                } else {
+                    // Accept the reflected simplex (expanded was not better).
+                    this.simplex = simplexAfterReflection; // Revert `this.simplex` to the reflected state.
                 }
 
-                return;
+                // No immediate return. The algorithm must continue iterating.
 
-            }
+            } else { // Reflected point is NOT better than the original best.
 
                 // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+                // Evaluate contraction based on the *original* simplex (originalSimplexState)
+                final RealPointValuePair contracted = evaluateNewSimplex(originalSimplexState, gamma, comparator);
 
-            // check convergence
+                if (comparator.compare(contracted, best) < 0) { // Contracted point is better than the original best.
+                    // Accept the contracted simplex. `this.simplex` is already updated to `contracted` state.
+                    // No action needed.
+                } else {
+                    // Neither reflection, expansion, nor contraction improved the simplex over the best point.
+                    // The simplex might be oscillating or stuck. The algorithm proceeds to the next iteration.
+                    // `this.simplex` is currently in the state after the failed contraction.
+                }
+                // No immediate return. The algorithm must continue iterating.
+            }
+
+            // Check for convergence after each iteration.
+            // If converged, exit the loop.
+            if (getConvergenceChecker().converged(getIterations(), previousSimplex, simplex)) {
                 return;
             }
-
         }
 
     }
\ No newline at end of file
