diff --git a/tmp/b55ded77-2b83-4d04-9bbd-c470073dda88_buggy.java b/tmp/f868c675-50db-4603-9ad8-a5167866336a_fixed.java
index 5f1dcf2..50ac31e 100644
--- a/tmp/b55ded77-2b83-4d04-9bbd-c470073dda88_buggy.java
+++ b/tmp/f868c675-50db-4603-9ad8-a5167866336a_fixed.java
@@ -1,41 +1,66 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+        // Need to store the previous simplex for the convergence check at the end of each iteration.
+        RealPointValuePair[] previousSimplex = null;
+
         while (true) {
+            // Save the current simplex state as 'previousSimplex' for the convergence check.
+            // For the first iteration, 'simplex' will be the initial configuration.
+            previousSimplex = simplex;
 
+            // Increment iteration counter and check against max iterations.
+            // This method throws MaxIterationsExceededException if the limit is hit.
             incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+            // Get the best point from the simplex at the beginning of this iteration.
+            final RealPointValuePair best = previousSimplex[0];
 
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+            // Perform a reflection step.
+            // The evaluateNewSimplex method updates 'this.simplex' and returns its new best point.
+            final RealPointValuePair reflected = evaluateNewSimplex(previousSimplex, 1.0, comparator);
+
+            // Check if the reflected point is better than the original best point.
             if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
+                // Reflection was successful. Now, try an expansion step.
+                // Store the simplex resulting from the reflection step.
                 final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+
+                // Compute the expanded simplex. This call will also update 'this.simplex'.
+                final RealPointValuePair expanded = evaluateNewSimplex(previousSimplex, khi, comparator);
+
+                // If the reflected point is better than or equal to the expanded point,
+                // accept the reflected simplex (revert 'this.simplex' to 'reflectedSimplex').
+                // Otherwise (expanded is better), the expanded simplex is already in 'this.simplex'.
                 if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
+                // No return here; continue to the convergence check.
+            } else {
+                // Reflected point was not better than the original best point. Try a contraction step.
+                // This call also updates 'this.simplex'.
+                final RealPointValuePair contracted = evaluateNewSimplex(previousSimplex, gamma, comparator);
 
-                return;
-
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+                // If the contracted point is better than the original best point, accept it.
+                // 'this.simplex' is already updated to the contracted simplex.
                 if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+                    // No return here; continue to the convergence check.
+                } else {
+                    // Neither reflection nor contraction yielded a better point than the original best.
+                    // The 'simplex' now holds the result of the (unsuccessful) contraction.
+                    // The algorithm might be stuck or have converged, which will be handled by the checkConvergence.
+                }
             }
 
+            // After attempting reflection, and possibly expansion or contraction,
+            // check for convergence using the simplex from the beginning of the iteration
+            // and the simplex at the end of this iteration.
+            if (checkConvergence(previousSimplex, simplex)) {
+                return; // The simplex has converged, so exit the optimization loop.
             }
 
+            // If not converged, the loop continues to the next iteration.
+        }
     }
\ No newline at end of file
