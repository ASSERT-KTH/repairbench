diff --git a/tmp/500b48a6-ccde-4c8e-969a-85f2e0fac597_buggy.java b/tmp/d3dbef3d-0ee9-4389-87ed-c3694b3ce4f5_fixed.java
index 5f1dcf2..6c9d0ae 100644
--- a/tmp/500b48a6-ccde-4c8e-969a-85f2e0fac597_buggy.java
+++ b/tmp/d3dbef3d-0ee9-4389-87ed-c3694b3ce4f5_fixed.java
@@ -1,41 +1,77 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (true) { // Loop until convergence or max iterations
 
             incrementIterationsCounter();
 
-            // save the original vertex
+            // Check if maximal number of iterations is exceeded.
+            // This is a standard early exit condition for iterative algorithms.
+            if (getIterations() > getMaxIterations()) {
+                throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+            }
+
+            // Save the state of the simplex at the beginning of this iteration.
+            // This 'original' array will be used to calculate new points and for the convergence check.
             final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+            final RealPointValuePair best = original[0]; // Best point from the *start* of this iteration.
 
-            // perform a reflection step
+            // Perform a reflection step.
+            // The `evaluateNewSimplex` method in MultiDirectional is designed to:
+            // 1. Calculate a new point based on the 'original' simplex and the given coefficient (rho for reflection).
+            // 2. Replace the worst point in the *class's `simplex` field* with this new point.
+            // 3. Sort the *class's `simplex` field*.
+            // 4. Return the newly created point.
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
+            // After the reflection, the class's `simplex` field has been updated with the `reflected` point
+            // (if it replaced the worst vertex) and is sorted.
+
+            // If the reflected point is better than the original best point:
             if (comparator.compare(reflected, best) < 0) {
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+                // The class's `simplex` field currently holds the state after reflection.
+                // Store this state in case we decide to keep the reflected point over an expanded one.
+                final RealPointValuePair[] simplexAfterReflection = simplex;
+
+                // Compute the expanded simplex, using the 'original' (start-of-iteration) simplex for calculations.
+                // This call will again modify the class's `simplex` field.
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+
+                // If the reflected point is still better or equally good compared to the expanded point:
                 if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    // This implies expansion was not beneficial enough (or worse).
+                    // Revert the class's `simplex` field to the state it had after the reflection step.
+                    simplex = simplexAfterReflection;
                 }
+                // If 'expanded' was strictly better, the class's `simplex` field is already in the desired state.
+                // The original code had a 'return' statement here, which is removed to allow further iterations.
 
-                return;
+            } else { // Reflected point is NOT better than the original best point.
 
-            }
-
-            // compute the contracted simplex
+                // Compute the contracted simplex, using the 'original' (start-of-iteration) simplex for calculations.
+                // This call will again modify the class's `simplex` field.
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+
+                // If the contracted point is better than the original best point:
                 if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+                    // Accept the contracted simplex. The class's `simplex` field is already updated by `evaluateNewSimplex`.
+                    // The original code had an empty block and a 'return' here, which is removed.
+                } else {
+                    // Neither reflection nor contraction improved the best point compared to the original best.
+                    // In MultiDirectional, if no improvement is found, the algorithm continues, relying on the
+                    // convergence checker to detect stagnation or local optima.
+                }
             }
 
+            // After all simplex operations for this iteration, check for convergence.
+            // Compare the best point from the start of this iteration (`original[0]`)
+            // with the best point at the end of this iteration (`simplex[0]`).
+            if (getConvergenceChecker().converged(original[0], simplex[0])) {
+                break; // Exit the loop if convergence is achieved.
             }
 
+        } // End of while (true) loop
     }
\ No newline at end of file
