diff --git a/tmp/e6dc30e7-0858-4966-ad1d-ea1e98b9f790_buggy.java b/tmp/eb8fae8b-90d9-4e91-86eb-43edca141e65_fixed.java
index 5f1dcf2..8694957 100644
--- a/tmp/e6dc30e7-0858-4966-ad1d-ea1e98b9f790_buggy.java
+++ b/tmp/eb8fae8b-90d9-4e91-86eb-43edca141e65_fixed.java
@@ -1,41 +1,72 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
-
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+            // save the original vertex state for comparison and contraction/shrink
+            final RealPointValuePair[] original = simplex; // This is the simplex state at the beginning of the current iteration.
+            final RealPointValuePair bestOriginal = original[0];
+
+            // 1. Perform a reflection step
+            // evaluateNewSimplex computes the new point based on `original`,
+            // replaces the worst point in `this.simplex` with the new point, and sorts `this.simplex`.
+            // The returned `reflectedPoint` is the point that was inserted.
+            final RealPointValuePair reflectedPoint = evaluateNewSimplex(original, 1.0, comparator);
+
+            // Compare the newly inserted reflected point with the best point of the original simplex.
+            if (comparator.compare(reflectedPoint, bestOriginal) < 0) { // If reflected point is better than original best
+
+                // Reflection was successful, now try expansion
+                // Store the state of `this.simplex` *after reflection* before attempting expansion.
+                // We need a deep copy if RealPointValuePair was mutable, but it's immutable, so shallow copy of array is fine.
+                final RealPointValuePair[] simplexAfterReflection = new RealPointValuePair[simplex.length];
+                System.arraycopy(simplex, 0, simplexAfterReflection, 0, simplex.length);
+
+                // Compute the expanded point. This will update `this.simplex` again, based on `original`.
+                final RealPointValuePair expandedPoint = evaluateNewSimplex(original, khi, comparator);
+
+                // Compare the newly inserted expanded point with the reflected point.
+                // If expanded point is strictly better than reflected point, keep the expanded simplex.
+                // Otherwise (expanded is not better), revert to the reflected simplex.
+                if (comparator.compare(expandedPoint, reflectedPoint) < 0) {
+                    // Expanded point is strictly better. Keep the current `this.simplex` (which is the expanded simplex).
+                    // No action needed here.
+                } else {
+                    // Expanded point is not better. Revert `this.simplex` to the state after reflection.
+                    simplex = simplexAfterReflection;
                 }
 
-                return;
-
+            } else { // Reflection did not improve the best point. Try contraction.
+
+                // Compute the contracted point. This will update `this.simplex`.
+                final RealPointValuePair contractedPoint = evaluateNewSimplex(original, gamma, comparator);
+
+                // If contraction improved the best point (compared to original best).
+                if (comparator.compare(contractedPoint, bestOriginal) < 0) {
+                    // Contraction was successful. Keep the current `this.simplex` (which is the contracted simplex).
+                    // No action needed here.
+                } else {
+                    // Neither reflection nor contraction improved the best point. Perform shrink.
+                    // Shrink moves all points (except the best) towards the best point of the *original* simplex.
+                    final RealPointValuePair bestPointOfOriginalSimplex = original[0];
+                    for (int i = 1; i < original.length; ++i) { // Iterate from second best to worst point in the original simplex
+                        final double[] originalPointCoords = original[i].getPoint();
+                        final double[] newCoords = new double[originalPointCoords.length];
+                        for (int j = 0; j < originalPointCoords.length; ++j) {
+                            // Calculate new coordinates: p_new = p_best + sigma * (p_original - p_best)
+                            newCoords[j] = bestPointOfOriginalSimplex.getPoint()[j] + sigma * (originalPointCoords[j] - bestPointOfOriginalSimplex.getPoint()[j]);
                         }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+                        // Create a new RealPointValuePair with the shrunk coordinates and evaluate its value.
+                        simplex[i] = new RealPointValuePair(newCoords, function.value(newCoords));
                     }
-
+                    // After shrinking, the simplex might not be sorted. Re-sort it.
+                    sort(comparator);
+                }
+            }
+            // The loop continues to the next iteration. Convergence check or maximal iterations are handled by the calling `doOptimize` method.
         }
-
     }
\ No newline at end of file
