diff --git a/tmp/fb6af081-88e0-418e-8655-5dcf8e781804_buggy.java b/tmp/1ae2ba2e-90b0-45fe-9a91-021fb0193e01_fixed.java
index 5f1dcf2..eb662d0 100644
--- a/tmp/fb6af081-88e0-418e-8655-5dcf8e781804_buggy.java
+++ b/tmp/1ae2ba2e-90b0-45fe-9a91-021fb0193e01_fixed.java
@@ -1,41 +1,77 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
-
             incrementIterationsCounter();
 
-            // save the original vertex
+            // save the original vertex state for reference
             final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+            final RealPointValuePair best = original[0]; // The best point in the simplex
 
-            // perform a reflection step
+            // 1. Perform a reflection step
+            // evaluateNewSimplex updates 'this.simplex' with the reflected simplex
+            // and returns the point that replaced the worst.
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
+            // Check if the reflected point is better than the original best point
             if (comparator.compare(reflected, best) < 0) {
+                // Reflection was successful: reflected point is better than original best
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+                // Store the simplex after reflection
+                final RealPointValuePair[] reflectedSimplex = simplex; // 'simplex' is now the reflected simplex
+
+                // 2. Compute the expanded simplex (from original, as per MultiDirectional algorithm behavior)
+                // This call will update 'this.simplex' again, now to the expanded simplex.
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+
+                // Compare the reflected point with the expanded point
                 if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                    // Reflected point is better than or equal to the expanded point.
+                    // Accept the reflected simplex: revert 'this.simplex' to the reflected state.
                     simplex = reflectedSimplex;
                 }
+                // Else (expanded point is better than reflected point), 'this.simplex' already holds the expanded simplex, so nothing to do.
 
-                return;
+            } else {
+                // Reflection was not successful (reflected point is not better than original best)
 
-            }
-
-            // compute the contracted simplex
+                // 3. Compute the contracted simplex (from original)
+                // This call will update 'this.simplex' to the contracted simplex.
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+
+                // Check if the contracted point is better than the original best point
                 if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+                    // Contraction was successful: contracted point is better than original best
+                    // 'this.simplex' already holds the contracted simplex.
+                } else {
+                    // Neither reflection nor contraction improved the simplex significantly.
+                    // 4. Perform a shrink step.
+                    // Move all points (except the best) towards the best point.
+                    // The best point is `original[0]`.
+                    final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];
+                    newSimplex[0] = best; // Best point remains unchanged
 
-            // check convergence
-                return;
+                    for (int i = 1; i < original.length; i++) {
+                        final double[] p = original[i].getPoint();
+                        final double[] ref = best.getPoint();
+                        final double[] newPoint = new double[getN()]; // getN() gets dimension
+                        for (int j = 0; j < getN(); j++) {
+                            newPoint[j] = ref[j] + sigma * (p[j] - ref[j]);
+                        }
+                        // Create new point pair with value NaN; its value will be evaluated by evaluateSimplex
+                        newSimplex[i] = new RealPointValuePair(newPoint, Double.NaN);
+                    }
+                    // Evaluate the new points for the shrunk simplex and sort it.
+                    simplex = evaluateSimplex(newSimplex, comparator);
                 }
-
             }
 
+            // After any simplex transformation (or lack thereof), check for convergence.
+            // The 'checker' field is inherited from AbstractDirectOptimizer.
+            if (this.checker.converged(simplex)) {
+                return; // Converged, exit the method.
+            }
+        }
     }
\ No newline at end of file
