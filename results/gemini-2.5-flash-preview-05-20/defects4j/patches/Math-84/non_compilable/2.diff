diff --git a/tmp/190c16a1-b8e8-4d34-b347-0890465865ae_buggy.java b/tmp/f0057f53-201c-427b-b9e9-47dab62eef87_fixed.java
index 5f1dcf2..38ab1d5 100644
--- a/tmp/190c16a1-b8e8-4d34-b347-0890465865ae_buggy.java
+++ b/tmp/f0057f53-201c-427b-b9e9-47dab62eef87_fixed.java
@@ -1,41 +1,80 @@
+import java.util.Arrays;
+import java.util.Comparator;
+import org.apache.commons.math.optimization.RealPointValuePair;
+import org.apache.commons.math.optimization.FunctionEvaluationException;
+import org.apache.commons.math.optimization.OptimizationException;
+
+// Assume other necessary imports and class context are present.
+// This fix only addresses the iterateSimplex method.
+abstract class DirectSearchOptimizer {
+    // These fields are assumed to be present in the class context.
+    protected RealPointValuePair[] simplex;
+    protected double khi;
+    protected double gamma;
+
+    protected abstract RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,
+                                                             final double coeff,
+                                                             final Comparator<RealPointValuePair> comparator)
+        throws FunctionEvaluationException, OptimizationException;
+
+    protected abstract void incrementIterationsCounter() throws OptimizationException;
+
+    // This method is from the MultiDirectional class, as provided.
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        // Removed the `while (true)` loop. This method should perform a single iteration
+        // and return. The overall optimization loop and convergence checks are handled
+        // by the calling `optimize` method in the parent class.
 
-            incrementIterationsCounter();
+        incrementIterationsCounter(); // Increment iteration counter for this step
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+        // Save the current state of the simplex for calculating new points.
+        // `originalSimplexState` is a reference to `this.simplex` at the beginning of this iteration.
+        // It's used as input to `evaluateNewSimplex`, which does not modify it.
+        final RealPointValuePair[] originalSimplexState = simplex;
+        final RealPointValuePair best = originalSimplexState[0]; // The best point from the start of this iteration
 
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        // 1. Perform a reflection step.
+        // `evaluateNewSimplex` computes a new candidate point but does not modify `this.simplex`.
+        final RealPointValuePair reflected = evaluateNewSimplex(originalSimplexState, 1.0, comparator);
+
+        // 2. Decide if the reflected point is good enough.
         if (comparator.compare(reflected, best) < 0) {
+            // Reflected point is better than the original best. Try expansion.
+            final RealPointValuePair expanded = evaluateNewSimplex(originalSimplexState, khi, comparator);
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+            // Compare the expanded point with the reflected point.
+            // If expanded is strictly better than reflected, accept expanded. Otherwise, accept reflected.
+            if (comparator.compare(expanded, reflected) < 0) {
+                // Accept the expanded point: replace the worst point in the current simplex
+                simplex[simplex.length - 1] = expanded;
+            } else {
+                // Accept the reflected point: replace the worst point in the current simplex
+                simplex[simplex.length - 1] = reflected;
             }
+        } else {
+            // Reflected point was not better than the original best. Try contraction.
+            final RealPointValuePair contracted = evaluateNewSimplex(originalSimplexState, gamma, comparator);
 
-                return;
-
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+            // If the contracted point is better than the original best, accept it.
             if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+                // Accept the contracted point: replace the worst point in the current simplex
+                simplex[simplex.length - 1] = contracted;
+            } else {
+                // Neither reflection nor contraction (against the best point) yielded a better point.
+                // In this case, the simplex remains unchanged for this iteration.
+                // The algorithm relies on the outer convergence checker to eventually terminate.
+                // No update to `simplex[simplex.length - 1]` is performed here.
             }
-
         }
 
+        // After potentially replacing the worst point, re-sort the simplex
+        // to maintain its sorted order for the next iteration.
+        Arrays.sort(simplex, comparator);
+
+        // Removed all `return` statements, as this method should complete its single iteration.
+    }
 }
\ No newline at end of file
