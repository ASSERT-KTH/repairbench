diff --git a/tmp/8b66aaad-f7fc-4102-bb7d-e299af9607ea_buggy.java b/tmp/0c1dfe08-a383-479c-96da-bfddf31147a2_fixed.java
index 5f1dcf2..ad144f0 100644
--- a/tmp/8b66aaad-f7fc-4102-bb7d-e299af9607ea_buggy.java
+++ b/tmp/0c1dfe08-a383-479c-96da-bfddf31147a2_fixed.java
@@ -1,41 +1,69 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
-            incrementIterationsCounter();
+            incrementIterationsCounter(); // This also calls checkIterationsCounter() which might throw MaxIterationsExceededException
 
-            // save the original vertex
+            // save the original vertex to check for convergence later
             final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+            final RealPointValuePair best = original[0]; // original[0] is the best point as simplex is sorted
 
             // perform a reflection step
+            // The evaluateNewSimplex method is expected to modify 'this.simplex'
+            // to the new (reflected) simplex and return its best point.
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
             
-                // compute the expanded simplex
+            // At this point, 'simplex' holds the reflected simplex. 'reflected' is 'simplex[0]'.
+
+            if (comparator.compare(reflected, best) < 0) { // If the reflected simplex has a better best point
+
+                // Reflection was successful.
+                // Store the state of the simplex after reflection, before potential expansion.
                 final RealPointValuePair[] reflectedSimplex = simplex; 
+
+                // compute the expanded simplex
+                // This call will overwrite 'this.simplex' with the expanded simplex.
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+
+                // 'expanded' is 'this.simplex[0]' (best point of the expanded simplex)
                 if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                    // Expanded simplex is not better than reflected (or only equally good).
+                    // Accept the reflected simplex by reverting 'this.simplex'.
                     simplex = reflectedSimplex;
                 }
+                // If expanded was strictly better, 'simplex' already holds the expanded simplex.
+                // Removed the premature 'return' statement. The algorithm should continue iterating.
 
-                return;
+            } else { // Reflection did not improve the best point (reflected >= best)
 
-            }
-
-            // compute the contracted simplex
+                // Try contraction.
+                // This call will overwrite 'this.simplex' with the contracted simplex.
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+
+                // 'contracted' is 'this.simplex[0]' (best point of the contracted simplex)
                 if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+                    // Contraction improved the best point.
+                    // 'simplex' already holds the contracted simplex.
+                    // Removed the premature 'return' statement. The algorithm should continue iterating.
+                } else {
+                    // Neither reflection nor contraction improved the best point.
+                    // The 'simplex' is currently the contracted simplex, which did not improve.
+                    // In the MultiDirectional method, there is no explicit "shrink" step here
+                    // as found in Nelder-Mead. The algorithm will proceed to the convergence check.
+                    // If not converged and no improvement, it will continue the loop, relying
+                    // on the convergence checker to detect stagnation or the max iterations counter.
                 }
-
             }
 
+            // Check for convergence after each iteration step.
+            // 'original' holds the simplex before this iteration.
+            // 'simplex' holds the simplex after reflection/expansion/contraction.
+            if (getConvergenceChecker().converged(getIterations(), original, simplex)) {
+                return; // Converged, exit the loop.
+            }
+            // If not converged, the loop continues for the next iteration.
+        }
     }
\ No newline at end of file
