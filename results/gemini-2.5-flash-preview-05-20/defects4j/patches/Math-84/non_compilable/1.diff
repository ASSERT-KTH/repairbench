diff --git a/tmp/1bb7e2b8-08fb-480e-a0ec-83f60e479bc3_buggy.java b/tmp/ba5e86f3-5be4-403c-b4ea-c21e3e1669e1_fixed.java
index 5f1dcf2..fb443c2 100644
--- a/tmp/1bb7e2b8-08fb-480e-a0ec-83f60e479bc3_buggy.java
+++ b/tmp/ba5e86f3-5be4-403c-b4ea-c21e3e1669e1_fixed.java
@@ -1,41 +1,77 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+        // Initialize previousSimplex for the first convergence check.
+        // It's the state of the simplex *before* the first iteration step.
+        // A copy is needed because the 'simplex' field itself will be modified.
+        RealPointValuePair[] previousSimplex = new RealPointValuePair[simplex.length];
+        System.arraycopy(simplex, 0, previousSimplex, 0, simplex.length);
+
         while (true) {
+            // Check for convergence before performing the current iteration step.
+            // If the simplex has converged since the last state, we are done.
+            if (getConvergenceChecker().converged(getIterations(), previousSimplex, simplex)) {
+                return;
+            }
 
+            // Increment iteration counter and check against maximal iterations.
+            // This call will throw MaxIterationsExceededException if the limit is reached.
             incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+            // Store the current simplex state *before* modifying it in this iteration.
+            // This becomes 'previousSimplex' for the *next* iteration's convergence check.
+            previousSimplex = new RealPointValuePair[simplex.length];
+            System.arraycopy(simplex, 0, previousSimplex, 0, simplex.length);
 
-            // perform a reflection step
+            final RealPointValuePair[] original = simplex; // Current simplex for this iteration step
+            final RealPointValuePair best = original[0]; // Best point of the current simplex
+
+            boolean shrinkRequired = true; // Flag to indicate if a shrink step is needed
+
+            // Perform a reflection step
+            // evaluateNewSimplex updates 'this.simplex' and returns its best point.
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
             if (comparator.compare(reflected, best) < 0) {
+                // Reflection was successful (reflected point is better than original best).
+                // Now, try expansion.
                 
-                // compute the expanded simplex
+                // Capture the state of the simplex *after* the successful reflection.
+                // 'this.simplex' currently holds the reflected simplex if evaluateNewSimplex updated it.
                 final RealPointValuePair[] reflectedSimplex = simplex;
+
+                // Compute the expanded simplex (from the original configuration).
+                // This call will potentially update 'this.simplex' again to the expanded simplex.
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+
+                // Compare reflected and expanded results.
                 if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                    // Reflected is better or equal to expanded, so we accept the reflected simplex.
+                    // Revert 'this.simplex' back to the reflected simplex state.
                     simplex = reflectedSimplex;
                 }
+                // Else (expanded is strictly better than reflected), 'simplex' already holds the expanded one.
+                // No action needed as evaluateNewSimplex already placed the better result into 'this.simplex'.
 
-                return;
+                shrinkRequired = false; // An improvement was found (reflection or expansion), so no shrink is needed.
 
-            }
-
-            // compute the contracted simplex
+            } else { // Reflection was not better than original best
+                // Reflection did not improve the simplex. Try contraction.
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+
                 if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+                    // Contraction was successful (contracted point is better than original best).
+                    shrinkRequired = false; // An improvement was found, so no shrink is needed.
                 }
-
+                // Else (contracted was not better than original best), shrinkRequired remains true.
             }
 
+            // If no improvement was found through reflection, expansion, or contraction, perform a shrink.
+            if (shrinkRequired) {
+                evaluateNewSimplex(original, sigma, comparator); // 'sigma' is the shrink coefficient
+            }
+            // The loop continues to the next iteration to re-evaluate convergence and perform another step.
+        }
     }
\ No newline at end of file
