diff --git a/tmp/dc164ab7-f1dd-42ba-8e6d-ccfd67815e0d_buggy.java b/tmp/5ee8836c-b654-4f73-88d5-1e9dae5a2593_fixed.java
index 5f1dcf2..97dcad2 100644
--- a/tmp/dc164ab7-f1dd-42ba-8e6d-ccfd67815e0d_buggy.java
+++ b/tmp/5ee8836c-b654-4f73-88d5-1e9dae5a2593_fixed.java
@@ -1,41 +1,74 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+        // Stores the simplex state from the previous iteration to check for convergence.
+        RealPointValuePair[] previousSimplex = null;
+
+        // Loop until convergence or maximal number of iterations is exceeded.
+        // The loop condition is the primary fix for "MaxIterationsExceededException".
         while (true) {
-
             incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
-
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+            // Check for convergence.
+            // This check must happen *after* incrementing and *before* starting the next iteration's work.
+            // `previousSimplex` is null on the very first iteration, so we skip the check (`getIterations() > 1`).
+            if (getIterations() > 1 && getConvergenceChecker().converged(getIterations(), previousSimplex, simplex)) {
+                return; // Optimization converged, exit loop.
             }
 
-                return;
-
+            // Save the current simplex state for the next iteration's convergence check.
+            // Crucial to clone to get a distinct array for comparison.
+            previousSimplex = simplex.clone();
+
+            // Store the best point from the start of this iteration for comparison.
+            final RealPointValuePair originalBest = simplex[0];
+
+            // MultiDirectional algorithm steps:
+
+            // Step 1: Reflection
+            // evaluateNewSimplex modifies 'simplex' in place by moving points away from the best.
+            // (The returned RealPointValuePair from evaluateNewSimplex is typically the best transformed point,
+            // but the primary effect is the in-place modification of the simplex array.)
+            evaluateNewSimplex(simplex, 1.0, comparator);
+            // After this, `simplex` contains the reflected points. It needs to be sorted to find the new best.
+            sort(simplex, comparator);
+
+            // Check if reflection improved the best point of the *entire simplex*.
+            if (comparator.compare(simplex[0], originalBest) < 0) {
+                // Reflection improved the simplex. Try expansion.
+                // Expansion is typically tried from the *original* simplex state for proper comparison.
+                final RealPointValuePair[] expandedSimplexCandidate = previousSimplex.clone(); // Use the stored previous state
+                evaluateNewSimplex(expandedSimplexCandidate, khi, comparator); // Modifies expandedSimplexCandidate in place
+                sort(expandedSimplexCandidate, comparator); // Sort the expanded candidate
+
+                // If the expanded simplex's best point is better than the reflected simplex's best point
+                if (comparator.compare(expandedSimplexCandidate[0], simplex[0]) < 0) {
+                    // Accept the expanded simplex.
+                    simplex = expandedSimplexCandidate;
+                }
+                // Else: Reflection is better or equal. `simplex` already holds the reflected state (from step 1), so no change needed.
+            } else {
+                // Reflection did not improve the best point significantly. Try contraction.
+                // Contraction is also tried from the *original* simplex state.
+                final RealPointValuePair[] contractedSimplexCandidate = previousSimplex.clone(); // Use the stored previous state
+                evaluateNewSimplex(contractedSimplexCandidate, gamma, comparator); // Modifies contractedSimplexCandidate in place
+                sort(contractedSimplexCandidate, comparator); // Sort the contracted candidate
+
+                // If contraction improved the best point compared to the *original* best
+                if (comparator.compare(contractedSimplexCandidate[0], originalBest) < 0) {
+                    // Accept the contracted simplex.
+                    simplex = contractedSimplexCandidate;
+                } else {
+                    // Neither reflection nor contraction improved the best point.
+                    // Perform shrinkage: move all points (except the best) towards the best point.
+                    // This is applied to the *current* simplex (which might have been slightly moved by the failed reflection).
+                    // This assumes 'sigma' (shrinkage factor, typically 0.5) is available as a class field or can be used as a literal.
+                    // In Apache Commons Math, MultiDirectional uses a coefficient of 0.5 for shrinkage.
+                    evaluateNewSimplex(simplex, 0.5, comparator); // Assuming sigma = 0.5
+                    sort(simplex, comparator); // Sort after shrinkage.
                 }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
             }
-
         }
-
     }
\ No newline at end of file
