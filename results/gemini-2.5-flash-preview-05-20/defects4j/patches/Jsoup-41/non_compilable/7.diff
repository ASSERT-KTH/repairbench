diff --git a/tmp/99f3227d-8e19-47ae-9d8d-04b3df37c799_buggy.java b/tmp/d9726cf7-e1c0-416b-b921-eb37f826fb22_fixed.java
index d457dbe..9f988c6 100644
--- a/tmp/99f3227d-8e19-47ae-9d8d-04b3df37c799_buggy.java
+++ b/tmp/d9726cf7-e1c0-416b-b921-eb37f826fb22_fixed.java
@@ -1,10 +1,93 @@
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        if (!super.equals(o)) return false;
+
+        // The original `super.equals(o)` call was incorrect because Node.equals in Jsoup
+        // is typically an identity comparison (return this == o), which defeats
+        // the purpose of content-based equality for Element. Thus, it's removed.
 
         Element element = (Element) o;
 
-        return this == o;
+        // 1. Compare tag names
+        if (!tagName().equals(element.tagName())) {
+            return false;
+        }
+
+        // 2. Compare attributes
+        // The Attributes class should have a proper equals method for deep comparison.
+        if (!attributes().equals(element.attributes())) {
+            return false;
+        }
+
+        // 3. Compare child nodes recursively
+        // This is crucial for deep content equality.
+        List<org.jsoup.nodes.Node> thisChildren = childNodes();
+        List<org.jsoup.nodes.Node> otherChildren = element.childNodes();
+
+        if (thisChildren.size() != otherChildren.size()) {
+            return false;
+        }
+
+        for (int i = 0; i < thisChildren.size(); i++) {
+            org.jsoup.nodes.Node thisChild = thisChildren.get(i);
+            org.jsoup.nodes.Node otherChild = otherChildren.get(i);
+
+            // Perform content-based comparison for common Node types.
+            // Note: If a Node subclass does not override `equals` from `Node` (which is identity),
+            // this will default to identity comparison for that specific node type.
+            // For proper deep equality, all relevant Node subclasses should have content-based equals.
+
+            if (thisChild instanceof Element && otherChild instanceof Element) {
+                // Recursively call equals on Element children
+                if (!thisChild.equals(otherChild)) {
+                    return false;
+                }
+            } else if (thisChild instanceof org.jsoup.nodes.TextNode && otherChild instanceof org.jsoup.nodes.TextNode) {
+                // Compare text content for TextNodes
+                if (!((org.jsoup.nodes.TextNode) thisChild).text().equals(((org.jsoup.nodes.TextNode) otherChild).text())) {
+                    return false;
+                }
+            } else if (thisChild instanceof org.jsoup.nodes.Comment && otherChild instanceof org.jsoup.nodes.Comment) {
+                // Compare data for Comments
+                if (!((org.jsoup.nodes.Comment) thisChild).getData().equals(((org.jsoup.nodes.Comment) otherChild).getData())) {
+                    return false;
+                }
+            } else if (thisChild instanceof org.jsoup.nodes.DataNode && otherChild instanceof org.jsoup.nodes.DataNode) {
+                // Compare whole data for DataNodes
+                if (!((org.jsoup.nodes.DataNode) thisChild).getWholeData().equals(((org.jsoup.nodes.DataNode) otherChild).getWholeData())) {
+                    return false;
+                }
+            } else if (thisChild instanceof org.jsoup.nodes.CDataNode && otherChild instanceof org.jsoup.nodes.CDataNode) {
+                // CDataNode extends TextNode, its content is accessed via text()
+                if (!((org.jsoup.nodes.CDataNode) thisChild).text().equals(((org.jsoup.nodes.CDataNode) otherChild).text())) {
+                    return false;
+                }
+            } else if (thisChild instanceof org.jsoup.nodes.DocumentType && otherChild instanceof org.jsoup.nodes.DocumentType) {
+                // Compare properties for DocumentType
+                org.jsoup.nodes.DocumentType thisDt = (org.jsoup.nodes.DocumentType) thisChild;
+                org.jsoup.nodes.DocumentType otherDt = (org.jsoup.nodes.DocumentType) otherChild;
+                if (!thisDt.getName().equals(otherDt.getName()) ||
+                    !thisDt.getPublicId().equals(otherDt.getPublicId()) ||
+                    !thisDt.getSystemId().equals(otherDt.getSystemId())) {
+                    return false;
+                }
+            } else if (thisChild instanceof org.jsoup.nodes.XmlDeclaration && otherChild instanceof org.jsoup.nodes.XmlDeclaration) {
+                // Compare properties for XmlDeclaration
+                org.jsoup.nodes.XmlDeclaration thisXml = (org.jsoup.nodes.XmlDeclaration) thisChild;
+                org.jsoup.nodes.XmlDeclaration otherXml = (org.jsoup.nodes.XmlDeclaration) otherChild;
+                // getWholeDeclaration provides the full string content, which is usually sufficient.
+                if (!thisXml.getWholeDeclaration().equals(otherXml.getWholeDeclaration())) {
+                    return false;
+                }
+            }
+            // If the types of children don't match, or they are an unhandled Node type that doesn't
+            // have its own content-based `equals` overridden from `Node` (which is identity),
+            // then they are considered not equal based on content.
+            else {
+                return false;
+            }
+        }
+
+        return true; // All checks passed, elements are considered content-equal
     }
\ No newline at end of file
