diff --git a/tmp/e1954444-3d91-45dc-b129-5966562da03a_buggy.java b/tmp/329aee09-90f0-4fb7-80dc-ffb21518cd9d_fixed.java
index d457dbe..4efa23c 100644
--- a/tmp/e1954444-3d91-45dc-b129-5966562da03a_buggy.java
+++ b/tmp/329aee09-90f0-4fb7-80dc-ffb21518cd9d_fixed.java
@@ -1,10 +1,23 @@
     @Override
     public boolean equals(Object o) {
+        // Optimization: if it's the exact same object reference, they are equal.
         if (this == o) return true;
+        // Standard checks: if the other object is null or not of the same class, they are not equal.
+        // (Using getClass() != o.getClass() ensures strict class equality, not just instanceof.)
         if (o == null || getClass() != o.getClass()) return false;
-        if (!super.equals(o)) return false;
 
-        Element element = (Element) o;
-
-        return this == o;
+        // The original Element.equals (and its superclass Node.equals) in Jsoup
+        // is typically not implemented for structural equality; it often just checks
+        // for reference equality (this == o).
+        // However, the provided test `testHashAndEquals` clearly expects `Element.equals`
+        // to perform a structural comparison (i.e., comparing the content, attributes,
+        // and child nodes of the elements).
+        //
+        // Jsoup's `Node` class provides a `sameAs(Object o)` method specifically
+        // designed for performing a deep, structural comparison of nodes (checking
+        // tag, attributes, and recursively, child nodes).
+        //
+        // By delegating to `this.sameAs(o)`, we implement the structural equality
+        // required by the test.
+        return this.sameAs(o);
     }
\ No newline at end of file
