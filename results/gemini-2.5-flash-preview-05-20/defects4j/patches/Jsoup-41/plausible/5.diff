diff --git a/tmp/fbebd467-303e-4e5d-933d-348bb4d3bb20_buggy.java b/tmp/43ac1073-818a-41d7-bdde-d92fc045af53_fixed.java
index d457dbe..e2a9b03 100644
--- a/tmp/fbebd467-303e-4e5d-933d-348bb4d3bb20_buggy.java
+++ b/tmp/43ac1073-818a-41d7-bdde-d92fc045af53_fixed.java
@@ -1,10 +1,43 @@
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        if (!super.equals(o)) return false;
 
-        Element element = (Element) o;
+        // The original `if (!super.equals(o))` line was problematic because
+        // Node's default equals method is Object.equals, which only checks
+        // for reference equality. For Element, we need content-based equality.
 
-        return this == o;
+        Element other = (Element) o;
+
+        // Compare tags
+        if (!tag.equals(other.tag)) {
+            return false;
+        }
+
+        // Compare attributes
+        // The Attributes class has its own content-based equals implementation.
+        if (!attributes.equals(other.attributes)) {
+            return false;
+        }
+
+        // Compare child nodes recursively.
+        // Order of child nodes matters for Element equality.
+        // This relies on the fact that other Node types (TextNode, Comment, DataNode)
+        // also have proper content-based equals implementations.
+        List<org.jsoup.nodes.Node> thisChildren = childNodes();
+        List<org.jsoup.nodes.Node> otherChildren = other.childNodes();
+
+        if (thisChildren.size() != otherChildren.size()) {
+            return false;
+        }
+
+        for (int i = 0; i < thisChildren.size(); i++) {
+            org.jsoup.nodes.Node thisChild = thisChildren.get(i);
+            org.jsoup.nodes.Node otherChild = otherChildren.get(i);
+            if (!thisChild.equals(otherChild)) {
+                return false;
+            }
+        }
+
+        return true;
     }
\ No newline at end of file
