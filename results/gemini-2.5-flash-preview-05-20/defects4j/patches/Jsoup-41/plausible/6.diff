diff --git a/tmp/8179ef04-f32e-49d7-8e9c-907f126845f9_buggy.java b/tmp/487c3274-e7f5-4814-90cf-8c0d90f7ff1b_fixed.java
index d457dbe..b657889 100644
--- a/tmp/8179ef04-f32e-49d7-8e9c-907f126845f9_buggy.java
+++ b/tmp/487c3274-e7f5-4814-90cf-8c0d90f7ff1b_fixed.java
@@ -1,10 +1,34 @@
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        if (!super.equals(o)) return false;
 
-        Element element = (Element) o;
+        // The original code had `if (!super.equals(o)) return false;`
+        // Node.equals (the superclass) only checks for identity (this == o).
+        // Including it here would make this equals method also only check identity,
+        // which defeats the purpose of structural equality for Element.
+        // Therefore, this line must be removed.
 
-        return this == o;
+        Element other = (Element) o;
+
+        // Compare the tag
+        if (!tag().equals(other.tag())) return false;
+
+        // Compare attributes
+        // The Attributes class has its own equals method for deep comparison.
+        if (!attributes().equals(other.attributes())) return false;
+
+        // Compare children: first by size, then recursively by content.
+        int numChildren = childNodeSize();
+        if (numChildren != other.childNodeSize()) return false;
+
+        for (int i = 0; i < numChildren; i++) {
+            // Get child nodes directly from the protected 'childNodes' list inherited from Node.
+            // This calls the appropriate equals method for the Node subtype (e.g., Element, TextNode).
+            if (!childNodes.get(i).equals(other.childNodes.get(i))) {
+                return false;
+            }
+        }
+
+        return true;
     }
\ No newline at end of file
