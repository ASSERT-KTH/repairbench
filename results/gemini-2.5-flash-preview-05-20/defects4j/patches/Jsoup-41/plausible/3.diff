diff --git a/tmp/978424c9-03d7-40f0-ad81-267026c2000c_buggy.java b/tmp/09e1141e-f866-40f9-809d-e61647976142_fixed.java
index d457dbe..0de0e0f 100644
--- a/tmp/978424c9-03d7-40f0-ad81-267026c2000c_buggy.java
+++ b/tmp/09e1141e-f866-40f9-809d-e61647976142_fixed.java
@@ -1,10 +1,42 @@
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        if (!super.equals(o)) return false;
 
-        Element element = (Element) o;
+        // The original implementation had `if (!super.equals(o)) return false;`.
+        // In Jsoup, Node's (Element's superclass) equals method inherits from Object.equals(),
+        // which only checks for reference equality. This means if 'this' and 'o' were different
+        // objects (even if structurally identical), super.equals(o) would return false,
+        // causing the method to prematurely return false without checking the actual content
+        // of the Element. This line should be removed for a structural equality comparison.
 
-        return this == o;
+        Element other = (Element) o;
+
+        // Compare the tag. The Tag class has its own equals method to compare tag names and properties.
+        if (!tag().equals(other.tag())) return false;
+
+        // Compare the attributes. The Attributes class has its own equals method
+        // to compare all key-value pairs.
+        if (!attributes().equals(other.attributes())) return false;
+
+        // Compare child nodes recursively.
+        // Get the lists of child nodes for both elements.
+        List<Node> thisChildren = childNodes();
+        List<Node> otherChildren = other.childNodes();
+
+        // If the number of children differs, the elements are not equal.
+        if (thisChildren.size() != otherChildren.size()) return false;
+
+        // Iterate through the children and compare each corresponding child node.
+        // This will recursively call the equals method on the child Node objects
+        // (which can be Element, TextNode, Comment, etc., each with their own equals implementation).
+        for (int i = 0; i < thisChildren.size(); i++) {
+            if (!thisChildren.get(i).equals(otherChildren.get(i))) {
+                return false;
+            }
+        }
+
+        // If all checks pass (tag, attributes, and all children are equal),
+        // then the two Element objects are considered equal.
+        return true;
     }
\ No newline at end of file
