diff --git a/tmp/0ed2b119-5874-48b8-8225-32f39cbc02c9_buggy.java b/tmp/61989524-7d52-4f2b-a61b-2010d5851091_fixed.java
index 181b1ac..0eb30b6 100644
--- a/tmp/0ed2b119-5874-48b8-8225-32f39cbc02c9_buggy.java
+++ b/tmp/61989524-7d52-4f2b-a61b-2010d5851091_fixed.java
@@ -1,23 +1,34 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
      * If either this or <code>rhs</code> has a NaN value in either part,
      * {@link #NaN} is returned; otherwise Infinite and NaN values are
      * returned in the parts of the result according to the rules for
      * {@link java.lang.Double} arithmetic.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
+
+        // According to Javadoc: "If either this or rhs has a NaN value in either part, NaN is returned"
+        // The original code relies on Double.NaN propagation, but the specification requires returning
+        // Complex.NaN (which typically means both real and imaginary parts are NaN) if *any* part
+        // of either operand is NaN. For example, if rhs is (1.0, NaN), the sum should be (NaN, NaN),
+        // not (real+1.0, imaginary+NaN).
+        if (isNaN() || rhs.isNaN()) {
+            return Complex.NaN;
+        }
+
+        // Otherwise, perform regular addition
         return createComplex(real + rhs.getReal(),
             imaginary + rhs.getImaginary());
     }
\ No newline at end of file
