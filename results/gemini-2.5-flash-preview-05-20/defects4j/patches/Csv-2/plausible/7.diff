diff --git a/tmp/72d92857-4a01-4513-bc40-4cb855db20ab_buggy.java b/tmp/9a21d991-12eb-4e23-87fd-47bec721e261_fixed.java
index fd32990..a384cc3 100644
--- a/tmp/72d92857-4a01-4513-bc40-4cb855db20ab_buggy.java
+++ b/tmp/9a21d991-12eb-4e23-87fd-47bec721e261_fixed.java
@@ -1,20 +1,33 @@
     /**
      * Returns a value by name.
      *
      * @param name
      *            the name of the column to be retrieved.
      * @return the column value, or {@code null} if the column name is not found
      * @throws IllegalStateException
      *             if no header mapping was provided
      * @throws IllegalArgumentException
      *             if the record is inconsistent
      * @see #isConsistent()
      */
     public String get(final String name) {
         if (mapping == null) {
             throw new IllegalStateException(
                     "No header mapping was specified, the record values can't be accessed by name");
         }
         final Integer index = mapping.get(name);
-            return index != null ? values[index.intValue()] : null;
+        if (index != null) {
+            // Check if the index retrieved from the mapping is valid for the 'values' array.
+            // An inconsistent record means that the header mapping points to an index
+            // that is out of bounds for the actual values array.
+            if (index.intValue() >= values.length || index.intValue() < 0) {
+                throw new IllegalArgumentException(
+                    String.format("The record is inconsistent, the header mapping contains an invalid index %d for column '%s' for a record with %d values.",
+                                  index.intValue(), name, values.length));
+            }
+            return values[index.intValue()];
+        } else {
+            // Column name not found in the header mapping
+            return null;
+        }
     }
\ No newline at end of file
