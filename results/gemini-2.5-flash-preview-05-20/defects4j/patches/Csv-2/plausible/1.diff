diff --git a/tmp/a7f4347f-ac6c-498c-9196-4c4604f7a2ea_buggy.java b/tmp/ffb998d8-c533-4d64-a714-c193f50c5fbe_fixed.java
index fd32990..4013a0d 100644
--- a/tmp/a7f4347f-ac6c-498c-9196-4c4604f7a2ea_buggy.java
+++ b/tmp/ffb998d8-c533-4d64-a714-c193f50c5fbe_fixed.java
@@ -1,20 +1,29 @@
     /**
      * Returns a value by name.
      *
      * @param name
      *            the name of the column to be retrieved.
      * @return the column value, or {@code null} if the column name is not found
      * @throws IllegalStateException
      *             if no header mapping was provided
      * @throws IllegalArgumentException
      *             if the record is inconsistent
      * @see #isConsistent()
      */
     public String get(final String name) {
         if (mapping == null) {
             throw new IllegalStateException(
                     "No header mapping was specified, the record values can't be accessed by name");
         }
         final Integer index = mapping.get(name);
-            return index != null ? values[index.intValue()] : null;
+        if (index == null) {
+            return null; // Column name not found in the header mapping
+        }
+        // Check for inconsistent record: if the mapped index is out of bounds for the actual values array
+        if (index.intValue() >= values.length) {
+            throw new IllegalArgumentException(
+                    String.format("The record is inconsistent, the header mapping references an index %d which is out of bounds for the actual size of the record (%d)",
+                                  index.intValue(), values.length));
+        }
+        return values[index.intValue()];
     }
\ No newline at end of file
