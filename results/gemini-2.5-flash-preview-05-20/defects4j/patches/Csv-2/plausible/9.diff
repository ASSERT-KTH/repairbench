diff --git a/tmp/b6e75ecd-0a80-449c-ac20-6cb20b2c4f4c_buggy.java b/tmp/edfa6856-cad7-4fec-b730-2835c6b739fa_fixed.java
index fd32990..1451e3e 100644
--- a/tmp/b6e75ecd-0a80-449c-ac20-6cb20b2c4f4c_buggy.java
+++ b/tmp/edfa6856-cad7-4fec-b730-2835c6b739fa_fixed.java
@@ -1,20 +1,32 @@
     /**
      * Returns a value by name.
      *
      * @param name
      *            the name of the column to be retrieved.
      * @return the column value, or {@code null} if the column name is not found
      * @throws IllegalStateException
      *             if no header mapping was provided
      * @throws IllegalArgumentException
      *             if the record is inconsistent
      * @see #isConsistent()
      */
     public String get(final String name) {
         if (mapping == null) {
             throw new IllegalStateException(
                     "No header mapping was specified, the record values can't be accessed by name");
         }
         final Integer index = mapping.get(name);
+
+        // If the name exists in the mapping (index is not null) but the mapped index
+        // is out of bounds for the actual 'values' array, it indicates an inconsistent
+        // record state. This is an IllegalArgumentException scenario as per Javadoc.
+        if (index != null && index.intValue() >= values.length) {
+            throw new IllegalArgumentException(
+                String.format("The record is inconsistent, the value for '%s' (index %d) is out of bounds [0..%d]",
+                              name, index.intValue(), values.length > 0 ? values.length - 1 : -1));
+        }
+
+        // If index is null, the name was not found in the mapping, so return null.
+        // Otherwise, access the value at the valid index.
         return index != null ? values[index.intValue()] : null;
     }
\ No newline at end of file
