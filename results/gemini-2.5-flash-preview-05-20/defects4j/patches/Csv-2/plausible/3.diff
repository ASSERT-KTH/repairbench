diff --git a/tmp/50757c26-22bc-47ba-91d2-bdff96d0a45e_buggy.java b/tmp/a3526f82-6b6f-469d-8146-3b38233a2232_fixed.java
index fd32990..46d4baa 100644
--- a/tmp/50757c26-22bc-47ba-91d2-bdff96d0a45e_buggy.java
+++ b/tmp/a3526f82-6b6f-469d-8146-3b38233a2232_fixed.java
@@ -1,20 +1,31 @@
     /**
      * Returns a value by name.
      *
      * @param name
      *            the name of the column to be retrieved.
      * @return the column value, or {@code null} if the column name is not found
      * @throws IllegalStateException
      *             if no header mapping was provided
      * @throws IllegalArgumentException
      *             if the record is inconsistent
      * @see #isConsistent()
      */
     public String get(final String name) {
         if (mapping == null) {
             throw new IllegalStateException(
                     "No header mapping was specified, the record values can't be accessed by name");
         }
         final Integer index = mapping.get(name);
-            return index != null ? values[index.intValue()] : null;
+        if (index != null) {
+            // The Javadoc states that an IllegalArgumentException should be thrown if the record is inconsistent.
+            // An inconsistency occurs if a header mapping points to an index that is
+            // out of bounds for the actual values array of the record.
+            if (index.intValue() < 0 || index.intValue() >= values.length) {
+                throw new IllegalArgumentException(
+                        String.format("The header for column '%s' maps to index %d, which is out of bounds for the record's %d values.",
+                                name, index.intValue(), values.length));
+            }
+            return values[index.intValue()];
+        }
+        return null;
     }
\ No newline at end of file
