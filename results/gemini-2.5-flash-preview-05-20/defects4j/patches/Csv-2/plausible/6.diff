diff --git a/tmp/97b10ebc-031c-49cb-b1e7-4b72fe3279d2_buggy.java b/tmp/dae0aa74-a402-4295-bb4c-a8b738c702aa_fixed.java
index fd32990..b6f7861 100644
--- a/tmp/97b10ebc-031c-49cb-b1e7-4b72fe3279d2_buggy.java
+++ b/tmp/dae0aa74-a402-4295-bb4c-a8b738c702aa_fixed.java
@@ -1,20 +1,31 @@
     /**
      * Returns a value by name.
      *
      * @param name
      *            the name of the column to be retrieved.
      * @return the column value, or {@code null} if the column name is not found
      * @throws IllegalStateException
      *             if no header mapping was provided
      * @throws IllegalArgumentException
      *             if the record is inconsistent
      * @see #isConsistent()
      */
     public String get(final String name) {
         if (mapping == null) {
             throw new IllegalStateException(
                     "No header mapping was specified, the record values can't be accessed by name");
         }
         final Integer index = mapping.get(name);
-            return index != null ? values[index.intValue()] : null;
+        if (index != null) {
+            // Check if the retrieved index is out of bounds for the actual values array.
+            // This indicates an inconsistent record where the header mapping does not match the actual data length.
+            if (index.intValue() >= values.length) {
+                throw new IllegalArgumentException(
+                        String.format("The header mapping contains an index %s which is out of bounds for the actual record of length %s. " +
+                                      "This can happen if the record is inconsistent.", index.intValue(), values.length));
+            }
+            return values[index.intValue()];
+        } else {
+            return null;
+        }
     }
\ No newline at end of file
