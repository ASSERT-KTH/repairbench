diff --git a/tmp/41bf53e1-6215-430d-ae34-d50917a16cba_buggy.java b/tmp/a44638bc-fd97-4b0e-a6c1-fd4eb365b093_fixed.java
index fd32990..46f96de 100644
--- a/tmp/41bf53e1-6215-430d-ae34-d50917a16cba_buggy.java
+++ b/tmp/a44638bc-fd97-4b0e-a6c1-fd4eb365b093_fixed.java
@@ -1,20 +1,30 @@
     /**
      * Returns a value by name.
      *
      * @param name
      *            the name of the column to be retrieved.
      * @return the column value, or {@code null} if the column name is not found
      * @throws IllegalStateException
      *             if no header mapping was provided
      * @throws IllegalArgumentException
      *             if the record is inconsistent
      * @see #isConsistent()
      */
     public String get(final String name) {
         if (mapping == null) {
             throw new IllegalStateException(
                     "No header mapping was specified, the record values can't be accessed by name");
         }
         final Integer index = mapping.get(name);
-            return index != null ? values[index.intValue()] : null;
+        if (index == null) {
+            // Column name not found in the mapping
+            return null;
+        }
+        // Check for inconsistency: if the mapped index is out of bounds for the actual values array.
+        // This means the record does not have a value for the given header index.
+        if (index.intValue() >= values.length || index.intValue() < 0) {
+            throw new IllegalArgumentException(
+                    String.format("The record is inconsistent, the header '%s' with index %d is out of bounds for %d values", name, index.intValue(), values.length));
+        }
+        return values[index.intValue()];
     }
\ No newline at end of file
