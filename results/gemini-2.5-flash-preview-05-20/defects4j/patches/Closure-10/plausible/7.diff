diff --git a/tmp/447d24f2-14d6-4ed6-9293-c24489885eed_buggy.java b/tmp/89f2afd8-183b-4a75-9b07-2980290187f6_fixed.java
index 6fecc90..e33d43a 100644
--- a/tmp/447d24f2-14d6-4ed6-9293-c24489885eed_buggy.java
+++ b/tmp/89f2afd8-183b-4a75-9b07-2980290187f6_fixed.java
@@ -1,7 +1,40 @@
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+      // When 'recurse' is true, we want to know if 'n' *may* evaluate to a string
+      // through any of its possible execution paths.
+      // The original code used allResultsMatch, which returns true only if
+      // *all* possible results match the predicate. This is too strict for 'mayBeString'.
+      // We need to check if *any* path leads to a string.
+      // This typically involves logical OR (||) for branches.
+      switch (n.getType()) {
+        case Token.HOOK: // Ternary operator: condition ? trueCase : falseCase
+          // If either the trueCase or the falseCase may be a string, then the HOOK node may be a string.
+          return mayBeString(n.getChildAtIndex(1), true) || mayBeString(n.getChildAtIndex(2), true);
+
+        case Token.OR: // Logical OR: left || right
+          // The result can be either the left operand (if truthy) or the right operand (if left is falsy).
+          // If either may be a string, then the OR node may be a string.
+          return mayBeString(n.getFirstChild(), true) || mayBeString(n.getLastChild(), true);
+
+        case Token.AND: // Logical AND: left && right
+          // The result can be either the left operand (if falsy) or the right operand (if left is truthy).
+          // If either may be a string, then the AND node may be a string.
+          return mayBeString(n.getFirstChild(), true) || mayBeString(n.getLastChild(), true);
+
+        case Token.ADD: // Addition operator: left + right
+          // In JavaScript, if either operand of '+' is a string, the result is a string.
+          // So, if either operand may be a string, the ADD node may be a string.
+          return mayBeString(n.getFirstChild(), true) || mayBeString(n.getLastChild(), true);
+
+        default:
+          // For all other node types, the 'may be string' property is determined directly
+          // by the node's inherent type or properties, which mayBeStringHelper is assumed to handle.
+          // This includes literals (string, number, boolean), function calls (e.g., String(x)), etc.
+          return mayBeStringHelper(n);
+      }
     } else {
+      // When 'recurse' is false, perform a shallow check using the helper function.
+      // It's assumed mayBeStringHelper does not recursively analyze complex control flow nodes.
       return mayBeStringHelper(n);
     }
   }
\ No newline at end of file
