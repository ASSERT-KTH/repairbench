diff --git a/tmp/ac831fcd-bbcb-4bb7-ba8c-9b6666d7e95e_buggy.java b/tmp/a3f6f100-ab52-4473-b678-9321f07bdf3a_fixed.java
index 6fecc90..80f2cf8 100644
--- a/tmp/ac831fcd-bbcb-4bb7-ba8c-9b6666d7e95e_buggy.java
+++ b/tmp/a3f6f100-ab52-4473-b678-9321f07bdf3a_fixed.java
@@ -1,7 +1,39 @@
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+      // When 'recurse' is true, we need to determine if *any* possible value
+      // that the expression 'n' could evaluate to at runtime might be a string.
+      // The original code uses 'allResultsMatch', which typically checks if *all*
+      // possible results match a predicate. For a "may-be" string analysis,
+      // we need an "any-match" logic, especially for conditional expressions.
+
+      switch (n.getType()) {
+        case Token.HOOK: // Ternary operator: `condition ? trueValue : falseValue`
+          // If either `trueValue` or `falseValue` may be a string, then the entire HOOK expression may be a string.
+          return mayBeString(n.getChildAtIndex(1), true) ||
+                 mayBeString(n.getChildAtIndex(2), true);
+
+        case Token.OR: // Logical OR: `left || right`
+          // The result of `left || right` is either `left` (if truthy) or `right` (if falsy).
+          // Therefore, if either `left` or `right` may be a string, the OR expression may be a string.
+          return mayBeString(n.getFirstChild(), true) ||
+                 mayBeString(n.getLastChild(), true);
+
+        case Token.AND: // Logical AND: `left && right`
+          // The result of `left && right` is either `left` (if falsy) or `right` (if truthy).
+          // Therefore, if either `left` or `right` may be a string, the AND expression may be a string.
+          return mayBeString(n.getFirstChild(), true) ||
+                 mayBeString(n.getLastChild(), true);
+
+        default:
+          // For all other node types (e.g., literals, simple operations, function calls, variable references),
+          // `mayBeStringHelper` determines if the node's direct value or immediate outcome could be a string.
+          // This handles cases like string literals, 'typeof' operator, and '+' operator with a string operand.
+          return mayBeStringHelper(n);
+      }
     } else {
+      // If 'recurse' is false, we only check if the node 'n' itself (without
+      // considering potential values from conditional paths or complex expressions)
+      // may be a string. This is the base case handled by mayBeStringHelper.
       return mayBeStringHelper(n);
     }
   }
\ No newline at end of file
