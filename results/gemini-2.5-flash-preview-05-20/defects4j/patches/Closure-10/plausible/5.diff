diff --git a/tmp/541a484f-278d-43f8-9935-377b9e11da74_buggy.java b/tmp/0ffc153c-fcd2-4893-8d58-d67898a2a1a0_fixed.java
index 6fecc90..e89be25 100644
--- a/tmp/541a484f-278d-43f8-9935-377b9e11da74_buggy.java
+++ b/tmp/0ffc153c-fcd2-4893-8d58-d67898a2a1a0_fixed.java
@@ -1,7 +1,30 @@
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+      // The original code `return allResultsMatch(n, MAY_BE_STRING_PREDICATE);`
+      // was problematic for 'may be string' checks, especially for HOOK (ternary)
+      // nodes. `allResultsMatch` applies an 'AND' logic to the results of its
+      // branches, meaning all branches must satisfy the predicate. However, for
+      // 'mayBeString', if *any* branch of a HOOK node may be a string, the
+      // entire expression may be a string (OR logic).
+
+      // Handle HOOK (ternary operator) explicitly to apply OR logic.
+      if (n.isHook()) {
+        // If the true branch OR the false branch may be a string, then the HOOK node
+        // itself may evaluate to a string.
+        return mayBeString(n.getChildAtIndex(1), true) || mayBeString(n.getChildAtIndex(2), true);
+      }
+      // For other node types, if `recurse` is true, we delegate to `mayBeStringHelper`.
+      // `mayBeStringHelper` already handles recursive checks for other nodes like `ADD`
+      // (e.g., `a + b` where `a` or `b` may be string), and other string-producing
+      // operations. This makes `mayBeStringHelper` the comprehensive recursive checker
+      // for "may be string" in most cases.
+      return mayBeStringHelper(n);
     } else {
+      // If recurse is false, perform a shallow check. `mayBeStringHelper` is used
+      // for this purpose, handling literals and some immediate operations.
+      // Note: `mayBeStringHelper` itself has some recursive calls to `mayBeString(..., true)`,
+      // which might seem counter-intuitive for a 'helper' function or 'shallow' check.
+      // However, given the existing code structure, this is the consistent behavior.
       return mayBeStringHelper(n);
     }
   }
\ No newline at end of file
