diff --git a/tmp/4183681c-1742-467f-8d15-02ff6674c1c4_buggy.java b/tmp/b2646340-a343-4a69-b5ac-4d7501508bb2_fixed.java
index 6fecc90..f404b49 100644
--- a/tmp/4183681c-1742-467f-8d15-02ff6674c1c4_buggy.java
+++ b/tmp/b2646340-a343-4a69-b5ac-4d7501508bb2_fixed.java
@@ -1,7 +1,35 @@
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+      switch (n.getType()) {
+        case Token.HOOK: // Ternary operator: cond ? true_val : false_val
+          // If either the true branch or the false branch can be a string,
+          // then the entire expression may be a string.
+          return mayBeString(n.getFirstChild().getNext(), true) ||
+                 mayBeString(n.getLastChild(), true);
+        case Token.OR: // Logical OR: left || right
+          // The result of 'left || right' is 'left' if 'left' is truthy, otherwise 'right'.
+          // If 'left' can be a string, then the result can be a string.
+          // If 'left' is not a string but can be truthy, and 'right' can be a string, then the result can be a string.
+          // A simpler, conservative approach for "mayBeString" for OR is: if either side may be a string, the result may be a string.
+          // This is because if 'left' is a truthy string, it returns 'left'. If 'left' is a falsy string, it returns 'left'.
+          // If 'left' is not a string, and 'right' is a string, and 'left' is falsy, it returns 'right'.
+          // So, if either branch can evaluate to a string, the whole expression can.
+          return mayBeString(n.getFirstChild(), true) ||
+                 mayBeString(n.getLastChild(), true);
+        case Token.AND: // Logical AND: left && right
+          // The result of 'left && right' is 'left' if 'left' is falsy, otherwise 'right'.
+          // If 'left' can be a string, then the result can be a string (e.g., "" && 1 -> "").
+          // If 'left' is not a string but can be truthy (e.g., 1), and 'right' can be a string,
+          // then the result can be a string (e.g., 1 && "hello" -> "hello").
+          return mayBeString(n.getFirstChild(), true) ||
+                 (NodeUtil.mayBeTruthy(n.getFirstChild()) && mayBeString(n.getLastChild(), true));
+        default:
+          // For other node types, or if no specific branching logic is needed for 'recurse',
+          // delegate to the helper which performs a direct check on the node's type.
+          return mayBeStringHelper(n);
+      }
     } else {
+      // If recurse is false, only check the immediate node's type.
       return mayBeStringHelper(n);
     }
   }
\ No newline at end of file
