diff --git a/tmp/db9aed27-1bc9-438a-b131-594a0a8032f2_buggy.java b/tmp/e2da31b1-0d35-4a4d-83e8-49fb1189fd22_fixed.java
index 6fecc90..6cef402 100644
--- a/tmp/db9aed27-1bc9-438a-b131-594a0a8032f2_buggy.java
+++ b/tmp/e2da31b1-0d35-4a4d-83e8-49fb1189fd22_fixed.java
@@ -1,7 +1,24 @@
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+      // When 'recurse' is true, we want to determine if the given node, representing
+      // an expression, *may* evaluate to a string type. For complex expressions
+      // like ternary operators (HOOK), logical OR, or logical AND, this means
+      // checking if *any* of their possible execution paths or outcomes can result
+      // in a string.
+      //
+      // The original code used 'allResultsMatch'. This helper function, as its
+      // name suggests, typically returns true only if *all* possible results of
+      // the expression satisfy the given predicate. For 'mayBeString', this is
+      // incorrect because if one branch of a ternary is a string and another is a number,
+      // the expression *may* be a string, but 'allResultsMatch' would return false.
+      //
+      // To correctly identify if an expression *may* be a string, we need to
+      // check if *any* of its potential results satisfy the MAY_BE_STRING_PREDICATE.
+      // Therefore, 'anyResultsMatch' is the appropriate helper function here.
+      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);
     } else {
+      // When 'recurse' is false, we perform a simpler check, typically for
+      // immediate node types or non-recursive cases, handled by mayBeStringHelper.
       return mayBeStringHelper(n);
     }
   }
\ No newline at end of file
