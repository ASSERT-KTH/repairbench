diff --git a/tmp/142f5cb5-723d-4832-a252-fd76065c9c04_buggy.java b/tmp/392ab28a-c6a6-4d0f-8777-3b1b1bf39f51_fixed.java
index c1f30a5..5282a6d 100644
--- a/tmp/142f5cb5-723d-4832-a252-fd76065c9c04_buggy.java
+++ b/tmp/392ab28a-c6a6-4d0f-8777-3b1b1bf39f51_fixed.java
@@ -1,15 +1,27 @@
     /**
      * <p>Formats a <code>Calendar</code> object into the
      * supplied <code>StringBuffer</code>.</p>
      * 
      * @param calendar  the calendar to format
      * @param buf  the buffer to format into
      * @return the specified string buffer
      */
     public StringBuffer format(Calendar calendar, StringBuffer buf) {
         if (mTimeZoneForced) {
-            calendar = (Calendar) calendar.clone();
-            calendar.setTimeZone(mTimeZone);
+            // LANG-538: The previous implementation cloned the calendar and then set its timezone.
+            // This was problematic because Calendar.setTimeZone() does not change the
+            // underlying millisecond value, only how it's interpreted. If the calendar's
+            // internal state (like its fields) was already computed based on a different
+            // timezone, just changing the timezone might not force a re-computation,
+            // leading to incorrect formatting (e.g., displaying 08:00 from GMT-8 as 08:00 GMT).
+            //
+            // The correct fix is to create a *new* Calendar instance initialized with the
+            // formatter's desired timezone, and then set its time using the original
+            // calendar's absolute time (milliseconds since epoch). This ensures that
+            // all field computations are done strictly relative to the formatter's timezone.
+            final Calendar c = new GregorianCalendar(mTimeZone, mLocale);
+            c.setTimeInMillis(calendar.getTimeInMillis());
+            return applyRules(c, buf);
         }
         return applyRules(calendar, buf);
     }
\ No newline at end of file
