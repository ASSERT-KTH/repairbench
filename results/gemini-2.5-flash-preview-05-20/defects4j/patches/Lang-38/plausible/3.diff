diff --git a/tmp/f3612b7a-bfda-42a2-9bb3-df0adfe829f5_buggy.java b/tmp/4dd0d572-c71a-463f-8b9c-e2c6d734a69b_fixed.java
index c1f30a5..6ecdff5 100644
--- a/tmp/f3612b7a-bfda-42a2-9bb3-df0adfe829f5_buggy.java
+++ b/tmp/4dd0d572-c71a-463f-8b9c-e2c6d734a69b_fixed.java
@@ -1,15 +1,28 @@
     /**
      * <p>Formats a <code>Calendar</code> object into the
      * supplied <code>StringBuffer</code>.</p>
      * 
      * @param calendar  the calendar to format
      * @param buf  the buffer to format into
      * @return the specified string buffer
      */
     public StringBuffer format(Calendar calendar, StringBuffer buf) {
         if (mTimeZoneForced) {
-            calendar = (Calendar) calendar.clone();
-            calendar.setTimeZone(mTimeZone);
+            // When a Calendar object is passed, its own timezone might differ from
+            // the FastDateFormat's forced timezone (mTimeZone).
+            // To ensure the formatting is done according to the FastDateFormat's
+            // forced timezone, we need to ensure the Calendar object used for
+            // applying rules has that specific timezone and reflects the correct
+            // time instant.
+            // The approach is to get the time in milliseconds (which is timezone-independent)
+            // from the input calendar, and then create a new Calendar instance (or reinitialize
+            // the existing one effectively) using the formatter's timezone and locale,
+            // and set its time using the obtained milliseconds. This guarantees that
+            // when rules are applied, the Calendar's fields (like hour, day, etc.)
+            // are interpreted correctly relative to mTimeZone.
+            final long timeInMillis = calendar.getTimeInMillis();
+            calendar = new GregorianCalendar(mTimeZone, mLocale); // Use mLocale for correct locale-specific calculations
+            calendar.setTimeInMillis(timeInMillis);
         }
         return applyRules(calendar, buf);
     }
\ No newline at end of file
