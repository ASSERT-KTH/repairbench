diff --git a/tmp/3d3103d3-a1b8-42fd-a295-a4c879d42d5d_buggy.java b/tmp/23753ac4-6bef-4de9-8f04-24064699e363_fixed.java
index 9529ba6..50f16c6 100644
--- a/tmp/3d3103d3-a1b8-42fd-a295-a4c879d42d5d_buggy.java
+++ b/tmp/23753ac4-6bef-4de9-8f04-24064699e363_fixed.java
@@ -1,20 +1,30 @@
     public int writeValue() {
         // Most likely, object:
         if (_type == TYPE_OBJECT) {
-            _gotName = false;
-            ++_index;
-            return STATUS_OK_AFTER_COLON;
+            // In OBJECT context, can only write a value if a field name has just been written.
+            if (!_gotName) {
+                // If _gotName is false, it means a field name was expected but not provided.
+                // This indicates an invalid state for writing a value.
+                return STATUS_EXPECT_NAME;
+            }
+            // If _gotName is true, a name was just written, now we are writing its value.
+            _gotName = false; // Reset the flag, as the value for the current field has been processed.
+            ++_index; // Increment the count of entries (field-value pairs) in the object.
+            return STATUS_OK_AFTER_COLON; // A colon is needed before the value in an object.
         }
 
         // Ok, array?
         if (_type == TYPE_ARRAY) {
-            int ix = _index;
-            ++_index;
-            return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
+            int ix = _index; // Capture current index before incrementing.
+            ++_index; // Increment the count of elements in the array.
+            // For the first element (when ix was 0), no prefix. For subsequent elements, a comma is needed.
+            return (ix == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
         }
         
         // Nope, root context
-        // No commas within root context, but need space
-        ++_index;
-        return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;
+        // No commas within root context, but need space if multiple root values are allowed.
+        ++_index; // Increment the count of values at the root level.
+        // For the first root value (_index will be 1 after increment), no prefix.
+        // For subsequent root values, a space is typically used as a separator.
+        return (_index == 1) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;
     }
\ No newline at end of file
