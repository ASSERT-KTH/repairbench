diff --git a/tmp/b07d8a2e-8f92-4b1b-95ec-c2592c3ac620_buggy.java b/tmp/c0bcd171-250d-45f9-8ab1-4e524fe3b95c_fixed.java
index 3effef5..73f4a08 100644
--- a/tmp/b07d8a2e-8f92-4b1b-95ec-c2592c3ac620_buggy.java
+++ b/tmp/c0bcd171-250d-45f9-8ab1-4e524fe3b95c_fixed.java
@@ -1,73 +1,111 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
+        Object resultBean = null; // This will hold the bean once successfully built
+
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
-            // creator property?
+
+            if (resultBean != null) { // Bean already built, assign properties directly
+                // Regular property?
+                SettableBeanProperty prop = _beanProperties.find(propName);
+                if (prop != null) {
+                    try {
+                        prop.deserializeAndSet(p, ctxt, resultBean);
+                    } catch (Exception e) {
+                        wrapAndThrow(e, resultBean, propName, ctxt);
+                    }
+                    continue;
+                }
+                // Ignorable property?
+                if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                    handleIgnoredProperty(p, ctxt, handledType(), propName);
+                    continue;
+                }
+                // Fall-through: assumed to be unwrapped property, or unknown.
+                // Buffer it into `tokens` for `_unwrappedPropertyHandler`.
+                tokens.writeFieldName(propName);
+                tokens.copyCurrentStructure(p);
+
+                // Any-setter property? For the main bean.
+                if (_anySetter != null) {
+                    try {
+                        _anySetter.deserializeAndSet(p, ctxt, resultBean, propName);
+                    } catch (Exception e) {
+                        wrapAndThrow(e, resultBean, propName, ctxt);
+                    }
+                }
+                continue; // Processed this field
+            }
+
+            // Bean not yet built (resultBean is null), collect creator properties or buffer others
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
                     try {
-                        bean = creator.build(ctxt, buffer);
+                        resultBean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+                        return wrapInstantiationProblem(e, ctxt);
                     }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                    // Apply any non-creator properties that were buffered before bean creation
+                    resultBean = buffer.assignBufferedProperties(resultBean);
+                    // Now that `resultBean` is built, we break the loop.
+                    // The loop's `t = p.nextToken()` will correctly advance `p` to the next field.
+                    break;
                 }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
-                }
-                continue;
+                continue; // Creator property assigned, but not all creator properties satisfied.
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
-            // regular property? needs buffering
+            // Regular property? Needs buffering as bean not yet built
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
+            // Ignorable property?
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
+            // Fall-through: assumed to be unwrapped property, or unknown.
+            // Buffer it into `tokens` for `_unwrappedPropertyHandler`.
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
-            // "any property"?
+
+            // Any-setter property? For the main bean, when bean is not built.
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+        // We finished the loop (either by breaking when resultBean was built, or by reaching END_OBJECT).
+
+        // If resultBean is still null, it means not all creator properties were found before END_OBJECT.
+        if (resultBean == null) {
             try {
-            bean = creator.build(ctxt, buffer);
+                resultBean = creator.build(ctxt, buffer);
             } catch (Exception e) {
                 return wrapInstantiationProblem(e, ctxt);
             }
-        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+            // Apply any non-creator properties that were buffered (if any)
+            resultBean = buffer.assignBufferedProperties(resultBean);
+        }
+
+        tokens.writeEndObject(); // Close the token buffer's object
+
+        // Finally, process any unwrapped properties collected in `tokens`.
+        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, resultBean, tokens);
     }
\ No newline at end of file
