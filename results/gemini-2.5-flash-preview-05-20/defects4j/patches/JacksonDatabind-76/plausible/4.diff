diff --git a/tmp/ed6cd815-60e1-428a-8c7a-a3cfc1496014_buggy.java b/tmp/cf04ade2-aa6f-4306-ba89-27f2b09b252e_fixed.java
index 3effef5..6eb74b7 100644
--- a/tmp/ed6cd815-60e1-428a-8c7a-a3cfc1496014_buggy.java
+++ b/tmp/cf04ade2-aa6f-4306-ba89-27f2b09b252e_fixed.java
@@ -1,73 +1,70 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
+
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
-                }
-                continue;
+                // Just assign parameter; do not build bean or return early here.
+                buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));
+                continue; // Handled, move to next field
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
-                continue;
+                continue; // Handled, move to next field
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
+                continue; // Handled, move to next field
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
+                continue; // Handled, move to next field
             }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
+            // "any property"? This must come BEFORE buffering into 'tokens'
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                continue; // Handled, move to next field
             }
+
+            // If none of the above, it's an unwrapped property; buffer it for later
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
+            // No 'continue' needed as loop's p.nextToken() handles advancement.
         }
 
-        // We hit END_OBJECT, so:
+        // We hit END_OBJECT, meaning all properties from 'p' have been processed into buffers.
+        // Now, build the bean using creator properties and inject any buffered regular/any-setter properties.
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+
+        // 07-Mar-2017, tatu: [databind#1559] need to verify type for polymorphic cases
+        if (bean.getClass() != _beanType.getRawClass()) {
+            ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+            return null;
+        }
+
+        tokens.writeEndObject(); // Close the object in the TokenBuffer.
+        // Now, process all the unwrapped properties that were collected in 'tokens'.
+        // The main parser 'p' should be at END_OBJECT by now, so _unwrappedPropertyHandler will
+        // primarily process the 'tokens' buffer.
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
