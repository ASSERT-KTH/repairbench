diff --git a/tmp/204e0d25-235d-4fad-bf7f-ae31b52e5de1_buggy.java b/tmp/d9e97791-1ca9-460a-94af-992c24fa448d_fixed.java
index 3effef5..cbaeb31 100644
--- a/tmp/204e0d25-235d-4fad-bf7f-ae31b52e5de1_buggy.java
+++ b/tmp/d9e97791-1ca9-460a-94af-992c24fa448d_fixed.java
@@ -1,73 +1,108 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
+        Object bean = null; // Will hold the bean instance once created
+
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
+            p.nextToken(); // to point to value (value for propName)
+
+            // 1. If bean has already been created, we set properties directly on it
+            if (bean != null) {
+                // regular property?
+                SettableBeanProperty prop = _beanProperties.find(propName);
+                if (prop != null) {
+                    prop.deserializeAndSet(p, ctxt, bean);
+                    continue;
+                }
+                // Ignorable property?
+                if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                    // Pass bean for context if the handler needs it, otherwise handledType() is also fine.
+                    handleIgnoredProperty(p, ctxt, bean, propName); 
+                    continue;
+                }
+                // "any property"?
+                if (_anySetter != null) {
+                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);
+                    continue;
+                }
+                // If not handled by direct setting, ignorable, or anySetter -> it's an unwrapped property
+                tokens.writeFieldName(propName);
+                tokens.copyCurrentStructure(p);
+                continue;
+            }
+
+            // 2. If bean is not yet created, continue with property-based creation logic
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
+                    // All creator parameters assigned, build bean now
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                        // If wrapAndThrow throws, it exits. If it doesn't (rarely), bean remains null,
+                        // and the loop will eventually build the bean in the final block, or throw.
                         continue; 
                     }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
+
+                    // If bean was built successfully, check for polymorphic type
+                    if (bean != null && bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
+                        return null; // Return early if polymorphic and unwrapped not supported
                     }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                    // DO NOT RETURN or break here. Continue the loop to process remaining fields
+                    // using the `if (bean != null)` branch in subsequent iterations.
                 }
-                continue;
+                continue; // Creator property handled (either assigned or waiting for more params)
             }
-            // Object Id property?
+            // Object Id property? (Only applicable before bean is built by creator)
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
+            // "any property"? needs buffering
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                continue;
             }
+            // If not handled by creator, id, regular, ignorable, anySetter -> it's unwrapped or unknown
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
         }
 
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+        // Loop finishes (we hit END_OBJECT or no more fields).
+        // If bean wasn't built yet, build it now from buffered creator properties.
+        if (bean == null) {
             try {
                 bean = creator.build(ctxt, buffer);
             } catch (Exception e) {
                 return wrapInstantiationProblem(e, ctxt);
             }
+        }
+        
+        // If there are any buffered unwrapped properties, process them
+        // along with the remaining stream from 'p'.
+        tokens.writeEndObject(); // Close the token buffer object for consumption
+        
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
