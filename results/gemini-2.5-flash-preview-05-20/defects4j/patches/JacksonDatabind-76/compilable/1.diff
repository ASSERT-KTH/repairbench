diff --git a/tmp/686053f5-f979-4aee-9247-8cfc81b35afb_buggy.java b/tmp/46371994-a41f-454a-b7e9-39f36e161d52_fixed.java
index 3effef5..968b7c3 100644
--- a/tmp/686053f5-f979-4aee-9247-8cfc81b35afb_buggy.java
+++ b/tmp/46371994-a41f-454a-b7e9-39f36e161d52_fixed.java
@@ -1,73 +1,92 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                    // Issue 1: Removed redundant 't = p.nextToken();' here.
+                    // The parser 'p' is already positioned at the token AFTER the value
+                    // of the creator property that was just deserialized.
+                    
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+                        // Changed to use wrapInstantiationProblem for consistency with later block
+                        return wrapInstantiationProblem(e, ctxt);
                     }
+                    
+                    // Issue 2: Update 't' to reflect the actual current token after bean creation.
+                    // This is crucial for the subsequent 'while' loop to correctly consume remaining fields.
+                    t = p.getCurrentToken();
+
+                    // Now consume remaining fields from 'p' into 'tokens'
+                    // This loop collects all fields that appear AFTER the creator properties
+                    // are fulfilled, including regular properties and unwrapped properties.
                     while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                        p.nextToken(); // move to value
+                        tokens.copyCurrentStructure(p); // copy value (and possibly nested structure)
+                        t = p.nextToken(); // move to next field name or END_OBJECT
                     }
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
+                    // All properties (initial unwrapped + post-creator) are now in `tokens`
+                    // `p` is now at `END_OBJECT`.
+                    // The _unwrappedPropertyHandler will now process all properties from the `tokens` buffer
+                    // (and potentially the original parser 'p' if it has not reached END_OBJECT).
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
-                continue;
+                continue; // Creator property assigned, but not all found yet
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
+            // Issue 3: Reordered '_anySetter' check to come before buffering to tokens.
+            // If it's an 'any property', it should be buffered by the 'buffer' not copied to 'tokens'.
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                continue;
             }
+            // If not handled by any of the above, it's an unwrapped property / unknown property; buffer it to tokens
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
         }
 
         // We hit END_OBJECT, so:
         Object bean;
         // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+        // Process any unwrapped properties that were buffered throughout the loop
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
