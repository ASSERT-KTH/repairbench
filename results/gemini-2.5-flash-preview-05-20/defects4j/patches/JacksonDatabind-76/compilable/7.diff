diff --git a/tmp/61198485-560c-4922-9f7c-32e5c4bb9d42_buggy.java b/tmp/f3495770-5482-46d9-b774-e2cf4d3f3b88_fixed.java
index 3effef5..8f476a5 100644
--- a/tmp/61198485-560c-4922-9f7c-32e5c4bb9d42_buggy.java
+++ b/tmp/f3495770-5482-46d9-b774-e2cf4d3f3b88_fixed.java
@@ -1,73 +1,94 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                    // All creator properties have been buffered and can be used to build the bean.
+                    // 'p' is now positioned at the token *after* the deserialized creator property value.
+                    // This will be the first unwrapped property's FIELD_NAME or END_OBJECT.
+
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                        // This 'continue' is typically unreachable as wrapAndThrow usually rethrows.
+                        // If it were reached, parser state would be problematic.
                         continue;
                     }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+
+                    // Now, we need to process all remaining properties in the input stream.
+                    // These should be copied to the 'tokens' buffer for unwrapped handling.
+                    // The 't' variable of the outer 'for' loop is still holding the FIELD_NAME
+                    // of the creator property we just processed. We must advance the parser 'p'
+                    // and handle the remaining tokens within this block, then exit the outer loop.
+                    JsonToken currentTokenForUnwrapped = p.getCurrentToken(); // Get actual token 'p' is on
+
+                    // Loop through remaining fields and buffer them
+                    while (currentTokenForUnwrapped == JsonToken.FIELD_NAME) {
+                        String nextPropName = p.getCurrentName();
+                        p.nextToken(); // Move p to the value of 'nextPropName'
+
+                        tokens.writeFieldName(nextPropName); // Write the field name
+                        tokens.copyCurrentStructure(p);      // Copy the value (p is at value)
+
+                        currentTokenForUnwrapped = p.nextToken(); // Move p to the next FIELD_NAME or END_OBJECT
                     }
-                    tokens.writeEndObject();
+                    tokens.writeEndObject(); // Close the object in the token buffer
+
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
+                    // At this point, 'p' is at END_OBJECT (or potentially beyond).
+                    // The outer 'for' loop will effectively terminate because we are returning.
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
-                continue;
+                continue; // Not all creator properties assigned yet, continue to next field
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
         // We hit END_OBJECT, so:
         Object bean;
         // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
