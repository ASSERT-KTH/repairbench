diff --git a/tmp/3a2e67f2-df5b-4a36-9302-513abf6c1df7_buggy.java b/tmp/4281f988-e785-49d7-bcfc-2ef63f1b9454_fixed.java
index 3effef5..c3a7ded 100644
--- a/tmp/3a2e67f2-df5b-4a36-9302-513abf6c1df7_buggy.java
+++ b/tmp/4281f988-e785-49d7-bcfc-2ef63f1b9454_fixed.java
@@ -1,73 +1,123 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
-        tokens.writeStartObject();
+        tokens.writeStartObject(); // Start object in the buffer for unwrapped properties
 
-        JsonToken t = p.getCurrentToken();
+        JsonToken t = p.getCurrentToken(); // Should be FIELD_NAME
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
+
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
+                // If it's a creator property, assign its value to the buffer
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                    // All creator properties are now collected. Build the bean.
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+                        return wrapInstantiationProblem(e, ctxt);
                     }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
+
+                    // Bean is built. Now process remaining fields from the main parser `p`.
+                    // Any properties buffered in `buffer` (regular properties for the bean)
+                    // are implicitly set during `creator.build()`.
+                    // `tokens` currently contains any unwrapped properties encountered BEFORE this point.
+
+                    // IMPORTANT FIX: p.getCurrentToken() instead of p.nextToken()
+                    // `p` was already advanced by `creatorProp.deserialize(p, ctxt)`
+                    // to point to the token AFTER the value.
+                    t = p.getCurrentToken(); 
+
+                    // Consume remaining properties from `p` and apply them to the `bean`
+                    // or buffer them into `tokens` for the unwrapped handler.
+                    while (t == JsonToken.FIELD_NAME) {
+                        propName = p.getCurrentName();
+                        p.nextToken(); // to point to value
+
+                        SettableBeanProperty prop = _beanProperties.find(propName);
+                        if (prop != null) {
+                            try {
+                                prop.deserializeAndSet(p, ctxt, bean);
+                            } catch (Exception e) {
+                                wrapAndThrow(e, bean, propName, ctxt);
+                            }
+                        } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                            handleIgnoredProperty(p, ctxt, bean, propName);
+                        } else if (_anySetter != null) {
+                            // AnySetter present, apply directly to bean.
+                            _anySetter.deserializeAndSet(p, ctxt, bean, propName);
+                        } else {
+                            // Not handled by bean properties, ignorable, or any-setter.
+                            // Must be an unwrapped property. Buffer it into tokens.
+                            tokens.writeFieldName(propName);
+                            tokens.copyCurrentStructure(p);
+                        }
+                        t = p.nextToken(); // Advance to next field name or END_OBJECT
+                    }
+                    // `p` is now at END_OBJECT.
+                    // Finish the object in the buffered tokens.
+                    tokens.writeEndObject();
+
+                    // Finally, process all buffered unwrapped properties
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
+                // If not all creator parameters assigned yet, continue to next field.
                 continue;
             }
+
+            // Not a creator property. Handle as usual before bean is built:
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
+            
+            // FIX: Prioritize _anySetter over buffering for unwrapped properties
+            // If not creator, id, regular, or ignorable, check for _anySetter or unwrapped handler.
             if (_anySetter != null) {
+                // If _anySetter is present, buffer it with PropertyValueBuffer.
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            } else {
+                // If no _anySetter, then it's an unwrapped property, buffer it into tokens.
+                tokens.writeFieldName(propName);
+                tokens.copyCurrentStructure(p);
             }
         }
 
-        // We hit END_OBJECT, so:
+        // We hit END_OBJECT, but bean was not built mid-stream
+        // (all creator props not found, or not enough creator properties were found before END_OBJECT).
+        // Build the bean now.
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+
+        // `p` is at END_OBJECT. `tokens` holds all accumulated unwrapped properties.
+        tokens.writeEndObject(); // Ensure the buffered object is closed
+
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
