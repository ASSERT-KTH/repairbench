diff --git a/tmp/24b8f69b-c70e-4656-9370-100479ac663e_buggy.java b/tmp/74ce4a7c-edec-4ebc-ab8d-932440a09145_fixed.java
index 3effef5..b52581a 100644
--- a/tmp/24b8f69b-c70e-4656-9370-100479ac663e_buggy.java
+++ b/tmp/74ce4a7c-edec-4ebc-ab8d-932440a09145_fixed.java
@@ -1,73 +1,90 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+        // Skip START_OBJECT token if present, move to first FIELD_NAME
+        if (t == JsonToken.START_OBJECT) {
+            t = p.nextToken();
+        }
+
+        // Loop through fields until END_OBJECT
+        while (t == JsonToken.FIELD_NAME) {
             String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
+
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
+                p.nextToken(); // Advance to value token
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
+                        // wrapAndThrow typically throws an exception, so `return null` might be unreachable
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+                        return null; // Defensive return in case wrapAndThrow doesn't throw
                     }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                    // All creator properties processed, bean built.
+                    // Now consume remaining properties from the original parser
+                    // and copy them into the token buffer.
+                    // 'p' is now positioned at the token *after* the creator property value,
+                    // which is the next FIELD_NAME or END_OBJECT.
+                    while (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+                        tokens.writeFieldName(p.getCurrentName());
+                        p.nextToken(); // advance to value
+                        tokens.copyCurrentStructure(p); // copies value, advances p to next FIELD_NAME or END_OBJECT
                     }
-                    tokens.writeEndObject();
+                    tokens.writeEndObject(); // Close the object in the token buffer
+
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
+                    // Process the unwrapped properties stored in 'tokens'
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
-                continue;
-            }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
-                continue;
-            }
-            // regular property? needs buffering
+            } else if (buffer.readIdProperty(propName)) {
+                // readIdProperty is expected to consume the ID value and advance the parser.
+            } else {
+                // regular property?
                 SettableBeanProperty prop = _beanProperties.find(propName);
                 if (prop != null) {
+                    p.nextToken(); // Advance to value token
                     buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                    p.nextToken(); // Advance to value token
                     handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
-            }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
-            if (_anySetter != null) {
+                } else if (_anySetter != null) {
+                    p.nextToken(); // Advance to value token
+                    // _anySetter deserializes the value directly from the parser
                     buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                } else {
+                    // Unrecognized property: buffer for unwrapped handler
+                    tokens.writeFieldName(propName);
+                    p.nextToken(); // Advance to value token
+                    // copyCurrentStructure copies value (and children), advances p to next FIELD_NAME or END_OBJECT
+                    tokens.copyCurrentStructure(p);
                 }
             }
+            // Advance to the next token (next FIELD_NAME or END_OBJECT) for the next iteration
+            t = p.nextToken();
+        }
 
-        // We hit END_OBJECT, so:
+        // We hit END_OBJECT (loop terminated because t is not FIELD_NAME), so:
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+        // Process any unwrapped properties that were buffered before the bean was built
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
