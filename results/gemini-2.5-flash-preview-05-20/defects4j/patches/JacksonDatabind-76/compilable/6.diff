diff --git a/tmp/3912331d-2d74-4d76-8bf3-7aa42266868d_buggy.java b/tmp/faa52a3c-47d2-41ee-afdf-02878c49aafa_fixed.java
index 3effef5..324e0e0 100644
--- a/tmp/3912331d-2d74-4d76-8bf3-7aa42266868d_buggy.java
+++ b/tmp/faa52a3c-47d2-41ee-afdf-02878c49aafa_fixed.java
@@ -1,73 +1,83 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                    // All creator properties are now satisfied; can build bean
+                    // At this point, 'p' is positioned after the value of the current creator property.
+                    // We need to advance 'p' to the *next* field name or END_OBJECT
                     t = p.nextToken();
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         continue;
                     }
+                    // Bean built. Now, consume remaining properties from the parser 'p'
+                    // and copy them into 'tokens' for the unwrapped handler.
                     while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                        // When t is FIELD_NAME, p.getCurrentName() gives the field name
+                        tokens.writeFieldName(p.getCurrentName()); // Write the field name
+                        p.nextToken(); // Advance p to the value of the current field
+                        tokens.copyCurrentStructure(p); // Copy the value (which p is currently pointing to)
+                        t = p.nextToken(); // Advance t to the next token (next FIELD_NAME or END_OBJECT)
                     }
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
+                    // Process any unwrapped properties that were buffered (before and after bean creation)
+                    // and any remaining from 'p' (which should be just END_OBJECT at this point)
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
+            // Unrecognized/unwrapped property, buffer it
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
         // We hit END_OBJECT, so:
         Object bean;
         // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
