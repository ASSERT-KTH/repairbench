diff --git a/tmp/65fe61b4-bd78-4d07-90a1-9eefacdfb5b1_buggy.java b/tmp/419f7506-2404-4af7-9fb0-bcdb5080b31d_fixed.java
index fecb896..55d9225 100644
--- a/tmp/65fe61b4-bd78-4d07-90a1-9eefacdfb5b1_buggy.java
+++ b/tmp/419f7506-2404-4af7-9fb0-bcdb5080b31d_fixed.java
@@ -1,34 +1,70 @@
+import org.jsoup.parser.TokenQueue;
+
+public class TokenQueue {
+    // ... other methods ...
+
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        char currentQuote = 0; // Tracks if we are inside a single or double quote
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+
+            // Check for escapes first. If escaped, treat as literal and don't affect balance or quote state.
+            if (last == 0 || last != TokenQueue.ESC) { // TokenQueue.ESC is the escape char
+                // Handle quote characters (' or ")
+                if (c == '\'' || c == '"') {
+                    if (currentQuote == 0) { // Not currently in a quote, enter quote mode
+                        currentQuote = c;
+                    } else if (currentQuote == c) { // Found matching quote, exit quote mode
+                        currentQuote = 0;
+                    }
+                }
+
+                // Now, handle balancing characters based on whether we are in a quote or if open/close are the quote chars
+                if (open == close) { // Special case: open and close are the same character (e.g., for single quotes or custom delimiters like ~)
+                    if (c == open) { // If it's the delimiter character
+                        if (depth == 0) { // First occurrence of the delimiter (opening)
+                            depth++; // Enter balance mode
+                            if (start == -1) start = pos; // Mark start position (after consuming `open`)
+                        } else { // Second occurrence of the delimiter (closing)
+                            depth--; // Exit balance mode
+                        }
+                    }
+                } else { // Normal case: open and close are different characters (e.g., ( ))
+                    if (currentQuote == 0) { // Only change depth if not currently in a quote
                         if (c.equals(open)) {
                             depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                            if (start == -1) start = pos;
+                        } else if (c.equals(close)) {
                             depth--;
                         }
+                    }
+                }
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            // Update 'end' position (exclusive)
+            // `end` should be the position *before* the final `close` char that brings `depth` to 0.
+            // If `depth` becomes 0, the loop condition `depth > 0` fails, so `end` won't be updated for the last character.
+            // This means `end` captures the position after the last character *within* the balanced segment.
+            if (depth > 0 && start != -1) // use start != -1 to ensure we've begun matching
+                end = pos; // pos is index after the current char 'c'
             last = c;
         } while (depth > 0);
+
         return (end >= 0) ? queue.substring(start, end) : "";
     }
+}
\ No newline at end of file
