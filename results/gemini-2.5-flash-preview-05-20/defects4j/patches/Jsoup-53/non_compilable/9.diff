diff --git a/tmp/9aa77c86-964e-404d-a691-64958104d15b_buggy.java b/tmp/a6223746-4676-4b35-8368-3447a28b097b_fixed.java
index fecb896..ba023c2 100644
--- a/tmp/9aa77c86-964e-404d-a691-64958104d15b_buggy.java
+++ b/tmp/a6223746-4676-4b35-8368-3447a28b097b_fixed.java
@@ -1,34 +1,103 @@
+import static org.jsoup.parser.TokenQueue.ESC; // Assuming ESC is a static final char defined in TokenQueue
+
+public class TokenQueue { // This is a placeholder for the class, the fix applies to the method within it.
+    private String queue;
+    private int pos = 0; // Current position in the queue
+
+    // Assuming ESC is defined in TokenQueue class like this:
+    private static final char ESC = '\\';
+
+    public TokenQueue(String queue) {
+        this.queue = queue;
+    }
+
+    public boolean isEmpty() {
+        return pos >= queue.length();
+    }
+
+    public Character consume() {
+        if (isEmpty()) return null; // Or throw an exception, depending on TokenQueue's actual behavior
+        return queue.charAt(pos++);
+    }
+
+    // Other TokenQueue methods would be here, but only chompBalanced is being fixed.
+    // Methods like substring, matches, chompTo, etc., are assumed to exist and work as in Jsoup's TokenQueue.
+    public String substring(int start, int end) {
+        return queue.substring(start, end);
+    }
+
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        char inQuote = 0; // The current quote character if we are inside a quoted string
 
+        // Special handling for when open and close characters are the same (e.g., matching a quoted string like 'foo')
+        // The QueryParser calls this function *after* consuming the initial quote, so we are looking for the *next* matching quote.
+        if (open == close) {
+            StringBuilder sb = new StringBuilder();
             do {
                 if (isEmpty()) break;
                 Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+
+                if (last == ESC) { // Current character 'c' is escaped, append it literally
+                    sb.append(c);
+                } else if (c == open) { // Found the closing delimiter (which is 'open')
+                    // This 'open' character marks the end of the balanced string.
+                    // The content collected in sb is the balanced string.
+                    return sb.toString();
+                } else { // Not escaped, and not the closing delimiter
+                    sb.append(c);
+                }
+                last = c;
+            } while (true); // Continue until break (either empty or closing delimiter found)
+            return sb.toString(); // If loop breaks due to isEmpty() (unbalanced)
+        }
+
+        // Original logic for open != close (balanced parens/brackets etc.)
+        do {
+            if (isEmpty()) break;
+            Character c = consume();
+
+            if (last == ESC) { // Current char 'c' is escaped, its special meaning is ignored.
+                // Do nothing to depth or quote state. Just part of the string.
+            } else if (inQuote != 0) { // Currently inside an inner quoted string
+                if (c == inQuote) { // Found the matching closing inner quote
+                    inQuote = 0; // Exit inner quote mode
+                }
+                // Else, still in inner quote, continue
+            } else { // Not escaped, not in an inner quote
+                if (c == '\'' || c == '"') { // Found a new inner opening quote
+                    inQuote = c; // Enter inner quote mode
+                } else if (c.equals(open)) {
                     depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                    if (start == -1) // If this is the very first opener found
+                        start = pos; // 'pos' is *after* the consumed 'c', so it marks the start of content
+                } else if (c.equals(close)) {
                     depth--;
                 }
+            }
+
+            // 'end' tracks the position *after* the last character that was part of the *balanced content*.
+            // It is updated as long as we are still within the balanced block (depth > 0).
+            // 'last != 0' ensures this is not the very first character consumed by the function.
+            if (depth > 0 && last != 0) {
+                end = pos; // 'pos' is *after* 'c', so this correctly captures the end for substring(start, end)
+            }
+            last = c; // Update 'last' for the next iteration
+
+        } while (depth > 0); // Loop until balanced.
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
         return (end >= 0) ? queue.substring(start, end) : "";
     }
+}
\ No newline at end of file
