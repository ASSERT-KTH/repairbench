diff --git a/tmp/b45a430d-217a-4319-b1da-f26c76b1df60_buggy.java b/tmp/14bec4dd-f5fc-4da1-9516-f48485faed20_fixed.java
index fecb896..7903211 100644
--- a/tmp/b45a430d-217a-4319-b1da-f26c76b1df60_buggy.java
+++ b/tmp/14bec4dd-f5fc-4da1-9516-f48485faed20_fixed.java
@@ -1,34 +1,111 @@
+public class TokenQueue {
+    // Assuming 'queue' and 'pos' are fields of the TokenQueue class.
+    // Also, 'ESC' is a protected char field, typically '\\'.
+    protected String queue;
+    protected int pos;
+    protected char ESC = '\\'; // Assuming this is defined in TokenQueue
+
+    public TokenQueue(String data) {
+        this.queue = data;
+        this.pos = 0;
+    }
+
+    public boolean isEmpty() {
+        return pos >= queue.length();
+    }
+
+    public Character consume() {
+        if (isEmpty()) {
+            return null;
+        }
+        return queue.charAt(pos++);
+    }
+
+    // This is the function to be fixed
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
-        int depth = 0;
-        char last = 0;
+        // Capture the absolute starting position in the queue for the content to be extracted.
+        // For the 'open == close' case, this is the start of the content after the first quote.
+        // For the 'open != close' case, this will be updated when the first 'open' character is consumed.
+        int contentStartPos = pos;
+
+        // Scenario 1: 'open' and 'close' are the same character (e.g., for matching single/double quotes).
+        // In Jsoup's SelectorParser, this function is called *after* the initial opening quote is consumed.
+        // So 'pos' is already at the start of the quoted content.
+        if (open == close) {
+            char lastChar = 0; // Local variable for tracking escape within this specific scenario.
+
+            while (!isEmpty()) {
+                char c = consume();
+                if (lastChar == ESC) { // If previous char was ESC, treat current char as literal.
+                    lastChar = 0; // Reset escape state.
+                } else if (c == open) { // Found the matching quote (which is 'open').
+                    // Return the substring from 'contentStartPos' up to (but not including) the current 'c'.
+                    return queue.substring(contentStartPos, pos - 1);
+                } else if (c == ESC) { // Found an escape character.
+                    lastChar = c; // Set escape state for the next char.
+                }
+                // All other characters are part of the content.
+            }
+            // If we reach here, it means no matching 'close' char was found before the end of the queue.
+            return "";
+        }
+
+        // Scenario 2: 'open' and 'close' are different characters (e.g., parentheses, brackets).
+        // This is the traditional depth-balancing scenario.
+        // This function is expected to consume the initial 'open' character itself if it's the first one.
+        int startIdx = -1; // Absolute start index in the queue for the extracted string.
+        int endIdx = -1;   // Absolute end index in the queue for the extracted string.
+        int depth = 0;     // Current balance depth.
+        char last = 0;     // Last consumed character, for handling escape sequences.
+        char currentQuote = 0; // ' or " if inside a quote, 0 otherwise.
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+
+            if (last == ESC) { // If the previous character was an escape, this character is literal.
+                last = 0; // Reset escape state for the next character.
+            } else if (currentQuote != 0) { // If currently inside a quoted string.
+                if (c.equals(currentQuote)) { // Found the matching closing quote.
+                    currentQuote = 0; // Exit quoted state.
+                }
+                // Otherwise, character 'c' is part of the quoted string and does not affect 'depth'.
+            } else { // Not escaped, not in a quote - check for open/close/new quote.
                 if (c.equals(open)) {
                     depth++;
-                    if (start == -1)
-                        start = pos;
+                    if (startIdx == -1) { // This is the first time we've encountered an 'open' character.
+                        startIdx = pos; // 'pos' is the position *after* 'c', so 'startIdx' points after the opening char.
                     }
-                else if (c.equals(close))
+                } else if (c.equals(close)) {
                     depth--;
+                } else if (c.equals('\'') || c.equals('"')) { // Found an unescaped quote character.
+                    currentQuote = c; // Enter quoted state.
+                }
+            }
+
+            // 'endIdx' should capture the position *after* the last character that is part of the
+            // balanced string. This means it should update as long as 'depth > 0'.
+            // When 'depth' becomes 0, the character 'c' that caused it to drop (the 'close' char) is not included.
+            // 'last != 0' ensures we've processed at least one character before setting an 'endIdx'.
+            if (depth > 0 && last != 0) {
+                endIdx = pos; // 'pos' is the position *after* 'c', correctly marking the end boundary for substring.
             }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+            last = c; // Store current character as 'last' for the next iteration's escape check.
+
+        } while (depth > 0); // Continue as long as we are within a balanced section.
+
+        // If 'endIdx' is still -1 (meaning no balanced string was found or depth never increased), return empty string.
+        // Otherwise, return the substring.
+        return (endIdx >= 0) ? queue.substring(startIdx, endIdx) : "";
+    }
 }
\ No newline at end of file
