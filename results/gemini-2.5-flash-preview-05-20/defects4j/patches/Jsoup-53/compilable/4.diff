diff --git a/tmp/cc2629e0-514c-4405-ad11-8afcad9c8504_buggy.java b/tmp/fd54c726-ea43-40a6-a20d-f195f9e0b924_fixed.java
index fecb896..7b6eea6 100644
--- a/tmp/cc2629e0-514c-4405-ad11-8afcad9c8504_buggy.java
+++ b/tmp/fd54c726-ea43-40a6-a20d-f195f9e0b924_fixed.java
@@ -1,34 +1,64 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
-        int end = -1;
+        int end = 0; // Initialize end to 0, which is safe for substring(start, 0) if start is 0, or results in "" if start is -1
         int depth = 0;
-        char last = 0;
+        char inQuote = 0; // 0 for no quote, '\'' for single quote, '"' for double quote.
+        boolean lastCharWasEscape = false;
+        // Assuming ESC is a constant in the Tokeniser class, typically '\'
+        final char ESC = '\\'; 
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+
+            if (lastCharWasEscape) {
+                // If the last character was an escape, the current character 'c' is literal.
+                // Reset escape state for the next character.
+                lastCharWasEscape = false;
+            } else if (c == ESC) {
+                // Current character is an escape. Mark for the next character.
+                lastCharWasEscape = true;
+                // Don't process this escape character further, but include it in the potential return string
+            } else if (inQuote != 0) {
+                // Currently inside a quote, check if the current character closes the quote.
+                if (c == inQuote) {
+                    inQuote = 0; // Exited quote
+                }
+                // If 'c' is not the closing quote, it's part of the quoted string and should be ignored
+                // for balancing purposes.
+            } else if (c == '\'' || c == '"') {
+                // Not inside a quote, and the current character is a quote character.
+                // Enter the quote state.
+                inQuote = c;
+            } else if (c == open) {
+                // Not escaped, not in a quote, and current char is the opener.
                 depth++;
-                    if (start == -1)
-                        start = pos;
+                if (start == -1) {
+                    start = pos; // 'pos' is already after consumed 'c', so it's the index of the char *after* the opener.
                 }
-                else if (c.equals(close))
+            } else if (c == close) {
+                // Not escaped, not in a quote, and current char is the closer.
                 depth--;
             }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+            // Update 'end' position only if we are currently inside the balanced string (depth > 0)
+            // and the current character was not an escape character (as escape chars don't contribute to the content length normally)
+            // The original logic `last != 0` for `end` update is replaced by `!lastCharWasEscape` for clarity.
+            if (depth > 0 && !lastCharWasEscape) {
+                end = pos; // 'pos' is already after 'c', so it's the exclusive end index for substring.
+            }
+        } while (depth > 0); // Continue as long as we are within a balanced block
+
+        // If 'start' was never set (meaning no 'open' character was found or string was empty),
+        // return an empty string. Otherwise, return the substring.
+        return (start == -1) ? "" : queue.substring(start, end);
     }
