diff --git a/tmp/6e4a897a-faa5-4793-b05b-a08bd2aee839_buggy.java b/tmp/e8c6559e-102f-455c-991d-5ed8568d4d4a_fixed.java
index fecb896..12c2a52 100644
--- a/tmp/6e4a897a-faa5-4793-b05b-a08bd2aee839_buggy.java
+++ b/tmp/e8c6559e-102f-455c-991d-5ed8568d4d4a_fixed.java
@@ -1,34 +1,69 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
+        // Assuming ESC is defined in CharacterReader as '\\'
+        final char ESC = '\\';
+
         int start = -1;
         int end = -1;
         int depth = 0;
-        char last = 0;
+        char lastChar = 0; // last character consumed (for escape sequence tracking)
+        char quoteChar = 0; // The current quote character (', " or 0 if not in a quote)
 
         do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (isEmpty()) {
+                break; // No more characters to consume
+            }
+            Character c = consume(); // Get the current character
+
+            if (lastChar == ESC) {
+                // This character `c` was escaped by the previous `ESC`.
+                // Treat it as literal content. It does not affect depth or quote state.
+            } else if (quoteChar != 0) {
+                // We are currently inside a quoted string.
+                if (c == quoteChar) {
+                    // Found the matching closing quote. Exit quote mode.
+                    quoteChar = 0;
+                }
+                // Else, `c` is just part of the quoted string, it doesn't affect depth.
+            } else {
+                // Not escaped, and not in a quote. This character can be:
+                // 1. An opener
+                // 2. A closer
+                // 3. A quote character (starting a new quote)
+                // 4. Any other literal character
+                if (c == open) {
                     depth++;
-                    if (start == -1)
-                        start = pos;
+                    if (start == -1) {
+                        start = pos; // `pos` is the index *after* `c`. Correct for content start.
                     }
-                else if (c.equals(close))
+                } else if (c == close) {
                     depth--;
+                } else if (c == '\'' || c == '"') {
+                    // Found an unescaped, unquoted single or double quote.
+                    // Enter quote mode.
+                    quoteChar = c;
+                }
             }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
+            // Update `end` to mark the position after the current character if we are still within
+            // a balanced block (depth > 0) and it's not the very first character (which was the opener).
+            // `lastChar != 0` ensures `end` is not updated for the opener itself, which is already
+            // accounted for by `start`.
+            if (depth > 0 && lastChar != 0) {
+                end = pos;
+            }
+            lastChar = c; // Update lastChar for the next iteration
         } while (depth > 0);
+
+        // Return the substring between `start` and `end`.
+        // If `end` is still -1, it means no balanced content was found (e.g., just `(`).
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
