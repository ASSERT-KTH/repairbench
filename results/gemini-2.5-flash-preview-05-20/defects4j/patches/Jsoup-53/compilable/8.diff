diff --git a/tmp/b7c6edfd-6254-43a6-88cd-ef965102abec_buggy.java b/tmp/0f8d0dcd-56be-4b87-8c6e-fc10ff9c297a_fixed.java
index fecb896..debaccf 100644
--- a/tmp/b7c6edfd-6254-43a6-88cd-ef965102abec_buggy.java
+++ b/tmp/0f8d0dcd-56be-4b87-8c6e-fc10ff9c297a_fixed.java
@@ -1,34 +1,66 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
-        char last = 0;
+        char last = 0; // Previous character, used for escape checking
+        char inQuote = 0; // Tracks if we are currently inside a single (') or double (") quote
 
         do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
+            if (isEmpty()) break; // If queue is empty, stop
+            Character c = consume(); // Consume the next character from the queue
+
+            // Check if the current character 'c' is escaped by the previous 'last' character.
+            // `ESC` is assumed to be a constant character (e.g., '\') defined elsewhere in the class.
+            boolean escaped = (last == ESC);
+
+            if (inQuote != 0) { // Currently inside a quote
+                // If we find the matching closing quote and it's not escaped, exit quote mode.
+                if (c.equals(inQuote) && !escaped) {
+                    inQuote = 0; // Exit quote mode
+                }
+                // If 'c' is escaped, or not the matching quote, it's treated as a literal character
+                // within the quote and does not affect 'depth'.
+            } else { // Not currently in a quote
+                // Only process special characters (open, close, new quote) if 'c' is not escaped.
+                if (!escaped) {
                     if (c.equals(open)) {
                         depth++;
-                    if (start == -1)
+                        if (start == -1) { // If this is the first opening character of the outermost balanced section
+                            // 'pos' is the position *after* consuming 'c'. So 'pos' marks the start of the content.
                             start = pos;
                         }
-                else if (c.equals(close))
+                    } else if (c.equals(close)) {
                         depth--;
+                    } else if (c.equals('\'') || c.equals('"')) { // Found an opening single or double quote
+                        inQuote = c; // Enter quote mode, and remember which type of quote it was
                     }
+                }
+            }
+
+            // Update the 'end' position as long as we are still within the balanced section (depth > 0).
+            // 'pos' is the position *after* consuming 'c'. By updating 'end' to 'pos', we effectively extend
+            // the end of the substring to just after the current character 'c'.
+            // When 'depth' finally becomes 0 (after consuming the outermost 'close' character),
+            // this 'if' condition will be false, and 'end' will retain its value from the last
+            // character that was part of the balanced content, which is the correct exclusive end index for `substring`.
+            if (depth > 0) {
+                end = pos;
+            }
+
+            last = c; // Store the current character for the next iteration's escape checking
+        } while (depth > 0); // Continue processing characters as long as we are inside a balanced section
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
+        // If 'start' is still -1, it means no 'open' character was ever found, so no balanced string was extracted.
+        // In this case, 'end' would also likely be -1 or 0, so the condition 'end >= 0' handles this.
+        // Return the extracted substring, or an empty string if no valid match was found.
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
