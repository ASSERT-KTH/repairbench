diff --git a/tmp/b858f59c-7598-4534-83a7-dab96b5f6f66_buggy.java b/tmp/647e5b0c-9893-4e93-9adc-46901444df5e_fixed.java
index fecb896..625da08 100644
--- a/tmp/b858f59c-7598-4534-83a7-dab96b5f6f66_buggy.java
+++ b/tmp/647e5b0c-9893-4e93-9adc-46901444df5e_fixed.java
@@ -1,34 +1,66 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        char quoteChar = 0; // 0 = no quote, ' = single, " = double
+        boolean hitOpen = false; // Flag to indicate if the first 'open' char has been encountered when open == close
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+
+            boolean isEscaped = (last == ESC);
+
+            // Handle quote state: if 'c' is an unescaped quote character, toggle quoteChar state
+            if (!isEscaped && (c == '\'' || c == '"')) {
+                if (quoteChar == 0) {
+                    quoteChar = c; // Entering a quote
+                } else if (quoteChar == c) {
+                    quoteChar = 0; // Exiting a quote
+                }
+            }
+
+            // Determine if 'c' should affect depth (i.e., if it's an 'open' or 'close' character)
+            // It should affect depth if:
+            // 1. It's not escaped.
+            // 2. We are not currently in a quote, OR 'c' is the active quote character (meaning the balancing is around quotes).
+            if (!isEscaped && (quoteChar == 0 || c == quoteChar)) {
+                if (c == open) {
+                    if (open == close) { // Special case: opener and closer are the same char (e.g., ' for 'string')
+                        if (!hitOpen) { // First occurrence of this char (opener)
                             depth++;
-                    if (start == -1)
-                        start = pos;
+                            hitOpen = true;
+                            if (start == -1) start = pos;
+                        } else { // Second occurrence of this char (closer)
+                            depth--;
+                        }
+                    } else { // Normal case: opener and closer are different chars (e.g., ()
+                        depth++;
+                        if (start == -1) start = pos;
                     }
-                else if (c.equals(close))
+                } else if (c == close) {
                     depth--;
                 }
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            // 'end' is set to the position *after* the current character 'c' if depth is still positive.
+            // This ensures 'end' tracks the actual end of the content (exclusive for substring).
+            // `last != 0` ensures `end` is not set on the very first character if `depth` starts at 0 and increments.
+            if (depth > 0 && last != 0) {
+                end = pos;
+            }
             last = c;
-        } while (depth > 0);
+        } while (depth > 0); // Continue as long as we are within a balanced pair
+
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
