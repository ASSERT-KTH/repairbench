diff --git a/tmp/beba7a72-c59f-403a-9729-fe04123669db_buggy.java b/tmp/f17e4800-f766-4cb0-b4c0-f734321885eb_fixed.java
index fecb896..c07df4a 100644
--- a/tmp/beba7a72-c59f-403a-9729-fe04123669db_buggy.java
+++ b/tmp/f17e4800-f766-4cb0-b4c0-f734321885eb_fixed.java
@@ -1,34 +1,60 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inQuote = false; // Added to track if we are inside a quoted string
 
         do {
             if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
+            Character c = consume(); // pos advances
+
+            // Handle quoted sections within the balanced string.
+            // If it's a quote char and not escaped, toggle inQuote state.
+            if (c == '\'' || c == '"') {
+                if (last == 0 || last != ESC) { // Check if the quote itself is not escaped
+                    inQuote = !inQuote;
+                }
+            }
+
+            // Process open/close characters only if not inside a quote and not escaped
+            if (!inQuote) {
+                // If 'c' is an open or close char, and it's not escaped
+                if (last == 0 || last != ESC) { // Check if 'c' (the current char) is escaped by 'last'
                     if (c.equals(open)) {
                         depth++;
-                    if (start == -1)
-                        start = pos;
+                        if (start == -1) { // Set start when depth goes from 0 to 1
+                            start = pos; // pos is after current char, so 'start' points to beginning of content
                         }
-                else if (c.equals(close))
+                    } else if (c.equals(close)) {
                         depth--;
                     }
+                }
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
+            // 'end' captures the position after the last char of the balanced string.
+            // It will not include the final 'close' char in the returned substring.
+            // When depth becomes 0, this condition `depth > 0` becomes false,
+            // so `end` remains at the position *before* the final `close` char.
+            // `start != -1` ensures `end` is updated only if we're parsing content
+            // that started with an 'open' character.
+            if (depth > 0 && start != -1) {
+                end = pos;
+            }
+            
+            last = c; // Update last for the next iteration
         } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+        // If no 'open' was found, or the string was empty, or immediately closed without content, return empty.
+        // `end >= start` ensures a valid substring range, `start != -1` ensures content was found after an 'open'.
+        return (end >= start && start != -1) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
