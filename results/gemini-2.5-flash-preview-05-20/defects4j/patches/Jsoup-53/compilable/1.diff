diff --git a/tmp/71c1c9b9-08e9-4259-a4f3-bb24bc8428f8_buggy.java b/tmp/01e1ea64-1ac0-458f-bfd0-af33d1f0f764_fixed.java
index fecb896..637b55b 100644
--- a/tmp/71c1c9b9-08e9-4259-a4f3-bb24bc8428f8_buggy.java
+++ b/tmp/01e1ea64-1ac0-458f-bfd0-af33d1f0f764_fixed.java
@@ -1,34 +1,52 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        char inQuote = 0; // 0 if not in a quote, ' or " if in a quote
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+
+            if (last == ESC) { // The current character 'c' is escaped. Treat it as a literal.
+                // It does not affect quote state or depth.
+            } else if (inQuote != 0) { // Currently inside a quote
+                if (c.equals(inQuote)) {
+                    inQuote = 0; // Found matching quote, exit quote state
+                }
+                // Otherwise, 'c' is just a character inside the quote; ignore open/close/other quotes.
+            } else { // Not escaped, and not currently in a quote
                 if (c.equals(open)) {
                     depth++;
                     if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                        start = pos; // pos is index after consuming 'c'
+                } else if (c.equals(close)) {
                     depth--;
+                } else if (c.equals('\'')) { // Potential start of single quote
+                    inQuote = '\'';
+                } else if (c.equals('"')) { // Potential start of double quote
+                    inQuote = '"';
+                }
             }
 
+            // 'end' is the position after the last character *before* the final closing 'close' char.
+            // This condition ensures 'end' is not set for the very first 'open' char itself,
+            // and accurately tracks the end of the balanced string content.
             if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
+                end = pos; // pos is index after 'c'
+            
+            last = c; // Update 'last' to the current character for the next iteration's escape check
         } while (depth > 0);
+
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
