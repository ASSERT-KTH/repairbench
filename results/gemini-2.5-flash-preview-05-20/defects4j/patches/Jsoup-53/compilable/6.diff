diff --git a/tmp/88a0cb9b-d942-46ed-82a9-c9c6ddeaea89_buggy.java b/tmp/748ebf15-2100-4823-a0a1-34cccbdf97e1_fixed.java
index fecb896..7c83c46 100644
--- a/tmp/88a0cb9b-d942-46ed-82a9-c9c6ddeaea89_buggy.java
+++ b/tmp/748ebf15-2100-4823-a0a1-34cccbdf97e1_fixed.java
@@ -1,34 +1,73 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        char inQuote = 0; // 0, ' or " - tracks if we are inside an internal quote
+        final char ESC = '\\'; // Jsoup's Tokeniser.ESC is '\\'
 
         do {
             if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
+            Character c = consume(); // pos is now after c
+
+            if (last == ESC) {
+                // Character 'c' was escaped by 'last', so it is treated as a literal.
+                // It does not affect depth or internal quote state.
+            } else {
+                if (inQuote != 0) { // Currently inside an internal quote
+                    if (c.equals(inQuote)) { // Found matching closing quote
+                        inQuote = 0; // Exit internal quote mode
+                    }
+                    // Else, consume character as part of the internal quoted string
+                } else { // Not currently inside an internal quote
                     if (c.equals(open)) {
+                        // Special handling for when 'open' and 'close' are the same character
+                        if (open == close) {
+                            if (depth == 0) { // Found the very first opener
                                 depth++;
-                    if (start == -1)
+                            } else { // Found the matching closer
+                                depth--;
+                            }
+                        } else { // Normal case: 'open' and 'close' are different
+                            depth++;
+                        }
+
+                        if (start == -1) // Set start position only for the first effective opening
                             start = pos;
-                }
-                else if (c.equals(close))
+                    } else if (c.equals(close)) {
+                        // This block only applies if 'open' and 'close' are different.
+                        // If 'open' == 'close', the balancing logic is handled in the 'c.equals(open)' block.
+                        if (open != close) {
                             depth--;
                         }
+                    } else if (c.equals('\'') || c.equals('"')) { // Found an opening internal quote
+                        inQuote = c; // Enter internal quote mode
+                    }
+                }
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
+            // Update end marker: as long as we are inside the balanced expression (depth > 0)
+            // and have consumed at least one char (last != 0 initially, meaning first 'open' was processed).
+            // 'pos' is the index after 'c' was consumed.
+            // 'start' is the index after the initial 'open' character.
+            // Therefore, 'queue.substring(start, end)' correctly captures content between 'open' and 'close'.
+            if (depth > 0 && last != 0) {
+                end = pos;
+            }
+
+            last = c; // Update last for the next iteration
+        } while (depth > 0); // Continue until the outermost balanced pair is closed
+
+        // If 'end' was never updated (e.g., no matching close found, or queue was empty)
+        // an empty string is returned. Otherwise, the substring is returned.
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
