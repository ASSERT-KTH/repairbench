diff --git a/tmp/6658de3e-2ad2-4d97-9ecc-49ae9fb9d1ab_buggy.java b/tmp/ae50b394-5d90-4a99-8404-bb3be550103a_fixed.java
index 6c0aa19..c99d4fa 100644
--- a/tmp/6658de3e-2ad2-4d97-9ecc-49ae9fb9d1ab_buggy.java
+++ b/tmp/ae50b394-5d90-4a99-8404-bb3be550103a_fixed.java
@@ -1,20 +1,25 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
+        // The 'buf' field is typically a byte array (byte[] buf = new byte[512];).
+        // For a byte array, 'capacity()' is not a valid method.
+        // The correct way to get the size of a byte array is using its 'length' field.
+        // Using 'buf.capacity()' likely leads to an incorrect buffer size for PushbackInputStream,
+        // which can cause data corruption or incorrect reading from the stream.
+        in = new PushbackInputStream(inputStream, buf.length);
         this.allowStoredEntriesWithDataDescriptor =
             allowStoredEntriesWithDataDescriptor;
         // haven't read anything so far
     }
\ No newline at end of file
