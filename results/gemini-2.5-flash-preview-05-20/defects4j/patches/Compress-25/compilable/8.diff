diff --git a/tmp/fa05d136-a014-4f49-81eb-f2438d6616f7_buggy.java b/tmp/81e63be3-3148-4562-8c99-6b07f0fd8a1e_fixed.java
index 6c0aa19..4f12df9 100644
--- a/tmp/fa05d136-a014-4f49-81eb-f2438d6616f7_buggy.java
+++ b/tmp/81e63be3-3148-4562-8c99-6b07f0fd8a1e_fixed.java
@@ -1,20 +1,25 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
+        // Fix: Ensure PushbackInputStream is initialized with a robust buffer size.
+        // The original code used `buf.capacity()`. If `buf` was null or its capacity
+        // was insufficient/problematic, it could lead to incorrect stream reads
+        // (e.g., returning 0s for actual data). A common and safe default buffer
+        // size for PushbackInputStream in this context is 512 bytes.
+        in = new PushbackInputStream(inputStream, 512);
         this.allowStoredEntriesWithDataDescriptor =
             allowStoredEntriesWithDataDescriptor;
         // haven't read anything so far
     }
\ No newline at end of file
