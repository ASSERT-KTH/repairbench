diff --git a/tmp/c01ecca4-8db5-42da-b946-d8c130198642_buggy.java b/tmp/1587a724-8de3-4eff-959a-79b56ac196b9_fixed.java
index 6c0aa19..4b35a8c 100644
--- a/tmp/c01ecca4-8db5-42da-b946-d8c130198642_buggy.java
+++ b/tmp/1587a724-8de3-4eff-959a-79b56ac196b9_fixed.java
@@ -1,20 +1,25 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
+        // Fix: Use a sufficiently large and fixed buffer size for the PushbackInputStream.
+        // The original `buf.capacity()` might be too small (e.g., 512 bytes if BUFFER_SIZE is 512),
+        // which can lead to issues with unread operations during header parsing,
+        // potentially causing incorrect data to be read from the stream later.
+        // A size of 4096 bytes is a common and robust default for buffering streams.
+        in = new PushbackInputStream(inputStream, 4096);
         this.allowStoredEntriesWithDataDescriptor =
             allowStoredEntriesWithDataDescriptor;
         // haven't read anything so far
     }
