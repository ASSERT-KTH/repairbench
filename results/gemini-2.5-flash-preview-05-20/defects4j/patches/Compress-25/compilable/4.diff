diff --git a/tmp/b6e7ae7e-763f-44e7-8b00-54d4771c2af3_buggy.java b/tmp/a6980178-b765-4660-b14f-cabdd8df530f_fixed.java
index 6c0aa19..e69b1d4 100644
--- a/tmp/b6e7ae7e-763f-44e7-8b00-54d4771c2af3_buggy.java
+++ b/tmp/a6980178-b765-4660-b14f-cabdd8df530f_fixed.java
@@ -1,20 +1,28 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
+        // The original code in Apache Commons Compress initializes PushbackInputStream
+        // with a fixed buffer size (typically 512, defined by BYTE_BUFFER_SIZE).
+        // Using 'buf.capacity()' here is incorrect. 'buf' is an internal ByteBuffer
+        // used for reading file data, not for the PushbackInputStream's internal buffer.
+        // If 'buf' were uninitialized, this would lead to a NullPointerException.
+        // If 'buf' was initialized with 0 capacity, or if its capacity was used
+        // incorrectly, it could lead to the observed read errors (e.g., returning 0s).
+        // Replacing 'buf.capacity()' with the standard buffer size for PushbackInputStream.
+        in = new PushbackInputStream(inputStream, 512); // Use 512, which is BYTE_BUFFER_SIZE in original
         this.allowStoredEntriesWithDataDescriptor =
             allowStoredEntriesWithDataDescriptor;
         // haven't read anything so far
     }
\ No newline at end of file
