diff --git a/tmp/05a9c2a5-7199-4fa9-a7fe-ec810c7744d8_buggy.java b/tmp/11b57700-3c09-40b7-8275-b88c8cfa237a_fixed.java
index b12de99..20e6005 100644
--- a/tmp/05a9c2a5-7199-4fa9-a7fe-ec810c7744d8_buggy.java
+++ b/tmp/11b57700-3c09-40b7-8275-b88c8cfa237a_fixed.java
@@ -1,52 +1,47 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
-        return;
-      }
+      // The previous check "if (t.getScopeDepth() <= 2) { return; }"
+      // was too broad and prevented the analysis of local variables
+      // in commonly nested function scopes, leading to missing type
+      // information for variables that "escape" into inner scopes.
+      // The analysis already handles global variables appropriately
+      // via t.inGlobalScope() and ownerScope.isLocal() checks.
 
       if (n.isName() && NodeUtil.isLValue(n) &&
           // Be careful of bleeding functions, which create variables
           // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
 
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
       }
     }
\ No newline at end of file
