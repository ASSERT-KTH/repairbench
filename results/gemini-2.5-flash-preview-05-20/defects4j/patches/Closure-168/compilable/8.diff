diff --git a/tmp/089242d6-4a47-4d55-9dca-84f42b3eddc0_buggy.java b/tmp/ffc1b621-8ebc-4892-b244-1cf07faa49cc_fixed.java
index b12de99..96b08d1 100644
--- a/tmp/089242d6-4a47-4d55-9dca-84f42b3eddc0_buggy.java
+++ b/tmp/ffc1b621-8ebc-4892-b244-1cf07faa49cc_fixed.java
@@ -1,52 +1,62 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+      // Handle NAME nodes (variable references)
+      // This block identifies both local variables assigned in inner scopes
+      // and local variables that are referenced from inner scopes (escaped vars).
+      if (n.isName() && !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
-        Scope scope = t.getScope();
+        Scope scope = t.getScope(); // Current scope
         Var var = scope.getVar(name);
         if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
+          Scope ownerScope = var.getScope(); // Scope where the variable was declared
+          if (ownerScope.isLocal()) { // Only analyze local variables
+            // A variable is considered "assigned" if it's an LValue.
+            if (NodeUtil.isLValue(n)) {
               data.get(ownerScope.getRootNode()).recordAssignedName(name);
             }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
+            // A local variable "escapes" if it's accessed (read or written)
+            // from a different, inner scope.
+            if (scope != ownerScope) {
               data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
             }
           }
+        }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
+        // This block handles qualified names (e.g., `obj.prop`) that are LValues
+        // (i.e., being assigned to) where the root of the qualified name is a local variable
+        // that escapes.
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+        Var var = scope.getVar(name); // Get the Var for the root of the qualified name (e.g., 'obj')
         if (var != null) {
           Scope ownerScope = var.getScope();
+          // If the root variable is local and accessed from a different scope,
+          // and the qualified name itself is an LValue, record it as an escaped qualified name.
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
       }
     }
\ No newline at end of file
