diff --git a/tmp/5d42e88e-8825-49c7-8c97-1b61f56a21dd_buggy.java b/tmp/2566a25f-9172-47e6-9f58-90593bcb101b_fixed.java
index 42b58d0..a68b89d 100644
--- a/tmp/5d42e88e-8825-49c7-8c97-1b61f56a21dd_buggy.java
+++ b/tmp/2566a25f-9172-47e6-9f58-90593bcb101b_fixed.java
@@ -1,19 +1,52 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+
+        // Prevent infinite recursion for self-referential generic types.
+        // This method is likely part of a class like GenericMetadataSupport.
+        // Assuming 'visitedParameterizedTypes' is a field in the containing class
+        // (e.g., 'private final Set<Type> visitedParameterizedTypes = new HashSet<>();').
+        // If this method is called again with the same parameterizedType instance
+        // while it's still being processed higher up the call stack, we return to break the cycle.
+        // We use 'this' to access the field, assuming the containing class is 'GenericMetadataSupport'.
+        // This cast is typically safe within the context of Mockito's internal classes.
+        if (!((org.mockito.internal.util.reflection.GenericMetadataSupport) this).visitedParameterizedTypes.add(parameterizedType)) {
+            return;
+        }
+
+        try {
+            // Get the raw type of the parameterized type, which should be a Class
+            Class<?> rawType = (Class<?>) parameterizedType.getRawType();
+            // Get the type parameters declared by the raw class (e.g., T in MyClass<T>)
+            TypeVariable[] typeParameters = rawType.getTypeParameters();
+            // Get the actual type arguments for this specific parameterized type instance (e.g., String in MyClass<String>)
             Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+            // Iterate through the type parameters and their corresponding actual type arguments
             for (int i = 0; i < actualTypeArguments.length; i++) {
                 TypeVariable typeParameter = typeParameters[i];
                 Type actualTypeArgument = actualTypeArguments[i];
 
+                // If the actual type argument is a WildcardType (e.g., ? extends Number)
                 if (actualTypeArgument instanceof WildcardType) {
+                    // Resolve the bounds of the wildcard and put them into the map.
+                    // The 'boundsOf' method itself might be recursive; this guard prevents
+                    // the entire process from looping if boundsOf indirectly re-enters registerTypeVariablesOn
+                    // with the same ParameterizedType.
                     contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
                 } else {
+                    // Otherwise, put the actual type argument directly into the map
                     contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
                 }
                 // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
             }
+        } finally {
+            // Remove the type from the set once its registration is complete.
+            // This allows the same type to be processed again later if encountered
+            // in a different, independent resolution context, but prevents infinite recursion
+            // within the current single resolution chain.
+            ((org.mockito.internal.util.reflection.GenericMetadataSupport) this).visitedParameterizedTypes.remove(parameterizedType);
+        }
     }
\ No newline at end of file
