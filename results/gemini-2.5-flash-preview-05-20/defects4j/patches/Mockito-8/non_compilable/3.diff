diff --git a/tmp/aec2ae96-791c-43be-a629-415b71715dbc_buggy.java b/tmp/6891e588-9cfd-427f-9bb4-50b738291ab6_fixed.java
index 42b58d0..b94c2af 100644
--- a/tmp/aec2ae96-791c-43be-a629-415b71715dbc_buggy.java
+++ b/tmp/6891e588-9cfd-427f-9bb4-50b738291ab6_fixed.java
@@ -1,19 +1,58 @@
     protected void registerTypeVariablesOn(Type classType) {
+        // A StackOverflowError typically indicates an infinite recursion.
+        // In the context of generic type resolution, this often happens with self-referential
+        // generic types (e.g., `class Foo<T extends Foo<T>>`).
+        // The `registerTypeVariablesOn` method is likely called recursively by a parent method
+        // (e.g., one that traverses superclasses, interfaces, or type variable bounds).
+        // To prevent infinite recursion, we need to keep track of types that have already
+        // been processed during the current resolution path.
+
+        // Assuming 'processedTypes' is a field (e.g., Set<Type>) of the enclosing class
+        // (e.g., GenericMetadataSupport) that gets initialized once per resolution process.
+
+        if (classType == null) {
+            return;
+        }
+
+        // If this type has already been processed or is currently in the call stack,
+        // we've detected a cycle, so we return to break the recursion.
+        if (processedTypes.contains(classType)) {
+            return;
+        }
+        // Mark this type as being processed to prevent future re-processing in this path.
+        processedTypes.add(classType);
+
         if (!(classType instanceof ParameterizedType)) {
+            // If the type is not a ParameterizedType (e.g., a raw Class, TypeVariable,
+            // GenericArrayType, WildcardType etc.), it doesn't have actual type arguments
+            // directly associated with its own definition that need to be registered in this manner.
+            // We've still marked it as processed to handle potential cycles if it were to
+            // appear again in the traversal.
             return;
         }
+
         ParameterizedType parameterizedType = (ParameterizedType) classType;
+        // getTypeParameters() on the raw class gives the declared type variables (e.g., T for List<T>).
         TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        // getActualTypeArguments() gives the actual types used (e.g., String for List<String>).
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+        // Iterate through the declared type parameters and their corresponding actual type arguments.
+        // Map the type variable to its actual concrete type or its bounds.
         for (int i = 0; i < actualTypeArguments.length; i++) {
             TypeVariable typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
             if (actualTypeArgument instanceof WildcardType) {
+                // If the actual argument is a wildcard (e.g., `? extends Number`),
+                // map the type parameter to the bounds of the wildcard.
+                // Assuming 'boundsOf' is a helper method available in the class.
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
+                // Otherwise, map the type parameter directly to its actual type argument.
+                // 'contextualActualTypeParameters' is assumed to be a field (e.g., Map<TypeVariable, Type>)
+                // storing the resolved mappings.
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
