diff --git a/tmp/1faa47f6-143b-4949-a2d0-69f8789a3d8c_buggy.java b/tmp/52bd9231-63ac-4a6d-a92d-cf2440acbe89_fixed.java
index 42b58d0..06dc83a 100644
--- a/tmp/1faa47f6-143b-4949-a2d0-69f8789a3d8c_buggy.java
+++ b/tmp/52bd9231-63ac-4a6d-a92d-cf2440acbe89_fixed.java
@@ -1,19 +1,38 @@
     protected void registerTypeVariablesOn(Type classType) {
+        // This method is part of GenericMetadataSupport, which likely has a Set<Type>
+        // field (e.g., 'typesBeingRegistered') to keep track of types currently
+        // being processed to prevent infinite recursion in self-referential generics.
+
+        // Add guard to prevent infinite recursion for self-referential types or cyclic dependencies
+        // If classType is already in the set, it means we are in a recursive call
+        // for the same type, so we return to break the cycle.
+        // Assuming 'typesBeingRegistered' is an instance field of the enclosing class.
+        if (!typesBeingRegistered.add(classType)) {
+            return;
+        }
+
+        try {
             if (!(classType instanceof ParameterizedType)) {
                 return;
             }
             ParameterizedType parameterizedType = (ParameterizedType) classType;
             TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
             Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
             for (int i = 0; i < actualTypeArguments.length; i++) {
                 TypeVariable typeParameter = typeParameters[i];
                 Type actualTypeArgument = actualTypeArguments[i];
 
                 if (actualTypeArgument instanceof WildcardType) {
                     contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
                 } else {
                     contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
                 }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+            }
+        } finally {
+            // Ensure the type is removed from the set when processing is complete
+            // This is crucial to allow subsequent, distinct processing of the same type
+            // if it appears in different contexts (e.g., as a parameter type and a return type),
+            // or if a different instance of GenericMetadataSupport processes it.
+            typesBeingRegistered.remove(classType);
         }
     }
\ No newline at end of file
