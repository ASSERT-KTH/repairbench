diff --git a/tmp/f8cf7a44-da14-4056-9ca2-5fc5565bba6d_buggy.java b/tmp/76575e72-6132-4303-b09f-8e1d4166e650_fixed.java
index 42b58d0..4bddfbb 100644
--- a/tmp/f8cf7a44-da14-4056-9ca2-5fc5565bba6d_buggy.java
+++ b/tmp/76575e72-6132-4303-b09f-8e1d4166e650_fixed.java
@@ -1,19 +1,43 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
+
+        // Fix for StackOverflowError: Prevent infinite recursion by detecting and stopping cycles.
+        // This method relies on a class-level Set (e.g., 'visitedParameterizedTypes')
+        // to track `ParameterizedType` instances that are currently being processed.
+        // This ensures that if the same ParameterizedType is encountered again within
+        // the current resolution path, the method returns early, breaking the cycle.
+        // (Note: The `visitedParameterizedTypes` field itself must be declared and
+        // initialized in the containing class, e.g., `private final Set<Type> visitedParameterizedTypes = new HashSet<>();`)
+        if (this.visitedParameterizedTypes.contains(parameterizedType)) {
+            return;
+        }
+        this.visitedParameterizedTypes.add(parameterizedType);
+
+        try {
             TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
             Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
-        for (int i = 0; i < actualTypeArguments.length; i++) {
+
+            // Ensure loop iterates only up to the minimum length of type parameters
+            // and actual type arguments to prevent ArrayIndexOutOfBoundsException.
+            int limit = Math.min(typeParameters.length, actualTypeArguments.length);
+
+            for (int i = 0; i < limit; i++) {
                 TypeVariable typeParameter = typeParameters[i];
                 Type actualTypeArgument = actualTypeArguments[i];
 
                 if (actualTypeArgument instanceof WildcardType) {
                     contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
                 } else {
                     contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
                 }
                 // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
             }
+        } finally {
+            // Remove the type from the set to allow it to be processed again
+            // in a different, independent resolution path.
+            this.visitedParameterizedTypes.remove(parameterizedType);
+        }
     }
\ No newline at end of file
