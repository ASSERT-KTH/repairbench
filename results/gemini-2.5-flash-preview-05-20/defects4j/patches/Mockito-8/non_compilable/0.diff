diff --git a/tmp/b42e8d28-00fb-48b0-96a7-c42b7bfaa7b1_buggy.java b/tmp/ed9f8a35-65e4-44f1-8320-efe6cb8edd4c_fixed.java
index 42b58d0..4a7e6fa 100644
--- a/tmp/b42e8d28-00fb-48b0-96a7-c42b7bfaa7b1_buggy.java
+++ b/tmp/ed9f8a35-65e4-44f1-8320-efe6cb8edd4c_fixed.java
@@ -1,19 +1,37 @@
     protected void registerTypeVariablesOn(Type classType) {
+        // This 'typesCurrentlyBeingRegistered' set should be an instance field of the enclosing class
+        // (e.g., GenericMetadataSupport) to track types being processed in the current resolution cycle.
+        // For example: `private final Set<Type> typesCurrentlyBeingRegistered = new HashSet<>();`
+
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
+
+        // Prevent infinite recursion for cyclic type definitions (e.g., T extends MyClass<T>)
+        // If this type is already being processed on the current call stack,
+        // adding it to the set will return false, indicating a cycle.
+        if (!typesCurrentlyBeingRegistered.add(classType)) {
+            return; // Break the recursion
+        }
+
+        try {
             ParameterizedType parameterizedType = (ParameterizedType) classType;
             TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
             Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
             for (int i = 0; i < actualTypeArguments.length; i++) {
                 TypeVariable typeParameter = typeParameters[i];
                 Type actualTypeArgument = actualTypeArguments[i];
 
                 if (actualTypeArgument instanceof WildcardType) {
                     contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
                 } else {
                     contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
                 }
                 // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
             }
+        } finally {
+            // Always remove the type from the set when exiting this method call,
+            // whether it completes successfully or throws an exception.
+            typesCurrentlyBeingRegistered.remove(classType);
+        }
     }
\ No newline at end of file
