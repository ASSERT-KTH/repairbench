diff --git a/tmp/a3671a4d-f107-4d19-859b-7c58cd655719_buggy.java b/tmp/2735c9be-fca6-467f-ae48-69f0a184e88a_fixed.java
index 42b58d0..687e2b9 100644
--- a/tmp/a3671a4d-f107-4d19-859b-7c58cd655719_buggy.java
+++ b/tmp/2735c9be-fca6-467f-ae48-69f0a184e88a_fixed.java
@@ -1,19 +1,39 @@
     protected void registerTypeVariablesOn(Type classType) {
+        // This set 'currentlyRegisteringTypes' is assumed to be a field in the enclosing class
+        // (e.g., 'private final Set<Type> currentlyRegisteringTypes = new HashSet<>();')
+        // and is used to detect and prevent infinite recursion caused by self-referential generic types.
+        if (!currentlyRegisteringTypes.add(classType)) {
+            // If classType is already in the set, it means we have detected a cycle
+            // (i.e., this method is being called recursively for a type that is already
+            // in the process of being registered/resolved).
+            // Returning early prevents a StackOverflowError.
+            return;
+        }
+
+        try {
             if (!(classType instanceof ParameterizedType)) {
                 return;
             }
             ParameterizedType parameterizedType = (ParameterizedType) classType;
             TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
             Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
             for (int i = 0; i < actualTypeArguments.length; i++) {
                 TypeVariable typeParameter = typeParameters[i];
                 Type actualTypeArgument = actualTypeArguments[i];
 
                 if (actualTypeArgument instanceof WildcardType) {
+                    // The call to boundsOf might trigger further type resolution,
+                    // which in turn could potentially re-enter this method if a cycle exists.
                     contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
                 } else {
+                    // For non-wildcard types, simply register the direct mapping.
                     contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
                 }
                 // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
             }
+        } finally {
+            // Ensure the type is removed from the 'currentlyRegisteringTypes' set
+            // once the registration process for it is complete, regardless of success or failure.
+            currentlyRegisteringTypes.remove(classType);
+        }
     }
\ No newline at end of file
