diff --git a/tmp/85f1954c-8083-4fa8-9fba-c7fb875dad36_buggy.java b/tmp/2e017fe2-f2a8-4a9e-83c3-4cd748e21ca8_fixed.java
index 42b58d0..4ee7600 100644
--- a/tmp/85f1954c-8083-4fa8-9fba-c7fb875dad36_buggy.java
+++ b/tmp/2e017fe2-f2a8-4a9e-83c3-4cd748e21ca8_fixed.java
@@ -1,19 +1,44 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
         TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         for (int i = 0; i < actualTypeArguments.length; i++) {
             TypeVariable typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            // Fix for self-referential generic types causing StackOverflowError.
+            // If the actualTypeArgument is a ParameterizedType that refers back to
+            // the same raw type and itself contains the typeParameter we are defining,
+            // mapping it directly creates an infinite resolution loop (e.g., T -> GenericsSelfReference<T>).
+            // Instead, we map the typeParameter to itself (T -> T), forcing resolution
+            // to fall back to its declared bounds, which reflection can handle.
+            if (actualTypeArgument instanceof ParameterizedType) {
+                ParameterizedType actualParameterizedType = (ParameterizedType) actualTypeArgument;
+                if (actualParameterizedType.getRawType().equals(parameterizedType.getRawType())) {
+                    boolean foundSelfReference = false;
+                    for (Type arg : actualParameterizedType.getActualTypeArguments()) {
+                        if (arg.equals(typeParameter)) {
+                            contextualActualTypeParameters.put(typeParameter, typeParameter);
+                            foundSelfReference = true;
+                            break;
+                        }
+                    }
+                    if (foundSelfReference) {
+                        // Continue to the next type parameter as this one is handled
+                        continue;
+                    }
+                }
+            }
+
+            // Original logic for other cases
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
