diff --git a/tmp/7fac3a21-22ae-4731-ae14-d9ecfdc211a6_buggy.java b/tmp/7ef9dc5e-14d5-472d-83d4-6b730403807a_fixed.java
index 42b58d0..576e09b 100644
--- a/tmp/7fac3a21-22ae-4731-ae14-d9ecfdc211a6_buggy.java
+++ b/tmp/7ef9dc5e-14d5-472d-83d4-6b730403807a_fixed.java
@@ -1,19 +1,44 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
         TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         for (int i = 0; i < actualTypeArguments.length; i++) {
             TypeVariable typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
-            if (actualTypeArgument instanceof WildcardType) {
+            boolean isSelfReferentialTypeVariable = false;
+            // Check for self-referential type variables like T extends Foo<T>
+            if (actualTypeArgument instanceof ParameterizedType) {
+                ParameterizedType ptActual = (ParameterizedType) actualTypeArgument;
+                // Check if typeParameter is one of the actual type arguments of ptActual
+                for (Type argOfActual : ptActual.getActualTypeArguments()) {
+                    if (typeParameter.equals(argOfActual)) {
+                        // Additionally, check if ptActual is one of the bounds of typeParameter
+                        // This confirms the "T extends Foo<T>" structure
+                        for (Type bound : typeParameter.getBounds()) {
+                            if (ptActual.equals(bound)) {
+                                isSelfReferentialTypeVariable = true;
+                                break;
+                            }
+                        }
+                    }
+                    if (isSelfReferentialTypeVariable) {
+                        break;
+                    }
+                }
+            }
+
+            if (isSelfReferentialTypeVariable) {
+                // If it's a self-referential type variable (e.g., T extends Foo<T>),
+                // mapping T to T itself breaks the infinite resolution cycle.
+                contextualActualTypeParameters.put(typeParameter, typeParameter);
+            } else if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
