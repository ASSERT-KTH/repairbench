diff --git a/tmp/48b2b377-537c-4cef-9c18-c88deea8f22f_buggy.java b/tmp/d9a99881-2e25-4ae9-9916-d47993336af8_fixed.java
index 42b58d0..a3d7c04 100644
--- a/tmp/48b2b377-537c-4cef-9c18-c88deea8f22f_buggy.java
+++ b/tmp/d9a99881-2e25-4ae9-9916-d47993336af8_fixed.java
@@ -1,19 +1,50 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        Class<?> rawClass = (Class<?>) parameterizedType.getRawType();
+        TypeVariable[] typeParameters = rawClass.getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         for (int i = 0; i < actualTypeArguments.length; i++) {
             TypeVariable typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
-            if (actualTypeArgument instanceof WildcardType) {
+            // Handle self-referential type variables like T in <T extends Foo<T>>.
+            // When 'classType' is a ParameterizedType representing the self-referential
+            // generic (e.g., GenericsSelfReference<T> coming from a method return type or a bound),
+            // 'typeParameter' will be the TypeVariable 'T', and 'actualTypeArgument'
+            // will also be the same TypeVariable 'T'.
+            // Putting a mapping of T -> T or T -> Foo<T> (where Foo<T> refers back to T)
+            // can lead to a StackOverflowError in the resolution logic that uses this map.
+            // To break this cycle, in such specific self-referential cases,
+            // we map the TypeVariable to its raw class (e.g., T -> GenericsSelfReference.class).
+            if (actualTypeArgument instanceof TypeVariable && typeParameter.equals(actualTypeArgument)) {
+                TypeVariable<?> tv = (TypeVariable<?>) typeParameter;
+                Type[] bounds = tv.getBounds();
+                if (bounds.length > 0) {
+                    Type firstBound = bounds[0];
+                    // Check if the first bound is a ParameterizedType whose raw type matches the current rawClass.
+                    // This identifies patterns like T extends GenericsSelfReference<T>.
+                    if (firstBound instanceof ParameterizedType && ((ParameterizedType) firstBound).getRawType().equals(rawClass)) {
+                        // This is the self-referential case. Map the type variable to the raw class
+                        // to prevent infinite recursion during resolution.
+                        contextualActualTypeParameters.put(typeParameter, rawClass);
+                    } else {
+                        // For other cases where T maps to T, but not because of a direct self-referential bound,
+                        // keep the T -> T mapping. This might occur for simple unbounded TypeVariables.
+                        contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
+                    }
+                } else {
+                    // No bounds specified (e.g., T extends Object), T -> T mapping is generally harmless.
+                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
+                }
+            } else if (actualTypeArgument instanceof WildcardType) {
+                // Handle wildcard types by determining their effective bounds.
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
+                // Standard case: map the type variable to its actual concrete or other parameterized type argument.
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
