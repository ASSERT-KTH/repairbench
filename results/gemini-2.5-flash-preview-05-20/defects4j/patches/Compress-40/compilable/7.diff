diff --git a/tmp/4d2b3d61-3534-41f6-aee1-48930d912a1d_buggy.java b/tmp/cba7f7b7-b92e-4144-92bf-b157d13e4e51_fixed.java
index 7116384..83acc8c 100644
--- a/tmp/4d2b3d61-3534-41f6-aee1-48930d912a1d_buggy.java
+++ b/tmp/cba7f7b7-b92e-4144-92bf-b157d13e4e51_fixed.java
@@ -1,39 +1,61 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
+                // Not enough bits available to satisfy the request.
+                // Return -1 to indicate end of stream or insufficient data.
                 return nextByte;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // For LITTLE_ENDIAN, new bytes are added to the higher-order bits of bitsCached.
+                // If adding the new byte would cause bitsCached to exceed 64 bits (Long.SIZE),
+                // we must first discard the oldest bits from the right (LSB side) to maintain
+                // a 64-bit sliding window.
+                if (bitsCachedSize + 8 > Long.SIZE) {
+                    // Calculate how many bits to shift out from the right.
+                    // This effectively removes the oldest bits to make space for the new byte.
+                    bitsCached >>>= (bitsCachedSize + 8 - Long.SIZE);
+                    bitsCachedSize = Long.SIZE - 8; // Adjust bitsCachedSize to reflect the remaining space
+                }
                 bitsCached |= (nextByte << bitsCachedSize);
-            } else {
+            } else { // BIG_ENDIAN
+                // For BIG_ENDIAN, new bytes are added to the lower-order bits of bitsCached,
+                // and existing bits are shifted left. This naturally discards the most
+                // significant (oldest) bits if bitsCached is full, so no explicit pre-shifting
+                // is needed here for bitsCached value itself.
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
+
+            // Ensure bitsCachedSize never exceeds the actual capacity of bitsCached (64 bits).
+            // Any bits beyond 64 are conceptually discarded.
+            if (bitsCachedSize > Long.SIZE) {
+                bitsCachedSize = Long.SIZE;
+            }
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
+            bitsCached >>>= count; // Remove the consumed bits from the right
+        } else { // BIG_ENDIAN
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            bitsCached <<= count; // Remove the consumed bits from the left
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
