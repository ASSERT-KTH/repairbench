diff --git a/tmp/c78e8c47-7c64-44b2-a778-a05a71880685_buggy.java b/tmp/a802ec3c-ec1f-49dd-878b-f418a54590b6_fixed.java
index 7116384..72a2dba 100644
--- a/tmp/c78e8c47-7c64-44b2-a778-a05a71880685_buggy.java
+++ b/tmp/a802ec3c-ec1f-49dd-878b-f418a54590b6_fixed.java
@@ -1,39 +1,85 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
-        while (bitsCachedSize < count) {
+
+        // Use temporary variables to accumulate bits for the current read operation.
+        // This allows 'currentAccumulatedBits' to hold the full 64 bits of a long,
+        // and 'currentAccumulatedBitsSize' to track the conceptual number of bits,
+        // which might temporarily exceed 64 during accumulation.
+        long currentAccumulatedBits = bitsCached;
+        int currentAccumulatedBitsSize = bitsCachedSize;
+
+        // Keep reading bytes until we have enough bits in the temporary cache.
+        while (currentAccumulatedBitsSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
+                // End of stream reached before reading the requested number of bits.
+                // Clear the internal cache and return -1.
+                bitsCached = 0;
+                bitsCachedSize = 0;
                 return nextByte;
             }
+
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                // For LITTLE_ENDIAN, new bytes are added to the most significant positions.
+                // The current bits are at the lower end of currentAccumulatedBits.
+                // Example: currentAccumulatedBitsSize = 0, nextByte = 0xAA. currentAccumulatedBits becomes 0xAA.
+                // currentAccumulatedBitsSize = 8, nextByte = 0xBB. currentAccumulatedBits becomes 0xBB00 + 0xAA = 0xBBAA.
+                // The `long` variable will correctly handle shifts and ORs up to its 64-bit capacity.
+                // The implicit truncation of higher bits of `nextByte` occurs if `currentAccumulatedBitsSize + 8` exceeds 64.
+                // However, this is handled by masking the `currentAccumulatedBits` at the end.
+                currentAccumulatedBits |= (nextByte << currentAccumulatedBitsSize);
+            } else { // BIG_ENDIAN
+                // For BIG_ENDIAN, existing bits are shifted left, and the new byte is added to the least significant positions.
+                // Example: currentAccumulatedBitsSize = 0, nextByte = 0xAA. currentAccumulatedBits becomes 0xAA.
+                // currentAccumulatedBitsSize = 8, nextByte = 0xBB. currentAccumulatedBits becomes 0xAA00 + 0xBB = 0xAABB.
+                currentAccumulatedBits <<= 8;
+                currentAccumulatedBits |= nextByte;
             }
-            bitsCachedSize += 8;
+            currentAccumulatedBitsSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
+        // Extract the requested 'count' bits from the accumulated value.
         final long bitsOut;
+        long remainderValue;
+        int remainderBits;
+
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            // For LITTLE_ENDIAN, the requested bits are at the lower end of `currentAccumulatedBits`.
+            // MASKS[count] correctly extracts `count` bits from the lower positions (bits 0 to count-1).
+            bitsOut = (currentAccumulatedBits & MASKS[count]);
+
+            // The remaining bits are the higher bits after extraction.
+            // These form the new 'bitsCached' for the next call.
+            remainderValue = currentAccumulatedBits >>> count;
+            remainderBits = currentAccumulatedBitsSize - count;
+        } else { // BIG_ENDIAN
+            // For BIG_ENDIAN, the requested bits are at the higher end of `currentAccumulatedBits`.
+            // We shift right to bring them to the lower end, then mask.
+            bitsOut = (currentAccumulatedBits >> (currentAccumulatedBitsSize - count)) & MASKS[count];
+
+            // The remaining bits are the lower `currentAccumulatedBitsSize - count` bits.
+            // We use MASKS to ensure only these remaining bits are kept in `bitsCached`,
+            // effectively clearing any higher bits that might have been part of `bitsOut`
+            // or were "spillover" from previous operations and are no longer relevant.
+            remainderValue = currentAccumulatedBits & MASKS[currentAccumulatedBitsSize - count];
+            remainderBits = currentAccumulatedBitsSize - count;
         }
-            bitsCachedSize -= count;
+
+        // Update the member variables with the remainder bits for the next read.
+        bitsCached = remainderValue;
+        bitsCachedSize = remainderBits;
+
         return bitsOut;
     }
\ No newline at end of file
