diff --git a/tmp/11455880-8bfd-4725-b7d7-6a807bda75c1_buggy.java b/tmp/c451c68e-4416-43c0-9084-69fb2c8a5d8f_fixed.java
index 7116384..287b8a4 100644
--- a/tmp/11455880-8bfd-4725-b7d7-6a807bda75c1_buggy.java
+++ b/tmp/c451c68e-4416-43c0-9084-69fb2c8a5d8f_fixed.java
@@ -1,39 +1,61 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // If adding the next byte would exceed 64 bits in bitsCached,
+                // shift bitsCached right to discard the oldest (least significant) bits
+                // and make room for the new byte without truncation.
+                if (bitsCachedSize + 8 > 64) {
+                    int bitsToDiscard = (bitsCachedSize + 8) - 64;
+                    bitsCached >>>= bitsToDiscard;
+                    bitsCachedSize -= bitsToDiscard;
+                }
                 bitsCached |= (nextByte << bitsCachedSize);
-            } else {
+            } else { // BIG_ENDIAN
+                // For BIG_ENDIAN, existing bits are shifted left. If bitsCachedSize is 64,
+                // bitsCached <<= 8 will naturally discard the 8 most significant (oldest) bits.
+                // This maintains a 64-bit sliding window automatically.
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
+            // Ensure bitsCachedSize never exceeds 64, as bitsCached is a long (64-bit)
+            if (bitsCachedSize > 64) {
+                bitsCachedSize = 64;
+            }
         }
             // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
         
         final long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsOut = (bitsCached & MASKS[count]);
                 bitsCached >>>= count;
             } else {
+                // For BIG_ENDIAN, bitsCached already contains the most recent bits.
+                // We need to extract the 'count' most significant bits from bitsCached.
+                // The current expression (bitsCached >> (bitsCachedSize - count))
+                // effectively shifts the desired 'count' bits to the least significant positions.
+                // Then, MASKS[count] correctly isolates these 'count' bits.
                 bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+                // For BIG_ENDIAN, discard the extracted bits from the MSB end of bitsCached
+                bitsCached &= MASKS[bitsCachedSize - count];
             }
             bitsCachedSize -= count;
         return bitsOut;
     }
