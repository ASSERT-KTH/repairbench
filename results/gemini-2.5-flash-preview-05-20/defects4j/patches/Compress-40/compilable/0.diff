diff --git a/tmp/c86171d4-813f-4875-983d-4ee730e1bea9_buggy.java b/tmp/bb07c533-c0bc-4cb9-866e-e02098dc3832_fixed.java
index 7116384..6633415 100644
--- a/tmp/c86171d4-813f-4875-983d-4ee730e1bea9_buggy.java
+++ b/tmp/bb07c533-c0bc-4cb9-866e-e02098dc3832_fixed.java
@@ -1,39 +1,65 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        if (count == 0) {
+            return 0;
+        }
+
         while (bitsCachedSize < count) {
+            // Prevent bitsCached from holding more than 64 bits.
+            // Since count is at most 63, if bitsCachedSize reaches 64,
+            // we have enough bits (or more) to satisfy the request.
+            if (bitsCachedSize >= 64) {
+                break;
+            }
+
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                return -1; // Indicate EOF if not enough bits could be read
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // For LITTLE_ENDIAN, new bytes are appended to the higher bits.
+                // e.g., if bitsCached has B0, B1 is read, bitsCached becomes (B1 << 8) | B0
+                // This correctly appends the new byte to the left (MSB) of the existing bits.
+                // The `bitsCachedSize` ensures the correct shift amount.
+                // With `bitsCachedSize >= 64` check above, `bitsCachedSize` won't grow beyond 64 here.
                 bitsCached |= (nextByte << bitsCachedSize);
-            } else {
+            } else { // BIG_ENDIAN
+                // For BIG_ENDIAN, new bytes are appended to the lower bits,
+                // and existing bits are shifted left.
+                // e.g., if bitsCached has B0, B1 is read, bitsCached becomes (B0 << 8) | B1
+                // With `bitsCachedSize >= 64` check above, bitsCached won't be shifted if it contains 64 bits,
+                // preventing overflow of the `long` itself.
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            // For LITTLE_ENDIAN, bits are taken from the least significant end.
             bitsOut = (bitsCached & MASKS[count]);
+            // Shift out the consumed bits to leave only the remaining bits.
             bitsCached >>>= count;
-            } else {
+        } else { // BIG_ENDIAN
+            // For BIG_ENDIAN, bits are taken from the most significant end.
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            // After extracting, remove the consumed bits from bitsCached.
+            // The remaining bits are the (bitsCachedSize - count) least significant bits.
+            bitsCached &= MASKS[bitsCachedSize - count];
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
