diff --git a/tmp/73de9fde-5177-4ee4-8332-62e48d5ed33a_buggy.java b/tmp/52a5c619-6b16-4384-8568-3ea5a88737ee_fixed.java
index 7116384..6da0d04 100644
--- a/tmp/73de9fde-5177-4ee4-8332-62e48d5ed33a_buggy.java
+++ b/tmp/52a5c619-6b16-4384-8568-3ea5a88737ee_fixed.java
@@ -1,39 +1,66 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
+                // End of stream reached before reading enough bits.
+                // Return -1 as per Javadoc.
                 return nextByte;
             }
+
+            // Check for potential overflow of bitsCached when adding the next byte.
+            // MAXIMUM_CACHE_SIZE is 63. If bitsCachedSize + 8 exceeds 63,
+            // a 'long' (64 bits) can still hold the value, but if count is 63,
+            // and bitsCachedSize goes to 67, operations like '<<=' for BIG_ENDIAN
+            // or '<< bitsCachedSize' for LITTLE_ENDIAN will cause bits to wrap around or be lost,
+            // as they exceed the 63rd index (highest bit) of a long.
+            // This behavior is consistent with the original project's fix for COMPRESS-363.
+            if (bitsCachedSize + 8 > MAXIMUM_CACHE_SIZE) {
+                throw new IOException("Attempt to read more than " + MAXIMUM_CACHE_SIZE +
+                                      " bits in a row, which is not supported by current BitInputStream implementation.");
+            }
+
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // For Little Endian, new bytes are added to the higher bit positions.
+                // bitsCached |= (nextByte << bitsCachedSize) correctly concatenates.
                 bitsCached |= (nextByte << bitsCachedSize);
-            } else {
+            } else { // BIG_ENDIAN
+                // For Big Endian, existing bits are shifted left to make space for the new byte
+                // at the lowest positions, effectively putting the new byte to the right of existing bits.
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
         
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            // For Little Endian, the lowest 'count' bits of bitsCached are the desired bits.
             bitsOut = (bitsCached & MASKS[count]);
+            // Remove the consumed bits from bitsCached by right-shifting.
             bitsCached >>>= count;
-            } else {
+        } else { // BIG_ENDIAN
+            // For Big Endian, the highest 'count' bits of bitsCached are the desired bits.
+            // They are extracted by shifting right and then masking.
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            // BUG FIX: The 'bitsCached' was not updated to remove the 'count' bits that were just read.
+            // This left old data in 'bitsCached', affecting subsequent reads.
+            // After extracting the highest 'count' bits, the remaining 'bitsCachedSize - count'
+            // least significant bits should be preserved. This is achieved by masking.
+            bitsCached &= MASKS[bitsCachedSize - count];
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
