diff --git a/tmp/8d0e9f97-1cdc-4398-8541-ed722820aeeb_buggy.java b/tmp/0b063010-c3e9-43f3-a6b9-89a0251ea20f_fixed.java
index 7116384..dc06d35 100644
--- a/tmp/8d0e9f97-1cdc-4398-8541-ed722820aeeb_buggy.java
+++ b/tmp/0b063010-c3e9-43f3-a6b9-89a0251ea20f_fixed.java
@@ -1,39 +1,12 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
-    public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
-        }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
-            }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+            } else { // ByteOrder.BIG_ENDIAN
+                // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+                // which means the last byte read would be lost - just add it.
+                // This means up to 64 bits may be read, if a 63 bit number
+                // is desired, 8 bytes are read, leaving 1 bit of padding.
+                if (bitsCachedSize >= 57) { // 56 + 8 = 64
+                    bitsCached = bitsCached | (nextByte << bitsCachedSize);
                 } else {
                     bitsCached <<= 8;
                     bitsCached |= nextByte;
                 }
-            bitsCachedSize += 8;
-        }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
-            bitsCachedSize -= count;
-        return bitsOut;
             }
\ No newline at end of file
