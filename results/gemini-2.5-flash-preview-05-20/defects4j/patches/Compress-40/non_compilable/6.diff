diff --git a/tmp/81584bc0-31e3-466b-9baf-9ca2a79439ba_buggy.java b/tmp/3d9b019c-364b-4f57-a852-e8dbd8382446_fixed.java
index 7116384..6d4aa69 100644
--- a/tmp/81584bc0-31e3-466b-9baf-9ca2a79439ba_buggy.java
+++ b/tmp/3d9b019c-364b-4f57-a852-e8dbd8382446_fixed.java
@@ -1,39 +1,10 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
-    public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
-        }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
-            }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
-            }
-            bitsCachedSize += 8;
-        }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
         final long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
+                bitsCached >>>= count; // Consumed bits are removed from cache
+            } else { // BIG_ENDIAN
                 bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+                // BUG: Consumed bits are NOT removed from cache for BIG_ENDIAN
             }
             bitsCachedSize -= count;
         return bitsOut;
\ No newline at end of file
-    }
