diff --git a/tmp/11fda269-ce52-4b04-8d06-b30c970897fa_buggy.java b/tmp/6578a843-bcac-4293-8e5e-dd8963eab8d1_fixed.java
index b4e6f03..d84936e 100644
--- a/tmp/11fda269-ce52-4b04-8d06-b30c970897fa_buggy.java
+++ b/tmp/6578a843-bcac-4293-8e5e-dd8963eab8d1_fixed.java
@@ -1,44 +1,68 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
+            try {
                 URL base;
-            try {
                 try {
                     base = new URL(baseUri);
                 } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
+                    // The base URI is malformed, so we cannot resolve relative URLs against it.
+                    // Try to parse relUrl as an absolute URL itself.
+                    try {
                         URL abs = new URL(relUrl);
                         return abs.toExternalForm();
+                    } catch (MalformedURLException e2) {
+                        // relUrl is also malformed or not an absolute URL, so return empty string.
+                        return "";
                     }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+                }
+
+                // Workaround for Java's URL constructor's behavior when relUrl is a query string
+                // and base has a path with a filename.
+                // e.g. base=http://host/path/file?q, rel=?newq -> Java produces http://host/path/?newq
+                // We want: http://host/path/file?newq
+                if (relUrl.startsWith("?")) {
+                    // Construct a new URL from base parts (scheme, host, port, path)
+                    // effectively removing any query/fragment from the base for resolution.
+                    // This results in a URL like http://host/path/file
+                    URL baseForQueryResolution = new URL(base.getProtocol(), base.getHost(), base.getPort(), base.getPath());
+                    
+                    // Directly append the query string to this "cleaned" base URL's external form.
+                    // This avoids Java's problematic resolution logic for query-only relative URLs.
+                    return baseForQueryResolution.toExternalForm() + relUrl;
+                } else {
+                    // For other relative URLs, use standard Java URL resolution.
                     URL abs = new URL(base, relUrl);
                     return abs.toExternalForm();
+                }
             } catch (MalformedURLException e) {
+                // This catch handles MalformedURLException from the final new URL(base, relUrl)
+                // or if any other URL constructor throws it unexpectedly.
                 return "";
             }
         }
     }
\ No newline at end of file
