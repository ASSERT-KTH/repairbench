diff --git a/tmp/e3bf9bab-43c0-4e29-8540-2824cd8ffa96_buggy.java b/tmp/2da58f7e-60dc-440d-8e51-247b06a234d2_fixed.java
index b4e6f03..fac070b 100644
--- a/tmp/e3bf9bab-43c0-4e29-8540-2824cd8ffa96_buggy.java
+++ b/tmp/2da58f7e-60dc-440d-8e51-247b06a234d2_fixed.java
@@ -1,44 +1,59 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
             URL base;
             try {
                 try {
                     base = new URL(baseUri);
                 } catch (MalformedURLException e) {
                     // the base is unsuitable, but the attribute may be abs on its own, so try that
+                    // If relUrl is also not absolute, this will throw another MalformedURLException, caught below.
                     URL abs = new URL(relUrl);
                     return abs.toExternalForm();
                 }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
+
+                // Problem: Java's URL(URL, String) constructor resolves queries "?foo" relative to the directory path
+                // of the base URL, not the full path. E.g., base="http://x/y/z", rel="?a" -> http://x/y/?a
+                // We want http://x/y/z?a.
+                URL abs;
+                if (relUrl.startsWith("?")) {
+                    // Special handling for query-only relative URLs.
+                    // Append the query to the base's path, and reconstruct the URL.
+                    // This preserves the "filename" part of the base URI.
+                    // Example: base="http://jsoup.org/path/file?bar", relUrl="?foo"
+                    // Result: http://jsoup.org/path/file?foo
+                    abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), base.getPath() + relUrl);
+                } else {
+                    // For all other cases (absolute, path-relative, full-relative), use standard resolution.
+                    abs = new URL(base, relUrl);
+                }
                 return abs.toExternalForm();
             } catch (MalformedURLException e) {
                 return "";
             }
         }
     }
\ No newline at end of file
