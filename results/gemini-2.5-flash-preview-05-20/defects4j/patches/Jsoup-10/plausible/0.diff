diff --git a/tmp/93217984-0682-48cf-9962-50719426fd6e_buggy.java b/tmp/57f3fa89-a42c-4904-af7c-dda00f160263_fixed.java
index b4e6f03..d4f4475 100644
--- a/tmp/93217984-0682-48cf-9962-50719426fd6e_buggy.java
+++ b/tmp/57f3fa89-a42c-4904-af7c-dda00f160263_fixed.java
@@ -1,44 +1,77 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
-        } else {
+        }
+
+        try {
             URL base;
-            try {
+            // First, try to parse the base URI.
+            // If baseUri is malformed, then the attribute could still be an absolute URL on its own.
             try {
                 base = new URL(baseUri);
             } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
+                // baseUri is not a valid URL. Attempt to parse relUrl as an absolute URL.
+                try {
+                    URL abs = new URL(relUrl); // If relUrl is also not a valid URL, this will throw.
                     return abs.toExternalForm();
+                } catch (MalformedURLException e2) {
+                    return ""; // Both baseUri and relUrl are malformed or unresolvable.
                 }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
+            }
+
+            // At this point, 'base' is a valid URL object.
+            String absUrl;
+            if (relUrl.startsWith("?")) {
+                // Special handling for relative URLs that are just a query string.
+                // Java's URL constructor resolves "?query" against the *directory* of the base URL,
+                // potentially stripping the file part if the base URL points to a file.
+                // E.g., new URL("http://host/path/file?old", "?new") becomes "http://host/path/?new"
+                // We want "http://host/path/file?new".
+                
+                // Get the external form of the base URL, and remove its query part if present.
+                String baseNoQuery = base.toExternalForm();
+                int qIdx = baseNoQuery.indexOf('?');
+                if (qIdx != -1) {
+                    baseNoQuery = baseNoQuery.substring(0, qIdx);
+                }
+                // Construct a new URL by appending the new query to the base (without its old query).
+                absUrl = new URL(baseNoQuery + relUrl).toExternalForm();
+            } else {
+                // For other types of relative URLs (e.g., "path/file", "/path/file", "//host/path"),
+                // Java's URL constructor usually handles resolution correctly.
+                // E.g., for "bar.html?foo" with base "http://jsoup.org/path/file?bar",
+                // it correctly resolves to "http://jsoup.org/path/bar.html?foo".
+                absUrl = new URL(base, relUrl).toExternalForm();
+            }
+            return absUrl;
+
         } catch (MalformedURLException e) {
+            // Catch any MalformedURLException that might occur during the final URL construction
+            // (e.g., from baseNoQuery + relUrl) or from new URL(base, relUrl) if it somehow still fails
+            // for an unexpected reason.
             return "";
         }
     }
\ No newline at end of file
-    }
