diff --git a/tmp/1648277a-8c36-4585-bf4a-0fb1baf7a8da_buggy.java b/tmp/e4cbd0f9-d185-43a5-a6a9-57f8d7023d48_fixed.java
index b4e6f03..662b29c 100644
--- a/tmp/1648277a-8c36-4585-bf4a-0fb1baf7a8da_buggy.java
+++ b/tmp/e4cbd0f9-d185-43a5-a6a9-57f8d7023d48_fixed.java
@@ -1,44 +1,82 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
-        String relUrl = attr(attributeKey);
-        if (!hasAttr(attributeKey)) {
-            return ""; // nothing to make absolute with
-        } else {
-            URL base;
+        String relUrl = attr(attributeKey); // Get the attribute value
+        if (!hasAttr(attributeKey)) { // Check if the attribute exists at all
+            return ""; // nothing to make absolute with if attribute is missing
+        }
+        
+        // 1. Try to parse relUrl as absolute first. If it succeeds, it's already absolute.
+        // This handles schemes like http://, https://, ftp://, data:, etc.
+        // Also, it prevents new URL(base, "http://example.com") from resolving incorrectly if base is valid.
         try {
-                try {
-                    base = new URL(baseUri);
-                } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
             URL abs = new URL(relUrl);
             return abs.toExternalForm();
+        } catch (MalformedURLException e) {
+            // relUrl is not absolute (or is a protocol-relative URL like //host/path),
+            // proceed to resolve it against baseUri
         }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+        // 2. relUrl is relative. Now, attempt to resolve it against the element's base URI.
+        URL base;
+        try {
+            base = new URL(baseUri); // baseUri is a field
+        } catch (MalformedURLException e) {
+            // The baseUri itself is malformed, so we cannot make relUrl absolute.
+            return "";
+        }
+
+        // 3. Special handling for relative query URLs (e.g., "?foo"):
+        // Java's URL(base, "?foo") constructor resolves such URLs against the directory part of the base,
+        // effectively stripping the filename from the base URI.
+        // E.g., new URL("http://jsoup.org/path/file?bar", "?foo") -> "http://jsoup.org/path/?foo"
+        // We want to preserve the filename part of the base URI when appending a new query.
+        if (relUrl.startsWith("?")) {
+            String baseExternalForm = base.toExternalForm();
+            int queryIdx = baseExternalForm.indexOf('?');
+            if (queryIdx != -1) {
+                // Remove any existing query from the base URI to append the new query.
+                baseExternalForm = baseExternalForm.substring(0, queryIdx);
+            }
+            // Now baseExternalForm is "http://jsoup.org/path/file" (if original was "/path/file?bar")
+            // or "http://example.com/" (if original was "http://example.com/?bar")
+            // Append the relative query (e.g., "?foo") to this base path.
+            try {
+                URL abs = new URL(baseExternalForm + relUrl);
+                return abs.toExternalForm();
+            } catch (MalformedURLException e) {
+                // This exception should be rare here if baseExternalForm was derived from a valid URL.
+                return ""; 
+            }
+        }
+        
+        // 4. For all other types of relative URLs (e.g., "bar.html", "../foo", "/path/to/file", "//host/path"),
+        // Java's URL(URL context, String spec) constructor typically works correctly.
+        try {
             URL abs = new URL(base, relUrl);
             return abs.toExternalForm();
         } catch (MalformedURLException e) {
+            // If resolution fails for other reasons, return empty string.
             return "";
         }
     }
\ No newline at end of file
-    }
