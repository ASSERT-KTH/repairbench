diff --git a/tmp/64eb6b5f-c672-4b5f-b1a7-20ecb80de5f2_buggy.java b/tmp/2a18f269-90fc-4586-9b28-ded6f4473860_fixed.java
index b4e6f03..8a65598 100644
--- a/tmp/64eb6b5f-c672-4b5f-b1a7-20ecb80de5f2_buggy.java
+++ b/tmp/2a18f269-90fc-4586-9b28-ded6f4473860_fixed.java
@@ -1,44 +1,61 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
+            try {
                 URL base;
-            try {
                 try {
                     base = new URL(baseUri);
                 } catch (MalformedURLException e) {
                     // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
+                    // If it's a relative URL, and base is bad, it can't be made absolute
+                    URL abs = new URL(relUrl); // this will throw if relUrl is not abs
                     return abs.toExternalForm();
                 }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+                // workaround: java.net.URL resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+                // If the relative URL is just a query string (starts with '?'), and the base URL has a filename
+                // (i.e., its path does not end with '/'), the Java URL constructor drops the filename.
+                // We need to preserve the filename when resolving query strings.
+                if (relUrl.startsWith("?") && !base.getPath().endsWith("/")) {
+                    // Construct the URL by appending the new query string to the base URL's path and filename,
+                    // effectively replacing any existing query/fragment in the base URL.
+                    StringBuilder sb = new StringBuilder();
+                    sb.append(base.getProtocol()).append("://").append(base.getAuthority());
+                    sb.append(base.getPath()); // This includes the filename if present
+                    sb.append(relUrl); // Append the new query string
+
+                    // Re-parse the constructed string to ensure it's a valid and normalized URL.
+                    return new URL(sb.toString()).toExternalForm();
+                }
+
                 URL abs = new URL(base, relUrl);
                 return abs.toExternalForm();
             } catch (MalformedURLException e) {
                 return "";
             }
         }
     }
\ No newline at end of file
