diff --git a/tmp/d70254cc-c8dc-4976-ad21-8279253441f9_buggy.java b/tmp/7e7e76e5-5b5a-42e6-a83c-6f3a3564e982_fixed.java
index b4e6f03..4b77d78 100644
--- a/tmp/d70254cc-c8dc-4976-ad21-8279253441f9_buggy.java
+++ b/tmp/7e7e76e5-5b5a-42e6-a83c-6f3a3564e982_fixed.java
@@ -1,44 +1,64 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
+            try {
                 URL base;
-            try {
                 try {
                     base = new URL(baseUri);
                 } catch (MalformedURLException e) {
                     // the base is unsuitable, but the attribute may be abs on its own, so try that
                     URL abs = new URL(relUrl);
                     return abs.toExternalForm();
                 }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+                // Workaround for Java's URL(URL, String) resolving relative query strings incorrectly
+                // if the base URL's path points to a file (e.g., "http://host/path/file" + "?query" -> "http://host/path/?query").
+                // It should preserve the filename.
+                // This fix applies when relUrl is *only* a query string, and base has a non-empty path that doesn't end in a slash.
+                if (relUrl.startsWith("?") && !base.getPath().isEmpty() && !base.getPath().endsWith("/")) {
+                    // Manually reconstruct the URL string to keep the filename part of the path before the query.
+                    StringBuilder absUrlBuilder = new StringBuilder();
+                    absUrlBuilder.append(base.getProtocol()).append("://");
+                    absUrlBuilder.append(base.getAuthority()); // Includes host and port
+
+                    String path = base.getPath();
+                    // path will not be null, but could be empty string for root URLs (e.g. "http://host")
+                    if (!path.isEmpty()) {
+                        absUrlBuilder.append(path);
+                    }
+                    absUrlBuilder.append(relUrl); // Append the new query string
+                    return new URL(absUrlBuilder.toString()).toExternalForm();
+                } else {
+                    // For all other cases, rely on Java's URL constructor.
                     URL abs = new URL(base, relUrl);
                     return abs.toExternalForm();
+                }
             } catch (MalformedURLException e) {
-                return "";
+                return ""; // relUrl could not be made absolute
             }
         }
     }
\ No newline at end of file
