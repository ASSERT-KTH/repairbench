diff --git a/tmp/c0ae9ca6-61ee-47dd-8ae8-21e282dac602_buggy.java b/tmp/881a5771-f775-442c-ba6e-d042559abeff_fixed.java
index b4e6f03..e9c6b67 100644
--- a/tmp/c0ae9ca6-61ee-47dd-8ae8-21e282dac602_buggy.java
+++ b/tmp/881a5771-f775-442c-ba6e-d042559abeff_fixed.java
@@ -1,44 +1,68 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
             URL base;
             try {
                 try {
                     base = new URL(baseUri);
                 } catch (MalformedURLException e) {
                     // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
+                    URL abs = new URL(relUrl); // this will throw if relUrl is not absolute, e.g. "foo.html"
                     return abs.toExternalForm();
                 }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+                // Workaround for Java URL's incorrect resolution of relative query/fragment.
+                // E.g., base "http://example.com/path/file?old", rel "?new" resolves to "http://example.com/path/?new"
+                // instead of "http://example.com/path/file?new".
+                // If the relative URL starts with '?' or '#', Java's URL constructor resolves it against the directory
+                // of the base URL, effectively dropping the file segment.
+                // We need to manually combine the base path (without its original query/fragment) and the new
+                // relative query/fragment.
+                if (relUrl.startsWith("?") || relUrl.startsWith("#")) {
+                    String baseStr = base.toExternalForm();
+                    int queryIdx = baseStr.indexOf('?');
+                    int hashIdx = baseStr.indexOf('#');
+
+                    int endOfBase = baseStr.length();
+                    if (queryIdx != -1) endOfBase = Math.min(endOfBase, queryIdx);
+                    if (hashIdx != -1) endOfBase = Math.min(endOfBase, hashIdx);
+
+                    String baseWithoutQueryOrFragment = baseStr.substring(0, endOfBase);
+                    String finalUrlString = baseWithoutQueryOrFragment + relUrl;
+                    
+                    URL abs = new URL(finalUrlString);
+                    return abs.toExternalForm();
+                } else {
+                    // For standard relative paths, use the default URL constructor.
                     URL abs = new URL(base, relUrl);
                     return abs.toExternalForm();
+                }
             } catch (MalformedURLException e) {
                 return "";
             }
         }
     }
\ No newline at end of file
