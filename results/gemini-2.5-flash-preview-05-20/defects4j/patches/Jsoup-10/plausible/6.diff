diff --git a/tmp/d666e643-3fd8-4837-8d05-f683dc201cd4_buggy.java b/tmp/7fa1c19f-c0bd-4622-86e2-5c0e1e0ad876_fixed.java
index b4e6f03..57aa58f 100644
--- a/tmp/d666e643-3fd8-4837-8d05-f683dc201cd4_buggy.java
+++ b/tmp/7fa1c19f-c0bd-4622-86e2-5c0e1e0ad876_fixed.java
@@ -1,44 +1,71 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
             URL base;
             try {
                 try {
                     base = new URL(baseUri);
                 } catch (MalformedURLException e) {
                     // the base is unsuitable, but the attribute may be abs on its own, so try that
                     URL abs = new URL(relUrl);
                     return abs.toExternalForm();
                 }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+                // Workaround for Java URL's incorrect handling of relative queries/fragments:
+                // If the relative URL starts with '?' or '#', Java incorrectly resolves it against
+                // the directory part of the base, instead of the full path.
+                // E.g. base: http://jsoup.org/path/file?bar, rel: ?foo -> Java resolves to http://jsoup.org/path/?foo
+                // Desired: http://jsoup.org/path/file?foo
+                if (relUrl.startsWith("?") || relUrl.startsWith("#")) {
+                    // Reconstruct the base URL without its query and fragment components,
+                    // ensuring we keep the full path.
+                    StringBuilder baseBuilder = new StringBuilder();
+                    baseBuilder.append(base.getProtocol()).append("://");
+                    if (base.getHost() != null && !base.getHost().isEmpty()) {
+                        baseBuilder.append(base.getHost());
+                    }
+                    if (base.getPort() != -1) {
+                        baseBuilder.append(":").append(base.getPort());
+                    }
+                    // Append the path, which includes the last path segment (e.g., "file")
+                    baseBuilder.append(base.getPath()); 
+
+                    String baseNoQueryFragment = baseBuilder.toString();
+                    
+                    // Now, form the absolute URL by combining this reconstructed base with the relative URL.
+                    URL abs = new URL(baseNoQueryFragment + relUrl);
+                    return abs.toExternalForm();
+                } else {
+                    // For typical relative paths, or absolute URLs, Java's URL constructor works as expected.
                     URL abs = new URL(base, relUrl);
                     return abs.toExternalForm();
+                }
             } catch (MalformedURLException e) {
                 return "";
             }
         }
     }
\ No newline at end of file
