diff --git a/tmp/dd51fb3d-a7ef-4339-8752-27c49ec32e68_buggy.java b/tmp/cce89ed3-8aea-4c09-bda0-be751dd66a8a_fixed.java
index 91dc4ff..7efbbbc 100644
--- a/tmp/dd51fb3d-a7ef-4339-8752-27c49ec32e68_buggy.java
+++ b/tmp/cce89ed3-8aea-4c09-bda0-be751dd66a8a_fixed.java
@@ -1,107 +1,114 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
         int pos = offset;
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
         final char quoteChar = getQuoteCharacter().charValue();
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
         switch (quoteModePolicy) {
         case ALL:
             quote = true;
             break;
         case NON_NUMERIC:
             quote = !(object instanceof Number);
             break;
         case NONE:
             // Use the existing escaping code
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
                 // always quote an empty token that is the first
                 // on the line, as it may be the only thing on the
                 // line. If it were not quoted in that case,
                 // an empty line has no tokens.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
                 char c = value.charAt(pos);
 
                 // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                // The original condition below was too aggressive, quoting fields starting with
+                // many characters that are valid TEXTDATA (e.g., '\'). This is removed.
+                // if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+                //     quote = true;
+                // }
+
+                // Instead, only quote if the first character is a defined comment marker and it's a new record.
+                final Character commentChar = getCommentMarker();
+                if (commentChar != null && newRecord && c == commentChar.charValue()) {
                     quote = true;
                 } else {
                     while (pos < end) {
                         c = value.charAt(pos);
+                        // These characters (LF, CR, quoteChar, delimChar) always require quoting in MINIMAL mode.
                         if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                             quote = true;
                             break;
                         }
                         pos++;
                     }
 
                     if (!quote) {
                         pos = end - 1;
                         c = value.charAt(pos);
                         // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
+                        // encapsulate if we end in anything less than ' ' (like trailing spaces or control chars).
                         if (c <= SP) {
                             quote = true;
                         }
                     }
                 }
             }
 
+            // This block is redundant here if the code proceeds after the quote logic.
+            // Keeping it for consistency with the original structure, but it will be hit again outside.
             if (!quote) {
                 // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
 
         if (!quote) {
             // no encapsulation needed - write out the original value
             out.append(value, start, end);
             return;
         }
 
         // we hit something that needed encapsulation
         out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
+        // The 'pos' variable is correctly positioned at the first character that caused quoting,
+        // or at 'offset' if quoting was due to initial/trailing char checks or empty string.
+        // The original 'start' is 'offset', which is correct for the first segment.
         while (pos < end) {
             final char c = value.charAt(pos);
             if (c == quoteChar) {
                 // write out the chunk up until this point
 
                 // add 1 to the length to write out the encapsulator also
                 out.append(value, start, pos + 1);
                 // put the next starting position on the encapsulator so we will
                 // write it out again with the next string (effectively doubling it)
                 start = pos;
             }
             pos++;
         }
 
         // write the last segment
         out.append(value, start, pos);
         out.append(quoteChar);
     }
\ No newline at end of file
