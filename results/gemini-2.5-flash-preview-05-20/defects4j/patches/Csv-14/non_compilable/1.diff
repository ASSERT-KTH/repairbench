diff --git a/tmp/15fa8140-f269-4a98-afe4-1d33328b74a1_buggy.java b/tmp/a690af4f-68d6-4a42-acb3-b6a52fb4cd93_fixed.java
index 91dc4ff..7bc2cda 100644
--- a/tmp/15fa8140-f269-4a98-afe4-1d33328b74a1_buggy.java
+++ b/tmp/a690af4f-68d6-4a42-acb3-b6a52fb4cd93_fixed.java
@@ -1,107 +1,36 @@
-    // the original object is needed so can check for Number
-    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
-            final Appendable out, final boolean newRecord) throws IOException {
-        boolean quote = false;
-        int start = offset;
-        int pos = offset;
-        final int end = offset + len;
-
-        final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
-
-        QuoteMode quoteModePolicy = getQuoteMode();
-        if (quoteModePolicy == null) {
-            quoteModePolicy = QuoteMode.MINIMAL;
-        }
-        switch (quoteModePolicy) {
-        case ALL:
-            quote = true;
-            break;
-        case NON_NUMERIC:
-            quote = !(object instanceof Number);
-            break;
-        case NONE:
-            // Use the existing escaping code
-            printAndEscape(value, offset, len, out);
-            return;
-        case MINIMAL:
-            if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
-                if (newRecord) {
-                    quote = true;
-                }
-            } else {
-                char c = value.charAt(pos);
-
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
     if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
         quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
-                    quote = true;
-                } else {
-                    while (pos < end) {
-                        c = value.charAt(pos);
-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
-                            quote = true;
-                            break;
-                        }
-                        pos++;
-                    }
-
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
-                            quote = true;
-                        }
-                    }
-                }
     }
+    ```
+    This condition attempts to quote a field if its first character (on a new record) is not alphanumeric. However, it's too broad. For example, a backslash (`\`, ASCII 92) is not alphanumeric and falls into this condition (`c > 'Z' && c < 'a'` is true for `\`). According to RFC4180, a backslash is generally considered "TEXTDATA" and doesn't inherently require quoting unless it's a delimiter, a quote character, or a newline.
+    The tests `testEscapeBackslash1`, `testEscapeBackslash4`, `testEscapeBackslash5` fail because the backslash input `\` is incorrectly quoted as `'\'` (when `QUOTE_CH` is `'`) instead of being printed as `\`. Removing or refining this overly broad condition is necessary.
+    Similarly, `else if (c <= COMMENT)` and `if (c <= SP)` for the trailing character check are also quite broad and can lead to unintended quoting. A more standard `MINIMAL` approach quotes based on internal delimiters, quote characters, newlines, or leading/trailing spaces.
 
+2.  **Missing Escape Character Handling When Not Quoting:**
+    The function is named `printAndQuote`, and its main logic is to decide if quoting is needed. If `quote` is determined to be `false`, the code simply appends the raw value: `out.append(value, start, end);`.
+    ```java
     if (!quote) {
         // no encapsulation needed - write out the original value
         out.append(value, start, end);
         return;
     }
-            break;
-        default:
-            throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
-        }
+    ```
+    This `if (!quote)` block appears twice and critically **does not consider the `escapeChar`**. If `quote` is false, but an `escape` character is defined in the `CSVFormat` (e.g., `\`), and the value contains characters that *should* be escaped (like the delimiter or the escape character itself), they are printed raw, leading to incorrect output. The `printAndEscape` helper function (used for `QuoteMode.NONE`) is designed for this. This common logic needs to be centralized and correctly dispatch to `printAndEscape` if `escapeChar` is present.
 
-        if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
-            return;
-        }
+3.  **Incorrect `pos` Reset for Quoting Loop:**
+    If `quote` is set to `true` by the `MINIMAL` mode's detection loop, the `pos` variable retains the index where the problematic character was found. However, the subsequent loop that actually performs the quoting (doubling `quoteChar`) needs to scan the *entire* `value` string from `offset`. The original code relies on `pos` implicitly for this loop, which could be wrong if `pos` is not reset to `offset`.
 
-        // we hit something that needed encapsulation
-        out.append(quoteChar);
+**Proposed Fixes:**
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
-        while (pos < end) {
-            final char c = value.charAt(pos);
-            if (c == quoteChar) {
-                // write out the chunk up until this point
+1.  **Refine `QuoteMode.MINIMAL` Logic:**
+    *   Remove the overly broad initial character checks (`if (newRecord && (c < '0' || ...))` and `else if (c <= COMMENT)`). These caused `\` to be quoted.
+    *   Introduce explicit checks for leading and trailing `SP` (space character), which is a common requirement for `MINIMAL` quoting in CSV.
+    *   Keep the core logic that checks for `LF`, `CR`, `quoteChar`, `delimChar` internally.
 
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
-            }
-            pos++;
-        }
+2.  **Centralize and Improve `if (!quote)` Handling:**
+    *   Remove the duplicate `if (!quote)` blocks.
+    *   Consolidate the unquoted path *after* the `switch` statement.
+    *   Inside this consolidated `if (!quote)` block, check if `getEscapeCharacter()` is non-null. If it is, delegate to `printAndEscape` for handling the unquoted value. Otherwise, proceed with a raw `out.append`.
 
-        // write the last segment
-        out.append(value, start, pos);
-        out.append(quoteChar);
-    }
+3.  **Reset `pos` for Quoting Loop:**
+    *   Before the final `while (pos < end)` loop that handles doubling the `quoteChar`, explicitly reset `pos = offset;` to ensure the entire value is scanned correctly.
