diff --git a/tmp/1d41cd8c-daa0-419b-b132-21418726a20f_buggy.java b/tmp/e79b57ab-8f25-4594-8e85-cd36a51f44a3_fixed.java
index 91dc4ff..94e4085 100644
--- a/tmp/1d41cd8c-daa0-419b-b132-21418726a20f_buggy.java
+++ b/tmp/e79b57ab-8f25-4594-8e85-cd36a51f44a3_fixed.java
@@ -1,107 +1,130 @@
+import java.io.IOException;
+
+// Assuming the following methods and constants are available in the class scope
+// (e.g., from CSVFormat or Constants utility classes):
+// private char getDelimiter();
+// private Character getQuoteCharacter();
+// private Character getEscapeCharacter();
+// private int COMMENT; // Typically '#'
+// private char LF;    // Line Feed
+// private char CR;    // Carriage Return
+// private char SP;    // Space character
+// private void printAndEscape(final CharSequence value, final int offset, final int len, final Appendable out) throws IOException;
+
 // the original object is needed so can check for Number
 private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
         final Appendable out, final boolean newRecord) throws IOException {
     boolean quote = false;
     int start = offset;
+    // pos is used to scan the value for problematic characters that require quoting or escaping.
+    // When quoting is determined, 'pos' will hold the index of the first character that triggered quoting.
     int pos = offset;
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
     final char quoteChar = getQuoteCharacter().charValue();
+    final Character escapeChar = getEscapeCharacter();
+    final boolean applyEscape = escapeChar != null;
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
         quoteModePolicy = QuoteMode.MINIMAL;
     }
     switch (quoteModePolicy) {
     case ALL:
         quote = true;
         break;
     case NON_NUMERIC:
         quote = !(object instanceof Number);
         break;
     case NONE:
-            // Use the existing escaping code
+        // Use the existing escaping code, no quoting
         printAndEscape(value, offset, len, out);
         return;
     case MINIMAL:
         if (len <= 0) {
             // always quote an empty token that is the first
             // on the line, as it may be the only thing on the
             // line. If it were not quoted in that case,
             // an empty line has no tokens.
             if (newRecord) {
                 quote = true;
             }
         } else {
             char c = value.charAt(pos);
 
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+            // Check if the first character requires quoting
+            // This condition is more accurate for minimal quoting than the previous CVE fix.
+            if (c == CR || c == LF || c == quoteChar || c == delimChar || (applyEscape && c == escapeChar.charValue()) || (newRecord && (c <= SP || c == COMMENT))) {
                 quote = true;
             } else {
+                // Scan the rest of the value for characters that require quoting
+                // The 'pos' variable here is used to find the first problematic char.
                 while (pos < end) {
                     c = value.charAt(pos);
                     if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                         quote = true;
                         break;
                     }
                     pos++;
                 }
 
                 if (!quote) {
-                        pos = end - 1;
+                    // If not already quoted, check the last character
+                    pos = end - 1; // Reset pos to check the last character
                     c = value.charAt(pos);
                     // Some other chars at the end caused the parser to fail, so for now
                     // encapsulate if we end in anything less than ' '
                     if (c <= SP) {
                         quote = true;
                     }
                 }
             }
         }
 
         if (!quote) {
-                // no encapsulation needed - write out the original value
-                out.append(value, start, end);
+            // no encapsulation needed - write out the original value, but apply escaping if an escape character is defined.
+            printAndEscape(value, offset, len, out);
             return;
         }
         break;
     default:
         throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
     }
 
     if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
+        // This block is reached if quoteModePolicy was not MINIMAL/NONE and 'quote' was determined false.
+        // no encapsulation needed - write out the original value, but apply escaping if an escape character is defined.
+        printAndEscape(value, offset, len, out);
         return;
     }
 
-        // we hit something that needed encapsulation
+    // We hit something that needed encapsulation
     out.append(quoteChar);
 
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
-        while (pos < end) {
-            final char c = value.charAt(pos);
-            if (c == quoteChar) {
-                // write out the chunk up until this point
+    // Pick up where we left off: original 'pos' is where the problematic char was, but for
+    // iterating through the whole string for doubling/escaping, we should start from 'offset'.
+    // 'currentStart' tracks the beginning of the current segment to append.
+    int currentPos = offset;
+    int currentStart = offset;
 
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
+    while (currentPos < end) {
+        final char c = value.charAt(currentPos);
+        if (applyEscape && c == escapeChar.charValue()) {
+            // This character needs to be escaped.
+            // Write out the chunk up until this point
+            out.append(value, currentStart, currentPos); // Append characters before the escape char
+            out.append(escapeChar.charValue());          // Append the escape char itself
+            currentStart = currentPos;                   // Next segment starts from the escape char's position
+        } else if (c == quoteChar) {
+            // This character needs to be doubled.
+            out.append(value, currentStart, currentPos + 1); // Append characters up to and including the quote char
+            currentStart = currentPos;                       // Next segment starts from the quote char's position
         }
-            pos++;
+        currentPos++;
     }
 
-        // write the last segment
-        out.append(value, start, pos);
+    // Write the last segment
+    out.append(value, currentStart, currentPos);
     out.append(quoteChar);
 }
\ No newline at end of file
