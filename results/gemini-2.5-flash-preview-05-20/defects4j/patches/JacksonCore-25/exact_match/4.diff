diff --git a/tmp/2a6c1175-677e-41ee-b1b2-04808e1fc3d2_buggy.java b/tmp/66168ee9-7097-462d-9199-15a29b57ac19_fixed.java
index 8dfbd84..489dcf0 100644
--- a/tmp/2a6c1175-677e-41ee-b1b2-04808e1fc3d2_buggy.java
+++ b/tmp/66168ee9-7097-462d-9199-15a29b57ac19_fixed.java
@@ -1,43 +1,47 @@
     private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
     {
         _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
         char[] outBuf = _textBuffer.getCurrentSegment();
         int outPtr = _textBuffer.getCurrentSegmentSize();
         final int maxCode = codes.length;
 
         while (true) {
             if (_inputPtr >= _inputEnd) {
                 if (!_loadMore()) { // acceptable for now (will error out later)
                     break;
                 }
             }
             char c = _inputBuffer[_inputPtr];
             int i = (int) c;
-            if (i <= maxCode) {
+            // The `codes` array is 0-indexed, so valid indices are from 0 to codes.length - 1.
+            // If `i` is equal to `codes.length` (which is `maxCode`), accessing `codes[i]` will cause an `ArrayIndexOutOfBoundsException`.
+            // The condition should be `i < maxCode` to ensure `i` is a valid index for the `codes` array.
+            // Characters with value `i >= maxCode` should fall through to the `Character.isJavaIdentifierPart` check.
+            if (i < maxCode) { // FIX: Changed from `i <= maxCode` to `i < maxCode`
                 if (codes[i] != 0) {
                     break;
                 }
             } else if (!Character.isJavaIdentifierPart(c)) {
                 break;
             }
             ++_inputPtr;
             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
             // Ok, let's add char to output:
             outBuf[outPtr++] = c;
 
             // Need more room?
             if (outPtr >= outBuf.length) {
                 outBuf = _textBuffer.finishCurrentSegment();
                 outPtr = 0;
             }
         }
         _textBuffer.setCurrentLength(outPtr);
         {
             TextBuffer tb = _textBuffer;
             char[] buf = tb.getTextBuffer();
             int start = tb.getTextOffset();
             int len = tb.size();
 
             return _symbols.findSymbol(buf, start, len, hash);
         }
     }
\ No newline at end of file
