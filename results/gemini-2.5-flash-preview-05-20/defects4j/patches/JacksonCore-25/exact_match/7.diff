diff --git a/tmp/4e7b71a3-c201-4977-b98c-7d874f44f911_buggy.java b/tmp/121264a1-39b6-42ca-b8d8-4e30534b959a_fixed.java
index 8dfbd84..85a373c 100644
--- a/tmp/4e7b71a3-c201-4977-b98c-7d874f44f911_buggy.java
+++ b/tmp/121264a1-39b6-42ca-b8d8-4e30534b959a_fixed.java
@@ -1,43 +1,50 @@
     private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
     {
         _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
         char[] outBuf = _textBuffer.getCurrentSegment();
         int outPtr = _textBuffer.getCurrentSegmentSize();
         final int maxCode = codes.length;
 
         while (true) {
             if (_inputPtr >= _inputEnd) {
                 if (!_loadMore()) { // acceptable for now (will error out later)
                     break;
                 }
             }
             char c = _inputBuffer[_inputPtr];
             int i = (int) c;
-            if (i <= maxCode) {
+            // The `codes` array (_fastCharCodes) is typically 256 in length, for ASCII characters.
+            // Indices are 0 to 255.
+            // The original condition `i <= maxCode` would allow `i` to be `256` if `maxCode` is `256`,
+            // leading to an ArrayIndexOutOfBoundsException when accessing `codes[256]`.
+            // The correct check should be `i < maxCode` to ensure `i` is a valid index.
+            // For characters with code points >= maxCode (e.g., 256 and above for a maxCode of 256),
+            // `Character.isJavaIdentifierPart(c)` should be used instead.
+            if (i < maxCode) { // FIX: Changed 'i <= maxCode' to 'i < maxCode'
                 if (codes[i] != 0) {
                     break;
                 }
             } else if (!Character.isJavaIdentifierPart(c)) {
                 break;
             }
             ++_inputPtr;
             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
             // Ok, let's add char to output:
             outBuf[outPtr++] = c;
 
             // Need more room?
             if (outPtr >= outBuf.length) {
                 outBuf = _textBuffer.finishCurrentSegment();
                 outPtr = 0;
             }
         }
         _textBuffer.setCurrentLength(outPtr);
         {
             TextBuffer tb = _textBuffer;
             char[] buf = tb.getTextBuffer();
             int start = tb.getTextOffset();
             int len = tb.size();
 
             return _symbols.findSymbol(buf, start, len, hash);
         }
     }
\ No newline at end of file
