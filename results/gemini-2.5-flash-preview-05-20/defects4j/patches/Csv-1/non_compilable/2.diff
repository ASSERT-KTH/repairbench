diff --git a/tmp/0c71725c-7b8d-4f9b-9c27-624da51f1b97_buggy.java b/tmp/7ba073bd-90ac-4432-bdd5-2714b31bc07e_fixed.java
index 3ba614a..7dcdc80 100644
--- a/tmp/0c71725c-7b8d-4f9b-9c27-624da51f1b97_buggy.java
+++ b/tmp/7ba073bd-90ac-4432-bdd5-2714b31bc07e_fixed.java
@@ -1,9 +1,31 @@
     @Override
     public int read() throws IOException {
-        int current = super.read();
-        if (current == '\n') {
+        int current = super.read(); // Read the next character from the underlying stream
+
+        // Do not process line counting if EOF is reached
+        if (current == -1) {
+            lastChar = current; // Update lastChar to indicate EOF
+            return current;     // Return -1 for EOF
+        }
+
+        // Logic to increment lineCounter based on the configured lineSeparator.
+        // This assumes 'lineSeparator' is a String field in the class (e.g., inherited or a constructor parameter),
+        // and 'lastChar' is an int field tracking the previously read character (initialized appropriately).
+
+        if (this.lineSeparator.length() == 1) {
+            // Case: Line separator is a single character (e.g., "\n" or "\r")
+            if (current == this.lineSeparator.charAt(0)) {
+                lineCounter++;
+            }
+        } else if (this.lineSeparator.length() == 2) {
+            // Case: Line separator is two characters (e.g., "\r\n")
+            // Increment lineCounter only when '\n' is read AND the previous character was '\r'.
+            if (lastChar == '\r' && current == '\n') {
                 lineCounter++;
             }
-        lastChar = current;
-        return lastChar;
+        }
+        // If lineSeparator is empty or something unexpected, no line counting occurs, which is desired.
+
+        lastChar = current; // Store the current character for the next read operation
+        return lastChar;    // Return the character just read
     }
\ No newline at end of file
