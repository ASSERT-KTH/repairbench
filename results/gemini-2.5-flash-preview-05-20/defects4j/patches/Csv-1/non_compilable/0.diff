diff --git a/tmp/94b2f295-d465-4df4-9b93-aaae225fdf3c_buggy.java b/tmp/ef3e3cd3-b397-4450-a1e6-4e2d4c1baa5a_fixed.java
index 3ba614a..18a3562 100644
--- a/tmp/94b2f295-d465-4df4-9b93-aaae225fdf3c_buggy.java
+++ b/tmp/ef3e3cd3-b397-4450-a1e6-4e2d4c1baa5a_fixed.java
@@ -1,9 +1,40 @@
     @Override
     public int read() throws IOException {
-        int current = super.read();
+        int current = super.read(); // Reads the current character from the underlying stream
+
+        if (current != -1) { // Check if not end of stream
             if (current == '\n') {
+                // If the current character is a line feed ('\n'), increment the line counter.
                 lineCounter++;
+            } else if (current == '\r') {
+                // If the current character is a carriage return ('\r'),
+                // we need to peek at the next character to handle CRLF sequences.
+                // In a CRLF sequence ('\r\n'), the line should only be counted once.
+                // If it's a lone '\r' (CR), it also counts as a line break.
+                
+                // Read the next character from the stream to look ahead.
+                // This assumes the underlying reader (accessed via super.read()) supports peeking
+                // and unreading, typical for a PushbackReader.
+                int next = super.read(); 
+                
+                // If the next character is not a line feed ('\n'),
+                // then the current '\r' constitutes a line break on its own.
+                // If 'next' IS '\n', it's part of a CRLF sequence, and we don't count '\r' here;
+                // the subsequent '\n' read will trigger the line count.
+                if (next != '\n') {
+                    lineCounter++;
+                }
+                
+                // Push the 'next' character back into the stream if it wasn't the end of stream.
+                // This makes it available for subsequent read calls.
+                // This assumes the current object (or its superclass) provides an unread method,
+                // meaning it functions as or extends a PushbackReader.
+                if (next != -1) {
+                    unread(next); 
+                }
+            }
         }
-        lastChar = current;
-        return lastChar;
+        
+        lastChar = current; // Store the current character as lastChar for potential future logic
+        return lastChar;    // Return the current character that was read
     }
\ No newline at end of file
