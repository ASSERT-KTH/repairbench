diff --git a/tmp/2782c81a-a7be-426e-93c3-5fb9786ec245_buggy.java b/tmp/ada0e1c9-25ea-4b7f-a2d4-a95ba0a6fc0f_fixed.java
index 3ba614a..d35e059 100644
--- a/tmp/2782c81a-a7be-426e-93c3-5fb9786ec245_buggy.java
+++ b/tmp/ada0e1c9-25ea-4b7f-a2d4-a95ba0a6fc0f_fixed.java
@@ -1,9 +1,23 @@
     @Override
     public int read() throws IOException {
         int current = super.read();
+        // Check for line breaks based on the current character and the previously read character.
+        // This logic ensures that common line endings (\n, \r, \r\n) are counted as a single line.
         if (current == '\n') {
+            // If the current character is a newline, increment the line counter,
+            // UNLESS the previous character was a carriage return, indicating a CRLF sequence
+            // where the line was already counted when the carriage return was encountered.
+            if (lastChar != '\r') {
                 lineCounter++;
             }
-        lastChar = current;
-        return lastChar;
+        } else if (current == '\r') {
+            // If the current character is a carriage return, increment the line counter.
+            // This handles standalone CR line endings (e.g., Mac OS 9).
+            // If it's part of a CRLF sequence, the subsequent '\n' will be ignored by the above logic.
+            lineCounter++;
+        }
+        // For any other character, or EOF (-1), the line counter does not change.
+
+        lastChar = current; // Store the current character for the next read operation's logic.
+        return lastChar; // Return the character just read.
     }
\ No newline at end of file
