diff --git a/tmp/9ae8652b-8ffe-4914-893e-c44356a019e1_buggy.java b/tmp/2e57e949-d97d-4c0c-a7be-9f4e403e6e80_fixed.java
index 3ba614a..e9df2ad 100644
--- a/tmp/9ae8652b-8ffe-4914-893e-c44356a019e1_buggy.java
+++ b/tmp/2e57e949-d97d-4c0c-a7be-9f4e403e6e80_fixed.java
@@ -1,9 +1,23 @@
     @Override
     public int read() throws IOException {
         int current = super.read();
+        // If the current character is a newline (LF)
         if (current == '\n') {
+            // Increment lineCounter only if the previous character was NOT a carriage return (CR).
+            // This prevents double-counting for '\r\n' sequences, as the '\r' part
+            // would have already incremented the counter (see the else-if block).
+            if (lastChar != '\r') {
                 lineCounter++;
             }
-        lastChar = current;
+        }
+        // If the current character is a carriage return (CR)
+        else if (current == '\r') {
+            // Always increment lineCounter for a CR.
+            // If this CR is part of an '\r\n' sequence, the subsequent '\n' will be
+            // handled by the 'if (current == '\n')' block, but it will not increment
+            // due to the 'lastChar != '\r'' check.
+            lineCounter++;
+        }
+        lastChar = current; // Store the current character for the next read operation
         return lastChar;
     }
\ No newline at end of file
