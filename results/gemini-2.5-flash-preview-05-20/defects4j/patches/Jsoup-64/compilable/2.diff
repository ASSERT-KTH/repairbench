diff --git a/tmp/a8d39ef1-9f83-43aa-8d9c-dca3ac534fcc_buggy.java b/tmp/c5dff261-9eb8-4eb6-a04b-c7f0651066f8_fixed.java
index 5eedc11..7b732ef 100644
--- a/tmp/a8d39ef1-9f83-43aa-8d9c-dca3ac534fcc_buggy.java
+++ b/tmp/c5dff261-9eb8-4eb6-a04b-c7f0651066f8_fixed.java
@@ -1,6 +1,25 @@
     private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {
+        // According to HTML5 spec, if a raw text element (like style, script, noframes)
+        // has a self-closing flag (e.g., <style />), it's a parse error.
+        // The spec implies the element should be immediately popped from the stack,
+        // effectively treating it as an empty element.
+        // Jsoup's `tb.insert()` method already handles this "pop" for non-void
+        // self-closing tags (like style, which is not void).
+        // If the tag is self-closing, it means there's no raw text content to parse.
+        // Therefore, we should *not* transition the tokeniser to Rawtext mode
+        // or change the insertion mode to Text, as that would affect subsequent tokens.
+        if (startTag.isSelfClosing()) {
+            // Insert the tag. For non-void self-closing tags, insert() will
+            // add it to the stack and then immediately pop it (closing the element).
+            tb.insert(startTag);
+            // No further tokeniser or insertion mode changes are needed for self-closing rawtext tags.
+        } else {
+            // For a regular raw text element (not self-closing),
+            // we insert it and then switch to rawtext parsing mode for its content
+            // until its closing tag is found.
             tb.insert(startTag);
             tb.tokeniser.transition(TokeniserState.Rawtext);
             tb.markInsertionMode();
             tb.transition(Text);
         }
+    }
\ No newline at end of file
