diff --git a/tmp/9253afd4-a800-4c00-8212-d700445f9da8_buggy.java b/tmp/1d0f7801-2786-4214-877f-b07975688340_fixed.java
index 5eedc11..5efbceb 100644
--- a/tmp/9253afd4-a800-4c00-8212-d700445f9da8_buggy.java
+++ b/tmp/1d0f7801-2786-4214-877f-b07975688340_fixed.java
@@ -1,6 +1,23 @@
     private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {
         tb.insert(startTag);
+
+        // According to the HTML5 parsing specification, for elements that are not void elements (like <style>, <script>, <noframes>),
+        // if a self-closing flag is present in the start tag (e.g., <style />), it signifies an immediately closed element.
+        // In such cases, the element should be treated as empty, and the parser should not transition into a rawtext content mode.
+        // Instead, an implicit end tag should be processed immediately.
+        if (startTag.isSelfClosing()) {
+            // Acknowledge the self-closing flag. For non-void elements, this instructs the tree builder
+            // to immediately process an implicit end tag for the element that was just inserted.
+            // This effectively closes the element (e.g., <style></style>).
+            tb.acknowledgeSelfClosingFlag(startTag);
+            // Since the element is considered closed, we do not transition the tokeniser
+            // or tree builder to handle raw text content.
+            return; // Exit the function as the tag is handled.
+        }
+
+        // If the start tag is not self-closing (e.g., <style>), then proceed with rawtext parsing
+        // as per the standard handling for these elements.
         tb.tokeniser.transition(TokeniserState.Rawtext);
         tb.markInsertionMode();
         tb.transition(Text);
     }
\ No newline at end of file
