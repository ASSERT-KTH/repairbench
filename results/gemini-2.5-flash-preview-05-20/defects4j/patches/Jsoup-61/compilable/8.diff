diff --git a/tmp/e524702d-d2dc-4db9-a965-d4ef93c9ad0e_buggy.java b/tmp/57dcc154-52e3-4296-8397-0780df7c87f5_fixed.java
index 139579d..b84bce7 100644
--- a/tmp/e524702d-d2dc-4db9-a965-d4ef93c9ad0e_buggy.java
+++ b/tmp/57dcc154-52e3-4296-8397-0780df7c87f5_fixed.java
@@ -1,43 +1,64 @@
     // performance sensitive
     public boolean hasClass(String className) {
         final String classAttr = attributes.get("class");
+
+        // Fix: Handle the case where the "class" attribute is missing (null) or empty.
+        // If classAttr is null, no class attribute exists for this element.
+        // If classAttr is an empty string, there are no class names present.
+        if (classAttr == null || classAttr.isEmpty()) {
+            return false;
+        }
+
         final int len = classAttr.length();
         final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
+        // If the class attribute string is shorter than the desired class name,
+        // it cannot possibly contain the desired class name.
+        if (len < wantLen) {
             return false;
         }
 
-        // if both lengths are equal, only need compare the className with the attribute
+        // If both lengths are equal, it means the class attribute contains a single class name
+        // that has the same length as the desired class name. We just need to compare them,
+        // ignoring case.
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
+        // Otherwise (len > wantLen), the class attribute string might contain multiple class names
+        // separated by whitespace, or a single class name that is longer than 'className'
+        // but which 'className' might match as a substring.
+        // We need to scan for individual class names and compare them.
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
+                    // White space ends a class name. Compare the extracted class name
+                    // (from 'start' to 'i') with the requested one, ignoring case.
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
-                        return true;
+                        return true; // Found a match!
                     }
-                    inClass = false;
+                    inClass = false; // Reset to look for the next class name
                 }
             } else {
                 if (!inClass) {
-                    // we're in a class name : keep the start of the substring
+                    // We've just entered a class name (current character is not whitespace
+                    // and we were not previously in a class name).
+                    // Mark the start of this potential class name.
                     inClass = true;
                     start = i;
                 }
             }
         }
 
-        // check the last entry
+        // After the loop, we need to check the last class name in the string,
+        // in case the string does not end with whitespace.
+        // For example, if classAttr is "foo bar", "bar" would be processed here.
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
+        // If no match was found after checking all class names, return false.
         return false;
     }
\ No newline at end of file
