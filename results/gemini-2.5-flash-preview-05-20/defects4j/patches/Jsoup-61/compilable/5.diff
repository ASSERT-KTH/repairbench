diff --git a/tmp/2cf82393-c689-4d7b-a99a-4c9c1b9e3372_buggy.java b/tmp/90ee7d40-347a-4239-a4b7-5a3d8c2896a5_fixed.java
index 139579d..e6904e6 100644
--- a/tmp/2cf82393-c689-4d7b-a99a-4c9c1b9e3372_buggy.java
+++ b/tmp/90ee7d40-347a-4239-a4b7-5a3d8c2896a5_fixed.java
@@ -1,43 +1,62 @@
     // performance sensitive
     public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
+        // Attempt to retrieve the class attribute value using the standard Jsoup method.
+        // In Jsoup, attribute names are canonicalized to lowercase, so 'attributes.get("class")'
+        // should ideally handle all casings of the 'class' attribute name (e.g., 'Class', 'CLASS').
+        String classAttr = attributes.get("class");
+
+        // If the standard retrieval yields an empty string (meaning the attribute was not found
+        // or stored under the canonical lowercase 'class' name),
+        // we perform a fallback check by iterating all attributes.
+        // This compensates for potential inconsistencies in attribute name storage/retrieval
+        // that might occur in specific Jsoup versions or environments where attribute names
+        // are not reliably canonicalized to lowercase in the Attributes map keys.
+        if (classAttr.isEmpty()) { // Jsoup's attributes.get() returns "" if not found, not null.
+            for (org.jsoup.nodes.Attribute attr : attributes) {
+                if (attr.getKey().equalsIgnoreCase("class")) {
+                    classAttr = attr.getValue();
+                    break;
+                }
+            }
+        }
+        
         final int len = classAttr.length();
         final int wantLen = className.length();
 
         if (len == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
         // check the last entry
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
         return false;
     }
\ No newline at end of file
