diff --git a/tmp/a0a68f0c-8610-499b-a770-b5acc110dc26_buggy.java b/tmp/98d6fb55-95a0-4d7a-ae1a-662ff33d047f_fixed.java
index 139579d..4f33d17 100644
--- a/tmp/a0a68f0c-8610-499b-a770-b5acc110dc26_buggy.java
+++ b/tmp/98d6fb55-95a0-4d7a-ae1a-662ff33d047f_fixed.java
@@ -1,43 +1,57 @@
     // performance sensitive
     public boolean hasClass(String className) {
         final String classAttr = attributes.get("class");
+        // FIX: If the "class" attribute does not exist (and thus `classAttr` is null),
+        // then the element cannot have the class. Return false instead of throwing NullPointerException.
+        if (classAttr == null) {
+            return false;
+        }
+
         final int len = classAttr.length();
         final int wantLen = className.length();
 
+        // The original logic handles cases where `classAttr` is empty or shorter than `className`.
+        // This is still correct after the null check.
         if (len == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
+        // This covers elements with a single class attribute, e.g., <p class="foo">.
+        // `equalsIgnoreCase` correctly handles case-insensitivity.
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
+        // This handles elements with multiple class attributes, e.g., <p class="one two three">.
+        // The loop iterates through class names, and `regionMatches(true, ...)` correctly handles case-insensitivity
+        // and avoids new String allocations.
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
-                    inClass = false;
+                    inClass = false; // Reset for next class name
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name: keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
-        // check the last entry
+        // Check the last entry, in case the class attribute doesn't end with whitespace.
+        // This handles cases like <p class="one two">.
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
         return false;
     }
