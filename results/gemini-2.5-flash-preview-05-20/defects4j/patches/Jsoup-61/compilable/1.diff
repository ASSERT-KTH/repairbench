diff --git a/tmp/181b278d-183f-488c-b9c4-4d55867e45b9_buggy.java b/tmp/eec27239-afc5-4585-aa07-4761733911bb_fixed.java
index 139579d..7b95429 100644
--- a/tmp/181b278d-183f-488c-b9c4-4d55867e45b9_buggy.java
+++ b/tmp/eec27239-afc5-4585-aa07-4761733911bb_fixed.java
@@ -1,43 +1,54 @@
     // performance sensitive
     public boolean hasClass(String className) {
         final String classAttr = attributes.get("class");
+        // FIX: If the 'class' attribute does not exist for the element,
+        // attributes.get("class") returns null. Accessing .length() on a null
+        // string would throw a NullPointerException. An element without a
+        // 'class' attribute should naturally not be considered to have any classes.
+        if (classAttr == null) {
+            return false;
+        }
+
         final int len = classAttr.length();
         final int wantLen = className.length();
 
         if (len == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
-        // check the last entry
+        // check the last entry - if we were in a class name when the loop ended, check that last token
+        // The condition `len - start == wantLen` is crucial here to ensure an exact match.
+        // For example, if classAttr="foobar" and className="foo", it should not match.
+        // The last part of the string 'foobar' (from start=0, len=6) is not equal to 'foo' (len=3).
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
         return false;
     }
