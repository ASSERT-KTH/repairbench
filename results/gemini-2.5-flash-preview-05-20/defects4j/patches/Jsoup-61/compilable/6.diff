diff --git a/tmp/a5993743-099d-45e2-ab57-52b2b08f56a7_buggy.java b/tmp/c6d4d37c-ce0d-46ba-8a1c-3d94a1762e45_fixed.java
index 139579d..7101ac1 100644
--- a/tmp/a5993743-099d-45e2-ab57-52b2b08f56a7_buggy.java
+++ b/tmp/c6d4d37c-ce0d-46ba-8a1c-3d94a1762e45_fixed.java
@@ -1,43 +1,61 @@
     // performance sensitive
     public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
+        // HTML attribute names are case-insensitive.
+        // Use getIgnoreCase to retrieve the "class" attribute value,
+        // allowing for variations like "Class", "CLASS", etc.
+        final String classAttr = attributes.getIgnoreCase("class");
+
+        // If the element does not have a class attribute, or if its value is empty,
+        // it cannot have the requested class.
+        if (classAttr == null || classAttr.length() == 0) {
+            return false;
+        }
+
         final int len = classAttr.length();
         final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
+        // If the class attribute value is shorter than the desired class name,
+        // it cannot be a match.
+        if (len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
+        // This handles cases where the class attribute only contains one class name
+        // (e.g., class="foo") and we're looking for that specific class.
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
+        // This part iterates through the class attribute value, splitting it by whitespace
+        // to find individual class names and comparing them case-insensitively.
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
-        // check the last entry
+        // check the last entry:
+        // After the loop, if we were in a class name, it means the last part
+        // of the string might be the class name we're looking for.
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
         return false;
     }
\ No newline at end of file
