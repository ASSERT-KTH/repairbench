diff --git a/tmp/9558e22e-c659-44f8-8ae1-6531d6031e90_buggy.java b/tmp/0a2784ab-9066-4be6-9510-d31a8997c6c0_fixed.java
index 57d43b9..18553f8 100644
--- a/tmp/9558e22e-c659-44f8-8ae1-6531d6031e90_buggy.java
+++ b/tmp/0a2784ab-9066-4be6-9510-d31a8997c6c0_fixed.java
@@ -1,102 +1,91 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
      * @throws ConvergenceException if the algorithm fails to converge.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
-        final double small = 1e-50;
+        final double small = 1e-50; // Use small to avoid division by zero
         double hPrev = getA(0, x);
 
         // use the value of small as epsilon criteria for zero checks
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
         }
 
-        int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
-        double hN = hPrev;
+        // C_0 and D_0 are the initial terms for the modified Lentz algorithm
+        // C_n = b_n + a_n / C_{n-1}
+        // D_n = 1 / (b_n + a_n * D_{n-1})
+        // f_n = f_{n-1} * C_n * D_n
+        double cN = hPrev; // C_0
+        double dN = 0.0;   // D_0, will be 1/D_0 on first iteration
+
+        int n = 1; // current iteration
 
         while (n < maxIterations) {
             final double a = getA(n, x);
             final double b = getB(n, x);
 
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
-                }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                    }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
-                    }
+            // Calculate D_n
+            dN = b + a * dN;
+            if (Precision.equals(dN, 0.0, small)) {
+                dN = small;
             }
+            dN = 1.0 / dN;
+
+            // Calculate C_n
+            cN = b + a / cN;
+            if (Precision.equals(cN, 0.0, small)) {
+                cN = small;
             }
 
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
+            // Calculate delta_n = C_n * D_n
+            final double deltaN = cN * dN;
+
+            // Update result: f_n = f_{n-1} * delta_n
+            hPrev = hPrev * deltaN;
 
-            if (Double.isInfinite(hN)) {
+            // Check for divergence
+            if (Double.isInfinite(hPrev)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                x);
             }
-            if (Double.isNaN(hN)) {
+            if (Double.isNaN(hPrev)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                x);
             }
 
+            // Check for convergence
             if (FastMath.abs(deltaN - 1.0) < epsilon) {
                 break;
             }
 
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
             n++;
         }
 
         if (n >= maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
 
-        return hN;
+        return hPrev;
     }
\ No newline at end of file
