diff --git a/tmp/96ce7520-1e50-46e2-b4de-7431d3cbf746_buggy.java b/tmp/72daf3ab-9293-42bd-8b18-44b06af3c1aa_fixed.java
index 57d43b9..c876d68 100644
--- a/tmp/96ce7520-1e50-46e2-b4de-7431d3cbf746_buggy.java
+++ b/tmp/72daf3ab-9293-42bd-8b18-44b06af3c1aa_fixed.java
@@ -1,102 +1,131 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
      * @throws ConvergenceException if the algorithm fails to converge.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
+        // A tiny value used to avoid division by zero or underflow
         final double small = 1e-50; 
+
+        // Initialisation for n=0 according to Thompson & Barnett, page 18:
+        // f_0 = b_0
+        // C_0 = f_0
+        // D_0 = 0
+        // (Where b_0 is getA(0, x) in this implementation's mapping)
+
+        // hPrev stores the current convergent f_n. Initially f_0.
         double hPrev = getA(0, x);
 
-        // use the value of small as epsilon criteria for zero checks
+        // If f_0 is zero, set it to a small value to avoid division by zero in later steps.
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
         }
 
-        int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
+        // cPrev stores C_n. Initially C_0 = f_0.
         double cPrev = hPrev; 
+        // dPrev stores D_n. Initially D_0 = 0.0.
+        // It will be effectively 'small' when used in a division if zero.
+        double dPrev = 0.0;   
+        
+        // hN stores the convergent for the current iteration, updated at each step.
         double hN = hPrev;    
 
+        int n = 1;
         while (n < maxIterations) {
+            // For n >= 1:
+            // 'a' = getA(n, x) maps to b_n in Thompson & Barnett (the constant term in the denominator)
+            // 'b' = getB(n, x) maps to a_n in Thompson & Barnett (the numerator term)
             final double a = getA(n, x);
             final double b = getB(n, x);
 
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
+            // Calculate D_n = b_n + a_n / D_{n-1}
+            // If D_{n-1} (dPrev) is effectively zero, use 'small' to avoid division by zero or large numbers.
+            double dCurr = a + b / dPrev;
+            if (Precision.equals(dPrev, 0.0, small)) {
+                dCurr = a + b / small;
             }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+            // If the calculated D_n is effectively zero, set it to 'small' for the next iteration's division.
+            if (Precision.equals(dCurr, 0.0, small)) {
+                dCurr = small;
             }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
+
+            // Calculate C_n = b_n + a_n / C_{n-1}
+            // If C_{n-1} (cPrev) is effectively zero, use 'small'.
+            double cCurr = a + b / cPrev;
+            if (Precision.equals(cPrev, 0.0, small)) {
+                cCurr = a + b / small;
             }
+            // If the calculated C_n is effectively zero, set it to 'small'.
+            if (Precision.equals(cCurr, 0.0, small)) {
+                cCurr = small;
             }
+
+            // Numerical stability: Scale cCurr, dCurr, and hPrev if they become excessively large.
+            // This prevents overflow, preserving the ratio cCurr/dCurr and the overall fraction value.
+            // Using 1.0e100 as a threshold is a common practice in robust Lentz implementations (e.g., Numerical Recipes).
+            final double big = 1.0e100;
+            if (FastMath.abs(cCurr) > big || FastMath.abs(dCurr) > big) {
+                // If either C_n or D_n is too large, scale all relevant terms by the larger of the two.
+                double scale = FastMath.max(FastMath.abs(cCurr), FastMath.abs(dCurr));
+                cCurr /= scale;
+                dCurr /= scale;
+                hPrev /= scale; // The previous convergent must also be scaled to maintain correct proportionality.
             }
             
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
+            // Calculate delta_n = C_n / D_n
+            final double deltaN = cCurr / dCurr;
+            
+            // Calculate f_n = f_{n-1} * delta_n
+            hN = hPrev * deltaN;
 
+            // Check for divergence (result is infinite or NaN)
             if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
             if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
             }
 
+            // Check for convergence based on delta_n approaching 1.0
             if (FastMath.abs(deltaN - 1.0) < epsilon) {
                 break;
             }
 
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
+            // Update variables for the next iteration:
+            // dPrev becomes D_n (dCurr) for the next step (it will be D_{n-1})
+            // cPrev becomes C_n (cCurr) for the next step (it will be C_{n-1})
+            // hPrev becomes f_n (hN) for the next step (it will be f_{n-1})
+            dPrev = dCurr;
+            cPrev = cCurr;
+            hPrev = hN;
             n++;
         }
 
+        // If the loop finished without converging within maxIterations, throw an exception.
         if (n >= maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
 
         return hN;
     }
\ No newline at end of file
