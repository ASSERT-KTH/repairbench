diff --git a/tmp/e62f040c-9992-4bb5-b2e9-2a09b3cc2bad_buggy.java b/tmp/fcfe0f78-1968-4c8a-afdd-04f52c0dbbb1_fixed.java
index 57d43b9..07c984a 100644
--- a/tmp/e62f040c-9992-4bb5-b2e9-2a09b3cc2bad_buggy.java
+++ b/tmp/fcfe0f78-1968-4c8a-afdd-04f52c0dbbb1_fixed.java
@@ -1,102 +1,113 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
      * @throws ConvergenceException if the algorithm fails to converge.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
-        final double small = 1e-50;
-        double hPrev = getA(0, x);
+        final double small = 1e-50; // A small number to prevent division by zero or underflow
 
-        // use the value of small as epsilon criteria for zero checks
+        // Thompson & Barnett, page 19, "Modified Lentz's Method for Real Continued Fractions"
+        // Initialization for k = 0:
+        // f_0 = a_0 (current convergent)
+        // C_0 = a_0 (forward recurrence for C terms)
+        // D_0 = 0   (forward recurrence for D terms)
+
+        // In the code:
+        // hPrev holds f_k (current convergent)
+        // cPrev holds C_{k-1}
+        // dPrev holds D_{k-1}
+
+        double hPrev = getA(0, x); // f_0
+        double cPrev = hPrev;      // C_0
+        double dPrev = 0.0;        // D_0
+
+        // If the initial a_0 (which is f_0 and C_0) is zero or very small,
+        // replace it with 'small' to prevent division by zero later.
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
+            cPrev = small;
         }
 
-        int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
-        double hN = hPrev;
-
+        int n = 1; // Start iteration from k=1
         while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
-
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+            final double a = getA(n, x); // a_n (A_k in Thompson & Barnett notation)
+            final double b = getB(n, x); // b_n (B_k in Thompson & Barnett notation)
+
+            // Calculate D_k = B_k + A_k / D_{k-1}
+            // If D_{k-1} is effectively zero, replace it with 'small' to prevent infinite terms.
+            if (Precision.equals(dPrev, 0.0, small)) {
+                dPrev = small;
+            }
+            double dN = b + (a / dPrev); // D_k
+
+            // If D_k is effectively zero, replace it with 'small'.
+            if (Precision.equals(dN, 0.0, small)) {
+                dN = small;
+            }
+
+            // Calculate C_k = B_k + A_k / C_{k-1}
+            // If C_{k-1} is effectively zero, replace it with 'small'.
+            if (Precision.equals(cPrev, 0.0, small)) {
+                cPrev = small;
+            }
+            double cN = b + (a / cPrev); // C_k
+
+            // If C_k is effectively zero, replace it with 'small'.
+            if (Precision.equals(cN, 0.0, small)) {
+                cN = small;
+            }
+
+            // Calculate delta_k = C_k / D_k
+            final double deltaN = cN / dN;
+
+            // Update f_k = f_{k-1} * delta_k
+            hPrev *= deltaN;
+
+            // Check for divergence (infinite or NaN results)
+            if (Double.isInfinite(hPrev)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                    }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
-                    }
-                }
-            }
-
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
-
-            if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
-            }
-            if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+            if (Double.isNaN(hPrev)) {
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
             }
 
+            // Check for convergence: |delta_k - 1.0| < epsilon
             if (FastMath.abs(deltaN - 1.0) < epsilon) {
                 break;
             }
 
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
+            // Prepare for next iteration: update C_{k-1} and D_{k-1}
+            cPrev = cN;
+            dPrev = dN;
+
             n++;
         }
 
+        // If maxIterations reached without convergence
         if (n >= maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
 
-        return hN;
+        return hPrev; // The converged value of the continued fraction
     }
\ No newline at end of file
