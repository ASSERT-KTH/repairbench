diff --git a/tmp/bae4d3e1-57c7-4156-8155-c0ab8a880f47_buggy.java b/tmp/7883b7ba-6e07-4f41-9a3a-c21e006aa6a5_fixed.java
index 57d43b9..80d8ea6 100644
--- a/tmp/bae4d3e1-57c7-4156-8155-c0ab8a880f47_buggy.java
+++ b/tmp/7883b7ba-6e07-4f41-9a3a-c21e006aa6a5_fixed.java
@@ -1,102 +1,131 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
      * @throws ConvergenceException if the algorithm fails to converge.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
         final double small = 1e-50;
         double hPrev = getA(0, x);
 
         // use the value of small as epsilon criteria for zero checks
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
         }
 
         int n = 1;
         double dPrev = 0.0;
         double p0 = 1.0;
         double q1 = 1.0;
         double cPrev = hPrev;
         double hN = hPrev;
 
         while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
+            final double a = getA(n, x); // a_n term (numerator)
+            final double b = getB(n, x); // b_n term (denominator)
 
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
+            // The recurrence relations for the numerators P_n and denominators Q_n
+            // for a continued fraction b0 + a1/(b1 + a2/(b2 + ...)) are:
+            // P_n = b_n * P_{n-1} + a_n * P_{n-2}
+            // Q_n = b_n * Q_{n-1} + a_n * Q_{n-2}
+            // In the code:
+            // hPrev is P_{n-1}
+            // p0 is P_{n-2}
+            // q1 is Q_{n-1}
+            // dPrev is Q_{n-2}
+            // The original code had 'a * hPrev + b * p0', which swaps the roles of 'a' and 'b' (a_n and b_n).
+            // This is a direct correction based on the MathWorld definition.
+            double cN = b * hPrev + a * p0; // Should be P_n
+            double q2 = b * q1 + a * dPrev; // Should be Q_n
+
+            // Scaling logic to prevent overflow/underflow in intermediate terms.
             if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
                 double scaleFactor = 1d;
                 double lastScaleFactor = 1d;
                 final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+                // Use absolute values for scale to ensure it's positive and grows correctly.
+                final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));
+
+                if (scale <= 0) { // This implies a=0 and b=0. If cN or q2 are infinite, it's a divergence.
                     throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                 }
                 for (int i = 0; i < maxPower; i++) {
                     lastScaleFactor = scaleFactor;
                     scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
+                    // Recalculate cN and q2 using scaled previous terms.
+                    // The scaling logic should account for which term (a or b) is dominant
+                    // based on their absolute values.
+                    if (FastMath.abs(a) >= FastMath.abs(b)) { // If 'a' is dominant or equal
                         cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
                         q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
+                    } else { // 'b' is strictly dominant (and b != 0 is already implicitly handled by scale > 0 check)
                         cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
                         q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
                     }
                     if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                         break;
                     }
                 }
             }
 
+            // In Lentz algorithm, denominators (like q2 here for Q_n) should not be zero.
+            // If they are, set to a small value to avoid division by zero.
+            if (Precision.equals(q2, 0.0, small)) {
+                q2 = small;
+            }
+
             final double deltaN = cN / q2 / cPrev;
             hN = cPrev * deltaN;
 
             if (Double.isInfinite(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                x);
             }
             if (Double.isNaN(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                x);
             }
 
             if (FastMath.abs(deltaN - 1.0) < epsilon) {
                 break;
             }
 
+            // Update terms for next iteration:
+            // P_{n-2} becomes P_{n-1} (p0 becomes hPrev)
+            // P_{n-1} becomes P_n (hPrev becomes cN)
+            // Q_{n-2} becomes Q_{n-1} (dPrev becomes q1)
+            // Q_{n-1} becomes Q_n (q1 becomes q2)
             dPrev = q1;
-            cPrev = cN / q2;
+            cPrev = cN / q2; // cPrev stores the ratio P_n/Q_n for the next deltaN calculation.
             p0 = hPrev;
             hPrev = cN;
             q1 = q2;
             n++;
         }
 
         if (n >= maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
 
         return hN;
     }
\ No newline at end of file
