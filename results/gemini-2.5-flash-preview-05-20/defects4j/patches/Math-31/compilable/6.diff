diff --git a/tmp/1d72f449-159a-4165-8ef2-7367d1a8136b_buggy.java b/tmp/6f6b1de5-4e5c-4b40-80f6-0901b7c38076_fixed.java
index 57d43b9..d1c4f4f 100644
--- a/tmp/1d72f449-159a-4165-8ef2-7367d1a8136b_buggy.java
+++ b/tmp/6f6b1de5-4e5c-4b40-80f6-0901b7c38076_fixed.java
@@ -1,102 +1,147 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
      * @throws ConvergenceException if the algorithm fails to converge.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
         final double small = 1e-50;
         double hPrev = getA(0, x);
 
         // use the value of small as epsilon criteria for zero checks
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
         }
 
         int n = 1;
         double dPrev = 0.0;
         double p0 = 1.0;
         double q1 = 1.0;
         double cPrev = hPrev;
         double hN = hPrev;
 
         while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
+            final double a = getA(n, x); // a_n (numerator)
+            final double b = getB(n, x); // b_n (denominator)
+
+            // The recurrence relations for the convergents P_n and Q_n are:
+            // P_n = b_n * P_{n-1} + a_n * P_{n-2}
+            // Q_n = b_n * Q_{n-1} + a_n * Q_{n-2}
+            //
+            // In this code:
+            // hPrev is P_{n-1}
+            // p0 is P_{n-2}
+            // q1 is Q_{n-1}
+            // dPrev is Q_{n-2}
+            //
+            // The original code had 'a' and 'b' swapped in the calculation below,
+            // which was a regression introduced in MATH-899.
+            double cN = b * hPrev + a * p0; // Corrected P_n
+            double q2 = b * q1 + a * dPrev; // Corrected Q_n
 
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
             if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
+                // Scale the terms to avoid overflow.
                 double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
                 final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+                // Original bug: used FastMath.max(a,b) which can be non-positive.
+                // Using absolute values ensures positive scaling.
+                final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));
+
+                // Original bug: scale <= 0 check. scale is non-negative due to FastMath.abs.
+                // If scale is 0.0, both a and b are 0.0, which means P_n and Q_n should be 0.
+                if (scale == 0.0) {
                     throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                 }
+
                 for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
+                    // Accumulate scaling factor.
                     scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+                    // Original bug: Complex conditional logic (if a != 0.0 && a > b)
+                    // and (else if b != 0) which was incorrect for the recurrence.
+                    // Corrected: apply scaling uniformly if either a or b is non-zero.
+                    if (a != 0.0 || b != 0.0) {
+                        // Recompute cN and q2 with scaled coefficients a and b.
+                        // hPrev, p0, q1, dPrev are considered previous unscaled values.
+                        cN = (b / scaleFactor * hPrev) + (a / scaleFactor * p0);
+                        q2 = (b / scaleFactor * q1) + (a / scaleFactor * dPrev);
+                    } else {
+                        // If both a and b are 0.0, then P_n and Q_n should be 0.
+                        // (0 * P_{n-1} + 0 * P_{n-2} = 0)
+                        cN = 0.0;
+                        q2 = 0.0;
                     }
+
                     if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                         break;
                     }
                 }
             }
 
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
+            // Check for zero in cN or q2.
+            // If cN or q2 are very small, use 'small' as a threshold to avoid division by zero.
+            if (Precision.equals(cN, 0.0, small)) {
+                cN = small;
+            }
+            if (Precision.equals(q2, 0.0, small)) {
+                q2 = small;
+            }
+
+            // deltaN is (P_n/Q_n) / (P_{n-1}/Q_{n-1})
+            // cPrev holds P_{n-1}/Q_{n-1} from previous iteration
+            final double deltaN = (cN / q2) / cPrev;
+            hN = cPrev * deltaN; // This simplifies to hN = cN / q2 (the current convergent)
 
             if (Double.isInfinite(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                x);
             }
             if (Double.isNaN(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                x);
             }
 
             if (FastMath.abs(deltaN - 1.0) < epsilon) {
                 break;
             }
 
-            dPrev = q1;
-            cPrev = cN / q2;
+            // Update variables for the next iteration:
+            // Current P_{n-1} becomes P_{n-2} for next iteration
             p0 = hPrev;
+            // Current P_n becomes P_{n-1} for next iteration
             hPrev = cN;
+            // Current Q_{n-1} becomes Q_{n-2} for next iteration
+            dPrev = q1;
+            // Current Q_n becomes Q_{n-1} for next iteration
             q1 = q2;
+            // cPrev holds the current convergent (P_n/Q_n) for the next deltaN calculation.
+            cPrev = cN / q2;
+
             n++;
         }
 
         if (n >= maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
 
         return hN;
     }
\ No newline at end of file
