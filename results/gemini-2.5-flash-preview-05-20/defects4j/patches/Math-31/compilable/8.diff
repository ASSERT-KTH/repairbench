diff --git a/tmp/e0e2352c-9b07-426d-9a23-6993ef0e6f74_buggy.java b/tmp/4e2efc6b-77db-4612-9c80-226b677e5f61_fixed.java
index 57d43b9..18e961d 100644
--- a/tmp/e0e2352c-9b07-426d-9a23-6993ef0e6f74_buggy.java
+++ b/tmp/4e2efc6b-77db-4612-9c80-226b677e5f61_fixed.java
@@ -1,102 +1,108 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
      * @throws ConvergenceException if the algorithm fails to converge.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
-        final double small = 1e-50;
-        double hPrev = getA(0, x);
+        // Implementation of the modified Lentz algorithm for continued fractions:
+        // F = b_0 + a_1/(b_1 + a_2/(b_2 + ...))
+        //
+        // References:
+        // 1. I. J. Thompson, A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
+        //    (Pages 18-19 describes the Lentz algorithm)
+        // 2. Numerical Recipes in C, 2nd Ed., Section 5.2 "Evaluation of Continued Fractions by Lentz's Method".
 
-        // use the value of small as epsilon criteria for zero checks
-        if (Precision.equals(hPrev, 0.0, small)) {
-            hPrev = small;
-        }
+        final double small = 1e-50; // Threshold for treating values as numerically zero.
 
-        int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
-        double hN = hPrev;
-
-        while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
-
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
-                }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+        // Initialisation for n=0
+        // H_0 = b_0
+        // C_0 = b_0
+        // D_0 = 0
+
+        // hN: Current value of the continued fraction (H_n in Lentz)
+        // cN: C_n term in Lentz algorithm (b_n + a_n / C_{n-1})
+        // dN: D_n term in Lentz algorithm (1 / (b_n + a_n * D_{n-1}))
+
+        double hN = getA(0, x); // This corresponds to b_0 (or a_0 depending on notation, but used as first term)
+        double cN = hN;         // C_0 is initialized to b_0
+        double dN = 0.0;        // D_0 is initialized to 0
+
+        // Handle the case where the initial term (b_0) is numerically zero to prevent division by zero or NaN issues.
+        if (Precision.equals(hN, 0.0, small)) {
+            hN = small;
         }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
+        if (Precision.equals(cN, 0.0, small)) {
+            cN = small;
         }
+
+        // Loop for n = 1, 2, ...
+        for (int n = 1; n < maxIterations; ++n) {
+            final double a = getA(n, x); // a_n
+            final double b = getB(n, x); // b_n
+
+            // Calculate new D_n term: D_n = 1 / (b_n + a_n * D_{n-1})
+            // We use 'dN' to store D_{n-1} from the previous iteration.
+            double dNm1 = dN; // Store D_{n-1}
+            dN = b + a * dNm1; // Calculate (b_n + a_n * D_{n-1})
+
+            // If dN is numerically zero, replace it with 'small' to avoid division by zero.
+            if (Precision.equals(dN, 0.0, small)) {
+                dN = small;
             }
+            dN = 1.0 / dN; // Calculate 1 / (b_n + a_n * D_{n-1}) -> This is the new D_n
+
+            // Calculate new C_n term: C_n = b_n + a_n / C_{n-1}
+            // We use 'cN' to store C_{n-1} from the previous iteration.
+            double cNm1 = cN; // Store C_{n-1}
+            cN = b + a / cNm1; // Calculate (b_n + a_n / C_{n-1})
+
+            // If cN is numerically zero, replace it with 'small' to avoid issues in subsequent calculations.
+            if (Precision.equals(cN, 0.0, small)) {
+                cN = small;
             }
 
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
+            // Calculate delta_n = C_n * D_n. This ratio represents the contribution of the n-th term.
+            final double delta = cN * dN;
+
+            // Update the continued fraction value: H_n = H_{n-1} * delta_n
+            hN *= delta;
 
+            // Check for divergence (infinite or NaN values).
             if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
             if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
             }
 
-            if (FastMath.abs(deltaN - 1.0) < epsilon) {
-                break;
+            // Check for convergence: if |delta_n - 1| is less than epsilon, the fraction has converged.
+            // This means H_n is very close to H_{n-1}.
+            if (FastMath.abs(delta - 1.0) < epsilon) {
+                return hN; // Converged
             }
-
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
-            n++;
         }
 
-        if (n >= maxIterations) {
+        // If the loop finishes without converging within maxIterations, throw an exception.
         throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                             maxIterations, x);
     }
\ No newline at end of file
-
-        return hN;
-    }
