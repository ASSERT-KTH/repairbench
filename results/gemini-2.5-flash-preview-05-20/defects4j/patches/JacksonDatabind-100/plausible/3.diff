diff --git a/tmp/c7b728c7-9a0e-4ac0-b921-33fe5204ecad_buggy.java b/tmp/de8dc740-25b2-4b01-afec-7c12dc92f92d_fixed.java
index fc8c302..31be84c 100644
--- a/tmp/c7b728c7-9a0e-4ac0-b921-33fe5204ecad_buggy.java
+++ b/tmp/de8dc740-25b2-4b01-afec-7c12dc92f92d_fixed.java
@@ -1,23 +1,33 @@
     @Override
     public byte[] getBinaryValue(Base64Variant b64variant)
         throws IOException, JsonParseException
     {
-        // Multiple possibilities...
         JsonNode n = currentNode();
         if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
+            // [databind#2096]: If it's a TextNode, coercion requires the specific variant
+            // for proper decoding. Other node types can rely on their default binaryValue()
+            // or POJO handling.
+            if (n.isTextual()) {
+                return ((TextNode) n).getBinaryValue(b64variant);
+            }
+
+            // For other node types (BinaryNode, POJONode, etc.), try binaryValue() first.
+            // BinaryNode's binaryValue() returns its internal bytes, which is correct.
+            // POJONode's binaryValue() returns null, which will then trigger the POJO check below.
             byte[] data = n.binaryValue();
             if (data != null) {
                 return data;
             }
+
+            // Fallback for POJO node if binaryValue() didn't return byte[]
+            // (e.g., if it's a POJO containing byte[] that isn't directly exposed by binaryValue())
             if (n.isPojo()) {
                 Object ob = ((POJONode) n).getPojo();
                 if (ob instanceof byte[]) {
                     return (byte[]) ob;
                 }
             }
         }
         // otherwise return null to mark we have no binary content
         return null;
     }
\ No newline at end of file
