diff --git a/tmp/c4ccb2fd-bd23-4ceb-9e23-2d8c8e57f76a_buggy.java b/tmp/3a7a4088-ad7f-469e-8a03-527b6fc8fe2d_fixed.java
index fc8c302..e82a35c 100644
--- a/tmp/c4ccb2fd-bd23-4ceb-9e23-2d8c8e57f76a_buggy.java
+++ b/tmp/3a7a4088-ad7f-469e-8a03-527b6fc8fe2d_fixed.java
@@ -1,23 +1,35 @@
     @Override
     public byte[] getBinaryValue(Base64Variant b64variant)
         throws IOException, JsonParseException
     {
-        // Multiple possibilities...
         JsonNode n = currentNode();
         if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
-            byte[] data = n.binaryValue();
-            if (data != null) {
-                return data;
+            // [databind#2096]: `TextNode` requires the specific Base64Variant for decoding.
+            // Calling `n.binaryValue()` would use the default variant, which can lead to
+            // decoding failures if the original encoding used a different variant (e.g., MODIFIED_FOR_URL).
+            if (n.isTextual()) {
+                return ((TextNode) n).getBinaryValue(b64variant);
             }
+            // For POJONode, we check if it directly contains a byte array.
+            // This needs to be checked before calling n.binaryValue(), as
+            // POJONode.binaryValue() might not handle all direct byte[] cases,
+            // or might attempt a different coercion.
             if (n.isPojo()) {
                 Object ob = ((POJONode) n).getPojo();
                 if (ob instanceof byte[]) {
                     return (byte[]) ob;
                 }
             }
+            // For other node types (like BinaryNode which directly stores bytes,
+            // or other nodes where binaryValue() might be implemented for coercion),
+            // we can use the generic binaryValue() method.
+            // For BinaryNode, this will simply return the stored byte array, ignoring the variant,
+            // which is correct as it's already binary.
+            byte[] data = n.binaryValue();
+            if (data != null) {
+                return data;
+            }
         }
         // otherwise return null to mark we have no binary content
         return null;
     }
\ No newline at end of file
