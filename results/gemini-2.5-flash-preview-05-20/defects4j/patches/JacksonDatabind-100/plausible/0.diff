diff --git a/tmp/08ddeb7d-7e71-4ed0-ab42-51b08f031a38_buggy.java b/tmp/fd6698ae-fbaa-4fb6-90a7-4809fac3e111_fixed.java
index fc8c302..01b6fcd 100644
--- a/tmp/08ddeb7d-7e71-4ed0-ab42-51b08f031a38_buggy.java
+++ b/tmp/fd6698ae-fbaa-4fb6-90a7-4809fac3e111_fixed.java
@@ -1,23 +1,32 @@
     @Override
     public byte[] getBinaryValue(Base64Variant b64variant)
         throws IOException, JsonParseException
     {
         // Multiple possibilities...
         JsonNode n = currentNode();
         if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
+            // [databind#2096]: If current node is a TextNode, we must use the provided
+            // Base64Variant to correctly decode the binary value.
+            // The default `n.binaryValue()` on TextNode does not take a variant,
+            // which can lead to decoding errors if the TextNode was encoded with a non-default variant.
+            if (n.isTextual()) {
+                return ((TextNode) n).getBinaryValue(b64variant);
+            }
+            // For other node types (e.g., BinaryNode), or if the TextNode handling somehow
+            // falls through (which it shouldn't for textual nodes), try the generic binaryValue().
+            // This will correctly return the data for BinaryNode or null for most others.
             byte[] data = n.binaryValue();
             if (data != null) {
                 return data;
             }
+            // Finally, check if it's a POJONode wrapping a byte[] directly.
             if (n.isPojo()) {
                 Object ob = ((POJONode) n).getPojo();
                 if (ob instanceof byte[]) {
                     return (byte[]) ob;
                 }
             }
         }
         // otherwise return null to mark we have no binary content
         return null;
     }
\ No newline at end of file
