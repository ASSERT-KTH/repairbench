diff --git a/tmp/f6606b93-f1cb-4eb0-81d4-7cb986303077_buggy.java b/tmp/4a11b7fb-1549-4aa8-adde-7d4a63edfc2b_fixed.java
index 0f439b3..f528fe4 100644
--- a/tmp/f6606b93-f1cb-4eb0-81d4-7cb986303077_buggy.java
+++ b/tmp/4a11b7fb-1549-4aa8-adde-7d4a63edfc2b_fixed.java
@@ -1,38 +1,55 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
+        // If we've hit a global EOF for the stream or reached the end of the current entry
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
+        // Ensure there's a current tar entry selected
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
-        numToRead = Math.min(numToRead, available());
+        // Limit the number of bytes to read to what's available within the current entry's boundaries
+        // and what the caller requested.
+        int bytesToRead = Math.min(numToRead, available());
         
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // If nothing more to read within the entry (or numToRead was 0 initially),
+        // return 0 according to InputStream contract for read(byte[], int, 0).
+        if (bytesToRead == 0) {
+            return 0;
+        }
 
-        if (totalRead == -1) {
+        // Read from the underlying stream
+        int bytesReadFromStream = is.read(buf, offset, bytesToRead);
+        
+        if (bytesReadFromStream == -1) {
+            // The underlying stream hit EOF.
+            // Since bytesToRead was > 0, it means we expected more data for the current entry
+            // (as entryOffset < entrySize). Therefore, the entry is truncated.
+            // Mark the global stream as having hit EOF as well.
             hasHitEOF = true; 
+            throw new IOException("Truncated TAR entry '" + currEntry.getName()
+                                  + "' - expected " + entrySize + " but got " + entryOffset + " bytes");
         } else {
-            entryOffset += totalRead;
+            // Successfully read some bytes. Update the offset within the current entry.
+            entryOffset += bytesReadFromStream;
+            // Update the total bytes read by the stream (for the CountingInputStream functionality).
+            // Only positive reads should increment the counter.
+            count(bytesReadFromStream);
+            return bytesReadFromStream;
         }
-
-        return totalRead;
     }
\ No newline at end of file
