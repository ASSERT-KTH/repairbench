diff --git a/tmp/61b5ac4c-ca35-4737-b922-0408a87a5ff0_buggy.java b/tmp/186806a5-ecc7-4c8c-88d6-53d9156fcdd5_fixed.java
index 0f439b3..c3e2697 100644
--- a/tmp/61b5ac4c-ca35-4737-b922-0408a87a5ff0_buggy.java
+++ b/tmp/186806a5-ecc7-4c8c-88d6-53d9156fcdd5_fixed.java
@@ -1,38 +1,58 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
 
+        // If we've already hit the end of the current entry or the overall stream,
+        // return -1 to signal EOF for the current entry.
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
+        // If there's no current entry being processed, this is an invalid state.
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
+        // Limit the number of bytes to read to avoid reading beyond the current entry's boundaries
+        // or what the underlying stream can provide (approx).
         numToRead = Math.min(numToRead, available());
         
+        // Read bytes from the underlying input stream.
         totalRead = is.read(buf, offset, numToRead);
+        
+        // Update the total bytes read across the entire tar archive stream.
         count(totalRead);
         
         if (totalRead == -1) {
-            hasHitEOF = true;
+            // If the underlying stream returned -1, it means EOF was reached on the physical stream.
+            // We need to check if this EOF was expected for the current entry.
+            if (entryOffset < entrySize) {
+                // We hit EOF on the underlying stream, but we still expected more bytes
+                // for the current tar entry (entryOffset < entrySize).
+                // This indicates that the tar archive entry is truncated.
+                throw new IOException("Truncated TAR archive");
+            }
+            // If entryOffset >= entrySize, it means we finished reading the current entry
+            // either exactly at the stream's end or we were already past the entry's logical end.
+            // In this case, it's a normal end-of-stream condition for the entire archive.
+            hasHitEOF = true; // Mark the global stream EOF.
         } else {
+            // Bytes were successfully read, so update the current offset within the entry.
             entryOffset += totalRead;
         }
 
         return totalRead;
     }
\ No newline at end of file
