diff --git a/tmp/0d60dd52-1b5c-474a-bc31-0a7a7de55245_buggy.java b/tmp/bd365562-5326-4c60-b3a2-6c53a668a821_fixed.java
index 0f439b3..4728663 100644
--- a/tmp/0d60dd52-1b5c-474a-bc31-0a7a7de55245_buggy.java
+++ b/tmp/bd365562-5326-4c60-b3a2-6c53a668a821_fixed.java
@@ -1,38 +1,52 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
 
+        // If EOF has been hit or the current entry has been fully read, return -1.
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
+        // Limit the number of bytes to read to the remaining bytes in the current entry.
+        // `available()` typically returns `entrySize - entryOffset`.
+        // This ensures `numToRead` is 0 if `entryOffset == entrySize` (handled by the first `if`)
+        // or positive if `entryOffset < entrySize`.
         numToRead = Math.min(numToRead, available());
         
+        // Read from the underlying stream.
         totalRead = is.read(buf, offset, numToRead);
         count(totalRead);
         
         if (totalRead == -1) {
-            hasHitEOF = true;
+            // The underlying stream has indicated EOF.
+            // Since we ensured `numToRead` was > 0 (because `entryOffset < entrySize`
+            // when `is.read` was called), if `is.read` returns -1, it means the
+            // tar entry is truncated because the underlying data ended prematurely.
+            throw new IOException("Truncated TAR entry '"
+                                  + currEntry.getName()
+                                  + "': expected " + entrySize
+                                  + " bytes, got " + entryOffset);
         } else {
+            // Update the offset within the current entry.
             entryOffset += totalRead;
         }
 
         return totalRead;
     }
\ No newline at end of file
