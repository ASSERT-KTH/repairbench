diff --git a/tmp/7aaa0c85-1792-4a1b-b5e0-49437a76986e_buggy.java b/tmp/79be8b84-54dd-4ac7-aefe-6a3f04c8b41e_fixed.java
index 0f439b3..ffb0c7f 100644
--- a/tmp/7aaa0c85-1792-4a1b-b5e0-49437a76986e_buggy.java
+++ b/tmp/79be8b84-54dd-4ac7-aefe-6a3f04c8b41e_fixed.java
@@ -1,38 +1,67 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
 
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
-        numToRead = Math.min(numToRead, available());
+        // Limit numToRead to the remaining bytes in the current entry.
+        // available() method returns (entrySize - entryOffset) for the current entry.
+        final int bytesToReadInThisCall = Math.min(numToRead, available());
         
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // If there are no bytes left to read for this entry, or numToRead was 0,
+        // return 0 as per InputStream contract for read(..., 0)
+        if (bytesToReadInThisCall == 0) {
+            return 0;
+        }
+
+        totalRead = is.read(buf, offset, bytesToReadInThisCall);
         
         if (totalRead == -1) {
-            hasHitEOF = true;
+            // The underlying stream hit EOF.
+            // If the current entry is not yet complete according to its declared size,
+            // then it's a truncated entry and we should throw an IOException.
+            if (entryOffset < entrySize) {
+                throw new IOException("Truncated TAR entry '" + currEntry.getName()
+                                      + "'. Expected " + entrySize
+                                      + " bytes, got " + entryOffset + " before EOF.");
+            }
+            hasHitEOF = true; // Mark the underlying stream as EOFed.
         } else {
+            // We read some bytes.
+            // If 'totalRead' is less than 'bytesToReadInThisCall', it means the underlying stream
+            // provided fewer bytes than requested, even though 'bytesToReadInThisCall' was already
+            // capped by the remaining size of the current entry. This indicates truncation.
+            if (totalRead < bytesToReadInThisCall) {
+                // This condition implicitly means entryOffset + totalRead < entrySize
+                // because bytesToReadInThisCall was Math.min(numToRead, entrySize - entryOffset).
+                throw new IOException("Truncated TAR entry '" + currEntry.getName()
+                                      + "'. Expected " + entrySize
+                                      + " bytes, got " + (entryOffset + totalRead)
+                                      + " after partial read.");
+            }
             entryOffset += totalRead;
         }
 
+        count(totalRead); // This method counts total bytes read from the underlying stream
+        
         return totalRead;
     }
\ No newline at end of file
