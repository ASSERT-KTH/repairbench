diff --git a/tmp/f9a86d76-56aa-4527-84eb-b540036d3be1_buggy.java b/tmp/842944ba-0220-44dc-820b-8361f2568f93_fixed.java
index 0f439b3..1911196 100644
--- a/tmp/f9a86d76-56aa-4527-84eb-b540036d3be1_buggy.java
+++ b/tmp/842944ba-0220-44dc-820b-8361f2568f93_fixed.java
@@ -1,38 +1,59 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
 
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
+        // Determine how many bytes we can actually read for the current entry.
+        // This is the minimum of what the user requested and what's remaining in the entry.
         numToRead = Math.min(numToRead, available());
         
+        // If numToRead becomes 0, it means either the caller requested 0 bytes,
+        // or there are no more bytes available for the current entry (i.e., entryOffset >= entrySize).
+        // In the latter case, the first 'if' block should ideally catch it, but returning 0 for a 0-length read is standard.
+        if (numToRead == 0) {
+            return 0;
+        }
+
         totalRead = is.read(buf, offset, numToRead);
         count(totalRead);
         
         if (totalRead == -1) {
+            // The underlying stream returned -1 (EOF).
+            // If we still expected more bytes for the current entry (i.e., entryOffset < entrySize),
+            // it means the TAR entry is truncated. Throw an IOException.
+            if (entryOffset < entrySize) {
+                throw new IOException("Truncated TAR entry '" + currEntry.getName()
+                                      + "'. Expected " + currEntry.getSize() + " bytes, read "
+                                      + entryOffset + " bytes.");
+            }
+            // If totalRead is -1 but entryOffset is already >= entrySize, it means the
+            // current entry happened to end exactly at the EOF of the underlying stream, which is fine.
+            // Mark the global EOF for the archive.
             hasHitEOF = true;
         } else {
+            // Successfully read some bytes. Update the offset for the current entry.
             entryOffset += totalRead;
         }
 
         return totalRead;
     }
\ No newline at end of file
