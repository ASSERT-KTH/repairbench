diff --git a/tmp/ed07fb27-8b32-4503-af40-416c97fd9b66_buggy.java b/tmp/52be228f-1304-4533-8c9c-91886333ee4d_fixed.java
index 0f439b3..fe33b8e 100644
--- a/tmp/ed07fb27-8b32-4503-af40-416c97fd9b66_buggy.java
+++ b/tmp/52be228f-1304-4533-8c9c-91886333ee4d_fixed.java
@@ -1,38 +1,58 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
+        // If we have already hit EOF for the entire stream, or we have read all bytes
+        // for the current entry (entryOffset >= entrySize), signal EOF for this entry.
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
-        numToRead = Math.min(numToRead, available());
+        // Determine the actual number of bytes to read, respecting the requested amount
+        // and the remaining bytes for the current entry according to its declared size.
+        // The available() method for TarArchiveInputStream typically returns entrySize - entryOffset.
+        int bytesToReadForEntry = (int) Math.min(numToRead, entrySize - entryOffset);
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // If the calculated bytesToReadForEntry is 0, it means either:
+        // 1. The caller requested to read 0 bytes (numToRead == 0).
+        // 2. We are exactly at the end of the declared entry size (entryOffset == entrySize).
+        //    However, case 2 is handled by the initial 'if (entryOffset >= entrySize)' check
+        //    which returns -1, indicating EOF for the current entry.
+        // So, this block is primarily for when numToRead == 0.
+        if (bytesToReadForEntry == 0) {
+            return 0;
+        }
 
-        if (totalRead == -1) {
-            hasHitEOF = true;
+        // Read bytes from the underlying input stream.
+        int bytesRead = is.read(buf, offset, bytesToReadForEntry);
+
+        if (bytesRead == -1) {
+            // If the underlying stream returns -1 (EOF) *before* we have read
+            // all bytes up to the declared entrySize, it means the entry is truncated.
+            // Since bytesToReadForEntry was > 0, it implies entryOffset < entrySize.
+            // Therefore, hitting EOF on the underlying stream at this point is always a truncation error.
+            throw new IOException("Truncated TAR entry");
         } else {
-            entryOffset += totalRead;
+            // Successfully read bytes. Update the offset within the current entry.
+            entryOffset += bytesRead;
+            // Update the overall stream byte count (assuming 'count' is a method like in FilterInputStream).
+            count(bytesRead);
         }
 
-        return totalRead;
+        return bytesRead;
     }
\ No newline at end of file
