diff --git a/tmp/13e572ba-b892-4177-8d7a-6a370fa95c80_buggy.java b/tmp/fc1bb4be-a5bc-4abf-a4c8-3fdf96c113a4_fixed.java
index 0f439b3..0810f37 100644
--- a/tmp/13e572ba-b892-4177-8d7a-6a370fa95c80_buggy.java
+++ b/tmp/fc1bb4be-a5bc-4abf-a4c8-3fdf96c113a4_fixed.java
@@ -1,38 +1,31 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
 
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
         numToRead = Math.min(numToRead, available());
         
         totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        count(totalRead); // This calls ArchiveInputStream.count, which correctly handles totalRead == -1
 
         if (totalRead == -1) {
             hasHitEOF = true;
+            // Check for truncation: If we hit EOF on the underlying stream
+            // but still had bytes remaining in the current entry.
+            // This means the archive entry was truncated.
+            if (entryOffset < entrySize) {
+                throw new IOException("Truncated TAR archive entry. Expected " + entrySize + " bytes, got " + entryOffset);
+            }
         } else {
             entryOffset += totalRead;
         }
 
         return totalRead;
     }
\ No newline at end of file
