diff --git a/tmp/9e8083c5-6e2e-4cd2-a9be-db12c5d317be_buggy.java b/tmp/c95e959e-c451-4f79-abce-d87812de4f1f_fixed.java
index 0f439b3..96f75ef 100644
--- a/tmp/9e8083c5-6e2e-4cd2-a9be-db12c5d317be_buggy.java
+++ b/tmp/c95e959e-c451-4f79-abce-d87812de4f1f_fixed.java
@@ -1,38 +1,62 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
 
+        // If overall stream has hit EOF or current entry is completely read, return -1.
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
+        // If no current entry is set, it's an illegal state.
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
-        numToRead = Math.min(numToRead, available());
+        // Determine the actual number of bytes to read for this call,
+        // limited by the caller's request and the remaining bytes in the current entry.
+        // entrySize is long, so cast (entrySize - entryOffset) to int as numToRead is int.
+        // It's safe because numToRead (and thus the result of Math.min) cannot exceed Integer.MAX_VALUE.
+        final int bytesToReadInThisCall = (int) Math.min(numToRead, entrySize - entryOffset);
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // If no bytes are expected to be read (e.g., caller asked for 0, or entry is technically finished), return 0.
+        if (bytesToReadInThisCall == 0) {
+            return 0;
+        }
 
+        // Read bytes from the underlying input stream.
+        totalRead = is.read(buf, offset, bytesToReadInThisCall);
+        
+        // Handle the result of the read operation.
         if (totalRead == -1) {
+            // The underlying stream returned EOF.
+            // This indicates a truncated entry if we still expected more bytes for the current entry.
+            if (entryOffset < entrySize) {
+                throw new IOException("Truncated TAR entry '" + currEntry.getName() + "' - expected " + entrySize + " bytes, got " + entryOffset + " bytes");
+            }
+            // If totalRead is -1 but the entry was conceptually complete (entryOffset >= entrySize),
+            // it means the overall stream has reached its end.
             hasHitEOF = true;
         } else {
+            // Successfully read some bytes. Update the offset within the current entry.
             entryOffset += totalRead;
         }
 
+        // Update the total bytes read from the underlying archive.
+        // The 'count' method typically handles -1 by not adding to the count.
+        count(totalRead);
+        
         return totalRead;
     }
\ No newline at end of file
