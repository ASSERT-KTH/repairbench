diff --git a/tmp/3178fb5a-c19f-4afc-a04d-477724aea1df_buggy.java b/tmp/7c50c54a-7027-479c-b06b-2e7391d82fc0_fixed.java
index 2295c35..ab32afd 100644
--- a/tmp/3178fb5a-c19f-4afc-a04d-477724aea1df_buggy.java
+++ b/tmp/7c50c54a-7027-479c-b06b-2e7391d82fc0_fixed.java
@@ -1,175 +1,201 @@
     /**
      * <p>
      * Replaces all occurrences of Strings within another String.
      * </p>
      *
      * <p>
      * A <code>null</code> reference passed to this method is a no-op, or if
      * any "search string" or "string to replace" is null, that replace will be
      * ignored.
      * </p>
      *
      * <pre>
      *  StringUtils.replaceEach(null, *, *, *) = null
      *  StringUtils.replaceEach("", *, *, *) = ""
      *  StringUtils.replaceEach("aba", null, null, *) = "aba"
      *  StringUtils.replaceEach("aba", new String[0], null, *) = "aba"
      *  StringUtils.replaceEach("aba", null, new String[0], *) = "aba"
      *  StringUtils.replaceEach("aba", new String[]{"a"}, null, *) = "aba"
      *  StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *) = "b"
      *  StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *) = "aba"
      *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *) = "wcte"
      *  (example of how it repeats)
      *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false) = "dcte"
      *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true) = "tcte"
      *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, *) = IllegalArgumentException
      * </pre>
      *
      * @param text
      *            text to search and replace in, no-op if null
      * @param searchList
      *            the Strings to search for, no-op if null
      * @param replacementList
      *            the Strings to replace them with, no-op if null
      * @param repeat if true, then replace repeatedly
      *       until there are no more possible replacements or timeToLive < 0
      * @param timeToLive
      *            if less than 0 then there is a circular reference and endless
      *            loop
      * @return the text with any replacements processed, <code>null</code> if
      *         null String input
      * @throws IllegalArgumentException
      *             if the search is repeating and there is an endless loop due
      *             to outputs of one being inputs to another
      * @throws IndexOutOfBoundsException
      *             if the lengths of the arrays are not the same (null is ok,
      *             and/or size 0)
      * @since 2.4
      */
     private static String replaceEach(String text, String[] searchList, String[] replacementList,
                                       boolean repeat, int timeToLive)
     {
 
         // mchyzer Performance note: This creates very few new objects (one major goal)
         // let me know if there are performance requests, we can create a harness to measure
 
         if (text == null || text.length() == 0 || searchList == null ||
             searchList.length == 0 || replacementList == null || replacementList.length == 0)
         {
             return text;
         }
 
         // if recursing, this shouldnt be less than 0
         if (timeToLive < 0) {
             throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: " + text);
         }
 
         int searchLength = searchList.length;
         int replacementLength = replacementList.length;
 
         // make sure lengths are ok, these need to be equal
         if (searchLength != replacementLength) {
             throw new IllegalArgumentException("Search and Replace array lengths don't match: "
                 + searchLength
                 + " vs "
                 + replacementLength);
         }
 
+        // Pre-process searchList and replacementList
+        // If a search string is null or empty, it cannot be replaced.
+        // If a replacement string is null, it means replace with the search string itself.
+        final String[] effectiveReplacementList = new String[searchLength];
+        final boolean[] active = new boolean[searchLength]; // true if this search-replace pair is still active
+        int activeMatches = 0; // count of active search-replace pairs
+
+        for (int i = 0; i < searchLength; i++) {
+            if (searchList[i] == null || searchList[i].length() == 0) {
+                active[i] = false; // Cannot search for null or empty string
+            } else {
+                effectiveReplacementList[i] = (replacementList[i] == null) ? searchList[i] : replacementList[i]; // FIX: Null replacement means replace with self
+                active[i] = true;
+                activeMatches++;
+            }
+        }
+
+        // If no active searchList items, we are done
+        if (activeMatches == 0) {
+            return text;
+        }
+
         // keep track of which still have matches
-        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
+        // boolean[] noMoreMatchesForReplIndex = new boolean[searchLength]; // Replaced by 'active'
 
         // index on index that the match was found
         int textIndex = -1;
         int replaceIndex = -1;
-        int tempIndex = -1;
+        // int tempIndex = -1; // tempIndex is now local to loops
 
-        // index of replace array that will replace the search string found
         // NOTE: logic duplicated below START
         for (int i = 0; i < searchLength; i++) {
-            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
-                searchList[i].length() == 0 || replacementList[i] == null) 
-            {
-                continue;
-            }
-            tempIndex = text.indexOf(searchList[i]);
+            if (active[i]) { // Only consider active search/replace pairs
+                int tempIndex = text.indexOf(searchList[i]);
 
                 // see if we need to keep searching for this
                 if (tempIndex == -1) {
-                noMoreMatchesForReplIndex[i] = true;
+                    active[i] = false; // No match found for this search string, deactivate it
+                    activeMatches--;
                 } else {
-                if (textIndex == -1 || tempIndex < textIndex) {
+                    // FIX: Tie-breaking: if multiple matches at the same index, pick the longest search string
+                    if (textIndex == -1 || tempIndex < textIndex || (tempIndex == textIndex && searchList[i].length() > searchList[replaceIndex].length())) {
                         textIndex = tempIndex;
                         replaceIndex = i;
                     }
                 }
             }
+        }
         // NOTE: logic mostly below END
 
-        // no search strings found, we are done
-        if (textIndex == -1) {
+        // no search strings found, we are done (after initial checks above)
+        if (textIndex == -1) { // If no initial match was found
             return text;
         }
 
+
         int start = 0;
 
         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit
         int increase = 0;
 
         // count the replacement text elements that are larger than their corresponding text being replaced
-        for (int i = 0; i < searchList.length; i++) {
-            int greater = replacementList[i].length() - searchList[i].length();
+        for (int i = 0; i < searchLength; i++) { // Using searchLength as loop bound
+            if (active[i]) { // FIX: Only consider active search-replace pairs for length calculation
+                int greater = effectiveReplacementList[i].length() - searchList[i].length();
                 if (greater > 0) {
                     increase += 3 * greater; // assume 3 matches
                 }
             }
+        }
         // have upper-bound at 20% increase, then let Java take over
         increase = Math.min(increase, text.length() / 5);
 
         StringBuilder buf = new StringBuilder(text.length() + increase);
 
         while (textIndex != -1) {
 
-            for (int i = start; i < textIndex; i++) {
-                buf.append(text.charAt(i));
-            }
-            buf.append(replacementList[replaceIndex]);
+            // Append text before the match
+            buf.append(text.substring(start, textIndex));
+            // Append the replacement string
+            buf.append(effectiveReplacementList[replaceIndex]); // FIX: Use effectiveReplacementList
 
             start = textIndex + searchList[replaceIndex].length();
 
+            // Reset for finding the next earliest match
             textIndex = -1;
             replaceIndex = -1;
-            tempIndex = -1;
+
             // find the next earliest match
             // NOTE: logic mostly duplicated above START
             for (int i = 0; i < searchLength; i++) {
-                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
-                    searchList[i].length() == 0 || replacementList[i] == null) 
-                {
-                    continue;
-                }
-                tempIndex = text.indexOf(searchList[i], start);
+                if (active[i]) { // FIX: Only consider active search/replace pairs
+                    int tempIndex = text.indexOf(searchList[i], start);
 
                     // see if we need to keep searching for this
                     if (tempIndex == -1) {
-                    noMoreMatchesForReplIndex[i] = true;
+                        active[i] = false; // No match found from 'start', deactivate it
+                        activeMatches--;
                     } else {
-                    if (textIndex == -1 || tempIndex < textIndex) {
+                        // FIX: Tie-breaking: if multiple matches at the same index, pick the longest search string
+                        if (textIndex == -1 || tempIndex < textIndex || (tempIndex == textIndex && searchList[i].length() > searchList[replaceIndex].length())) {
                             textIndex = tempIndex;
                             replaceIndex = i;
                         }
                     }
                 }
+            }
+            // If no more active matches found, break loop
+            if (activeMatches == 0) {
+                break;
+            }
             // NOTE: logic duplicated above END
-
         }
+
         int textLength = text.length();
-        for (int i = start; i < textLength; i++) {
-            buf.append(text.charAt(i));
-        }
+        buf.append(text.substring(start, textLength)); // Append remaining text
+
         String result = buf.toString();
         if (!repeat) {
             return result;
         }
 
         return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);
     }
