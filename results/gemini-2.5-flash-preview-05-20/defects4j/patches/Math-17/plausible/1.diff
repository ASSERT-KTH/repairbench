diff --git a/tmp/353e07a3-9c4e-4434-a263-d86696c85c52_buggy.java b/tmp/36cdff3a-461f-4f97-9a71-02c8fd308a03_fixed.java
index 10da689..81c6cb7 100644
--- a/tmp/353e07a3-9c4e-4434-a263-d86696c85c52_buggy.java
+++ b/tmp/36cdff3a-461f-4f97-9a71-02c8fd308a03_fixed.java
@@ -1,7 +1,16 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+            // The original implementation used multiplyFast(x).
+            // This seems to be an optimization intended for "single digits" or small integers.
+            // However, the test case `testMultiply #37` involves multiplying by 10000,
+            // which is not a single digit. The failure "x = NaN flags = 1" for this test
+            // indicates that multiplyFast(10000) is producing an invalid result (NaN).
+            // To correctly handle any integer multiplicand `x`, it's more robust
+            // to convert `x` into a Dfp object and then use the general Dfp-Dfp
+            // multiplication method.
+            // DfpField provides a newDfp(long x) method for this conversion.
+            return multiply(getField().newDfp((long) x));
     }
\ No newline at end of file
