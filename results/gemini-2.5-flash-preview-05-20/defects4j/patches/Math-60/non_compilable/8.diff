diff --git a/tmp/75c2b599-58c5-45fc-95fd-c2b33c9dbd72_buggy.java b/tmp/497a786d-b5fa-4492-86ce-ae22427348f8_fixed.java
index 3127f85..69fe0d1 100644
--- a/tmp/75c2b599-58c5-45fc-95fd-c2b33c9dbd72_buggy.java
+++ b/tmp/497a786d-b5fa-4492-86ce-ae22427348f8_fixed.java
@@ -1,24 +1,39 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite values explicitly to avoid ConvergenceException from Erf.erf
+        // when its argument becomes +/- Infinity due to large 'x'.
+        if (Double.isInfinite(x)) {
+            if (x == Double.POSITIVE_INFINITY) {
+                return 1.0;
+            } else { // x == Double.NEGATIVE_INFINITY
+                return 0.0;
+            }
+        }
+
         final double dev = x - mean;
         try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
+        } catch (ConvergenceException ex) { // Changed from MaxIterationsExceededException
+            // This catch block handles cases where Erf.erf fails to converge
+            // for very large (but finite) values of x, or other convergence issues.
+            // As per Javadoc, for values far from the mean, return 0 or 1.
+            if (x < (mean - 20 * standardDeviation)) {
+                return 0.0;
             } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+                return 1.0;
             } else {
+                // If the value is not extremely far from the mean but convergence still fails,
+                // re-throw the exception as it indicates a genuine problem.
                 throw ex;
             }
         }
     }
