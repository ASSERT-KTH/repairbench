diff --git a/tmp/7f44bb53-a91a-4ede-b9fc-ed2b87a093c5_buggy.java b/tmp/42f0e7ae-6b6a-4aba-988a-e4ded743e5e3_fixed.java
index 3127f85..c876975 100644
--- a/tmp/7f44bb53-a91a-4ede-b9fc-ed2b87a093c5_buggy.java
+++ b/tmp/42f0e7ae-6b6a-4aba-988a-e4ded743e5e3_fixed.java
@@ -1,24 +1,54 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite values explicitly to avoid numerical issues and exceptions from Erf.erf
+        if (Double.isInfinite(x)) {
+            if (x == Double.POSITIVE_INFINITY) {
+                return 1.0;
+            } else { // x == Double.NEGATIVE_INFINITY
+                return 0.0;
+            }
+        }
+
         final double dev = x - mean;
+        // Calculate the number of standard deviations x is from the mean
+        final double z = dev / standardDeviation;
+
+        // As per Javadoc, if x is more than 40 standard deviations from the mean,
+        // the probability is effectively 0 or 1. This also helps prevent issues
+        // with Erf.erf for extremely large finite inputs (like Double.MAX_VALUE).
+        if (FastMath.abs(z) > 40) {
+            if (z > 0) { // x is significantly above the mean
+                return 1.0;
+            } else { // x is significantly below the mean
+                return 0.0;
+            }
+        }
+
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            // The argument to Erf.erf is (x - mean) / (standardDeviation * sqrt(2))
+            // which simplifies to z / sqrt(2)
+            return 0.5 * (1.0 + Erf.erf(z / FastMath.sqrt(2.0)));
+        } catch (ConvergenceException ex) { // Catch the more general ConvergenceException
+            // This catch block provides a fallback for convergence issues for values
+            // that are still "extreme" but not caught by the 40-std-dev check above.
+            // The original comment mentioned "JDK 1.5 blows at 38", suggesting Erf might fail
+            // for values around 20-38 standard deviations.
+            if (x < (mean - 20 * standardDeviation)) {
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
             } else {
+                // Re-throw the exception if the convergence failure is for a value
+                // that is not considered extreme enough for top-coding.
                 throw ex;
             }
         }
     }
\ No newline at end of file
