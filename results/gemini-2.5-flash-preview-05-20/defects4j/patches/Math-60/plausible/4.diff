diff --git a/tmp/443035ce-0756-43c0-b381-7c23b3645bf7_buggy.java b/tmp/95d617fc-4d3d-4614-aa21-d15516499298_fixed.java
index 3127f85..a75d3e3 100644
--- a/tmp/443035ce-0756-43c0-b381-7c23b3645bf7_buggy.java
+++ b/tmp/95d617fc-4d3d-4614-aa21-d15516499298_fixed.java
@@ -1,24 +1,53 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite values explicitly first, as Erf.erf might struggle with them.
+        if (Double.isInfinite(x)) {
+            if (x == Double.POSITIVE_INFINITY) {
+                return 1.0;
+            } else { // x == Double.NEGATIVE_INFINITY
+                return 0.0;
+            }
+        }
+
+        // As per the Javadoc, if x is more than 40 standard deviations from the mean,
+        // the probability is effectively 0 or 1. This also prevents Erf.erf from
+        // being called with extremely large arguments that could cause convergence issues
+        // or numerical instability.
         final double dev = x - mean;
+        final double zScore = dev / standardDeviation; // This is the Z-score (number of standard deviations from the mean)
+        final double EXTREME_Z_SCORE_CUTOFF = 40.0; // From Javadoc: 40 standard deviations
+
+        if (zScore > EXTREME_Z_SCORE_CUTOFF) {
+            return 1.0;
+        } else if (zScore < -EXTREME_Z_SCORE_CUTOFF) {
+            return 0.0;
+        }
+
+        // If not an extreme value, try to compute using the error function.
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(zScore / FastMath.sqrt(2.0)));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            // This catch block handles cases where Erf.erf might still fail
+            // for arguments that are not as "extremely" large as handled by the
+            // initial 40-sigma check, but where the result is still effectively 0 or 1.
+            // The original comment "JDK 1.5 blows at 38" suggests this specific range
+            // for which Erf.erf might throw MaxIterationsExceededException.
+            if (x < (mean - 20 * standardDeviation)) { // 20 sigma cutoff for these cases
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
             } else {
+                // If the value is within 20 standard deviations and Erf.erf still fails,
+                // it indicates a true failure of the algorithm that should be propagated.
                 throw ex;
             }
         }
     }
\ No newline at end of file
