diff --git a/tmp/6f71810e-9e56-4517-9aa4-8bad940c098e_buggy.java b/tmp/4fae860f-8c68-44f6-a5dd-1fcb52c142a5_fixed.java
index 3127f85..1a71c50 100644
--- a/tmp/6f71810e-9e56-4517-9aa4-8bad940c098e_buggy.java
+++ b/tmp/4fae860f-8c68-44f6-a5dd-1fcb52c142a5_fixed.java
@@ -1,24 +1,53 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite values directly
+        if (Double.isInfinite(x)) {
+            if (x == Double.POSITIVE_INFINITY) {
+                return 1.0;
+            } else { // x == Double.NEGATIVE_INFINITY
+                return 0.0;
+            }
+        }
+
+        // Apply the 40 standard deviations rule mentioned in the Javadoc.
+        // This covers cases like Double.MAX_VALUE which are effectively infinite
+        // for the purpose of the CDF and could cause numerical issues or exceptions
+        // if passed to the Erf.erf function directly.
+        final double fortyStdDev = 40.0 * standardDeviation;
+        if (x > mean + fortyStdDev) {
+            return 1.0;
+        }
+        if (x < mean - fortyStdDev) {
+            return 0.0;
+        }
+
         final double dev = x - mean;
         try {
             return 0.5 * (1.0 + Erf.erf((dev) /
                         (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+        } catch (MathException ex) { // Catch MathException as it's the base for ConvergenceException and MaxIterationsExceededException
+            // This catch block remains for cases where the Erf.erf still throws an exception
+            // (e.g., MaxIterationsExceededException or ConvergenceException)
+            // for values within the 40-std-dev range but still far enough
+            // to cause numerical issues for Erf.erf.
+            // The 20-std-dev thresholds here are empirical for such exceptions.
+            final double twentyStdDev = 20.0 * standardDeviation;
+            if (x < (mean - twentyStdDev)) {
                 return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+            } else if (x > (mean + twentyStdDev)) {
                 return 1;
             } else {
+                // If the algorithm fails for values not considered extreme
+                // by the 20-std-dev threshold, rethrow the exception.
                 throw ex;
             }
         }
     }
\ No newline at end of file
