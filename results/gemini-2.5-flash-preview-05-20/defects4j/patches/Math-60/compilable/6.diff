diff --git a/tmp/2b1a1768-3e38-46b5-9fb7-eaf61a1f3f1b_buggy.java b/tmp/21d0bdc2-38eb-42c5-b204-ec5aa5d82356_fixed.java
index 3127f85..fa57d2b 100644
--- a/tmp/2b1a1768-3e38-46b5-9fb7-eaf61a1f3f1b_buggy.java
+++ b/tmp/21d0bdc2-38eb-42c5-b204-ec5aa5d82356_fixed.java
@@ -1,24 +1,42 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+        final double arg = dev / (standardDeviation * FastMath.sqrt(2.0));
+
+        // Handle cases where the argument to erf becomes infinite.
+        // This covers x being +/-Infinity, +/-Double.MAX_VALUE, or
+        // standardDeviation being extremely small (approaching 0, but not 0).
+        if (Double.isInfinite(arg)) {
+            if (arg == Double.POSITIVE_INFINITY) {
+                return 1.0;
+            } else { // arg == Double.NEGATIVE_INFINITY
+                return 0.0;
+            }
+        }
+
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(arg));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            // This catch block handles convergence issues for finite,
+            // but very large/small, inputs that did not result in 'arg' being infinite.
+            // The conditions here align with the original code's intent to top-code
+            // values when the computation fails due to extreme values.
+            if (x < (mean - 20 * standardDeviation)) {
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
             } else {
+                // If the computation fails for an x within this range,
+                // re-throw the exception as it's not an "extreme" value for top-coding.
                 throw ex;
             }
         }
     }
\ No newline at end of file
