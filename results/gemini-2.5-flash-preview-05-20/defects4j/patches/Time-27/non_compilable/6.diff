diff --git a/tmp/ac22105a-4000-4b52-b8a2-108418f0cf16_buggy.java b/tmp/628737ea-872e-497e-a441-5b88642741d0_fixed.java
index ec6c9ee..71cfab4 100644
--- a/tmp/ac22105a-4000-4b52-b8a2-108418f0cf16_buggy.java
+++ b/tmp/628737ea-872e-497e-a441-5b88642741d0_fixed.java
@@ -1,21 +1,25 @@
     //-----------------------------------------------------------------------
     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
         if (notPrinter && notParser) {
             throw new IllegalStateException("Builder has created neither a printer nor a parser");
         }
         int size = elementPairs.size();
         if (size >= 2 && elementPairs.get(0) instanceof Separator) {
             Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
+            // Bug fix: The 'after' part starts from elementPairs.get(1), not get(2).
+            // This ensures the first element after the separator is included in the recursive call.
+            PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);
+            // Bug fix: Use the 4-argument finish method for Separator composition.
+            // When the separator is at the beginning of the list, the 'before' parts are null.
+            sep = sep.finish(null, null, f.getPrinter(), f.getParser());
             return new PeriodFormatter(sep, sep);
         }
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
             return new PeriodFormatter(null, (PeriodParser) comp[1]);
         } else if (notParser) {
             return new PeriodFormatter((PeriodPrinter) comp[0], null);
         } else {
             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
         }
     }
\ No newline at end of file
