diff --git a/tmp/f87271c9-3304-4992-844d-56a76442efea_buggy.java b/tmp/54a3a270-eefe-40a7-aa54-201029d827ad_fixed.java
index 4cce784..53d083a 100644
--- a/tmp/f87271c9-3304-4992-844d-56a76442efea_buggy.java
+++ b/tmp/54a3a270-eefe-40a7-aa54-201029d827ad_fixed.java
@@ -1,11 +1,31 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // Comparing fractions (n1/d1) and (n2/d2) using double values can lead
+        // to precision errors, especially with very close fractions.
+        // A more accurate method is to compare their cross products:
+        // (n1/d1) < (n2/d2)  is equivalent to  (n1 * d2) < (n2 * d1)
+        // assuming denominators are positive, which they are in Fraction.
+
+        long n1 = getNumerator();
+        long d1 = getDenominator();
+        long n2 = object.getNumerator();
+        long d2 = object.getDenominator();
+
+        // Calculate cross products. Using long to prevent overflow
+        // since numerators and denominators can be large ints.
+        long product1 = n1 * d2; // this.numerator * object.denominator
+        long product2 = n2 * d1; // object.numerator * this.denominator
+
+        if (product1 < product2) {
+            return -1;
+        } else if (product1 > product2) {
+            return 1;
+        } else {
+            return 0;
+        }
     }
\ No newline at end of file
