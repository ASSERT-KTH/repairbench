diff --git a/tmp/127e1c5e-28b4-471e-9316-6ef670f44edb_buggy.java b/tmp/8bb9608e-439f-4055-9034-eb94c6e6919d_fixed.java
index 4cce784..26c9440 100644
--- a/tmp/127e1c5e-28b4-471e-9316-6ef670f44edb_buggy.java
+++ b/tmp/8bb9608e-439f-4055-9034-eb94c6e6919d_fixed.java
@@ -1,11 +1,29 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // Retrieve numerator and denominator as long to prevent overflow during multiplication.
+        // Assuming Fraction has getNumerator() and getDenominator() methods,
+        // which return int and denominator is always positive.
+        long n1 = getNumerator();
+        long d1 = getDenominator();
+        long n2 = object.getNumerator();
+        long d2 = object.getDenominator();
+
+        // Compare n1/d1 to n2/d2 using cross-multiplication: n1*d2 vs n2*d1.
+        // Since denominators (d1, d2) are always positive, the sign of the difference
+        // (n1/d1 - n2/d2) is the same as the sign of (n1*d2 - n2*d1).
+        long product1 = n1 * d2;
+        long product2 = n2 * d1;
+
+        if (product1 < product2) {
+            return -1;
+        } else if (product1 > product2) {
+            return 1;
+        } else {
+            return 0;
+        }
     }
\ No newline at end of file
