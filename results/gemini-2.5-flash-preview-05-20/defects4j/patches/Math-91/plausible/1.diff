diff --git a/tmp/f8e8358f-e2ff-4072-83c2-351095072f17_buggy.java b/tmp/80a7a5ab-0f87-4af8-9c22-7c1d5c5cf5e5_fixed.java
index 4cce784..aa75b5b 100644
--- a/tmp/f8e8358f-e2ff-4072-83c2-351095072f17_buggy.java
+++ b/tmp/80a7a5ab-0f87-4af8-9c22-7c1d5c5cf5e5_fixed.java
@@ -1,11 +1,29 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // To compare fractions n1/d1 and n2/d2 precisely without floating-point issues,
+        // we compare n1 * d2 with n2 * d1.
+        // Numerator and denominator are ints, but their product might exceed int range,
+        // so we cast to long before multiplication to prevent overflow.
+        long n1 = getNumerator();
+        long d1 = getDenominator(); // Denominator is guaranteed to be positive in Commons Math Fraction
+        long n2 = object.getNumerator();
+        long d2 = object.getDenominator(); // Denominator is guaranteed to be positive
+
+        // Perform cross-multiplication
+        long value1 = n1 * d2;
+        long value2 = n2 * d1;
+
+        if (value1 < value2) {
+            return -1;
+        } else if (value1 > value2) {
+            return 1;
+        } else {
+            // value1 == value2, meaning the fractions are exactly equal
+            return 0;
+        }
     }
\ No newline at end of file
