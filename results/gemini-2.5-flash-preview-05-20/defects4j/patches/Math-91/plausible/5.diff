diff --git a/tmp/7ae1d30e-cbc9-4f67-bd43-77173a63d25d_buggy.java b/tmp/63917577-5b3e-49bb-9f15-4eaa5faccd7a_fixed.java
index 4cce784..b714ba3 100644
--- a/tmp/7ae1d30e-cbc9-4f67-bd43-77173a63d25d_buggy.java
+++ b/tmp/63917577-5b3e-49bb-9f15-4eaa5faccd7a_fixed.java
@@ -1,11 +1,32 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // Use cross-multiplication to compare fractions to avoid floating-point precision issues.
+        // For fractions a/b and c/d, compare a*d with c*b.
+        // Assuming denominators are always positive in a canonical Fraction representation.
+
+        // Get the numerators and denominators.
+        // Assuming Fraction class has getNumerator() and getDenominator() methods.
+        // These typically return 'int', so cast to 'long' for intermediate products to prevent overflow.
+        long n1 = this.getNumerator();
+        long d1 = this.getDenominator();
+        long n2 = object.getNumerator();
+        long d2 = object.getDenominator();
+
+        // Calculate cross-products
+        long crossProduct1 = n1 * d2; // Represents this fraction's value relative to a common denominator
+        long crossProduct2 = n2 * d1; // Represents object's fraction value relative to a common denominator
+
+        // Compare the cross-products
+        if (crossProduct1 < crossProduct2) {
+            return -1;
+        } else if (crossProduct1 > crossProduct2) {
+            return 1;
+        } else {
+            return 0;
+        }
     }
\ No newline at end of file
