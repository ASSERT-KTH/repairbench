diff --git a/tmp/b458a37a-f984-4396-94d7-8167284ed18e_buggy.java b/tmp/4fb9727a-4ee3-4573-ab8b-fbd9bb0a4d90_fixed.java
index 4cce784..b6d8262 100644
--- a/tmp/b458a37a-f984-4396-94d7-8167284ed18e_buggy.java
+++ b/tmp/4fb9727a-4ee3-4573-ab8b-fbd9bb0a4d90_fixed.java
@@ -1,11 +1,40 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // The original implementation uses doubleValue() for comparison,
+        // which can lead to precision issues when comparing fractions that are
+        // numerically very close but not identical.
+        // For example, 1/3 and 2/6 might both be represented as 0.333...
+        // but also two slightly different large fractions might result in
+        // the same double representation due to floating-point limitations.
+        //
+        // To accurately compare fractions this.numerator/this.denominator
+        // and object.numerator/object.denominator, we can cross-multiply
+        // to avoid floating-point arithmetic:
+        // Compare (this.numerator * object.denominator) with (object.numerator * this.denominator).
+        // It's important to cast to long before multiplication to prevent
+        // potential integer overflow if numerator and denominator are large ints.
+
+        long n1 = getNumerator(); // This fraction's numerator
+        long d1 = getDenominator(); // This fraction's denominator
+        long n2 = object.getNumerator(); // Other fraction's numerator
+        long d2 = object.getDenominator(); // Other fraction's denominator
+
+        // Calculate the cross-multiplied values.
+        // Cast to long before multiplication to prevent overflow, as
+        // numerator and denominator can be large integers.
+        long value1 = n1 * d2;
+        long value2 = n2 * d1;
+
+        if (value1 < value2) {
+            return -1;
+        } else if (value1 > value2) {
+            return 1;
+        } else {
+            return 0;
+        }
     }
\ No newline at end of file
