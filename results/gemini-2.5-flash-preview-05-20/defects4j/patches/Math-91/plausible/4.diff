diff --git a/tmp/6827469a-f53e-4fcc-ba0f-9c43008e83c4_buggy.java b/tmp/383d7dfd-ed2c-4806-b68b-fa40b46a7a22_fixed.java
index 4cce784..bb58721 100644
--- a/tmp/6827469a-f53e-4fcc-ba0f-9c43008e83c4_buggy.java
+++ b/tmp/383d7dfd-ed2c-4806-b68b-fa40b46a7a22_fixed.java
@@ -1,11 +1,30 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // To avoid potential precision issues with doubleValue() comparisons,
+        // compare fractions by cross-multiplication.
+        // this = n1 / d1
+        // object = n2 / d2
+        // Compare n1/d1 to n2/d2 by comparing n1*d2 to n2*d1.
+        // Cast to long before multiplication to prevent potential overflow
+        // if numerator and denominator are int and their product exceeds int max.
+        long n1 = getNumerator();
+        long d1 = getDenominator();
+        long n2 = object.getNumerator();
+        long d2 = object.getDenominator();
+
+        long crossProduct1 = n1 * d2;
+        long crossProduct2 = n2 * d1;
+
+        if (crossProduct1 < crossProduct2) {
+            return -1;
+        } else if (crossProduct1 > crossProduct2) {
+            return 1;
+        } else {
+            return 0;
+        }
     }
\ No newline at end of file
