diff --git a/tmp/f4c6f110-a46e-4d9d-a246-3dd6a6b0104f_buggy.java b/tmp/a22d9ac1-3d11-424d-86d9-356ddcf1e086_fixed.java
index 4cce784..8fa7624 100644
--- a/tmp/f4c6f110-a46e-4d9d-a246-3dd6a6b0104f_buggy.java
+++ b/tmp/a22d9ac1-3d11-424d-86d9-356ddcf1e086_fixed.java
@@ -1,11 +1,28 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // To avoid precision issues with doubleValue() and potential overflow with direct int multiplication,
+        // we use cross-multiplication with long types.
+        // Let this fraction be n1/d1 and the 'object' fraction be n2/d2.
+        // We compare n1/d1 with n2/d2 by comparing (n1 * d2) with (n2 * d1).
+        // Denominators are always positive in a normalized Fraction.
+        long n1 = (long) getNumerator();
+        long d1 = (long) getDenominator();
+        long n2 = (long) object.getNumerator();
+        long d2 = (long) object.getDenominator();
+
+        long val1 = n1 * d2;
+        long val2 = n2 * d1;
+
+        if (val1 < val2) {
+            return -1;
+        } else if (val1 > val2) {
+            return 1;
+        } else {
+            return 0;
+        }
     }
\ No newline at end of file
