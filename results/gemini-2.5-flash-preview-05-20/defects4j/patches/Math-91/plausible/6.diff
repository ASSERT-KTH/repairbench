diff --git a/tmp/f277bf40-1a76-41e0-943b-6e028489f811_buggy.java b/tmp/19f8fc5b-93ec-4f14-b21b-2ee43852efe1_fixed.java
index 4cce784..95cb63f 100644
--- a/tmp/f277bf40-1a76-41e0-943b-6e028489f811_buggy.java
+++ b/tmp/19f8fc5b-93ec-4f14-b21b-2ee43852efe1_fixed.java
@@ -1,11 +1,34 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        // The original implementation used doubleValue() for comparison, which can lead to
+        // precision errors with large or complex fractions, causing incorrect comparisons
+        // when the true mathematical values are very close but not exactly equal.
+
+        // To fix this, we perform a precise comparison using cross-multiplication.
+        // Comparing a/b to c/d is equivalent to comparing a*d to c*b, assuming
+        // b and d are positive. The Fraction class in Apache Commons Math
+        // ensures that the denominator is always positive.
+
+        // Use long for the cross-multiplication to prevent potential integer overflow
+        // when multiplying the numerators and denominators, which are stored as int.
+        long n1 = (long) getNumerator();
+        long d1 = (long) getDenominator();
+        long n2 = (long) object.getNumerator();
+        long d2 = (long) object.getDenominator();
+
+        long value1 = n1 * d2;
+        long value2 = n2 * d1;
+
+        if (value1 < value2) {
+            return -1;
+        } else if (value1 > value2) {
+            return 1;
+        } else {
+            return 0;
+        }
     }
\ No newline at end of file
