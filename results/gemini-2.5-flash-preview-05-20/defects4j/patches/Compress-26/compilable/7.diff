diff --git a/tmp/c37ef8b1-78be-4c7e-bf3d-c361a1b29821_buggy.java b/tmp/aa1d38c3-4008-4589-a95e-9c399e56a646_fixed.java
index 4b163f6..2bb074d 100644
--- a/tmp/c37ef8b1-78be-4c7e-bf3d-c361a1b29821_buggy.java
+++ b/tmp/aa1d38c3-4008-4589-a95e-9c399e56a646_fixed.java
@@ -1,28 +1,34 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long remaining = numToSkip;
+        while (remaining > 0) {
+            long skipped = input.skip(remaining);
+            if (skipped > 0) {
+                remaining -= skipped;
+            } else { // skipped == 0, potentially EOF or stream cannot skip more
+                // Fallback to reading a single byte
+                int b = input.read();
+                if (b == -1) { // End of stream reached
                     break;
                 }
-            numToSkip -= skipped;
+                // Successfully read 1 byte
+                remaining--;
             }
-            
-        return available - numToSkip;
+        }
+        return numToSkip - remaining;
     }
\ No newline at end of file
