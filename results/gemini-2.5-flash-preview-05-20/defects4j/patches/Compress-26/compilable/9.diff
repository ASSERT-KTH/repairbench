diff --git a/tmp/2c0dd841-e5b0-434d-8ad3-70360be85c0f_buggy.java b/tmp/84d42f16-66eb-4eda-a505-3518d9d13987_fixed.java
index 4b163f6..9f0960b 100644
--- a/tmp/2c0dd841-e5b0-434d-8ad3-70360be85c0f_buggy.java
+++ b/tmp/84d42f16-66eb-4eda-a505-3518d9d13987_fixed.java
@@ -1,28 +1,36 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
+                // If skip() returns 0, fall back to read() to skip one byte
+                // This covers cases where skip() is not implemented or
+                // returns 0 bytes skipped despite input being available.
+                int b = input.read();
+                if (b == -1) {
+                    // End of stream reached
                     break;
                 }
+                skipped = 1; // Successfully read one byte
+            }
             numToSkip -= skipped;
         }
             
         return available - numToSkip;
     }
\ No newline at end of file
