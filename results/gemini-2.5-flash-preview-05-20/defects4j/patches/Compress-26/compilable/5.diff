diff --git a/tmp/5b684a9b-b3aa-4924-bc3c-ad7faf061ad6_buggy.java b/tmp/3f71f8f7-46e8-4d84-9d23-875ac73192b5_fixed.java
index 4b163f6..72fdbcb 100644
--- a/tmp/5b684a9b-b3aa-4924-bc3c-ad7faf061ad6_buggy.java
+++ b/tmp/3f71f8f7-46e8-4d84-9d23-875ac73192b5_fixed.java
@@ -1,28 +1,37 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+        long totalSkipped = 0;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
-            }
+            if (skipped > 0) {
                 numToSkip -= skipped;
+                totalSkipped += skipped;
+            } else { // skipped == 0
+                // Fall back to reading one byte if skip returned 0.
+                // This handles streams that don't support skip or have no bytes to skip immediately
+                // but might provide bytes via read().
+                int b = input.read();
+                if (b == -1) { // End of stream reached
+                    break;
                 }
-            
-        return available - numToSkip;
+                numToSkip--;
+                totalSkipped++;
+            }
+        }
+        return totalSkipped;
     }
\ No newline at end of file
