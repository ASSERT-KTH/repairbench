diff --git a/tmp/0e6bd113-765f-48fe-a660-8eb0ece0008e_buggy.java b/tmp/d927027e-385a-4f21-bea2-6000ed18a197_fixed.java
index 4b163f6..1c0623d 100644
--- a/tmp/0e6bd113-765f-48fe-a660-8eb0ece0008e_buggy.java
+++ b/tmp/d927027e-385a-4f21-bea2-6000ed18a197_fixed.java
@@ -1,28 +1,44 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+        long totalSkipped = 0;
+        // Use a temporary buffer for reading when skip() returns 0.
+        // A common buffer size like 4KB is chosen for efficiency.
+        byte[] skipBuffer = new byte[4096]; 
+
         while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+            long currentSkipped = input.skip(numToSkip);
+            if (currentSkipped > 0) {
+                // If skip() successfully skipped some bytes, update counts
+                numToSkip -= currentSkipped;
+                totalSkipped += currentSkipped;
+            } else {
+                // If skip() returned 0 (or less), fall back to read().
+                // Read up to 'numToSkip' bytes, but capped by the buffer size.
+                int bytesRead = input.read(skipBuffer, 0, (int) Math.min(numToSkip, skipBuffer.length));
+                if (bytesRead == -1) {
+                    // End of stream has been reached
                     break;
                 }
-            numToSkip -= skipped;
+                // If read() successfully read some bytes, update counts
+                numToSkip -= bytesRead;
+                totalSkipped += bytesRead;
+            }
         }
             
-        return available - numToSkip;
+        return totalSkipped;
     }
