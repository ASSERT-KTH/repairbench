diff --git a/tmp/2aaf5bda-7b10-451a-94d9-7b9383d0c911_buggy.java b/tmp/42668d3c-3ee9-4c7f-a1df-1dc08329cf64_fixed.java
index 4b163f6..b933fc7 100644
--- a/tmp/2aaf5bda-7b10-451a-94d9-7b9383d0c911_buggy.java
+++ b/tmp/42668d3c-3ee9-4c7f-a1df-1dc08329cf64_fixed.java
@@ -1,28 +1,38 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+        long actualSkipped = 0;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
+                // If skip() returns 0, it may mean that the end of the stream has been reached,
+                // or that the stream implementation cannot skip the requested amount but can
+                // still read bytes. Fall back to reading one byte at a time.
+                int b = input.read();
+                if (b == -1) {
+                    // End of stream has been reached
                     break;
+                } else {
+                    // Successfully read one byte, count it as skipped
+                    skipped = 1;
+                }
             }
             numToSkip -= skipped;
+            actualSkipped += skipped;
         }
-            
-        return available - numToSkip;
+        return actualSkipped;
     }
\ No newline at end of file
