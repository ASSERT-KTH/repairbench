diff --git a/tmp/19851ec1-170d-46bc-a16e-abcdd65d9a73_buggy.java b/tmp/4e8a18af-177e-4e3c-936c-61f13b5a48b9_fixed.java
index 4b163f6..c065179 100644
--- a/tmp/19851ec1-170d-46bc-a16e-abcdd65d9a73_buggy.java
+++ b/tmp/4e8a18af-177e-4e3c-936c-61f13b5a48b9_fixed.java
@@ -1,28 +1,36 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
+                // As per Javadoc, if skip() returns 0, fall back to read().
+                // This handles cases where skip() is not implemented efficiently
+                // or reaches the end of the stream, or the stream simply
+                // does not skip bytes for some reason.
+                int b = input.read();
+                if (b == -1) { // End of stream reached
                     break;
                 }
+                skipped = 1; // One byte was successfully read (skipped)
+            }
             numToSkip -= skipped;
         }
             
         return available - numToSkip;
     }
\ No newline at end of file
