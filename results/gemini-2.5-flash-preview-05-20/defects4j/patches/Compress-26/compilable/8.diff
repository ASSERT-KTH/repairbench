diff --git a/tmp/a7214ede-1c53-4f39-8db4-4cddf1415aa5_buggy.java b/tmp/12c4f63a-1c8f-462a-aea3-c273b6e30b38_fixed.java
index 4b163f6..5c95f55 100644
--- a/tmp/a7214ede-1c53-4f39-8db4-4cddf1415aa5_buggy.java
+++ b/tmp/12c4f63a-1c8f-462a-aea3-c273b6e30b38_fixed.java
@@ -1,28 +1,41 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+        long totalSkipped = 0;
+        while (totalSkipped < numToSkip) {
+            long remaining = numToSkip - totalSkipped;
+            long skipped = input.skip(remaining); // Try to skip the remaining bytes
+
             if (skipped == 0) {
+                // If skip() returns 0, it may not mean EOF. It can happen if the stream
+                // does not support skip() or returns 0 even when bytes are available.
+                // In such cases, fall back to reading a single byte to ensure progress
+                // or detect the actual end of the stream.
+                int b = input.read();
+                if (b == -1) {
+                    // End of stream reached
                     break;
                 }
-            numToSkip -= skipped;
+                // Successfully read one byte, count it as skipped
+                skipped = 1;
+            }
+            // Accumulate the bytes that were actually skipped (either via skip() or read())
+            totalSkipped += skipped;
         }
             
-        return available - numToSkip;
+        return totalSkipped;
     }
\ No newline at end of file
