diff --git a/tmp/324670a4-8a99-48be-af07-71cdc41e68ea_buggy.java b/tmp/a4a5e426-c30e-470a-ae0a-e2aa05e3b11f_fixed.java
index 4b163f6..978ebbe 100644
--- a/tmp/324670a4-8a99-48be-af07-71cdc41e68ea_buggy.java
+++ b/tmp/a4a5e426-c30e-470a-ae0a-e2aa05e3b11f_fixed.java
@@ -1,28 +1,48 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+        // totalSkipped tracks the number of bytes successfully skipped so far
+        long totalSkipped = 0; 
+        
+        // Loop until we have skipped the requested number of bytes or reached end of stream
+        while (totalSkipped < numToSkip) {
+            // Calculate remaining bytes to skip
+            long remaining = numToSkip - totalSkipped;
+            
+            // Try to skip using the stream's skip() method
+            long skipped = input.skip(remaining);
+            
             if (skipped == 0) {
+                // If skip() returned 0, it means it couldn't skip any bytes.
+                // This could be because the end of stream has been reached, 
+                // or the stream's skip() implementation is unable to skip (e.g., for certain types of streams).
+                // As per documentation, we fall back to read() in this case.
+                
+                int b = input.read(); // Read one byte
+                if (b == -1) {
+                    // End of stream reached. Cannot skip any more bytes.
                     break;
                 }
-            numToSkip -= skipped;
+                skipped = 1; // Successfully read one byte
             }
             
-        return available - numToSkip;
+            // Add the number of bytes skipped in this iteration to the total
+            totalSkipped += skipped;
+        }
+            
+        return totalSkipped;
     }
\ No newline at end of file
