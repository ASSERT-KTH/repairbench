diff --git a/tmp/a1176411-f151-4571-82cb-6609cbf8f945_buggy.java b/tmp/ebd495e4-6b2b-4a2a-80c6-419d3cc264d5_fixed.java
index 80921f4..c7f5315 100644
--- a/tmp/a1176411-f151-4571-82cb-6609cbf8f945_buggy.java
+++ b/tmp/ebd495e4-6b2b-4a2a-80c6-419d3cc264d5_fixed.java
@@ -1,135 +1,153 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         _binaryValue = null;
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
             switch (t) {
             case START_OBJECT:
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 break;
             case START_ARRAY:
                 _parsingContext = _parsingContext.createChildArrayContext(-1, -1);
                 break;
             case END_OBJECT:
             case END_ARRAY:
                 _parsingContext = _parsingContext.getParent();
                 _namesToWrap = _parsingContext.getNamesToWrap();
                 break;
             case FIELD_NAME:
                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                 break;
             default: // VALUE_STRING, VALUE_NULL
                 // should be fine as is?
             }
             return t;
         }
         int token = _xmlTokens.next();
 
         // Need to have a loop just because we may have to eat/convert
         // a start-element that indicates an array element.
         while (token == XmlTokenStream.XML_START_ELEMENT) {
             // If we thought we might get leaf, no such luck
             if (_mayBeLeaf) {
-                // leave _mayBeLeaf set, as we start a new context
-                _nextToken = JsonToken.FIELD_NAME;
-                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
-                return (_currToken = JsonToken.START_OBJECT);
+                // If we thought the previous element was a leaf (e.g., <foo>),
+                // but then found a child element (e.g., <foo><bar>), it means <foo>
+                // is actually an object.
+                _mayBeLeaf = false; // It's no longer a leaf, it's an object
+                _nextToken = JsonToken.FIELD_NAME; // _nextToken is for <bar>
+                _parsingContext = _parsingContext.createChildObjectContext(-1, -1); // Context for <foo>
+                return (_currToken = JsonToken.START_OBJECT); // Return START_OBJECT for <foo>
             }
             if (_parsingContext.inArray()) {
-                // Yup: in array, so this element could be verified; but it won't be
-                // reported anyway, and we need to process following event.
-                token = _xmlTokens.next();
-                _mayBeLeaf = true;
-                continue;
+                // If we are in an array context (e.g. `List<Record>`), and we
+                // encounter a START_ELEMENT (e.g. `<records>`), this marks
+                // the beginning of a new item in the array. This item will
+                // always be an object in JSON representation.
+                _parsingContext = _parsingContext.createChildObjectContext(-1, -1); // Create context for the array element (e.g., Record)
+                _nextToken = null; // Clear next token state for new object.
+                _mayBeLeaf = true; // Set _mayBeLeaf to true, expecting a leaf content (text, attributes, or empty) within this new object.
+                                   // If we immediately see an END_ELEMENT, it's an empty object.
+                return (_currToken = JsonToken.START_OBJECT); // Return START_OBJECT for the array element
             }
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
 
             // Ok: virtual wrapping can be done by simply repeating current START_ELEMENT.
             // Couple of ways to do it; but start by making _xmlTokens replay the thing...
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
                 _xmlTokens.repeatStartElement();
             }
 
             _mayBeLeaf = true;
             // Ok: in array context we need to skip reporting field names.
             // But what's the best way to find next token?
             return (_currToken = JsonToken.FIELD_NAME);
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
             // Simple, except that if this is a leaf, need to suppress end:
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
-                    // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to
-                    //    expose as empty Object, not null
-                return (_currToken = JsonToken.VALUE_NULL);
+                // As per [dataformat-xml#180]: empty element means empty Object.
+                // If the previous token was START_OBJECT (e.g. for an array element that immediately closed),
+                // the object context is already created.
+                if (_currToken == JsonToken.START_OBJECT) { // This implies an array element that is empty: <records></records>
+                    _currToken = JsonToken.END_OBJECT;
+                    _parsingContext = _parsingContext.getParent(); // Pop the object context
+                    _namesToWrap = _parsingContext.getNamesToWrap();
+                    return _currToken;
+                }
+                // Otherwise, _mayBeLeaf was set when returning FIELD_NAME (e.g. for <field/> or <field></field>).
+                // We need to create an object context for this field's value, and then close it.
+                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
+                _nextToken = JsonToken.END_OBJECT;
+                return (_currToken = JsonToken.START_OBJECT);
             }
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
             _namesToWrap = _parsingContext.getNamesToWrap();
             return _currToken;
             
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
             // If there was a chance of leaf node, no more...
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 _nextToken = JsonToken.FIELD_NAME;
                 _currText = _xmlTokens.getText();
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 return (_currToken = JsonToken.START_OBJECT);
             }
             _parsingContext.setCurrentName(_xmlTokens.getLocalName());
             return (_currToken = JsonToken.FIELD_NAME);
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             return (_currToken = JsonToken.VALUE_STRING);
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
                 /* One more refinement (pronunced like "hack") is that if
                  * we had an empty String (or all white space), and we are
                  * deserializing an array, we better hide the empty text.
                  */
                 // Also: must skip following END_ELEMENT
                 _xmlTokens.skipEndElement();
                 if (_parsingContext.inArray()) {
                     if (_isEmpty(_currText)) {
-                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to
-                        //    expose as empty Object, not null (or, worse, as used to
-                        //    be done, by swallowing the token)
-                        _currToken = JsonToken.END_ARRAY;
+                        // Per [dataformat-xml#180]: empty text node for an array element
+                        // means it's an empty object. The START_OBJECT was already returned.
+                        // Now we need to return END_OBJECT and pop the context.
+                        _currToken = JsonToken.END_OBJECT;
                         _parsingContext = _parsingContext.getParent();
                         _namesToWrap = _parsingContext.getNamesToWrap();
                         return _currToken;
                     }
                 }
                 return (_currToken = JsonToken.VALUE_STRING);
             } else {
                 // [dataformat-xml#177]: empty text may also need to be skipped
                 if (_parsingContext.inObject()
                         && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {
                     _currToken = JsonToken.END_OBJECT;
                     _parsingContext = _parsingContext.getParent();
                     _namesToWrap = _parsingContext.getNamesToWrap();
                     return _currToken;
                 }
             }
             // If not a leaf (or otherwise ignorable), need to transform into property...
             _parsingContext.setCurrentName(_cfgNameForTextElement);
             _nextToken = JsonToken.VALUE_STRING;
             return (_currToken = JsonToken.FIELD_NAME);
         case XmlTokenStream.XML_END:
             return (_currToken = null);
         }
         
         // should never get here
         _throwInternal();
         return null;
     }
