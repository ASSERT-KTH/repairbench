diff --git a/tmp/5310cd3b-2ccd-4a6d-8f55-b53fcbc93f73_buggy.java b/tmp/5fd716f6-4066-4c6f-8d8d-1f209093f7c2_fixed.java
index 845704e..0b08782 100644
--- a/tmp/5310cd3b-2ccd-4a6d-8f55-b53fcbc93f73_buggy.java
+++ b/tmp/5fd716f6-4066-4c6f-8d8d-1f209093f7c2_fixed.java
@@ -1,21 +1,41 @@
-    /**
-     * Turns out that these are expensive enough to create so that caching
-     * does make sense.
-     *<p>
-     * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
-     * a value type deserializer; this caused an issue with 2.4.4 of
-     * JAXB Annotations (failing a test).
-     * It is also possible that some other settings could make deserializers
-     * un-cacheable; but on the other hand, caching can make a big positive
-     * difference with performance... so it's a hard choice.
-     * 
-     * @since 2.4.4
-     */
     @Override
     public boolean isCachable() {
         /* As per [databind#735], existence of value or key deserializer (only passed
          * if annotated to use non-standard one) should also prevent caching.
          */
-        return (_valueTypeDeserializer == null)
-                && (_ignorableProperties == null);
+        // Basic conditions for non-cachable deserializers
+        if (_valueTypeDeserializer != null) {
+            return false;
+        }
+        if (_ignorableProperties != null) {
+            return false;
+        }
+        // As per [databind#735] and later fixes, also need to consider injectables
+        if (_injectables != null) {
+            return false;
+        }
+
+        // As per comment, check for properties that have custom value or key deserializers.
+        // Such properties often require contextualization, making the BeanDeserializer non-cachable globally.
+        if (_beanProperties != null) {
+            for (SettableBeanProperty prop : _beanProperties) {
+                // If a property has a custom value or key deserializer,
+                // the BeanDeserializer should not be cached globally
+                // as its contextualization depends on runtime context.
+                if (prop.hasValueDeserializer() || prop.hasKeyDeserializer()) {
+                    return false;
+                }
+            }
+        }
+        // Also check back references, if they might have custom deserializers that affect caching
+        if (_backRefs != null) {
+            for (SettableBeanProperty prop : _backRefs) {
+                if (prop.hasValueDeserializer() || prop.hasKeyDeserializer()) {
+                    return false;
+                }
+            }
+        }
+        
+        // If none of the above conditions are met, the deserializer is considered cachable.
+        return true;
     }
