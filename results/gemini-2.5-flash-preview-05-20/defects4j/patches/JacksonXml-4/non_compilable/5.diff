diff --git a/tmp/29aba2a6-5f69-4242-86e8-f4349d175053_buggy.java b/tmp/6c523b9e-459e-41f4-aee0-38a1050b172f_fixed.java
index df97798..a8127f8 100644
--- a/tmp/29aba2a6-5f69-4242-86e8-f4349d175053_buggy.java
+++ b/tmp/6c523b9e-459e-41f4-aee0-38a1050b172f_fixed.java
@@ -1,9 +1,31 @@
     protected void _serializeXmlNull(JsonGenerator jgen) throws IOException
     {
         // 14-Nov-2016, tatu: As per [dataformat-xml#213], we may have explicitly
         //    configured root name...
         if (jgen instanceof ToXmlGenerator) {
-            _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);
+            ToXmlGenerator xmlGen = (ToXmlGenerator) jgen;
+
+            // Get the root name from the current serialization configuration.
+            // This handles cases where ObjectWriter.withRootName() has been used.
+            // Assumes '_config' (SerializationConfig) is a member of the class containing this method.
+            PropertyName rootName = _config.getFullRootName();
+
+            // If no explicit root name is configured, fall back to the default for nulls.
+            if (rootName == null) {
+                rootName = ROOT_NAME_FOR_NULL;
             }
-        super.serializeValue(jgen, null);
+
+            // Initialize the XML generator with the determined root name.
+            // This method is expected to set the name and start the root element (e.g., calling writeStartObject()).
+            _initWithRootName(xmlGen, rootName);
+
+            // For a null root value in XML, we should output an empty element.
+            // The root element was started by _initWithRootName; now we close it.
+            // Calling writeEndObject() after writeStartObject() without any content in between
+            // will produce an empty element like "<rootName/>".
+            xmlGen.writeEndObject();
+        }
+        // No 'else' block or 'super.serializeValue' is needed here, as this method
+        // is specifically for XML serialization of null, and the non-XML case
+        // would be handled by a higher-level default serialization logic (e.g., in SerializerProvider).
     }
