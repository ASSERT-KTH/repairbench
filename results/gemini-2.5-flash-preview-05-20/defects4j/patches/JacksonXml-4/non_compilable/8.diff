diff --git a/tmp/c4901480-36f5-4c25-b6a0-275b18e0bae5_buggy.java b/tmp/2f9db488-3763-4f39-908a-5bcd9b1e62da_fixed.java
index df97798..3c4fb8f 100644
--- a/tmp/c4901480-36f5-4c25-b6a0-275b18e0bae5_buggy.java
+++ b/tmp/2f9db488-3763-4f39-908a-5bcd9b1e62da_fixed.java
@@ -1,9 +1,35 @@
     protected void _serializeXmlNull(JsonGenerator jgen) throws IOException
     {
         // 14-Nov-2016, tatu: As per [dataformat-xml#213], we may have explicitly
         //    configured root name...
         if (jgen instanceof ToXmlGenerator) {
-            _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);
+            ToXmlGenerator xmlGen = (ToXmlGenerator) jgen;
+            QName rootName = null;
+            // In BeanSerializerBase (which XmlBeanSerializerBase extends), _serializerProvider
+            // is initialized during the serializer's construction or `createContextual` phase.
+            // It holds the context for serialization, including configuration.
+            if (_serializerProvider != null) {
+                rootName = _serializerProvider.getConfig().getFullRootName();
             }
+
+            // If an explicit root name was configured (e.g., via writer().withRootName()),
+            // use that name. Otherwise, fall back to the default name for nulls ("null").
+            QName nameToUse = (rootName != null) ? rootName : ROOT_NAME_FOR_NULL;
+            _initWithRootName(xmlGen, nameToUse);
+
+            // For XML output, a 'null' value (especially when it's the root element or a property
+            // that represents an object/collection) is typically represented as an empty element,
+            // like <name/>. The ToXmlGenerator expects `writeStartObject()` and `writeEndObject()`
+            // to produce such an empty element for a "null" value that is treated as an empty tag.
+            // Calling `super.serializeValue(jgen, null)` would typically translate to `jgen.writeNull()`,
+            // which might not produce the desired `<name/>` (it could throw, or produce `<null/>` if
+            // `_initWithRootName` is not respected by `writeNull()` in certain contexts).
+            // Explicitly writing an empty object ensures the correct XML structure.
+            jgen.writeStartObject();
+            jgen.writeEndObject();
+        } else {
+            // For non-XML generators (e.g., standard JSON), or if ToXmlGenerator casting fails,
+            // delegate to the superclass's handling of null, which typically means `jgen.writeNull()`.
             super.serializeValue(jgen, null);
         }
+    }
\ No newline at end of file
