diff --git a/tmp/f025e259-26f9-4d14-8ed5-7fbebedfa87e_buggy.java b/tmp/2fc8c645-23d5-4cfc-b21b-edc47f14b2a3_fixed.java
index df97798..22d417a 100644
--- a/tmp/f025e259-26f9-4d14-8ed5-7fbebedfa87e_buggy.java
+++ b/tmp/2fc8c645-23d5-4cfc-b21b-edc47f14b2a3_fixed.java
@@ -1,9 +1,35 @@
     protected void _serializeXmlNull(JsonGenerator jgen) throws IOException
     {
         // 14-Nov-2016, tatu: As per [dataformat-xml#213], we may have explicitly
         //    configured root name...
         if (jgen instanceof ToXmlGenerator) {
-            _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);
+            ToXmlGenerator xmlGen = (ToXmlGenerator) jgen;
+            
+            // 23-Jan-2017, tatu: Need to use configured root name if any
+            // If ObjectWriter.withRootName() was used, _config.getRootName() will return it.
+            // Otherwise, it will be null (or empty if set to empty string).
+            PropertyName rootName = _config.getRootName();
+
+            QName actualRootName;
+            if (rootName != null && !rootName.isEmpty()) {
+                // If an explicit root name is configured, use it.
+                // Convert PropertyName to QName, handling potential namespace and prefix.
+                String ns = rootName.getNamespace();
+                if (ns == null || ns.isEmpty()) {
+                    actualRootName = new QName(rootName.getSimpleName());
+                } else {
+                    // It's good practice to pass prefix if available, though getPrefix() can be null
+                    actualRootName = new QName(ns, rootName.getSimpleName(), rootName.getPrefix());
                 }
+            } else {
+                // Otherwise, fall back to the default "null" root name for XML nulls.
+                actualRootName = ROOT_NAME_FOR_NULL;
+            }
+            _initWithRootName(xmlGen, actualRootName);
+        }
+        // The base class's serialization for null (JsonGenerator.writeNull())
+        // along with ToXmlGenerator's handling of empty elements (when nothing is written between start/end object),
+        // and the outer serialization context (e.g. ObjectWriter) calling writeEndObject(),
+        // will correctly produce an empty element like "<rootName/>".
         super.serializeValue(jgen, null);
     }
\ No newline at end of file
