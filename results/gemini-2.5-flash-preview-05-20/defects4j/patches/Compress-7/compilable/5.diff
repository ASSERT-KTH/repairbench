diff --git a/tmp/12cbc7ed-e094-4edf-a8e4-64c70b846783_buggy.java b/tmp/b35d718c-8166-4be5-b7dc-7b08e4fa9026_fixed.java
index d6662c7..6685651 100644
--- a/tmp/12cbc7ed-e094-4edf-a8e4-64c70b846783_buggy.java
+++ b/tmp/b35d718c-8166-4be5-b7dc-7b08e4fa9026_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
         StringBuffer result = new StringBuffer(length);
         int          end = offset + length;
 
         for (int i = offset; i < end; ++i) {
             if (buffer[i] == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
+            // The original code `result.append((char) buffer[i]);`
+            // incorrectly casts a signed byte directly to a char.
+            // For byte values > 127 (which are negative in Java's signed byte type),
+            // this can lead to incorrect Unicode characters (e.g., \uFFB1 instead of \u00B1).
+            //
+            // To correctly interpret the byte as a character in the ISO-8859-1 (Latin-1) range
+            // (where byte values 0-255 map directly to Unicode code points U+0000-U+00FF),
+            // we must mask the byte with 0xFF. This converts the signed byte value
+            // into an unsigned integer value before casting to char.
+            result.append((char) (buffer[i] & 0xFF));
         }
 
         return result.toString();
     }
\ No newline at end of file
