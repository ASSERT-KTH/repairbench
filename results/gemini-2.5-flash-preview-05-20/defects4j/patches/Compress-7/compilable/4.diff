diff --git a/tmp/e9af43f7-29f1-4322-92b7-00489efa4a36_buggy.java b/tmp/69dc07f7-b0d8-4648-bb33-723a9c623835_fixed.java
index d6662c7..a6afae5 100644
--- a/tmp/e9af43f7-29f1-4322-92b7-00489efa4a36_buggy.java
+++ b/tmp/69dc07f7-b0d8-4648-bb33-723a9c623835_fixed.java
@@ -1,23 +1,28 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
         StringBuffer result = new StringBuffer(length);
         int          end = offset + length;
 
         for (int i = offset; i < end; ++i) {
             if (buffer[i] == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
+            // Fix: When converting a byte to a char, treat the byte as an unsigned value.
+            // This is crucial for handling characters whose byte representation is > 127 (or negative if interpreted as signed).
+            // For example, the byte value 0xB1 (decimal -79) should map to the character U+00B1 (±),
+            // but a direct cast to char without `& 0xFF` would sign-extend it and result in U+FFB1 (ﾱ).
+            // Tar entries typically use an encoding like ISO-8859-1 where byte values directly map to character codes.
+            result.append((char) (buffer[i] & 0xFF));
         }
 
         return result.toString();
     }
