diff --git a/tmp/4ca65b20-3dff-468d-b05e-0949b0131958_buggy.java b/tmp/e568fe50-62c6-45f8-82b5-d0981b755ade_fixed.java
index d6662c7..217d75a 100644
--- a/tmp/4ca65b20-3dff-468d-b05e-0949b0131958_buggy.java
+++ b/tmp/e568fe50-62c6-45f8-82b5-d0981b755ade_fixed.java
@@ -1,23 +1,41 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
-        int          end = offset + length;
+        // Determine the actual length of the name, respecting NUL termination.
+        // The original logic iterated to build a StringBuffer, which was inefficient
+        // and, more importantly, performed a problematic direct cast from byte to char
+        // for non-ASCII characters (e.g., negative byte values in Java).
+        // This led to incorrect character representation for certain byte sequences.
+        int effectiveLength = 0;
+        final int end = offset + length;
 
         for (int i = offset; i < end; ++i) {
             if (buffer[i] == 0) {
+                effectiveLength = i - offset; // NUL byte found, this is the end of the name
                 break;
             }
-            result.append((char) buffer[i]);
+            effectiveLength++; // Increment effective length if no NUL byte is found yet
         }
 
-        return result.toString();
+        // Convert the bytes to a String using a specific character encoding.
+        // Tar archives commonly use ISO-8859-1 (Latin-1) for filenames.
+        // This encoding correctly maps byte values to characters, especially those
+        // outside the basic ASCII range (e.g., byte 0xB1 correctly maps to 'Â±').
+        // This approach avoids the incorrect character mapping caused by direct (char)byte casting.
+        try {
+            return new String(buffer, offset, effectiveLength, "ISO-8859-1");
+        } catch (java.io.UnsupportedEncodingException e) {
+            // ISO-8859-1 is a mandatory encoding in all Java environments,
+            // so this exception should theoretically never be thrown.
+            // If it does, it indicates a severe issue with the JVM's character set support.
+            throw new RuntimeException("ISO-8859-1 encoding not found, which is highly unexpected.", e);
+        }
     }
\ No newline at end of file
