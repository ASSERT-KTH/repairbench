diff --git a/tmp/74b6b34d-e560-404a-aeb1-dbdaf21c00fc_buggy.java b/tmp/4d2be657-b6b4-4250-bb82-bcb4efb01a45_fixed.java
index d6662c7..7c83c27 100644
--- a/tmp/74b6b34d-e560-404a-aeb1-dbdaf21c00fc_buggy.java
+++ b/tmp/4d2be657-b6b4-4250-bb82-bcb4efb01a45_fixed.java
@@ -1,23 +1,28 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
         StringBuffer result = new StringBuffer(length);
         int          end = offset + length;
 
         for (int i = offset; i < end; ++i) {
             if (buffer[i] == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
+            // Fix: Cast the byte to an unsigned integer before converting to char.
+            // This ensures that byte values greater than 127 (which are negative
+            // in Java's signed byte representation) are correctly mapped to their
+            // corresponding character code points (0-255) rather than extended
+            // to negative integers and then truncated to high-order Unicode characters.
+            result.append((char) (buffer[i] & 0xFF));
         }
 
         return result.toString();
     }
\ No newline at end of file
