diff --git a/tmp/2e9328c0-ff8d-4333-9d68-235df3cac8af_buggy.java b/tmp/dd13ef3e-1c23-4e58-a1ab-de6289779160_fixed.java
index d6662c7..2b2ad8b 100644
--- a/tmp/2e9328c0-ff8d-4333-9d68-235df3cac8af_buggy.java
+++ b/tmp/dd13ef3e-1c23-4e58-a1ab-de6289779160_fixed.java
@@ -1,23 +1,44 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
-        int          end = offset + length;
-
+        // Determine the actual length of the string within the given segment,
+        // stopping at the first NUL byte or the specified length.
+        int nameLength = 0;
+        final int end = offset + length;
         for (int i = offset; i < end; ++i) {
             if (buffer[i] == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
+            nameLength++;
         }
 
-        return result.toString();
+        // If no characters were found (e.g., first byte is NUL or length is 0), return an empty string.
+        if (nameLength == 0) {
+            return "";
+        }
+
+        // Create a String from the bytes.
+        // Tar entry names are typically ASCII or ISO-8859-1 encoded.
+        // Using "ISO-8859-1" (Latin-1) is crucial because it maps all byte values
+        // (0-255) directly to their corresponding Unicode code points (U+0000 to U+00FF).
+        // This prevents incorrect character interpretation, especially for byte values > 127,
+        // which would otherwise be sign-extended and lead to incorrect Unicode characters
+        // when simply casting `(char) byte`.
+        try {
+            return new String(buffer, offset, nameLength, "ISO-8859-1");
+        } catch (java.io.UnsupportedEncodingException e) {
+            // ISO-8859-1 is a mandatory encoding in all Java implementations,
+            // so this catch block should theoretically never be reached.
+            // As a fallback, use the platform's default charset, though this
+            // might reintroduce encoding issues if the default isn't ISO-8859-1.
+            return new String(buffer, offset, nameLength);
+        }
     }
\ No newline at end of file
