diff --git a/tmp/8a7bba2b-1370-4111-b9c6-5dca5cff203d_buggy.java b/tmp/ed18feb0-b8c8-4ef2-a792-fc99f8e0eadd_fixed.java
index d6662c7..4b72a4b 100644
--- a/tmp/8a7bba2b-1370-4111-b9c6-5dca5cff203d_buggy.java
+++ b/tmp/ed18feb0-b8c8-4ef2-a792-fc99f8e0eadd_fixed.java
@@ -1,23 +1,37 @@
+import java.nio.charset.StandardCharsets;
+
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
-        int          end = offset + length;
+        int limit = offset + length;
+        int nulByteIndex = -1;
 
-        for (int i = offset; i < end; ++i) {
+        // Find the first NUL byte within the specified range
+        for (int i = offset; i < limit; ++i) {
             if (buffer[i] == 0) {
+                nulByteIndex = i;
                 break;
             }
-            result.append((char) buffer[i]);
         }
 
-        return result.toString();
+        int bytesToDecode;
+        if (nulByteIndex != -1) {
+            // NUL byte found: decode up to but not including the NUL byte
+            bytesToDecode = nulByteIndex - offset;
+        } else {
+            // No NUL byte found: decode the entire specified length
+            bytesToDecode = length;
+        }
+
+        // Use ISO_8859_1 for decoding, as it's the closest to byte-to-char mapping
+        // implied by the original code and often the default for tar headers.
+        return new String(buffer, offset, bytesToDecode, StandardCharsets.ISO_8859_1);
     }
