diff --git a/tmp/ac86001b-8e45-4d28-ab6f-f624c2bd9c18_buggy.java b/tmp/44cd5d54-4720-4474-b1ed-afb486d6ee2d_fixed.java
index d6662c7..0aa48d8 100644
--- a/tmp/ac86001b-8e45-4d28-ab6f-f624c2bd9c18_buggy.java
+++ b/tmp/44cd5d54-4720-4474-b1ed-afb486d6ee2d_fixed.java
@@ -1,23 +1,30 @@
+import java.nio.charset.StandardCharsets;
+
+public class TarUtils {
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
-        int          end = offset + length;
-
-        for (int i = offset; i < end; ++i) {
-            if (buffer[i] == 0) {
+        // Determine the actual length of the string, which is limited by 'length'
+        // and the first NUL byte encountered.
+        int effectiveLength = 0;
+        for (int i = 0; i < length; ++i) {
+            if (buffer[offset + i] == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
+            effectiveLength++;
         }
 
-        return result.toString();
+        // Use the determined effective length to create the String using UTF-8 encoding.
+        // This is a common practice in modern TarUtils to handle names with non-ASCII characters,
+        // aligning with the typical default encoding for tar entries.
+        return new String(buffer, offset, effectiveLength, StandardCharsets.UTF_8);
+    }
 }
\ No newline at end of file
