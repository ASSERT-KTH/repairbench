diff --git a/tmp/8ae1b522-0343-4537-8b01-f0b5cf18e316_buggy.java b/tmp/1d9ef80e-98df-4239-b0b8-964451312e5f_fixed.java
index d6662c7..0c8aec5 100644
--- a/tmp/8ae1b522-0343-4537-8b01-f0b5cf18e316_buggy.java
+++ b/tmp/1d9ef80e-98df-4239-b0b8-964451312e5f_fixed.java
@@ -1,23 +1,31 @@
+package org.apache.commons.compress.archivers.tar;
+
+import java.nio.charset.StandardCharsets;
+
+public class TarUtils {
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
-        int          end = offset + length;
-
-        for (int i = offset; i < end; ++i) {
-            if (buffer[i] == 0) {
+        // Find the actual end of the string, which is either a NUL byte or the specified length limit.
+        int end = offset;
+        final int limit = offset + length;
+        for (; end < limit; ++end) {
+            if (buffer[end] == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
         }
 
-        return result.toString();
+        // Convert the relevant segment of the byte array to a String using UTF-8 encoding.
+        // This correctly handles multi-byte characters and characters outside the ASCII range,
+        // avoiding the issues caused by direct byte-to-char casting.
+        return new String(buffer, offset, end - offset, StandardCharsets.UTF_8);
+    }
 }
