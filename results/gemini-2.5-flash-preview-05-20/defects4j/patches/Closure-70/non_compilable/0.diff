diff --git a/tmp/0bff86c4-bbd0-4fec-b6cc-deac5f013452_buggy.java b/tmp/ca2c1430-a7e1-43a4-b281-12f615031534_fixed.java
index 1530b34..e5822a9 100644
--- a/tmp/0bff86c4-bbd0-4fec-b6cc-deac5f013452_buggy.java
+++ b/tmp/ca2c1430-a7e1-43a4-b281-12f615031534_fixed.java
@@ -1,23 +1,33 @@
     /**
      * Declares all of a function's arguments.
      */
     private void declareArguments(Node functionNode) {
       Node astParameters = functionNode.getFirstChild().getNext();
-      Node body = astParameters.getNext();
+      // The 'body' variable is unused.
+      // Node body = astParameters.getNext();
       FunctionType functionType = (FunctionType) functionNode.getJSType();
       if (functionType != null) {
         Node jsDocParameters = functionType.getParametersNode();
         if (jsDocParameters != null) {
           Node jsDocParameter = jsDocParameters.getFirstChild();
           for (Node astParameter : astParameters.children()) {
             if (jsDocParameter != null) {
+              // Copy JSDocInfo from the JSDoc parameter node to the AST parameter node.
+              // This is crucial for correctly reporting warnings like "variable redefined",
+              // as the compiler needs access to the original declaration's source information
+              // (e.g., line number, JSDoc comment) via the AST node.
+              if (jsDocParameter.getJSDocInfo() != null) {
+                astParameter.setJSDocInfo(jsDocParameter.getJSDocInfo());
+              }
               defineSlot(astParameter, functionNode,
                   jsDocParameter.getJSType(), true);
               jsDocParameter = jsDocParameter.getNext();
             } else {
+              // If there are more AST parameters than JSDoc parameters, define
+              // the remaining AST parameters without specific JSDoc types.
               defineSlot(astParameter, functionNode, null, true);
             }
           }
         }
       }
     } // end declareArguments
\ No newline at end of file
