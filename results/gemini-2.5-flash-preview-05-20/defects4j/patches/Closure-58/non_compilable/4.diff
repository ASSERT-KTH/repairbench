diff --git a/tmp/4f090228-dea4-45d2-a67d-2abc93e47599_buggy.java b/tmp/c814415c-62e9-41ae-969a-90cd33edefe4_fixed.java
index 2ff27ef..720c19e 100644
--- a/tmp/4f090228-dea4-45d2-a67d-2abc93e47599_buggy.java
+++ b/tmp/c814415c-62e9-41ae-969a-90cd33edefe4_fixed.java
@@ -1,97 +1,112 @@
   /**
    * Computes the GEN and KILL set.
    *
    * @param n Root node.
    * @param gen Local variables that are live because of the instruction at
    *        {@code n} will be added to this set.
    * @param kill Local variables that are killed because of the instruction at
    *        {@code n} will be added to this set.
    * @param conditional {@code true} if any assignments encountered are
    *        conditionally executed. These assignments might not kill a variable.
    */
   private void computeGenKill(Node n, BitSet gen, BitSet kill,
       boolean conditional) {
 
     switch (n.getType()) {
       case Token.SCRIPT:
       case Token.BLOCK:
       case Token.FUNCTION:
         return;
 
       case Token.WHILE:
       case Token.DO:
       case Token.IF:
         computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
             conditional);
         return;
 
       case Token.FOR:
         if (!NodeUtil.isForIn(n)) {
           computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
               conditional);
         } else {
           // for(x in y) {...}
           Node lhs = n.getFirstChild();
           Node rhs = lhs.getNext();
+          // The LHS of a FOR-IN loop is an assignment target.
+          // It implies the target variable is killed, and any sub-expressions
+          // within LHS are read (genned).
           if (NodeUtil.isVar(lhs)) {
             // for(var x in y) {...}
-            lhs = lhs.getLastChild();
-          }
+            // 'x' is declared and assigned, so it's killed.
+            addToSetIfLocal(lhs.getFirstChild(), kill);
+          } else if (lhs.isName()) {
+            // for(x in y) {...}
+            // 'x' is assigned, so it's killed.
             addToSetIfLocal(lhs, kill);
-            addToSetIfLocal(lhs, gen);
+          } else {
+            // for(expr in y) {...} e.g. for(a[1] in y)
+            // 'expr' is an assignment target. No local variable is directly
+            // killed by 'expr' itself in this context (it's a property/element
+            // assignment, not a variable assignment).
+            // We need to recursively visit its children to find variables that
+            // are read (e.g., 'a' in 'a[1]').
+            computeGenKill(lhs, gen, kill, conditional);
+          }
+          // The RHS of a FOR-IN loop (the iterated expression) is always read.
           computeGenKill(rhs, gen, kill, conditional);
         }
         return;
 
       case Token.VAR:
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (c.hasChildren()) {
             computeGenKill(c.getFirstChild(), gen, kill, conditional);
             if (!conditional) {
               addToSetIfLocal(c, kill);
             }
           }
         }
         return;
 
       case Token.AND:
       case Token.OR:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // May short circuit.
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.HOOK:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // Assume both sides are conditional.
         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.NAME:
         if (isArgumentsName(n)) {
           markAllParametersEscaped();
         } else {
           addToSetIfLocal(n, gen);
         }
         return;
 
       default:
         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
           Node lhs = n.getFirstChild();
           if (!conditional) {
             addToSetIfLocal(lhs, kill);
           }
           if (!NodeUtil.isAssign(n)) {
             // assignments such as a += 1 reads a.
             addToSetIfLocal(lhs, gen);
           }
           computeGenKill(lhs.getNext(), gen, kill, conditional);
         } else {
           for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
             computeGenKill(c, gen, kill, conditional);
           }
         }
         return;
     }
   }
\ No newline at end of file
