diff --git a/tmp/72ba099f-001a-4b00-a046-758c10ade470_buggy.java b/tmp/bb126717-0389-4f54-9ab0-7f509cb3828b_fixed.java
index 2ff27ef..2c3b2b4 100644
--- a/tmp/72ba099f-001a-4b00-a046-758c10ade470_buggy.java
+++ b/tmp/bb126717-0389-4f54-9ab0-7f509cb3828b_fixed.java
@@ -1,97 +1,117 @@
   /**
    * Computes the GEN and KILL set.
    *
    * @param n Root node.
    * @param gen Local variables that are live because of the instruction at
    *        {@code n} will be added to this set.
    * @param kill Local variables that are killed because of the instruction at
    *        {@code n} will be added to this set.
    * @param conditional {@code true} if any assignments encountered are
    *        conditionally executed. These assignments might not kill a variable.
    */
   private void computeGenKill(Node n, BitSet gen, BitSet kill,
       boolean conditional) {
 
     switch (n.getType()) {
       case Token.SCRIPT:
       case Token.BLOCK:
       case Token.FUNCTION:
         return;
 
       case Token.WHILE:
       case Token.DO:
       case Token.IF:
         computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
             conditional);
         return;
 
       case Token.FOR:
         if (!NodeUtil.isForIn(n)) {
+          // For regular for loops (for(init; cond; incr) {body}),
+          // this method only processes the condition expression.
+          // The initializer, incrementor, and body are assumed to be processed
+          // by the main LiveVariableAnalysis traversal.
           computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
               conditional);
         } else {
-          // for(x in y) {...}
-          Node lhs = n.getFirstChild();
-          Node rhs = lhs.getNext();
+          // for(x in y) {...} or for(var x in y) {...} or for(a[1] in y) {...}
+          Node lhs = n.getFirstChild(); // This is the assignment target (e.g., 'x', 'var x', 'a[1]')
+          Node rhs = lhs.getNext();    // This is the iterable object (e.g., 'y', 'foo')
+
+          // Handle the kill for the target of the 'in' loop.
+          // A variable is killed if it's a simple name (e.g., 'x' from 'for(x in y)' or 'var x').
+          // If it's a complex expression (e.g., 'a[1]'), no local variable is killed,
+          // but variables *within* the expression are generated (used).
           if (NodeUtil.isVar(lhs)) {
-            // for(var x in y) {...}
-            lhs = lhs.getLastChild();
-          }
+            // Case: for(var x in y) {...}
+            // 'x' is declared and then assigned to. So 'x' is killed.
+            addToSetIfLocal(lhs.getFirstChild(), kill); // lhs.getFirstChild() is the NAME node 'x'
+          } else if (lhs.isName()) {
+            // Case: for(x in y) {...}
+            // 'x' is assigned to. So 'x' is killed.
             addToSetIfLocal(lhs, kill);
-            addToSetIfLocal(lhs, gen);
+          } else {
+            // Case: for(a[1] in y) or for(obj.prop in y)
+            // The LHS is an expression. Variables *within* this expression
+            // are read/generated as part of evaluating the LHS (e.g., 'a' in 'a[1]').
+            // No simple local variable is killed by assigning to a property/array element.
+            computeGenKill(lhs, gen, kill, conditional);
+          }
+
+          // Process the RHS (the iterable expression). Variables within RHS are generated.
           computeGenKill(rhs, gen, kill, conditional);
         }
         return;
 
       case Token.VAR:
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (c.hasChildren()) {
             computeGenKill(c.getFirstChild(), gen, kill, conditional);
             if (!conditional) {
               addToSetIfLocal(c, kill);
             }
           }
         }
         return;
 
       case Token.AND:
       case Token.OR:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // May short circuit.
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.HOOK:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // Assume both sides are conditional.
         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.NAME:
         if (isArgumentsName(n)) {
           markAllParametersEscaped();
         } else {
           addToSetIfLocal(n, gen);
         }
         return;
 
       default:
         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
           Node lhs = n.getFirstChild();
           if (!conditional) {
             addToSetIfLocal(lhs, kill);
           }
           if (!NodeUtil.isAssign(n)) {
             // assignments such as a += 1 reads a.
             addToSetIfLocal(lhs, gen);
           }
           computeGenKill(lhs.getNext(), gen, kill, conditional);
         } else {
           for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
             computeGenKill(c, gen, kill, conditional);
           }
         }
         return;
     }
   }
\ No newline at end of file
