diff --git a/tmp/a8d71fd1-8d81-4ac4-b291-c5f26e0ab943_buggy.java b/tmp/9443c84d-62b1-43b6-9852-ae268d82204e_fixed.java
index 2ff27ef..e6c1892 100644
--- a/tmp/a8d71fd1-8d81-4ac4-b291-c5f26e0ab943_buggy.java
+++ b/tmp/9443c84d-62b1-43b6-9852-ae268d82204e_fixed.java
@@ -1,97 +1,119 @@
   /**
    * Computes the GEN and KILL set.
    *
    * @param n Root node.
    * @param gen Local variables that are live because of the instruction at
    *        {@code n} will be added to this set.
    * @param kill Local variables that are killed because of the instruction at
    *        {@code n} will be added to this set.
    * @param conditional {@code true} if any assignments encountered are
    *        conditionally executed. These assignments might not kill a variable.
    */
   private void computeGenKill(Node n, BitSet gen, BitSet kill,
       boolean conditional) {
 
     switch (n.getType()) {
       case Token.SCRIPT:
       case Token.BLOCK:
       case Token.FUNCTION:
         return;
 
       case Token.WHILE:
       case Token.DO:
       case Token.IF:
         computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
             conditional);
         return;
 
       case Token.FOR:
         if (!NodeUtil.isForIn(n)) {
           computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
               conditional);
         } else {
-          // for(x in y) {...}
+          // for(LHS in RHS) {...}
           Node lhs = n.getFirstChild();
           Node rhs = lhs.getNext();
+
+          // RHS (the enumerable object) is always read.
+          computeGenKill(rhs, gen, kill, conditional);
+
+          // Handle LHS. The LHS is the target of an assignment within the loop.
+          // This assignment is not conditional *per iteration*, but the entire FOR loop
+          // might be conditional.
           if (NodeUtil.isVar(lhs)) {
             // for(var x in y) {...}
-            lhs = lhs.getLastChild();
+            Node nameNode = lhs.getLastChild(); // This is the 'x' NAME node
+            // 'x' is killed by the assignment from the loop.
+            // It is NOT gen'd at this point.
+            if (!conditional) { // Respect if the entire loop is conditionally executed
+              addToSetIfLocal(nameNode, kill);
             }
+          } else if (NodeUtil.isName(lhs)) {
+            // for(x in y) {...}
+            // 'x' is killed by the assignment from the loop.
+            // It is NOT gen'd at this point.
+            if (!conditional) { // Respect if the entire loop is conditionally executed
               addToSetIfLocal(lhs, kill);
-            addToSetIfLocal(lhs, gen);
-          computeGenKill(rhs, gen, kill, conditional);
+            }
+          } else {
+            // for(a[1] in y) {...} or for(obj.prop in y)
+            // The components of the LHS expression are read (e.g., 'a' in 'a[1]').
+            // The assignment itself does not directly kill a simple local variable name.
+            // Analyze the LHS expression for any nested variable reads.
+            computeGenKill(lhs, gen, kill, conditional);
+          }
         }
         return;
 
       case Token.VAR:
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (c.hasChildren()) {
+          if (c.hasChildren()) { // c is a NAME node with an initializer
             computeGenKill(c.getFirstChild(), gen, kill, conditional);
             if (!conditional) {
               addToSetIfLocal(c, kill);
             }
           }
         }
         return;
 
       case Token.AND:
       case Token.OR:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // May short circuit.
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.HOOK:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // Assume both sides are conditional.
         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.NAME:
         if (isArgumentsName(n)) {
           markAllParametersEscaped();
         } else {
           addToSetIfLocal(n, gen);
         }
         return;
 
       default:
         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
           Node lhs = n.getFirstChild();
           if (!conditional) {
             addToSetIfLocal(lhs, kill);
           }
           if (!NodeUtil.isAssign(n)) {
             // assignments such as a += 1 reads a.
             addToSetIfLocal(lhs, gen);
           }
           computeGenKill(lhs.getNext(), gen, kill, conditional);
         } else {
           for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
             computeGenKill(c, gen, kill, conditional);
           }
         }
         return;
     }
   }
\ No newline at end of file
