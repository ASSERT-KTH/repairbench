diff --git a/tmp/ecf592db-69ed-4717-9499-ed85cd26d48d_buggy.java b/tmp/a7563df3-5796-467e-b030-3ce87a8641c1_fixed.java
index 2ff27ef..1e8415e 100644
--- a/tmp/ecf592db-69ed-4717-9499-ed85cd26d48d_buggy.java
+++ b/tmp/a7563df3-5796-467e-b030-3ce87a8641c1_fixed.java
@@ -1,97 +1,130 @@
   /**
    * Computes the GEN and KILL set.
    *
    * @param n Root node.
    * @param gen Local variables that are live because of the instruction at
    *        {@code n} will be added to this set.
    * @param kill Local variables that are killed because of the instruction at
    *        {@code n} will be added to this set.
    * @param conditional {@code true} if any assignments encountered are
    *        conditionally executed. These assignments might not kill a variable.
    */
   private void computeGenKill(Node n, BitSet gen, BitSet kill,
       boolean conditional) {
 
     switch (n.getType()) {
       case Token.SCRIPT:
       case Token.BLOCK:
       case Token.FUNCTION:
         return;
 
       case Token.WHILE:
       case Token.DO:
       case Token.IF:
         computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
             conditional);
         return;
 
       case Token.FOR:
         if (!NodeUtil.isForIn(n)) {
           computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
               conditional);
         } else {
           // for(x in y) {...}
           Node lhs = n.getFirstChild();
           Node rhs = lhs.getNext();
+
+          // 1. Process the RHS (the iterable expression) for reads.
+          computeGenKill(rhs, gen, kill, conditional);
+
+          // 2. Process the LHS (the variable or expression being assigned to).
+          // This is an implicit assignment in each iteration.
           if (NodeUtil.isVar(lhs)) {
             // for(var x in y) {...}
-            lhs = lhs.getLastChild();
+            // 'x' is the name being declared and assigned.
+            Node nameNode = lhs.getFirstChild();
+            // If the var has an initializer (e.g., 'var x = y'), process it.
+            // For-in var declarations typically don't have initializers,
+            // but the general `VAR` handling calls `computeGenKill` for initializers.
+            if (nameNode.hasChildren()) {
+              computeGenKill(nameNode.getFirstChild(), gen, kill, conditional);
             }
+            // The variable 'x' is killed by the assignment in each iteration.
+            if (!conditional) {
+              addToSetIfLocal(nameNode, kill);
+            }
+            // 'x' is also "generated" because it becomes usable within the loop body.
+            // This matches the behavior of the original code for `var x`.
+            addToSetIfLocal(nameNode, gen);
+          } else if (NodeUtil.isName(lhs)) {
+            // for(x in y) {...} where 'x' is a simple name.
+            // 'x' is assigned to, so it is killed.
+            if (!conditional) {
               addToSetIfLocal(lhs, kill);
-            addToSetIfLocal(lhs, gen);
-          computeGenKill(rhs, gen, kill, conditional);
+            }
+            // No explicit gen for 'x' itself, as it's a simple assignment (x = value),
+            // not a read-modify-write (x += value).
+          } else {
+            // for(a[1] in y) {...} or for(obj.prop in y) {...}
+            // The LHS is an expression (e.g., GETELEM, GETPROP).
+            // Evaluating this expression reads variables within it (e.g., 'a' in 'a[1]').
+            // Recursively compute gen/kill for the LHS expression.
+            computeGenKill(lhs, gen, kill, conditional);
+            // The assignment to 'a[1]' or 'obj.prop' does not kill the local variable 'a' or 'obj'.
+            // Therefore, no direct addToSetIfLocal(lhs, kill) for these cases.
+          }
         }
         return;
 
       case Token.VAR:
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (c.hasChildren()) {
             computeGenKill(c.getFirstChild(), gen, kill, conditional);
             if (!conditional) {
               addToSetIfLocal(c, kill);
             }
           }
         }
         return;
 
       case Token.AND:
       case Token.OR:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // May short circuit.
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.HOOK:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // Assume both sides are conditional.
         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.NAME:
         if (isArgumentsName(n)) {
           markAllParametersEscaped();
         } else {
           addToSetIfLocal(n, gen);
         }
         return;
 
       default:
         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
           Node lhs = n.getFirstChild();
           if (!conditional) {
             addToSetIfLocal(lhs, kill);
           }
           if (!NodeUtil.isAssign(n)) {
             // assignments such as a += 1 reads a.
             addToSetIfLocal(lhs, gen);
           }
           computeGenKill(lhs.getNext(), gen, kill, conditional);
         } else {
           for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
             computeGenKill(c, gen, kill, conditional);
           }
         }
         return;
     }
   }
\ No newline at end of file
