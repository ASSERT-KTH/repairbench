diff --git a/tmp/ca317e2e-5d54-41f9-80a4-ea1d1cd1ad4a_buggy.java b/tmp/fd820bb2-5032-4147-bc9e-380c7da96b9c_fixed.java
index 2ff27ef..bf0356a 100644
--- a/tmp/ca317e2e-5d54-41f9-80a4-ea1d1cd1ad4a_buggy.java
+++ b/tmp/fd820bb2-5032-4147-bc9e-380c7da96b9c_fixed.java
@@ -1,97 +1,117 @@
   /**
    * Computes the GEN and KILL set.
    *
    * @param n Root node.
    * @param gen Local variables that are live because of the instruction at
    *        {@code n} will be added to this set.
    * @param kill Local variables that are killed because of the instruction at
    *        {@code n} will be added to this set.
    * @param conditional {@code true} if any assignments encountered are
    *        conditionally executed. These assignments might not kill a variable.
    */
   private void computeGenKill(Node n, BitSet gen, BitSet kill,
       boolean conditional) {
 
     switch (n.getType()) {
       case Token.SCRIPT:
       case Token.BLOCK:
       case Token.FUNCTION:
         return;
 
       case Token.WHILE:
       case Token.DO:
       case Token.IF:
         computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
             conditional);
         return;
 
       case Token.FOR:
         if (!NodeUtil.isForIn(n)) {
           computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
               conditional);
         } else {
           // for(x in y) {...}
           Node lhs = n.getFirstChild();
           Node rhs = lhs.getNext();
           if (NodeUtil.isVar(lhs)) {
             // for(var x in y) {...}
             lhs = lhs.getLastChild();
           }
+          
+          // The LHS of a for-in loop can be a simple name (e.g., 'x' in 'for (x in y)')
+          // or an expression (e.g., 'a[1]' in 'for (a[1] in y)').
+          //
+          // If LHS is a simple name, it's directly assigned to, so it's killed.
+          // The original code also added it to gen for names, which might be an
+          // existing imprecision or a specific handling for FOR loops.
+          // We preserve this behavior for names.
+          if (NodeUtil.isName(lhs)) {
             addToSetIfLocal(lhs, kill);
             addToSetIfLocal(lhs, gen);
+          } else {
+            // If LHS is an expression (e.g., a[1]), it's not a direct killing
+            // of a local variable name. Instead, we need to traverse this expression
+            // to find any variables that are read within it (gen'd).
+            // For example, for 'a[1]', 'a' is read (gen'd).
+            // This prevents an IllegalStateException when addToSetIfLocal is
+            // called with a non-NAME node.
+            computeGenKill(lhs, gen, kill, conditional);
+          }
+          
+          // The RHS of the for-in loop is always evaluated, so its variables are gen'd.
           computeGenKill(rhs, gen, kill, conditional);
         }
         return;
 
       case Token.VAR:
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (c.hasChildren()) {
             computeGenKill(c.getFirstChild(), gen, kill, conditional);
             if (!conditional) {
               addToSetIfLocal(c, kill);
             }
           }
         }
         return;
 
       case Token.AND:
       case Token.OR:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // May short circuit.
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.HOOK:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // Assume both sides are conditional.
         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.NAME:
         if (isArgumentsName(n)) {
           markAllParametersEscaped();
         } else {
           addToSetIfLocal(n, gen);
         }
         return;
 
       default:
         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
           Node lhs = n.getFirstChild();
           if (!conditional) {
             addToSetIfLocal(lhs, kill);
           }
           if (!NodeUtil.isAssign(n)) {
             // assignments such as a += 1 reads a.
             addToSetIfLocal(lhs, gen);
           }
           computeGenKill(lhs.getNext(), gen, kill, conditional);
         } else {
           for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
             computeGenKill(c, gen, kill, conditional);
           }
         }
         return;
     }
   }
\ No newline at end of file
