diff --git a/tmp/840d28cb-ec3a-413d-9a39-386317e5f6a4_buggy.java b/tmp/30987b3a-f281-43a0-acd8-3a837fdf5f5d_fixed.java
index 511560e..ed26a24 100644
--- a/tmp/840d28cb-ec3a-413d-9a39-386317e5f6a4_buggy.java
+++ b/tmp/30987b3a-f281-43a0-acd8-3a837fdf5f5d_fixed.java
@@ -1,21 +1,13 @@
-    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
-        // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
         int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
+        if (bottom > MaxScopeSearchDepth) { // If stack is deeper than MaxScopeSearchDepth,
+            bottom = MaxScopeSearchDepth;   // 'bottom' (starting index of search) is capped to MaxScopeSearchDepth.
+                                            // This means it starts searching from an absolute index, not relative to current.
         }
         final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
-
-        for (int pos = bottom; pos >= top; pos--) {
-            final String elName = stack.get(pos).nodeName();
-            if (inSorted(elName, targetNames))
-                return true;
-            if (inSorted(elName, baseTypes))
-                return false;
-            if (extraTypes != null && inSorted(elName, extraTypes))
-                return false;
-        }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
-        return false;
-    }
+        // This calculation for 'top' also relies on the potentially capped 'bottom', leading to incorrect range.
+        // For example, if stack.size() is 200 and MaxScopeSearchDepth is 100:
+        // bottom becomes 100.
+        // top becomes (100 > 100 ? 100 - 100 : 0) -> 0.
+        // The loop becomes `for (int pos = 100; pos >= 0; pos--)`.
+        // This means it searches elements from index 100 down to 0, completely ignoring elements from index 101 to 199.
+        // If a scope-breaking element is at index 150, this function will miss it.
\ No newline at end of file
