diff --git a/tmp/cd29cb49-37ad-4011-9a3e-0da7de7b5b7a_buggy.java b/tmp/55f54aa8-7ae0-4816-b97e-792e17f369e7_fixed.java
index 511560e..9ed4e5f 100644
--- a/tmp/cd29cb49-37ad-4011-9a3e-0da7de7b5b7a_buggy.java
+++ b/tmp/55f54aa8-7ae0-4816-b97e-792e17f369e7_fixed.java
@@ -1,21 +1,26 @@
     private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
         // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
+        // The search starts from the current node (stack.size() - 1) and goes up the stack.
+        // MaxScopeSearchDepth limits how many elements from the current node (inclusive) are searched.
 
-        for (int pos = bottom; pos >= top; pos--) {
+        final int currentStackPos = stack.size() - 1;
+
+        // Calculate the effective 'bottom' of the search range.
+        // We search from currentStackPos downwards towards the root.
+        // This limit ensures we search at most MaxScopeSearchDepth elements.
+        // (MaxScopeSearchDepth - 1) because currentStackPos itself is one of the elements counted in the depth.
+        final int searchBottomIndex = Math.max(0, currentStackPos - (MaxScopeSearchDepth - 1));
+
+        for (int pos = currentStackPos; pos >= searchBottomIndex; pos--) {
             final String elName = stack.get(pos).nodeName();
             if (inSorted(elName, targetNames))
                 return true;
             if (inSorted(elName, baseTypes))
                 return false;
             if (extraTypes != null && inSorted(elName, extraTypes))
                 return false;
         }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
+        // If the loop completes without finding a match within the specified depth, return false.
+        // This is consistent with the depth limiting optimization.
         return false;
     }
