diff --git a/tmp/1e0db7bb-2ae4-4d99-800d-3cf650b8db91_buggy.java b/tmp/6ba6542e-33d6-4337-a73b-07e07a444373_fixed.java
index 511560e..ff64130 100644
--- a/tmp/1e0db7bb-2ae4-4d99-800d-3cf650b8db91_buggy.java
+++ b/tmp/6ba6542e-33d6-4337-a73b-07e07a444373_fixed.java
@@ -1,21 +1,36 @@
     private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
         // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
+        // The original logic for `bottom` and `top` incorrectly applied MaxScopeSearchDepth,
+        // potentially skipping relevant elements or searching too broadly.
+        // This revision ensures it correctly limits the search to a maximum depth from the current element.
+
+        final int currentStackTopIndex = stack.size() - 1;
+        
+        // If the stack is empty, no element is in scope.
+        if (currentStackTopIndex < 0) {
+            return false;
         }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
 
-        for (int pos = bottom; pos >= top; pos--) {
+        // Calculate the effective start and end indices for the search.
+        // The search always starts from the top of the stack (current element)
+        // and proceeds downwards (to older elements).
+        // MaxScopeSearchDepth specifies the maximum number of elements (inclusive) to check.
+        // For example, if MaxScopeSearchDepth = 1, check only the current element (pos = currentStackTopIndex).
+        // If MaxScopeSearchDepth = N, check the current element and N-1 elements above it.
+        final int searchStart = currentStackTopIndex;
+        // The search should stop at index `currentStackTopIndex - MaxScopeSearchDepth + 1`,
+        // but must not go below index 0.
+        final int searchEnd = Math.max(0, currentStackTopIndex - MaxScopeSearchDepth + 1);
+        
+        // Iterate upwards from the current element (top of stack) to the search limit
+        for (int pos = searchStart; pos >= searchEnd; pos--) {
             final String elName = stack.get(pos).nodeName();
             if (inSorted(elName, targetNames))
                 return true;
             if (inSorted(elName, baseTypes))
                 return false;
             if (extraTypes != null && inSorted(elName, extraTypes))
                 return false;
         }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
         return false;
     }
