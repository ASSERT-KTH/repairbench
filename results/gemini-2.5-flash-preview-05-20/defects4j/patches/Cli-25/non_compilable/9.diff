diff --git a/tmp/8fa592d7-256e-46eb-b6a8-f9aa90f80132_buggy.java b/tmp/c4a59ac7-48d0-4634-a11f-6bb0259393ab_fixed.java
index 875b31b..7ce3ea6 100644
--- a/tmp/8fa592d7-256e-46eb-b6a8-f9aa90f80132_buggy.java
+++ b/tmp/c4a59ac7-48d0-4634-a11f-6bb0259393ab_fixed.java
@@ -1,54 +1,132 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // First line processing (no padding).
+        // findWrapPos will search from index 0.
         int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
+        if (pos == -1) // If the entire text fits on the first line
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+        
+        // Append the first wrapped line.
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
+        // This block was problematic for usage text where nextLineTabStop could be 'width'.
+        // By removing it, HelpFormatter is expected to provide a correct nextLineTabStop.
+        // If nextLineTabStop is provided as 'width' by renderUsage for the initial line,
+        // it means the subsequent lines of usage should be indented by that amount.
+        // If it's truly larger than 'width' (e.g. 100 char indent on 80 char line),
+        // the createPadding would create a large string, but this is handled by
+        // `findWrapPos` now, which returns `width` when content exceeds width.
+        // The original problem was `nextLineTabStop` becoming `width-1` (21) when it should be 7.
+        // This adjustment here is removed.
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // All following lines must be padded with nextLineTabStop space characters.
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+        // Start processing the remaining text from the first line's break point.
+        String remainingText = text.substring(pos).trim();
+
+        while (!remainingText.isEmpty())
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // The current line to be processed, including the padding.
+            // This 'text' is temporary for this iteration's line construction.
+            String currentLineText = padding + remainingText;
+
+            // Find the wrap position in the 'currentLineText'.
+            // Crucially, `findWrapPos` now searches *after* the padding (`nextLineTabStop`)
+            // for natural breaks (whitespace/hyphen).
+            // If no natural break is found and `currentLineText` exceeds `width`, `findWrapPos`
+            // will return `width` to force a break.
+            pos = findWrapPos(currentLineText, width, nextLineTabStop); 
             
-            if (pos == -1)
+            if (pos == -1) // If the entire `currentLineText` (including padding) fits within `width`.
             {
-                sb.append(text);
+                sb.append(currentLineText);
+                remainingText = ""; // All text handled
+                break;
+            }
+            
+            // Append the line: padding + the content part up to `pos`.
+            // `currentLineText.substring(nextLineTabStop, pos)` extracts the content.
+            sb.append(padding).append(rtrim(currentLineText.substring(nextLineTabStop, pos))).append(defaultNewLine);
+            
+            // Update `remainingText` for the next iteration.
+            // `pos` is an index in `currentLineText`.
+            remainingText = currentLineText.substring(pos).trim();
+        }
 
         return sb;
     }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+    // --- Helper methods (rtrim, createPadding, findWrapPos) should be part of the class ---
+    // The problem description only provided renderWrappedText, so I assume these are elsewhere.
+    // However, findWrapPos is explicitly mentioned as buggy.
+    // Assuming rtrim, defaultNewLine, createPadding are correctly implemented outside.
+    // The fixed findWrapPos:
+    protected int findWrapPos(String text, int width, int startPos)
     {
-                pos = width;
+        int pos = -1;
+
+        // If the entire text fits within the given width, no wrap needed.
+        if (text.length() <= width)
+        {
+            return -1;
+        }
+
+        // Try to find a natural line break (whitespace).
+        // Search from `startPos` up to `width`.
+        for (int i = startPos; i < width; ++i) 
+        {
+            if (i >= text.length()) { // Avoid StringIndexOutOfBoundsException if text ends before `width`
+                break;
+            }
+            if (Character.isWhitespace(text.charAt(i)))
+            {
+                pos = i;
+            }
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // If we found a natural line break, return it.
+        if (pos != -1)
+        {
+            return pos;
         }
+
+        // No natural break (whitespace), try hyphen.
+        // Search from `startPos` up to `width`.
+        for (int i = startPos; i < width; ++i)
+        {
+            if (i >= text.length()) { // Avoid StringIndexOutOfBoundsException
+                break;
+            }
+            if (text.charAt(i) == '-')
+            {
+                return i;
+            }
+        }
+
+        // If no natural break (space or hyphen) was found, and the text itself
+        // is longer than `width`, we must break it forcibly at `width`.
+        if (text.length() > width) 
+        {
+            return width; 
+        }
+
+        return -1; // Should technically not be reached if text.length() > width due to the above check.
+                   // If text.length() <= width, it would have returned -1 earlier.
     }
\ No newline at end of file
