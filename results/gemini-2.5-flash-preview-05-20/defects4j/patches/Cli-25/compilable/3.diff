diff --git a/tmp/db41ebab-3672-4c5d-b8df-de14f7745f93_buggy.java b/tmp/82310e99-979b-4d2d-ad86-d478e96bdb43_fixed.java
index 875b31b..5f1d1dd 100644
--- a/tmp/db41ebab-3672-4c5d-b8df-de14f7745f93_buggy.java
+++ b/tmp/82310e99-979b-4d2d-ad86-d478e96bdb43_fixed.java
@@ -1,54 +1,81 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
+        // Adjust nextLineTabStop if it's too large (e.g., >= width).
+        // This prevents excessive indentation and potential infinite loops when
+        // nextLineTabStop is set to width or larger by the caller (e.g., HelpFormatter
+        // when calculating description padding based on option width).
+        // The test indicates that in such cases, a minimal indent (e.g., 1 space)
+        // is expected for subsequent wrapped lines.
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
+            nextLineTabStop = 1; // Default to a minimal indent
         }
         
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Create padding string based on the (potentially adjusted) nextLineTabStop.
+        // This padding will be applied to all rendered lines.
         final String padding = createPadding(nextLineTabStop);
 
+        // Find the initial wrap position for the first line.
+        int pos = findWrapPos(text, width, 0);
+
+        if (pos == -1)
+        {
+            // If the entire text fits on one line (or no wrapping is needed).
+            // Prepend padding and append the text, then add a newline if content exists.
+            sb.append(padding).append(rtrim(text));
+            if (text.length() > 0) { // Only append newline if there's actual text content
+                sb.append(defaultNewLine);
+            }
+            return sb;
+        }
+        
+        // Append the first wrapped line with its calculated padding.
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+        // Process remaining lines in a loop.
         while (true)
         {
+            // Prepare the text for the next line:
+            // 1. Prepend the calculated padding.
+            // 2. Take the remaining part of the original text (from 'pos' onwards).
+            // 3. Trim leading/trailing whitespace from this remaining part. This is
+            //    crucial to avoid double indentation if original text had spaces,
+            //    or preserve intended formatting by only keeping explicit text.
             text = padding + text.substring(pos).trim();
+            
+            // Find the wrap position for the current line (which now includes padding).
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                // If the remaining text fits on one line (after padding),
+                // append it and a newline.
+                sb.append(text).append(defaultNewLine);
                 return sb;
             }
             
+            // This condition is for specific edge cases where the natural wrap
+            // position might be too close to the padding, forcing a full line break.
+            // Keeping its original logic from the buggy code.
             if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
             {
                 pos = width;
             }
 
+            // Append the wrapped segment of the current line with its padding and a newline.
+            // 'text.substring(0, pos)' already contains the 'padding' at this point.
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
