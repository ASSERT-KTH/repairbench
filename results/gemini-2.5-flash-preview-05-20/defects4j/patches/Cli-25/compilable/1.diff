diff --git a/tmp/f87393d5-f9d6-46e7-b994-31defe058fce_buggy.java b/tmp/ef76f6a0-0847-449c-971a-a0584610a9a2_fixed.java
index 875b31b..bc1bf5a 100644
--- a/tmp/f87393d5-f9d6-46e7-b994-31defe058fce_buggy.java
+++ b/tmp/ef76f6a0-0847-449c-971a-a0584610a9a2_fixed.java
@@ -1,54 +1,60 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // Find the wrap position for the very first line.
+        // This first line is not indented by nextLineTabStop as per typical HelpFormatter behavior.
         int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
+        if (pos == -1) // If the text fits on a single line
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+
+        // Append the first line segment, trimmed of trailing whitespace, followed by a newline.
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        // Ensure nextLineTabStop is valid to prevent infinite loops.
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Create the padding string for all subsequent lines.
         final String padding = createPadding(nextLineTabStop);
 
+        // Prepare the remaining text for the first iteration of the loop.
+        // It starts after the break point (pos + 1) and any leading/trailing whitespace is trimmed.
+        text = text.substring(pos + 1).trim(); 
+
+        // Loop to process all subsequent lines.
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // For the current iteration, we need to consider the text with its padding.
+            String currentLineCandidate = padding + text;
             
-            if (pos == -1)
+            // Find the wrap position within this padded text.
+            pos = findWrapPos(currentLineCandidate, width, 0);
+
+            if (pos == -1) // If the current segment (with padding) fits on one line
             {
-                sb.append(text);
-
+                sb.append(currentLineCandidate); // Append it and we're done.
                 return sb;
             }
             
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // Special handling for edge cases where the wrap point might be within the padding
+            // or exactly at the start of the actual content after padding.
+            if ( (currentLineCandidate.length() > width) && (pos == nextLineTabStop - 1) ) 
             {
-                pos = width;
+                pos = width; // Force the wrap at the defined 'width'.
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the wrapped portion of the current line (including its padding and content),
+            // trimmed of trailing whitespace, followed by a newline.
+            sb.append(rtrim(currentLineCandidate.substring(0, pos))).append(defaultNewLine);
+
+            // Prepare 'text' for the *next* iteration. This 'text' will be the unpadded
+            // remainder of the current line segment, starting after its break point (pos + 1).
+            text = currentLineCandidate.substring(pos + 1).trim(); 
         }
     }
