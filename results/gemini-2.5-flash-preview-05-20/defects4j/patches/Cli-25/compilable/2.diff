diff --git a/tmp/6aed6171-d611-4c08-9a4a-a35f7decf018_buggy.java b/tmp/73283afe-8673-487d-9014-1967d0f427b3_fixed.java
index 875b31b..a3de76d 100644
--- a/tmp/6aed6171-d611-4c08-9a4a-a35f7decf018_buggy.java
+++ b/tmp/73283afe-8673-487d-9014-1967d0f427b3_fixed.java
@@ -1,54 +1,75 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        // remainingText will hold the part of the original text that still needs to be processed
+        String remainingText = text;
 
-        if (pos == -1)
+        // Handle the first line, which does not receive the nextLineTabStop padding
+        int pos = findWrapPos(remainingText, width, 0);
+
+        if (pos == -1) // No wrapping needed for the first line
         {
-            sb.append(rtrim(text));
-
+            sb.append(rtrim(remainingText));
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         
+        // Append the first wrapped line
+        sb.append(rtrim(remainingText.substring(0, pos))).append(defaultNewLine);
+        
+        // Update remainingText to be the part after the first break
+        remainingText = remainingText.substring(pos);
+
+        // Adjust nextLineTabStop if it's too large to prevent infinite loops or negative padding
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
+        if (nextLineTabStop < 0) { // Ensure nextLineTabStop is not negative
+            nextLineTabStop = 0;
+        }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Create padding string for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
+        // Loop to process all subsequent lines
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // For subsequent lines, first trim any leading whitespace from the `remainingText` 
+            // (e.g., a space left over from a word break) and then prepend the `padding`.
+            String currentLineContent = padding + remainingText.trim();
             
-            if (pos == -1)
+            // Find the wrap position for this padded line
+            pos = findWrapPos(currentLineContent, width, 0);
+
+            if (pos == -1) // No wrapping needed for the current line
             {
-                sb.append(text);
-
-                return sb;
+                sb.append(currentLineContent);
+                return sb; // All text processed
             }
             
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // This specific condition handles cases where `findWrapPos` might break within 
+            // the padding area due to a very small `width` compared to `nextLineTabStop`.
+            // It forces a hard break at `width` to prevent empty lines or misaligned output.
+            if ( (currentLineContent.length() > width) && (pos == nextLineTabStop - 1) ) 
             {
                 pos = width;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the wrapped part of the current line
+            sb.append(rtrim(currentLineContent.substring(0, pos))).append(defaultNewLine);
+            
+            // Update remainingText for the next iteration by taking the rest of the current line
+            remainingText = currentLineContent.substring(pos);
         }
     }
\ No newline at end of file
