diff --git a/tmp/2c6f6c86-6762-4b16-9145-0ec0223e31c4_buggy.java b/tmp/9f6e35f7-e1e5-4c31-baa0-7093ef6cea46_fixed.java
index 875b31b..7274195 100644
--- a/tmp/2c6f6c86-6762-4b16-9145-0ec0223e31c4_buggy.java
+++ b/tmp/9f6e35f7-e1e5-4c31-baa0-7093ef6cea46_fixed.java
@@ -1,54 +1,85 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        // Handle the first line separately
+        int firstLineWrapPos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
+        if (firstLineWrapPos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        sb.append(rtrim(text.substring(0, firstLineWrapPos))).append(defaultNewLine);
+
+        // Prepare the remaining text for subsequent lines
+        String currentRemainingText = text.substring(firstLineWrapPos);
+        // If the wrap position was a space, skip it for the next line's content
+        if (currentRemainingText.length() > 0 && currentRemainingText.charAt(0) == ' ') {
+            currentRemainingText = currentRemainingText.substring(1);
+        }
+
+        // Clamp nextLineTabStop to ensure at least one character space for content
+        // on subsequent lines, preventing infinite loops or content being completely
+        // hidden by padding.
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
             nextLineTabStop = width - 1;
+            // Ensure nextLineTabStop doesn't become negative if width is 0 or 1
+            if (nextLineTabStop < 0) {
+                nextLineTabStop = 0;
+            }
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Create padding string for subsequent lines
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+        // Loop for subsequent lines
+        while (currentRemainingText.length() > 0)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Prepend padding to the current segment of remaining text
+            String lineSegmentWithPadding = padding + currentRemainingText;
 
-            if (pos == -1)
+            // Find the wrap position within this padded segment
+            int wrapPos = findWrapPos(lineSegmentWithPadding, width, 0);
+
+            if (wrapPos == -1) // No wrap needed for this segment, it fits entirely
+            {
+                sb.append(lineSegmentWithPadding);
+                currentRemainingText = ""; // Mark as all processed
+                break; // Exit loop
+            }
+            
+            // This condition handles a specific edge case where `findWrapPos` might
+            // return a position within the padding area (e.g., if no word break
+            // is found before `width` and `nextLineTabStop - 1` is the last char of padding).
+            // In such cases, it forces a hard wrap at `width`.
+            if ( (lineSegmentWithPadding.length() > width) && (wrapPos == nextLineTabStop - 1) ) 
             {
-                sb.append(text);
+                wrapPos = width;
+            }
+
+            // Append the current line (padded segment up to wrapPos)
+            sb.append(rtrim(lineSegmentWithPadding.substring(0, wrapPos))).append(defaultNewLine);
 
+            // Update `currentRemainingText` for the next iteration
+            currentRemainingText = lineSegmentWithPadding.substring(wrapPos);
+            // If the current wrap position was a space character (meaning it wrapped at a word break),
+            // we should advance past that space for the next line's content.
+            if (currentRemainingText.length() > 0 && currentRemainingText.charAt(0) == ' ') {
+                currentRemainingText = currentRemainingText.substring(1);
+            }
+        }
         return sb;
     }
\ No newline at end of file
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
