diff --git a/tmp/e9381903-be31-490e-b682-6252ea76433c_buggy.java b/tmp/aed01345-4f40-436c-b85f-3e8343fba5c0_fixed.java
index 875b31b..08d5e09 100644
--- a/tmp/e9381903-be31-490e-b682-6252ea76433c_buggy.java
+++ b/tmp/aed01345-4f40-436c-b85f-3e8343fba5c0_fixed.java
@@ -1,54 +1,86 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        // Trim leading/trailing whitespace from the entire text once
+        text = text.trim();
 
-        if (pos == -1)
+        // Determine effective padding amount for all lines rendered by this function.
+        // The original code clamped nextLineTabStop to width - 1, leading to contentWidth = 1.
+        // The test `testLongLineChunkingIndentIgnored` expects a 1-space indent when
+        // nextLineTabStop is equal to width (22 in test). This implies clamping to 1.
+        int effectivePaddingAmount = nextLineTabStop;
+        if (effectivePaddingAmount >= width)
         {
-            sb.append(rtrim(text));
+            effectivePaddingAmount = 1; // Use a minimal indent to ensure content can be displayed
+        }
+        // Ensure padding is non-negative
+        if (effectivePaddingAmount < 0)
+        {
+            effectivePaddingAmount = 0;
+        }
+
+        final String padding = createPadding(effectivePaddingAmount);
+
+        // Determine available content width for wrapping
+        int contentWidth = width - effectivePaddingAmount;
+        // Ensure content width is at least 1, even if padding is large
+        if (contentWidth < 1)
+        {
+            contentWidth = 1;
+        }
+        
+        // Handle the first line
+        // findWrapPos operates on the original text, constrained by contentWidth
+        int pos = findWrapPos(text, contentWidth, 0);
 
+        if (pos == -1) // Text fits on one line without wrapping
+        {
+            sb.append(padding).append(text); // Apply padding to this single line
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
+        // Append the first segment with padding
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        // Prepare for subsequent lines
+        // Update text to be the remainder after the first line, trimming leading whitespace.
+        text = text.substring(pos).trim();
 
+        // Handle subsequent lines
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Find wrap position on the *unpadded* remaining text, within contentWidth.
+            pos = findWrapPos(text, contentWidth, 0);
 
-            if (pos == -1)
+            if (pos == -1) // Remaining text fits on one line
             {
-                sb.append(text);
-
+                sb.append(padding).append(text); // Apply padding
                 return sb;
             }
             
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
+            // This problematic condition was a workaround for logic that's now fixed.
+            // It attempted to force a wrap to 'width' if a specific problematic
+            // wrap position was found. With correct contentWidth logic, it's not needed.
+            // if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // {
+            //     pos = width;
+            // }
+
+            // Append current line segment with padding.
+            sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
             
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Update text to be the remainder, trimming leading whitespace.
+            text = text.substring(pos).trim();
         }
     }
\ No newline at end of file
