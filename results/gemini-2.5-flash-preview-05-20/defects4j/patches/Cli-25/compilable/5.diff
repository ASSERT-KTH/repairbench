diff --git a/tmp/b71b1898-5a3e-4462-beb1-58f60f19864a_buggy.java b/tmp/65a99254-eac4-4d6f-a3c9-de4d20aa9dec_fixed.java
index 875b31b..e085760 100644
--- a/tmp/b71b1898-5a3e-4462-beb1-58f60f19864a_buggy.java
+++ b/tmp/65a99254-eac4-4d6f-a3c9-de4d20aa9dec_fixed.java
@@ -1,54 +1,73 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
+        // Handle empty or null text immediately
+        if (text == null || text.length() == 0) {
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Create the padding string based on nextLineTabStop.
+        // This padding applies to all lines generated by this function.
         final String padding = createPadding(nextLineTabStop);
         
+        // Use a working copy of the text that will be modified.
+        // This 'remainingText' holds the part of the input 'text' that still needs to be wrapped.
+        String remainingText = text;
+
+        // Loop until all text is rendered
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Construct the current line to be evaluated for wrapping.
+            // All lines generated by this function should be prefixed with the padding.
+            String currentLine = padding + remainingText;
 
+            // Find the wrap position within 'currentLine'.
+            // findWrapPos will try to find a word break before 'width'.
+            int pos = findWrapPos(currentLine, width, 0);
+
+            // If no wrap needed for 'currentLine' (it fits entirely within 'width')
             if (pos == -1)
             {
-                sb.append(text);
-
+                sb.append(rtrim(currentLine));
                 return sb;
             }
             
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            // This is an edge case handling from the original code.
+            // If the 'currentLine' (which includes padding) is longer than 'width',
+            // AND findWrapPos returned a position that is exactly one character before
+            // the 'nextLineTabStop' (meaning the break occurred inside the padding,
+            // or right before the actual content starts at nextLineTabStop),
+            // then force a hard wrap at 'width'. This prevents outputting less
+            // than intended padding or breaking too early due to padding.
+            if ( (currentLine.length() > width) && (pos == nextLineTabStop - 1) ) 
             {
                 pos = width;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the wrapped segment to the buffer.
+            // rtrim() is used to remove any trailing whitespace that might have been part of the break.
+            sb.append(rtrim(currentLine.substring(0, pos))).append(defaultNewLine);
+
+            // Update 'remainingText' for the next iteration.
+            // Take the part of 'currentLine' that did not fit (from 'pos' onwards).
+            // .trim() is used to remove any leading whitespace that might have been included
+            // if 'pos' was a space character.
+            remainingText = currentLine.substring(pos).trim();
+
+            // If after processing a segment and trimming, there's no more text left, we are done.
+            if (remainingText.length() == 0) {
+                return sb;
+            }
         }
     }
\ No newline at end of file
