diff --git a/tmp/29ae0bde-9e5f-4577-8a54-87386b7c375f_buggy.java b/tmp/259c950c-001c-4b5b-bbf6-4108f95f0c1e_fixed.java
index d357c7e..601f04a 100644
--- a/tmp/29ae0bde-9e5f-4577-8a54-87386b7c375f_buggy.java
+++ b/tmp/259c950c-001c-4b5b-bbf6-4108f95f0c1e_fixed.java
@@ -1,16 +1,25 @@
     private InputStream getCurrentStream() throws IOException {
         if (deferredBlockStreams.isEmpty()) {
+            // COMPRESS-348: If deferredBlockStreams is empty and the current entry
+            // has a size of 0, then we should provide an empty stream
+            // instead of throwing an IllegalStateException.
+            // This allows `read()` to return -1 for zero-sized entries,
+            // as expected by the test for "2.txt" and "5.txt".
+            // It is assumed that 'currentEntry' is a field accessible within this class.
+            if (currentEntry != null && currentEntry.getSize() == 0) {
+                return new ByteArrayInputStream(new byte[0]);
+            }
             throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
         }
         
         while (deferredBlockStreams.size() > 1) {
             // In solid compression mode we need to decompress all leading folder'
             // streams to get access to an entry. We defer this until really needed
             // so that entire blocks can be skipped without wasting time for decompression.
             final InputStream stream = deferredBlockStreams.remove(0);
             IOUtils.skip(stream, Long.MAX_VALUE);
             stream.close();
         }
 
         return deferredBlockStreams.get(0);
     }
\ No newline at end of file
