diff --git a/tmp/8ac04594-29df-4f34-8b75-478c53ca7e64_buggy.java b/tmp/bb467853-fe9e-469c-9dac-85b102a922d6_fixed.java
index d357c7e..dd60afc 100644
--- a/tmp/8ac04594-29df-4f34-8b75-478c53ca7e64_buggy.java
+++ b/tmp/bb467853-fe9e-469c-9dac-85b102a922d6_fixed.java
@@ -1,16 +1,57 @@
     private InputStream getCurrentStream() throws IOException {
         if (deferredBlockStreams.isEmpty()) {
+            // Check if the current entry (which this stream would be for) is a 0-byte entry.
+            // This assumes 'currentEntry' is a field of the SevenZFile class.
+            // For 0-byte entries, there is no actual data stream to provide from
+            // deferredBlockStreams, so returning an "empty" stream (that always yields -1)
+            // is appropriate instead of throwing an IllegalStateException.
+            if (currentEntry != null && currentEntry.getSize() == 0) {
+                // Return an InputStream that immediately signals EOF for all read operations.
+                return new InputStream() {
+                    @Override
+                    public int read() throws IOException {
+                        return -1;
+                    }
+
+                    @Override
+                    public int read(byte[] b) throws IOException {
+                        return -1;
+                    }
+
+                    @Override
+                    public int read(byte[] b, int off, int len) throws IOException {
+                        return -1;
+                    }
+
+                    @Override
+                    public long skip(long n) throws IOException {
+                        return 0; // Nothing to skip for an empty stream.
+                    }
+
+                    @Override
+                    public int available() throws IOException {
+                        return 0; // No bytes available.
+                    }
+
+                    @Override
+                    public void close() throws IOException {
+                        // Do nothing, as there's no underlying resource to close.
+                    }
+                };
+            }
+            // If deferredBlockStreams is empty and currentEntry is not a 0-byte entry,
+            // then it genuinely means no current 7z entry or an invalid state.
             throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
         }
         
         while (deferredBlockStreams.size() > 1) {
             // In solid compression mode we need to decompress all leading folder'
             // streams to get access to an entry. We defer this until really needed
             // so that entire blocks can be skipped without wasting time for decompression.
             final InputStream stream = deferredBlockStreams.remove(0);
             IOUtils.skip(stream, Long.MAX_VALUE);
             stream.close();
         }
 
         return deferredBlockStreams.get(0);
     }
\ No newline at end of file
