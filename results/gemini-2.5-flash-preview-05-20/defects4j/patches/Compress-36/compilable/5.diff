diff --git a/tmp/af2d9c07-0829-4a89-8cb7-0a12597d1278_buggy.java b/tmp/217f0fa9-31d3-4cf4-b375-f65b26f4ac64_fixed.java
index d357c7e..d280ed4 100644
--- a/tmp/af2d9c07-0829-4a89-8cb7-0a12597d1278_buggy.java
+++ b/tmp/217f0fa9-31d3-4cf4-b375-f65b26f4ac64_fixed.java
@@ -1,16 +1,23 @@
     private InputStream getCurrentStream() throws IOException {
         if (deferredBlockStreams.isEmpty()) {
-            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+            // If deferredBlockStreams is empty, it means there's no active stream for the current entry.
+            // This can happen for zero-length entries after they've been processed (e.g., read() returned -1),
+            // or if the current entry has already been fully read and its stream was correctly removed or never added.
+            // Instead of throwing an IllegalStateException, which implies a protocol violation (getNextEntry() not called),
+            // we return an InputStream that immediately signals EOF (-1 on first read).
+            // This allows SevenZFile.read() to return -1 gracefully, which is the expected behavior
+            // for exhausted or zero-length entries, resolving the COMPRESS-348 issue.
+            return new java.io.ByteArrayInputStream(new byte[0]);
         }
         
         while (deferredBlockStreams.size() > 1) {
             // In solid compression mode we need to decompress all leading folder'
             // streams to get access to an entry. We defer this until really needed
             // so that entire blocks can be skipped without wasting time for decompression.
             final InputStream stream = deferredBlockStreams.remove(0);
             IOUtils.skip(stream, Long.MAX_VALUE);
             stream.close();
         }
 
         return deferredBlockStreams.get(0);
     }
