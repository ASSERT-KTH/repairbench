diff --git a/tmp/392445a3-7eae-4063-80e2-ff942da3f826_buggy.java b/tmp/04c48c5c-df47-4912-be34-91d9d849b99e_fixed.java
index d357c7e..0915d00 100644
--- a/tmp/392445a3-7eae-4063-80e2-ff942da3f826_buggy.java
+++ b/tmp/04c48c5c-df47-4912-be34-91d9d849b99e_fixed.java
@@ -1,16 +1,25 @@
     private InputStream getCurrentStream() throws IOException {
+        // If deferredBlockStreams is empty, it implies that the current entry
+        // does not have an associated data stream, likely because it's a
+        // directory or a zero-byte file that doesn't consume data from a block.
+        // In such a scenario, the caller (e.g., the read() method) might still
+        // request an InputStream. Instead of throwing an IllegalStateException,
+        // which signals an unexpected state, we should provide an empty stream.
+        // This allows the caller to proceed, and a read operation on this stream
+        // will immediately return -1 (end of stream), which is the correct
+        // behavior for zero-length entries.
         if (deferredBlockStreams.isEmpty()) {
-            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+            return new ByteArrayInputStream(new byte[0]); // Return an empty stream
         }
         
         while (deferredBlockStreams.size() > 1) {
             // In solid compression mode we need to decompress all leading folder'
             // streams to get access to an entry. We defer this until really needed
             // so that entire blocks can be skipped without wasting time for decompression.
             final InputStream stream = deferredBlockStreams.remove(0);
             IOUtils.skip(stream, Long.MAX_VALUE);
             stream.close();
         }
 
         return deferredBlockStreams.get(0);
     }
\ No newline at end of file
