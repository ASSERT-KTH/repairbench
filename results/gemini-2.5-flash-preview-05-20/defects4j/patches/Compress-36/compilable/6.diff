diff --git a/tmp/647d30ad-ca2c-4128-bb61-60224fffeb29_buggy.java b/tmp/8a15a64a-e65b-4eda-865e-180421aae320_fixed.java
index d357c7e..c66d696 100644
--- a/tmp/647d30ad-ca2c-4128-bb61-60224fffeb29_buggy.java
+++ b/tmp/8a15a64a-e65b-4eda-865e-180421aae320_fixed.java
@@ -1,16 +1,64 @@
     private InputStream getCurrentStream() throws IOException {
+        // The problem description indicates a java.lang.IllegalStateException:
+        // "No current 7z entry (call getNextEntry() first)."
+        // This exception is thrown when 'deferredBlockStreams.isEmpty()' is true.
+        //
+        // This typically means that 'getNextEntry()' failed to properly set up the
+        // stream for the current 7z entry, or that the current entry (e.g., a
+        // zero-sized entry) doesn't have an associated stream, but 'getCurrentStream()'
+        // is still called.
+        //
+        // The test 'readEntriesOfSize0' is specifically about entries of size 0,
+        // where 'read()' should return -1 immediately. If 'getCurrentStream()' is
+        // invoked for such an entry and 'deferredBlockStreams' is empty (because
+        // no actual stream is needed or available for a zero-sized entry after
+        // processing in getNextEntry()), throwing an exception here prevents
+        // the 'read()' method from returning -1.
+        //
+        // By returning an empty/no-op InputStream when 'deferredBlockStreams' is
+        // empty, 'SevenZFile.read()' will correctly return -1 for zero-sized
+        // entries without an underlying stream, effectively addressing the
+        // COMPRESS-348 issue where the state of deferredBlockStreams could lead
+        // to an IllegalStateException.
         if (deferredBlockStreams.isEmpty()) {
-            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+            // Return an empty InputStream if no actual stream is available.
+            // This allows read() to correctly return -1 for entries with size 0.
+            return new InputStream() {
+                @Override
+                public int read() throws IOException {
+                    return -1;
+                }
+
+                @Override
+                public int read(byte[] b, int off, int len) throws IOException {
+                    return -1;
+                }
+
+                @Override
+                public long skip(long n) throws IOException {
+                    return 0;
+                }
+
+                @Override
+                public int available() throws IOException {
+                    return 0;
+                }
+
+                @Override
+                public void close() throws IOException {
+                    // No-op for an empty stream
+                }
+            };
         }
         
         while (deferredBlockStreams.size() > 1) {
             // In solid compression mode we need to decompress all leading folder'
             // streams to get access to an entry. We defer this until really needed
             // so that entire blocks can be skipped without wasting time for decompression.
             final InputStream stream = deferredBlockStreams.remove(0);
             IOUtils.skip(stream, Long.MAX_VALUE);
             stream.close();
         }
 
         return deferredBlockStreams.get(0);
     }
\ No newline at end of file
