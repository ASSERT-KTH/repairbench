diff --git a/tmp/cdf3df31-aca7-435f-8971-5c42e6dac847_buggy.java b/tmp/af2e1e6b-3992-4d6d-ac71-ea33df859a96_fixed.java
index 14b78fb..597de73 100644
--- a/tmp/cdf3df31-aca7-435f-8971-5c42e6dac847_buggy.java
+++ b/tmp/af2e1e6b-3992-4d6d-ac71-ea33df859a96_fixed.java
@@ -1,56 +1,57 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
+        int wrapLimit = startPos + width;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
-        }
-        else if (startPos + width >= text.length())
+        // If the wrapLimit is at or beyond the end of the text,
+        // there's no more wrapping needed for this segment.
+        if (wrapLimit >= text.length())
         {
             return -1;
         }
 
-
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+        // Check for hard new line or tab characters within the wrap limit.
+        // If found, return the position right after it, as these usually
+        // imply a break at that exact point.
+        int foundPreferredPos;
+        if ((foundPreferredPos = text.indexOf('\n', startPos)) != -1 && foundPreferredPos < wrapLimit)
         {
-            --pos;
+            return foundPreferredPos + 1;
+        }
+        if ((foundPreferredPos = text.indexOf('\t', startPos)) != -1 && foundPreferredPos < wrapLimit)
+        {
+            return foundPreferredPos + 1;
         }
 
-        // if we found it - just return
-        if (pos > startPos)
+        // Look for the last whitespace character before 'wrapLimit'.
+        // This loop searches backwards from `wrapLimit - 1` down to `startPos`.
+        int pos = wrapLimit - 1; 
+        while (pos >= startPos)
+        {
+            char c = text.charAt(pos);
+            if (c == ' ' || c == '\n' || c == '\r')
             {
+                // Found a whitespace character. This is the desired wrap point.
+                // Return its index.
                 return pos;
             }
+            --pos;
+        }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // If no whitespace character was found in the range [startPos, wrapLimit - 1],
+        // return 'wrapLimit' itself. This means the text is cut at this exact position.
+        return wrapLimit;
     }
