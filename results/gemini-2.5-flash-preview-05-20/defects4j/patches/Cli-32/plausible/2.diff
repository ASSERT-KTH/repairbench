diff --git a/tmp/eb8c7040-dad4-4e1f-94b1-d1e0b4ce69a6_buggy.java b/tmp/a806a466-302f-4de9-b9f5-e694975ab5b7_fixed.java
index 14b78fb..53264a8 100644
--- a/tmp/eb8c7040-dad4-4e1f-94b1-d1e0b4ce69a6_buggy.java
+++ b/tmp/a806a466-302f-4de9-b9f5-e694975ab5b7_fixed.java
@@ -1,56 +1,72 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
         
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        // The original code uses `pos <= width` here. Assuming `width` refers to
+        // the max length from `startPos`, a position `p` is within the limit
+        // if `p - startPos < width`, or `p < startPos + width`.
+        // This change aligns the check with the concept of column width.
+        if (((pos = text.indexOf('\n', startPos)) != -1 && pos < startPos + width)
+                || ((pos = text.indexOf('\t', startPos)) != -1 && pos < startPos + width))
         {
             return pos + 1;
         }
         else if (startPos + width >= text.length())
         {
             return -1;
         }
 
+        // Determine the effective end of the search range for finding a whitespace.
+        // This is `startPos + width - 1` (the last character index within the width limit).
+        // Ensure this index does not go beyond the actual end of the text.
+        int searchEndIndex = startPos + width;
+        pos = Math.min(searchEndIndex - 1, text.length() - 1);
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+        // If, after calculating `pos`, it falls before `startPos`, it means
+        // the effective search range (e.g., for very small `width` values like 0 or 1)
+        // is invalid. In this case, no whitespace can be found within the range,
+        // so we fall back to chopping at `startPos + width` as per the description.
+        if (pos < startPos) {
+            return startPos + width;
+        }
 
         char c;
 
+        // Look for the last whitespace character before `startPos + width`.
+        // The loop iterates backwards from `pos` (which is `startPos + width - 1` or `text.length() - 1`)
+        // down to `startPos`. `pos < text.length()` is implicitly handled by `Math.min` above.
         while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                 && (c != '\n') && (c != '\r'))
         {
             --pos;
         }
 
-        // if we found it - just return
-        if (pos > startPos)
+        // If a whitespace was found (i.e., `pos` is still a valid index >= `startPos`),
+        // return its position.
+        // Original code used `pos > startPos`, which would ignore a whitespace at `startPos`.
+        // Changing to `pos >= startPos` correctly includes it.
+        if (pos >= startPos)
         {
             return pos;
         }
         
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // If no whitespace character was found in the specified range,
+        // simply chop at `startPos + width` as per the function's description.
+        // The original code's second `while` loop (which searched forward for the
+        // next whitespace) was removed because it contradicted this specific rule.
+        return startPos + width;
     }
