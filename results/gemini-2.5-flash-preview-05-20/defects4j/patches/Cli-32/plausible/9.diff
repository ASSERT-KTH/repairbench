diff --git a/tmp/db2e747a-5e78-4c8e-bcb9-60096a2371f1_buggy.java b/tmp/cb51d347-46f4-40ef-a63d-37bc5da111cf_fixed.java
index 14b78fb..814b5de 100644
--- a/tmp/db2e747a-5e78-4c8e-bcb9-60096a2371f1_buggy.java
+++ b/tmp/cb51d347-46f4-40ef-a63d-37bc5da111cf_fixed.java
@@ -1,56 +1,55 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
         
-        // the line ends before the max wrap pos or a new line char found
+        // Check for explicit line breaks (newline or tab) within the desired column width.
+        // If found, the wrap point is immediately after the explicit break.
+        // Note: The condition `pos <= width` here refers to the absolute position `pos`
+        // being within the global maximum column width. This behavior is preserved
+        // from the original code as it appears to be intended for explicit line breaks.
         if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                 || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
         {
             return pos + 1;
         }
+        // If the calculated end position (startPos + width) is beyond or at the end of the text,
+        // it means no more wrapping is needed for this line.
         else if (startPos + width >= text.length())
         {
             return -1;
         }
 
+        // According to the description:
+        // "The wrap point is the last position before startPos+width having a whitespace character (space, \n, \r)."
+        // This means we should search backwards from `startPos + width - 1` down to `startPos`.
+        //
+        // "If there is no whitespace character before startPos+width, it will return startPos+width."
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
+        // Iterate backwards from `startPos + width - 1` (the last character within the `width` limit)
+        // down to `startPos` to find the last whitespace character.
+        for (int i = startPos + width - 1; i >= startPos; i--) {
+            char c = text.charAt(i);
+            if (c == ' ' || c == '\n' || c == '\r') {
+                return i; // Found a whitespace, return its position as the wrap point.
             }
-
-        // if we found it - just return
-        if (pos > startPos)
-        {
-            return pos;
         }
         
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // If the loop completes, it means no whitespace character was found
+        // in the specified range [startPos, startPos + width - 1].
+        // In this case, as per the description, simply chop the text at `startPos + width`.
+        return startPos + width;
     }
\ No newline at end of file
