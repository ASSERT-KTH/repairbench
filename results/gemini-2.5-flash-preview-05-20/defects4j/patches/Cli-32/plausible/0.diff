diff --git a/tmp/eb0d7dcc-8e4d-4ddc-98d4-6a7a0f0a3fb2_buggy.java b/tmp/e0ebb311-1c91-481e-90d4-7c58865c965d_fixed.java
index 14b78fb..ced2663 100644
--- a/tmp/eb0d7dcc-8e4d-4ddc-98d4-6a7a0f0a3fb2_buggy.java
+++ b/tmp/e0ebb311-1c91-481e-90d4-7c58865c965d_fixed.java
@@ -1,56 +1,67 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
         
         // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        // Check for '\n' or '\t' within the specified width, relative to startPos.
+        // 'pos < startPos + width' ensures the newline/tab is within the current segment.
+        // A newline/tab at 'pos' means the wrap point is 'pos + 1' (after the character).
+        if (((pos = text.indexOf('\n', startPos)) != -1 && pos < startPos + width)
+                || ((pos = text.indexOf('\t', startPos)) != -1 && pos < startPos + width))
         {
             return pos + 1;
         }
         else if (startPos + width >= text.length())
         {
+            // If the segment from startPos + width is beyond or at the end of the text,
+            // it means the remaining text fits entirely or there's no more text to wrap.
+            // In this case, no further wrapping is needed for this segment, return -1.
             return -1;
         }
 
-
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+        // Look for the last whitespace character before startPos+width.
+        // The effective search range for a wrap point (a whitespace) is [startPos, startPos + width - 1].
+        // We start searching backward from the rightmost character within this desired width,
+        // ensuring 'pos' is a valid index within 'text'.
+        pos = Math.min(text.length() - 1, startPos + width - 1); 
 
         char c;
 
+        // Search backward for a whitespace character (' ', '\n', '\r').
+        // The loop continues as long as 'pos' is within the valid start range
+        // and the character at 'pos' is not a whitespace.
         while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                 && (c != '\n') && (c != '\r'))
         {
             --pos;
         }
 
-        // if we found it - just return
+        // If we found a whitespace character (i.e., 'pos' is now the index of a whitespace
+        // and it's not 'startPos' itself, which implies the segment starts with whitespace,
+        // often not a desired wrap point), return its position.
+        // The condition 'pos > startPos' correctly handles cases where 'pos' became 'startPos'
+        // or went below 'startPos' (e.g., -1), meaning no suitable whitespace was found.
         if (pos > startPos)
         {
             return pos;
         }
         
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // If no whitespace character was found before 'startPos + width'
+        // (which means the backward search resulted in 'pos <= startPos'),
+        // then, as per the description, simply chop the text at 'startPos + width'.
+        return startPos + width;
     }
\ No newline at end of file
