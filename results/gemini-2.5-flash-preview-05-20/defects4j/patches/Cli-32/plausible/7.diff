diff --git a/tmp/808941fa-82b4-43e7-a836-76371628d258_buggy.java b/tmp/486ba8ed-bf10-40b5-bd8e-fce766500548_fixed.java
index 14b78fb..ae18d5b 100644
--- a/tmp/808941fa-82b4-43e7-a836-76371628d258_buggy.java
+++ b/tmp/486ba8ed-bf10-40b5-bd8e-fce766500548_fixed.java
@@ -1,56 +1,70 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
         
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        // The line ends if a new line char or tab is found within the allowed width.
+        // The comparison 'pos <= width' was incorrect as 'pos' is an absolute index
+        // and 'width' is a column width. It should be 'pos <= startPos + width'
+        // to correctly check if the newline/tab is within the current segment (inclusive of boundary).
+        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= startPos + width)
+                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= startPos + width))
         {
             return pos + 1;
         }
         else if (startPos + width >= text.length())
         {
+            // If the potential wrap position is beyond or at the end of the text,
+            // no further wrap is needed.
             return -1;
         }
 
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+        // Look for the last whitespace character before startPos+width.
+        // The maximum index for a character to be "before startPos+width" is startPos + width - 1.
+        // We need to ensure 'pos' does not go out of bounds (e.g., if width is 0 or 1).
+        pos = startPos + width - 1;
+
+        // Ensure 'pos' is within text bounds and not less than 'startPos'
+        // for very short widths or texts.
+        if (pos >= text.length()) {
+            pos = text.length() - 1;
+        }
+        if (pos < startPos) {
+            pos = startPos; // If width is too small, make sure pos doesn't become less than startPos
+        }
+
 
         char c;
 
+        // Search backward from 'pos' to 'startPos' for a whitespace character.
         while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                 && (c != '\n') && (c != '\r'))
         {
             --pos;
         }
 
-        // if we found it - just return
-        if (pos > startPos)
+        // If a whitespace character was found at or after 'startPos', return its position.
+        // Changed 'pos > startPos' to 'pos >= startPos' to correctly handle a wrap point at 'startPos' itself.
+        if (pos >= startPos)
         {
             return pos;
         }
         
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // If no whitespace character was found in the range [startPos, startPos + width - 1],
+        // then, as per description, chop at startPos+width.
+        return startPos + width;
     }
