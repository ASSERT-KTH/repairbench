diff --git a/tmp/87f65918-3e54-45fb-afae-652d3e0570f7_buggy.java b/tmp/a20c35d0-35b3-4ea4-b2dc-d3e8c60aa3ce_fixed.java
index 14b78fb..c967173 100644
--- a/tmp/87f65918-3e54-45fb-afae-652d3e0570f7_buggy.java
+++ b/tmp/a20c35d0-35b3-4ea4-b2dc-d3e8c60aa3ce_fixed.java
@@ -1,56 +1,58 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
         
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        // Check for explicit newline or tab characters within the potential wrap segment.
+        // If found, the wrap point is immediately after the character.
+        // The condition `pos < startPos + width` ensures the newline/tab is *before* the width boundary.
+        if (((pos = text.indexOf('\n', startPos)) != -1 && pos < startPos + width)
+                || ((pos = text.indexOf('\t', startPos)) != -1 && pos < startPos + width))
         {
-            return pos + 1;
+            return pos + 1; // Return the position *after* the newline/tab character.
         }
-        else if (startPos + width >= text.length())
+        
+        // If the remaining text is shorter than the desired width, or exactly fits,
+        // no further wrapping is needed for this segment.
+        if (startPos + width >= text.length())
         {
-            return -1;
+            return -1; // Indicates that the end of the text or current segment is reached.
         }
 
-
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
+        // Search backward for the last whitespace character before startPos+width.
+        // Start searching from the character at `startPos + width - 1` (the last char that fits).
+        pos = startPos + width - 1;
         char c;
 
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+        // Iterate backward as long as `pos` is within the current segment (>= startPos).
+        while (pos >= startPos)
         {
-            --pos;
-        }
-
-        // if we found it - just return
-        if (pos > startPos)
+            c = text.charAt(pos);
+            if (c == ' ' || c == '\n' || c == '\r')
             {
+                // Found a whitespace character. This is the wrap point.
+                // According to tests, this returns the index of the whitespace itself.
                 return pos;
             }
+            --pos; // Move to the previous character.
+        }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // If the loop completes without finding a whitespace, it means the segment
+        // from `startPos` to `startPos + width - 1` contains no whitespace.
+        // This is the "word cut" scenario where a single word is longer than `width`.
+        // In this case, chop the text exactly at `startPos + width`.
+        return startPos + width;
     }
