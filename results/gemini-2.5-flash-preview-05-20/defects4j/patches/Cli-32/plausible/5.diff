diff --git a/tmp/b280e752-cc6d-44b0-8181-aa9994061bc8_buggy.java b/tmp/545353c2-dff9-4898-9798-ca7ea03ad845_fixed.java
index 14b78fb..b020733 100644
--- a/tmp/b280e752-cc6d-44b0-8181-aa9994061bc8_buggy.java
+++ b/tmp/545353c2-dff9-4898-9798-ca7ea03ad845_fixed.java
@@ -1,56 +1,68 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
+        // Calculate the absolute end position for the current line segment.
+        // This is the boundary (exclusive) for finding a wrap point.
+        int wrapLimit = startPos + width;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
+        // Check for explicit newlines or tabs that force a break before the wrapLimit.
+        // This takes precedence over finding other whitespace for wrapping.
+        // It prioritizes the earliest \n, then earliest \t, within the wrapLimit.
+        // The return pos + 1 means the line breaks AFTER the newline/tab character.
+        int newlinePos = text.indexOf('\n', startPos);
+        int tabPos = text.indexOf('\t', startPos);
+
+        // Determine the effective earliest hard break if any exist within the wrapLimit
+        int earliestHardBreakPos = Integer.MAX_VALUE;
+
+        if (newlinePos != -1 && newlinePos < wrapLimit) {
+            earliestHardBreakPos = Math.min(earliestHardBreakPos, newlinePos);
+        }
+        if (tabPos != -1 && tabPos < wrapLimit) {
+            earliestHardBreakPos = Math.min(earliestHardBreakPos, tabPos);
         }
-        else if (startPos + width >= text.length())
+
+        if (earliestHardBreakPos != Integer.MAX_VALUE) {
+            return earliestHardBreakPos + 1; // Break after the hard break character
+        }
+
+        // If the remaining text from startPos fits entirely within 'width'
+        // (i.e., wrapLimit reaches or exceeds the text length),
+        // no wrapping is needed for this segment.
+        if (wrapLimit >= text.length())
         {
             return -1;
         }
 
-
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+        // Look for the last whitespace character (space, \n, \r)
+        // strictly before 'wrapLimit' (i.e., from index `wrapLimit - 1` downwards)
+        // and at or after 'startPos'.
+        // If a whitespace is found, that's the desired wrap point.
+        for (int i = wrapLimit - 1; i >= startPos; i--)
         {
-            --pos;
-        }
-
-        // if we found it - just return
-        if (pos > startPos)
+            char c = text.charAt(i);
+            if (c == ' ' || c == '\n' || c == '\r')
             {
-            return pos;
+                // Found a whitespace, return its position. The line breaks AT this character.
+                return i;
             }
-        
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
         }
-        return pos == text.length() ? -1 : pos;
+
+        // If no whitespace character was found in the range [startPos, wrapLimit - 1],
+        // then according to the specification, return startPos + width.
+        // This means chopping the word at the exact width boundary (wrapLimit).
+        return wrapLimit;
     }
\ No newline at end of file
