diff --git a/tmp/dac3c1b0-eb67-4f74-8c51-30ffb5d26903_buggy.java b/tmp/2ce9f63c-d032-46e4-b6dc-ff8b306ab94b_fixed.java
index 14b78fb..a37ae1c 100644
--- a/tmp/dac3c1b0-eb67-4f74-8c51-30ffb5d26903_buggy.java
+++ b/tmp/2ce9f63c-d032-46e4-b6dc-ff8b306ab94b_fixed.java
@@ -1,56 +1,58 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
         
         // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        // Corrected condition: pos should be < startPos + width, as 'pos' is absolute
+        // and 'width' is relative to 'startPos'.
+        if (((pos = text.indexOf('\n', startPos)) != -1 && pos < startPos + width)
+                || ((pos = text.indexOf('\t', startPos)) != -1 && pos < startPos + width))
         {
             return pos + 1;
         }
         else if (startPos + width >= text.length())
         {
+            // If the potential wrap point is beyond or at the end of the text,
+            // no more wrapping is needed for this segment.
             return -1;
         }
 
 
         // look for the last whitespace character before startPos+width
+        // Start search from startPos + width and go backward.
         pos = startPos + width;
 
         char c;
 
+        // Iterate backward until a whitespace character is found or startPos is reached/crossed.
         while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                 && (c != '\n') && (c != '\r'))
         {
             --pos;
         }
 
-        // if we found it - just return
+        // if a whitespace character was found before startPos+width (and not at startPos itself)
         if (pos > startPos)
         {
             return pos;
         }
         
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // if no whitespace character was found in the backward search (pos <= startPos),
+        // the Javadoc specifies that it should "simply chop at startPos+width".
+        // The original code's attempt to find the *next* whitespace was incorrect.
+        return startPos + width;
     }
