diff --git a/tmp/d5b43497-085d-4394-b11c-82f75d99b7a5_buggy.java b/tmp/5014be5e-08b6-422e-a7b9-f7410dc7e49d_fixed.java
index 14b78fb..5c6bf28 100644
--- a/tmp/d5b43497-085d-4394-b11c-82f75d99b7a5_buggy.java
+++ b/tmp/5014be5e-08b6-422e-a7b9-f7410dc7e49d_fixed.java
@@ -1,56 +1,62 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
         
         // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        // Corrected condition: pos <= startPos + width to correctly check if the found newline/tab
+        // falls within the current line's allowed width (from startPos to startPos + width).
+        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= startPos + width)
+                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= startPos + width))
         {
-            return pos + 1;
+            return pos + 1; // Return the position *after* the newline/tab, effectively consuming it.
         }
+        // If the remaining text segment from startPos to startPos + width extends beyond
+        // the actual end of the text, then no more wrapping is needed, return -1.
         else if (startPos + width >= text.length())
         {
             return -1;
         }
 
 
-        // look for the last whitespace character before startPos+width
+        // Look for the last whitespace character within the range [startPos, startPos + width].
+        // Start searching from 'startPos + width' backwards.
         pos = startPos + width;
 
         char c;
 
+        // Loop while 'pos' is within the current segment (>= startPos) AND
+        // the character at 'pos' is NOT a whitespace (' ', '\n', '\r').
+        // The loop will stop when a whitespace is found, or 'pos' goes below 'startPos'.
         while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                 && (c != '\n') && (c != '\r'))
         {
             --pos;
         }
 
-        // if we found it - just return
+        // If a whitespace character was found such that 'pos' is still a valid index
+        // and greater than 'startPos', return that position. This means a valid wrap point
+        // (the index of the whitespace) was identified within the allowed width.
         if (pos > startPos)
         {
             return pos;
         }
         
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+        // If no suitable whitespace character was found within the [startPos, startPos + width] range
+        // (i.e., 'pos' became <= 'startPos' after the loop), then as per Javadoc,
+        // simply chop the text at 'startPos + width'.
+        return startPos + width;
     }
