diff --git a/tmp/2f952326-f457-4fab-acbc-ab51d18e680d_buggy.java b/tmp/ed8943ca-6f5d-47fe-9862-3c23fb027713_fixed.java
index 98d89dc..9321d40 100644
--- a/tmp/2f952326-f457-4fab-acbc-ab51d18e680d_buggy.java
+++ b/tmp/ed8943ca-6f5d-47fe-9862-3c23fb027713_fixed.java
@@ -1,23 +1,39 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
+
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            // JXPath's testNan implies special handling for NaN comparisons:
+            // - NaN = NaN should be TRUE.
+            // - Any other comparison involving NaN (e.g., NaN > 0, NaN < NaN) should be FALSE.
+            if (Double.isNaN(ld) && Double.isNaN(rd)) {
+                // If both are NaN, return 0 for evaluateCompare.
+                // For '=' operator, evaluateCompare(0) will return true (as per test case `NaN = NaN`).
+                // For '>', '<', etc., evaluateCompare(0) will return false.
+                return evaluateCompare(0);
+            } else {
+                // If only one is NaN (e.g., NaN > 0, NaN = 0), the result should always be false.
+                return false;
+            }
+        }
+        // If neither is NaN, perform standard comparison.
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
