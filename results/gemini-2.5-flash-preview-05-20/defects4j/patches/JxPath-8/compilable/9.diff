diff --git a/tmp/b5538743-f8cf-4497-956e-c1a99838c5f6_buggy.java b/tmp/8f396fb7-73e0-41a9-96da-a46752268a02_fixed.java
index 98d89dc..6bfa177 100644
--- a/tmp/b5538743-f8cf-4497-956e-c1a99838c5f6_buggy.java
+++ b/tmp/8f396fb7-73e0-41a9-96da-a46752268a02_fixed.java
@@ -1,23 +1,49 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
+
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
+
+        // Handle NaN comparison rules as per XPath 1.0 specification
+        // XPath NaN rules:
+        // - NaN = NaN  -> true
+        // - NaN = X    -> false (if X is not NaN)
+        // - NaN > X    -> false
+        // - NaN < X    -> false
+        // - X > NaN    -> false
+        // - X < NaN    -> false
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            if (Double.isNaN(ld) && Double.isNaN(rd)) {
+                // If both are NaN, XPath specifies they are equal.
+                // Returning 0 (for equality) will make CoreOperationEqual.evaluateCompare(0) return true.
+                // For CoreOperationGreaterThan and CoreOperationLessThan, evaluateCompare(0) will correctly return false.
+                return evaluateCompare(0);
+            } else {
+                // If only one is NaN, any comparison (=, >, <) should result in false.
+                // We return a value (e.g., 2) that is not 0, 1, or -1.
+                // This ensures that CoreOperationEqual, CoreOperationGreaterThan, and CoreOperationLessThan
+                // will all return false when checking evaluateCompare(2).
+                return evaluateCompare(2);
+            }
+        }
+        
+        // Original logic for non-NaN doubles
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
\ No newline at end of file
