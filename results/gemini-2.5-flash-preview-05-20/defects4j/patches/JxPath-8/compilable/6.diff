diff --git a/tmp/f5429fd4-85fe-476e-8ccf-35642ebc67a6_buggy.java b/tmp/2e55f521-ab38-42bd-b8f7-cae0f803ce8c_fixed.java
index 98d89dc..2313c83 100644
--- a/tmp/f5429fd4-85fe-476e-8ccf-35642ebc67a6_buggy.java
+++ b/tmp/2e55f521-ab38-42bd-b8f7-cae0f803ce8c_fixed.java
@@ -1,23 +1,44 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
+
+        boolean ldIsNaN = Double.isNaN(ld);
+        boolean rdIsNaN = Double.isNaN(rd);
+
+        if (ldIsNaN || rdIsNaN) {
+            if (ldIsNaN && rdIsNaN) {
+                // XPath: NaN = NaN is true.
+                // For other comparisons (e.g., NaN < NaN, NaN > NaN), they should be false.
+                // Passing 0 to evaluateCompare will result in true for '=' operation and
+                // false for '<' or '>' operations, which matches XPath behavior.
+                return evaluateCompare(0);
+            } else {
+                // One of them is NaN, the other is not.
+                // XPath: Any comparison with NaN (where one is not NaN) is false.
+                // We pass '2' (or any value other than 0, -1, 1) to evaluateCompare.
+                // This assumes evaluateCompare will return false for standard comparisons
+                // when given an "out of range" value.
+                return evaluateCompare(2);
+            }
+        }
+        // Neither is NaN. Perform standard double comparison as before.
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
\ No newline at end of file
