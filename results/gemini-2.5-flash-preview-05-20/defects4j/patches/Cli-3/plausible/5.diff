diff --git a/tmp/54bf838b-68b2-424c-8443-ad033020e814_buggy.java b/tmp/31902fb1-d50f-42fd-8d4c-425b4eb69346_fixed.java
index d9b400d..211948a 100644
--- a/tmp/54bf838b-68b2-424c-8443-ad033020e814_buggy.java
+++ b/tmp/31902fb1-d50f-42fd-8d4c-425b4eb69346_fixed.java
@@ -1,21 +1,43 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
+        // Handle null input string explicitly as per common practice and to prevent NullPointerExceptions.
+        if (str == null) {
+            return null;
+        }
+
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // The Javadoc explicitly states: "If a . is present, it creates a Double, otherwise a Long."
+            // This suggests a specific parsing logic that should be strictly adhered to,
+            // rather than relying on the broader interpretation of org.apache.commons.lang.math.NumberUtils.createNumber,
+            // which might return other Number types like Float or BigDecimal.
+            // The test failure "expected:<4.5> but was:<4.5>" often indicates a type mismatch
+            // where the toString() values are identical but the underlying Number types are different
+            // (e.g., expecting Double but getting Float or BigDecimal).
+            
+            if (str.indexOf('.') != -1) {
+                // If a '.' is present, parse as a Double.
+                return Double.valueOf(str);
+            } else {
+                // Otherwise (no '.' present), parse as a Long.
+                return Long.valueOf(str);
+            }
         }
         catch (NumberFormatException nfe)
         {
+            // If parsing fails for the determined type (Double or Long),
+            // catch the exception. As per the original code and Javadoc,
+            // print the error message and return null.
             System.err.println(nfe.getMessage());
         }
 
         return null;
     }
\ No newline at end of file
