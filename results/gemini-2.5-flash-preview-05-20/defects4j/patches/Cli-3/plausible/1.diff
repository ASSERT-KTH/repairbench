diff --git a/tmp/91c08f21-7597-4c18-8bca-70397db53563_buggy.java b/tmp/956373a9-82d5-4ca1-9957-604563d13445_fixed.java
index d9b400d..78a89e4 100644
--- a/tmp/91c08f21-7597-4c18-8bca-70397db53563_buggy.java
+++ b/tmp/956373a9-82d5-4ca1-9957-604563d13445_fixed.java
@@ -1,21 +1,35 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
+        // Handle null or empty string input as per the "not a number" contract.
+        if (str == null || str.length() == 0) {
+            return null;
+        }
+
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // According to the Javadoc: "If a . is present, it creates a Double"
+            if (str.indexOf('.') != -1) {
+                return Double.valueOf(str);
+            } 
+            // According to the Javadoc: "otherwise a Long"
+            else {
+                return Long.valueOf(str);
+            }
         }
         catch (NumberFormatException nfe)
         {
-            System.err.println(nfe.getMessage());
+            // If the string cannot be parsed as a Number (Double or Long),
+            // the contract states that null should be returned.
+            // The original System.err.println is removed as it's typically debug output.
         }
 
         return null;
     }
\ No newline at end of file
