diff --git a/tmp/012cdcca-fa54-45f7-9944-ce0ceb53b992_buggy.java b/tmp/c503b25e-31a7-43dd-b1eb-758ae909c5a2_fixed.java
index d9b400d..c8e9e09 100644
--- a/tmp/012cdcca-fa54-45f7-9944-ce0ceb53b992_buggy.java
+++ b/tmp/c503b25e-31a7-43dd-b1eb-758ae909c5a2_fixed.java
@@ -1,21 +1,49 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
+        if (str == null)
+        {
+            return null;
+        }
+
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // According to the Javadoc of this method:
+            // "If a . is present, it creates a Double, otherwise a Long."
+            // The original implementation using NumberUtils.createNumber
+            // does not strictly adhere to this (e.g., it might return BigDecimal for decimals,
+            // or Integer/BigInteger for integers).
+            // This fix enforces the described behavior.
+            if (str.indexOf('.') != -1)
+            {
+                // If a decimal point is present, create a Double.
+                // This resolves the issue where NumberUtils might return a BigDecimal,
+                // which is not equal to a Double during testing despite having the same value.
+                // Double.valueOf handles standard decimal representations, including scientific notation.
+                return Double.valueOf(str);
+            }
+            else
+            {
+                // If no decimal point is present, create a Long.
+                // This will throw NumberFormatException for inputs like "123L" or "0xFF",
+                // as Long.valueOf does not parse suffixes or other bases.
+                // This aligns with the strict interpretation of the Javadoc, where
+                // such inputs, if not directly convertible to Long, would be invalid.
+                return Long.valueOf(str);
+            }
         }
         catch (NumberFormatException nfe)
         {
+            // Log the error and return null as per the original contract for invalid numbers.
             System.err.println(nfe.getMessage());
         }
 
         return null;
     }
\ No newline at end of file
