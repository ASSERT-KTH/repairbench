diff --git a/tmp/a9fd1163-6a23-49ab-8938-d815335a4364_buggy.java b/tmp/1649eda8-5068-4cd4-bee8-bf9dc49492d9_fixed.java
index d9b400d..f650dbc 100644
--- a/tmp/a9fd1163-6a23-49ab-8938-d815335a4364_buggy.java
+++ b/tmp/1649eda8-5068-4cd4-bee8-bf9dc49492d9_fixed.java
@@ -1,21 +1,32 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
+        if (str == null) {
+            return null;
+        }
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // According to the Javadoc: "If a . is present, it creates a Double, otherwise a Long."
+            // This implementation strictly adheres to this contract.
+            if (str.indexOf('.') != -1) {
+                return Double.valueOf(str);
+            } else {
+                return Long.valueOf(str);
+            }
         }
         catch (NumberFormatException nfe)
         {
-            System.err.println(nfe.getMessage());
+            // The Javadoc also states: "if str is not a number, null is returned."
+            // The System.err.println was likely for debugging and is not part of the required behavior.
+            // System.err.println(nfe.getMessage()); 
         }
 
         return null;
     }
\ No newline at end of file
