diff --git a/tmp/62070dea-88a9-470f-8589-09b03ba727b6_buggy.java b/tmp/67aae43b-b12b-4e30-8b0a-90e67afa8bf2_fixed.java
index d9b400d..28c1c9a 100644
--- a/tmp/62070dea-88a9-470f-8589-09b03ba727b6_buggy.java
+++ b/tmp/67aae43b-b12b-4e30-8b0a-90e67afa8bf2_fixed.java
@@ -1,21 +1,30 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
     public static Number createNumber(String str)
     {
         try
         {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            Number num = org.apache.commons.lang.math.NumberUtils.createNumber(str);
+            // According to the Javadoc: "If a . is present, it creates a Double".
+            // NumberUtils.createNumber might return a Float for decimal numbers
+            // (e.g., "4.5") depending on its internal logic or version.
+            // If it returns a Float and the string contained a decimal point,
+            // convert it to a Double to satisfy the specified contract and the failing test.
+            if (num instanceof Float && str != null && str.indexOf('.') != -1) {
+                return new Double(num.doubleValue());
+            }
+            return num;
         }
         catch (NumberFormatException nfe)
         {
             System.err.println(nfe.getMessage());
         }
 
         return null;
     }
\ No newline at end of file
