diff --git a/tmp/2db32695-1ac6-4b4a-94ec-08e51049c813_buggy.java b/tmp/eb4edd10-c14c-4366-ac65-66bb908f201d_fixed.java
index 9d69396..a971df5 100644
--- a/tmp/2db32695-1ac6-4b4a-94ec-08e51049c813_buggy.java
+++ b/tmp/eb4edd10-c14c-4366-ac65-66bb908f201d_fixed.java
@@ -1,46 +1,69 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
         long storedSum = 0;
-        long unsignedSum = 0;
-        long signedSum = 0;
+        // Sums calculated treating checksum field as spaces (standard behavior)
+        long unsignedSumStandard = 0;
+        long signedSumStandard = 0;
+        // Sums calculated treating checksum field with its original bytes (for compatibility, e.g., NUL-padded)
+        long unsignedSumOriginalBytes = 0;
+        long signedSumOriginalBytes = 0;
 
         int digits = 0;
         for (int i = 0; i < header.length; i++) {
-            byte b = header[i];
+            byte b = header[i]; // Get original byte
+
+            // Parse storedSum from the checksum field
             if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
                 if ('0' <= b && b <= '7' && digits++ < 6) {
                     storedSum = storedSum * 8 + b - '0';
                 } else if (digits > 0) {
+                    // Stop parsing if non-octal char encountered after some digits
                     digits = 6;
                 }
-                b = ' ';
+                // For sums using original bytes, add the original 'b'
+                unsignedSumOriginalBytes += 0xff & b;
+                signedSumOriginalBytes += b;
+
+                // For standard sums, conceptually replace 'b' with a space for checksum calculation
+                b = ' '; // This 'b' will be used for standard sums below
+            } else {
+                // For bytes outside the checksum field, both sum types use the original byte
+                unsignedSumOriginalBytes += 0xff & b;
+                signedSumOriginalBytes += b;
             }
-            unsignedSum += 0xff & b;
-            signedSum += b;
+            
+            // Add 'b' (which is either header[i] or ' ' for checksum field) to standard sums
+            unsignedSumStandard += 0xff & b;
+            signedSumStandard += b;
         }
-        return storedSum == unsignedSum || storedSum == signedSum;
+
+        // Return true if storedSum matches any of the calculated sums
+        return storedSum == unsignedSumStandard
+            || storedSum == signedSumStandard
+            || storedSum == unsignedSumOriginalBytes
+            || storedSum == signedSumOriginalBytes;
     }
