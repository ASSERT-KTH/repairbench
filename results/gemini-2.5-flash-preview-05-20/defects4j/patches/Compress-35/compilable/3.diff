diff --git a/tmp/70850246-e498-447f-938c-b3ec4f71ff5a_buggy.java b/tmp/c9f21603-242e-4359-a4f0-cfb37314ba0f_fixed.java
index 9d69396..b2ecd65 100644
--- a/tmp/70850246-e498-447f-938c-b3ec4f71ff5a_buggy.java
+++ b/tmp/c9f21603-242e-4359-a4f0-cfb37314ba0f_fixed.java
@@ -1,46 +1,77 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
+        // Assume CHKSUM_OFFSET and CHKSUMLEN are constants defined elsewhere
+        // For standard tar, CHKSUM_OFFSET = 148, CHKSUMLEN = 8.
+        final int CHKSUM_OFFSET = 148; // Assuming this constant is available in scope
+        final int CHKSUMLEN = 8;     // Assuming this constant is available in scope
+
         long storedSum = 0;
-        long unsignedSum = 0;
-        long signedSum = 0;
+        long unsignedSum = 0; // Sum calculated treating checksum bytes as spaces (' ')
+        long signedSum = 0;   // Sum calculated treating checksum bytes as spaces (' ')
+        long unsignedSumZero = 0; // Sum calculated treating checksum bytes as binary zeros (0x00)
+        long signedSumZero = 0;   // Sum calculated treating checksum bytes as binary zeros (0x00)
 
         int digits = 0;
         for (int i = 0; i < header.length; i++) {
-            byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
+            byte b = header[i]; // Original byte from header
+
+            if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {
+                // If we are in the checksum field (bytes 148 to 155 inclusive)
+
+                // 1. Parse the stored checksum value from the original bytes.
+                // "ignore leading and trailing whitespace, and get the first six digits."
                 if ('0' <= b && b <= '7' && digits++ < 6) {
                     storedSum = storedSum * 8 + b - '0';
                 } else if (digits > 0) {
+                    // Stop parsing storedSum if we hit a non-octal character after digits
                     digits = 6;
                 }
-                b = ' ';
-            }
+
+                // 2. For the standard checksum calculation (unsignedSum, signedSum),
+                //    treat these checksum bytes as ASCII spaces (decimal 32).
+                unsignedSum += 0xff & ' ';
+                signedSum += ' ';
+
+                // 3. For compatibility with non-standard implementations (like COMPRESS-335)
+                //    where checksum bytes might be '0's and treated as binary zeros (0x00)
+                //    in the original checksum calculation.
+                unsignedSumZero += 0xff & 0; // Add binary zero (0x00)
+                signedSumZero += 0;       // Add binary zero (0x00)
+            } else {
+                // For all other bytes outside the checksum field, use their original values
                 unsignedSum += 0xff & b;
                 signedSum += b;
+                unsignedSumZero += 0xff & b;
+                signedSumZero += b;
             }
-        return storedSum == unsignedSum || storedSum == signedSum;
+        }
+
+        // Return true if storedSum matches any of the calculated sums.
+        // This covers the standard (unsigned/signed with spaces) and non-standard (unsigned/signed with binary zeros).
+        return storedSum == unsignedSum || storedSum == signedSum
+                || storedSum == unsignedSumZero || storedSum == signedSumZero;
     }
\ No newline at end of file
