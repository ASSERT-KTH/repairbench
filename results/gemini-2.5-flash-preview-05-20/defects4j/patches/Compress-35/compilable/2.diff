diff --git a/tmp/8d548fad-658e-4dab-a575-9fe2ccf18606_buggy.java b/tmp/b8cac31d-e04c-4ced-9669-e47acdc20e82_fixed.java
index 9d69396..790e4fd 100644
--- a/tmp/8d548fad-658e-4dab-a575-9fe2ccf18606_buggy.java
+++ b/tmp/b8cac31d-e04c-4ced-9669-e47acdc20e82_fixed.java
@@ -1,46 +1,79 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
         long storedSum = 0;
         long unsignedSum = 0;
         long signedSum = 0;
 
-        int digits = 0;
+        // 1. Extract the stored checksum value from the header.
+        // This part needs to ignore leading/trailing whitespace and get the first six octal digits.
+        int digitsRead = 0;
+        boolean startedDigits = false;
+        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
+            if (i >= header.length) {
+                // Handle truncated headers if they are shorter than the checksum field
+                break;
+            }
+            byte b = header[i];
+            if (b >= '0' && b <= '7') {
+                // If it's an octal digit
+                startedDigits = true;
+                if (digitsRead < 6) { // Only read up to 6 digits as per spec
+                    storedSum = storedSum * 8 + (b - '0');
+                    digitsRead++;
+                }
+            } else if (startedDigits) {
+                // If we've started reading digits and now encounter a non-octal char,
+                // we should stop parsing further digits for the storedSum.
+                // This handles cases like "000123X " where X is non-octal.
+                break;
+            } else if (b == ' ' || b == '\0') {
+                // Ignore leading spaces or NULs before digits start.
+                // This handles cases like "   123 "
+                continue;
+            } else {
+                // Encountered an unexpected character (non-octal, non-space, non-NUL)
+                // before any digits. Treat this as an invalid format for stored sum,
+                // and stop parsing. storedSum will hold what was parsed so far (likely 0).
+                break;
+            }
+        }
+
+        // 2. Calculate the actual header checksums (signed and unsigned).
+        // The checksum field bytes must be treated as ASCII spaces (decimal 32) for this calculation.
         for (int i = 0; i < header.length; i++) {
             byte b = header[i];
             if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
+                // Replace the checksum field bytes with space for the checksum calculation
                 b = ' '; 
             }
-            unsignedSum += 0xff & b;
-            signedSum += b;
+            unsignedSum += 0xff & b; // Add unsigned byte value
+            signedSum += b;         // Add signed byte value
         }
+
+        // 3. Compare the stored checksum with calculated sums.
         return storedSum == unsignedSum || storedSum == signedSum;
     }
\ No newline at end of file
