diff --git a/tmp/9e8c268c-68e8-493b-a04f-c9f73e4c0a68_buggy.java b/tmp/7fef3456-76a6-4e9a-b948-034e32343069_fixed.java
index 9d69396..0eb3d71 100644
--- a/tmp/9e8c268c-68e8-493b-a04f-c9f73e4c0a68_buggy.java
+++ b/tmp/7fef3456-76a6-4e9a-b948-034e32343069_fixed.java
@@ -1,46 +1,70 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
         long storedSum = 0;
-        long unsignedSum = 0;
-        long signedSum = 0;
+        long unsignedSumWithSpaces = 0; // Sum calculated with checksum bytes replaced by ' '
+        long signedSumWithSpaces = 0;   // Sum calculated with checksum bytes replaced by ' '
+        long unsignedSumWithNuls = 0;   // Sum calculated with checksum bytes replaced by '\0'
+        long signedSumWithNuls = 0;     // Sum calculated with checksum bytes replaced by '\0'
 
         int digits = 0;
         for (int i = 0; i < header.length; i++) {
-            byte b = header[i];
+            byte currentByte = header[i]; // Get the original byte from the header
+
             if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
+                // This block handles parsing the stored checksum from the header.
+                // The original bytes in the checksum field are used for reading 'storedSum'.
+                if ('0' <= currentByte && currentByte <= '7' && digits < 6) {
+                    // Accumulate up to 6 octal digits for the stored checksum.
+                    storedSum = storedSum * 8 + currentByte - '0';
+                    digits++;
                 } else if (digits > 0) {
+                    // If we have already read some digits and now encounter a non-octal character,
+                    // consider the 6-digit checksum reading complete.
                     digits = 6;
                 }
-                b = ' ';
+
+                // For the purpose of calculating the header sums (unsignedSumWithSpaces, etc.),
+                // the bytes in the checksum field are specified to be replaced.
+                // The Wikipedia quote implies space replacement.
+                // The JIRA issue COMPRESS-191 implies some implementations use NUL.
+                unsignedSumWithSpaces += (0xff & ' '); // ASCII space (decimal 32)
+                signedSumWithSpaces += ' ';
+                unsignedSumWithNuls += (0xff & 0);     // NUL byte (decimal 0)
+                signedSumWithNuls += 0;
+            } else {
+                // Outside the checksum field, use the original byte for all sum calculations.
+                unsignedSumWithSpaces += (0xff & currentByte);
+                signedSumWithSpaces += currentByte;
+                unsignedSumWithNuls += (0xff & currentByte);
+                signedSumWithNuls += currentByte;
             }
-            unsignedSum += 0xff & b;
-            signedSum += b;
         }
-        return storedSum == unsignedSum || storedSum == signedSum;
+        // The checksum is considered valid if 'storedSum' matches any of the calculated sums.
+        // This covers combinations of signed/unsigned interpretation and space/NUL replacement.
+        return storedSum == unsignedSumWithSpaces || storedSum == signedSumWithSpaces ||
+               storedSum == unsignedSumWithNuls || storedSum == signedSumWithNuls;
     }
\ No newline at end of file
