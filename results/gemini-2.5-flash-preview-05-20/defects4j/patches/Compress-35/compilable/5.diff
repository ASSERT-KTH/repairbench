diff --git a/tmp/f0a5ab5d-b545-4ccb-a0d6-9933c3f34866_buggy.java b/tmp/74148277-667a-4f24-ab99-649ce033f605_fixed.java
index 9d69396..bafb37a 100644
--- a/tmp/f0a5ab5d-b545-4ccb-a0d6-9933c3f34866_buggy.java
+++ b/tmp/74148277-667a-4f24-ab99-649ce033f605_fixed.java
@@ -1,46 +1,72 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
+        // Assuming CHKSUM_OFFSET and CHKSUMLEN are accessible, e.g., from TarConstants
+        // public static final int CHKSUMLEN = 8;
+        // public static final int CHKSUM_OFFSET = 148;
+
         long storedSum = 0;
         long unsignedSum = 0;
         long signedSum = 0;
 
         int digits = 0;
         for (int i = 0; i < header.length; i++) {
             byte b = header[i];
             if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
+                // Parse the stored checksum from the header bytes
                 if ('0' <= b && b <= '7' && digits++ < 6) {
                     storedSum = storedSum * 8 + b - '0';
                 } else if (digits > 0) {
+                    // Stop parsing if a non-octal digit is encountered after some digits
                     digits = 6;
                 }
+                // For checksum calculation, the checksum bytes themselves are treated as spaces
                 b = ' ';
             }
-            unsignedSum += 0xff & b;
-            signedSum += b;
+            unsignedSum += 0xff & b; // Add byte as unsigned
+            signedSum += b;         // Add byte as signed
         }
+
+        // COMPRESS-335: Special handling for tar files where the checksum field is all spaces.
+        // Some tar implementations write all spaces instead of a valid octal checksum.
+        // In such cases, despite the checksum not being parsable as a number, the file
+        // is considered a valid tar archive.
+        if (storedSum == 0 && CHKSUMLEN == 8 && header[CHKSUM_OFFSET] == ' ') {
+            boolean allSpaces = true;
+            for (int i = 0; i < CHKSUMLEN; i++) {
+                if (header[CHKSUM_OFFSET + i] != ' ') {
+                    allSpaces = false;
+                    break;
+                }
+            }
+            if (allSpaces) {
+                return true; // Consider it valid if all checksum bytes are spaces.
+            }
+        }
+
+        // Return true if either the unsigned or signed sum matches the stored sum
         return storedSum == unsignedSum || storedSum == signedSum;
     }
\ No newline at end of file
