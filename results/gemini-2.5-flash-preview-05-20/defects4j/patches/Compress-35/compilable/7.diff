diff --git a/tmp/9861de8f-08b2-4ee6-9bf5-311ec701da46_buggy.java b/tmp/7ee0af8a-f3c4-4784-bc3a-d4f556e362af_fixed.java
index 9d69396..416f53e 100644
--- a/tmp/9861de8f-08b2-4ee6-9bf5-311ec701da46_buggy.java
+++ b/tmp/7ee0af8a-f3c4-4784-bc3a-d4f556e362af_fixed.java
@@ -1,46 +1,73 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
         long storedSum = 0;
-        long unsignedSum = 0;
-        long signedSum = 0;
+        // Sums calculated with checksum bytes replaced by spaces (standard)
+        long unsignedSumWithSpaces = 0;
+        long signedSumWithSpaces = 0;
+        // Sums calculated with actual checksum bytes (for some non-standard variants like GNU tar)
+        long unsignedSumActualBytes = 0;
+        long signedSumActualBytes = 0;
 
         int digits = 0;
         for (int i = 0; i < header.length; i++) {
-            byte b = header[i];
+            byte currentByte = header[i]; // Original byte at current position
+
             if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
+                // Parse the stored checksum from the header.
+                // "ignore leading and trailing whitespace, and get the first six digits."
+                if ('0' <= currentByte && currentByte <= '7' && digits < 6) {
+                    storedSum = storedSum * 8 + (currentByte - '0');
+                    digits++;
+                } else if (digits > 0) { // If digits have been read, but a non-octal char or limit is reached, stop parsing.
+                    digits = 6; // Effectively stops further digit parsing within the checksum field.
                 }
-                b = ' ';
+
+                // Calculate sum assuming checksum bytes are spaces (standard behavior)
+                unsignedSumWithSpaces += (0xff & ' '); // ' ' is ASCII 32
+                signedSumWithSpaces += ' ';
+
+                // Calculate sum assuming checksum bytes are their actual value (non-standard variant)
+                unsignedSumActualBytes += (0xff & currentByte);
+                signedSumActualBytes += currentByte;
+            } else {
+                // For bytes outside the checksum range, use their original value for all sums.
+                unsignedSumWithSpaces += (0xff & currentByte);
+                signedSumWithSpaces += currentByte;
+                unsignedSumActualBytes += (0xff & currentByte);
+                signedSumActualBytes += currentByte;
             }
-            unsignedSum += 0xff & b;
-            signedSum += b;
         }
-        return storedSum == unsignedSum || storedSum == signedSum;
+
+        // Return true if stored checksum matches any of the four calculated sums.
+        // This covers:
+        // 1. Standard checksum (with spaces) using unsigned byte values.
+        // 2. Standard checksum (with spaces) using signed byte values.
+        // 3. Non-standard checksum (with actual bytes) using unsigned byte values.
+        // 4. Non-standard checksum (with actual bytes) using signed byte values.
+        return storedSum == unsignedSumWithSpaces || storedSum == signedSumWithSpaces ||
+               storedSum == unsignedSumActualBytes || storedSum == signedSumActualBytes;
     }
\ No newline at end of file
