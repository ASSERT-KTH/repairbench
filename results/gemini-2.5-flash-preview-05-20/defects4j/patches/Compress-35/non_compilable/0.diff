diff --git a/tmp/954b7993-55d7-4c3e-985e-d157efbe4545_buggy.java b/tmp/cfd9dc3e-3343-46c0-b213-6952cb1d6f1a_fixed.java
index 9d69396..27b01df 100644
--- a/tmp/954b7993-55d7-4c3e-985e-d157efbe4545_buggy.java
+++ b/tmp/cfd9dc3e-3343-46c0-b213-6952cb1d6f1a_fixed.java
@@ -1,46 +1,36 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
     public static boolean verifyCheckSum(byte[] header) {
         long storedSum = 0;
         long unsignedSum = 0;
         long signedSum = 0;
 
         int digits = 0;
-        for (int i = 0; i < header.length; i++) {
-            byte b = header[i];
+        // The checksum is calculated over the full 512-byte header block.
+        // If the provided 'header' array is shorter, missing bytes are treated as NUL (0).
+        // The checksum field itself (8 bytes) is treated as spaces for the sum calculation.
+        for (int i = 0; i < TarConstants.HEADER_SIZE; i++) {
+            byte b;
+            if (i < header.length) {
+                b = header[i];
+            } else {
+                // Treat bytes beyond the provided header length as NUL (0) for checksum calculation.
+                b = 0;
+            }
+
             if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
+                // When parsing the stored checksum, only consider digits from the available header bytes.
+                // The byte 'b' here is the original byte from the header (or 0 if missing).
                 if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
+                    storedSum = storedSum * 8 + (b - '0');
                 } else if (digits > 0) {
+                    // If a non-octal digit is encountered after some digits have been read,
+                    // or if 6 digits have already been parsed, stop further digit parsing.
                     digits = 6;
                 }
+                // For the sum calculation (unsignedSum/signedSum), replace the checksum bytes with spaces.
                 b = ' ';
             }
-            unsignedSum += 0xff & b;
+            unsignedSum += (0xff & b);
             signedSum += b;
         }
         return storedSum == unsignedSum || storedSum == signedSum;
     }
\ No newline at end of file
