diff --git a/tmp/f7a5b10e-40a9-4a7b-a210-4a18fa0bf3d0_buggy.java b/tmp/83186da1-2923-42ef-a950-db5eb81449f0_fixed.java
index 9d69396..0a01674 100644
--- a/tmp/f7a5b10e-40a9-4a7b-a210-4a18fa0bf3d0_buggy.java
+++ b/tmp/83186da1-2923-42ef-a950-db5eb81449f0_fixed.java
@@ -1,46 +1,66 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
         long storedSum = 0;
         long unsignedSum = 0;
         long signedSum = 0;
 
         int digits = 0;
-        for (int i = 0; i < header.length; i++) {
-            byte b = header[i];
+        // Tar header blocks are typically 512 bytes (HEADER_SIZE). The checksum
+        // is calculated over this entire block. If the provided header is
+        // shorter than the standard block size, the remaining bytes should be
+        // treated as NULs for checksum calculation purposes.
+        // Assumes HEADER_SIZE, CHKSUM_OFFSET, and CHKSUMLEN are constants
+        // accessible in this context (e.g., from TarConstants or directly in the class).
+        for (int i = 0; i < HEADER_SIZE; i++) {
+            byte b;
+            if (i < header.length) {
+                b = header[i];
+            } else {
+                // Pad with NULs if the actual header is shorter than HEADER_SIZE
+                b = 0;
+            }
+
             if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
+                // When parsing the stored checksum, ignore leading/trailing
+                // non-octal characters and only take up to 6 octal digits.
+                if (b >= '0' && b <= '7' && digits < 6) {
+                    storedSum = storedSum * 8 + (b - '0');
+                    digits++;
                 } else if (digits > 0) {
+                    // Stop parsing storedSum if a non-octal char is encountered after digits have been read.
+                    // Subsequent checksum bytes are still treated as spaces for the sum calculation.
                     digits = 6;
                 }
+                // For the purpose of checksum calculation, the checksum field
+                // bytes are taken to be ASCII spaces (decimal 32).
                 b = ' ';
             }
             unsignedSum += 0xff & b;
             signedSum += b;
         }
         return storedSum == unsignedSum || storedSum == signedSum;
     }
\ No newline at end of file
