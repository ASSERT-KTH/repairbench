diff --git a/tmp/d331360a-1181-4461-84a5-fd4023aaf593_buggy.java b/tmp/36f52488-7071-41cd-87d3-b004c3826265_fixed.java
index 74fe4ec..d3bea77 100644
--- a/tmp/d331360a-1181-4461-84a5-fd4023aaf593_buggy.java
+++ b/tmp/36f52488-7071-41cd-87d3-b004c3826265_fixed.java
@@ -1,98 +1,123 @@
     /**
      * Method overridden to support more reliable deserialization of
      * String collections.
      */
     @Override
     public String nextTextValue() throws IOException
     {
         _binaryValue = null;
         if (_nextToken != null) {
             JsonToken t = _nextToken;
             _currToken = t;
             _nextToken = null;
 
             // expected case; yes, got a String
             if (t == JsonToken.VALUE_STRING) {
                 return _currText;
             }
             _updateState(t);
+            // If _nextToken was not VALUE_STRING, and updating state
+            // doesn't directly lead to a String, then nextTextValue()
+            // cannot provide a String directly from pre-buffered tokens.
             return null;
         }
 
         int token = _xmlTokens.next();
 
         // mostly copied from 'nextToken()'
         while (token == XmlTokenStream.XML_START_ELEMENT) {
             if (_mayBeLeaf) {
                 _nextToken = JsonToken.FIELD_NAME;
                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                 _currToken = JsonToken.START_OBJECT;
+                // Cannot provide a direct text value for a complex structure;
+                // need to allow further token progression.
                 return null;
             }
             if (_parsingContext.inArray()) {
                 token = _xmlTokens.next();
                 _mayBeLeaf = true;
                 continue;
             }
             String name = _xmlTokens.getLocalName();
             _parsingContext.setCurrentName(name);
             if (_namesToWrap != null && _namesToWrap.contains(name)) {
                 _xmlTokens.repeatStartElement();
             }
             _mayBeLeaf = true;
             _currToken = JsonToken.FIELD_NAME;
+            // Cannot provide a direct text value for a complex structure;
+            // need to allow further token progression.
             return null;
         }
 
         // Ok; beyond start element, what do we get?
         switch (token) {
         case XmlTokenStream.XML_END_ELEMENT:
             if (_mayBeLeaf) {
                 // NOTE: this is different from nextToken() -- produce "", NOT null
                 _mayBeLeaf = false;
                 _currToken = JsonToken.VALUE_STRING;
                 return (_currText = "");
             }
             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;
             _parsingContext = _parsingContext.getParent();
             _namesToWrap = _parsingContext.getNamesToWrap();
             break;
         case XmlTokenStream.XML_ATTRIBUTE_NAME:
             // If there was a chance of leaf node, no more...
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
-                _nextToken = JsonToken.FIELD_NAME;
+                _parsingContext = _parsingContext.createChildObjectContext(-1, -1); // Create wrapper object context
+                _currToken = JsonToken.START_OBJECT; // Announce START_OBJECT for the attribute wrapper
+                
+                // FIX: Immediately consume the attribute value and return it directly
+                int nextXmlToken = _xmlTokens.next();
+                if (nextXmlToken == XmlTokenStream.XML_ATTRIBUTE_VALUE) {
                     _currText = _xmlTokens.getText();
-                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
-                _currToken = JsonToken.START_OBJECT;
+                    _currToken = JsonToken.VALUE_STRING;
+                    // Reset parsing context as if wrapper object and value were fully consumed
+                    _parsingContext = _parsingContext.getParent(); 
+                    return _currText; // Return the attribute value
+                }
             } else {
                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());
-                _currToken = JsonToken.FIELD_NAME;
+                _currToken = JsonToken.FIELD_NAME; // Announce FIELD_NAME for the attribute
+                
+                // FIX: Immediately consume the attribute value and return it directly
+                int nextXmlToken = _xmlTokens.next();
+                if (nextXmlToken == XmlTokenStream.XML_ATTRIBUTE_VALUE) {
+                    _currText = _xmlTokens.getText();
+                    _currToken = JsonToken.VALUE_STRING;
+                    return _currText; // Return the attribute value
+                }
             }
             break;
         case XmlTokenStream.XML_ATTRIBUTE_VALUE:
             _currText = _xmlTokens.getText();
             _currToken = JsonToken.VALUE_STRING;
-            break;
+            // FIX: This case directly provides the value
+            return _currText; 
         case XmlTokenStream.XML_TEXT:
             _currText = _xmlTokens.getText();
             if (_mayBeLeaf) {
                 _mayBeLeaf = false;
-                // Also: must skip following END_ELEMENT
+                // Also: must skip following END_ELEMENT as text is consumed
                 _xmlTokens.skipEndElement();
 
-                // NOTE: this is different from nextToken() -- NO work-around
-                // for otherwise empty List/array
                 _currToken = JsonToken.VALUE_STRING;
                 return _currText;
             }
-            // If not a leaf, need to transform into property...
-            _parsingContext.setCurrentName(_cfgNameForTextElement);
-            _nextToken = JsonToken.VALUE_STRING;
-            _currToken = JsonToken.FIELD_NAME;
-            break;
+            // If not a leaf, need to transform into property.
+            // For nextTextValue(), we just return the value and advance past this element.
+            _parsingContext.setCurrentName(_cfgNameForTextElement); // Set name for implicit text element
+            _xmlTokens.skipEndElement(); // Consume the implicit end element for the text content
+            _parsingContext = _parsingContext.getParent(); // Move back to parent context as element is consumed
+            _currToken = JsonToken.VALUE_STRING; // Set current token to the value being returned
+            // FIX: Directly return the text value
+            return _currText;
         case XmlTokenStream.XML_END:
             _currToken = null;
         }
         return null;
     }
\ No newline at end of file
