diff --git a/tmp/135f01d4-db33-46ec-ab39-322fa296b2c1_buggy.java b/tmp/d8966873-0a4f-4e30-9f44-a9f5ebc579ba_fixed.java
index e8705ac..152655d 100644
--- a/tmp/135f01d4-db33-46ec-ab39-322fa296b2c1_buggy.java
+++ b/tmp/d8966873-0a4f-4e30-9f44-a9f5ebc579ba_fixed.java
@@ -1,24 +1,34 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+      // Keep track of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // Unwrap cast nodes to find the actual function being called.
+      // For example, in `(/** @type {function()} */ (foo))()`, the function
+      // being called is 'foo', not the CAST node itself.
+      Node functionNode = first;
+      while (functionNode.isCast()) {
+        functionNode = functionNode.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // If the function being called is not a GETPROP (obj.method) or GETELEM (obj['method']),
+      // then it's considered a free call.
+      if (!NodeUtil.isGet(functionNode)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // A direct eval call is when 'eval' is the name node directly being called,
+      // not accessed via a property or through a comma expression.
+      if (functionNode.isName() &&
+          "eval".equals(functionNode.getString())) {
+        functionNode.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
