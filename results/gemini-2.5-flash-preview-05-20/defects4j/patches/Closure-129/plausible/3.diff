diff --git a/tmp/d49d4508-2593-45f4-8332-ac42bd9a3a72_buggy.java b/tmp/a9eb229f-64df-4155-be0e-744adc655777_fixed.java
index e8705ac..16c7380 100644
--- a/tmp/d49d4508-2593-45f4-8332-ac42bd9a3a72_buggy.java
+++ b/tmp/a9eb229f-64df-4155-be0e-744adc655777_fixed.java
@@ -1,24 +1,34 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+      // The first child of a CALL node is the function being called.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // We need to look through CAST nodes to find the actual function being called
+      // to correctly determine if it's a free call or a direct eval call.
+      // The comment "ignore cast nodes" implies this.
+      Node targetCall = first;
+      while (targetCall.isCast()) {
+        targetCall = targetCall.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // Keep track of the "this" context of a call. A call without an
+      // explicit "this" is a free call.
+      // A call is free if the target function is not a GET_PROP or GET_ELEM,
+      // meaning it's not a method call with an explicit 'this' context.
+      if (!NodeUtil.isGet(targetCall)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // A direct eval call is when 'eval' is called directly by its name.
+      if (targetCall.isName() &&
+          "eval".equals(targetCall.getString())) {
+        targetCall.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
