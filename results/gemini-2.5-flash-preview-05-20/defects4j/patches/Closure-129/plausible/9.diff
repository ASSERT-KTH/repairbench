diff --git a/tmp/59e37a79-cdc0-431b-b2db-ce46e4f17cf5_buggy.java b/tmp/66197b23-8b42-4f6f-bc0f-6f427f36ce62_fixed.java
index e8705ac..28b7ac2 100644
--- a/tmp/59e37a79-cdc0-431b-b2db-ce46e4f17cf5_buggy.java
+++ b/tmp/66197b23-8b42-4f6f-bc0f-6f427f36ce62_fixed.java
@@ -1,24 +1,37 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+      // Keep track of the "this" context of a call. A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
+      Node callTarget = first;
 
-      // ignore cast nodes.
+      // Unpack the call target if it's a CAST node. A CAST node does not
+      // change the "this" context of the call; the 'this' value is determined
+      // by the expression being cast.
+      if (first.isCast()) {
+        callTarget = first.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // A call is considered "free" if the expression representing the function
+      // being called is not a GETPROP (obj.method) or GETELEM (obj['method']).
+      // In such cases, the 'this' context is not explicitly bound to an object.
+      if (!NodeUtil.isGet(callTarget)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // This check also needs to consider the unwrapped callTarget.
+      if (callTarget.isName() &&
+          "eval".equals(callTarget.getString())) {
+        // The DIRECT_EVAL flag is applied to the 'eval' NAME node itself,
+        // not the CALL node, to distinguish it from indirect eval calls
+        // like (0, eval)().
+        callTarget.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
