diff --git a/tmp/c600a692-e3bc-4147-9906-f3614b074ab3_buggy.java b/tmp/f8f53804-bc78-439e-8ca1-dc857077703d_fixed.java
index e8705ac..e9d0969 100644
--- a/tmp/c600a692-e3bc-4147-9906-f3614b074ab3_buggy.java
+++ b/tmp/f8f53804-bc78-439e-8ca1-dc857077703d_fixed.java
@@ -1,24 +1,33 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
       // ignore cast nodes.
+      // If the immediate child of the CALL node is a CAST node, we need to
+      // look inside the CAST to determine the actual type of call.
+      // Otherwise, calls like `(/** @type {T} */ someObj.method)()` would
+      // be incorrectly treated as free calls because CAST is not a GET node.
+      if (first.isCast()) {
+        first = first.getFirstChild();
+      }
 
       if (!NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
+      // The 'first' node now correctly points to the actual expression
+      // that is being called, unwrapped from any cast.
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
