diff --git a/tmp/5294e14a-af87-45e4-8837-55e7a24dff40_buggy.java b/tmp/d8bcc49e-c389-4424-9a70-943f44b6355f_fixed.java
index e8705ac..d4a3cc9 100644
--- a/tmp/5294e14a-af87-45e4-8837-55e7a24dff40_buggy.java
+++ b/tmp/d8bcc49e-c389-4424-9a70-943f44b6355f_fixed.java
@@ -1,24 +1,35 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+      // The first child of a CALL node is the function expression.
+      Node functionExpression = n.getFirstChild();
+
+      // Look through cast nodes to find the actual function being called.
+      // For example, if the call is `(/** @type {function()} */ (foo))()`,
+      // `functionExpression` would be the CAST node. We need to look inside it
+      // to find `foo`.
+      Node callTarget = functionExpression;
+      while (callTarget.isCast()) {
+        callTarget = callTarget.getFirstChild();
+      }
+
+      // Keep track of the "this" context of a call. A call without an
       // explicit "this" is a free call.
-      Node first = n.getFirstChild();
-
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+      // A call is "free" if its target is not a GETPROP or GETELEM.
+      // For instance, `foo()` is free, but `obj.foo()` or `obj['foo']()` are not.
+      if (!NodeUtil.isGet(callTarget)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // A direct eval call is when the function being called is a simple `eval` name.
+      if (callTarget.isName() && "eval".equals(callTarget.getString())) {
+        // Mark the 'eval' name node itself as a direct eval call target.
+        callTarget.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
