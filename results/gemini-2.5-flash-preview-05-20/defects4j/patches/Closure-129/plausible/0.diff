diff --git a/tmp/a5476224-9cad-4ea6-84ea-00c7b0edd0a7_buggy.java b/tmp/3fe7b658-281c-4ad6-9201-05ddb27d7881_fixed.java
index e8705ac..24acafe 100644
--- a/tmp/a5476224-9cad-4ea6-84ea-00c7b0edd0a7_buggy.java
+++ b/tmp/3fe7b658-281c-4ad6-9201-05ddb27d7881_fixed.java
@@ -1,24 +1,30 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // If the function expression is a CAST node, we need to look at its child
+      // to determine if it's a GET (GETPROP or GETELEM), as the CAST node itself
+      // is not a GET node.
+      Node callee = first;
+      if (first.isCast()) {
+          callee = first.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      if (!NodeUtil.isGet(callee)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      if (callee.isName() &&
+          "eval".equals(callee.getString())) {
+        callee.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
