diff --git a/tmp/6de6ea15-c4cf-44d2-bc0d-691b1e9ac173_buggy.java b/tmp/560ea262-817d-46d6-9cab-b96ee78ab84a_fixed.java
index e8705ac..f9a50bd 100644
--- a/tmp/6de6ea15-c4cf-44d2-bc0d-691b1e9ac173_buggy.java
+++ b/tmp/560ea262-817d-46d6-9cab-b96ee78ab84a_fixed.java
@@ -1,24 +1,28 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+      // Keep track of the "this" context of a call. A call without an
       // explicit "this" is a free call.
+      // We need to look through cast nodes to find the actual function expression.
       Node first = n.getFirstChild();
+      Node functionExpression = NodeUtil.skipCasts(first);
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+      // A free call is when the function being called is not a GETPROP or GETELEM.
+      // For example, `foo()` is a free call, but `obj.foo()` or `obj['foo']()` are not.
+      // The `FREE_CALL` property should be set on the CALL node itself.
+      if (!NodeUtil.isGet(functionExpression)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // The `DIRECT_EVAL` property should be set on the NAME node 'eval'.
+      if (functionExpression.isName() &&
+          "eval".equals(functionExpression.getString())) {
+        functionExpression.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
