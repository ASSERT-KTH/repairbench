diff --git a/tmp/345e7670-0f8c-4a9d-95ff-290a43310af8_buggy.java b/tmp/84587528-9b15-4b7f-bb3e-5d0270b2ff6e_fixed.java
index e8705ac..653f36f 100644
--- a/tmp/345e7670-0f8c-4a9d-95ff-290a43310af8_buggy.java
+++ b/tmp/84587528-9b15-4b7f-bb3e-5d0270b2ff6e_fixed.java
@@ -1,24 +1,32 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // The "this" context depends on the actual function expression being called.
+      // We need to look through nodes that merely wrap this expression,
+      // such as CAST nodes, to determine if it's a GET_PROP or GETELEM.
+      Node contextDeterminingTarget = first;
+      while (contextDeterminingTarget.isCast()) {
+          contextDeterminingTarget = contextDetermisingTarget.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      if (!NodeUtil.isGet(contextDeterminingTarget)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
+      // The DIRECT_EVAL property is specific to the direct syntax of the call.
+      // For instance, a cast around 'eval' makes it an indirect call.
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
