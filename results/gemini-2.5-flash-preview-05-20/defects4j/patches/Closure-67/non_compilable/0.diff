diff --git a/tmp/36b32f9b-29f7-4736-9411-7e02fe53d098_buggy.java b/tmp/c2bd5523-35a8-43ca-bdb9-c8a6e7a95540_fixed.java
index 939f49b..26f7bdf 100644
--- a/tmp/36b32f9b-29f7-4736-9411-7e02fe53d098_buggy.java
+++ b/tmp/c2bd5523-35a8-43ca-bdb9-c8a6e7a95540_fixed.java
@@ -1,21 +1,23 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
+          && (n.isGetProp() || n.isGetElem()) // Allow both dot and bracket notation for the LHS
           ) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        Node objectOfLhs = n.getFirstChild();
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+        // Check if the object of the LHS is a property access itself (e.g., `e.prototype` in `e.prototype.method`)
+        if (objectOfLhs.isGetProp() || objectOfLhs.isGetElem()) {
+          // Get the property name node of the 'objectOfLhs' (e.g., the 'prototype' in `e.prototype`)
+          Node prototypePropertyNameNode = objectOfLhs.getLastChild();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+          // Check if this property name node is a STRING literal and its value is "prototype"
+          if (prototypePropertyNameNode != null && prototypePropertyNameNode.isString() &&
+              prototypePropertyNameNode.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
