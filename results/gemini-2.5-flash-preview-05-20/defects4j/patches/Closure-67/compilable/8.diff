diff --git a/tmp/b5f7f55b-4563-493c-a9e4-aeeb540047fc_buggy.java b/tmp/db9175fa-119c-47e0-be50-549abb9f892e_fixed.java
index 939f49b..a2c7bcb 100644
--- a/tmp/b5f7f55b-4563-493c-a9e4-aeeb540047fc_buggy.java
+++ b/tmp/db9175fa-119c-47e0-be50-549abb9f892e_fixed.java
@@ -1,21 +1,29 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
+          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)
           ) {
         // We want to exclude the assignment itself from the usage list
+        // n.getFirstChild() is the object part of the property access (e.g., 'e.prototype' in 'e.prototype.method' or 'e.prototype["alias"]')
+        // This object part must itself be a GETPROP node representing 'X.prototype'.
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
+          // If n.getFirstChild() is 'X.prototype' (a GETPROP node):
+          // Its first child is 'X'.
+          // Its second child is the string literal 'prototype'.
+          // We need to check if that second child is indeed 'prototype'.
+          // n.getFirstChild().getFirstChild() gives 'X'.
+          // .getNext() on 'X' gives the next sibling, which is the second child: 'prototype'.
           Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
+          if (child != null && child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
