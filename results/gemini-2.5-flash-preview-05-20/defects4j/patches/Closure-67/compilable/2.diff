diff --git a/tmp/406a0eee-5916-47c7-885d-cebe7d6b0535_buggy.java b/tmp/f315a3f9-6943-4b92-95da-d4576ece6bb6_fixed.java
index 939f49b..b9654a8 100644
--- a/tmp/406a0eee-5916-47c7-885d-cebe7d6b0535_buggy.java
+++ b/tmp/f315a3f9-6943-4b92-95da-d4576ece6bb6_fixed.java
@@ -1,21 +1,28 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
+          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)
           ) {
         // We want to exclude the assignment itself from the usage list
+        // For an expression like 'obj.prototype.method = ...' or 'obj.prototype['method'] = ...'
+        // 'n' would be 'obj.prototype.method' or 'obj.prototype['method']'.
+        // 'n.getFirstChild()' would be 'obj.prototype'.
+        // We check if 'obj.prototype' itself is a GETPROP, which it should be.
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
+          // If n.getFirstChild() is 'obj.prototype' (which is a GETPROP node),
+          // then n.getFirstChild().getFirstChild() is 'obj'.
+          // And n.getFirstChild().getFirstChild().getNext() is the property string 'prototype'.
           Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
+          if (child != null && child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
