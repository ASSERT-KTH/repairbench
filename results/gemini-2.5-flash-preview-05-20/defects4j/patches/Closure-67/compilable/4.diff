diff --git a/tmp/65b0dd23-474c-4312-921c-6eb152a6073a_buggy.java b/tmp/47637f32-a645-4428-b5df-2f6cbbf65587_fixed.java
index 939f49b..3cfc8f1 100644
--- a/tmp/65b0dd23-474c-4312-921c-6eb152a6073a_buggy.java
+++ b/tmp/47637f32-a645-4428-b5df-2f6cbbf65587_fixed.java
@@ -1,21 +1,29 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
+          // The LHS must be a GETPROP (for obj.prototype.prop) or GETELEM (for obj.prototype['prop']).
+          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)
           ) {
         // We want to exclude the assignment itself from the usage list
+        // `n` represents the LHS, e.g., `e.prototype.method1` or `e.prototype['alias1']`.
+        // `n.getFirstChild()` will be the object on which the property is accessed, e.g., `e.prototype`.
+        // We need to check if this object is itself a GETPROP, specifically `X.prototype`.
         boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+            n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
+          // If `n.getFirstChild()` is `e.prototype` (a GETPROP node),
+          // its first child is `e` (the base object), and its next sibling
+          // (which is the property name) must be the string "prototype".
           Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
+          // Check if the property name of `n.getFirstChild()` is "prototype".
+          if (child != null && child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
