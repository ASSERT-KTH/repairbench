diff --git a/tmp/ab0a7070-7e54-46ac-983e-2fb9c98aaf3c_buggy.java b/tmp/6ecb4c44-23ce-4474-8b55-7a1bafeb90ed_fixed.java
index 939f49b..4b5371b 100644
--- a/tmp/ab0a7070-7e54-46ac-983e-2fb9c98aaf3c_buggy.java
+++ b/tmp/6ecb4c44-23ce-4474-8b55-7a1bafeb90ed_fixed.java
@@ -1,21 +1,28 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
+          && NodeUtil.isGet(n) // Fix: Allow both GETPROP (dot access) and GETELEM (bracket access)
           ) {
         // We want to exclude the assignment itself from the usage list
+        // `n` is the LHS of the assignment, e.g., `e.prototype.method1` or `e.prototype['alias1']`.
+        // `n.getFirstChild()` is the object on which the property is accessed, e.g., `e.prototype`.
+        // We are checking if this object itself is a GETPROP (like `e.prototype`).
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
+          // If `n` is `obj.prop` or `obj['prop']`, then `n.getFirstChild()` is `obj`.
+          // If `obj` is `someClass.prototype`, then `n.getFirstChild()` is a GETPROP node representing `someClass.prototype`.
+          // `n.getFirstChild().getFirstChild()` would be `someClass`.
+          // `n.getFirstChild().getFirstChild().getNext()` would be the `STRING` node representing `"prototype"`.
           Node child = n.getFirstChild().getFirstChild().getNext();
 
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
