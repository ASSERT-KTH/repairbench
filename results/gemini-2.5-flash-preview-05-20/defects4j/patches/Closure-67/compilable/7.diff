diff --git a/tmp/280b0868-6278-4c4e-bcb2-863113834dbd_buggy.java b/tmp/bf52811c-fd43-4308-936f-8bc0b0701292_fixed.java
index 939f49b..9e150c4 100644
--- a/tmp/280b0868-6278-4c4e-bcb2-863113834dbd_buggy.java
+++ b/tmp/bf52811c-fd43-4308-936f-8bc0b0701292_fixed.java
@@ -1,21 +1,30 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
+      // Check if the LHS is a property access (either GETPROP for dot notation or GETELEM for bracket notation)
+      // and if it's a simple assignment LHS.
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
+          && NodeUtil.isGet(n)
           ) {
         // We want to exclude the assignment itself from the usage list
+        // This checks if the object on which the property is assigned is itself a GETPROP
+        // (e.g., in `obj.prototype.method`, `obj.prototype` is the GETPROP).
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
+          // If it's a chained property like `obj.prototype.method` or `obj.prototype['method']`,
+          // we need to verify that the middle part is indeed "prototype".
+          // n.getFirstChild() is the 'obj.prototype' node.
+          // n.getFirstChild().getFirstChild() is the 'obj' node.
+          // n.getFirstChild().getFirstChild().getNext() is the property name 'prototype'.
           Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
+          if (child != null && child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
