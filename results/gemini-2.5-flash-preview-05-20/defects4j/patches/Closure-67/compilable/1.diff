diff --git a/tmp/edb4af0b-5dad-4a2c-a2e5-8627afa4888e_buggy.java b/tmp/e2643e9a-eff0-4c18-87b7-d3afe360e684_fixed.java
index 939f49b..8de6d06 100644
--- a/tmp/edb4af0b-5dad-4a2c-a2e5-8627afa4888e_buggy.java
+++ b/tmp/e2643e9a-eff0-4c18-87b7-d3afe360e684_fixed.java
@@ -1,21 +1,28 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
+      // Ensure 'n' is not null, is a valid LHS for an assignment, and is either a GETPROP (e.g., a.b)
+      // or GETELEM (e.g., a[b]).
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+        // The target of the assignment must be a property access that looks like 'object.prototype.propertyName'
+        // or 'object.prototype['propertyName']'.
+        // This means the 'object' part of the access (n.getFirstChild()) must itself represent
+        // a property access to 'prototype'.
+        Node prototypeAccessNode = n.getFirstChild(); // This represents 'object.prototype' or similar
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // Check if prototypeAccessNode is a GETPROP (e.g., 'object.prototype')
+        // We are looking for the 'prototype' part of 'object.prototype'.
+        if (prototypeAccessNode != null && prototypeAccessNode.getType() == Token.GETPROP) {
+          // For a GETPROP node, its last child is the property name.
+          // So, prototypeAccessNode.getLastChild() should be the 'prototype' string.
+          Node propertyNameNode = prototypeAccessNode.getLastChild();
+
+          if (propertyNameNode != null && propertyNameNode.getType() == Token.STRING &&
+              propertyNameNode.getString().equals("prototype")) {
             return true;
           }
         }
       }
-
       return false;
     }
\ No newline at end of file
