diff --git a/tmp/d5db8ed7-faa9-40ea-8d32-5442ee3c0f24_buggy.java b/tmp/3fb0d43c-3922-4f5d-bca6-e04940fefb7e_fixed.java
index 939f49b..a49764d 100644
--- a/tmp/d5db8ed7-faa9-40ea-8d32-5442ee3c0f24_buggy.java
+++ b/tmp/3fb0d43c-3922-4f5d-bca6-e04940fefb7e_fixed.java
@@ -1,21 +1,28 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
+          && NodeUtil.isGet(n) // Fix: Allow both GETPROP (dot access) and GETELEM (bracket access)
           ) {
         // We want to exclude the assignment itself from the usage list
+        // This 'isChainedProperty' check determines if the object being
+        // accessed (n.getFirstChild()) is itself a GETPROP, which is
+        // typical for 'X.prototype'.
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
+          // If 'n' is 'X.prototype.foo' or 'X.prototype["foo"]':
+          // n.getFirstChild() is the 'X.prototype' part (a GETPROP node).
+          // n.getFirstChild().getFirstChild() is 'X'.
+          // n.getFirstChild().getFirstChild().getNext() is the 'prototype' STRING node.
           Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
+          if (child != null && child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
