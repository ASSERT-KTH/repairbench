diff --git a/tmp/a235bc20-b858-40d3-aa5e-265a9ae385f0_buggy.java b/tmp/3b6d9906-feb6-4d35-ad30-fd6f740cb21f_fixed.java
index 939f49b..1f76cba 100644
--- a/tmp/a235bc20-b858-40d3-aa5e-265a9ae385f0_buggy.java
+++ b/tmp/3b6d9906-feb6-4d35-ad30-fd6f740cb21f_fixed.java
@@ -1,21 +1,26 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
+          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)
           ) {
         // We want to exclude the assignment itself from the usage list
+        // This checks if the object part of the property access is itself a GETPROP,
+        // specifically looking for `object.prototype`
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
+          // n.getFirstChild() is the 'object.prototype' GETPROP node.
+          // Its first child is 'object' (e.g., 'e').
+          // Its second child is the property name, which must be 'prototype'.
           Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
+          if (child != null && child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
