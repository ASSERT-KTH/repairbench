diff --git a/tmp/1b31b8c7-0e18-4b33-a3c0-fef5d26e2310_buggy.java b/tmp/09747edf-7dd7-499b-869b-74af5eb572f8_fixed.java
index 3b9a3c0..6a153c6 100644
--- a/tmp/1b31b8c7-0e18-4b33-a3c0-fef5d26e2310_buggy.java
+++ b/tmp/09747edf-7dd7-499b-869b-74af5eb572f8_fixed.java
@@ -1,71 +1,90 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // To work-around some tar implementations that insert a leading NUL
+        // this method returns 0 if it detects a leading NUL since Commons Compress 1.4.
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Must have trailing NUL or space
         byte trailer;
         trailer = buffer[end-1];
         if (trailer == 0 || trailer == ' '){
             end--;
         } else {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
         // May have additional NULs or spaces
         trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' '){
             end--;
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
+
+            // If the current byte is NUL (0x00), and all remaining bytes in the *parsed* segment are NULs
+            // (meaning the entire remaining number is effectively 0), then we can return 0L.
+            // This caters to fields like "   \0\0\0\0\0 "
+            if (currentByte == 0) {
+                boolean allNulsFromHere = true;
+                for (int i = start; i < end; i++) {
+                    if (buffer[i] != 0) {
+                        allNulsFromHere = false;
+                        break;
+                    }
+                }
+                if (allNulsFromHere) {
+                    return 0L;
+                }
+            }
+
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
