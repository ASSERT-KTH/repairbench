diff --git a/tmp/8bcc2200-0ce7-4244-b0b9-1f5449756234_buggy.java b/tmp/3e2529e3-50f1-426c-8199-eb4cdca9b6b8_fixed.java
index 3b9a3c0..33ac101 100644
--- a/tmp/8bcc2200-0ce7-4244-b0b9-1f5449756234_buggy.java
+++ b/tmp/3e2529e3-50f1-426c-8199-eb4cdca9b6b8_fixed.java
@@ -1,71 +1,86 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
+        // Handle leading NUL byte (Commons Compress 1.4 workaround)
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
+        // The *last* character in the original range must be a NUL or space.
+        // This is a strict requirement from the Javadoc ("The buffer must contain a trailing space or NUL").
+        // 'end' is (offset + length), so 'end - 1' is the last index.
+        byte lastChar = buffer[end - 1];
+        if (lastChar == 0 || lastChar == ' ') {
+            // This character is a valid trailer, so reduce the effective end.
             end--;
         } else {
+            // The last character is NOT a NUL or space, which violates the contract.
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                    exceptionMessage(buffer, offset, length, end-1, lastChar));
         }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+
+        // Now, trim any additional trailing NULs or spaces.
+        // This loop continues as long as 'end' is still greater than 'start'
+        // and the character at (end - 1) is a NUL or space.
+        while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
             end--;
         }
 
+        // At this point:
+        // 'start' points to the first character of the octal string (after leading spaces).
+        // 'end' points to the position *after* the last character of the octal string (after trimming all trailing NULs/spaces).
+        // The characters to parse are from buffer[start] to buffer[end-1].
+
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
+            // The bytes must be valid octal digits ('0' through '7').
+            // NULs or spaces that might have been part of internal padding
+            // should have been trimmed by the 'while (end > start && ...)' loop above.
+            // If they are encountered here, they are truly invalid.
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
