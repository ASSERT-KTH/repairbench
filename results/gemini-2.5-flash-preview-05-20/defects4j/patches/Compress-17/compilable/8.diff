diff --git a/tmp/755f99d9-5273-4fd9-9cae-6bd52f9d9402_buggy.java b/tmp/e91e45e1-02a2-449d-a9bf-6a001462f473_fixed.java
index 3b9a3c0..d77dd7e 100644
--- a/tmp/755f99d9-5273-4fd9-9cae-6bd52f9d9402_buggy.java
+++ b/tmp/e91e45e1-02a2-449d-a9bf-6a001462f473_fixed.java
@@ -1,71 +1,90 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long result = 0;
         int end = offset + length;
         int start = offset;
 
         if (length < 2) {
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
-        if (buffer[start] == 0) {
+        if (buffer[start] == 0) { // Commons Compress 1.4 workaround for leading NUL
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end) {
             if (buffer[start] == ' ') {
                 start++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+        // Parse octal digits until a non-digit character (which should be a terminator) is encountered
+        int current = start;
+        while (current < end) {
+            final byte currentByte = buffer[current];
+            if (currentByte == 0 || currentByte == ' ') {
+                break; // Found a terminator (NUL or space)
             }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        }
-
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
+                // Not a digit and not a terminator
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, current, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            current++;
+        }
+
+        // After parsing digits, 'current' points to the first byte *after* the octal number.
+        // This byte must be a NUL or space (the required trailing terminator).
+        // If 'current' reached 'end', it means the number consumed the entire buffer range
+        // without a terminator. This is an error.
+        if (current == end) {
+            // No trailing terminator found within the specified length.
+            // The last parsed byte was a digit, but it was expected to be followed by a terminator.
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, current - 1, buffer[current - 1]));
+        }
+
+        // The byte at 'current' must be the required trailing space or NUL.
+        final byte firstTerminator = buffer[current];
+        if (firstTerminator != 0 && firstTerminator != ' ') {
+            // It was not an octal digit (loop broke), but also not a NUL/space terminator. Invalid.
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, current, firstTerminator));
+        }
+
+        // All subsequent bytes (from current + 1 up to original end - 1) must also be NULs or spaces.
+        // This handles cases where tar fields are padded with multiple NULs after the value and its terminator.
+        for (int i = current + 1; i < end; i++) {
+            final byte trailingByte = buffer[i];
+            if (trailingByte != 0 && trailingByte != ' ') {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, i, trailingByte));
+            }
         }
 
         return result;
     }
\ No newline at end of file
