diff --git a/tmp/9b232bed-a018-43d0-97ec-4e631c5760e7_buggy.java b/tmp/5effa9fa-4d3a-4c84-b6c6-9097a0ccb996_fixed.java
index a6f008f..de6bbd1 100644
--- a/tmp/9b232bed-a018-43d0-97ec-4e631c5760e7_buggy.java
+++ b/tmp/5effa9fa-4d3a-4c84-b6c6-9097a0ccb996_fixed.java
@@ -1,11 +1,22 @@
     /**
      * Method that can be called on backends that support passing opaque datatypes of
      * non-JSON formats
      *
      * @since 2.8
      */
     public void writeEmbeddedObject(Object object) throws IOException {
         // 01-Sep-2016, tatu: As per [core#318], handle small number of cases
-        throw new JsonGenerationException("No native support for writing embedded objects",
-                this);
+        if (object == null) {
+            writeNull();
+        } else if (object instanceof byte[]) {
+            // For byte[] objects, we can use the existing writeBinary method
+            // which typically handles Base64 encoding for JSON.
+            writeBinary((byte[]) object);
+        } else {
+            // For other types, we still throw an exception as there's no generic
+            // way to serialize arbitrary objects as "embedded" in JSON.
+            // The exception message can be slightly more informative.
+            throw new JsonGenerationException("No native support for writing embedded objects of type "
+                    + object.getClass().getName(), this);
+        }
     }
\ No newline at end of file
