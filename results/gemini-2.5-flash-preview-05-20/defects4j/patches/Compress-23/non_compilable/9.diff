diff --git a/tmp/42a8b841-3f60-421a-b5be-e32cecaa8382_buggy.java b/tmp/36ef45df-67c9-4a2b-a06a-d613c872f6c3_fixed.java
index 0e18f59..7f85255 100644
--- a/tmp/42a8b841-3f60-421a-b5be-e32cecaa8382_buggy.java
+++ b/tmp/36ef45df-67c9-4a2b-a06a-d613c872f6c3_fixed.java
@@ -1,13 +1,49 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
+            
+            // Parse the dictionary size from coder.properties bytes 1-4.
+            // These bytes represent a 4-byte little-endian unsigned integer.
+            long dictSizeLong = coder.properties[1] & 0xFFL;
             for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+                dictSizeLong |= ((long) (coder.properties[i + 1] & 0xFFL) << (8 * i));
             }
-            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
+
+            // org.tukaani.xz.LZMAInputStream has specific requirements for dictionary size:
+            // 1. It must be an integer (up to 128 MiB).
+            // 2. It must be between LZMAInputStream.DICT_SIZE_MIN (2 MiB) and LZMAInputStream.DICT_SIZE_MAX (128 MiB) inclusive.
+            // 3. It must be a power of two.
+
+            // First, check if the raw dictionary size from the archive is too large for this LZMA implementation.
+            // The actual limit for tukaani.xz.LZMAInputStream is 128 MiB.
+            if (dictSizeLong > LZMAInputStream.DICT_SIZE_MAX) {
+                throw new IOException("Dictionary larger than "
+                                      + (LZMAInputStream.DICT_SIZE_MAX / (1024 * 1024))
+                                      + " MiB maximum size allowed by LZMAInputStream: "
+                                      + dictSizeLong + " bytes");
             }
-            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
+            
+            int dictSize = (int) dictSizeLong;
+
+            // Ensure dictionary size is at least the minimum required by LZMAInputStream.
+            // If the parsed dictSize is smaller than the minimum, round it up to the minimum.
+            if (dictSize < LZMAInputStream.DICT_SIZE_MIN) {
+                dictSize = LZMAInputStream.DICT_SIZE_MIN;
+            }
+
+            // Round up dictSize to the next power of two if it's not already one.
+            // This is crucial for satisfying the LZMAInputStream constructor's requirement.
+            // If dictSize is already a power of two, (dictSize & (dictSize - 1)) will be 0.
+            // If it's not a power of two, Integer.highestOneBit(dictSize) << 1 gives the next power of two.
+            if ((dictSize & (dictSize - 1)) != 0) { // Check if not a power of two
+                dictSize = Integer.highestOneBit(dictSize) << 1;
+            }
+
+            // At this point, dictSize should be a power of two and within the valid range
+            // (2 MiB to 128 MiB), due to the initial check against DICT_SIZE_MAX and the
+            // rounding/min fallback. No further checks are strictly necessary for the
+            // tukaani.xz.LZMAInputStream constructor parameters.
+
+            return new LZMAInputStream(in, -1, propsByte, dictSize);
         }
\ No newline at end of file
