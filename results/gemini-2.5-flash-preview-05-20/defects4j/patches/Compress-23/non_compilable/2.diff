diff --git a/tmp/4c079ed1-a524-4fb5-8353-cad36fb34d68_buggy.java b/tmp/954791e0-8880-4157-8a6e-5bbe57aa61be_fixed.java
index 0e18f59..b2cb322 100644
--- a/tmp/4c079ed1-a524-4fb5-8353-cad36fb34d68_buggy.java
+++ b/tmp/954791e0-8880-4157-8a6e-5bbe57aa61be_fixed.java
@@ -1,13 +1,8 @@
-        @Override
-        InputStream decode(final InputStream in, final Coder coder,
-                byte[] password) throws IOException {
-            byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
+            long dictSize = coder.properties[1] & 0xFFL; // Initialize with the first byte, ensuring it's treated as unsigned and promoted to long
             for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
-            }
-            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
-            }
-            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
+                // For subsequent bytes, mask with 0xFF to treat as unsigned, then shift and OR.
+                // The result of `(coder.properties[i + 1] & 0xFF)` is an int.
+                // Shifting an int (e.g., `<< (8 * i)`) results in an int.
+                // When OR-ed with a long (`dictSize |= ...`), the int is implicitly promoted to long.
+                dictSize |= (coder.properties[i + 1] & 0xFFL) << (8 * i);
             }
\ No newline at end of file
