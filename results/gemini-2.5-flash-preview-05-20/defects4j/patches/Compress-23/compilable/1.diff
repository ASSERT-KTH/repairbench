diff --git a/tmp/67839070-c75f-4748-99e0-5ff7d01fad29_buggy.java b/tmp/3beb4873-aa81-4503-b3c7-0121f09c794b_fixed.java
index 0e18f59..48f338e 100644
--- a/tmp/67839070-c75f-4748-99e0-5ff7d01fad29_buggy.java
+++ b/tmp/3beb4873-aa81-4503-b3c7-0121f09c794b_fixed.java
@@ -1,13 +1,30 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
+            // The dictionary size is a 4-byte little-endian unsigned integer
+            // stored in coder.properties[1] through coder.properties[4].
+            // The original code has a bug where it performs sign-extension when
+            // converting bytes to long and shifting, leading to incorrect dictionary sizes
+            // (often negative values when interpreted as int), which then causes
+            // UnsupportedOptionsException from LZMAInputStream for values that are
+            // effectively outside its supported range (e.g., less than DICT_SIZE_MIN).
+
+            // Correctly read the 4 bytes as an unsigned 32-bit integer into a long.
+            long dictSize = coder.properties[1] & 0xFF; // LSB
             for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+                // Mask with 0xFF to treat the byte as an unsigned value (0-255),
+                // then cast to long before shifting to prevent sign extension during shift
+                // and ensure the result of the shift is also a long.
+                dictSize |= ((long)(coder.properties[i + 1] & 0xFF)) << (8 * i);
             }
+
+            // After correcting the calculation, if the dictionary size from the archive
+            // is indeed greater than LZMAInputStream.DICT_SIZE_MAX (approx. 2GiB),
+            // this check will now correctly trigger the IOException,
+            // which is the desired behavior for COMPRESS-256.
             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
                 throw new IOException("Dictionary larger than 4GiB maximum size");
             }
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
