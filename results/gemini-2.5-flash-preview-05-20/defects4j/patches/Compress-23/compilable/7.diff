diff --git a/tmp/f3b4b17e-8202-4888-89d3-e1ad5250499e_buggy.java b/tmp/42372e01-1f6a-46b3-bc16-1472c1908b19_fixed.java
index 0e18f59..f394cf6 100644
--- a/tmp/f3b4b17e-8202-4888-89d3-e1ad5250499e_buggy.java
+++ b/tmp/42372e01-1f6a-46b3-bc16-1472c1908b19_fixed.java
@@ -1,13 +1,31 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
-            for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+            // The dictionary size is stored as a 4-byte little-endian unsigned integer
+            // starting from coder.properties[1].
+            // It needs to be read into a long to prevent overflow and handled correctly
+            // by masking bytes to treat them as unsigned before shifting.
+            long dictSize = 0;
+            for (int i = 0; i < 4; i++) {
+                // Read each byte, mask with 0xFF to treat it as an unsigned value,
+                // then cast to long before shifting to prevent sign extension issues.
+                dictSize |= ((long) (coder.properties[i + 1] & 0xFF)) << (8 * i);
             }
+
+            // Check if the calculated dictionary size exceeds the maximum supported by LZMAInputStream.
+            // LZMAInputStream.DICT_SIZE_MAX is approximately 2GiB (2147483632).
+            // The original error message "Dictionary larger than 4GiB maximum size"
+            // suggests a conceptual limit that might be different from the actual
+            // implementation limit of the LZMAInputStream used.
+            // This check ensures that if a dictionary size is valid in the 7z format
+            // but too large for the underlying LZMA decoder, an IOException is thrown.
             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
                 throw new IOException("Dictionary larger than 4GiB maximum size");
             }
+            
+            // Pass the calculated dictionary size (which is now correctly parsed as a positive long
+            // and guaranteed to be within the int range accepted by LZMAInputStream)
+            // to the LZMAInputStream constructor.
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
