diff --git a/tmp/107676e0-ad7e-462f-9ad6-6e008eb887c1_buggy.java b/tmp/95d531df-f4df-42af-8b92-129912019834_fixed.java
index 0e18f59..5e7f379 100644
--- a/tmp/107676e0-ad7e-462f-9ad6-6e008eb887c1_buggy.java
+++ b/tmp/95d531df-f4df-42af-8b92-129912019834_fixed.java
@@ -1,13 +1,20 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
+            // dictSize is a 4-byte little-endian value
+            // Ensure bytes are treated as unsigned before shifting and combining
+            long dictSize = coder.properties[1] & 0xFFL; // Start with the first byte, ensuring it's unsigned and a long
             for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+                dictSize |= ((long) (coder.properties[i + 1] & 0xFF) << (8 * i));
             }
             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
+                // LZMAInputStream.DICT_SIZE_MAX from org.tukaani.xz is 1 << 30 (1GiB).
+                // The error message here refers to 4GiB, which is potentially the format's
+                // theoretical maximum or an outdated comment, but this check ensures
+                // the commons-compress layer throws an IOException if the dictionary
+                // size exceeds the underlying implementation's limit.
                 throw new IOException("Dictionary larger than 4GiB maximum size");
             }
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
