diff --git a/tmp/f06acc14-d837-4b1d-8465-68ff4bebab32_buggy.java b/tmp/b5b90e28-4936-4e62-b285-405d0f044aee_fixed.java
index 0e18f59..071bf38 100644
--- a/tmp/f06acc14-d837-4b1d-8465-68ff4bebab32_buggy.java
+++ b/tmp/b5b90e28-4936-4e62-b285-405d0f044aee_fixed.java
@@ -1,13 +1,27 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
+            // The dictionary size is a 4-byte little-endian integer starting at coder.properties[1].
+            // Bytes must be treated as unsigned when combining them to avoid sign-extension issues.
+            // Use 0xFFL to ensure the initial byte is treated as an unsigned long.
+            long dictSize = coder.properties[1] & 0xFFL;
             for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+                // For subsequent bytes, mask with 0xFF to treat as unsigned, then cast to long before shifting
+                // to prevent potential sign-extension when shifting a negative byte value.
+                dictSize |= (long) (coder.properties[i + 1] & 0xFF) << (8 * i);
             }
+
+            // LZMAInputStream.DICT_SIZE_MAX is typically Integer.MAX_VALUE (2GiB - 1).
+            // If the correctly calculated dictSize exceeds this, throw an IOException.
+            // The original message "Dictionary larger than 4GiB maximum size" might refer
+            // to a different LZMA variant or an architectural limit, but the check
+            // against LZMAInputStream.DICT_SIZE_MAX is correct for this specific implementation.
             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
                 throw new IOException("Dictionary larger than 4GiB maximum size");
             }
+            // After the corrections, dictSize is guaranteed to be a positive value
+            // within the range of Integer.MAX_VALUE (if it passed the check),
+            // making the cast to int safe for the LZMAInputStream constructor.
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
