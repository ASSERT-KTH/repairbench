diff --git a/tmp/98122f76-bd5d-4222-8200-cc177430a527_buggy.java b/tmp/cc2f545b-848b-4c1b-9238-c5a4e8c01add_fixed.java
index 0e18f59..a6a6e61 100644
--- a/tmp/98122f76-bd5d-4222-8200-cc177430a527_buggy.java
+++ b/tmp/cc2f545b-848b-4c1b-9238-c5a4e8c01add_fixed.java
@@ -1,13 +1,36 @@
         @Override
         InputStream decode(final InputStream in, final Coder coder,
                 byte[] password) throws IOException {
             byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
+            // The dictionary size for LZMA/LZMA2 is a 4-byte little-endian unsigned integer.
+            // It is stored in coder.properties[1] through coder.properties[4].
+            // To correctly reconstruct this value into a long, each byte must be treated as unsigned
+            // and then properly shifted and OR-ed. Failing to mask with 0xFF (or 0xFFL) before
+            // shifting can lead to sign extension issues, especially if the byte value is "negative"
+            // (i.e., its most significant bit is set, like 0xFF), corrupting the final dictSize.
+
+            // Initialize dictSize with the first byte (LSB), ensuring it's treated as unsigned long.
+            long dictSize = (coder.properties[1] & 0xFFL);
+
+            // Iterate through the remaining 3 bytes (coder.properties[2] to coder.properties[4]).
             for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+                // 1. Mask the byte with 0xFF to get its unsigned value (0-255).
+                // 2. Cast the result to a long *before* shifting. This is crucial to prevent
+                //    intermediate int overflow or sign extension issues during the shift operation
+                //    (e.g., (byte)0xFF << 24 would result in 0xFF000000 which is a negative int).
+                // 3. Shift the long value by the appropriate number of bits (8*i).
+                // 4. OR the shifted value with the accumulating dictSize.
+                dictSize |= ((long) (coder.properties[i + 1] & 0xFF) << (8 * i));
             }
+
+            // Check if the calculated dictionary size exceeds the maximum allowed by Apache Commons Compress.
+            // LZMAInputStream.DICT_SIZE_MAX is 1GB (1 << 30).
             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
-                throw new IOException("Dictionary larger than 4GiB maximum size");
+                throw new IOException("Dictionary larger than " + (LZMAInputStream.DICT_SIZE_MAX / (1024L * 1024L * 1024L)) + "GiB maximum size");
             }
+
+            // The underlying tukaani.xz.LZMAInputStream constructor expects an int for dictionarySize.
+            // Since LZMAInputStream.DICT_SIZE_MAX (1GB) is less than Integer.MAX_VALUE (approx 2GB),
+            // any dictSize that passes the above check will safely fit into an int.
             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
\ No newline at end of file
