diff --git a/tmp/b26978ba-8e5c-4795-8e28-8d621efa1c3b_buggy.java b/tmp/2591710b-b665-4b6a-9add-d33d432e40b4_fixed.java
index 822447c..6f4304d 100644
--- a/tmp/b26978ba-8e5c-4795-8e28-8d621efa1c3b_buggy.java
+++ b/tmp/2591710b-b665-4b6a-9add-d33d432e40b4_fixed.java
@@ -1,37 +1,56 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) { // Loop control moved to inside the loop
+            // Get the full Unicode code point, handling surrogate pairs
+            int codePoint = str.codePointAt(i); 
+
+            // HTML 4.01 specification generally recommends escaping supplementary characters (code points > 0xFFFF)
+            // as numeric entities, as there are no named entities for them.
+            if (codePoint > 0xFFFF) { // Handle supplementary characters (e.g., U+1D362)
+                writer.write("&#");
+                writer.write(Integer.toString(codePoint, 10));
+                writer.write(';');
+            } else { // Handle Basic Multilingual Plane (BMP) characters (0x0000 to 0xFFFF)
+                char c = (char) codePoint; // For BMP characters, the codePoint fits into a char
+                String entityName = this.entityName(c); // Check for named HTML entities (e.g., &amp;, &lt;)
+
                 if (entityName == null) {
+                    // No named entity found. Check if it's a character that should be numerically escaped.
+                    // This typically includes characters outside the ASCII range (0-127) that don't have named entities.
                     if (c > 0x7F) { 
                         writer.write("&#");
                         writer.write(Integer.toString(c, 10));
                         writer.write(';');
                     } else {
+                        // ASCII characters (0-127) without named entities are written directly (e.g., 'A', '1', space)
                         writer.write(c);
                     }
                 } else {
+                    // Found a named entity for the character
                     writer.write('&');
                     writer.write(entityName);
                     writer.write(';');
                 }
             }
+            // Advance the index by the number of Java characters (UTF-16 code units) consumed by the code point.
+            // This will be 1 for BMP characters and 2 for supplementary characters.
+            i += Character.charCount(codePoint);
+        }
     }
\ No newline at end of file
