diff --git a/tmp/7d2bc227-2631-403a-a0bc-da9a59c2069e_buggy.java b/tmp/e9ade9e6-9e1c-4635-b16d-2f662eb8b9f4_fixed.java
index 822447c..eee8161 100644
--- a/tmp/7d2bc227-2631-403a-a0bc-da9a59c2069e_buggy.java
+++ b/tmp/e9ade9e6-9e1c-4635-b16d-2f662eb8b9f4_fixed.java
@@ -1,37 +1,64 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
+        // Iterate through the string by code points to correctly handle
+        // supplementary characters (those outside the Basic Multilingual Plane, U+0000 to U+FFFF).
+        // Java's char is a 16-bit UTF-16 code unit, so supplementary characters are represented by two chars (a surrogate pair).
+        // The original code iterated by char, leading to incorrect escaping of surrogate pairs as two separate entities.
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
-            if (entityName == null) {
-                if (c > 0x7F) {
+        for (int i = 0; i < len; ) { // 'i' is incremented inside the loop based on the code point size
+            int codePoint = str.codePointAt(i); // Get the full Unicode code point at the current index
+
+            String entityNameForCodePoint = null;
+            // Check if the code point is within the Basic Multilingual Plane (BMP).
+            // The `entityName(char)` method is likely designed to map only BMP characters
+            // (those representable by a single char) to named HTML entities.
+            // Supplementary characters typically do not have named HTML entities.
+            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+                entityNameForCodePoint = this.entityName((char) codePoint);
+            }
+
+            if (entityNameForCodePoint == null) {
+                // No named HTML entity found for this code point, or it's a supplementary character.
+                // In such cases, determine if numerical escaping is required.
+                // The condition `c > 0x7F` from the original code effectively meant "not ASCII".
+                // This logic should be applied to the full code point.
+                // All non-ASCII characters (including supplementary characters) should be numerically escaped
+                // if they don't have a named entity.
+                if (codePoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codePoint, 10)); // Write the decimal value of the code point
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // It's an ASCII character (codePoint <= 0x7F) and it does not have a named entity.
+                    // Write the character directly.
+                    // This covers basic ASCII characters like 'A', '1', space, etc., that don't need escaping.
+                    writer.write(codePoint); 
                 }
             } else {
+                // A named HTML entity was found for this code point (must be a BMP character).
                 writer.write('&');
-                writer.write(entityName);
+                writer.write(entityNameForCodePoint);
                 writer.write(';');
             }
+
+            // Advance the index 'i' by the number of Java 'char's that make up the current code point.
+            // This is 1 for BMP characters and 2 for supplementary characters.
+            i += Character.charCount(codePoint);
         }
     }
\ No newline at end of file
