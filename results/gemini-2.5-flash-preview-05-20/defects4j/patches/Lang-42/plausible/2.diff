diff --git a/tmp/7b5fcac7-8da0-42e2-be17-9b21d2073827_buggy.java b/tmp/838e481e-1545-44cf-84ea-7aae7d120583_fixed.java
index 822447c..1284e42 100644
--- a/tmp/7b5fcac7-8da0-42e2-be17-9b21d2073827_buggy.java
+++ b/tmp/838e481e-1545-44cf-84ea-7aae7d120583_fixed.java
@@ -1,37 +1,74 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
+        // The original implementation iterates over 'char's, which are 16-bit UTF-16 code units.
+        // Supplementary characters (code points > U+FFFF) are represented by a pair of 'char's (a surrogate pair).
+        // The original code would treat each 'char' of a surrogate pair independently,
+        // leading to incorrect numeric escapes like "&#55348;&#57186;" instead of "&#119650;".
+        // The fix involves iterating over Unicode code points instead of 'char's.
+
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) { // 'i' is advanced by 'charCount' within the loop
+            final int codePoint = Character.codePointAt(str, i); // Get the full Unicode code point at the current index
+            final int charCount = Character.charCount(codePoint); // Determine how many 'char's this code point occupies (1 or 2)
+
+            String entityName = null;
+            // The 'entityName' method (which is not provided but assumed to exist) likely takes a 'char' argument.
+            // This means it can only handle characters within the Basic Multilingual Plane (BMP, U+0000 to U+FFFF).
+            // Supplementary characters (code points >= U+10000) do not have pre-defined HTML named entities
+            // (like &lt;). So, only attempt to find a named entity for BMP characters.
+            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { // i.e., codePoint <= U+FFFF
+                entityName = this.entityName((char) codePoint);
+            }
+
             if (entityName == null) {
-                if (c > 0x7F) {
+                // No named entity found for this code point.
+                // Now decide whether to write the character directly or escape it numerically.
+                // The original logic was:
+                // if (c > 0x7F) { ... write "&#" + c + ";" ... }
+                // else { ... write(c) ... }
+                // This means characters outside the basic ASCII range (0x80 onwards) were numerically escaped,
+                // and basic ASCII characters (0x00 to 0x7F) were written directly if no named entity.
+
+                // Applying this logic to the 'codePoint':
+                if (codePoint > 0x7F) {
+                    // This covers all characters from 0x80 onwards, including all supplementary characters.
+                    // These should be escaped numerically using their full code point value.
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codePoint, 10)); // Use the full Unicode code point for numeric escape
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // This covers basic ASCII characters (0x00 to 0x7F).
+                    // If no named entity was found for them, they are written directly.
+                    // This maintains the historical behavior of StringEscapeUtils.escapeHtml where
+                    // certain control characters (like newlines, tabs) in the ASCII range
+                    // were not numerically escaped unless they had a specific named entity mapping.
+                    writer.write(codePoint); 
                 }
             } else {
+                // A named entity was found (e.g., &lt;, &gt;, &amp;, &quot;, &apos;).
+                // This branch is only taken for specific BMP characters which have a named entity.
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+            // Advance the index by the number of 'char's consumed by the current code point.
+            // This is 1 for BMP characters and 2 for supplementary characters.
+            i += charCount; 
         }
     }
\ No newline at end of file
