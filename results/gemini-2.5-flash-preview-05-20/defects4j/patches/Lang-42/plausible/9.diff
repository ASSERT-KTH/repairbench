diff --git a/tmp/b783f134-2216-47d4-aeeb-1620543cf3e9_buggy.java b/tmp/f4cd7a95-4f77-42b5-b898-e76a05f9bd85_fixed.java
index 822447c..608fc8b 100644
--- a/tmp/b783f134-2216-47d4-aeeb-1620543cf3e9_buggy.java
+++ b/tmp/f4cd7a95-4f77-42b5-b898-e76a05f9bd85_fixed.java
@@ -1,37 +1,61 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) {
+            // Get the codepoint at the current index. This handles surrogate pairs for high Unicode characters.
+            int codepoint = str.codePointAt(i);
+            // Determine how many Java 'char's this codepoint consumes (1 for BMP, 2 for supplementary).
+            int charCount = Character.charCount(codepoint);
+
+            String entityName = null;
+            // The entityName(char) method likely only maps named entities for characters in the Basic Multilingual Plane (BMP).
+            // Supplementary characters (codepoint > U+FFFF) do not have standard HTML named entities,
+            // and should always be escaped as numeric character references.
+            if (codepoint <= 0xFFFF) { // Check if it's a BMP character
+                entityName = this.entityName((char) codepoint);
+            }
+
             if (entityName == null) {
-                if (c > 0x7F) {
+                // This branch handles characters that do not have a standard HTML named entity.
+                // This includes:
+                // 1. ASCII characters (0x00 to 0x7F) that don't have named entities (e.g., 'a', '1', space).
+                // 2. Non-ASCII BMP characters (0x80 to 0xFFFF) that don't have named entities (e.g., 'À', '€').
+                // 3. Supplementary characters (codepoint > 0xFFFF), which never have named entities.
+
+                // If the codepoint is outside the ASCII range (0x00-0x7F), or if it's a supplementary character,
+                // it should be escaped as a numeric character reference (&#nnnnn;).
+                if (codepoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codepoint, 10)); // Use the full codepoint value
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // For ASCII characters (0x00-0x7F) that don't have a named entity,
+                    // write the character directly.
+                    writer.write((char) codepoint);
                 }
             } else {
+                // This branch handles characters that have a standard HTML named entity (e.g., '<', '>', '&', '"', '€').
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+            // Advance the index by the number of 'char's consumed by the current codepoint.
+            i += charCount;
         }
     }
\ No newline at end of file
