diff --git a/tmp/202745c9-a3a2-4401-a1cf-dbe2bf38ddb9_buggy.java b/tmp/3ba143f9-468a-4452-a5ce-28a8da22fbc8_fixed.java
index 822447c..595d33c 100644
--- a/tmp/202745c9-a3a2-4401-a1cf-dbe2bf38ddb9_buggy.java
+++ b/tmp/3ba143f9-468a-4452-a5ce-28a8da22fbc8_fixed.java
@@ -1,37 +1,51 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) { // 'i' is incremented inside the loop based on the character's code point length
+            // Get the Unicode code point at the current index.
+            // This correctly handles both BMP characters (1 char) and supplementary characters (2 chars/surrogate pairs).
+            int codePoint = str.codePointAt(i); 
+
+            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { // This is a Basic Multilingual Plane (BMP) character (U+0000 to U+FFFF)
+                char c = (char) codePoint; // Cast to char, as entityName takes a char
+                String entityName = this.entityName(c); // Check for named HTML entities (e.g., &lt;, &amp;, &copy;)
                 if (entityName == null) {
-                if (c > 0x7F) {
+                    if (c > 0x7F) { // Non-ASCII BMP character (e.g., 'Ã©' which is U+00E9). Escape as numeric entity &#DDD;
                         writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                        writer.write(Integer.toString(codePoint, 10)); // Use the full codePoint value
                         writer.write(';');
-                } else {
+                    } else { // ASCII character (U+0000 to U+007F). Write as is.
                         writer.write(c);
                     }
-            } else {
+                } else { // Character has a named entity.
                     writer.write('&');
                     writer.write(entityName);
                     writer.write(';');
                 }
+            } else { // This is a Supplementary character (U+10000 and above), represented by a surrogate pair.
+                     // Supplementary characters do not have named HTML entities and must be escaped as numeric entities.
+                writer.write("&#");
+                writer.write(Integer.toString(codePoint, 10)); // Escape as a decimal numeric entity &#NNNNN;
+                writer.write(';');
+            }
+            // Advance the index by the number of 'char' units consumed by the current code point.
+            // This will be 1 for BMP characters and 2 for supplementary characters.
+            i += Character.charCount(codePoint); 
         }
     }
\ No newline at end of file
