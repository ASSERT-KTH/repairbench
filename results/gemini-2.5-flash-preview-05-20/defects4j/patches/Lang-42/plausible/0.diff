diff --git a/tmp/0e088372-f06d-4461-96a9-639fc70c4df2_buggy.java b/tmp/104ed45d-3bc4-4b83-b20e-f7066cc946eb_fixed.java
index 822447c..2c036a5 100644
--- a/tmp/0e088372-f06d-4461-96a9-639fc70c4df2_buggy.java
+++ b/tmp/104ed45d-3bc4-4b83-b20e-f7066cc946eb_fixed.java
@@ -1,37 +1,54 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) {
+            int codePoint = str.codePointAt(i);
+            int charCount = Character.charCount(codePoint);
+
+            String entityName = null;
+            // Only attempt to find a named entity for BMP characters.
+            // Supplementary characters (code points >= U+10000) do not have named HTML entities.
+            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+                // Cast to char for the entityName method, as it expects a char.
+                // This covers BMP characters (U+0000 to U+FFFF).
+                entityName = this.entityName((char) codePoint);
+            }
+
             if (entityName == null) {
-                if (c > 0x7F) {
+                // If no named entity, apply numeric escape or direct write.
+                // The original logic numerically escaped characters > 0x7F.
+                // This logic is now applied to the full codePoint.
+                if (codePoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codePoint, 10));
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // For ASCII characters (0x00 to 0x7F) that are not named entities,
+                    // write them directly.
+                    writer.write(codePoint);
                 }
             } else {
+                // Write the named entity.
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+            i += charCount; // Advance the index by the number of chars in the current code point.
         }
     }
\ No newline at end of file
