diff --git a/tmp/b73f96f5-9a8e-4ef6-a081-667478c03c3f_buggy.java b/tmp/4ac32acc-38c4-4977-a4a0-313d6d298a0e_fixed.java
index 822447c..a064e3e 100644
--- a/tmp/b73f96f5-9a8e-4ef6-a081-667478c03c3f_buggy.java
+++ b/tmp/4ac32acc-38c4-4977-a4a0-313d6d298a0e_fixed.java
@@ -1,37 +1,53 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) { // i is incremented inside the loop based on code point size
+            int codePoint = str.codePointAt(i); // Get the Unicode code point
+
+            // If the code point is a supplementary character (outside BMP), it must be escaped numerically.
+            // These characters are represented by a surrogate pair (two chars) in UTF-16.
+            // The original loop treated them as two separate chars, leading to incorrect output.
+            if (codePoint > 0xFFFF) { // Supplementary character (U+10000 to U+10FFFF)
+                writer.write("&#");
+                writer.write(Integer.toString(codePoint, 10));
+                writer.write(';');
+            } else { // BMP character (U+0000 to U+FFFF)
+                char c = (char) codePoint; // For BMP characters, a single char is sufficient
+                String entityName = this.entityName(c); // Check if it's a known HTML entity
+
                 if (entityName == null) {
-                if (c > 0x7F) {
+                    // If not a known entity, check if it needs numeric escaping (e.g., non-ASCII characters)
+                    if (c > 0x7F) { // Characters above ASCII range (0x7F is DEL)
                         writer.write("&#");
                         writer.write(Integer.toString(c, 10));
                         writer.write(';');
-                } else {
+                    } else { // ASCII characters that are not predefined entities (e.g., 'a', '1', space)
                         writer.write(c);
                     }
-            } else {
+                } else { // It's a known HTML entity (e.g., '<', '&', '>')
                     writer.write('&');
                     writer.write(entityName);
                     writer.write(';');
                 }
             }
+            // Advance the index by the number of char units consumed by the code point.
+            // For supplementary characters, this is 2; for BMP characters, it's 1.
+            i += Character.charCount(codePoint);
+        }
     }
\ No newline at end of file
