diff --git a/tmp/d8823813-8425-4833-b7f6-91cee83add49_buggy.java b/tmp/0b4592a2-df3c-41f9-acd1-dc9fa8823bfa_fixed.java
index 822447c..a04a188 100644
--- a/tmp/d8823813-8425-4833-b7f6-91cee83add49_buggy.java
+++ b/tmp/0b4592a2-df3c-41f9-acd1-dc9fa8823bfa_fixed.java
@@ -1,37 +1,62 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) { // i is incremented inside the loop
+            // Read the full code point, handling supplementary characters correctly.
+            int codePoint = str.codePointAt(i);
+            String entityName = null;
+
+            if (codePoint > 0x7F) { // Non-ASCII characters (including supplementary code points)
+                // For Basic Multilingual Plane (BMP) characters (0x80 to 0xFFFF),
+                // check if there's a named entity.
+                if (codePoint <= 0xFFFF) {
+                    entityName = this.entityName((char) codePoint); // entityName method expects a char
+                }
+
                 if (entityName == null) {
-                if (c > 0x7F) {
+                    // If no named entity, or if it's a supplementary character (codePoint > 0xFFFF),
+                    // escape it numerically. Supplementary characters must always be escaped this way.
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codePoint, 10));
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // Found a named entity for a BMP character
+                    writer.write('&');
+                    writer.write(entityName);
+                    writer.write(';');
                 }
+            } else { // ASCII characters (0x00 to 0x7F)
+                // Check for named entities for standard HTML characters like <, >, &, ", etc.
+                entityName = this.entityName((char) codePoint); 
+
+                if (entityName == null) {
+                    // No named entity for this ASCII character, write it directly
+                    writer.write((char) codePoint);
                 } else {
+                    // Found a named entity for an ASCII character
                     writer.write('&');
                     writer.write(entityName);
                     writer.write(';');
                 }
             }
+            // Advance the index by the number of Java chars (UTF-16 code units) consumed by this code point.
+            // This will be 1 for BMP characters and 2 for supplementary characters.
+            i += Character.charCount(codePoint); 
+        }
     }
\ No newline at end of file
