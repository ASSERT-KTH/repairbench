diff --git a/tmp/c8fea458-22f1-483a-abe4-d6ba559beec6_buggy.java b/tmp/c7f08bab-754b-41b7-b325-97c658cd20e2_fixed.java
index 822447c..5e49c40 100644
--- a/tmp/c8fea458-22f1-483a-abe4-d6ba559beec6_buggy.java
+++ b/tmp/c7f08bab-754b-41b7-b325-97c658cd20e2_fixed.java
@@ -1,37 +1,63 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        // Iterate through the string by Unicode code points, not by char units.
+        // This is crucial for correctly handling supplementary characters (those above U+FFFF),
+        // which are represented by surrogate pairs in Java's UTF-16 String.
+        for (int i = 0; i < len; ) {
+            // Get the current Unicode code point. This method correctly handles surrogate pairs,
+            // returning the single logical code point value.
+            int codePoint = str.codePointAt(i);
+
+            String entityName = null;
+            // Attempt to find a named HTML entity only if the code point is within the Basic Multilingual Plane (BMP).
+            // The `entityName` method (which is internal to the class and likely takes a `char`)
+            // is typically designed to work with single `char` values, which represent BMP characters.
+            // Supplementary characters (code points >= 0x10000) do not typically have named HTML entities
+            // and must be numerically escaped.
+            if (codePoint <= Character.MAX_VALUE) { // Equivalent to codePoint < 0x10000
+                entityName = this.entityName((char) codePoint);
+            }
+
             if (entityName == null) {
-                if (c > 0x7F) {
+                // If no named entity is found for the code point.
+                // We need to escape it numerically if it's a non-ASCII character (including all supplementary characters).
+                // The original logic `if (c > 0x7F)` would incorrectly apply to individual surrogate `char`s.
+                // By checking `codePoint > 0x7F`, we correctly apply this to the full Unicode code point.
+                if (codePoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codePoint, 10)); // Use the full code point value
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // This branch handles ASCII characters (0x00-0x7F) for which no named entity was found.
+                    // These characters are written directly.
+                    writer.write(codePoint); // This writes the char corresponding to the ASCII codePoint
                 }
             } else {
+                // A named entity was found for this code point.
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+
+            // Advance the loop index by the number of `char` units consumed by the current code point.
+            // This is 1 for BMP characters and 2 for supplementary characters.
+            i += Character.charCount(codePoint);
         }
     }
\ No newline at end of file
