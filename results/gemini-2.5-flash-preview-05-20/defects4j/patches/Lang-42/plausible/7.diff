diff --git a/tmp/3d5a2abb-0cf6-46cd-a655-808f2330c7ae_buggy.java b/tmp/01ddac78-fd9a-4891-8bf6-46222d8e572f_fixed.java
index 822447c..0461eee 100644
--- a/tmp/3d5a2abb-0cf6-46cd-a655-808f2330c7ae_buggy.java
+++ b/tmp/01ddac78-fd9a-4891-8bf6-46222d8e572f_fixed.java
@@ -1,37 +1,56 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) { // Iterate through the string by code points
+            final int codePoint = str.codePointAt(i); // Get the Unicode code point at the current index
+
+            String entityName = null;
+            // Only attempt to find a named entity if the code point is within the Basic Multilingual Plane (BMP).
+            // Supplementary characters (codePoint >= 0x10000) cannot be represented by a single char
+            // and thus won't have named entities typically looked up by char.
+            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+                entityName = this.entityName((char) codePoint);
+            }
+
             if (entityName == null) {
-                if (c > 0x7F) {
+                // No named entity found for this code point, or it's a supplementary character.
+                // Escape numerically if it's outside the standard ASCII range (0-127).
+                // This covers non-ASCII BMP characters and all supplementary characters.
+                if (codePoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codePoint, 10)); // Use the full code point value
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    // For ASCII characters (0-127) that don't have named entities (e.g., 'A', '1', '!', etc.)
+                    // or if entityName() explicitly returns null for an ASCII character with a named entity
+                    // (e.g. if '&' isn't mapped, though it typically would be).
+                    writer.write(codePoint); // Write the character as is
                 }
             } else {
+                // A named entity was found (e.g., &lt;, &gt;, &amp;, &quot;)
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+
+            // Advance the index by the number of Java chars consumed by the current code point.
+            // This will be 1 for BMP characters and 2 for supplementary characters.
+            i += Character.charCount(codePoint);
         }
     }
\ No newline at end of file
