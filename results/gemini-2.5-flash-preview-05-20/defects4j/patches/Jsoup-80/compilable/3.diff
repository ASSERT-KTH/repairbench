diff --git a/tmp/e9216796-5662-4f41-a926-6d9d89a5e540_buggy.java b/tmp/4bb0ecfb-d080-454e-98db-832e38a94371_fixed.java
index cbfa753..d82c566 100644
--- a/tmp/e9216796-5662-4f41-a926-6d9d89a5e540_buggy.java
+++ b/tmp/4bb0ecfb-d080-454e-98db-832e38a94371_fixed.java
@@ -1,15 +1,42 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
-        Node insert = comment;
+        Node insert = comment; // default to a regular comment
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
-            String data = comment.getData();
+            String data = commentToken.getData();
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
+                // Determine the actual content of the XML declaration/PI for parsing.
+                // Example: for "<?xml version='1.0'?>", data is "?xml version='1.0'?".
+                // We want to extract "xml version='1.0'".
+
+                String coreData = data.substring(1); // remove leading '!' or '?'
+                
+                // If there's a trailing '?' or '!' (common in actual XML declarations like `<?xml ...?>` where `getData()` includes the final `?`)
+                // remove it. This also handles cases where `<?...?>` becomes `?...?` in data.
+                if (coreData.length() > 0 && (coreData.endsWith("?") || coreData.endsWith("!"))) {
+                    coreData = coreData.substring(0, coreData.length() - 1); 
+                }
+                
+                // Trim leading/trailing whitespace, as the inner parser expects clean element name/attributes
+                coreData = coreData.trim();
+
+                if (!coreData.isEmpty()) {
+                    // This hack assumes the content inside the <?...?> is a valid XML element structure.
+                    // For example, "xml version='1.0'" is parsed as an element with tag "xml" and attribute "version".
+                    Document doc = Jsoup.parse("<" + coreData + ">", baseUri, Parser.xmlParser());
+                    
+                    // The parsing of arbitrary bogus comment content might fail to produce a valid element
+                    // (e.g., if coreData is malformed or just whitespace).
+                    // If no child element is found, it's not a parsable XML Declaration/PI in this context,
+                    // so it should remain a Comment node (which is the default 'insert' value).
+                    if (!doc.children().isEmpty()) {
                         Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+                        // The 'isXmlDecl' flag for XmlDeclaration should be true only if the processing instruction target is "xml" (case-insensitive).
+                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), el.tagName().equalsIgnoreCase("xml"));
                         insert.attributes().addAll(el.attributes());
                     }
                 }
+            }
+        }
         insertNode(insert);
     }
\ No newline at end of file
