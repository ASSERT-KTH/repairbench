diff --git a/tmp/1493b4ba-5091-4b45-84a3-de2666701b15_buggy.java b/tmp/d634fe2c-8225-401a-8883-cef7eb3b292f_fixed.java
index cbfa753..0005cf6 100644
--- a/tmp/1493b4ba-5091-4b45-84a3-de2666701b15_buggy.java
+++ b/tmp/d634fe2c-8225-401a-8883-cef7eb3b292f_fixed.java
@@ -1,15 +1,33 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
         Node insert = comment;
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
-            // so we do a bit of a hack and parse the data as an element to pull the attributes out
             String data = comment.getData();
-            if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
-                    insert.attributes().addAll(el.attributes());
+            // Jsoup's lexer strips the leading '!' or '?' from bogus comments,
+            // so we check the actual content for "xml" or "DOCTYPE".
+            // The previous condition `data.startsWith("!") || data.startsWith("?")` would never be true.
+            if (data.length() > 1 && (data.toLowerCase().startsWith("xml") || data.toLowerCase().startsWith("doctype"))) {
+                // Manually extract the tag name (e.g., "xml", "doctype")
+                String tagName = data.split("\\s", 2)[0];
+                Attributes attributes;
+
+                // If there's more data after the tag name, it should contain attributes.
+                if (data.length() > tagName.length()) {
+                    // Construct a dummy XML element string (e.g., "<xml version='1.0'>")
+                    // and use Jsoup's XML parser to extract the attributes from it.
+                    // The XML parser is robust enough to parse this as a valid element.
+                    String attributeXml = "<" + tagName + data.substring(tagName.length()) + ">";
+                    Document doc = Jsoup.parse(attributeXml, baseUri, Parser.xmlParser());
+                    attributes = doc.child(0).attributes();
+                } else {
+                    attributes = new Attributes();
+                }
+
+                // Create an XmlDeclaration node.
+                // It is an XmlDeclaration if its tag name is "xml". Otherwise, it's a processing instruction (like a doctype).
+                insert = new XmlDeclaration(settings.normalizeTag(tagName), tagName.toLowerCase().equals("xml"));
+                insert.attributes().addAll(attributes);
             }
         }
         insertNode(insert);
     }
\ No newline at end of file
