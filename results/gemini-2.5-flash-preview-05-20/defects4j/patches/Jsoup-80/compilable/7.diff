diff --git a/tmp/eba9f2a6-4671-49be-9bee-ee226fbc4a2f_buggy.java b/tmp/6d9ae628-5848-42f6-9dec-c3964cf235b4_fixed.java
index cbfa753..f8407b2 100644
--- a/tmp/eba9f2a6-4671-49be-9bee-ee226fbc4a2f_buggy.java
+++ b/tmp/6d9ae628-5848-42f6-9dec-c3964cf235b4_fixed.java
@@ -1,15 +1,61 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
         Node insert = comment;
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
-            String data = comment.getData();
+            String data = commentToken.getData();
+
+            // The 'data' field of the CommentToken for bogus comments (like <?xml ...?> or <!DOCTYPE ...>)
+            // typically includes the leading '?' or '!' and possibly the trailing '?' or '>'.
+            // For example, for "<?xml version='1.0'?>", `data` might be "?xml version='1.0'?".
+            // The original `substring(1, data.length() -1)` attempts to remove these delimiters.
+            // However, if `data` is very short (e.g., "??", "!!", "!?", "?!"), `substring(1, data.length() -1)`
+            // can result in an empty string (e.g., for "??", substring(1,1) is "").
+            // Jsoup.parse("<>") will produce a Document with no children, leading to IndexOutOfBoundsException when calling doc.child(0).
+
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+                // Extract the inner content to be parsed as an element.
+                // This removes the leading '!' or '?' and the assumed trailing character.
+                String dataInner = data.substring(1, data.length() - 1);
+
+                if (dataInner.isEmpty()) {
+                    // If the inner data is empty (e.g., from "<??>" or "<!!>"),
+                    // it cannot be parsed into a meaningful element.
+                    // In this case, we fall back to treating it as a regular Comment node,
+                    // which is already assigned to 'insert'.
+                    return; // Exit early, keeping 'insert' as a Comment.
+                }
+
+                try {
+                    // Parse the inner content as a dummy element to extract its tag name and attributes.
+                    // For example, "<xml version='1.0'>" from "?xml version='1.0'?".
+                    Document doc = Jsoup.parse("<" + dataInner + ">", baseUri, Parser.xmlParser());
+                    Element el = doc.child(0); // This might throw IndexOutOfBoundsException if doc has no children.
+
+                    // Determine if it's an XML Declaration (<?xml ...?>) or a Document Type / Processing Instruction (<!...>).
+                    char declarationType = data.charAt(0);
+                    if (declarationType == '?') {
+                        // This is an XML Declaration (e.g., <?xml version="1.0"?>)
+                        // XmlDeclaration constructor: XmlDeclaration(tagName, isXmlDecl)
+                        // For <?xml, isXmlDecl should be true.
+                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), true);
+                    } else if (declarationType == '!') {
+                        // This is a Document Type Declaration (e.g., <!DOCTYPE html>) or other Processing Instruction (e.g., <!ATTLIST ...>).
+                        // In Jsoup's XML parser, these are represented by XmlDeclaration with isXmlDecl set to false.
+                        // (i.e., it's not the primary <?xml declaration but another instruction).
+                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), false);
+                    } else {
+                        // Should theoretically not be reached if data.startsWith("!") || data.startsWith("?") is true,
+                        // but as a safeguard, fallback to Comment.
+                        insert = comment;
+                    }
                     insert.attributes().addAll(el.attributes());
+                } catch (Exception e) {
+                    // If parsing the inner data as an element fails for any reason (e.g., malformed syntax within the declaration),
+                    // fall back to treating it as a regular Comment node.
+                    insert = comment;
+                }
             }
         }
         insertNode(insert);
     }
\ No newline at end of file
