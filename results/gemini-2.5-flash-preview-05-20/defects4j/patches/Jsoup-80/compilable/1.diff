diff --git a/tmp/9a072467-a81c-4fd0-aac7-1cc53d22d862_buggy.java b/tmp/31b742fd-c459-4e56-8fdb-f2f0ffb7fad7_fixed.java
index cbfa753..5e41dbb 100644
--- a/tmp/9a072467-a81c-4fd0-aac7-1cc53d22d862_buggy.java
+++ b/tmp/31b742fd-c459-4e56-8fdb-f2f0ffb7fad7_fixed.java
@@ -1,15 +1,36 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
         Node insert = comment;
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
-            String data = comment.getData();
-            if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
+            String data = commentToken.getData();
+
+            // Try to parse the comment's data as a standalone XML element to extract its name and attributes.
+            // For example, if data is "xml version='1.0'", this will parse "<xml version='1.0'>".
+            // This is safer than the original substring logic which was flawed because Token.Comment.data already stripped leading '?' or '!'.
+            Document doc = Jsoup.parse("<" + data + ">", baseUri, Parser.xmlParser());
+
+            // Check if parsing the data yielded at least one element.
+            // If data was something like "DOCTYPE html" (and it somehow reached here as bogus comment),
+            // parsing "<DOCTYPE html>" in XML parser might result in a DocumentType node but no element children,
+            // or if the data was completely malformed as an element, doc.children() would be empty.
+            if (doc.children().size() > 0) {
                 Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+                String tagName = settings.normalizeTag(el.tagName());
+
+                // Determine if it's a processing instruction (like <?xml ...?>).
+                // The 'isProcessingInstruction' flag depends on the original leading character ('?' for PI, '!' for others).
+                // Since commentToken.getData() doesn't preserve this, we infer based on common tag names.
+                // "xml" is the most common processing instruction target.
+                boolean isProcessingInstruction = tagName.equalsIgnoreCase("xml"); 
+                // Add other common PIs if needed (e.g., || tagName.equalsIgnoreCase("php")).
+
+                insert = new XmlDeclaration(tagName, isProcessingInstruction);
                 insert.attributes().addAll(el.attributes());
             }
+            // If doc.children() is empty, 'insert' remains the original Comment node,
+            // which prevents IndexOutOfBoundsException and handles cases where the bogus comment
+            // content is not a valid XML element structure.
         }
         insertNode(insert);
     }
\ No newline at end of file
