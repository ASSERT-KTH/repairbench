diff --git a/tmp/a48a56d4-7104-49b6-b27d-5d312b4dcf0a_buggy.java b/tmp/efad800d-6a38-4d81-819b-2bd7bb29240d_fixed.java
index cbfa753..d68aef2 100644
--- a/tmp/a48a56d4-7104-49b6-b27d-5d312b4dcf0a_buggy.java
+++ b/tmp/efad800d-6a38-4d81-819b-2bd7bb29240d_fixed.java
@@ -1,15 +1,24 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
         Node insert = comment;
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
             String data = comment.getData();
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
+                // For xml declarations/doctypes, the comment data typically contains the leading '!' or '?'
+                // e.g., for "<?xml version='1.0'?>", data is "?xml version='1.0'"
+                // e.g., for "<!DOCTYPE html>", data is "!DOCTYPE html"
+                // So, we strip the leading character to form a valid XML element tag.
+                String decl = data.substring(1);
+                Document doc = Jsoup.parse("<" + decl + ">", baseUri, Parser.xmlParser());
+                // Check if parsing resulted in a child element before attempting to access it.
+                // This prevents IndexOutOfBoundsException for malformed declarations (e.g. empty string from substring, or invalid XML).
+                if (doc.children().size() > 0) {
                     Element el = doc.child(0);
                     insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
                     insert.attributes().addAll(el.attributes());
                 }
             }
+        }
         insertNode(insert);
     }
\ No newline at end of file
