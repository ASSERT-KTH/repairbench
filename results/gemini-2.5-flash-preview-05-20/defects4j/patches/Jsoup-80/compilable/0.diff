diff --git a/tmp/fab33261-ffaf-4fcf-83bf-d974084cdcb7_buggy.java b/tmp/cbd9502f-f62d-4f85-86a7-fc1430e66332_fixed.java
index cbfa753..9b804d8 100644
--- a/tmp/fab33261-ffaf-4fcf-83bf-d974084cdcb7_buggy.java
+++ b/tmp/cbd9502f-f62d-4f85-86a7-fc1430e66332_fixed.java
@@ -1,15 +1,60 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
-        Node insert = comment;
-        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
-            // so we do a bit of a hack and parse the data as an element to pull the attributes out
-            String data = comment.getData();
+        Node insert = comment; // Default: treat as a regular comment node
+
+        // XML declarations (<?xml ...?>) and certain HTML-like declarations (<!DOCTYPE ...>)
+        // might be emitted as "bogus" comments if not properly parsed by the Tokeniser.
+        // This block attempts to re-interpret such bogus comments as XmlDeclaration nodes.
+        if (commentToken.bogus) {
+            String data = commentToken.getData(); // e.g., "?xml version='1.0'" or "!DOCTYPE html" or "foo bar" for <!foo bar>
+
+            // The original code checked for data starting with '!' or '?' which implies
+            // the Token.Comment's data still contains this leading character,
+            // indicating a processing instruction or XML declaration format.
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
-                    insert.attributes().addAll(el.attributes());
+                boolean isProcessingInstruction = data.startsWith("?"); // True for <?...?> (PI), false for <!...> (Decl)
+                String content = data.substring(1); // Remove the leading '!' or '?' (e.g., "xml version='1.0'")
+
+                String tagName;
+                String attributesString;
+
+                // Split content into tag name and attribute string
+                int firstSpace = content.indexOf(' ');
+                if (firstSpace > 0) {
+                    tagName = content.substring(0, firstSpace);
+                    attributesString = content.substring(firstSpace + 1);
+                } else {
+                    tagName = content; // No attributes, just tag name
+                    attributesString = "";
                 }
+
+                // Create the XmlDeclaration node with the extracted tag name and type
+                insert = new XmlDeclaration(settings.normalizeTag(tagName), isProcessingInstruction);
+
+                // If there are attributes, parse them using Jsoup's XML parser.
+                // The original approach tried to parse the entire declaration string as an element,
+                // which often resulted in malformed XML and an empty document (leading to IndexOutOfBoundsException).
+                // Instead, we create a dummy XML element with the extracted attribute string,
+                // which is a more reliable way to leverage Jsoup's attribute parsing capabilities.
+                if (!attributesString.isEmpty()) {
+                    // Parse a dummy element (e.g., "<x .../>") to extract only the attributes
+                    // "x" is used as a simple valid XML tag name to host the attributes.
+                    Document attrsDoc = Jsoup.parse("<x " + attributesString + "/>", baseUri, Parser.xmlParser());
+                    // Check if the dummy element was successfully parsed (i.e., it has children)
+                    if (attrsDoc.children().size() > 0) {
+                        Element attrsEl = attrsDoc.child(0);
+                        // Add the extracted attributes to the XmlDeclaration node
+                        insert.attributes().addAll(attrsEl.attributes());
+                    }
+                    // If attrsDoc.children().size() is 0, it means the attributesString itself was
+                    // so malformed that it couldn't even parse into a dummy element.
+                    // In this case, the XmlDeclaration will simply have no attributes, which is a graceful fallback.
+                }
+            }
+            // If `commentToken.bogus` is true but the data doesn't start with '!' or '?',
+            // it's a different type of bogus comment (e.g., `<!foo>`). In such cases,
+            // `insert` should remain the `Comment` node, and no further action is needed
+            // within this `if (bogus)` block.
         }
         insertNode(insert);
     }
\ No newline at end of file
