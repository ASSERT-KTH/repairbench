diff --git a/tmp/74c5a020-95b6-49de-b2d6-323e73885ab1_buggy.java b/tmp/8e294aff-54fc-4fc2-96dd-1d2cecf6c579_fixed.java
index cbfa753..9785f82 100644
--- a/tmp/74c5a020-95b6-49de-b2d6-323e73885ab1_buggy.java
+++ b/tmp/8e294aff-54fc-4fc2-96dd-1d2cecf6c579_fixed.java
@@ -1,15 +1,71 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
-        Node insert = comment;
-        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
-            // so we do a bit of a hack and parse the data as an element to pull the attributes out
-            String data = comment.getData();
-            if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
+        Node insert = comment; // Default to Comment node
+
+        if (commentToken.bogus) {
+            String data = commentToken.getData();
+            Node candidateNode = null;
+
+            // 1. Attempt to parse as a standard XML Declaration (e.g., `xml version='1.0'`)
+            // This covers cases where the data is already stripped of `<?` and `?>`.
+            if (data.toLowerCase().startsWith("xml ")) {
+                String xmlContent = data.substring("xml ".length()).trim(); // "version='1.0'"
+                if (!xmlContent.isEmpty()) {
+                    try {
+                        // Create a dummy tag to parse attributes. `x` is a safe, short tag name.
+                        // For example, `<x version='1.0'/>` will be parsed to extract "version" attribute.
+                        Document docAttrs = Jsoup.parse("<x " + xmlContent + "/>", baseUri, Parser.xmlParser());
+                        if (!docAttrs.children().isEmpty()) {
+                            Element el = docAttrs.child(0);
+                            // The actual XML declaration tag name is always "xml".
+                            candidateNode = new XmlDeclaration(settings.normalizeTag("xml"), true); // `true` for `<?` type
+                            candidateNode.attributes().addAll(el.attributes());
+                        }
+                    } catch (Exception e) {
+                        // Parsing failed, it's not a proper XML declaration.
+                        // Fallback to next attempt or default Comment.
+                    }
+                }
+            }
+
+            // 2. If not parsed as a standard XML declaration, try the original hack for
+            //    bogus comments that start with `!` or `?` (e.g., `!DOCTYPE html` or `?xml version='1.0'?>`).
+            //    This also addresses the `IndexOutOfBoundsException` for short, malformed inputs.
+            if (candidateNode == null && data.length() > 1) { // data.length() > 1 prevents `IndexOutOfBoundsException` for length 1.
+                String effectiveContent = null;
+                boolean isQuestionInstruction = false; // True for `<?`, false for `<!`
+
+                if (data.startsWith("?")) {
+                    isQuestionInstruction = true;
+                    // If it ends with `?`, remove both leading and trailing `?`. Otherwise, just remove leading `?`.
+                    effectiveContent = data.substring(1, data.endsWith("?") ? data.length() - 1 : data.length());
+                } else if (data.startsWith("!")) {
+                    // For `<!`, typically only the leading `!` is removed.
+                    isQuestionInstruction = false;
+                    effectiveContent = data.substring(1);
+                }
+
+                if (effectiveContent != null && !effectiveContent.isEmpty()) { // Ensure content is not empty
+                    try {
+                        // The original parsing strategy: wrap `effectiveContent` in `<>` and parse as XML.
+                        // This assumes `effectiveContent` can be parsed as `tagName attrs`.
+                        Document doc = Jsoup.parse("<" + effectiveContent + ">", baseUri, Parser.xmlParser());
+                        if (!doc.children().isEmpty()) { // Protect against `IndexOutOfBoundsException` if doc is empty
                             Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
-                    insert.attributes().addAll(el.attributes());
+                            candidateNode = new XmlDeclaration(settings.normalizeTag(el.tagName()), isQuestionInstruction);
+                            candidateNode.attributes().addAll(el.attributes());
+                        }
+                    } catch (Exception e) {
+                        // Parsing failed, it's not a proper declaration.
+                        // Fallback to default Comment.
+                    }
+                }
+            }
+
+            // If a candidate node was successfully created, use it.
+            if (candidateNode != null) {
+                insert = candidateNode;
             }
         }
         insertNode(insert);
     }
\ No newline at end of file
