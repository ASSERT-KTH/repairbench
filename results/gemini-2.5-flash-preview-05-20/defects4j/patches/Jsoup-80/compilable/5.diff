diff --git a/tmp/baac9042-9553-45e2-85a3-b3d249cdbd80_buggy.java b/tmp/9054b32f-6988-48cd-9325-b2264737c867_fixed.java
index cbfa753..d8c5a02 100644
--- a/tmp/baac9042-9553-45e2-85a3-b3d249cdbd80_buggy.java
+++ b/tmp/9054b32f-6988-48cd-9325-b2264737c867_fixed.java
@@ -1,15 +1,52 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
         Node insert = comment;
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
             String data = comment.getData();
+            // The data for a bogus comment might include the leading '!' or '?' and trailing '>'.
+            // For example, if original XML was "<?xml version='1.0'?>", the commentToken.getData() might be "?xml version='1.0'>".
+            // The subsequent parsing tries to treat this as an element.
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
-                    insert.attributes().addAll(el.attributes());
+                // Strip the leading '!' or '?' and the trailing '>' for parsing as an element.
+                String parseData = data.substring(1, data.length() -1);
+                
+                // Parse the stripped data as if it were an element to extract attributes.
+                // Use xmlParser to ensure correct handling of attributes and declaration types.
+                Document doc = Jsoup.parse("<" + parseData + ">", baseUri, Parser.xmlParser());
+                
+                // Check if any nodes were successfully parsed from the inner content.
+                if (!doc.childNodes().isEmpty()) {
+                    Node node = doc.childNodes().get(0); // Get the first raw node, which could be an Element or XmlDeclaration
+                    String declName = null;
+                    Attributes declAttrs = null;
+
+                    if (node instanceof XmlDeclaration) {
+                        // If parsing resulted in an XmlDeclaration (e.g., from "<xml ...>" or "<!DOCTYPE ...>")
+                        XmlDeclaration decl = (XmlDeclaration) node;
+                        declName = decl.name();
+                        declAttrs = decl.attributes();
+                    } else if (node instanceof Element) {
+                        // If parsing resulted in a regular Element (e.g., "<foo bar='baz'>")
+                        Element el = (Element) node;
+                        declName = el.tagName();
+                        declAttrs = el.attributes();
+                    } 
+                    // If 'node' is neither XmlDeclaration nor Element (e.g., a TextNode or Comment),
+                    // it means the parsing hack didn't yield an expected declaration or element.
+                    // In such cases, 'insert' will remain the original 'Comment' node, which is the desired fallback.
+
+                    if (declName != null) { // Only proceed if a valid name was extracted
+                        // Create a new XmlDeclaration based on the parsed name and attributes.
+                        // The 'isProcessingInstruction' flag should be true if the original comment data started with '?' (<?...).
+                        // The original code had data.startsWith("!") which was incorrect for this flag.
+                        insert = new XmlDeclaration(settings.normalizeTag(declName), data.startsWith("?"));
+                        if (declAttrs != null) {
+                            insert.attributes().addAll(declAttrs);
+                        }
+                    }
+                }
             }
         }
         insertNode(insert);
     }
\ No newline at end of file
