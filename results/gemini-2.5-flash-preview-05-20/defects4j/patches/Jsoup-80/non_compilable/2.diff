diff --git a/tmp/1e9abf67-f99b-4df7-a993-5570df3d61e3_buggy.java b/tmp/4422d1a2-f6c1-444d-a208-f7c4ee6b790f_fixed.java
index cbfa753..09c70fd 100644
--- a/tmp/1e9abf67-f99b-4df7-a993-5570df3d61e3_buggy.java
+++ b/tmp/4422d1a2-f6c1-444d-a208-f7c4ee6b790f_fixed.java
@@ -1,15 +1,80 @@
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Comment;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.Node;
+import org.jsoup.nodes.XmlDeclaration;
+import org.jsoup.parser.Parser;
+import org.jsoup.parser.Token;
+
+// Assumes 'settings' and 'baseUri' are available as member variables.
+// And 'insertNode' is a helper method available in the class.
+// This example relies on the context of org.jsoup.parser.XmlTreeBuilder
+
+class XmlTreeBuilder { // (Contextual class name for clarity, not part of the required output)
+    private org.jsoup.internal.StringUtil settings; // Assuming this is present in the class context
+    private String baseUri; // Assuming this is present in the class context
+
+    void insertNode(Node node) { /* placeholder */ }
+
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
-        Node insert = comment;
-        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
-            // so we do a bit of a hack and parse the data as an element to pull the attributes out
-            String data = comment.getData();
-            if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
+        Node insert = comment; // Default: treat as a simple Comment node
+
+        if (commentToken.bogus) { // xml declarations and some other processing instructions are emitted as bogus comments
+            String data = commentToken.getData(); // The content of the bogus comment
+
+            // Case 1: XML Declaration (e.g., <?xml version="1.0" encoding="UTF-8"?>)
+            // For XML declarations, the tokeniser typically provides `data` as `xml version="1.0"`,
+            // NOT including the leading `?`.
+            if (data.regionMatches(true, 0, "xml", 0, 3) && // Check for "xml" case-insensitive
+                (data.length() == 3 || Character.isWhitespace(data.charAt(3)) || data.charAt(3) == '/')) { // Followed by whitespace, end, or '/' for self-closing
+                try {
+                    // To extract attributes and tag name, we parse it as a dummy element.
+                    // For `data = "xml version='1.0'"`, we parse `<xml version='1.0'>`.
+                    Document doc = Jsoup.parse("<" + data + ">", baseUri, Parser.xmlParser());
+                    // Check if an element was successfully parsed. `doc.child(0)` throws if no element.
+                    if (!doc.children().isEmpty()) {
                         Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
+                        // Create an XmlDeclaration node. `isXmlDecl` is true for actual XML declarations.
+                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), true);
                         insert.attributes().addAll(el.attributes());
                     }
+                } catch (Exception e) {
+                    // If parsing as an element fails (e.g., malformed `data`),
+                    // fall back to the default `Comment` node.
+                    // `insert` is already initialized to `comment`, so no explicit action needed.
+                }
+            }
+            // Case 2: CDATA Section (e.g., <![CDATA[foo]]>)
+            // While XmlTokeniser typically emits `Token.CData` for `CDATA` sections,
+            // sometimes they might be tokenized as bogus comments, with `data` as `[CDATA[foo]]`.
+            else if (data.length() >= 7 && data.startsWith("[CDATA[") && data.endsWith("]]")) {
+                // Extract the content by stripping `[CDATA[` (7 chars) and `]]` (2 chars).
+                insert = new org.jsoup.nodes.CDataSection(data.substring(7, data.length() - 2));
+            }
+            // Case 3: Other "dodgy" bogus comments that happen to start with '!' or '?'
+            // (e.g., `<!DOCTYPE html>`, `<?php ... ?>`) where `data` *includes* the leading `!` or `?`.
+            else if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
+                try {
+                    // Extract a potential tag name by stripping the first character ('!' or '?')
+                    // and the last character (assuming it's a `>`).
+                    // This is less robust than the XML declaration parsing but matches original intent.
+                    String tag = data.substring(1, data.length() - 1);
+                    
+                    // Parse as a dummy element to extract attributes.
+                    Document doc = Jsoup.parse("<" + tag + ">", baseUri, Parser.xmlParser());
+                    if (!doc.children().isEmpty()) {
+                        Element el = doc.child(0);
+                        // `isXmlDecl` is true if it started with `?` (like `<?php`).
+                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("?"));
+                        insert.attributes().addAll(el.attributes());
+                    }
+                } catch (Exception e) {
+                    // If parsing as an element fails, fall back to `Comment`.
+                }
+            }
         }
         insertNode(insert);
     }
+}
\ No newline at end of file
