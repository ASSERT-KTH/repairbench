diff --git a/tmp/31b08e7b-9768-4305-8423-404212d6b4b7_buggy.java b/tmp/fadd8556-2710-4c5b-8ce0-cbd1414c91c1_fixed.java
index cbfa753..bcf2cb1 100644
--- a/tmp/31b08e7b-9768-4305-8423-404212d6b4b7_buggy.java
+++ b/tmp/fadd8556-2710-4c5b-8ce0-cbd1414c91c1_fixed.java
@@ -1,15 +1,45 @@
     void insert(Token.Comment commentToken) {
         Comment comment = new Comment(commentToken.getData());
         Node insert = comment;
         if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
             // so we do a bit of a hack and parse the data as an element to pull the attributes out
-            String data = comment.getData();
+            String data = commentToken.getData();
+            // This check is slightly redundant if `bogus` implies `data.startsWith("!") || data.startsWith("?")`
+            // but keeps the intent clear and safe in case `bogus` flag logic changes.
             if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
-                    Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
-                    insert.attributes().addAll(el.attributes());
+                // The original approach of parsing "<" + data.substring(1, data.length() - 1) + ">"
+                // into a Jsoup Document and then extracting its child Element fails for malformed
+                // XML declarations (e.g., missing closing '?>') because the XML parser is strict
+                // and might not create a child Element for such input.
+                // Instead, we manually parse the tag name and attributes from the raw data string.
+
+                String declContent = data.substring(1); // Remove the leading '?' or '!'
+
+                int firstSpace = declContent.indexOf(' ');
+                String tagName;
+                String attrString = null;
+
+                if (firstSpace > 0) {
+                    tagName = settings.normalizeTag(declContent.substring(0, firstSpace));
+                    attrString = declContent.substring(firstSpace + 1);
+                } else {
+                    tagName = settings.normalizeTag(declContent);
+                }
+
+                // Determine if it's a Processing Instruction (starts with '?') or a DTD-like declaration (starts with '!').
+                // XmlDeclaration node is used for both in Jsoup's internal representation.
+                boolean isProcessingInstruction = data.startsWith("?");
+
+                XmlDeclaration declNode = new XmlDeclaration(tagName, isProcessingInstruction);
+
+                if (attrString != null) {
+                    // Attributes.createFromDelimited is suitable for parsing attribute strings like "version='1.0'".
+                    // The `settings` object from the TreeBuilder (usually ParseSettings.preserveCase for XML)
+                    // is used to handle attribute case normalization.
+                    declNode.attributes().addAll(org.jsoup.nodes.Attributes.createFromDelimited(attrString, settings));
+                }
+                insert = declNode;
             }
         }
         insertNode(insert);
     }
\ No newline at end of file
