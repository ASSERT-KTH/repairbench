diff --git a/tmp/9b4d0844-d0ae-46d0-ae37-3153a8836559_buggy.java b/tmp/9881988c-3c9d-4225-953f-b90b2d0ef9c2_fixed.java
index 3652aad..1c495db 100644
--- a/tmp/9b4d0844-d0ae-46d0-ae37-3153a8836559_buggy.java
+++ b/tmp/9881988c-3c9d-4225-953f-b90b2d0ef9c2_fixed.java
@@ -1,86 +1,103 @@
     /**
      * Defines a typed variable. The defining node will be annotated with the
      * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
      * inferred.
      *
      * Slots may be any variable or any qualified name in the global scope.
      *
      * @param n the defining NAME or GETPROP node.
      * @param parent the {@code n}'s parent.
      * @param type the variable's type. It may be {@code null} if
      *     {@code inferred} is {@code true}.
      */
     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
       Preconditions.checkArgument(inferred || type != null);
 
       // Only allow declarations of NAMEs and qualfied names.
       boolean shouldDeclareOnGlobalThis = false;
       if (n.getType() == Token.NAME) {
         Preconditions.checkArgument(
             parent.getType() == Token.FUNCTION ||
             parent.getType() == Token.VAR ||
             parent.getType() == Token.LP ||
             parent.getType() == Token.CATCH);
         shouldDeclareOnGlobalThis = scope.isGlobal() &&
             (parent.getType() == Token.VAR ||
              parent.getType() == Token.FUNCTION);
       } else {
         Preconditions.checkArgument(
             n.getType() == Token.GETPROP &&
             (parent.getType() == Token.ASSIGN ||
              parent.getType() == Token.EXPR_RESULT));
       }
       String variableName = n.getQualifiedName();
       Preconditions.checkArgument(!variableName.isEmpty());
 
       // If n is a property, then we should really declare it in the
       // scope where the root object appears. This helps out people
       // who declare "global" names in an anonymous namespace.
       Scope scopeToDeclareIn = scope;
 
+      // For qualified names (e.g., 'ns.foo'), if the root variable (e.g., 'ns')
+      // is global, then the qualified name itself should be declared in the
+      // global scope, even if the definition appears in a local scope.
+      if (n.isQualifiedName()) {
+        Node root = n.getQualifiedNameNode();
+        if (root != null && root.isName()) {
+          // Find the variable corresponding to the root name in the current scope chain.
+          // This will find 'ns' if it's declared in the current local scope or any parent scope.
+          Var rootVar = scope.getVar(root.getString());
+          if (rootVar != null && rootVar.isGlobal()) {
+            // If the root variable is global, declare the qualified name in the global scope.
+            scopeToDeclareIn = scope.getGlobalScope();
+          }
+        }
+      }
+
       // don't try to declare in the global scope if there's
       // already a symbol there with this name.
 
       // declared in closest scope?
       if (scopeToDeclareIn.isDeclared(variableName, false)) {
         Var oldVar = scopeToDeclareIn.getVar(variableName);
         validator.expectUndeclaredVariable(
             sourceName, n, parent, oldVar, variableName, type);
       } else {
         if (!inferred) {
           setDeferredType(n, type);
         }
         CompilerInput input = compiler.getInput(sourceName);
         scopeToDeclareIn.declare(variableName, n, type, input, inferred);
 
         if (shouldDeclareOnGlobalThis) {
           ObjectType globalThis =
               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
           boolean isExtern = input.isExtern();
           if (inferred) {
             globalThis.defineInferredProperty(variableName,
                 type == null ?
                     getNativeType(JSTypeNative.NO_TYPE) :
                     type,
                 isExtern);
           } else {
             globalThis.defineDeclaredProperty(variableName, type, isExtern);
           }
         }
 
         // If we're in the global scope, also declare var.prototype
         // in the scope chain.
         if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
           FunctionType fnType = (FunctionType) type;
           if (fnType.isConstructor() || fnType.isInterface()) {
-            FunctionType superClassCtor = fnType.getSuperClassConstructor();
+            FunctionType superClassCtor = fnType.isConstructor()
+                ? fnType.getSuperClassConstructor() : null;
             scopeToDeclareIn.declare(variableName + ".prototype", n,
                 fnType.getPrototype(), compiler.getInput(sourceName),
                 /* declared iff there's an explicit supertype */
                 superClassCtor == null ||
                 superClassCtor.getInstanceType().equals(
                     getNativeType(OBJECT_TYPE)));
           }
         }
       }
     }
\ No newline at end of file
