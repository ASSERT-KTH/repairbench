diff --git a/tmp/9b9a275e-b75a-4700-88ff-06bb9d9a7346_buggy.java b/tmp/462e2840-0fca-42af-b2fa-4f6b2ec7f4fd_fixed.java
index e0ecec8..af402a1 100644
--- a/tmp/9b9a275e-b75a-4700-88ff-06bb9d9a7346_buggy.java
+++ b/tmp/462e2840-0fca-42af-b2fa-4f6b2ec7f4fd_fixed.java
@@ -1,35 +1,58 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+
+    // Store the var_args element type if this is a var_args function.
+    // This will be used for arguments that exceed the number of declared formal parameters.
+    JSType varArgsElementType = null;
+    if (functionType.isVarArgs()) {
+      varArgsElementType = functionType.getVarArgType();
+    }
+
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
 
+      JSType formalParameterType = null;
+
+      if (parameters.hasNext()) {
+        // We still have a declared formal parameter. Use its type.
+        Node formalParameterNode = parameters.next();
+        formalParameterType = getJSType(formalParameterNode);
+      } else if (functionType.isVarArgs()) {
+        // All declared formal parameters have been consumed,
+        // but this is a var_args function.
+        // All subsequent arguments should be checked against the var_args element type.
+        formalParameterType = varArgsElementType;
+      } else {
+        // No more declared formal parameters, and this is not a var_args function.
+        // These are excess arguments. The `WRONG_ARGUMENT_COUNT` error will handle this.
+        // No type checking is needed for these arguments as there's no parameter to match them against.
+        continue;
+      }
+
+      // Perform the type check for the current argument against its determined formal parameter type.
+      // This will only be executed if formalParameterType is not null, i.e., we found a parameter to match against.
       validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+          getJSType(argument), formalParameterType, call, ordinal);
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
