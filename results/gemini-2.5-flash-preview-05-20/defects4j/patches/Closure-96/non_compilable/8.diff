diff --git a/tmp/14ad9688-3448-47a0-8257-15d795bb63f4_buggy.java b/tmp/a49af018-441f-4bb0-8440-a7f32c46d253_fixed.java
index e0ecec8..43089a3 100644
--- a/tmp/14ad9688-3448-47a0-8257-15d795bb63f4_buggy.java
+++ b/tmp/a49af018-441f-4bb0-8440-a7f32c46d253_fixed.java
@@ -1,35 +1,61 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
-      ordinal++;
 
+    // Determine the var_args parameter type once, if applicable.
+    // This will be used for any arguments beyond the fixed formal parameters
+    // in a var_args function.
+    JSType varArgsParameterType = null;
+    if (functionType.isVarArgs()) {
+      List<Node> params = functionType.getParameters();
+      if (!params.isEmpty()) {
+        // The last formal parameter in the list is the var_args parameter.
+        varArgsParameterType = getJSType(params.get(params.size() - 1));
+      }
+    }
+
+    // Iterate through all actual arguments provided in the call.
+    while (arguments.hasNext()) {
+      Node argument = arguments.next();
+      ordinal++; // Argument ordinal (1-based index)
+
+      JSType parameterType;
+      if (parameters.hasNext()) {
+        // If there are still formal parameters defined, use the next one.
+        Node currentParameterNode = parameters.next();
+        parameterType = getJSType(currentParameterNode);
+      } else if (functionType.isVarArgs() && varArgsParameterType != null) {
+        // All formal parameters have been consumed, but this is a var_args function.
+        // Use the type of the var_args parameter for subsequent arguments.
+        parameterType = varArgsParameterType;
+      } else {
+        // No more formal parameters and it's not a var_args function.
+        // These are excess arguments, which implicitly have an 'undefined' formal parameter type.
+        // This allows type mismatch warnings for such arguments (e.g., expecting undefined but got number).
+        parameterType = getNativeType(VOID_TYPE); // Represents 'undefined'
+      }
+
+      // Perform the type check for the current argument against its determined parameter type.
       validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+          getJSType(argument), parameterType, call, ordinal);
     }
 
+    // Existing argument count check logic remains unchanged.
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
