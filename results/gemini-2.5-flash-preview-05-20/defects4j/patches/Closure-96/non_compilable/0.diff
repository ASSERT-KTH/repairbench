diff --git a/tmp/efa67231-43df-4c41-9547-43ae494719f0_buggy.java b/tmp/0ccdd5ce-bda6-47ba-9e38-841833b1103d_fixed.java
index e0ecec8..37388ea 100644
--- a/tmp/efa67231-43df-4c41-9547-43ae494719f0_buggy.java
+++ b/tmp/0ccdd5ce-bda6-47ba-9e38-841833b1103d_fixed.java
@@ -1,35 +1,54 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
+    Node parameter = null; // This will hold the current formal parameter node or the var_args parameter node
     Node argument = null;
+
+    // First, check arguments against explicit formal parameters.
     while (arguments.hasNext() &&
            parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // If the function is a var_args function and there are still arguments,
+    // check remaining arguments against the var_args parameter.
+    // At this point, if functionType.isVarArgs() is true and the loop above
+    // exhausted the 'parameters' iterator, then 'parameter' will hold
+    // the var_args parameter node.
+    // If the 'arguments' iterator was exhausted first, then this block will be skipped.
+    if (functionType.isVarArgs()) {
+      // The 'parameter' variable should correctly hold the var_args parameter node
+      // because FunctionType.getParameters() includes the var_args parameter if present,
+      // and it would have been the last (or only) parameter consumed by parameters.next().
+      while (arguments.hasNext()) {
+        argument = arguments.next();
+        ordinal++;
+        // Use the same var_args parameter node for all subsequent arguments.
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), getJSType(parameter), call, ordinal);
+      }
+    }
+
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
