diff --git a/tmp/0b2789bc-534e-44ee-b47d-815c3d874237_buggy.java b/tmp/f5329bdb-7227-43f8-a3a1-979f6ee0ca63_fixed.java
index e0ecec8..99a5763 100644
--- a/tmp/0b2789bc-534e-44ee-b47d-815c3d874237_buggy.java
+++ b/tmp/f5329bdb-7227-43f8-a3a1-979f6ee0ca63_fixed.java
@@ -1,35 +1,50 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+
+    // First, iterate through explicitly defined parameters
+    while (arguments.hasNext() && parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // If the function is a var_args function and there are remaining arguments,
+    // check them against the var_args parameter type.
+    if (functionType.isVarArgs()) {
+      // For a var_args function, getRestFormalsType() provides the JSType
+      // of the individual elements within the var_args list.
+      // For example, for 'function f(...number)' it returns 'number'.
+      JSType varArgsElementType = functionType.getRestFormalsType();
+
+      while (arguments.hasNext()) {
+        argument = arguments.next();
+        ordinal++;
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), varArgsElementType, call, ordinal);
+      }
+    }
+
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
