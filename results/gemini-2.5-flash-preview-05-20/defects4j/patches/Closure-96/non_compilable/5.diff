diff --git a/tmp/18ec6a0b-0b9b-405a-8582-071826eca8f2_buggy.java b/tmp/9ae504c4-f832-4e4b-9f17-b48b2ca3e977_fixed.java
index e0ecec8..30964ec 100644
--- a/tmp/18ec6a0b-0b9b-405a-8582-071826eca8f2_buggy.java
+++ b/tmp/9ae504c4-f832-4e4b-9f17-b48b2ca3e977_fixed.java
@@ -1,35 +1,58 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
+    Node parameter = null; // This will hold the current formal parameter node
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+
+    // Iterate through all arguments provided in the call.
+    // The loop should continue as long as there are arguments to check.
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
 
+      if (parameters.hasNext()) {
+        // If there are more formal parameters defined, consume the next one.
+        parameter = parameters.next();
+      } else if (functionType.isVarArgs()) {
+        // If no more explicit formal parameters are left, but the function
+        // is a var_args function, then all remaining arguments should be
+        // checked against the var_args parameter.
+        // The 'parameter' variable should already hold the var_args parameter
+        // from the last call to parameters.next() (it's the last formal parameter),
+        // or if the function only has var_args, it would have been set in the first iteration.
+        // So, we reuse the existing 'parameter' which must be the var_args one.
+        // No action needed here other than letting 'parameter' retain its value.
+      } else {
+        // No more formal parameters and the function is not var_args.
+        // This means we have encountered excess arguments beyond what the
+        // function is defined to accept. The argument count check after the
+        // loop will report this as WRONG_ARGUMENT_COUNT.
+        // We stop individual argument type checking as there's no formal
+        // parameter to match them against.
+        break;
+      }
+
+      // At this point, 'parameter' should hold the relevant formal parameter
+      // (either a fixed one or the var_args one).
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
