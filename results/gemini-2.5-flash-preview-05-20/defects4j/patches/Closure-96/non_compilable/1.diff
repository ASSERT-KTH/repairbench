diff --git a/tmp/6a8eb586-1aac-4198-97e5-cd67fb089ed1_buggy.java b/tmp/47070ac8-b21c-4479-a64e-96407d9d2f0d_fixed.java
index e0ecec8..4d180f7 100644
--- a/tmp/6a8eb586-1aac-4198-97e5-cd67fb089ed1_buggy.java
+++ b/tmp/47070ac8-b21c-4479-a64e-96407d9d2f0d_fixed.java
@@ -1,35 +1,64 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
+    Node parameter = null; // Will hold the formal parameter node for type checking
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+
+    // Iterate through all arguments provided in the call.
+    // The loop continues as long as there are arguments to check.
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
 
+      // Determine the formal parameter corresponding to the current argument.
+      if (parameters.hasNext()) {
+        // There are still explicit formal parameters defined. Use the next one.
+        parameter = parameters.next();
+      } else if (functionType.isVarArgs()) {
+        // All explicit formal parameters have been consumed, but the function is var_args.
+        // In this case, 'parameter' should already hold the last formal parameter
+        // (which is the var_args parameter node from the previous iteration).
+        // For example, for `function f(a, ...b)`, after processing 'a', 'parameter'
+        // will hold the node for 'b'. Any subsequent arguments will also be checked
+        // against the type of 'b'.
+        // If the function has only var_args (e.g., `function f(...args)`), then
+        // `parameters.next()` would have set `parameter` to the 'args' node
+        // during the first argument. So, 'parameter' will always be valid here.
+        // No action needed for 'parameter' itself; it retains its last value.
+      } else {
+        // No more formal parameters and the function is not var_args.
+        // This means we have an excess argument for a non-var_args function.
+        // The argument count error will be reported by the logic outside this loop.
+        // We should stop type checking here to avoid potential NPE if 'parameter'
+        // is null (e.g., calling `function f(){}` with arguments) or
+        // to avoid reporting a less specific type error over a count error.
+        break;
+      }
+
+      // Perform the argument-parameter type matching.
+      // At this point, 'parameter' is guaranteed to be non-null if code execution reaches here.
+      // It would have been assigned from `parameters.next()` if parameters existed,
+      // or it would have retained a valid var_args parameter,
+      // or the loop would have broken if no parameters and not var_args.
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
