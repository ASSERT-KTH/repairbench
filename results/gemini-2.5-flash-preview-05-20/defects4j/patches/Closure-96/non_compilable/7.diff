diff --git a/tmp/94bf2ba2-6e72-4064-997d-7a4e709869eb_buggy.java b/tmp/1ec9807e-5fd0-40bb-850e-01a869bf51e4_fixed.java
index e0ecec8..f429461 100644
--- a/tmp/94bf2ba2-6e72-4064-997d-7a4e709869eb_buggy.java
+++ b/tmp/1ec9807e-5fd0-40bb-850e-01a869bf51e4_fixed.java
@@ -1,35 +1,58 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
+    arguments.next(); // skip the function name (e.g., "g" in "g(1, true)")
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
+    Node parameter = null; // Will store the current formal parameter node. For var_args, it will hold the var_args parameter.
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+
+    // Phase 1: Match arguments to explicit formal parameters.
+    // This loop continues as long as there are explicit parameters defined in the function signature.
+    while (parameters.hasNext()) {
+      parameter = parameters.next(); // Get the next formal parameter node.
+      if (!arguments.hasNext()) {
+        // We ran out of actual arguments before exhausting all formal parameters.
+        // This is primarily an argument count issue, which will be caught by the
+        // minArgs/maxArgs check at the end of the method. No more arguments
+        // to type-check against explicit parameters.
+        break;
+      }
+      argument = arguments.next(); // Get the next actual argument node.
+      ordinal++;
+
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(parameter), call, ordinal);
+    }
+
+    // Phase 2: If the function is a var_args function, match any remaining
+    // actual arguments against the var_args formal parameter.
+    // The 'parameter' variable at this point should hold the last formal
+    // parameter, which for var_args functions is the var_args parameter itself.
+    if (functionType.isVarArgs() && parameter != null) {
+      // Continue checking any remaining arguments against the var_args parameter.
+      while (arguments.hasNext()) {
         argument = arguments.next();
         ordinal++;
-
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
       }
+    }
 
-    int numArgs = call.getChildCount() - 1;
+    // Argument count validation (minArgs/maxArgs check) remains the same.
+    // This ensures that functions are called with the correct number of arguments.
+    int numArgs = call.getChildCount() - 1; // Subtract 1 for the function name node
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
