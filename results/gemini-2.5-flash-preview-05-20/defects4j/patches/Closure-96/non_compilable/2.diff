diff --git a/tmp/d7b50291-efe2-47e8-a4be-af005d3d9354_buggy.java b/tmp/0c53cff4-b56b-4651-a449-5d96290abdfc_fixed.java
index e0ecec8..88ccd84 100644
--- a/tmp/d7b50291-efe2-47e8-a4be-af005d3d9354_buggy.java
+++ b/tmp/0c53cff4-b56b-4651-a449-5d96290abdfc_fixed.java
@@ -1,35 +1,73 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
+    arguments.next(); // skip the function name (the function name itself is the first child)
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
-    int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+    // Get the formal parameters directly into a list for indexed access.
+    // This allows distinguishing between explicit parameters and var_args.
+    List<Node> formalParameters = new ArrayList<>();
+    for (Node p : functionType.getParameters()) {
+        formalParameters.add(p);
+    }
+    // formalParamIndex tracks the index of the formal parameter being matched.
+    // For var_args functions, it will "stick" to the index of the var_args parameter
+    // after all explicit parameters have been consumed.
+    int formalParamIndex = 0; 
+
+    int ordinal = 0; // 1-based argument position
+    Node parameter = null; // Will hold the current formal parameter node
+    Node argument = null; // Will hold the current argument node
+
+    // Iterate through all arguments provided in the call.
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++; 
 
+      if (formalParamIndex < formalParameters.size()) {
+        // We are either matching an explicit formal parameter or the first argument to a var_args parameter.
+        parameter = formalParameters.get(formalParamIndex);
+        
+        // If this is a var_args function and we are currently at the last formal parameter
+        // (which is expected to be the var_args parameter itself), then subsequent arguments
+        // (including this one) should all be matched against this same var_args parameter.
+        // In this case, we do NOT increment formalParamIndex.
+        if (functionType.isVarArgs() && formalParamIndex == formalParameters.size() - 1) {
+            // This 'parameter' is the var_args parameter. All subsequent arguments
+            // will also be matched against this 'parameter'.
+        } else {
+            // This is a regular explicit parameter. Move to the next formal parameter for the next argument.
+            formalParamIndex++;
+        }
+      } else if (functionType.isVarArgs()) {
+        // All explicit formal parameters have been consumed.
+        // If it's a var_args function, all remaining arguments should match
+        // against the var_args parameter, which is the last one in the formalParameters list.
+        // It's guaranteed that formalParameters is not empty if functionType.isVarArgs() is true.
+        parameter = formalParameters.get(formalParameters.size() - 1); // The var_args parameter
+      } else {
+        // This is a non-var_args function, and we have more arguments than formal parameters.
+        // These excess arguments will lead to a WRONG_ARGUMENT_COUNT error reported later.
+        // There is no formal parameter to match them against for type checking, so skip validation.
+        continue; 
+      }
+
+      // Perform the type validation for the current argument against its corresponding parameter.
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // The argument count check remains unchanged.
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
