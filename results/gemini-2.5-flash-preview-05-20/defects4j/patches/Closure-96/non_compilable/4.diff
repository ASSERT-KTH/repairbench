diff --git a/tmp/2c760c3a-1724-4591-b7ec-da59936f2c48_buggy.java b/tmp/ea0b4af0-4e68-4c46-b04d-711fcbec221f_fixed.java
index e0ecec8..10fa541 100644
--- a/tmp/2c760c3a-1724-4591-b7ec-da59936f2c48_buggy.java
+++ b/tmp/ea0b4af0-4e68-4c46-b04d-711fcbec221f_fixed.java
@@ -1,35 +1,60 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
+    arguments.next(); // skip the function name (function name itself is the first child)
+
+    // Get an iterator for the formal (non-variadic) parameters.
+    // The FunctionType's getParameters() usually returns only the fixed parameters,
+    // not the variadic one.
+    Iterator<Node> formalParameters = functionType.getParameters().iterator();
+
+    // Get the variadic parameter node, if it exists.
+    // This will be null if the function is not variadic.
+    Node varArgsParameter = functionType.getVarArgsParameter();
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+    Node parameterToValidateAgainst = null; // The formal parameter node for the current argument
+
+    // Iterate through all arguments provided in the call.
+    while (arguments.hasNext()) {
+      Node argument = arguments.next();
       ordinal++;
 
+      if (formalParameters.hasNext()) {
+        // If there are still formal parameters, match the current argument to the next one.
+        parameterToValidateAgainst = formalParameters.next();
+      } else if (functionType.isVarArgs() && varArgsParameter != null) {
+        // All formal parameters have been consumed. If the function is variadic,
+        // all subsequent arguments should be validated against the variadic parameter's type.
+        parameterToValidateAgainst = varArgsParameter;
+      } else {
+        // No more formal parameters and it's not a variadic function (or varArgsParameter was null).
+        // This means the current argument is an "excess" argument for a non-variadic function.
+        // In this case, we don't perform a type-check for this specific argument,
+        // as the WRONG_ARGUMENT_COUNT check later will report the primary error.
+        parameterToValidateAgainst = null;
+      }
+
+      // Perform type validation only if a corresponding parameter (formal or variadic) was found.
+      if (parameterToValidateAgainst != null) {
           validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+              getJSType(argument), getJSType(parameterToValidateAgainst), call, ordinal);
+      }
     }
 
-    int numArgs = call.getChildCount() - 1;
+    // After processing all arguments, check the total argument count against the function's
+    // minimum and maximum expected arguments.
+    int numArgs = call.getChildCount() - 1; // Subtract 1 for the function name itself
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
