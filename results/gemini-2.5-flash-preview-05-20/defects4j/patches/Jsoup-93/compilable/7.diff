diff --git a/tmp/2b374bc3-ce07-489e-a82e-15f721e7b0d2_buggy.java b/tmp/e17e806d-ebdc-4fc2-858c-724eccf18a04_fixed.java
index aa351ad..cfbb239 100644
--- a/tmp/2b374bc3-ce07-489e-a82e-15f721e7b0d2_buggy.java
+++ b/tmp/e17e806d-ebdc-4fc2-858c-724eccf18a04_fixed.java
@@ -1,41 +1,61 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
-            if (el.hasAttr("disabled")) continue; // skip disabled form inputs
+            // Skip disabled form inputs and those without a 'name' attribute
+            if (el.hasAttr("disabled")) continue;
             String name = el.attr("name");
             if (name.length() == 0) continue;
-            String type = el.attr("type");
 
+            String tagName = el.normalName();
+            // Determine the 'type' for input elements to handle them specifically
+            String type = tagName.equals("input") ? el.attr("type").toLowerCase() : "";
 
-            if ("select".equals(el.normalName())) {
+
+            if (tagName.equals("input")) {
+                if ("checkbox".equals(type) || "radio".equals(type)) {
+                    // Only add checkbox or radio if they have the 'checked' attribute
+                    if (el.hasAttr("checked")) {
+                        final String val = el.val().length() >  0 ? el.val() : "on";
+                        data.add(HttpConnection.KeyVal.create(name, val));
+                    }
+                } else if ("submit".equals(type) || "reset".equals(type) || "button".equals(type) || "image".equals(type)) {
+                    // Input types such as submit, reset, button, and image are not typically
+                    // included in the general form data unless they are the specific element
+                    // that triggered the form submission. For a general formData() dump, they are skipped.
+                    continue;
+                } else {
+                    // All other input types (text, hidden, password, email, number, etc.)
+                    data.add(HttpConnection.KeyVal.create(name, el.val()));
+                }
+            } else if (tagName.equals("select")) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
                 if (!set) {
+                    // If no option is explicitly selected, and it's a single-select dropdown,
+                    // the value of the first option is submitted.
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
-            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
-                // only add checkbox or radio if they have the checked attribute
-                if (el.hasAttr("checked")) {
-                    final String val = el.val().length() >  0 ? el.val() : "on";
-                    data.add(HttpConnection.KeyVal.create(name, val));
-                }
-            } else {
+            } else if (tagName.equals("textarea")) {
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
+            } else if (tagName.equals("button")) {
+                // <button> elements behave similarly to submit inputs; they only send data if clicked.
+                // For a general formData() dump, they are excluded for consistency.
+                continue;
             }
+            // Other elements (e.g., fieldset, output) are not considered data-submitting controls in this context.
         }
         return data;
     }
\ No newline at end of file
