diff --git a/tmp/b3e5b42a-d08e-4c0d-aab4-d841ad0ab98f_buggy.java b/tmp/c9eb5872-5537-43c1-9d7f-aeea9259fd37_fixed.java
index aa351ad..61ce203 100644
--- a/tmp/b3e5b42a-d08e-4c0d-aab4-d841ad0ab98f_buggy.java
+++ b/tmp/c9eb5872-5537-43c1-9d7f-aeea9259fd37_fixed.java
@@ -1,41 +1,69 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
-            if (el.hasAttr("disabled")) continue; // skip disabled form inputs
+            // Skip elements that are not form submittable (e.g., div, p)
+            if (!el.tag().isFormSubmittable()) continue; 
+            // Skip disabled form inputs
+            if (el.hasAttr("disabled")) continue; 
+            
             String name = el.attr("name");
+            // Skip elements without a name attribute
             if (name.length() == 0) continue;
-            String type = el.attr("type");
 
+            String normalName = el.normalName(); // Get the normalized tag name (e.g., "input", "select", "textarea", "button")
+            String type = el.attr("type"); // Only relevant for <input> elements
 
-            if ("select".equals(el.normalName())) {
+            if ("select".equals(normalName)) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
-                if (!set) {
+                if (!set) { // if no option is selected, the first one is submitted (browser behavior)
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
-            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+            } else if ("input".equals(normalName)) {
+                // Handle different input types
+                if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                     // only add checkbox or radio if they have the checked attribute
                     if (el.hasAttr("checked")) {
                         final String val = el.val().length() >  0 ? el.val() : "on";
                         data.add(HttpConnection.KeyVal.create(name, val));
                     }
+                } else if ("button".equalsIgnoreCase(type) ||
+                           "submit".equalsIgnoreCase(type) ||
+                           "reset".equalsIgnoreCase(type) ||
+                           "file".equalsIgnoreCase(type) ||
+                           "image".equalsIgnoreCase(type)) {
+                    // These input types are typically not included in formData() for a generic form submission.
+                    // For 'file', el.val() returns empty string if no file is selected.
+                    // For 'submit'/'image'/'button', they are only included if they were the activating element, not in a general formData scan.
+                    continue; // Skip these specific input types
                 } else {
+                    // Default input types like text, hidden, password, email, number, etc.
                     data.add(HttpConnection.KeyVal.create(name, el.val()));
                 }
+            } else if ("textarea".equals(normalName)) {
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            } else if ("button".equals(normalName)) {
+                // The <button> tag itself (not <input type="button">).
+                // Similar to input[type=submit], its value is typically only included if it initiated the submission.
+                // For a general formData() collection, skip it.
+                continue;
+            }
+            // Other tags that are isFormSubmittable() (e.g., <datalist>) are not covered by standard form data collection.
+            // Jsoup's Tag.isFormSubmittable() currently covers input, select, textarea, button.
+            // All these are handled by the above if/else if blocks.
         }
         return data;
     }
\ No newline at end of file
