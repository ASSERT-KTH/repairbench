diff --git a/tmp/e24e21c7-f1bd-4ee7-9b4f-9a295845e95f_buggy.java b/tmp/642251c3-5fd4-4027-b839-44837326e7a8_fixed.java
index aa351ad..452ab5a 100644
--- a/tmp/e24e21c7-f1bd-4ee7-9b4f-9a295845e95f_buggy.java
+++ b/tmp/642251c3-5fd4-4027-b839-44837326e7a8_fixed.java
@@ -1,41 +1,63 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
+            // The original `el.tag().isFormSubmittable()` check, in some Jsoup versions,
+            // only checks the tag name (e.g., "input") but not the `type` attribute
+            // for `<input>` elements. This means `input[type=button]` or `input[type=file]`
+            // might incorrectly pass this check if the Tag is merely 'input'.
+            // HTML specification dictates certain input types (like button, reset, submit, file, image)
+            // are not submitted as standard key-value pairs.
+            // We need to explicitly filter these out.
+            if (!el.tag().isFormSubmittable()) continue; 
+            
             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
             String name = el.attr("name");
             if (name.length() == 0) continue;
-            String type = el.attr("type");
+            String type = el.attr("type"); // Type attribute is crucial for input elements
 
+            // Explicitly exclude certain input types that do not submit a simple key-value pair
+            // or are not intended for form submission (e.g., buttons).
+            if ("input".equalsIgnoreCase(el.normalName())) {
+                if ("button".equalsIgnoreCase(type) ||
+                    "reset".equalsIgnoreCase(type) ||
+                    "submit".equalsIgnoreCase(type) ||
+                    "file".equalsIgnoreCase(type) || // File inputs require special handling for actual file content
+                    "image".equalsIgnoreCase(type)) { // Image inputs submit x/y coordinates, not just value via `val()`
+                    continue; 
+                }
+            }
 
             if ("select".equals(el.normalName())) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
-                if (!set) {
+                if (!set) { // if no option is selected, HTML spec says to use the first option
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
             } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                 // only add checkbox or radio if they have the checked attribute
                 if (el.hasAttr("checked")) {
                     final String val = el.val().length() >  0 ? el.val() : "on";
                     data.add(HttpConnection.KeyVal.create(name, val));
                 }
             } else {
+                // This 'else' block will now correctly handle other standard submittable elements
+                // like text inputs, hidden inputs, password inputs, textarea, etc.,
+                // which were not filtered out by the specific 'input' type check above.
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
         return data;
     }
\ No newline at end of file
