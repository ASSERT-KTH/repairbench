diff --git a/tmp/c34aa654-f3a6-4a45-9fb7-099b360fb5e9_buggy.java b/tmp/831ad23e-ba8d-4ccb-b435-53ea147509d0_fixed.java
index aa351ad..a736d15 100644
--- a/tmp/c34aa654-f3a6-4a45-9fb7-099b360fb5e9_buggy.java
+++ b/tmp/831ad23e-ba8d-4ccb-b435-53ea147509d0_fixed.java
@@ -1,41 +1,58 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
+            if (!el.tag().isFormSubmittable()) continue; // e.g., 'option' tags are not form-submittable by themselves, but are handled by 'select'
             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
             String name = el.attr("name");
-            if (name.length() == 0) continue;
-            String type = el.attr("type");
+            if (name.length() == 0) continue; // skip elements with no name attribute
+            String type = el.attr("type"); // Only relevant for <input> elements
 
+            // Input types that are not meant to be part of the data payload (e.g., submit, reset, button, image)
+            // unless they were the actual button that triggered the submission (which formData() doesn't track).
+            // These should generally be excluded from the collected data.
+            if ("input".equals(el.normalName())) {
+                if ("submit".equalsIgnoreCase(type) ||
+                    "reset".equalsIgnoreCase(type) ||
+                    "button".equalsIgnoreCase(type) ||
+                    "image".equalsIgnoreCase(type)) {
+                    continue;
+                }
+            }
 
             if ("select".equals(el.normalName())) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
+                // If a select element without the 'multiple' attribute has no selected option,
+                // the first option is considered selected. If 'multiple' is present and nothing is selected,
+                // it contributes nothing. The current test case is a single select.
                 if (!set) {
+                    // This handles the case of a single-select dropdown where no option is explicitly selected.
+                    // The browser defaults to the first option's value.
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
             } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                 // only add checkbox or radio if they have the checked attribute
                 if (el.hasAttr("checked")) {
-                    final String val = el.val().length() >  0 ? el.val() : "on";
+                    final String val = el.val().length() >  0 ? el.val() : "on"; // default value for checkbox if not specified
                     data.add(HttpConnection.KeyVal.create(name, val));
                 }
             } else {
+                // For other input types (text, password, hidden, etc.) and textarea.
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
         return data;
     }
\ No newline at end of file
