diff --git a/tmp/19771cbc-75c5-4228-9aa0-87930805ebcc_buggy.java b/tmp/911e9c45-cbd7-47ab-a00a-296f644f0306_fixed.java
index aa351ad..c28fa67 100644
--- a/tmp/19771cbc-75c5-4228-9aa0-87930805ebcc_buggy.java
+++ b/tmp/911e9c45-cbd7-47ab-a00a-296f644f0306_fixed.java
@@ -1,41 +1,61 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
-            if (el.hasAttr("disabled")) continue; // skip disabled form inputs
+            // Check if the element's tag is submittable (e.g., input, select, textarea).
+            // This filters out non-form elements or elements like fieldset.
+            if (!el.tag().isFormSubmittable()) continue;
+
+            // Skip disabled form inputs as they are not submitted.
+            if (el.hasAttr("disabled")) continue;
+
             String name = el.attr("name");
+            // Skip elements without a name attribute, as they are not submitted.
             if (name.length() == 0) continue;
+
             String type = el.attr("type");
 
+            // According to HTML spec, input types "button" and "reset" are not submitted.
+            // Even if el.tag().isFormSubmittable() might sometimes incorrectly include them
+            // depending on the Jsoup version or specific tag definition,
+            // they must be explicitly excluded from form data.
+            if ("button".equalsIgnoreCase(type) || "reset".equalsIgnoreCase(type)) {
+                continue;
+            }
 
             if ("select".equals(el.normalName())) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
+                // If no option was explicitly selected, and it's not a multiple select,
+                // the first option in the select element is typically submitted by default.
+                // Jsoup follows this behavior for general form data collection.
                 if (!set) {
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
             } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
-                // only add checkbox or radio if they have the checked attribute
+                // Only add checkboxes and radios if they have the 'checked' attribute.
                 if (el.hasAttr("checked")) {
+                    // If a checkbox/radio has no value attribute, its submitted value defaults to "on".
                     final String val = el.val().length() >  0 ? el.val() : "on";
                     data.add(HttpConnection.KeyVal.create(name, val));
                 }
             } else {
+                // For all other submittable input types (text, hidden, password, file, etc.) and textarea,
+                // add their name and value.
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
         return data;
     }
\ No newline at end of file
