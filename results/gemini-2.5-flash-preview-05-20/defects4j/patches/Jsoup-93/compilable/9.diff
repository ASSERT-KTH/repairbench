diff --git a/tmp/5542852a-17bf-497a-8e6e-5fcfe031c73b_buggy.java b/tmp/e9cedb1d-9dd7-4f17-bef9-9ff3fd22a031_fixed.java
index aa351ad..e6ad0c8 100644
--- a/tmp/5542852a-17bf-497a-8e6e-5fcfe031c73b_buggy.java
+++ b/tmp/e9cedb1d-9dd7-4f17-bef9-9ff3fd22a031_fixed.java
@@ -1,41 +1,64 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
-            if (el.hasAttr("disabled")) continue; // skip disabled form inputs
+            // Standard HTML form submission rules:
+            // 1. Elements must have a 'name' attribute with a non-empty value.
+            // 2. Elements must not be 'disabled'.
+            if (!el.hasAttr("name") || el.attr("name").length() == 0) {
+                continue;
+            }
+            if (el.hasAttr("disabled")) {
+                continue;
+            }
+
             String name = el.attr("name");
-            if (name.length() == 0) continue;
-            String type = el.attr("type");
+            String normalName = el.normalName(); // Tag name (e.g., "input", "select", "textarea")
+            String type = el.attr("type"); // 'type' attribute, primarily for input elements
 
-
-            if ("select".equals(el.normalName())) {
+            if ("select".equals(normalName)) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
-                if (!set) {
+                if (!set) { // nothing selected in select, so default to first option if available
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
-            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
-                // only add checkbox or radio if they have the checked attribute
+            } else if ("input".equals(normalName)) {
+                // Handle different input types according to HTML submission rules
+                if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                    // Only add checkbox or radio if they have the 'checked' attribute
                     if (el.hasAttr("checked")) {
                         final String val = el.val().length() >  0 ? el.val() : "on";
                         data.add(HttpConnection.KeyVal.create(name, val));
                     }
+                } else if ("button".equalsIgnoreCase(type) ||
+                           "submit".equalsIgnoreCase(type) ||
+                           "reset".equalsIgnoreCase(type) ||
+                           "image".equalsIgnoreCase(type)) {
+                    // These input types do not submit a value as part of standard form data extraction
+                    // (they are typically triggered by user click, not collected by default).
+                    continue;
                 } else {
+                    // Default behavior for other input types (text, hidden, password, file etc.): add their value.
+                    // For 'file' input, el.val() returns the filename if a file is selected, or empty string.
                     data.add(HttpConnection.KeyVal.create(name, el.val()));
                 }
+            } else if ("textarea".equals(normalName)) {
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+            // Elements with other tag names (e.g., <button>) that are part of the 'elements' collection
+            // but not explicitly handled above would be skipped, which is generally correct for form data extraction.
         }
         return data;
     }
\ No newline at end of file
