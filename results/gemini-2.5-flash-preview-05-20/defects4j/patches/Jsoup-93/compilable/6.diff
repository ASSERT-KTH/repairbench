diff --git a/tmp/87cf5ad5-eefe-4f91-9cc7-24f3b93c42af_buggy.java b/tmp/5d59b82d-64e7-4d7b-8471-163475f5077f_fixed.java
index aa351ad..16d2f80 100644
--- a/tmp/87cf5ad5-eefe-4f91-9cc7-24f3b93c42af_buggy.java
+++ b/tmp/5d59b82d-64e7-4d7b-8471-163475f5077f_fixed.java
@@ -1,41 +1,63 @@
     /**
      * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
      * list will not be reflected in the DOM.
      * @return a list of key vals
      */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
         // iterate the form control elements and accumulate their values
         for (Element el: elements) {
             if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
             String name = el.attr("name");
             if (name.length() == 0) continue;
-            String type = el.attr("type");
+            String type = el.attr("type"); // The 'type' attribute for input elements
 
+            // Get the element's normal name (e.g., "input", "select", "textarea", "button")
+            String normalName = el.normalName();
 
-            if ("select".equals(el.normalName())) {
+            // Skip specific input types and the <button> tag itself that are not included in general form data.
+            // These are typically only submitted if they are the activating control (e.g., clicked submit button).
+            if ("input".equals(normalName)) {
+                if ("button".equalsIgnoreCase(type) ||
+                    "submit".equalsIgnoreCase(type) ||
+                    "reset".equalsIgnoreCase(type) ||
+                    "image".equalsIgnoreCase(type)) {
+                    continue; // Skip these specific input types
+                }
+            } else if ("button".equals(normalName)) {
+                // The <button> tag (default type="submit") also acts as a submit button
+                // and should generally be skipped from the data set unless it's the activated button.
+                continue;
+            }
+
+
+            if ("select".equals(normalName)) { // Use normalName consistently for tag type checks
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                     set = true;
                 }
                 if (!set) {
+                    // if nothing is selected, the first option is used for single-select.
+                    // For multi-select, if nothing is selected, nothing is submitted. Jsoup's current behavior
+                    // captures the first option if present and nothing is selected, which is common.
                     Element option = el.select("option").first();
                     if (option != null)
                         data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
             } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                 // only add checkbox or radio if they have the checked attribute
                 if (el.hasAttr("checked")) {
                     final String val = el.val().length() >  0 ? el.val() : "on";
                     data.add(HttpConnection.KeyVal.create(name, val));
                 }
             } else {
+                // This covers textarea and other input types like text, hidden, password, file, etc.
                 data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
         return data;
     }
\ No newline at end of file
