diff --git a/tmp/a3deecc7-d94d-45ba-a2e0-dd4b92acf2e7_buggy.java b/tmp/e43a8e82-c3f3-4d6c-8b7e-e0f4321fa6ba_fixed.java
index 90fe130..570bc29 100644
--- a/tmp/a3deecc7-d94d-45ba-a2e0-dd4b92acf2e7_buggy.java
+++ b/tmp/e43a8e82-c3f3-4d6c-8b7e-e0f4321fa6ba_fixed.java
@@ -1,61 +1,88 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+
+        // Check for minimum length of language code
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Validate language code (first two chars)
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        if (len == 2) {
-            return new Locale(str, "");
-        } else {
-            if (str.charAt(2) != '_') {
+
+        String language = str.substring(0, 2);
+
+        if (len == 2) { // Language only: "en"
+            return new Locale(language, "");
+        } else { // len > 2, must have separators or country/variant
+            if (str.charAt(2) != '_') { // Third char must be underscore if more components
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+
+            // Check for "ll__VVV" format (language, empty country, variant)
+            // This is indicated by two consecutive underscores: "ll__"
+            if (len >= 4 && str.charAt(3) == '_') {
+                if (len == 4) { // "ll__" is not valid, needs a variant
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                // Format is "ll__VVV"
+                String variant = str.substring(4);
+                return new Locale(language, "", variant);
+            }
+
+            // If not "ll__VVV", then it must be "ll_CC..." or "ll_CC_VVV..."
+            // Expecting a 2-char uppercase country code
+            if (len < 5) { // e.g., "en_G" (too short for country)
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             char ch3 = str.charAt(3);
             char ch4 = str.charAt(4);
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
-                if (str.charAt(5) != '_') {
+            String country = str.substring(3, 5);
+
+            if (len == 5) { // Language and Country: "en_GB"
+                return new Locale(language, country);
+            } else { // len > 5, must have variant
+                if (str.charAt(5) != '_') { // Sixth char must be underscore if variant present
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+                String variant = str.substring(6);
+                return new Locale(language, country, variant);
             }
         }
     }
\ No newline at end of file
