diff --git a/tmp/3cf59009-2ee5-4fa4-8d46-1bb52a6f58a1_buggy.java b/tmp/d60e87d2-7cf5-4f6c-9dfe-8d972fbd7670_fixed.java
index 90fe130..d99f1c9 100644
--- a/tmp/3cf59009-2ee5-4fa4-8d46-1bb52a6f58a1_buggy.java
+++ b/tmp/d60e87d2-7cf5-4f6c-9dfe-8d972fbd7670_fixed.java
@@ -1,61 +1,69 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+
+        // Validate length broadly first.
+        // Valid lengths are 2 (ll), 5 (ll_CC), or >=6 (ll_CC_VVV or ll__VVV)
+        // This means invalid lengths are 0, 1, 3, 4.
+        if (len < 2 || len == 3 || len == 4) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
+        // Validate language chars (first two must be lowercase a-z)
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Handle language-only case
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // At this point, len must be >= 5 (since 3, 4 are invalid lengths).
+        // It must be "ll_..." format.
+        // Validate first separator (must be '_')
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Check for the missing country code case (ll__VVV)
+        if (str.charAt(3) == '_') {
+            // This is the ll__VVV format. Variant starts at index 4.
+            // Minimum length for ll__V is 6 (e.g., "fr__A").
+            if (len < 6) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            String language = str.substring(0, 2);
+            String variant = str.substring(4); // Variant starts after "ll__"
+            return new Locale(language, "", variant);
+        }
+
+        // If not ll__VVV, then it must be ll_CC or ll_CC_VVV
+        // Validate country code chars (uppercase A-Z)
         char ch3 = str.charAt(3);
         char ch4 = str.charAt(4);
         if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
+
+        // At this point, format is "ll_CC" or "ll_CC_..." and len >= 5
+        if (len == 5) { // It's ll_CC
             return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+        }
+
+        // At this point, len > 5 and format is "ll_CC_..."
+        // Validate second separator (must be '_')
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
-            }
-        }
+
+        // All good for ll_CC_VVV
+        String language = str.substring(0, 2);
+        String country = str.substring(3, 5);
+        String variant = str.substring(6); // Variant starts after "ll_CC_"
+        return new Locale(language, country, variant);
     }
\ No newline at end of file
