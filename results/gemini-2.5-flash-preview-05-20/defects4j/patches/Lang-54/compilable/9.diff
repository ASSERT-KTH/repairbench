diff --git a/tmp/343e1323-761c-446d-ac72-6d0e376afd57_buggy.java b/tmp/b2690ddb-2c14-4717-92af-0a48c80533f6_fixed.java
index 90fe130..c7ff645 100644
--- a/tmp/343e1323-761c-446d-ac72-6d0e376afd57_buggy.java
+++ b/tmp/b2690ddb-2c14-4717-92af-0a48c80533f6_fixed.java
@@ -1,61 +1,95 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")  (new case)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+
+        // Language code check (2 chars, lowercase)
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Handle 'll' format
         if (len == 2) {
             return new Locale(str, "");
-        } else {
-            if (str.charAt(2) != '_') {
+        }
+
+        // Handle 'll_...' formats (country or variant start with '_')
+        if (str.charAt(2) != '_') { // Separator must be '_'
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+
+        // Minimum length for any string with a separator (e.g., "en_")
+        if (len < 4) { // "en_" would be len 3, which is invalid. "en__" would be len 4.
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         char ch3 = str.charAt(3);
+
+        if (ch3 == '_') { // Format is 'll__VAR'
+            // Language: str.substring(0, 2)
+            // Country: "" (empty)
+            // Variant: str.substring(4) (starts from index 4)
+            return new Locale(str.substring(0, 2), "", str.substring(4));
+
+        } else { // Format is 'll_CC...'
+            // Country code check (2 chars, uppercase)
+            if (len < 5) { // "en_G" would be len 4, which is invalid for ll_CC
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
             char ch4 = str.charAt(4);
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+
+            // Valid country code found at index 3, 4
+            String language = str.substring(0, 2);
+            String country = str.substring(3, 5);
+
+            // Handle 'll_CC' format
             if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
-                if (str.charAt(5) != '_') {
+                return new Locale(language, country);
+            }
+
+            // Handle 'll_CC_VAR' format (len > 5)
+            if (str.charAt(5) != '_') { // Separator for variant must be '_'
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
-            }
+            // Variant starts from index 6
+            String variant = str.substring(6);
+            return new Locale(language, country, variant);
         }
     }
\ No newline at end of file
