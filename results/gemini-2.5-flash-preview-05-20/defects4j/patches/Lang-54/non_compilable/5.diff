diff --git a/tmp/be7406f0-eddd-4f5d-9bc4-2db5e471ee9b_buggy.java b/tmp/1dd58e3b-e3e2-444a-9f9c-e12588cfa0da_fixed.java
index 90fe130..073a1cd 100644
--- a/tmp/be7406f0-eddd-4f5d-9bc4-2db5e471ee9b_buggy.java
+++ b/tmp/1dd58e3b-e3e2-444a-9f9c-e12588cfa0da_fixed.java
@@ -1,61 +1,107 @@
+import java.util.Locale;
+
+public class LocaleUtils {
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+
+        // Initial length check:
+        // 'll' (len 2)
+        // 'll_CC' (len 5)
+        // 'll__VVV' (len >= 6, e.g., 'll__V')
+        // 'll_CC_VVV' (len >= 7, e.g., 'll_CC_V')
+        // Any other lengths for these specific patterns are invalid.
+        // So, lengths 0, 1, 3, 4 are always invalid.
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         if (len == 2) {
             return new Locale(str, "");
         } else {
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+
+            // At this point, we have "ll_..."
+            // The length must be at least 5 for "ll_CC" or 6 for "ll__V"
+            if (len < 5) { // e.g. "en_", "en_G"
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+
+            // Check if it's "ll__VVV" (empty country code) or "ll_CC_VVV" (with country code)
+            if (str.charAt(3) == '_') {
+                // This is 'll__VVV' format, e.g., "fr__POSIX"
+                // The country part is empty.
+                // Length must be at least 6 for "ll__V".
+                if (len < 6) { // e.g. "en__" (len=5)
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                // Language is str.substring(0,2)
+                // Country is ""
+                // Variant is str.substring(4)
+                return new Locale(str.substring(0, 2), "", str.substring(4));
+            } else {
+                // This is 'll_CC...' format, e.g., "en_GB", "en_GB_xxx"
+                // It must have a two-letter country code.
                 char ch3 = str.charAt(3);
                 char ch4 = str.charAt(4);
                 if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
+
                 if (len == 5) {
+                    // This is 'll_CC' format, e.g., "en_GB"
                     return new Locale(str.substring(0, 2), str.substring(3, 5));
                 } else {
+                    // len > 5 and starts with 'll_CC'
+                    // It must be 'll_CC_VVV' format
                     if (str.charAt(5) != '_') {
                         throw new IllegalArgumentException("Invalid locale format: " + str);
                     }
+                    // Length must be at least 7 for "ll_CC_V".
+                    if (len < 7) { // e.g. "en_GB_" (len=6)
+                        throw new IllegalArgumentException("Invalid locale format: " + str);
+                    }
                     return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
                 }
             }
         }
+    }
+}
\ No newline at end of file
