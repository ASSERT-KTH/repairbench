diff --git a/tmp/c7334b43-50fb-4716-86ed-db6e189d0ba5_buggy.java b/tmp/51bef1e6-4dbd-44ad-a875-51d57226bb0c_fixed.java
index 90fe130..1e0d6b7 100644
--- a/tmp/c7334b43-50fb-4716-86ed-db6e189d0ba5_buggy.java
+++ b/tmp/51bef1e6-4dbd-44ad-a875-51d57226bb0c_fixed.java
@@ -1,61 +1,113 @@
+import java.util.Locale;
+
+public class LocaleUtils {
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")  (LANG-328)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+
+        // Language validation (first two characters)
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Case 1: Just language (e.g., "en")
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // Case 2: Language + Country or Variant (e.g., "en_GB", "fr__POSIX", "en_GB_VAR")
+        // Must have an underscore after language
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        String language = str.substring(0, 2);
+        String country = "";
+        String variant = "";
+
+        // Find the second underscore, if it exists, starting search from index 3
+        int firstUnderscoreIdx = 2;
+        int secondUnderscoreIdx = str.indexOf('_', firstUnderscoreIdx + 1);
+
+        if (secondUnderscoreIdx == -1) {
+            // No second underscore found. Format must be LL_CC.
+            // Length must be exactly 5.
+            if (len != 5) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Validate and extract country code (2 uppercase chars)
             char ch3 = str.charAt(3);
             char ch4 = str.charAt(4);
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+            country = str.substring(3, 5);
         } else {
-                if (str.charAt(5) != '_') {
+            // Second underscore found. Format could be LL_CC_V or LL__V.
+            String countryOrEmpty = str.substring(firstUnderscoreIdx + 1, secondUnderscoreIdx);
+
+            if (countryOrEmpty.length() == 0) {
+                // LL__V: Country is empty. Variant starts after the second underscore.
+                country = "";
+                // Variant part must not be empty if there's a second underscore.
+                if (secondUnderscoreIdx + 1 >= len) { // Means "LL__"
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                variant = str.substring(secondUnderscoreIdx + 1);
+            } else if (countryOrEmpty.length() == 2) {
+                // LL_CC_V: Country code is present.
+                // Validate country code (2 uppercase chars)
+                char chCountry0 = countryOrEmpty.charAt(0);
+                char chCountry1 = countryOrEmpty.charAt(1);
+                if (chCountry0 < 'A' || chCountry0 > 'Z' || chCountry1 < 'A' || chCountry1 > 'Z') {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                country = countryOrEmpty;
+                // Variant part must not be empty if there's a third underscore.
+                if (secondUnderscoreIdx + 1 >= len) { // Means "LL_CC_"
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                variant = str.substring(secondUnderscoreIdx + 1);
+            } else {
+                // Invalid length for the country part (e.g., "en_G_V" or "en_GBX_V")
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
         }
+        return new Locale(language, country, variant);
     }
 }
\ No newline at end of file
