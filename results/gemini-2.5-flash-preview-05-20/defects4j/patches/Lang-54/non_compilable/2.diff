diff --git a/tmp/897b4552-cde9-4303-a96e-2d422c259a59_buggy.java b/tmp/21bd25ef-f45c-44b1-9398-869a7e5ffb86_fixed.java
index 90fe130..01c4011 100644
--- a/tmp/897b4552-cde9-4303-a96e-2d422c259a59_buggy.java
+++ b/tmp/21bd25ef-f45c-44b1-9398-869a7e5ffb86_fixed.java
@@ -1,61 +1,106 @@
+import java.util.Locale;
+
+public class LocaleUtils {
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")   (LANG-328)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+
+        // Adjust initial length check to accommodate "xx__VVV" format.
+        // Valid lengths are 2 ("ll"), 5 ("ll_CC"), or >= 6 ("ll__VVV" or "ll_CC_VVV").
+        // Invalid lengths are 0, 1, 3, 4.
+        if (len < 2 || len == 3 || len == 4) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Validate language part (first two characters)
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Case 1: Language only (e.g., "en")
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        } else { // len is 5 or >= 6
+            // All formats beyond language-only require an underscore at index 2
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+
+            // Now we have "xx_..."
+            // Check for "xx__VVV" pattern (empty country code, variant present)
+            // This is identified by a second underscore at index 3
+            if (str.charAt(3) == '_') {
+                // For "xx__VVV", the minimum length is 6 (e.g., "en__A")
+                if (len < 6) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                String variant = str.substring(4);
+                // Variant part must not be empty (e.g., "en__" is invalid)
+                if (variant.length() == 0) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                return new Locale(str.substring(0, 2), "", variant);
+
+            } else { // It must be "xx_YY" or "xx_YY_VVV"
+                // Validate country part (characters at index 3 and 4)
                 char ch3 = str.charAt(3);
                 char ch4 = str.charAt(4);
                 if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
+
+                // Case 2: Language and Country (e.g., "en_GB")
                 if (len == 5) {
                     return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+                } else { // len > 5, must be "xx_YY_VVV"
+                    // For "xx_YY_VVV", a second underscore is required at index 5
                     if (str.charAt(5) != '_') {
                         throw new IllegalArgumentException("Invalid locale format: " + str);
                     }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+                    // Variant part must exist, so min length is 7 (e.g., "en_GB_A")
+                    if (len < 7) {
+                        throw new IllegalArgumentException("Invalid locale format: " + str);
+                    }
+                    String variant = str.substring(6);
+                    // Variant part cannot be empty (e.g., "en_GB_")
+                    if (variant.length() == 0) {
+                        throw new IllegalArgumentException("Invalid locale format: " + str);
+                    }
+                    return new Locale(str.substring(0, 2), str.substring(3, 5), variant);
+                }
+            }
         }
     }
 }
\ No newline at end of file
