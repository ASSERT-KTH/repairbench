diff --git a/tmp/31baab62-9252-48da-89f0-6d1421f07e7b_buggy.java b/tmp/fbcbb1b2-5832-4010-9288-8227668d7157_fixed.java
index 90fe130..8c21970 100644
--- a/tmp/31baab62-9252-48da-89f0-6d1421f07e7b_buggy.java
+++ b/tmp/fbcbb1b2-5832-4010-9288-8227668d7157_fixed.java
@@ -1,61 +1,118 @@
+import java.util.Locale;
+
+public class LocaleUtils {
+
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
+
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+
+        // Language code must be at least 2 characters and lowercase
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        if (len == 2) {
+
+        int firstUnderscore = str.indexOf('_');
+
+        // Case 1: Only language (ll)
+        if (firstUnderscore == -1) {
+            if (len != 2) { // must be exactly 2 chars if no underscore
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
             return new Locale(str, "");
-        } else {
-            if (str.charAt(2) != '_') {
+        }
+
+        // Case 2: Language and something else (ll_...)
+        String language = str.substring(0, 2);
+
+        // First underscore must be immediately after the language code (at index 2)
+        if (firstUnderscore != 2) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+
+        int secondUnderscore = str.indexOf('_', firstUnderscore + 1);
+
+        // Case 2a: ll_CC (no second underscore)
+        if (secondUnderscore == -1) {
+            if (len != 5) { // Must be 5 chars for ll_CC (e.g., "en_GB")
                  throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             char ch3 = str.charAt(3);
             char ch4 = str.charAt(4);
+            // Country code must be 2 uppercase letters
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
-                if (str.charAt(5) != '_') {
+            String country = str.substring(3, 5);
+            return new Locale(language, country);
+
+        } else { // Case 2b: ll_CC_VVV or ll__VVV (second underscore exists)
+            String country;
+            String variant;
+            
+            // Check for empty country (ll__VVV) where second underscore is right after first
+            if (secondUnderscore == firstUnderscore + 1) { // e.g., "fr__POSIX"
+                country = "";
+                // Variant must not be empty
+                if (secondUnderscore + 1 >= len) {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+                variant = str.substring(secondUnderscore + 1);
+            } else { // ll_CC_VVV
+                // Country code must be 2 characters between first and second underscore
+                if (secondUnderscore != firstUnderscore + 3) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                char ch3 = str.charAt(firstUnderscore + 1); // str.charAt(3)
+                char ch4 = str.charAt(firstUnderscore + 2); // str.charAt(4)
+                // Country code must be 2 uppercase letters
+                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                country = str.substring(firstUnderscore + 1, secondUnderscore); // str.substring(3, 5)
+                
+                // Variant must not be empty
+                if (secondUnderscore + 1 >= len) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                variant = str.substring(secondUnderscore + 1);
+            }
+            return new Locale(language, country, variant);
         }
     }
 }
\ No newline at end of file
