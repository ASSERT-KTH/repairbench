diff --git a/tmp/af86d418-a14b-4596-b3b2-e31987251d92_buggy.java b/tmp/81bfd795-586e-40bf-b407-8218c7193c46_fixed.java
index 90fe130..4b3a145 100644
--- a/tmp/af86d418-a14b-4596-b3b2-e31987251d92_buggy.java
+++ b/tmp/81bfd795-586e-40bf-b407-8218c7193c46_fixed.java
@@ -1,61 +1,103 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+
+        // Language code validation
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Handle language only (e.g., "en")
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // If length > 2, the 3rd character must be an underscore.
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
+
+        // Find the second underscore, if any, starting search from index 3.
+        // This helps differentiate between lang_country and lang_country_variant / lang__variant.
+        int secondUnderscore = str.indexOf('_', 3);
+
+        String language = str.substring(0, 2);
+        String country = "";
+        String variant = "";
+
+        if (secondUnderscore == -1) { // Only one underscore found: lang_country (e.g., "en_GB")
+            // For this format, the total length must be 5 (2-char lang + _ + 2-char country)
+            if (len != 5) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            country = str.substring(3, 5);
+            char ch3 = country.charAt(0);
+            char ch4 = country.charAt(1);
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
-                if (str.charAt(5) != '_') {
+            return new Locale(language, country);
+
+        } else { // Two or more underscores: lang_country_variant or lang__variant (e.g., "en_GB_xxx", "fr__POSIX")
+            // The country part is between the first and second underscore.
+            // It can be empty for formats like "fr__POSIX".
+            country = str.substring(3, secondUnderscore);
+            
+            // Validate country part if it's not empty.
+            if (country.length() > 0) {
+                if (country.length() != 2) { // Country code must be 2 characters if present.
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+                char ch3 = country.charAt(0);
+                char ch4 = country.charAt(1);
+                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+            }
+            
+            // The variant part starts after the second underscore.
+            variant = str.substring(secondUnderscore + 1);
+            
+            // The variant part must not be empty if the second underscore is present.
+            // e.g., "en_GB_" or "fr__" are invalid.
+            if (variant.length() == 0) {
+                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+
+            return new Locale(language, country, variant);
         }
     }
\ No newline at end of file
