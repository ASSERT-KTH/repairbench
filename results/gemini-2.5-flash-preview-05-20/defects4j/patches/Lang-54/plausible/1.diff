diff --git a/tmp/957b6f72-c1f7-4668-bec7-6de0500e042d_buggy.java b/tmp/a740f76a-6c46-4aba-8124-4fc2406202f8_fixed.java
index 90fe130..7828759 100644
--- a/tmp/957b6f72-c1f7-4668-bec7-6de0500e042d_buggy.java
+++ b/tmp/a740f76a-6c46-4aba-8124-4fc2406202f8_fixed.java
@@ -1,61 +1,110 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+
+        // Check for minimum length of 2 (language code)
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Validate language code (2 lowercase letters)
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         if (len == 2) {
+            // Language only: "ll"
             return new Locale(str, "");
         } else {
+            // Must have a separator if length > 2
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+
+            // At this point, format is "ll_" or longer
+
+            // Check if it's "ll_C" where C is country, or "ll__V" where V is variant
+            if (len == 3) {
+                // "ll_" - invalid, too short for country or variant
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+
             char ch3 = str.charAt(3);
+
+            if (ch3 == '_') {
+                // Format is "ll__V" (language and variant, no country)
+                // Minimum length for "ll__V" is 5 (2 lang + 2 underscores + 1 variant char)
+                if (len < 5) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                String language = str.substring(0, 2);
+                String variant = str.substring(4); // Variant starts after "ll__"
+                return new Locale(language, "", variant);
+
+            } else {
+                // Format is "ll_C" (language and country) or "ll_CC_V" (language, country, variant)
+                // Country code must be two uppercase letters.
+                // Minimum length for "ll_CC" is 5
+                if (len < 5) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+
                 char ch4 = str.charAt(4);
                 if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
+
+                String language = str.substring(0, 2);
+                String country = str.substring(3, 5);
+
                 if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+                    // "ll_CC"
+                    return new Locale(language, country);
                 } else {
+                    // Must have a second separator for variant
                     if (str.charAt(5) != '_') {
                         throw new IllegalArgumentException("Invalid locale format: " + str);
                     }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+                    // Minimum length for "ll_CC_V" is 7
+                    if (len == 6) {
+                        // "ll_CC_" - invalid, variant must be present
+                        throw new IllegalArgumentException("Invalid locale format: " + str);
+                    }
+                    String variant = str.substring(6); // Variant starts after "ll_CC_"
+                    return new Locale(language, country, variant);
+                }
             }
         }
     }
\ No newline at end of file
