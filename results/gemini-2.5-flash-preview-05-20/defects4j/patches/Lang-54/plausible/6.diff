diff --git a/tmp/6ec2c79c-26b1-433b-a6da-4f414ca05615_buggy.java b/tmp/c093c569-a141-4d38-bbdc-9a20a72a2ac6_fixed.java
index 90fe130..1b785cc 100644
--- a/tmp/6ec2c79c-26b1-433b-a6da-4f414ca05615_buggy.java
+++ b/tmp/c093c569-a141-4d38-bbdc-9a20a72a2ac6_fixed.java
@@ -1,61 +1,67 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+
+        // Language code: must be 2 chars, lowercase
+        if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // Handle language only ("ll")
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // If length > 2, an underscore must follow the language code
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // From here, the string is "ll_..."
+
+        // Case 1: "ll__VVV" (language, empty country, variant)
+        // Check for a second underscore at index 3.
+        if (len >= 4 && str.charAt(3) == '_') {
+            // "ll__..." format
+            // Variant part cannot be empty after "ll__".
+            if (len < 5) { // Needs at least "ll__V" (length 5)
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale(str.substring(0, 2), "", str.substring(4));
+        }
+
+        // Case 2: "ll_CC" (language, country) or "ll_CC_VVV" (language, country, variant)
+        // Needs at least "ll_CC" (length 5) for a country code.
+        if (len < 5) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         char ch3 = str.charAt(3);
         char ch4 = str.charAt(4);
+        // Country code must be two uppercase letters.
         if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
+        // If length is 5, it's "ll_CC"
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+        }
+
+        // From here, it's "ll_CC_..." (length > 5)
+        // A third underscore must be present for a variant.
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Variant part cannot be empty after "ll_CC_".
+        if (len < 7) { // Needs at least "ll_CC_V" (length 7)
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
-        }
-    }
