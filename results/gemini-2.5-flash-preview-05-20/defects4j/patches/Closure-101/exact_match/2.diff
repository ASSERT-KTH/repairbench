diff --git a/tmp/79b9c699-e94b-43cd-ae40-543893c19ea0_buggy.java b/tmp/4c38277f-03d2-4566-87e2-a6e7341e3b4f_fixed.java
index 8afddc6..b0c4fe7 100644
--- a/tmp/79b9c699-e94b-43cd-ae40-543893c19ea0_buggy.java
+++ b/tmp/4c38277f-03d2-4566-87e2-a6e7341e3b4f_fixed.java
@@ -1,22 +1,26 @@
   @Override
   protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     options.setCodingConvention(new ClosureCodingConvention());
     CompilationLevel level = flags.compilation_level;
     level.setOptionsForCompilationLevel(options);
     if (flags.debug) {
       level.setDebugOptionsForCompilationLevel(options);
     }
 
     WarningLevel wLevel = flags.warning_level;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
-    if (flags.process_closure_primitives) {
-      options.closurePass = true;
-    }
+    // The original code only sets options.closurePass to true if the flag is true.
+    // If options.closurePass defaults to true, or is set to true elsewhere (e.g., by initOptionsFromFlags
+    // if it's placed after this block or has a conflicting default), and the flag is false,
+    // then closurePass would remain true, leading to the observed bug.
+    // To correctly handle --process_closure_primitives=false, options.closurePass must be explicitly set to false.
+    // This line ensures options.closurePass directly reflects the value of the flag.
+    options.closurePass = flags.process_closure_primitives;
 
     initOptionsFromFlags(options);
     return options;
   }
\ No newline at end of file
