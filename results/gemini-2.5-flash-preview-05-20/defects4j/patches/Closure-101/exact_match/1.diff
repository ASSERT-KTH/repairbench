diff --git a/tmp/6e4fb4d6-12c7-4e63-b168-bc017f06f402_buggy.java b/tmp/5c733030-ed4e-4d76-8c0d-a4a19ba99098_fixed.java
index 8afddc6..ba32e48 100644
--- a/tmp/6e4fb4d6-12c7-4e63-b168-bc017f06f402_buggy.java
+++ b/tmp/5c733030-ed4e-4d76-8c0d-a4a19ba99098_fixed.java
@@ -1,22 +1,26 @@
   @Override
   protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     options.setCodingConvention(new ClosureCodingConvention());
     CompilationLevel level = flags.compilation_level;
     level.setOptionsForCompilationLevel(options);
     if (flags.debug) {
       level.setDebugOptionsForCompilationLevel(options);
     }
 
     WarningLevel wLevel = flags.warning_level;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
-    if (flags.process_closure_primitives) {
-      options.closurePass = true;
-    }
+    // The original code only set closurePass to true if flags.process_closure_primitives was true.
+    // If the flag was false, options.closurePass would retain its default or previously set value.
+    // This could lead to closurePass being true even when --process_closure_primitives=false was specified,
+    // especially if initOptionsFromFlags or other default settings could implicitly enable it.
+    // By directly assigning the flag's value, we ensure options.closurePass accurately reflects
+    // the user's intent (true if enabled, false if disabled).
+    options.closurePass = flags.process_closure_primitives;
 
     initOptionsFromFlags(options);
     return options;
   }
\ No newline at end of file
