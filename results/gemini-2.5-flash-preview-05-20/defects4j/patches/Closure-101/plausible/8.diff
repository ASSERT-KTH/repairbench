diff --git a/tmp/35930f80-3b27-40d7-8e87-a8cd9822cccf_buggy.java b/tmp/3b4cd510-ccb7-437f-91b8-39adc2f51134_fixed.java
index 8afddc6..3b42c46 100644
--- a/tmp/35930f80-3b27-40d7-8e87-a8cd9822cccf_buggy.java
+++ b/tmp/3b4cd510-ccb7-437f-91b8-39adc2f51134_fixed.java
@@ -1,22 +1,32 @@
   @Override
   protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     options.setCodingConvention(new ClosureCodingConvention());
     CompilationLevel level = flags.compilation_level;
     level.setOptionsForCompilationLevel(options);
     if (flags.debug) {
       level.setDebugOptionsForCompilationLevel(options);
     }
 
     WarningLevel wLevel = flags.warning_level;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
-    if (flags.process_closure_primitives) {
-      options.closurePass = true;
-    }
+    // The original logic only set closurePass to true if the flag was present,
+    // but didn't explicitly set it to false if the flag was false.
+    // This could lead to options.closurePass remaining true if it was set by default
+    // or by another mechanism (e.g., initOptionsFromFlags) when it should be false.
+    // The explicit assignment below ensures the flag's value is always respected.
+    // if (flags.process_closure_primitives) {
+    //   options.closurePass = true;
+    // }
 
     initOptionsFromFlags(options);
+
+    // Ensure options.closurePass is explicitly set based on the flags.process_closure_primitives
+    // after any default settings from initOptionsFromFlags.
+    options.closurePass = flags.process_closure_primitives;
+
     return options;
   }
\ No newline at end of file
