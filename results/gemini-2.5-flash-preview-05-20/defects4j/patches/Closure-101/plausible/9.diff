diff --git a/tmp/c7149db3-b732-45bb-b356-82d0618632a1_buggy.java b/tmp/7c3bbc5b-dbf1-4307-b330-d54b06de37ba_fixed.java
index 8afddc6..3269940 100644
--- a/tmp/c7149db3-b732-45bb-b356-82d0618632a1_buggy.java
+++ b/tmp/7c3bbc5b-dbf1-4307-b330-d54b06de37ba_fixed.java
@@ -1,22 +1,33 @@
   @Override
   protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     options.setCodingConvention(new ClosureCodingConvention());
     CompilationLevel level = flags.compilation_level;
     level.setOptionsForCompilationLevel(options);
     if (flags.debug) {
       level.setDebugOptionsForCompilationLevel(options);
     }
 
     WarningLevel wLevel = flags.warning_level;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
-    if (flags.process_closure_primitives) {
-      options.closurePass = true;
-    }
+    // The original code conditionally sets options.closurePass to true.
+    // However, initOptionsFromFlags() or compilation level settings might also affect closurePass,
+    // potentially overriding or conflicting with this explicit flag.
+    // To ensure --process_closure_primitives exactly controls options.closurePass,
+    // we should apply it after other general initializations.
+    // if (flags.process_closure_primitives) {
+    //   options.closurePass = true;
+    // }
 
     initOptionsFromFlags(options);
+
+    // Ensure options.closurePass directly reflects the process_closure_primitives flag.
+    // This correctly handles both true (enabling the pass) and false (disabling it,
+    // even if it was enabled by default or other settings like compilation level).
+    options.closurePass = flags.process_closure_primitives;
+
     return options;
   }
\ No newline at end of file
