diff --git a/tmp/c6a37ab4-3719-42be-8e0d-047b4228d44b_buggy.java b/tmp/a66537fc-fbc9-45d9-9002-1b567c476a97_fixed.java
index 8afddc6..2a45836 100644
--- a/tmp/c6a37ab4-3719-42be-8e0d-047b4228d44b_buggy.java
+++ b/tmp/a66537fc-fbc9-45d9-9002-1b567c476a97_fixed.java
@@ -1,22 +1,35 @@
   @Override
   protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     options.setCodingConvention(new ClosureCodingConvention());
     CompilationLevel level = flags.compilation_level;
     level.setOptionsForCompilationLevel(options);
     if (flags.debug) {
       level.setDebugOptionsForCompilationLevel(options);
     }
 
     WarningLevel wLevel = flags.warning_level;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
-    if (flags.process_closure_primitives) {
-      options.closurePass = true;
-    }
+    // The original code conditionally set options.closurePass to true.
+    // However, if initOptionsFromFlags later sets it to true by default or due to another flag
+    // when process_closure_primitives is false, it leads to the observed bug.
+    // We will remove this conditional set and ensure options.closurePass
+    // is explicitly set based on the flag's value *after* initOptionsFromFlags,
+    // to override any conflicting defaults.
+    // if (flags.process_closure_primitives) {
+    //   options.closurePass = true;
+    // }
 
     initOptionsFromFlags(options);
+
+    // Explicitly set options.closurePass based on the flag's value.
+    // This ensures that the flag's value (true or false) is the final state for this option,
+    // overriding any default or other conflicting settings that might have been applied
+    // by initOptionsFromFlags.
+    options.closurePass = flags.process_closure_primitives;
+
     return options;
   }
\ No newline at end of file
