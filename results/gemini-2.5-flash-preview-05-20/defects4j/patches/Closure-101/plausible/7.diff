diff --git a/tmp/3bbb529d-f04e-48ff-b8e8-b8a444e2ec93_buggy.java b/tmp/a73fcc13-52bc-46c6-9cd7-ae85a7056aed_fixed.java
index 8afddc6..81edccd 100644
--- a/tmp/3bbb529d-f04e-48ff-b8e8-b8a444e2ec93_buggy.java
+++ b/tmp/a73fcc13-52bc-46c6-9cd7-ae85a7056aed_fixed.java
@@ -1,22 +1,29 @@
   @Override
   protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     options.setCodingConvention(new ClosureCodingConvention());
     CompilationLevel level = flags.compilation_level;
     level.setOptionsForCompilationLevel(options);
     if (flags.debug) {
       level.setDebugOptionsForCompilationLevel(options);
     }
 
     WarningLevel wLevel = flags.warning_level;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
-    if (flags.process_closure_primitives) {
-      options.closurePass = true;
-    }
+    // The original logic for flags.process_closure_primitives was here.
+    // It only set options.closurePass to true, relying on it being false by default.
+    // If initOptionsFromFlags or other default initializations set it to true incorrectly,
+    // this logic would not correct it to false.
 
     initOptionsFromFlags(options);
+
+    // Fix: Explicitly set options.closurePass based on flags.process_closure_primitives
+    // This should be done after initOptionsFromFlags to ensure the command-line flag
+    // takes precedence over any defaults or implicit settings from initOptionsFromFlags.
+    options.closurePass = flags.process_closure_primitives;
+
     return options;
   }
\ No newline at end of file
