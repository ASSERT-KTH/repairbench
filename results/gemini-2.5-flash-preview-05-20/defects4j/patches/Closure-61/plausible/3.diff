diff --git a/tmp/23e36d63-2c96-4b47-a78c-13d866c485d1_buggy.java b/tmp/330e8167-09c4-4052-9c81-60f73120a895_fixed.java
index b36c3f0..924fde5 100644
--- a/tmp/23e36d63-2c96-4b47-a78c-13d866c485d1_buggy.java
+++ b/tmp/330e8167-09c4-4052-9c81-60f73120a895_fixed.java
@@ -1,58 +1,71 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
+      // Check for methods on common prototypes like Object or Array that are known to be side-effect free.
+      // For instance, obj.toString(), arr.indexOf(), obj.hasOwnProperty().
+      // The previous check `callNode.hasOneChild()` was incorrect here as many of these methods
+      // take arguments (e.g., hasOwnProperty) but are still side-effect free.
+      if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
         return false;
       }
 
+      // Functions in the "Math" namespace have no side effects.
+      // For instance, Math.sin(0), Math.random().
+      Node targetObject = nameNode.getFirstChild();
+      if (targetObject.getType() == Token.NAME && targetObject.getString().equals("Math")) {
+        return false;
+      }
+
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
+      // Check for specific methods that interact with regular expressions.
+      // These are only considered side-effect free if the compiler can guarantee
+      // no global RegExp state is affected.
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
+          Node param = nameNode.getNext(); // This is the first argument
           if (param != null &&
               (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+                  || param.getType() == Token.REGEXP)) {
+            // If the first argument is a string or regexp literal, it's safe.
             return false;
           }
         }
       }
+    }
 
     return true;
   }
\ No newline at end of file
