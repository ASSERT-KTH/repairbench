diff --git a/tmp/541d3358-3cd4-4a20-8cc0-26ffbf7ec737_buggy.java b/tmp/f3b5d284-5194-4f1d-a5ce-5251274f4370_fixed.java
index 51ebfca..279b2ed 100644
--- a/tmp/541d3358-3cd4-4a20-8cc0-26ffbf7ec737_buggy.java
+++ b/tmp/f3b5d284-5194-4f1d-a5ce-5251274f4370_fixed.java
@@ -1,32 +1,43 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      * 
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        // Determine the actual chunking parameters that will be used by the encoder
+        // A chunkSize of 0 indicates no chunking.
+        final int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;
+        // A null chunk separator or an empty array implies no separator.
+        final byte[] chunkSeparator = isChunked ? CHUNK_SEPARATOR : null;
+
+        // Calculate the expected encoded length based on the determined chunking parameters.
+        long len = getEncodeLength(binaryData, chunkSize, chunkSeparator);
+        
         if (len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
                 
+        // Create the Base64 encoder instance with the specified chunking behavior.
+        // If isChunked is true, use the default chunking constructor.
+        // If isChunked is false, use the constructor with chunkSize 0 for no chunking.
         Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
\ No newline at end of file
