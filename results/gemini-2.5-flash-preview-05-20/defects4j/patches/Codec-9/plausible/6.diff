diff --git a/tmp/7d346289-a723-44db-8209-03d525e590c9_buggy.java b/tmp/7a1516db-96d8-4917-833e-5a275bffdeb6_fixed.java
index 51ebfca..a539c75 100644
--- a/tmp/7d346289-a723-44db-8209-03d525e590c9_buggy.java
+++ b/tmp/7a1516db-96d8-4917-833e-5a275bffdeb6_fixed.java
@@ -1,32 +1,49 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      *
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        // Determine chunking parameters for length calculation based on isChunked flag
+        final int chunkSizeForLengthCalc;
+        final byte[] chunkSeparatorForLengthCalc;
+
+        if (isChunked) {
+            chunkSizeForLengthCalc = MIME_CHUNK_SIZE;
+            chunkSeparatorForLengthCalc = CHUNK_SEPARATOR;
+        } else {
+            // If not chunked, the effective chunk size is 0 and no separators are added.
+            chunkSizeForLengthCalc = 0;
+            // Pass an empty byte array for separator as its length will be used in getEncodeLength
+            chunkSeparatorForLengthCalc = new byte[0];
+        }
+
+        long len = getEncodeLength(binaryData, chunkSizeForLengthCalc, chunkSeparatorForLengthCalc);
         if (len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
 
+        // The Base64 object construction already correctly handles the isChunked parameter:
+        // new Base64(urlSafe) -> defaults to MIME_CHUNK_SIZE and CHUNK_SEPARATOR
+        // new Base64(0, CHUNK_SEPARATOR, urlSafe) -> unchunked
         Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
\ No newline at end of file
