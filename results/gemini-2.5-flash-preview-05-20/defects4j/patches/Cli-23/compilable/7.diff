diff --git a/tmp/354ed416-f71f-4541-b71d-af5fc3e849e3_buggy.java b/tmp/fb10c01a-c42f-4cdc-8825-2e853b60c93a_fixed.java
index 227a4ef..5316371 100644
--- a/tmp/354ed416-f71f-4541-b71d-af5fc3e849e3_buggy.java
+++ b/tmp/fb10c01a-c42f-4cdc-8825-2e853b60c93a_fixed.java
@@ -1,48 +1,81 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // Find the first wrap position in the initial text.
+        // `text` initially contains the full string to be rendered.
         int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
+        if (pos == -1) // If no wrap needed, append and return.
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+        
+        // Append the first line, trimmed, followed by a new line.
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Update 'text' to contain only the remaining content after the first line.
+        // This is crucial: subsequent wrapping logic will operate on this actual content.
+        text = text.substring(pos).trim(); 
+
+        // All following lines must be padded with nextLineTabStop space characters
         final String padding = createPadding(nextLineTabStop);
 
+        // Calculate the effective width available for the actual content on subsequent lines.
+        // This is the total line width minus the padding length.
+        int effectiveContentWidth = width - nextLineTabStop;
+
+        // If the padding itself consumes all or more of the line width,
+        // it's impossible to wrap further within the specified width while respecting the indent.
+        // In such cases, we simply append the padding (if content exists) and the remaining text,
+        // without trying to wrap it further, to avoid an infinite loop (CLI-162).
+        if (effectiveContentWidth <= 0)
+        {
+            if (!text.isEmpty()) // Only append if there's actual text left to render
+            {
+                // Append the padding. Note: this line might exceed 'width' if padding > width.
+                // This is a necessary compromise to avoid infinite loops when nextLineTabStop is too large.
+                sb.append(padding).append(text).append(defaultNewLine);
+            }
+            return sb; // Finished processing as no further wrapping is possible under constraints
+        }
+
         while (true)
         {
+            // Store the current position for infinite loop detection.
             int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
             
-            if (pos == -1)
+            // Find the wrap position for the remaining 'text' using the 'effectiveContentWidth'.
+            // 'text' now only contains the actual content, not including any padding.
+            pos = findWrapPos(text, effectiveContentWidth, 0);
+
+            if (pos == -1) // If no more wrapping needed for the remaining content
             {
-                sb.append(text);
-
+                sb.append(padding).append(text); // Append remaining text with padding
                 return sb;
-            } else
-            if (pos == lastPos)
+            } 
+            else if (pos == lastPos) // Detect infinite loop: if 'pos' doesn't advance for the same content
             {
+                // This means 'text' (the content part) cannot be wrapped further within 'effectiveContentWidth',
+                // typically because it's a single word longer than 'effectiveContentWidth' with no breaks.
                 throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the wrapped segment for the current line, with padding.
+            sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            
+            // Update 'text' to the remaining content for the next iteration.
+            text = text.substring(pos).trim();
         }
     }
\ No newline at end of file
