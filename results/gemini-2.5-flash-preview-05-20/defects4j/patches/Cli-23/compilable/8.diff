diff --git a/tmp/c845c3de-767f-4b87-a3b8-6bc868b2d5bc_buggy.java b/tmp/f49cef35-efc2-4cf5-943f-6f4002270a2a_fixed.java
index 227a4ef..9d3ebad 100644
--- a/tmp/c845c3de-767f-4b87-a3b8-6bc868b2d5bc_buggy.java
+++ b/tmp/f49cef35-efc2-4cf5-943f-6f4002270a2a_fixed.java
@@ -1,48 +1,95 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // Find the wrap position for the first line.
+        // `text` here is the original full text to be wrapped.
         int pos = findWrapPos(text, width, 0);
 
+        // If the entire text fits on one line (pos == -1 means no wrap needed),
+        // append it directly and return.
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+
+        // Append the first line, wrapped at 'pos', followed by a new line.
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Calculate the padding string for all subsequent lines.
         final String padding = createPadding(nextLineTabStop);
         
-        while (true)
-        {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // This is the remaining text that needs to be wrapped in subsequent lines.
+        // Trim leading/trailing whitespace from this segment to start fresh.
+        String remainingText = text.substring(pos).trim(); 
         
-            if (pos == -1)
-            {
-                sb.append(text);
+        // Calculate the effective width for subsequent lines.
+        // This is the total line width minus the space taken by the padding.
+        int effectiveWidth = width - nextLineTabStop;
 
+        // If the effective width is non-positive (padding consumes all or more
+        // of the line width), it means no actual text content can be placed
+        // after the padding. In such a scenario, trying to wrap further
+        // will lead to infinite loops or nonsensical output.
+        // Append the remaining text with padding and return immediately to prevent issues.
+        // The output line might exceed 'width' if 'remainingText' is long, but it prevents a crash.
+        if (effectiveWidth <= 0) {
+            sb.append(padding).append(remainingText);
             return sb;
-            } else
-            if (pos == lastPos)
+        }
+
+        // Loop to process the 'remainingText', line by line, until it's empty.
+        while (!remainingText.isEmpty()) 
+        {
+            // Find the wrap position within the 'remainingText', using the 'effectiveWidth'.
+            // `findWrapPos` should operate on the actual content without considering padding.
+            int currentWrapPos = findWrapPos(remainingText, effectiveWidth, 0);
+
+            // If no wrap is needed for the current 'remainingText' segment
+            // (i.e., it fits entirely within the 'effectiveWidth'), append it
+            // with padding and exit the loop.
+            if (currentWrapPos == -1)
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                sb.append(padding).append(remainingText);
+                remainingText = ""; // Mark as fully processed
+                break; // Exit the loop
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Infinite loop detection:
+            // If `findWrapPos` returns 0, it means no characters could be placed
+            // on the current line (e.g., no space available, or an extremely long word
+            // cannot be broken even at `effectiveWidth`). If `remainingText` is not empty,
+            // this would lead to an infinite loop as `remainingText` would not shrink.
+            // Throw a RuntimeException as the text cannot be formatted under these constraints.
+            if (currentWrapPos == 0) 
+            {
+                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + remainingText);
             }
+
+            // Extract the segment of text for the current line.
+            String lineSegment = remainingText.substring(0, currentWrapPos);
+            
+            // Get the new remaining text for the next iteration.
+            // Trim leading/trailing whitespace from this next segment.
+            String newRemainingText = remainingText.substring(currentWrapPos).trim();
+
+            // Append the current line segment: padding + trimmed segment + new line.
+            sb.append(padding).append(rtrim(lineSegment)).append(defaultNewLine);
+            
+            // Update 'remainingText' for the next iteration.
+            remainingText = newRemainingText;
+        }
+        
+        return sb; // All text has been processed and appended.
     }
\ No newline at end of file
