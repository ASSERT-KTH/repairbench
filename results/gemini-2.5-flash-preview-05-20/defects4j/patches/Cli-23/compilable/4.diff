diff --git a/tmp/1d537818-8fe4-4ae7-a2f3-678e7082a5b0_buggy.java b/tmp/b3f8d65a-18c8-497a-bedd-ae8689607758_fixed.java
index 227a4ef..d72926f 100644
--- a/tmp/1d537818-8fe4-4ae7-a2f3-678e7082a5b0_buggy.java
+++ b/tmp/b3f8d65a-18c8-497a-bedd-ae8689607758_fixed.java
@@ -1,48 +1,90 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // First line: no padding
         int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
+        if (pos == -1) // text fits on one line without wrapping
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
+        // 'text' now holds the remaining content from the first line, trimmed of leading/trailing spaces
+        text = text.substring(pos).trim();
+
+        // Keep track of the length of 'text' to detect infinite loops
+        // This 'text' represents the *actual content* that needs to be wrapped, without padding.
+        int lastTextLength = text.length();
+
         while (true)
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
+            if (text.isEmpty())
             {
+                return sb;
+            }
+
+            // Calculate the effective width available for the actual content
+            // after accounting for the padding.
+            int effectiveWidth = width - padding.length();
+            
+            // If the effective width is zero or negative, it means the padding
+            // alone consumes all available line width or more. In this case,
+            // we cannot wrap the actual content meaningfully.
+            // We append the padding, then truncate the remaining text to fit
+            // the remaining (possibly zero) space, and then terminate.
+            if (effectiveWidth <= 0) {
+                sb.append(padding); // Append the full padding
+                // Calculate the actual content length to append, ensuring it's not negative
+                int contentToAppendLength = Math.max(0, width - padding.length());
+                if (text.length() > contentToAppendLength) {
+                    sb.append(text.substring(0, contentToAppendLength));
+                } else {
                     sb.append(text);
-
+                }
+                // No further wrapping possible for this text segment
                 return sb; 
-            } else
-            if (pos == lastPos)
+            }
+            
+            // Find wrap position within the *remaining content* (text), using the effective width.
+            // 'pos' is now relative to the 'text' variable (the actual content).
+            pos = findWrapPos(text, effectiveWidth, 0);
+
+            if (pos == -1) // Remaining 'text' fits on one padded line
             {
+                sb.append(padding).append(text); // Append padding + full text
+                return sb;
+            }
+            
+            // Append the padded and wrapped line segment
+            sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            
+            // Update 'text' for the next iteration: the remaining content after this wrap.
+            text = text.substring(pos).trim();
+
+            // Check for progress: if the length of the actual remaining content
+            // is not strictly decreasing, it indicates an unresolvable wrap problem
+            // (e.g., a single word longer than effectiveWidth) which would lead to an infinite loop.
+            // As per original logic (and CLI-162's implicit intent), throw an exception.
+            if (text.length() >= lastTextLength) {
                 throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            lastTextLength = text.length();
         }
     }
\ No newline at end of file
