diff --git a/tmp/66077e1b-6617-42e4-88a1-96bd4b15adc1_buggy.java b/tmp/3ec414a4-8f3f-4290-b34c-0444ef91a78d_fixed.java
index 227a4ef..767156e 100644
--- a/tmp/66077e1b-6617-42e4-88a1-96bd4b15adc1_buggy.java
+++ b/tmp/3ec414a4-8f3f-4290-b34c-0444ef91a78d_fixed.java
@@ -1,48 +1,75 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        // Initial line processing:
+        // `findWrapPos` on the raw text, searching from index 0.
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // `text` now holds the *remaining content* after the first line break.
+        // It is trimmed here to remove any leading/trailing whitespace
+        // that was part of the original text after the first line break.
+        text = text.substring(pos).trim(); 
+
+        // All following lines must be padded.
         final String padding = createPadding(nextLineTabStop);
 
+        // Loop for subsequent lines
         while (true)
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            // Construct the string to find wrap position in: padding + actual content.
+            String lineForWrap = padding + text;
+
+            // Find wrap position. Start searching from nextLineTabStop.
+            // The 'width' parameter is the *total* line width.
+            // `findWrapPos` is assumed to handle the `startPos` argument correctly,
+            // meaning it searches for a break point within `lineForWrap` from `startPos`
+            // up to `width`.
+            pos = findWrapPos(lineForWrap, width, nextLineTabStop);
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                // If remaining text (after padding) fits on one line, append it.
+                sb.append(rtrim(lineForWrap));
                 return sb;
-            } else
-            if (pos == lastPos)
+            }
+            
+            // Check for infinite loop: if no actual content characters were consumed.
+            // This happens if `pos` is less than or equal to `nextLineTabStop`,
+            // meaning `findWrapPos` could only find a break within the padding itself,
+            // or at the very start of the actual content, and the actual content is not empty.
+            // In such a scenario, the content would not be consumed, leading to an infinite loop.
+            if (pos <= nextLineTabStop && text.length() > 0)
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + lineForWrap);
             }
             
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Append the current line (padded part + content part).
+            // `rtrim` removes trailing spaces from the wrapped line.
+            sb.append(rtrim(lineForWrap.substring(0, pos))).append(defaultNewLine);
+
+            // Update `text` to be the remaining content for the next iteration.
+            // `lineForWrap.substring(pos)` is the part after the break point.
+            // `.trim()` ensures any leading/trailing whitespace of *that specific remaining content* is removed.
+            // This is safe because `pos` is now guaranteed to be greater than `nextLineTabStop`
+            // (due to the infinite loop check), meaning `pos` is within or after the actual content.
+            text = lineForWrap.substring(pos).trim();
         }
     }
