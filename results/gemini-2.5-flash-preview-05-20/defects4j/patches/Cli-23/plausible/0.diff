diff --git a/tmp/bec720ed-488d-45ae-ac08-42bb144468a0_buggy.java b/tmp/bc007cfb-c43c-4845-a1ca-e684b0423ae7_fixed.java
index 227a4ef..07848ef 100644
--- a/tmp/bec720ed-488d-45ae-ac08-42bb144468a0_buggy.java
+++ b/tmp/bc007cfb-c43c-4845-a1ca-e684b0423ae7_fixed.java
@@ -1,48 +1,68 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+            
+            // Get the remaining part of the original text
+            String remainder = text.substring(lastPos);
+
+            // If the remaining text, after trimming, is empty, all content has been processed.
+            // This prevents an infinite loop if `text` becomes just `padding` in the next step.
+            String trimmedRemainder = remainder.trim();
+            if (trimmedRemainder.isEmpty())
+            {
+                return sb;
+            }
+
+            // Prepend the padding to the trimmed remainder for the next line
+            text = padding + trimmedRemainder;
+            
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             } else
             if (pos == lastPos)
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                // This condition indicates that findWrapPos is stuck,
+                // meaning no further wrapping can occur (e.g., due to a word longer
+                // than the available line width after padding).
+                // Instead of throwing an exception, append the remaining text as-is
+                // and terminate to avoid an infinite loop (as per CLI-162 intention).
+                sb.append(text);
+                return sb;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
