diff --git a/tmp/1b5cf88b-3dac-4e1b-bbe8-988d5070c2c3_buggy.java b/tmp/62e67f29-0bfa-42c7-993b-b5afbe638059_fixed.java
index 227a4ef..137674b 100644
--- a/tmp/1b5cf88b-3dac-4e1b-bbe8-988d5070c2c3_buggy.java
+++ b/tmp/62e67f29-0bfa-42c7-993b-b5afbe638059_fixed.java
@@ -1,48 +1,76 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
-            sb.append(rtrim(text));
-
+            sb.append(rtrim(text)); // Apply rtrim to the whole text if it fits
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            int lastPos = pos;
+            int lastPos = pos; // Stores the wrap position from the previous iteration
+            
+            // Prepare the text for the current line:
+            // - text.substring(pos) gets the remaining text after the previous wrap point.
+            // - .trim() removes any leading/trailing whitespace from this remaining part.
+            // - padding + ... prepends the necessary indentation for the new line.
             text = padding + text.substring(pos).trim();
+            
+            // Find the wrap position for the current line within the specified width
             pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
+            // CLI-162 fix: If findWrapPos returns 0 (meaning no natural break point found)
+            // and the 'text' is still longer than 'width', we must force a hard wrap
+            // at 'width' characters. This prevents an infinite loop where 'pos' remains 0
+            // and no progress is made because a single "word" or un-wrappable sequence
+            // (possibly including padding) is too long for the line.
+            if (pos == 0 && text.length() > width)
             {
-                sb.append(text);
+                pos = width; // Force a hard wrap to ensure progress
+            }
 
-                return sb;
-            } else
-            if (pos == lastPos)
+            if (pos == -1) // If the remaining 'text' (with padding) fits entirely on the current line
+            {
+                sb.append(rtrim(text)); // Append the whole remaining text, applying rtrim
+                return sb; // Exit the loop
+            } 
+            // This condition catches any other scenarios where no progress is being made.
+            // 'pos == lastPos' indicates that findWrapPos is returning the same value
+            // (either 0 or some other fixed position) for effectively the same remaining string.
+            // If the code reaches this point, it means the earlier 'pos=width' fix didn't resolve it,
+            // or it's a different kind of stuck situation.
+            // To prevent an infinite loop or a RuntimeException, append the remaining text and exit.
+            else if (pos == lastPos)
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                // Append the current 'text' (which is the un-wrappable remainder, potentially with padding)
+                // and then return. Only append if there's actual content.
+                if (text.length() > 0) {
+                    sb.append(rtrim(text)); // Apply rtrim to the remaining text
+                }
+                return sb; // Exit the loop to avoid hanging
             }
 
+            // If a valid wrap position 'pos' was found (and not stuck),
+            // append the wrapped segment and a new line.
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
