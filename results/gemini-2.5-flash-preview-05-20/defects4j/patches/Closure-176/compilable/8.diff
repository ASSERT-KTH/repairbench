diff --git a/tmp/a0e65f68-00b8-4e91-917f-b18d53b85dd1_buggy.java b/tmp/d18fd574-550d-4ad2-9691-9181681bbd03_fixed.java
index 8b2f10f..02f1c40 100644
--- a/tmp/a0e65f68-00b8-4e91-917f-b18d53b85dd1_buggy.java
+++ b/tmp/d18fd574-550d-4ad2-9691-9181681bbd03_fixed.java
@@ -1,67 +1,65 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
         boolean isVarDeclaration = left.hasChildren();
 
         // When looking at VAR initializers for declared VARs, we tend
         // to use the declared type over the type it's being
         // initialized to in the global scope.
         //
         // For example,
         // /** @param {number} */ var f = goog.abstractMethod;
         // it's obvious that the programmer wants you to use
         // the declared function signature, not the inferred signature.
         //
         // Or,
         // /** @type {Object.<string>} */ var x = {};
         // the one-time anonymous object on the right side
         // is as narrow as it can possibly be, but we need to make
         // sure we back-infer the <string> element constraint on
         // the left hand side, so we use the left hand side.
 
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
-
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
-        //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
-
-
-        if (isVarTypeBetter) {
+        // The type in the FlowScope should always reflect the result of the assignment
+        // for precise flow analysis. The declared type (if any) acts as an upper bound
+        // that is used for subsequent type checking, but the current value's type
+        // should be propagated through the flow.
         redeclareSimpleVar(scope, left, resultType);
-        }
-        left.setJSType(isVarDeclaration || leftType == null ?
-            resultType : null);
 
+        // Update the Var object's overall inferred type if it's currently inferred.
+        // This is where declared types take precedence over assigned types
+        // in determining the *variable's overall type*, not its flow-sensitive type.
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
           var.setType(oldType == null ?
               resultType : oldType.getLeastSupertype(resultType));
         }
+        // If var has a declared type (not inferred), its type on the Var object
+        // should not be changed by this assignment. It retains its declared type.
+        // This handles cases like `/** @type {Array} */ var x = null;` where `x`
+        // should still be considered `Array` for its overall type, but `null`
+        // for current flow analysis.
+
+        // The previous line `left.setJSType(isVarDeclaration || leftType == null ? resultType : null);`
+        // is now handled by `redeclareSimpleVar` which sets `name.setJSType(type)`.
         break;
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
           scope.inferQualifiedSlot(left, qualifiedName,
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
         left.setJSType(resultType);
         ensurePropertyDefined(left, resultType);
         break;
     }
   }
\ No newline at end of file
