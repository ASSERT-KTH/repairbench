diff --git a/tmp/0f7d0b8d-b67a-4570-933b-b98dbf7e6fbf_buggy.java b/tmp/0a3fa011-30a2-4f39-8c90-dab6f65377ba_fixed.java
index 8b2f10f..1db74e2 100644
--- a/tmp/0f7d0b8d-b67a-4570-933b-b98dbf7e6fbf_buggy.java
+++ b/tmp/0a3fa011-30a2-4f39-8c90-dab6f65377ba_fixed.java
@@ -1,67 +1,82 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
         boolean isVarDeclaration = left.hasChildren();
 
         // When looking at VAR initializers for declared VARs, we tend
         // to use the declared type over the type it's being
         // initialized to in the global scope.
         //
         // For example,
         // /** @param {number} */ var f = goog.abstractMethod;
         // it's obvious that the programmer wants you to use
         // the declared function signature, not the inferred signature.
         //
         // Or,
         // /** @type {Object.<string>} */ var x = {};
         // the one-time anonymous object on the right side
         // is as narrow as it can possibly be, but we need to make
         // sure we back-infer the <string> element constraint on
         // the left hand side, so we use the left hand side.
 
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
+        // Determine if the resultType should update the variable's type in the scope.
+        boolean shouldUpdateVarInScope;
+        if (var == null || var.isTypeInferred()) {
+          // If the variable is new or its type is inferred, always update its type in the scope.
+          shouldUpdateVarInScope = true;
+        } else {
+          // If the variable has a declared type (not inferred):
+          // We only update its type in the scope if it's an assignment
+          // and the resultType is not null or undefined.
+          // For initializers of declared vars (isVarDeclaration == true),
+          // this condition will be false, preventing overwrite by resultType.
+          shouldUpdateVarInScope = !isVarDeclaration &&
+              !(resultType.isEquivalentTo(registry.getNativeType(JSTypeNative.NULL_TYPE)) ||
+                resultType.isEquivalentTo(registry.getNativeType(JSTypeNative.VOID_TYPE)));
+        }
 
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
-        //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
-
-
-        if (isVarTypeBetter) {
+        if (shouldUpdateVarInScope) {
           redeclareSimpleVar(scope, left, resultType);
         }
-        left.setJSType(isVarDeclaration || leftType == null ?
-            resultType : null);
 
-        if (var != null && var.isTypeInferred()) {
-          JSType oldType = var.getType();
-          var.setType(oldType == null ?
-              resultType : oldType.getLeastSupertype(resultType));
+        // Set the JSType for the current NAME node.
+        // For VAR declarations with a declared type (leftType != null),
+        // prefer the declared type for the node itself.
+        // Otherwise (for inferred variables or assignments), use the resultType.
+        if (isVarDeclaration && leftType != null) {
+          left.setJSType(leftType);
+        } else {
+          left.setJSType(resultType);
         }
+
+        // The following block is redundant. Its functionality is covered by
+        // `redeclareSimpleVar` when `shouldUpdateVarInScope` is true,
+        // and it would not be entered if `shouldUpdateVarInScope` is false
+        // (as it implies !var.isTypeInferred()).
+        // if (var != null && var.isTypeInferred()) {
+        //   JSType oldType = var.getType();
+        //   var.setType(oldType == null ?
+        //       resultType : oldType.getLeastSupertype(resultType));
+        // }
         break;
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
           scope.inferQualifiedSlot(left, qualifiedName,
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
         left.setJSType(resultType);
         ensurePropertyDefined(left, resultType);
         break;
     }
   }
