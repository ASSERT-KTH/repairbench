diff --git a/tmp/a5c3b4db-de85-46b8-b9a2-836014c1b690_buggy.java b/tmp/f9262fe4-a37a-4c1f-9404-7cdeec1c37d7_fixed.java
index 57f69c5..08697fc 100644
--- a/tmp/a5c3b4db-de85-46b8-b9a2-836014c1b690_buggy.java
+++ b/tmp/f9262fe4-a37a-4c1f-9404-7cdeec1c37d7_fixed.java
@@ -1,12 +1,25 @@
   /**
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
   private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+    // This function is used to identify nodes that require special block
+    // wrapping for browser compatibility (e.g., IE for DO loops, Safari for FUNCTIONS)
+    // when they are the direct child of an IF or ELSE statement without a block.
+    // The check needs to account for labeled statements, as a LABEL node is the
+    // direct child, but its effective content is the labeled statement.
+
+    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {
+      return true;
+    }
+    // If the node is a LABEL, check its second child (the labeled statement).
+    // A LABEL node has two children: the label name (first child) and
+    // the labeled statement (second child).
+    if (n.getType() == Token.LABEL) {
+      Node labeledStatement = n.getSecondChild();
+      if (labeledStatement != null) {
+        return (labeledStatement.getType() == Token.FUNCTION || labeledStatement.getType() == Token.DO);
+      }
+    }
+    return false;
   }
\ No newline at end of file
