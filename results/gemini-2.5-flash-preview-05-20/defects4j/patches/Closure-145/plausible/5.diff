diff --git a/tmp/f21afd47-1057-44e7-86e2-381e475bce2d_buggy.java b/tmp/959022e1-5183-4ae3-bf59-87baf5ef9064_fixed.java
index 57f69c5..8e68908 100644
--- a/tmp/f21afd47-1057-44e7-86e2-381e475bce2d_buggy.java
+++ b/tmp/959022e1-5183-4ae3-bf59-87baf5ef9064_fixed.java
@@ -1,12 +1,26 @@
   /**
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
   private boolean isOneExactlyFunctionOrDo(Node n) {
+    // If the node itself is a FUNCTION or DO, return true.
+    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {
+      return true;
+    }
+
     // For labels with block children, we need to ensure that a
     // labeled FUNCTION or DO isn't generated when extraneous BLOCKs
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+    // are skipped. This means if a LABEL node's child is a FUNCTION or DO,
+    // it should also be treated as a "FUNCTION or DO" for compatibility purposes,
+    // forcing it to be wrapped in a block if necessary.
+    if (n.getType() == Token.LABEL) {
+      // A LABEL node has two children: the label name (a STRING node)
+      // and the actual labeled statement. We need to check the type of the
+      // labeled statement (the second child, at index 1).
+      if (n.hasChildren() && n.getChildCount() >= 2) {
+        Node labeledStatement = n.getChildAtIndex(1);
+        return (labeledStatement.getType() == Token.FUNCTION || labeledStatement.getType() == Token.DO);
+      }
+    }
+    return false;
   }
\ No newline at end of file
