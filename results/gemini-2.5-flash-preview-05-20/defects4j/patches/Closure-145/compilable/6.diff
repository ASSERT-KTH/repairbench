diff --git a/tmp/a9578ff6-c378-4c55-8bf1-fd8fce6b461c_buggy.java b/tmp/e719c37d-007f-4dfd-a7fd-915ef2d59756_fixed.java
index 57f69c5..64bc022 100644
--- a/tmp/a9578ff6-c378-4c55-8bf1-fd8fce6b461c_buggy.java
+++ b/tmp/e719c37d-007f-4dfd-a7fd-915ef2d59756_fixed.java
@@ -1,12 +1,31 @@
   /**
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
   private boolean isOneExactlyFunctionOrDo(Node n) {
         // For labels with block children, we need to ensure that a
         // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
         // are skipped. 
           // Either a empty statement or an block with more than one child,
           // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+
+      // First, check if the node itself is a FUNCTION or DO.
+      if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {
+          return true;
+      }
+
+      // If the node is a LABEL, check if its immediate child is a FUNCTION or DO.
+      // This handles cases like `A: function() {...}` or `A: do {...} while (...)`
+      // where the label itself is the statement that needs special handling for compatibility.
+      // We explicitly check that the child is *not* a BLOCK, as a block would already
+      // serve as the wrapper, and no further block is needed. The intent of this
+      // function is to identify a single, "bare" function or do statement (potentially labeled)
+      // that might need to be wrapped in a BLOCK for compatibility.
+      if (n.getType() == Token.LABEL && n.hasChildren()) {
+          Node child = n.getFirstChild();
+          // Ensure the child is directly a FUNCTION or DO, not a BLOCK containing one.
+          return (child.getType() == Token.FUNCTION || child.getType() == Token.DO);
+      }
+
+      return false;
   }
\ No newline at end of file
