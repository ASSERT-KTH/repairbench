diff --git a/tmp/1f4d794a-b218-47fa-9d95-1d2ea8c97170_buggy.java b/tmp/89cb2664-8b15-44be-b6ab-cf84e4dc5928_fixed.java
index 57f69c5..6c77c5f 100644
--- a/tmp/1f4d794a-b218-47fa-9d95-1d2ea8c97170_buggy.java
+++ b/tmp/89cb2664-8b15-44be-b6ab-cf84e4dc5928_fixed.java
@@ -1,12 +1,24 @@
   /**
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
   private boolean isOneExactlyFunctionOrDo(Node n) {
     // For labels with block children, we need to ensure that a
     // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
     // are skipped. 
     // Either a empty statement or an block with more than one child,
     // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {
+      return true;
+    }
+    // A LABEL node can wrap a FUNCTION or DO statement. For compatibility
+    // purposes, we need to treat such labeled statements similarly to
+    // raw FUNCTION/DO statements, ensuring they are wrapped in a BLOCK
+    // when necessary (e.g., as the 'then' branch of an IF statement).
+    if (n.getType() == Token.LABEL) {
+      Node labeledStatement = n.getFirstChild();
+      return labeledStatement != null && 
+             (labeledStatement.getType() == Token.FUNCTION || labeledStatement.getType() == Token.DO);
+    }
+    return false;
   }
\ No newline at end of file
