diff --git a/tmp/a84c0d3b-1224-4809-a10a-83ec2bad9545_buggy.java b/tmp/4679aaf3-2a8b-4724-8e80-6f38d503b34b_fixed.java
index 57f69c5..c4ab03c 100644
--- a/tmp/a84c0d3b-1224-4809-a10a-83ec2bad9545_buggy.java
+++ b/tmp/4679aaf3-2a8b-4724-8e80-6f38d503b34b_fixed.java
@@ -1,12 +1,24 @@
   /**
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
   private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+    // If n is a FUNCTION or DO node itself, return true.
+    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {
+      return true;
+    }
+    // If n is a LABEL node, check if its immediate child is a FUNCTION or DO node.
+    // This handles cases like "A: function foo() {}" or "A: do {} while(cond);".
+    // This is necessary because in some compatibility modes (e.g., Safari/IE),
+    // a labeled FUNCTION or DO statement as a direct child of an IF/ELSE
+    // requires wrapping in a BLOCK, which depends on this function
+    // recognizing the labeled statement as a "FUNCTION or DO".
+    if (n.getType() == Token.LABEL) {
+      Node labeledStatement = n.getFirstChild();
+      if (labeledStatement != null) {
+        return (labeledStatement.getType() == Token.FUNCTION ||
+                labeledStatement.getType() == Token.DO);
+      }
+    }
+    return false;
   }
\ No newline at end of file
