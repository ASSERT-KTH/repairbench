diff --git a/tmp/a384939c-48dc-460b-a47c-34dcf8955ad0_buggy.java b/tmp/d7ce58ca-1eb1-414b-b9e5-c8f2225ffe56_fixed.java
index 4bbd561..c6555f1 100644
--- a/tmp/a384939c-48dc-460b-a47c-34dcf8955ad0_buggy.java
+++ b/tmp/d7ce58ca-1eb1-414b-b9e5-c8f2225ffe56_fixed.java
@@ -1,37 +1,68 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Protect from ArrayIndexOutOfBounds: Ensure there are at least two characters ('&' and '#') after the current index.
+        if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+            return 0;
+        }
+
         int start = index + 2;
         boolean isHex = false;
 
+        // Protect from ArrayIndexOutOfBounds: Check if there's content after '&#'.
+        if (start >= input.length()) {
+            return 0; // Malformed entity, e.g., "&#" at end of string.
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            // After consuming 'x' or 'X', check if there's still content for the number.
+            if (start >= input.length()) {
+                return 0; // Malformed entity, e.g., "&#x" at end of string.
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Protect from ArrayIndexOutOfBounds: Search for the terminating ';' character.
+        // Stop if end reaches the end of the input string before finding ';'.
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        // If ';' was not found, or if it was the very next character (empty numeric content like "&#;" or "&#x;"),
+        // or if end is out of bounds (meaning no ';'), return 0.
+        if (end == input.length() || input.charAt(end) != ';' || start == end) {
+            return 0;
+        }
+
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
-                return 0;
+            return 0; // Malformed number (e.g., "&#abc;")
         }
 
+        // Fix for supplementary characters:
+        // Writer.write(int c) only handles BMP characters (U+0000 to U+FFFF).
+        // Supplementary characters (U+10000 and above) require surrogate pairs,
+        // which must be written as two char values.
+        if (Character.isSupplementaryCodePoint(entityValue)) {
+            // Convert the code point to a char array (surrogate pair) and write it.
+            out.write(Character.toChars(entityValue));
+        } else {
+            // For BMP characters, write the integer directly as a char.
             out.write(entityValue);
+        }
+
+        // Return the number of characters consumed by this translation:
+        // 2 (for "&#") + (end - start) (for the numeric part) + (1 if 'x' or 'X' was present) + 1 (for ';')
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
\ No newline at end of file
-        return 0;
-    }
