diff --git a/tmp/c01d1c5b-279f-4b2e-a0d7-bb61638efcb3_buggy.java b/tmp/5918efea-40ac-4396-8e76-7e2ab5baff78_fixed.java
index 4bbd561..a353196 100644
--- a/tmp/c01d1c5b-279f-4b2e-a0d7-bb61638efcb3_buggy.java
+++ b/tmp/5918efea-40ac-4396-8e76-7e2ab5baff78_fixed.java
@@ -1,37 +1,75 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Protect from ArrayIndexOutOfBounds
+        // Check if there are enough characters for "&#" sequence
+        if (index + 1 >= input.length()) {
+            return 0;
+        }
+
         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+            int start = index + 2; // Position after "&#"
+
+            // Check if there are characters after "&#"
+            if (start >= input.length()) {
+                return 0; // Malformed entity, e.g., "&#" at end of string
+            }
+
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+                start++; // Move past 'x'
+                // Check if there are characters after "&#x"
+                if (start >= input.length()) {
+                    return 0; // Malformed entity, e.g., "&#x" at end of string
+                }
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the closing semicolon, ensuring we don't read past the end of the input
+            while(end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If the loop terminated because we reached the end of the input without finding a semicolon,
+            // then it's a malformed entity.
+            if (end == input.length()) {
+                return 0; // No closing semicolon found
+            }
+
+            // Check if the numeric part is empty (e.g., "&#;" or "&#x;")
+            if (start == end) {
+                return 0; // Empty entity value
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
+                // If the content between &#...; is not a valid number, it's not a numeric entity.
                 return 0;
             }
 
-                out.write(entityValue);
+            // Fix for supplementary characters:
+            // Writer.write(int) often casts the int to a char, truncating code points > 0xFFFF.
+            // Character.toChars handles supplementary characters by returning a surrogate pair.
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars);
+
+            // Calculate the number of characters consumed from the input
+            // 2 for "&#"
+            // (end - start) for the length of the numeric part
+            // (isHex ? 1 : 0) for the 'x' if present
+            // 1 for the closing ';'
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
-        return 0;
+        return 0; // Not a numeric entity starting with "&#"
     }
