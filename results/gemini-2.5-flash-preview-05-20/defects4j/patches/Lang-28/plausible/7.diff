diff --git a/tmp/b6535fd7-93c6-44c0-a2dc-8a7cb65cfc82_buggy.java b/tmp/ce914bec-1965-4211-9d3a-148896bacd9e_fixed.java
index 4bbd561..cbe3a8c 100644
--- a/tmp/b6535fd7-93c6-44c0-a2dc-8a7cb65cfc82_buggy.java
+++ b/tmp/ce914bec-1965-4211-9d3a-148896bacd9e_fixed.java
@@ -1,37 +1,67 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // This check handles potential ArrayIndexOutOfBounds for input.charAt(index + 1)
+        if (index >= input.length() - 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+            return 0;
+        }
+
         int start = index + 2;
         boolean isHex = false;
 
+        // Check if there are enough characters for 'x' or 'X'
+        if (start < input.length()) {
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        } else {
+            return 0; // Not enough characters for entity start
+        }
+
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Protect from ArrayIndexOutOfBounds and ensure ';' is found
+        while(end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        // If semicolon is not found, it's not a valid entity
+        if (end == input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
+
         int entityValue;
         try {
             if(isHex) {
+                // Ensure there are characters to parse after 'x'/'X'
+                if (start == end) {
+                    return 0; // No digits after 'x'
+                }
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
+                // Ensure there are characters to parse
+                if (start == end) {
+                    return 0; // No digits
+                }
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
+        // Fix for supplementary characters:
+        // Writer.write(int) only writes the lower 16 bits, which truncates
+        // supplementary characters (code points > 0xFFFF).
+        // Character.toChars correctly converts a code point to a char array
+        // (a surrogate pair for supplementary characters, or a single char for BMP characters).
+        final char[] chars = Character.toChars(entityValue);
+        out.write(chars);
+
+        // Calculate characters consumed: "&#" (2) + digits/hex-digits (end - start) + "x" if present (isHex ? 1 : 0) + ";" (1)
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
\ No newline at end of file
-        return 0;
-    }
