diff --git a/tmp/1de05677-b074-4564-9e64-208498edc397_buggy.java b/tmp/2078d7f8-9e06-44ca-bb86-ac003def219b_fixed.java
index 4bbd561..4ecd3c3 100644
--- a/tmp/1de05677-b074-4564-9e64-208498edc397_buggy.java
+++ b/tmp/2078d7f8-9e06-44ca-bb86-ac003def219b_fixed.java
@@ -1,37 +1,71 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Protect from ArrayIndexOutOfBounds
+        // Check if there are enough characters for "&#" sequence
+        if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+            return 0;
+        }
+
         int start = index + 2;
         boolean isHex = false;
 
+        // Check if there are enough characters for at least a digit or 'x'/'X' after "&#"
+        if (start >= input.length()) {
+            return 0; // Not enough characters for a valid entity
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            // After 'x' or 'X', there must be at least one digit
+            if (start >= input.length()) {
+                return 0; // Not enough characters after "&#x" or "&#X"
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the ending semicolon, ensuring we don't go out of bounds
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        // If the semicolon was not found (reached end of input), it's not a valid entity
+        if (end == input.length()) {
+            return 0;
+        }
+
+        // Ensure there's at least one digit between start and end (e.g., prevents "&#;" or "&#x;")
+        if (start == end) {
+            return 0; // Empty numeric entity
+        }
+
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
+            // Not a valid number (e.g., "&#abc;")
             return 0;
         }
 
-                out.write(entityValue);
+        // Fix for supplementary characters:
+        // Writer.write(int) only writes the lower 16 bits. For supplementary characters (code points > 0xFFFF),
+        // we need to use Character.toChars to get the surrogate pair and write that.
+        try {
+            out.write(Character.toChars(entityValue));
+        } catch (IllegalArgumentException iae) {
+            // The parsed entityValue is not a valid Unicode code point (e.g., negative or too large)
+            return 0;
+        }
+
+        // Calculate the number of characters consumed:
+        // 2 (for "&#") + (end - start) (for the numeric value) + (isHex ? 1 : 0) (for 'x'/'X' if present) + 1 (for ';')
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
\ No newline at end of file
-        return 0;
-    }
