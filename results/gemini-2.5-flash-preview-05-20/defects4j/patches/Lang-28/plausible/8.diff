diff --git a/tmp/1a73578c-d106-45c3-b513-22551ce8eef8_buggy.java b/tmp/033eeec8-6973-4d43-b414-b5f5019f0993_fixed.java
index 4bbd561..f345f63 100644
--- a/tmp/1a73578c-d106-45c3-b513-22551ce8eef8_buggy.java
+++ b/tmp/033eeec8-6973-4d43-b414-b5f5019f0993_fixed.java
@@ -1,37 +1,64 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
+        // Original comment is addressed by adding checks for input length.
+
+        // Need at least 2 characters for "&#"
+        if (index >= input.length() - 1) {
+            return 0;
+        }
+
         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if there are characters after "&#"
+            if (start >= input.length()) {
+                return 0; // Input like "&#"
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+                // Check if there are characters after "&#x"
+                if (start >= input.length()) {
+                    return 0; // Input like "&#x"
+                }
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Protect against infinite loop if ';' is not found and ArrayIndexOutOfBounds
+            while(end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If ';' was not found, or the numeric part is empty, it's not a valid numeric entity
+            if (end == input.length() || end == start) {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
-                return 0;
+                return 0; // Malformed number inside entity
             }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Fix for supplementary characters (U+10000 and above).
+            // Writer.write(int) only writes the lower 16 bits, which truncates supplementary characters.
+            // Character.toChars handles code points > 0xFFFF by returning a surrogate pair (two chars).
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars);
+
+            return 2 + (end - start) + (isHex ? 1 : 0) + 1; // Characters consumed from input
         }
-        return 0;
+        return 0; // Not a numeric entity
     }
