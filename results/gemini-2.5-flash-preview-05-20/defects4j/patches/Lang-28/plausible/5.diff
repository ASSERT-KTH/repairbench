diff --git a/tmp/6df179bb-daf6-46d7-864e-96c4305c6d0b_buggy.java b/tmp/eb807dbb-ce14-4c8a-98a0-7ea631f614cb_fixed.java
index 4bbd561..27e2094 100644
--- a/tmp/6df179bb-daf6-46d7-864e-96c4305c6d0b_buggy.java
+++ b/tmp/eb807dbb-ce14-4c8a-98a0-7ea631f614cb_fixed.java
@@ -1,37 +1,64 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Protect from ArrayIndexOutOfBounds and handle malformed entities
+        // Minimum length for &#; is 3 characters (e.g., "&#0;")
+        // or &#x; is 4 characters (e.g., "&#x0;")
+        // We need to safely access input.charAt(index), input.charAt(index + 1), and input.charAt(index + 2)
+        // to check for 'x' or the start of the number.
+        if (index + 2 >= input.length()) {
+            return 0; // Not enough characters for even a minimal numeric entity like "&#;"
+        }
+
         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if there's an 'x' or 'X' prefix for hex entities
+            // The check input.charAt(start) is safe due to the initial index + 2 check
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+                start++; // Move 'start' past 'x'
                 isHex = true;
+                if (start >= input.length()) { // Malformed: "&#x" at end of input
+                    return 0;
+                }
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the trailing semicolon, protecting against ArrayIndexOutOfBounds
+            // if semicolon is missing or string ends prematurely.
+            while(end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If semicolon was not found by reaching end of input, or no digits were found
+            if (end == input.length() || start == end) {
+                return 0; // Malformed entity (e.g., "&#123" or "&#;" or "&#x;")
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
-                return 0;
+                return 0; // Not a valid numeric entity
             }
 
-                out.write(entityValue);
+            // Fix for supplementary characters:
+            // Convert the integer code point to char(s) and write them.
+            // Character.toChars handles both BMP and supplementary characters correctly.
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars);
+
+            // Calculate number of characters consumed from input
+            // 2 (for "&#") + (end - start) (for the numeric part) + (1 if 'x' was present) + 1 (for ';')
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
-        return 0;
+        return 0; // No entity found at this index
     }
\ No newline at end of file
