diff --git a/tmp/9024fc62-d027-4f28-a851-c6cc8975d2f9_buggy.java b/tmp/c82747d2-ca06-4bcc-a672-a63352b09c2e_fixed.java
index 4bbd561..77f5ad8 100644
--- a/tmp/9024fc62-d027-4f28-a851-c6cc8975d2f9_buggy.java
+++ b/tmp/c82747d2-ca06-4bcc-a672-a63352b09c2e_fixed.java
@@ -1,37 +1,81 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Protect from ArrayIndexOutOfBounds and invalid entity formats
+
+        // Need at least 2 characters for "&#"
+        if (index + 1 >= input.length()) {
+            return 0;
+        }
+
         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if there's at least one character after "&#" (e.g., "&#;" is not valid)
+            if (start >= input.length()) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+                // Check if there's at least one character after "&#x" (e.g., "&#x;" is not valid)
+                if (start >= input.length()) {
+                    return 0;
+                }
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Protect from infinite loop or ArrayIndexOutOfBounds if ';' is not found
+            while(end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If ';' was not found, it's not a valid entity
+            if (end == input.length()) {
+                return 0;
+            }
+
+            // Ensure there is content between 'start' and 'end' (e.g., "&#;" or "&#x;")
+            if (start == end) {
+                return 0; // Empty entity, e.g., &#; or &#x;
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
-                return 0;
+                return 0; // Not a valid number
             }
 
+            // Fix for supplementary characters (Unicode code points > 0xFFFF)
+            // Writer.write(int) only writes the lower 16 bits (a single char), which is incorrect for supplementary characters.
+            if (Character.isValidCodePoint(entityValue)) {
+                if (entityValue > 0xFFFF) {
+                    // Convert the code point to a surrogate pair (char array)
+                    char[] chars = Character.toChars(entityValue);
+                    out.write(chars[0]); // Write the high surrogate
+                    out.write(chars[1]); // Write the low surrogate
+                } else {
+                    // For Basic Multilingual Plane (BMP) characters, the original logic is fine.
                     out.write(entityValue);
+                }
+            } else {
+                // If the parsed entity value is not a valid Unicode code point, treat as no translation.
+                return 0;
+            }
+
+            // Calculate the number of characters consumed from the input
+            // 2 for "&#" + (end - start) for the numeric part + 1 for 'x' (if hex) + 1 for ';'
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
