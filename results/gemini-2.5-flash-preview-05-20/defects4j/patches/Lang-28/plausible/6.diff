diff --git a/tmp/9b598f21-9ac5-483c-b1d4-47c666d28189_buggy.java b/tmp/c3ada960-7ae7-4809-a81b-50393abe6139_fixed.java
index 4bbd561..6d1b523 100644
--- a/tmp/9b598f21-9ac5-483c-b1d4-47c666d28189_buggy.java
+++ b/tmp/c3ada960-7ae7-4809-a81b-50393abe6139_fixed.java
@@ -1,37 +1,49 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
+            // The original code does not protect against missing semicolon, which can lead to StringIndexOutOfBoundsException.
+            // A more robust solution would add a check like: while(end < input.length() && input.charAt(end) != ';')
+            // However, the current fix only addresses the reported supplementary character issue.
             while(input.charAt(end) != ';') {
                 end++;
             }
 
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
                 return 0;
             }
 
-                out.write(entityValue);
+            // The original code `out.write(entityValue)` is problematic for supplementary characters.
+            // If entityValue is a Unicode code point greater than Character.MAX_VALUE (U+FFFF),
+            // it represents a supplementary character and requires two char values (a surrogate pair)
+            // in UTF-16 encoding. `Writer.write(int)` only writes the lower 16 bits of the int.
+            // To correctly handle supplementary characters, Character.toChars(int) should be used.
+            if (entityValue > Character.MAX_VALUE) { // Check if it's a supplementary code point
+                out.write(Character.toChars(entityValue)); // Write the surrogate pair
+            } else {
+                out.write(entityValue); // Write as a single character
+            }
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
