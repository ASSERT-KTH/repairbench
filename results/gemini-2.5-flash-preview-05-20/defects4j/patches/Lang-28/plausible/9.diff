diff --git a/tmp/a4c734a0-c8e5-4763-805b-ddc2fe46015e_buggy.java b/tmp/673d5442-4154-46d6-9b91-11c649db1531_fixed.java
index 4bbd561..150c97f 100644
--- a/tmp/a4c734a0-c8e5-4763-805b-ddc2fe46015e_buggy.java
+++ b/tmp/673d5442-4154-46d6-9b91-11c649db1531_fixed.java
@@ -1,37 +1,66 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Protect from ArrayIndexOutOfBounds and handle malformed entities.
+
+        // Check for sufficient length to have "&#" (at least index and index+1)
+        if (index + 1 >= input.length()) {
+            return 0; // Not enough characters for a potential entity start
+        }
+
         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if there's enough room for at least 'x' or the first digit
+            if (start >= input.length()) {
+                return 0; // Entity too short (e.g., "&#" at end of string)
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+                // After 'x' (or 'X'), need at least one digit for the entity value
+                if (start >= input.length()) {
+                    return 0; // Entity too short (e.g., "&#x" at end of string)
+                }
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Iterate until semicolon is found or end of input is reached.
+            // Protects from infinite loop and AIOOB.
+            while(end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If semicolon not found (reached end of input) or no digits were found
+            // between &#[x] and ;, it's not a valid numeric entity.
+            if (end == input.length() || end == start) {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
+                // Not a valid number (e.g., "&#abc;"), so not a numeric entity
                 return 0;
             }
 
-                out.write(entityValue);
+            // Fix: Handle supplementary characters by converting to char array (surrogate pair)
+            // and writing the char array.
+            out.write(Character.toChars(entityValue));
+
+            // Return the number of characters consumed from the input string:
+            // "&" (1) + "#" (1) + numeric value (end - start) + "x" (isHex ? 1 : 0) + ";" (1)
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
