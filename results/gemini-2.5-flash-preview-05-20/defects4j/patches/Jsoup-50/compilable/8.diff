diff --git a/tmp/c65f61ff-6252-4a81-a514-55036fe89cd1_buggy.java b/tmp/c7fd5fd2-04dc-4cc8-8700-f75da4c642a0_fixed.java
index 25ca093..4afd094 100644
--- a/tmp/c65f61ff-6252-4a81-a514-55036fe89cd1_buggy.java
+++ b/tmp/c7fd5fd2-04dc-4cc8-8700-f75da4c642a0_fixed.java
@@ -1,52 +1,102 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        final int initialByteBufferPosition = byteData.position(); // Save original buffer position
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // Determine the charset to use for parsing.
+        // It prioritizes: 1. Provided charsetName, 2. BOM, 3. Meta tag, 4. Default charset.
+
+        // If a charsetName was explicitly provided, use it directly.
+        if (charsetName != null) {
+            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+        } else { // charsetName was null, so we need to auto-detect.
+
+            String detectedCharsetFromBom = null;
+            int bomBytesToSkip = 0;
+
+            // 1. Attempt to detect charset from Byte Order Mark (BOM).
+            // This must be done on the raw byteData before any decoding.
+            // Check for UTF-8 BOM: EF BB BF
+            if (byteData.remaining() >= 3 && byteData.get(initialByteBufferPosition) == (byte) 0xEF && byteData.get(initialByteBufferPosition + 1) == (byte) 0xBB && byteData.get(initialByteBufferPosition + 2) == (byte) 0xBF) {
+                detectedCharsetFromBom = defaultCharset; // defaultCharset is typically UTF-8
+                bomBytesToSkip = 3;
+            } 
+            // Check for UTF-16BE BOM: FE FF
+            else if (byteData.remaining() >= 2 && byteData.get(initialByteBufferPosition) == (byte) 0xFE && byteData.get(initialByteBufferPosition + 1) == (byte) 0xFF) {
+                detectedCharsetFromBom = "UTF-16BE";
+                bomBytesToSkip = 2;
+            }
+            // Check for UTF-16LE BOM: FF FE
+            else if (byteData.remaining() >= 2 && byteData.get(initialByteBufferPosition) == (byte) 0xFF && byteData.get(initialByteBufferPosition + 1) == (byte) 0xFE) {
+                detectedCharsetFromBom = "UTF-16LE";
+                bomBytesToSkip = 2;
+            }
+            // Check for UTF-32BE BOM: 00 00 FE FF
+            else if (byteData.remaining() >= 4 && byteData.get(initialByteBufferPosition) == (byte) 0x00 && byteData.get(initialByteBufferPosition + 1) == (byte) 0x00 && byteData.get(initialByteBufferPosition + 2) == (byte) 0xFE && byteData.get(initialByteBufferPosition + 3) == (byte) 0xFF) {
+                detectedCharsetFromBom = "UTF-32BE";
+                bomBytesToSkip = 4;
+            }
+            // Check for UTF-32LE BOM: FF FE 00 00
+            else if (byteData.remaining() >= 4 && byteData.get(initialByteBufferPosition) == (byte) 0xFF && byteData.get(initialByteBufferPosition + 1) == (byte) 0xFE && byteData.get(initialByteBufferPosition + 2) == (byte) 0x00 && byteData.get(initialByteBufferPosition + 3) == (byte) 0x00) {
+                detectedCharsetFromBom = "UTF-32LE";
+                bomBytesToSkip = 4;
+            }
+
+            // Adjust ByteBuffer position past the detected BOM bytes.
+            byteData.position(initialByteBufferPosition + bomBytesToSkip);
+
+            if (detectedCharsetFromBom != null) {
+                // If BOM detected, use its charset and skip meta tag detection.
+                charsetName = detectedCharsetFromBom;
+                docData = Charset.forName(charsetName).decode(byteData).toString();
+            } else {
+                // 2. No BOM found, so attempt to detect from meta tag.
+                // First, safely parse as defaultCharset (e.g., UTF-8) to find the meta tag.
+                byteData.position(initialByteBufferPosition); // Rewind for this first pass as defaultCharset
                 docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+                doc = parser.parseInput(docData, baseUri); // Parse to find meta tag
+                
                 Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
+                String foundCharsetFromMeta = null;
+                if (meta != null) {
                     if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+                        foundCharsetFromMeta = getCharsetFromContentType(meta.attr("content"));
                     }
-                if (foundCharset == null && meta.hasAttr("charset")) {
+                    if (foundCharsetFromMeta == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
+                                foundCharsetFromMeta = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                            foundCharsetFromMeta = null; // ignore, defaultCharset will be used
+                        }
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+                // If a different charset is found in meta, re-decode the byte data.
+                if (foundCharsetFromMeta != null && foundCharsetFromMeta.length() != 0 && !foundCharsetFromMeta.equalsIgnoreCase(defaultCharset)) {
+                    foundCharsetFromMeta = foundCharsetFromMeta.trim().replaceAll("[\"']", "");
+                    charsetName = foundCharsetFromMeta; // Use this newly found charset.
+                    byteData.position(initialByteBufferPosition); // Rewind fully for correct re-decode from original position.
                     docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
+                    doc = null; // Reset doc, as it needs to be re-parsed with the correct charset.
+                } else {
+                    // No meta charset found, or it's the same as defaultCharset. Stick with defaultCharset.
                     charsetName = defaultCharset;
-            doc = null;
                 }
+            }
+        }
+        
+        // Final parsing if document not yet parsed (or re-parsed after meta charset detection).
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
+        }
+        
+        // Ensure the document's output settings reflect the final determined charset.
         doc.outputSettings().charset(charsetName);
-        }
+        
         return doc;
     }
\ No newline at end of file
