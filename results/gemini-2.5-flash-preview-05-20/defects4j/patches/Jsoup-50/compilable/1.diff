diff --git a/tmp/116dd3cb-e997-4df8-8f00-92bef68fb32d_buggy.java b/tmp/4d3591de-c261-464a-a891-8ca4bb59b62e_fixed.java
index 25ca093..8299c28 100644
--- a/tmp/116dd3cb-e997-4df8-8f00-92bef68fb32d_buggy.java
+++ b/tmp/4d3591de-c261-464a-a891-8ca4bb59b62e_fixed.java
@@ -1,52 +1,111 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // 1. Look for BOM in byteData - this overrides any other header or input
+        // Ensure byteData is at the beginning for BOM detection.
+        byteData.rewind();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        String detectedCharsetFromBom = null;
+        int bomLength = 0; // Number of bytes consumed by BOM
+
+        // Check for BOMs at the start of the buffer by peeking bytes.
+        // It's crucial to use byteData.get(index) to peek without advancing the position
+        // until we decide which BOM it is.
+
+        // Check for UTF-32 (4 bytes)
+        if (byteData.remaining() >= 4) {
+            int b1 = byteData.get(0) & 0xFF; // Use & 0xFF to treat as unsigned byte
+            int b2 = byteData.get(1) & 0xFF;
+            int b3 = byteData.get(2) & 0xFF;
+            int b4 = byteData.get(3) & 0xFF;
+
+            if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) { // UTF-32BE
+                detectedCharsetFromBom = "UTF-32BE";
+                bomLength = 4;
+            } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) { // UTF-32LE
+                detectedCharsetFromBom = "UTF-32LE";
+                bomLength = 4;
+            }
+        }
+
+        // Check for UTF-16 (2 bytes) if no UTF-32 BOM was found
+        if (detectedCharsetFromBom == null && byteData.remaining() >= 2) {
+            int b1 = byteData.get(0) & 0xFF;
+            int b2 = byteData.get(1) & 0xFF;
+            if (b1 == 0xFE && b2 == 0xFF) { // UTF-16BE
+                detectedCharsetFromBom = "UTF-16BE";
+                bomLength = 2;
+            } else if (b1 == 0xFF && b2 == 0xFE) { // UTF-16LE
+                detectedCharsetFromBom = "UTF-16LE";
+                bomLength = 2;
+            }
+        }
+        
+        // Check for UTF-8 (3 bytes) if no other BOM was found
+        if (detectedCharsetFromBom == null && byteData.remaining() >= 3) {
+            int b1 = byteData.get(0) & 0xFF;
+            int b2 = byteData.get(1) & 0xFF;
+            int b3 = byteData.get(2) & 0xFF;
+            if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) { // UTF-8
+                detectedCharsetFromBom = "UTF-8";
+                bomLength = 3;
+            }
+        }
+
+        // If a BOM was detected, override charsetName (if it was null or user-provided)
+        // and advance the buffer position past the BOM bytes.
+        if (detectedCharsetFromBom != null) {
+            charsetName = detectedCharsetFromBom; // BOM overrides any other charset setting.
+            byteData.position(bomLength); // Advance buffer past the BOM bytes.
+        } else {
+            // No BOM detected, ensure buffer position is at 0 for subsequent decoding.
+            // Since we used .get(index) to peek, the position is still 0 if no BOM was found.
+            // No explicit rewind/position(0) is needed here.
+        }
+
+        // 2. Determine Charset for decoding (from meta or user-provided)
+        if (charsetName == null) { // Charset not specified by user or detected by BOM. Determine from meta.
+            // Safe parse as UTF-8 first to find <meta http-equiv="Content-Type"> or HTML5 <meta charset>
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
-                    byteData.rewind();
+                    byteData.rewind(); // Rewind to the beginning of the *original* buffer
+                    byteData.position(bomLength); // Set position right after the BOM (0 if no BOM was found)
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    doc = null; // Mark doc for re-parsing with the correct charset
                 }
             }
-        } else { // specified by content type header (or by user on file load)
+        } else { // Charset was specified by content type header (or by user on file load) or detected by BOM
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
+
+        // The previous problematic BOM check (if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM))
+        // is now handled at the byte level at the beginning of the function and removed.
+
+        if (doc == null) { // If doc was not parsed yet (e.g., after re-decoding with meta charset)
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
