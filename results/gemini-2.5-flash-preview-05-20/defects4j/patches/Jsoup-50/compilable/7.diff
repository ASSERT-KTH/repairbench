diff --git a/tmp/52c49341-37a5-4048-bff1-285ac7001da7_buggy.java b/tmp/01799200-4429-464f-a123-c38dcbc2be0a_fixed.java
index 25ca093..9d68bc6 100644
--- a/tmp/52c49341-37a5-4048-bff1-285ac7001da7_buggy.java
+++ b/tmp/01799200-4429-464f-a123-c38dcbc2be0a_fixed.java
@@ -1,52 +1,99 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
         // look for BOM - overrides any other header or input
+        // Note: defaultCharset and UNICODE_BOM are assumed to be accessible
+        // (e.g., as static final members of the containing class, like DataUtil).
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        String bomCharset = null;
+        int bomLength = 0;
+        int initialBufferPosition = byteData.position(); // Store the original position of the buffer
+
+        // Check for BOMs at the current buffer position without changing the buffer's position yet
+        int remaining = byteData.remaining();
+        if (remaining >= 3 && (byteData.get(initialBufferPosition) & 0xFF) == 0xEF && (byteData.get(initialBufferPosition + 1) & 0xFF) == 0xBB && (byteData.get(initialBufferPosition + 2) & 0xFF) == 0xBF) {
+            bomCharset = "UTF-8";
+            bomLength = 3;
+        } else if (remaining >= 2 && (byteData.get(initialBufferPosition) & 0xFF) == 0xFE && (byteData.get(initialBufferPosition + 1) & 0xFF) == 0xFF) {
+            bomCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if (remaining >= 2 && (byteData.get(initialBufferPosition) & 0xFF) == 0xFF && (byteData.get(initialBufferPosition + 1) & 0xFF) == 0xFE) {
+            // Differentiate UTF-16LE from UTF-32LE by checking next two bytes
+            if (remaining >= 4 && (byteData.get(initialBufferPosition + 2) & 0xFF) == 0x00 && (byteData.get(initialBufferPosition + 3) & 0xFF) == 0x00) {
+                bomCharset = "UTF-32LE";
+                bomLength = 4;
+            } else {
+                bomCharset = "UTF-16LE";
+                bomLength = 2;
+            }
+        } else if (remaining >= 4 && (byteData.get(initialBufferPosition) & 0xFF) == 0x00 && (byteData.get(initialBufferPosition + 1) & 0xFF) == 0x00 && (byteData.get(initialBufferPosition + 2) & 0xFF) == 0xFE && (byteData.get(initialBufferPosition + 3) & 0xFF) == 0xFF) {
+            bomCharset = "UTF-32BE";
+            bomLength = 4;
+        }
+
+        if (bomCharset != null) {
+            charsetName = bomCharset; // BOM detected, it overrides any other charset determination
+            byteData.position(initialBufferPosition + bomLength); // Advance buffer position past the BOM
+        } else {
+            // No BOM detected, ensure buffer position is at its original start for decoding
+            byteData.position(initialBufferPosition);
+        }
+
+        // Now, proceed with decoding based on determined charsetName (from arg, or BOM, or still null)
+        if (charsetName != null) { // Charset specified (either by user, content-type header, or BOM detection)
+            // Validate.notEmpty is an assumed helper function
+            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            // Decode the data from the current buffer position (which is now after the BOM if one was found, or at initial start)
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+        } else { // charsetName is null, attempt to determine from meta tags
+            // Mark the buffer's current position (after potential BOM skip or at the very start)
+            byteData.mark(); 
+            // First pass: decode using defaultCharset (assumed "UTF-8")
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
+                    // getCharsetFromContentType is an assumed helper function
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                // If a new charset is found and different from default, re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { 
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    charsetName = foundCharset; // Set this as the final charset
+                    byteData.reset(); // Rewind buffer to the marked position (before the first decode)
+                    docData = Charset.forName(foundCharset).decode(byteData).toString(); // Re-decode with detected charset
+                    doc = null; // Mark doc for re-parse as the initial parse was with the wrong charset
+                } else {
+                    charsetName = defaultCharset; // Keep default charset if meta found it, or no meta found/valid charset.
                 }
+            } else {
+                charsetName = defaultCharset; // Default to UTF-8 if no meta charset found
             }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
+        
+        // The old BOM check (docData.charAt(0) == UNICODE_BOM) has been removed.
+        // It was unreliable as it relied on character decoding which might have been
+        // incorrect for the initial byte data and also incorrectly forced defaultCharset.
+        // The byte-based BOM detection at the start handles this properly.
+
+        if (doc == null) { // If doc wasn't parsed yet (due to charset detection/re-decode) or was set to null for re-parsing
             doc = parser.parseInput(docData, baseUri);
+            // Ensure the document's output settings reflect the determined charset
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
