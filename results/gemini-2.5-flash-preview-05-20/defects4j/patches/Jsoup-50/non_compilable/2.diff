diff --git a/tmp/2ac74ad8-ff56-4669-a24d-39f8c7026df6_buggy.java b/tmp/e6bf368a-c418-4646-8b8c-a40f83552409_fixed.java
index 25ca093..4eb0bc4 100644
--- a/tmp/2ac74ad8-ff56-4669-a24d-39f8c7026df6_buggy.java
+++ b/tmp/e6bf368a-c418-4646-8b8c-a40f83552409_fixed.java
@@ -1,52 +1,162 @@
-    // todo - this is getting gnarly. needs a rewrite.
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+import org.jsoup.helper.Validate;
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+
+// Assuming defaultCharset and getCharsetFromContentType are accessible
+// from the enclosing class (e.g., DataUtil in Jsoup).
+// For compilation in a standalone context, these would need to be defined.
+// private static final String defaultCharset = "UTF-8";
+// private static String getCharsetFromContentType(String contentType) { /* ... implementation ... */ }
+
+class DataUtil { // Assuming this function is part of a class like DataUtil
+    private static final String defaultCharset = "UTF-8"; // Jsoup's default is usually UTF-8
+
+    // This method is typically found in org.jsoup.internal.StringUtil or similar in Jsoup
+    private static String getCharsetFromContentType(String contentType) {
+        if (contentType == null) return null;
+        java.util.regex.Matcher m = java.util.regex.Pattern.compile("charset=([^; ]+)").matcher(contentType);
+        if (m.find()) {
+            String charset = m.group(1).trim();
+            if (charset.length() > 0 && (charset.charAt(0) == '"' || charset.charAt(0) == '\'')) {
+                charset = charset.substring(1, charset.length() - 1);
+            }
+            return charset;
+        }
+        return null;
+    }
+
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // This will be the final charset used for decoding and document settings
+        String finalCharset = charsetName; 
+        int bomBytes = 0; // Number of bytes representing the BOM, to be skipped
         
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Save the initial position of the buffer (typically 0)
+        int initialDataPosition = byteData.position();
+
+        // 1. Validate provided charsetName argument early if it's not null
+        if (finalCharset != null) {
+            Validate.notEmpty(finalCharset, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        }
+
+        // 2. Look for BOM - overrides any other header or input
+        // Order of BOM checks: UTF-32, then UTF-16, then UTF-8
+        
+        // Check for UTF-32 BE/LE BOM (4 bytes)
+        if (byteData.remaining() >= 4) {
+            byteData.mark(); // Mark current position to reset later
+            byte b1 = byteData.get();
+            byte b2 = byteData.get();
+            byte b3 = byteData.get();
+            byte b4 = byteData.get();
+
+            if (b1 == 0x00 && b2 == 0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF) { // UTF-32 BE BOM
+                finalCharset = "UTF-32BE"; bomBytes = 4;
+            } else if (b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == 0x00 && b4 == 0x00) { // UTF-32 LE BOM
+                finalCharset = "UTF-32LE"; bomBytes = 4;
+            }
+            byteData.reset(); // Always reset the buffer position after peeking
+        }
+
+        // Check for UTF-16 BE/LE BOM (2 bytes), only if no UTF-32 BOM was found
+        if (bomBytes == 0 && byteData.remaining() >= 2) {
+            byteData.mark();
+            byte b1 = byteData.get();
+            byte b2 = byteData.get();
+
+            if (b1 == (byte)0xFE && b2 == (byte)0xFF) { // UTF-16 BE BOM
+                finalCharset = "UTF-16BE"; bomBytes = 2;
+            } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) { // UTF-16 LE BOM
+                finalCharset = "UTF-16LE"; bomBytes = 2;
+            }
+            byteData.reset();
+        }
+
+        // Check for UTF-8 BOM (3 bytes), only if no other BOM was found
+        if (bomBytes == 0 && byteData.remaining() >= 3) {
+            byteData.mark();
+            byte b1 = byteData.get();
+            byte b2 = byteData.get();
+            byte b3 = byteData.get();
+
+            if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) { // UTF-8 BOM
+                finalCharset = "UTF-8"; bomBytes = 3;
+            }
+            byteData.reset();
+        }
+
+        // Advance the buffer position past the BOM bytes if a BOM was detected
+        if (bomBytes > 0) {
+            byteData.position(initialDataPosition + bomBytes);
+        }
+
+        // 3. Determine the charset for the initial decoding
+        // If `finalCharset` is still null, it means no charsetName was provided AND no BOM was detected.
+        // In this scenario, we use the `defaultCharset` for the first parse attempt to find meta tags.
+        String initialDecodeCharset = finalCharset;
+        if (initialDecodeCharset == null) {
+            initialDecodeCharset = defaultCharset;
+        }
+
+        // Perform the first decode of the byte data
+        docData = Charset.forName(initialDecodeCharset).decode(byteData).toString();
+
+        // 4. If `finalCharset` is still null (meaning neither user-provided nor BOM-detected),
+        //    then attempt to detect from meta tags.
+        if (finalCharset == null) { 
+            // Parse the initially decoded data to find the meta charset
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                        foundCharset = null; // Ignore invalid charset names
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                // If a new charset is found from meta and it's different from the initial decode charset
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(initialDecodeCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    finalCharset = foundCharset; // This found charset becomes the definitive charset
+
+                    // Rewind the byteData to its original content start position (after BOM, which is 0 here)
+                    byteData.position(initialDataPosition + bomBytes); 
+                    docData = Charset.forName(finalCharset).decode(byteData).toString();
+                    doc = null; // Set doc to null to force a re-parse with the correct charset
                 }
             }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+            // If after meta-detection, finalCharset is still null, it means no meta charset was found
+            // or it was the same as defaultCharset. In this case, defaultCharset becomes the final charset.
+            if (finalCharset == null) { 
+                finalCharset = initialDecodeCharset; // Will be defaultCharset
             }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
         }
-        if (doc == null) {
+
+        // The original problematic `if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM)`
+        // block is removed, as BOM handling is now done robustly at the beginning by advancing
+        // the ByteBuffer's position.
+
+        // 5. Final parsing of the document
+        if (doc == null) { // If the document hasn't been parsed yet, or was marked for re-parsing
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
         }
+        // Set the determined charset on the document's output settings
+        doc.outputSettings().charset(finalCharset);
+
         return doc;
     }
+}
\ No newline at end of file
