diff --git a/tmp/d6650fda-5dab-49a9-954a-80f1176ecfca_buggy.java b/tmp/727cc4c6-0b8d-4cd0-bc97-79782e6c6a5c_fixed.java
index 25ca093..d0e2236 100644
--- a/tmp/d6650fda-5dab-49a9-954a-80f1176ecfca_buggy.java
+++ b/tmp/727cc4c6-0b8d-4cd0-bc97-79782e6c6a5c_fixed.java
@@ -1,52 +1,150 @@
-    // todo - this is getting gnarly. needs a rewrite.
+import org.jsoup.helper.Validate;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+
+// Assuming 'defaultCharset', 'UNICODE_BOM', and 'getCharsetFromContentType' are defined elsewhere in the class.
+// For the purpose of this fix, we will define them as placeholders if they are not provided in the original context.
+// In Jsoup source, they are static fields/methods within DataUtil.
+
+class DataUtil { // Assuming DataUtil is the containing class
+    private static final String defaultCharset = "UTF-8";
+    private static final char UNICODE_BOM = '\uFEFF';
+
+    // Placeholder for getCharsetFromContentType, in a real Jsoup context this would be properly implemented.
+    private static String getCharsetFromContentType(String content) {
+        // This is a simplified placeholder. Actual Jsoup implementation is more robust.
+        // Example: content = "text/html;charset=gb2312" -> returns "gb2312"
+        String[] parts = content.split(";");
+        for (String part : parts) {
+            String trimmedPart = part.trim();
+            if (trimmedPart.startsWith("charset=")) {
+                return trimmedPart.substring("charset=".length());
+            }
+        }
+        return null;
+    }
+
+
+    // Helper class to return both charset name and BOM byte length
+    private static class BomResult {
+        String charsetName;
+        int bomBytes;
+
+        BomResult(String charsetName, int bomBytes) {
+            this.charsetName = charsetName;
+            this.bomBytes = bomBytes;
+        }
+    }
+
+    // Helper method to detect BOM and return charset name and BOM byte length.
+    // It does NOT modify the ByteBuffer's position.
+    private static BomResult detectBom(ByteBuffer byteData) {
+        int originalPosition = byteData.position();
+        int remaining = byteData.remaining();
+
+        if (remaining >= 3 && byteData.get(originalPosition) == (byte)0xEF && byteData.get(originalPosition + 1) == (byte)0xBB && byteData.get(originalPosition + 2) == (byte)0xBF) {
+            return new BomResult("UTF-8", 3);
+        } else if (remaining >= 2 && byteData.get(originalPosition) == (byte)0xFE && byteData.get(originalPosition + 1) == (byte)0xFF) {
+            return new BomResult("UTF-16BE", 2);
+        } else if (remaining >= 2 && byteData.get(originalPosition) == (byte)0xFF && byteData.get(originalPosition + 1) == (byte)0xFE) {
+            return new BomResult("UTF-16LE", 2);
+        } else if (remaining >= 4 && byteData.get(originalPosition) == (byte)0x00 && byteData.get(originalPosition + 1) == (byte)0x00 && byteData.get(originalPosition + 2) == (byte)0xFE && byteData.get(originalPosition + 3) == (byte)0xFF) {
+            return new BomResult("UTF-32BE", 4);
+        } else if (remaining >= 4 && byteData.get(originalPosition) == (byte)0xFF && byteData.get(originalPosition + 1) == (byte)0xFE && byteData.get(originalPosition + 2) == (byte)0x00 && byteData.get(originalPosition + 3) == (byte)0x00) {
+            return new BomResult("UTF-32LE", 4);
+        }
+        return new BomResult(null, 0); // No BOM
+    }
+
+
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        String bomCharset = null; // Stores charset if detected from BOM
+        int bomBytes = 0; // Stores number of bytes BOM occupies
 
-        // look for BOM - overrides any other header or input
+        // 1. Detect BOM (highest priority for charset determination)
+        BomResult bomResult = detectBom(byteData);
+        if (bomResult.charsetName != null) {
+            bomCharset = bomResult.charsetName;
+            bomBytes = bomResult.bomBytes;
+            // BOM charset overrides any initial charsetName provided by user
+            charsetName = bomCharset;
+        }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // 2. Determine final charset for decoding and perform initial decode
+        // If charsetName is still null (no BOM detected, and no explicit charset given),
+        // try to determine from meta.
+        if (charsetName == null) {
+            // First pass: decode as defaultCharset (UTF-8) to find meta tag.
+            byteData.rewind(); // Ensure reading from start of the ByteBuffer
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+            doc = parser.parseInput(docData, baseUri); // Parse with defaultCharset
+
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                // If a different charset is found in meta, re-decode.
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
+                    charsetName = foundCharset; // This is the new effective charset.
+                    byteData.rewind(); // Rewind for re-decoding
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    doc = null; // Invalidate current doc, it needs to be parsed again with new charset.
+                } else {
+                    // No meta charset found, or it's defaultCharset.
+                    // doc and docData from default decode are fine.
+                    charsetName = defaultCharset;
                 }
+            } else {
+                // No meta tag found. Keep defaultCharset.
+                charsetName = defaultCharset;
             }
-        } else { // specified by content type header (or by user on file load)
+        } else { // charsetName was explicitly provided by user OR determined by BOM
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+
+            byteData.rewind(); // Always rewind to start before decoding based on final charset.
+            // If a UTF-16 or UTF-32 BOM was detected, advance position past BOM bytes.
+            // For UTF-8 BOM, we do NOT advance here, as its decoder will produce \uFEFF character.
+            if (bomCharset != null && !"UTF-8".equals(bomCharset)) {
+                byteData.position(byteData.position() + bomBytes);
+            }
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+        // 3. Remove UTF-8 BOM character if present in docData
+        // This applies if an UTF-8 BOM was originally detected.
+        // For other BOMs (UTF-16/32), CharsetDecoder already consumes the BOM bytes without producing \uFEFF.
+        if ("UTF-8".equals(bomCharset) && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
             docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+            doc = null; // Invalidate doc if it was already parsed (e.g., using defaultCharset then BOM was found)
         }
+
+        // 4. Final parsing step
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
+        }
+        // Always set the document's output charset to the determined charsetName.
         doc.outputSettings().charset(charsetName);
-        }
+
         return doc;
     }
+}
\ No newline at end of file
