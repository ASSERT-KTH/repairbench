diff --git a/tmp/629196a2-cea6-4b08-ba43-4bc49e3e31ee_buggy.java b/tmp/76e1147c-9218-4037-989e-87ae4793be20_fixed.java
index 25ca093..df1f14f 100644
--- a/tmp/629196a2-cea6-4b08-ba43-4bc49e3e31ee_buggy.java
+++ b/tmp/76e1147c-9218-4037-989e-87ae4793be20_fixed.java
@@ -1,52 +1,145 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // Assuming defaultCharset is a static final String "UTF-8" in the surrounding class.
+        // For self-containment in this snippet, I'll define it here.
+        final String defaultCharset = "UTF-8"; 
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // 1. Look for BOM - overrides any other header or input
+        String bomCharset = null;
+        int bomLength = 0;
+
+        // Peek at the first few bytes to detect BOM
+        // Check for BOMs in order of longest first (UTF-32, then UTF-8, then UTF-16)
+        if (byteData.remaining() >= 4) { 
+            byte b1 = byteData.get(0);
+            byte b2 = byteData.get(1);
+            byte b3 = byteData.get(2);
+            byte b4 = byteData.get(3);
+
+            if (b1 == (byte) 0x00 && b2 == (byte) 0x00 && b3 == (byte) 0xFE && b4 == (byte) 0xFF) { // UTF-32BE
+                bomCharset = "UTF-32BE";
+                bomLength = 4;
+            } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE && b3 == (byte) 0x00 && b4 == (byte) 0x00) { // UTF-32LE
+                bomCharset = "UTF-32LE";
+                bomLength = 4;
+            } else if (b1 == (byte) 0xEF && b2 == (byte) 0xBB && b3 == (byte) 0xBF) { // UTF-8 BOM
+                bomCharset = "UTF-8";
+                bomLength = 3;
+            } else if (b1 == (byte) 0xFE && b2 == (byte) 0xFF) { // UTF-16BE
+                bomCharset = "UTF-16BE";
+                bomLength = 2;
+            } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE) { // UTF-16LE
+                bomCharset = "UTF-16LE";
+                bomLength = 2;
+            }
+        } else if (byteData.remaining() >= 3) { // Check for UTF-8 only if < 4 bytes
+            byte b1 = byteData.get(0);
+            byte b2 = byteData.get(1);
+            byte b3 = byteData.get(2);
+            if (b1 == (byte) 0xEF && b2 == (byte) 0xBB && b3 == (byte) 0xBF) {
+                bomCharset = "UTF-8";
+                bomLength = 3;
+            }
+        } else if (byteData.remaining() >= 2) { // Check for UTF-16 BOMs only if < 3 bytes
+            byte b1 = byteData.get(0);
+            byte b2 = byteData.get(1);
+            if (b1 == (byte) 0xFE && b2 == (byte) 0xFF) { // UTF-16BE
+                bomCharset = "UTF-16BE";
+                bomLength = 2;
+            } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE) { // UTF-16LE
+                bomCharset = "UTF-16LE";
+                bomLength = 2;
+            }
+        }
+
+        if (bomCharset != null) {
+            charsetName = bomCharset; // BOM overrides any other specified charset
+            byteData.position(bomLength); // Advance buffer past BOM for decoding
+        }
+
+        // Flag to track if an initial decode/parse happened for meta charset detection
+        boolean initialParseForMeta = false;
+
+        // 2. Determine final charsetName if not set by BOM or provided
+        if (charsetName == null) { // no BOM, no specified charset, try to detect from meta
+            byteData.rewind(); // Ensure buffer is at start for initial decode if BOM wasn't handled
+            
+            // Decode with defaultCharset to find meta tag
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
+            initialParseForMeta = true; // Mark that an initial parse/decode happened
+
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
+                // Assuming getCharsetFromContentType is a static helper method available in scope
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                        // ignore, assume no charset found
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    charsetName = foundCharset; // Meta charset found, use it
+                } else {
+                    charsetName = defaultCharset; // No useful meta charset found, stick with default
                 }
+            } else { // No meta tag found, stick with default
+                charsetName = defaultCharset;
             }
-        } else { // specified by content type header (or by user on file load)
+        } else { // charsetName was provided (and possibly overridden by BOM earlier)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            // If BOM was found, byteData.position is already advanced.
+            // If no BOM was found, ensure byteData is at the beginning for decoding.
+            if (bomCharset == null) {
+                byteData.rewind();
+            }
+        }
+
+        // 3. Perform final decode of byteData using the determined charsetName
+        // This ensures docData is always correctly generated for the final parse.
+        // The old problematic UNICODE_BOM check is removed as BOMs are handled at byte level.
+        if (doc == null || (initialParseForMeta && !charsetName.equalsIgnoreCase(defaultCharset))) {
+            // Case 1: doc is null (e.g., BOM was found, or charsetName was provided initially) -> needs a fresh decode.
+            // Case 2: doc was parsed once (for meta scan), but now needs re-parsing due to different charset
+            byteData.rewind(); // Always rewind to start for the full decode
+            if (bomLength > 0) { // If BOM was detected, skip it again
+                byteData.position(bomLength);
+            }
             docData = Charset.forName(charsetName).decode(byteData).toString();
+            doc = null; // Mark doc for re-parsing
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+        // Else: doc is not null, initialParseForMeta is true, and charsetName IS defaultCharset.
+        // In this scenario, `docData` from the initial meta scan is already correct, and `doc` is also valid.
+
+        // 4. Final parse if needed, and set output charset
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
         }
+        doc.outputSettings().charset(charsetName); // Always set output charset
+
         return doc;
     }
+
+    // This helper method is usually part of DataUtil.java.
+    // Providing a placeholder implementation to ensure the code is self-contained and compilable.
+    // In a real Jsoup context, this would be properly implemented with regex.
+    private static String getCharsetFromContentType(String contentType) {
+        if (contentType == null) return null;
+        java.util.regex.Matcher m = java.util.regex.Pattern.compile("(?i)\\bcharset=\\s*(?:\"|')?([^\\s,;\"']*)").matcher(contentType);
+        if (m.find()) {
+            return m.group(1).trim();
+        }
+        return null;
+    }
\ No newline at end of file
