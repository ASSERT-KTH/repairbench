diff --git a/tmp/0c59c128-743d-4b43-9804-994a06c1b832_buggy.java b/tmp/44f34f4f-cb6f-4aea-b4eb-b9d1ec9029ee_fixed.java
index d27c40c..122f763 100644
--- a/tmp/0c59c128-743d-4b43-9804-994a06c1b832_buggy.java
+++ b/tmp/44f34f4f-cb6f-4aea-b4eb-b9d1ec9029ee_fixed.java
@@ -1,49 +1,78 @@
     /** Compute two arguments arc tangent of a derivative structure.
      * @param y array holding the first operand
      * @param yOffset offset of the first operand in its array
      * @param x array holding the second operand
      * @param xOffset offset of the second operand in its array
      * @param result array where result must be stored (for
      * two arguments arc tangent the result array <em>cannot</em>
      * be the input array)
      * @param resultOffset offset of the result in its array
      */
     public void atan2(final double[] y, final int yOffset,
                       final double[] x, final int xOffset,
                       final double[] result, final int resultOffset) {
 
+        final double yVal = y[yOffset];
+        final double xVal = x[xOffset];
+
+        // Handle specific cases where x and y are (signed) zero.
+        // This prevents 0.0/0.0 NaN propagation and ensures correct signed zero/PI results.
+        if (xVal == 0.0 && yVal == 0.0) {
+            final double ySign = FastMath.copySign(1.0, yVal);
+            final double xSign = FastMath.copySign(1.0, xVal);
+
+            if (xSign > 0) { // x is +0.0
+                if (ySign > 0) { // y is +0.0
+                    result[resultOffset] = 0.0; // atan2(+0.0, +0.0) is +0.0
+                } else { // y is -0.0
+                    result[resultOffset] = -0.0; // atan2(-0.0, +0.0) is -0.0
+                }
+            } else { // x is -0.0
+                if (ySign > 0) { // y is +0.0
+                    result[resultOffset] = FastMath.PI; // atan2(+0.0, -0.0) is +PI
+                } else { // y is -0.0
+                    result[resultOffset] = -FastMath.PI; // atan2(-0.0, -0.0) is -PI
+                }
+            }
+
+            // For all derivatives, set them to 0.0 for these specific (0,0) cases.
+            // This is consistent with how Math.atan2 behaves and how derivatives
+            // of a constant result would be zero.
+            for (int i = 1; i < getSize(); ++i) {
+                result[resultOffset + i] = 0.0;
+            }
+            return; // Special case handled, exit
+        }
+
         // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
         double[] tmp2 = new double[getSize()];
         multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
-
+        if (xVal >= 0) {
             // compute atan2(y, x) = 2 atan(y / (r + x))
             add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
             for (int i = 0; i < tmp2.length; ++i) {
                 result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
             }
 
-        } else {
+        } else { // xVal < 0
 
             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
             result[resultOffset] =
                     ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
             for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+                // The constant +/-PI only applies to the value, not the derivatives.
+                result[resultOffset + i] = -2 * tmp2[i];
             }
 
         }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
     }
\ No newline at end of file
