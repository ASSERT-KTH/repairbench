diff --git a/tmp/7b9e517d-9511-40d4-89f7-c10ad19a4f94_buggy.java b/tmp/4faeeb6d-c6a7-490e-bc0b-fc7e9c520986_fixed.java
index b6b11b6..8fd36fa 100644
--- a/tmp/7b9e517d-9511-40d4-89f7-c10ad19a4f94_buggy.java
+++ b/tmp/4faeeb6d-c6a7-490e-bc0b-fc7e9c520986_fixed.java
@@ -1,38 +1,71 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      *
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+        int start = pos.getIndex(); // Original position at method entry
+        char[] c = pattern.toCharArray(); // Convert once for efficient char access
+
+        // This block handles the case where appendQuotedString is called with pos
+        // pointing to the second character of an escaped quote, e.g., the second '\'' in "''"
+        // The caller (ExtendedMessageFormat.applyPattern) consumes the first quote and then
+        // calls this method with pos pointing to the character immediately after it.
+        // If that character is also a quote, and escaping is on, it signifies an escaped quote.
+        if (escapingOn && start < pattern.length() && c[start] == QUOTE) {
+            next(pos); // Consume the second '
+            // If appendTo is not null, append a single quote to represent the escaped quote.
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
+
+        // `lastHold` is the start index of the current segment of characters to be appended.
+        // `pos.getIndex()` is the current character being examined in the pattern.
+        int lastHold = pos.getIndex();
+
+        // Loop through the characters in the pattern starting from the current position.
+        // The loop continues as long as `pos.getIndex()` is within the bounds of the pattern.
+        // `pos.getIndex()` is advanced by `next(pos)` or `pos.setIndex()`.
+        for ( ; pos.getIndex() < pattern.length(); ) {
+            // Check for an escaped quote sequence, e.g., "''"
+            // Ensure there are enough characters left in the pattern to form an ESCAPED_QUOTE
+            if (escapingOn && (pos.getIndex() + ESCAPED_QUOTE.length()) <= pattern.length() &&
+                pattern.charAt(pos.getIndex()) == QUOTE &&
+                pattern.charAt(pos.getIndex() + 1) == QUOTE) {
+
+                // Append the characters collected since `lastHold` up to the current escaped quote.
+                // Then append a single quote to represent the escaped quote.
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);
                 }
+                
+                // Advance position past the entire escaped quote sequence (e.g., past both 's in '')
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
+                lastHold = pos.getIndex(); // Update `lastHold` to the new current position
+                continue; // Continue to the next character after the escaped quote
+            }
+
+            // Check the current character at `pos.getIndex()`
             switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            case QUOTE: // Found the closing quote of the quoted string
+                // Calculate the length of the segment to append (characters from `lastHold`
+                // up to, but not including, the closing quote).
+                int len = pos.getIndex() - lastHold;
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, len);
                 }
+                next(pos); // Consume the closing quote
+                return appendTo; // Return the StringBuffer, as the quoted string is consumed
+            default: // Regular character inside the quoted string
+                next(pos); // Just advance the position
             }
+        }
+        // If the loop finishes, it means a closing quote was not found before the end of the pattern.
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
