diff --git a/tmp/681c5bf8-0646-4435-8f01-61f9f74b7e53_buggy.java b/tmp/41dea30a-d36c-4fb4-95ec-3e2c6e03d6c0_fixed.java
index b6b11b6..42c2139 100644
--- a/tmp/681c5bf8-0646-4435-8f01-61f9f74b7e53_buggy.java
+++ b/tmp/41dea30a-d36c-4fb4-95ec-3e2c6e03d6c0_fixed.java
@@ -1,38 +1,57 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        // The start of the current segment of text to be appended.
+        // pos.getIndex() is expected to be already positioned after an opening quote
+        // or at the start of a literal segment, based on how this function is called
+        // by ExtendedMessageFormat.applyPattern.
+        int lastHold = pos.getIndex();
+        char[] c = pattern.toCharArray(); // Convert to char array once for efficiency
+
+        // Loop through the pattern using pos.getIndex() as the current cursor.
+        // The original code used a separate 'i' loop variable which was not updated
+        // consistently with pos.getIndex(), leading to incorrect substring checks and
+        // potential infinite loops/OutOfMemoryErrors if the substring check was stale.
+        for (; pos.getIndex() < pattern.length();) {
+            // Check for escaped quote (e.g., '') at the current position.
+            // This is handled by consuming two quotes and appending a single literal quote.
+            if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {
+                // Append the text accumulated since lastHold
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                    appendTo.append(QUOTE); // Append the literal quote
                 }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length()); // Advance past both quotes
+                lastHold = pos.getIndex(); // Reset lastHold to the new current position
+                continue; // Continue scanning for more characters or the closing quote
             }
+
+            // Get the current character at the parse position
             switch (c[pos.getIndex()]) {
             case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
+                // Found a closing quote.
+                // Append the text accumulated since lastHold up to this closing quote.
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                }
+                next(pos); // Consume the closing quote
+                return appendTo; // Quoted string successfully consumed and appended
             default:
+                // Regular character, just advance the parse position.
                 next(pos);
             }
         }
+
+        // If the loop finishes without finding a closing quote, it means the quoted string is unterminated.
         throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                "Unterminated quoted string at position " + lastHold);
     }
\ No newline at end of file
