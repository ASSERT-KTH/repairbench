diff --git a/tmp/28041f17-2190-4b52-8952-ef46aace39ad_buggy.java b/tmp/4c3370b6-ac64-4d98-a573-3d12287e3d27_fixed.java
index b6b11b6..f9bbc49 100644
--- a/tmp/28041f17-2190-4b52-8952-ef46aace39ad_buggy.java
+++ b/tmp/4c3370b6-ac64-4d98-a573-3d12287e3d27_fixed.java
@@ -1,38 +1,68 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        char[] c = pattern.toCharArray(); // Convert once to char array for efficient character access
+
+        // The QUOTE character is used to delimit quoted strings, and a double QUOTE (escaped quote)
+        // represents a literal QUOTE character within a quoted string or even as a literal sequence.
+        // This function is called when `pos.getIndex()` points to a QUOTE.
+        // We need to differentiate between an opening QUOTE of a string, and an escaped QUOTE (like `''`).
+
+        // Handle the case where the current position is an escaped quote (e.g., "''").
+        // This allows patterns like "it''s" to parse "''" as a single literal quote.
+        // If escaping is on and the current character and the next character are both QUOTE,
+        // it means we've found an escaped quote, not the start of a quoted string.
+        if (escapingOn && start + ESCAPED_QUOTE.length() <= pattern.length() &&
+            c[start] == QUOTE && c[start + 1] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(QUOTE); // Append a single literal QUOTE
             }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
+            pos.setIndex(start + ESCAPED_QUOTE.length()); // Advance past both quotes in "''"
+            return appendTo; // Processing of this escaped quote is complete.
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
+
+        // If the code reaches here, it means c[start] is the opening QUOTE of a quoted string.
+        // Consume the opening quote. `pos` now points to the first character *inside* the quoted string.
         next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
+        int lastHold = pos.getIndex(); // `lastHold` marks the start of the current segment of characters to append.
+
+        while (pos.getIndex() < pattern.length()) {
+            // Check for an escaped quote "''" within the quoted string.
+            // This is distinct from the initial check above which handles "''" as a standalone literal.
+            if (escapingOn && pos.getIndex() + 1 < pattern.length() &&
+                c[pos.getIndex()] == QUOTE && c[pos.getIndex() + 1] == QUOTE) {
+                // Found an escaped quote "''"
+                if (appendTo != null) {
+                    // Append characters accumulated since `lastHold` up to the current position (before "''")
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                    appendTo.append(QUOTE); // Append the single literal quote for "''"
+                }
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length()); // Advance past "''"
+                lastHold = pos.getIndex(); // Reset `lastHold` to the new current position
+            } else if (c[pos.getIndex()] == QUOTE) {
+                // Found the closing quote of the string
+                if (appendTo != null) {
+                    // Append any remaining characters from `lastHold` up to the current position (before the closing quote)
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                }
+                next(pos); // Consume the closing quote.
+                return appendTo; // The quoted string has been successfully consumed.
+            } else {
+                // Regular character: part of the quoted string content, just advance position.
                 next(pos);
             }
         }
+        // If the loop finishes, it means we reached the end of the pattern without finding a closing quote.
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
