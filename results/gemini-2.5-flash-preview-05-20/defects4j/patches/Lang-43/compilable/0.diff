diff --git a/tmp/c1276f4f-001b-49c2-8e70-644d46095585_buggy.java b/tmp/f33d4323-8a3b-4789-8f7a-da95feb9b9a6_fixed.java
index b6b11b6..7f57f3e 100644
--- a/tmp/c1276f4f-001b-49c2-8e70-644d46095585_buggy.java
+++ b/tmp/f33d4323-8a3b-4789-8f7a-da95feb9b9a6_fixed.java
@@ -1,38 +1,61 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
+        // The 'start' variable here is for the error message, indicating where the quoted string began.
+        // 'pos.getIndex()' upon entry points to the first character *after* the opening quote.
         int start = pos.getIndex(); 
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
+
+        // The initial 'if' block from the original code was problematic.
+        // When appendQuotedString is called, pos.getIndex() is already past the opening quote.
+        // If c[start] is a QUOTE, it implies an escaped quote (e.g., 'foo''''bar'),
+        // and the loop below is designed to handle this correctly.
+        // Removing this prevents incorrect early returns and inconsistent position updates.
+
+        int lastHold = pos.getIndex(); // Marks the beginning of the segment to append to appendTo
+
+        // Loop while the current parsing position is within the pattern bounds.
+        // All position advances are handled via 'pos' directly, avoiding synchronization issues.
+        while (pos.getIndex() < pattern.length()) {
+            // Check if the current segment starts with an escaped quote 'ESCAPED_QUOTE' (i.e., '').
+            // This check only applies if escaping is currently "on" for the context (e.g., within a format argument).
+            if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {
+                // Found an escaped quote 'EO_ESCAPE'
+                // Append the characters accumulated since 'lastHold' to 'appendTo'.
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                    appendTo.append(QUOTE); // Append the single unescaped quote character.
                 }
+                // Advance 'pos' past the entire 'ESCAPED_QUOTE' sequence (two quotes).
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
+                lastHold = pos.getIndex(); // Update 'lastHold' to the new current position.
+                // No 'continue' needed, the loop condition will be re-evaluated naturally.
+            } else {
+                // Not an escaped quote, so process the current character.
                 switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+                case QUOTE: // Found a closing quote.
+                    // Append any remaining characters before the closing quote.
+                    if (appendTo != null) {
+                        appendTo.append(c, lastHold, pos.getIndex() - lastHold);
                     }
+                    next(pos); // Consume the closing quote.
+                    return appendTo; // The quoted string is fully consumed, return.
+                default: // Regular character.
+                    next(pos); // Consume the character and advance 'pos'.
+                    // 'lastHold' remains the same as we are still accumulating characters for the current segment.
                 }
+            }
+        }
+        // If the loop finishes without finding a closing quote, the string is unterminated.
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
