diff --git a/tmp/12f4448d-85fc-4d12-bc33-7d3237142a47_buggy.java b/tmp/cf05fcd3-06e4-486d-a095-6261e089ef2c_fixed.java
index b6b11b6..385910c 100644
--- a/tmp/12f4448d-85fc-4d12-bc33-7d3237142a47_buggy.java
+++ b/tmp/cf05fcd3-06e4-486d-a095-6261e089ef2c_fixed.java
@@ -1,38 +1,73 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      *
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        final char[] charArray = pattern.toCharArray(); // Convert to char array once for efficient access
+
+        // Handle the case where the current position starts with an escaped quote ''
+        // This is crucial for fixing LANG-477. If it's an escaped quote,
+        // we append a single quote and advance the position past both quotes.
+        // Check bounds explicitly to prevent StringIndexOutOfBoundsException.
+        if (escapingOn && start + ESCAPED_QUOTE.length() <= pattern.length() &&
+            charArray[start] == QUOTE && charArray[start + 1] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(QUOTE);
             }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
+            pos.setIndex(start + ESCAPED_QUOTE.length()); // Advance past the '' sequence
+            return appendTo;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+
+        // If not an escaped quote, assume this is the start of a quoted string.
+        // The calling context (e.g., ExtendedMessageFormat.appendFormat) sets pos
+        // to point to the opening quote. So, we consume this initial quote.
+        next(pos); // Advance past the opening quote
+
+        int lastHold = pos.getIndex(); // Mark the beginning of the actual content to append
+
+        // Loop through the string from the current position, looking for the closing quote
+        // or other escaped quotes within the content.
+        while (pos.getIndex() < pattern.length()) {
+            // Check for escaped quotes within the string (e.g., 'it''s' where '' is inside)
+            // Use charArray and explicit bounds check for efficiency and safety.
+            if (escapingOn && pos.getIndex() + ESCAPED_QUOTE.length() <= pattern.length() &&
+                charArray[pos.getIndex()] == QUOTE && charArray[pos.getIndex() + 1] == QUOTE) {
+                if (appendTo != null) {
+                    // Append the characters accumulated since lastHold before the escaped quote
+                    appendTo.append(charArray, lastHold, pos.getIndex() - lastHold);
+                    // Append the single quote that represents the escaped ''
+                    appendTo.append(QUOTE);
+                }
+                // Advance position past the two characters of the escaped quote
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
+                lastHold = pos.getIndex(); // Update lastHold to the new position
+                continue; // Continue parsing from the new position
             }
+
+            // Check for the closing quote of the entire quoted string
+            if (charArray[pos.getIndex()] == QUOTE) {
+                if (appendTo != null) {
+                    // Append any remaining characters before the closing quote
+                    appendTo.append(charArray, lastHold, pos.getIndex() - lastHold);
+                }
+                next(pos); // Advance past the closing quote
+                return appendTo; // Successfully parsed and appended the quoted string
+            }
+
+            // If it's neither an escaped quote nor the closing quote, it's a regular
+            // character that is part of the quoted string content. Just advance the position.
+            next(pos);
         }
+
+        // If the loop finishes without finding a closing quote, it means the string is unterminated.
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
