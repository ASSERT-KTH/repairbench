diff --git a/tmp/bd84a17a-dae5-4b6f-8275-c6726fcc68c9_buggy.java b/tmp/059f6802-00c2-49a2-8c54-418ca1d46569_fixed.java
index b6b11b6..c707708 100644
--- a/tmp/bd84a17a-dae5-4b6f-8275-c6726fcc68c9_buggy.java
+++ b/tmp/059f6802-00c2-49a2-8c54-418ca1d46569_fixed.java
@@ -1,38 +1,75 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        int start = pos.getIndex(); // Store the starting position of the quoted string (the opening quote)
+
+        // The original code had a problematic early return here:
+        // if (escapingOn && c[start] == QUOTE) {
+        //     return appendTo == null ? null : appendTo.append(QUOTE);
+        // }
+        // This condition incorrectly handled a single quote at the start as an escaped quote,
+        // appended only one quote, and most critically, did NOT advance the ParsePosition.
+        // This led to an infinite loop in the calling method (e.g., ExtendedMessageFormat.applyPattern)
+        // when it re-processed the same unadvanced position, resulting in an OutOfMemoryError.
+
+        // A quoted string always starts with a quote, which must be consumed to advance parsing.
+        // This function's responsibility is to consume the *entire* quoted string,
+        // including its opening and closing quotes, and any internal escaped quotes.
+
+        // Consume the opening quote character.
+        next(pos); // Advance position past the initial QUOTE. 'pos' now points to the content or the next char.
+
+        int lastHold = pos.getIndex(); // Marks the beginning of the current segment to append
+        char[] c = pattern.toCharArray(); // Convert pattern to char array once for efficient character access
+
+        // Iterate through the pattern, starting immediately after the opening quote.
+        // The loop continues as long as 'pos' is within the pattern bounds.
+        for (; pos.getIndex() < pattern.length(); ) {
+            // Check for an escaped quote (e.g., "''") if escaping is enabled.
+            // This check is performed efficiently using charAt to avoid repeated substring creation.
+            // Ensure there are at least two characters remaining for an escaped quote sequence.
+            if (escapingOn && (pos.getIndex() + 1 < pattern.length()) &&
+                c[pos.getIndex()] == QUOTE && c[pos.getIndex() + 1] == QUOTE) {
+                
+                // Append the characters accumulated since 'lastHold'
+                // This appends content between the last 'lastHold' and the current 'pos.getIndex()'.
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                    // Append a single QUOTE to represent the escaped '' sequence
+                    appendTo.append(QUOTE); 
                 }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
+                
+                // Advance position past the two characters of the escaped quote (e.g., "''").
+                // ESCAPED_QUOTE.length() is 2.
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length()); 
+                lastHold = pos.getIndex(); // Update 'lastHold' for the next segment after the escaped quote
+                continue; // Continue to the next iteration of the loop
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+
+            // Check if the current character is the closing quote
+            if (c[pos.getIndex()] == QUOTE) {
+                // Append any remaining characters before the closing quote
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
                 }
+                next(pos); // Consume the closing quote by advancing 'pos'
+                return appendTo; // Successfully parsed the quoted string and return
             }
+
+            // If it's neither an escaped quote nor the closing quote, it's a regular content character.
+            next(pos); // Consume the character by advancing 'pos'
+        }
+
+        // If the loop finishes without finding a closing quote, the quoted string is unterminated.
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
