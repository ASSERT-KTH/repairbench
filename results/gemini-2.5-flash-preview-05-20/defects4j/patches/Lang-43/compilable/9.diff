diff --git a/tmp/0963b8ff-c27b-4f26-8fe8-4111d2e6ab9e_buggy.java b/tmp/30f9e5fc-0e83-48dd-a679-2e692676d4f4_fixed.java
index b6b11b6..9cb8dc9 100644
--- a/tmp/0963b8ff-c27b-4f26-8fe8-4111d2e6ab9e_buggy.java
+++ b/tmp/30f9e5fc-0e83-48dd-a679-2e692676d4f4_fixed.java
@@ -1,38 +1,61 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        int start = pos.getIndex(); // Store original start for error message
+        char[] c = pattern.toCharArray(); // For efficient character access
+
+        // The method is expected to be called when pos.getIndex() points to the opening quote.
+        // Consume the opening quote.
+        next(pos);
+
+        // lastHold marks the beginning of the actual content segment to be appended.
+        // It starts immediately after the opening quote.
+        int lastHold = pos.getIndex(); 
+
+        // Loop through the characters inside the quoted string
+        while (pos.getIndex() < pattern.length()) {
+            // Check for escaped quote sequence "''"
+            // We use substring().startsWith() to check for the two-character sequence.
+            if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {
+                // Append the characters collected since the last append point (lastHold)
+                // up to the current position (before the escaped quote).
+                appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                // Append a single QUOTE character, as the escaped sequence "''" represents one '.
+                appendTo.append(QUOTE);
+                // Advance the parse position past both characters of the escaped quote ("''").
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
+                // Update lastHold to the new current position, as characters before it have been appended.
                 lastHold = pos.getIndex();
-                continue;
+                continue; // Move to the next iteration to process characters after the escaped quote
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
+
+            // Check for the closing quote character
+            if (c[pos.getIndex()] == QUOTE) {
+                // Found the closing QUOTE. Append any remaining characters
+                // from lastHold up to this closing quote.
+                appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                // Consume the closing QUOTE character.
                 next(pos);
+                // The quoted string has been successfully parsed. Return the StringBuffer.
+                return appendTo;
             }
+
+            // Default case: It's a regular character within the quoted string.
+            // Just advance the parse position to the next character.
+            next(pos);
         }
+
+        // If the loop finishes, it means a closing quote was not found before the end of the pattern string.
+        // This indicates an unterminated quoted string, which is an error.
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
