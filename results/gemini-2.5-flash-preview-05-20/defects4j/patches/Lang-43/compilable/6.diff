diff --git a/tmp/e6480686-8141-45f0-9ed1-4641e9d4e11e_buggy.java b/tmp/c9a7e793-0161-4a6b-b2a3-99dd95d8737a_fixed.java
index b6b11b6..887b383 100644
--- a/tmp/e6480686-8141-45f0-9ed1-4641e9d4e11e_buggy.java
+++ b/tmp/c9a7e793-0161-4a6b-b2a3-99dd95d8737a_fixed.java
@@ -1,38 +1,74 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+        char[] c = pattern.toCharArray(); // Convert to char array once for efficiency
+
+        // Check if the current position starts with an escaped quote sequence, e.g., "''"
+        // This handles cases like `it''s` where `pos` is at the first quote of `''`.
+        if (escapingOn && start + ESCAPED_QUOTE.length() <= pattern.length() &&
+            pattern.substring(start, start + ESCAPED_QUOTE.length()).equals(ESCAPED_QUOTE)) {
+            
+            // Advance position past the escaped quote sequence (e.g., past both ' in '')
+            pos.setIndex(start + ESCAPED_QUOTE.length());
+            // Append a single literal quote
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
-            }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
+
+        // If we are here, it means we are at the beginning of a quoted string like "'test'".
+        // The character at 'start' is the opening quote. Consume it.
+        // The original code was missing `next(pos)` here for actual quoted strings,
+        // which would leave `pos` stuck at the opening quote, leading to incorrect parsing.
         next(pos); 
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
-            }
-        }
+        int lastHold = pos.getIndex(); // lastHold marks the beginning of the literal content *after* the opening quote.
+
+        // Loop to find the closing quote or escaped quotes within the string.
+        // We use a for(;;) infinite loop and explicitly break out with return or throw.
+        for (;;) {
+            // Check for end of pattern before finding closing quote
+            if (pos.getIndex() >= pattern.length()) {
                 throw new IllegalArgumentException(
                         "Unterminated quoted string at position " + start);
             }
+
+            // Check for escaped quote sequence within the string (e.g., "''" inside "'abc''def'")
+            if (escapingOn && pos.getIndex() + ESCAPED_QUOTE.length() <= pattern.length() &&
+                pattern.substring(pos.getIndex(), pos.getIndex() + ESCAPED_QUOTE.length()).equals(ESCAPED_QUOTE)) {
+                
+                // Append the characters collected since lastHold up to the current position (before the escaped quote)
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                    appendTo.append(QUOTE); // Then append a single literal quote
+                }
+                
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length()); // Advance past the escaped quote sequence
+                lastHold = pos.getIndex(); // Update lastHold to the new position (after the escaped quote)
+                continue; // Continue scanning from the new position
+            }
+
+            // Get the character at the current parse position
+            char currentChar = c[pos.getIndex()];
+
+            if (currentChar == QUOTE) {
+                // Found the closing quote of the string.
+                // Append any remaining content before this closing quote.
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                }
+                next(pos); // Consume the closing quote
+                return appendTo; // Return the buffer
+            } else {
+                // Regular character, just consume it and continue to the next character.
+                next(pos);
+            }
+        }
+    }
\ No newline at end of file
