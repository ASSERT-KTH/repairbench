diff --git a/tmp/b5c14d30-d04b-4473-86df-26725713989c_buggy.java b/tmp/c40a1e6a-ae29-463a-a3d6-79d79fbb687b_fixed.java
index b6b11b6..a1d800a 100644
--- a/tmp/b5c14d30-d04b-4473-86df-26725713989c_buggy.java
+++ b/tmp/c40a1e6a-ae29-463a-a3d6-79d79fbb687b_fixed.java
@@ -1,38 +1,61 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        int start = pos.getIndex(); // `start` is the index of the opening quote.
+
+        // The first character must be the opening QUOTE. Consume it.
+        // The calling context of this method (e.g., ExtendedMessageFormat.parse)
+        // ensures that pos.getIndex() points to a QUOTE character.
+        next(pos); // Advance `pos` past the opening quote.
+
+        int lastHold = pos.getIndex(); // `lastHold` now marks the start of the content *inside* the quotes.
+
+        while (pos.getIndex() < pattern.length()) {
+            char current = pattern.charAt(pos.getIndex());
+
+            // Check for escaped quote `''`
+            // If escapingOn is true, and we find two consecutive quotes.
+            // ESCAPED_QUOTE is typically "''"
+            if (escapingOn
+                && current == QUOTE // Current character is a quote
+                && pos.getIndex() + 1 < pattern.length() // And there's at least one more character
+                && pattern.charAt(pos.getIndex() + 1) == QUOTE) { // And the next character is also a quote
+                
+                // Append the characters collected since lastHold up to the current position.
+                if (appendTo != null) {
+                    appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);
+                    appendTo.append(QUOTE); // Append a single quote for the escaped double quotes.
                 }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
+                // Advance pos past the two escaped quotes.
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length()); // ESCAPED_QUOTE.length() is 2
+                lastHold = pos.getIndex(); // Update lastHold to the new current position.
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            // Check for closing quote `'`
+            else if (current == QUOTE) {
+                // Found the closing quote. Append any remaining text inside the quotes.
+                if (appendTo != null) {
+                    appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);
                 }
+                next(pos); // Advance pos past the closing quote.
+                return appendTo; // Successfully parsed the quoted string.
             }
+            // Regular character
+            else {
+                // Just consume the character and continue.
+                next(pos); // Advance pos by 1.
+            }
+        }
+
+        // If the loop finishes without finding a closing quote, the string is unterminated.
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
