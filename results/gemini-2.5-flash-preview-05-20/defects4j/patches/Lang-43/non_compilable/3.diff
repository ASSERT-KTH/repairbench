diff --git a/tmp/203b5e0e-0518-46ce-b046-c335d550da97_buggy.java b/tmp/f448d660-d85a-4394-806f-39d5732c77c1_fixed.java
index b6b11b6..5b391c2 100644
--- a/tmp/203b5e0e-0518-46ce-b046-c335d550da97_buggy.java
+++ b/tmp/f448d660-d85a-4394-806f-39d5732c77c1_fixed.java
@@ -1,38 +1,76 @@
+import java.text.ParsePosition; // Assuming ParsePosition is from java.text
+
+// Assuming QUOTE and ESCAPED_QUOTE are constants defined elsewhere, like:
+// private static final char QUOTE = '\'';
+// private static final String ESCAPED_QUOTE = "''";
+
+public class ExtendedMessageFormat { // Assuming this class context for constants
+
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
-            }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        char[] c = pattern.toCharArray(); // Convert to char array once for efficiency
+
+        // Ensure the current position actually points to an opening quote.
+        // The method's Javadoc implies this.
+        if (start >= pattern.length() || c[start] != QUOTE) {
+            throw new IllegalArgumentException(
+                    "Expected a quoted string starting with QUOTE at position " + start);
         }
+
+        // Handle the special case where the string starts with an escaped quote (e.g., "''").
+        // This is interpreted as a single literal quote.
+        // For example, if pattern is "''s" and pos is 0, this block handles the "''".
+        // It consumes "''" and appends a single "'".
+        if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, start)) {
+            pos.setIndex(start + ESCAPED_QUOTE.length()); // Advance past "''"
+            return appendTo == null ? null : appendTo.append(QUOTE); // Append a single quote and return.
         }
+
+        // Consume the opening quote character.
+        // For example, if pattern is "'test'", pos moves from index of first "'" to index of 't'.
+        pos.setIndex(start + 1);
+        int lastHold = pos.getIndex(); // 'lastHold' tracks the start of the current segment to append.
+
+        // Loop through the pattern to find the closing quote or other special characters.
+        while (pos.getIndex() < pattern.length()) {
+            // Check for an escaped quote (e.g., "''") within the string.
+            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, pos.getIndex())) {
+                // Append the characters accumulated since lastHold, up to the current position.
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                    appendTo.append(QUOTE); // Append the single quote represented by "''"
+                }
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length()); // Advance past the "''"
+                lastHold = pos.getIndex(); // Update lastHold to the new current position
+            } 
+            // Check for the closing quote character.
+            else if (c[pos.getIndex()] == QUOTE) {
+                // Append any remaining characters before the closing quote.
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                }
+                pos.setIndex(pos.getIndex() + 1); // Advance past the closing quote.
+                return appendTo; // Successfully parsed and appended the quoted string.
+            } 
+            // Default case: It's a regular character within the quoted string.
+            else {
+                pos.setIndex(pos.getIndex() + 1); // Just advance the position.
+            }
+        }
+
+        // If the loop finishes without finding a closing quote, the string is unterminated.
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
+}
\ No newline at end of file
