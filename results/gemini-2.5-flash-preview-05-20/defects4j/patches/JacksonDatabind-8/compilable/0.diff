diff --git a/tmp/dce89401-65a6-4286-afac-d5f63503a047_buggy.java b/tmp/b72821d2-de78-42a1-8195-60e7253ded82_fixed.java
index c9da1b7..8b74d29 100644
--- a/tmp/dce89401-65a6-4286-afac-d5f63503a047_buggy.java
+++ b/tmp/b72821d2-de78-42a1-8195-60e7253ded82_fixed.java
@@ -1,33 +1,86 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
-        _hasNonDefaultCreator = true;
+        _hasNonDefaultCreator = true; // This flag is set regardless of conflict resolution
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+
         if (oldOne != null) {
+            // Rule 1: If they represent the exact same underlying constructor/method, it's not a conflict.
+            // This handles cases where the same creator is discovered multiple times via different paths.
+            if (oldOne.getMember().equals(newOne.getMember())) {
+                return;
+            }
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+            // Otherwise, oldOne and newOne are different members.
+            final boolean oldOneExplicit = ((_explicitCreators & mask) != 0);
+
+            if (oldOneExplicit) { // Scenario A: oldOne was explicitly marked
+                // Rule 2: If oldOne is explicit, but newOne is NOT explicit, keep oldOne and ignore newOne.
                 if (!explicit) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+                // Scenario A.1: Both oldOne and newOne are explicit AND represent different members.
+                // This is generally a conflict, but we check for specificity for delegating creators.
+                // CREATOR_DELEGATING typically corresponds to typeIndex == 1
+                if (typeIndex == 1) { // Apply specificity rules for delegating creators
+                    // This logic only applies to single-argument creators for delegation.
+                    if (oldOne.getParameterCount() == 1 && newOne.getParameterCount() == 1) {
+                        Class<?> oldParam = oldOne.getRawParameterType(0);
+                        Class<?> newParam = newOne.getRawParameterType(0);
+                        // If new one's parameter type is assignable from old one's (new is less specific, old is more specific or same)
+                        // OR if old one's parameter type is assignable from new one's (old is less specific, new is more specific or same)
+                        if (oldParam.isAssignableFrom(newParam)) { // e.g., oldParam=CharSequence, newParam=String. newOne is more specific.
+                            // Accept newOne (more specific explicit creator overrides less specific explicit creator).
+                            // Allow to fall through to update _creators and _explicitCreators.
+                        } else if (newParam.isAssignableFrom(oldParam)) { // e.g., oldParam=String, newParam=CharSequence. oldOne is more specific.
+                            // Keep oldOne (more specific explicit creator).
+                            return;
                         }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+                    }
+                }
+                // If not resolved by specificity (e.g., not a single-arg delegating creator, or no clear specificity),
+                // it's a conflict between two different explicit creators.
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
+            // Scenario B: oldOne was NOT explicitly marked
+            else { // !oldOneExplicit
+                // Rule 3: If newOne IS explicitly marked, it overrides the non-explicit oldOne.
+                if (explicit) {
+                    // Allow to fall through to update _creators and _explicitCreators. No throw needed.
                 }
+                // Scenario B.1: Both oldOne and newOne are NOT explicitly marked AND different members.
+                // This is generally a conflict, but we check for specificity for delegating creators.
+                else {
+                    // CREATOR_DELEGATING typically corresponds to typeIndex == 1
+                    if (typeIndex == 1) { // Apply specificity rules for delegating creators
+                        if (oldOne.getParameterCount() == 1 && newOne.getParameterCount() == 1) {
+                            Class<?> oldParam = oldOne.getRawParameterType(0);
+                            Class<?> newParam = newOne.getRawParameterType(0);
+                            if (oldParam.isAssignableFrom(newParam)) { // newOne is more specific or equally specific
+                                // Accept newOne (more specific non-explicit creator overrides less specific non-explicit creator).
+                                // Allow to fall through.
+                            } else if (newParam.isAssignableFrom(oldParam)) { // oldOne is more specific
+                                // Keep oldOne (more specific non-explicit creator).
+                                return;
+                            }
+                        }
+                    }
+                    // If not resolved by specificity, it's a conflict between two different non-explicit creators.
+                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                            +" creators: already had non-explicit creator "+oldOne+", encountered non-explicit "+newOne);
+                }
+            }
+        }
+        // If we reach here, it means:
+        // - oldOne was null (no previous creator)
+        // - oldOne and newOne were the same member (handled by early return)
+        // - oldOne was non-explicit, and newOne is explicit (new explicit overrides old non-explicit)
+        // - For delegating creators, newOne was more specific than oldOne (either both explicit or both non-explicit).
+        // In all these cases, newOne is the one to be used.
+
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
