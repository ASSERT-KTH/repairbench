diff --git a/tmp/7453d926-59d5-4e90-aa1a-587762ee8e7c_buggy.java b/tmp/eb2de87a-1365-4554-93dc-367d3f27a1c6_fixed.java
index c9da1b7..353d756 100644
--- a/tmp/7453d926-59d5-4e90-aa1a-587762ee8e7c_buggy.java
+++ b/tmp/eb2de87a-1365-4554-93dc-367d3f27a1c6_fixed.java
@@ -1,33 +1,47 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
+
         // already had an explicitly marked one?
         if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
+            // [databind#1165]: If they refer to the exact same underlying Method/Constructor, it's not a conflict
+            // but rather a redundant registration or re-discovery.
+            if (oldOne.getMember().equals(newOne.getMember())) {
+                // If the 'new' instance is explicit and the 'old' one was not,
+                // update to be explicit and potentially update the stored creator instance
+                // (e.g., if new one has better access configuration).
+                if (explicit && ((_explicitCreators & mask) == 0)) {
+                    _explicitCreators |= mask;
+                    _creators[typeIndex] = _fixAccess(newOne);
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+                return; // No conflict, handled.
             }
 
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // They are different creators; now apply conflict rules based on explicit marking
+            if ((_explicitCreators & mask) != 0) { // oldOne was explicitly annotated
+                if (!explicit) { // newOne is NOT explicit
+                    return; // Keep the old, explicit creator; ignore non-explicit new.
+                }
+                // Both old and new are explicit, AND they are different members. This is a conflict.
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
+            // oldOne was NOT explicitly annotated.
+            // If newOne is explicit, it replaces the non-explicit old one. This is not a conflict.
+            if (explicit) {
+                // Fall through to update the creator and explicit flag below.
+            } else {
+                // Neither old nor new are explicit, AND they are different members. This is a conflict.
+                throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                        +" creators: already had "+oldOne+", encountered "+newOne);
             }
+        }
+
+        // If oldOne was null, or new one is explicit and replaces a non-explicit old one.
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
