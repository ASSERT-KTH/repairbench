diff --git a/tmp/7c7a677b-3271-4d7a-9d31-8ee695f63b32_buggy.java b/tmp/de6daefa-5d2e-43a6-8f46-d0e759e203e8_fixed.java
index c9da1b7..0c24b57 100644
--- a/tmp/7c7a677b-3271-4d7a-9d31-8ee695f63b32_buggy.java
+++ b/tmp/de6daefa-5d2e-43a6-8f46-d0e759e203e8_fixed.java
@@ -1,33 +1,60 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+
+        // If an old creator already exists, we need to check for conflicts or identical registrations
         if (oldOne != null) {
+            // [databind#133]: If new creator is functionally identical to the existing one,
+            // there's no conflict. We might need to update explicit status.
+            if (oldOne.equals(newOne)) {
+                // If the new one is explicit but the existing one was not,
+                // we should promote its explicit status and potentially update the stored instance.
+                if (explicit && ((_explicitCreators & mask) == 0)) {
+                    _explicitCreators |= mask;
+                    // Update the stored creator, _fixAccess might change its properties
+                    _creators[typeIndex] = _fixAccess(newOne);
+                }
+                return; // No conflict, identical creator.
+            }
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+            // Otherwise, `oldOne` and `newOne` are different creators.
+            // Check for conflict based on explicit status.
+            if ((_explicitCreators & mask) != 0) { // Existing creator was explicitly marked
+                // If new one is NOT explicit, existing explicit one wins.
                 if (!explicit) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+                // Both existing and new are explicit AND different. This is a conflict.
+                // The `getClass()` check typically confirms they are the same type of creator (e.g., both constructors).
                 if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
                 }
+                // If they are different wrapper types (e.g., AnnotatedConstructor vs AnnotatedMethod),
+                // the exception is not thrown (as per original logic).
             }
+            // If existing creator was NOT explicit
+            else {
+                // If new one is also NOT explicit:
+                if (!explicit) {
+                    // Both existing and new are non-explicit AND different. This is a conflict.
+                    if (oldOne.getClass() == newOne.getClass()) {
+                        throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                                +" creators: already had "+oldOne+", encountered "+newOne);
+                    }
+                    // If they are different wrapper types, no throw.
+                }
+                // Else (`newOne` IS explicit): `newOne` should override `oldOne`.
+                // Allow execution to fall through to the final assignment.
+            }
+        }
+
+        // If we reach here, `newOne` should be the one registered (either `oldOne` was null,
+        // or `newOne` is a 'better' creator (e.g., explicit over non-explicit).
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
