diff --git a/tmp/7621178d-cbc7-4f62-96f9-a243b102163e_buggy.java b/tmp/2f148375-eb1e-4cd7-8077-c4bbff98a3c7_fixed.java
index c9da1b7..c3fa9a3 100644
--- a/tmp/7621178d-cbc7-4f62-96f9-a243b102163e_buggy.java
+++ b/tmp/2f148375-eb1e-4cd7-8077-c4bbff98a3c7_fixed.java
@@ -1,33 +1,53 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
-        _hasNonDefaultCreator = true;
+        _hasNonDefaultCreator = true; // Always true if we're adding or updating a creator
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+
         if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
+            // Case 1: oldOne and newOne are the exact same creator (same underlying Constructor/Method)
+            if (oldOne.getAnnotated() == newOne.getAnnotated()) {
+                // No conflict, just update explicit flag and creator entry if needed, then return.
+                if (explicit) {
+                    _explicitCreators |= mask;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+                _creators[typeIndex] = _fixAccess(newOne);
+                return; // Handled, no further conflict checking needed.
             }
 
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
+            // Case 2: oldOne and newOne are different creators.
+            boolean oldOneExplicit = ((_explicitCreators & mask) != 0);
 
+            if (oldOneExplicit) { // oldOne was explicitly annotated
+                if (!explicit) { // newOne is not explicit
+                    return; // Explicit old creator wins over non-explicit new one.
+                }
+                // Both oldOne and newOne are explicit AND DIFFERENT. This IS a conflict.
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
+            // oldOne was NOT explicitly annotated.
+            if (explicit) { // newOne IS explicit
+                // New explicit creator wins over old non-explicit one.
+                // This means newOne will be assigned below and its explicit flag set.
+                // No 'return' needed, allow the assignment to proceed.
+            } else { // Both oldOne and newOne are NOT explicit AND DIFFERENT. This IS a conflict.
+                // This applies to [databind#667]: avoids two DIFFERENT non-explicit creators
+                // of the same "kind" (e.g., two different AnnotatedConstructor instances).
+                if (oldOne.getClass() == newOne.getClass()) {
+                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                            +" creators: already had "+oldOne+", encountered "+newOne);
                 }
+            }
+        }
+        // If we reach here, it means:
+        // 1. oldOne was null (first creator for this typeIndex).
+        // 2. oldOne was non-explicit, newOne is explicit (newOne wins).
+        // 3. oldOne was non-explicit, newOne is non-explicit, BUT oldOne.getClass() != newOne.getClass()
+        //    (e.g., old was AnnotatedConstructor, new is AnnotatedMethod - allow replacement as they are different "kinds").
+        // In all these cases, `newOne` is now the chosen creator.
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
