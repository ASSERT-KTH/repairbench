diff --git a/tmp/788d13c4-e3e5-4576-b96f-9bcd8c09b83b_buggy.java b/tmp/1cbdbb6e-b3f3-4e30-bff7-5eaaed281a3b_fixed.java
index c9da1b7..a5edbed 100644
--- a/tmp/788d13c4-e3e5-4576-b96f-9bcd8c09b83b_buggy.java
+++ b/tmp/1cbdbb6e-b3f3-4e30-bff7-5eaaed281a3b_fixed.java
@@ -1,33 +1,54 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
+            // [databind#1389]: If the incoming creator is the exact same as the one already registered,
+            // it's not a conflict, just a re-discovery/re-registration.
+            // This is especially true for implicitly discovered creators like default constructors.
+            if (oldOne.getMember().equals(newOne.getMember())) {
+                // If the new one is explicit, ensure the explicit bit is set.
+                // This covers cases where it was previously implicit but now discovered explicitly.
+                if (explicit) {
+                    _explicitCreators |= mask;
+                }
+                // No need to update _creators[typeIndex] as it's the same creator.
+                return;
+            }
 
+            // Original logic for handling conflicts for *different* creators.
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+                // both explicit: verify (means continue to check for conflict below)
             }
 
-            // one more thing: ok to override in sub-class
+            // At this point: oldOne != null, and oldOne.getMember() != newOne.getMember().
+            // This means we are comparing two *different* creator members.
+            // If they are of the same wrapper type (e.g., both AnnotatedConstructor), then it's a conflict.
+            // If they are different wrapper types (e.g., AnnotatedConstructor vs AnnotatedMethod),
+            // the new one will just overwrite the old one (as per the final assignment below).
             if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+                // [databind#667]: avoid one particular class of bogus problems (context for original exception)
+                // This throw is now correct because we've already filtered out cases where they are the *same* member.
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
         }
+        // If we reach here, either:
+        // 1. oldOne was null (no existing creator)
+        // 2. oldOne existed, but was the same member as newOne (handled by 'return' above)
+        // 3. oldOne existed, was explicit, but newOne was not explicit (handled by 'return' above)
+        // 4. oldOne existed, was non-explicit, newOne was explicit (newOne replaces oldOne)
+        // 5. oldOne existed, was non-explicit, newOne was non-explicit, BUT oldOne.getClass() != newOne.getClass()
+        //    (e.g., a constructor creator vs a factory method creator, both non-explicit; newOne replaces oldOne)
+
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
