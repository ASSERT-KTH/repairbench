diff --git a/tmp/fe47cd0e-78b0-4fbf-a5c7-4f0794c81b8a_buggy.java b/tmp/21566aa3-de69-4ab7-88e0-4c23acf28d87_fixed.java
index c9da1b7..613b63d 100644
--- a/tmp/fe47cd0e-78b0-4fbf-a5c7-4f0794c81b8a_buggy.java
+++ b/tmp/21566aa3-de69-4ab7-88e0-4c23acf28d87_fixed.java
@@ -1,33 +1,52 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+        
         if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+            // Case 1: 'newOne' is the exact same creator as 'oldOne' (e.g., same constructor/method)
+            // If they refer to the same underlying member, it's not a conflict.
+            // We only need to potentially update if 'newOne' is explicit and 'oldOne' was not.
+            if (oldOne.getAnnotated().equals(newOne.getAnnotated())) {
+                // If oldOne was already explicit, or newOne is not explicit, no change is needed.
+                // The explicit flag is already set correctly, or no improvement is offered.
+                if ((_explicitCreators & mask) != 0 || !explicit) {
+                    return;
+                }
+                // Else: oldOne was NOT explicit, and newOne IS explicit. Fall through to update.
+            } else {
+                // Case 2: 'newOne' is a different creator from 'oldOne'. This is a potential conflict.
+                // Check if 'oldOne' was explicitly marked.
+                if ((_explicitCreators & mask) != 0) { 
+                    // If 'oldOne' was explicitly annotated, and 'newOne' is not, 'oldOne' wins.
                     if (!explicit) {
                         return;
                     }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+                    // Both 'oldOne' and 'newOne' are explicitly marked AND they are different => CONFLICT!
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
                 }
+                
+                // At this point: 'oldOne' was NOT explicitly marked.
+                // If 'newOne' IS explicit, 'newOne' wins and replaces 'oldOne'. (Handled by lines outside this block)
+                // If 'newOne' is NOT explicit, and 'oldOne' is NOT explicit, AND they are different
+                // but of the same "kind" (e.g., both constructors or both factory methods), then it's a conflict.
+                if (oldOne.getClass() == newOne.getClass()) {
+                    // [databind#667]: avoid one particular class of bogus problems where non-explicit
+                    // creators of same type (e.g. constructor) would conflict.
+                    // This is a conflict if both are not explicit and are different but same kind.
+                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                            +" creators: already had "+oldOne+", encountered "+newOne);
                 }
+                // If oldOne was not explicit, and newOne is not explicit, but they are of different kinds
+                // (e.g., constructor vs static factory), no conflict: the new one will override the old one.
+            }
+        }
+        
+        // If we reach here, it means 'newOne' should be registered/updated.
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
