diff --git a/tmp/09a27ed0-fd56-4f0a-bda5-7779dbfe6723_buggy.java b/tmp/4fa6beaa-5f59-42b0-9fe1-3673998fee40_fixed.java
index c9da1b7..f94ec33 100644
--- a/tmp/09a27ed0-fd56-4f0a-bda5-7779dbfe6723_buggy.java
+++ b/tmp/4fa6beaa-5f59-42b0-9fe1-3673998fee40_fixed.java
@@ -1,33 +1,36 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
             }
 
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
             // [databind#667]: avoid one particular class of bogus problems
-
+            // If the old creator and new creator refer to the exact same underlying member (e.g., same constructor),
+            // it's not a conflict, just a redundant registration.
+            // AnnotatedWithParams (and its subclasses) should implement equals() based on the underlying Member.
+            if (oldOne.getClass() == newOne.getClass() && !oldOne.equals(newOne)) {
+                // If they are of the same "Annotated" class (e.g., both AnnotatedConstructor)
+                // AND they represent different underlying creators (i.e., !equals),
+                // THEN it's a conflict.
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
+            // Otherwise, either they are of different Annotated types (e.g. constructor vs factory method),
+            // or they are the same creator (oldOne.equals(newOne)), in which case no conflict.
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
