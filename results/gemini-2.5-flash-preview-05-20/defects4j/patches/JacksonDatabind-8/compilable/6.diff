diff --git a/tmp/317a98f5-6ba1-4d94-afbf-a49bec8948a1_buggy.java b/tmp/6901bd50-44bb-4ad8-8dc3-797c34e30457_fixed.java
index c9da1b7..f9e40cf 100644
--- a/tmp/317a98f5-6ba1-4d94-afbf-a49bec8948a1_buggy.java
+++ b/tmp/6901bd50-44bb-4ad8-8dc3-797c34e30457_fixed.java
@@ -1,33 +1,96 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
+            // [databind#667]: If old and new are the exact same creator (same underlying Member),
+            // then it's a redundant registration, not a conflict.
+            if (oldOne.getAnnotated().equals(newOne.getAnnotated())) {
+                if (explicit) { // If new one is explicit, make sure this creator type is marked as such
+                    _explicitCreators |= mask;
+                }
+                return; // No conflict, already have this exact creator, possibly update explicit flag
+            }
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+            // At this point, oldOne and newOne are different underlying creator Members.
+
+            // If oldOne was explicitly marked (via _explicitCreators bit)
+            if ((_explicitCreators & mask) != 0) {
+                // If newOne is NOT explicitly annotated, oldOne wins.
                 if (!explicit) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+                // Else (both explicit): this is a true conflict, unless specific rules apply (handled below).
+                // Falls through to potential throw.
+            } else { // oldOne was NOT explicitly marked
+                // If newOne IS explicit, it overrides the non-explicit oldOne.
+                if (explicit) {
+                    _explicitCreators |= mask; // Mark this creator type as explicit
+                    // Allow newOne to overwrite oldOne by letting it fall through to assignment.
+                    return; // New one wins, don't throw, proceed to assignment.
                 }
+                // Else (neither explicit): potentially problematic for certain types like StringBuilder.
+                // Falls through to potential throw.
+            }
+
+            // Reaching here means:
+            // 1. Both oldOne and newOne are explicit AND are different creators (true conflict likely).
+            // 2. Neither oldOne nor newOne is explicit AND are different creators (potentially handled by #667 for some types).
 
-            // one more thing: ok to override in sub-class
+            // This condition checks if both are of the same "kind" (e.g., both AnnotatedConstructor).
             if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
+                // [databind#667]: For common JDK types like String, StringBuilder, StringBuffer,
+                // allow implicit creators to be overwritten by other implicit ones, or more specific ones.
+                // The TYPE_DESCS array typically has String/StringBuilder/StringBuffer at specific indices (0, 1, 2).
+                // This check applies if neither is explicit, or if new one is explicit and old one is not (handled above).
+                // So, if we are here and `explicit` is false, it means `oldOne` was also not explicit.
+                // This is the specific scenario where `StringBuilder` issue for #667 often occurs.
+                // We should NOT throw an exception for these types when neither is explicit.
+                final int CREATOR_FOR_STRING = 0; // Assuming constants from CreatorProperty
+                final int CREATOR_FOR_STRING_BUILDER = 1;
+                final int CREATOR_FOR_STRING_BUFFER = 2;
 
+                // Check if both creators are for the same declaring class (e.g. both for StringBuilder.class)
+                // This prevents conflicts between creators in different classes (e.g. subclass/superclass)
+                if (oldOne.getDeclaringClass() == newOne.getDeclaringClass()) {
+                    // Check if it's one of the special types that allows flexible creator resolution
+                    if (typeIndex == CREATOR_FOR_STRING || typeIndex == CREATOR_FOR_STRING_BUILDER || typeIndex == CREATOR_FOR_STRING_BUFFER) {
+                        // If it's a special type, and if either newOne is explicit (which would win),
+                        // or if neither was explicit (and we are allowing overwrite for this specific case),
+                        // THEN DO NOT THROW. Let it proceed to assignment.
+                        // The scenario where `explicit` is false and `(_explicitCreators & mask) == 0` (neither explicit)
+                        // will fall into this block, and we want to allow overwrite for StringBuilder.
+                        // The case where `explicit` is true and `(_explicitCreators & mask) != 0` (both explicit)
+                        // will fall through here, and should still throw unless more specific rules apply.
+                        // Given the test failure (annotations: [null] for newOne), this `if (explicit)` branch is key.
+                        if (explicit) { // Both explicit; this is a conflict for same class, different members
                             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                        }
+                        // Neither explicit; for String/StringBuilder/StringBuffer, allow overwrite
+                        // by not throwing, and letting newOne be assigned.
+                    } else { // Not a special type (e.g. custom bean type)
+                        // If both explicit, or neither explicit for same class: conflict
+                        throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                                +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+                    }
+                } else { // Creators from different declaring classes (e.g. super/sub class)
+                    // If newOne is from a more specific (sub)class, it typically wins over an old one from a superclass.
+                    // If oldOne is from a more specific (sub)class, it typically wins.
+                    // The current logic doesn't explicitly check class hierarchy for conflicts,
+                    // but if they're from different classes and there's no clear precedence (e.g. no explicit marker),
+                    // it's a potential error or needs more detailed resolution.
+                    // For now, if same 'kind' but different declaring classes, and not handled by explicit rules,
+                    // it's a conflict.
+                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                             +" creators: already had "+oldOne+", encountered "+newOne);
+                }
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
