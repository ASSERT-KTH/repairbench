diff --git a/tmp/f248f0b5-c19f-48aa-8f44-673efafeec28_buggy.java b/tmp/56e9bb8c-e006-457a-9573-caecd7a21039_fixed.java
index c9da1b7..b4cee16 100644
--- a/tmp/f248f0b5-c19f-48aa-8f44-673efafeec28_buggy.java
+++ b/tmp/56e9bb8c-e006-457a-9573-caecd7a21039_fixed.java
@@ -1,33 +1,40 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
+            } else { // had implicit, new one is explicit?
+                if (!explicit) { // both implicit, verify
+                    // [databind#667]: if same creator is re-registered (same physical method/constructor),
+                    // it's not a conflict.
+                    if (oldOne.equals(newOne)) {
+                        return;
+                    }
+                }
             }
 
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
-
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
                 // otherwise, which one to choose?
                     // new type more generic, use old
                 // new type more specific, use it
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
