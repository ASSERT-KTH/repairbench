diff --git a/tmp/44f335fc-1036-4444-a083-158c85b161ce_buggy.java b/tmp/212665f1-a85b-4e46-b0ea-3bb659b60ebf_fixed.java
index 7dc89ed..213e834 100644
--- a/tmp/44f335fc-1036-4444-a083-158c85b161ce_buggy.java
+++ b/tmp/212665f1-a85b-4e46-b0ea-3bb659b60ebf_fixed.java
@@ -1,20 +1,20 @@
         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {
-            String name = t.asEndTag().normalName();
+            String name = t.asEndTag().normalName(); // The name of the end tag (e.g., "X")
             ArrayList<Element> stack = tb.getStack();
-            for (int pos = stack.size() -1; pos >= 0; pos--) {
+            for (int pos = stack.size() -1; pos >= 0; pos--) { // Iterate from current element down the stack
                 Element node = stack.get(pos);
-                if (node.nodeName().equals(name)) {
-                    tb.generateImpliedEndTags(name);
-                    if (!name.equals(tb.currentElement().nodeName()))
-                        tb.error(this);
-                    tb.popStackToClose(name);
-                    break;
-                } else {
-                    if (tb.isSpecial(node)) {
-                        tb.error(this);
-                        return false;
+                if (node.nodeName().equals(name)) { // If a matching open tag is found on the stack
+                    tb.generateImpliedEndTags(name); // Potentially close implied tags *up to* 'name'
+                    if (!name.equals(tb.currentElement().nodeName())) // Check if 'name' was already implicitly closed
+                        tb.error(this); // Report an error if it was
+                    tb.popStackToClose(name); // Pop elements from stack until 'name' is popped
+                    break; // Stop iteration, as the matching tag was found and handled
+                } else { // If the current stack node does not match the end tag name
+                    if (tb.isSpecial(node)) { // If we encounter a "special" HTML element (like <body>, <table>)
+                        tb.error(this); // Report an error
+                        return false; // Indicate that this end tag cannot be handled here (it's blocked by a special node)
                     }
                 }
             }
-            return true;
+            return true; // If the loop completes (either found and broke, or didn't find and no special node blocked)
         }
\ No newline at end of file
