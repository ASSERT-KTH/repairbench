diff --git a/tmp/364944c7-e761-4033-9665-9f3f3e06d117_buggy.java b/tmp/95bb27a8-aed6-41d8-ad54-3187988b2066_fixed.java
index 7dc89ed..57b53ae 100644
--- a/tmp/364944c7-e761-4033-9665-9f3f3e06d117_buggy.java
+++ b/tmp/95bb27a8-aed6-41d8-ad54-3187988b2066_fixed.java
@@ -1,20 +1,51 @@
         boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {
-            String name = t.asEndTag().normalName();
+            String endTagName = t.asEndTag().name(); // The original case of the end tag, e.g., "X"
+            String endTagNormalName = t.asEndTag().normalName(); // The normalized (lowercase) case of the end tag, e.g., "x"
+
+            // Determine the name to match against on the stack, based on the current parse settings.
+            // If preserving case, we match the original name. Otherwise, we match the normalized name.
+            String nameToMatch = tb.settings().preserveCase() ? endTagName : endTagNormalName;
+
             ArrayList<Element> stack = tb.getStack();
             for (int pos = stack.size() - 1; pos >= 0; pos--) {
                 Element node = stack.get(pos);
-                if (node.nodeName().equals(name)) {
-                    tb.generateImpliedEndTags(name);
-                    if (!name.equals(tb.currentElement().nodeName()))
+                String nodeName = node.nodeName(); // The name of the element on the stack (original case)
+
+                boolean foundMatch;
+                if (tb.settings().preserveCase()) {
+                    // If preserving case, compare the node's original name directly with the end tag's original name.
+                    foundMatch = nodeName.equals(nameToMatch);
+                } else {
+                    // If not preserving case, compare the node's lowercased name with the end tag's normalized name.
+                    foundMatch = nodeName.toLowerCase().equals(nameToMatch);
+                }
+
+                if (foundMatch) {
+                    // Generate implied end tags: this typically follows HTML5 spec, which implies normalization.
+                    tb.generateImpliedEndTags(endTagNormalName);
+
+                    // Check if the current element matches the end tag for error reporting.
+                    // The comparison must be consistent with the case preservation settings.
+                    if (tb.settings().preserveCase()) {
+                        // If preserving case, direct comparison of original names.
+                        if (!nameToMatch.equals(tb.currentElement().nodeName()))
                             tb.error(this);
-                    tb.popStackToClose(name);
+                    } else {
+                        // If not preserving case, compare normalized names.
+                        if (!nameToMatch.equals(tb.currentElement().nodeName().toLowerCase()))
+                            tb.error(this);
+                    }
+
+                    // Pop stack to close: pass the determined 'nameToMatch'.
+                    // The 'popStackToClose' method's internal comparison should then handle the case appropriately.
+                    tb.popStackToClose(nameToMatch);
                     break;
                 } else {
                     if (tb.isSpecial(node)) {
                         tb.error(this);
                         return false;
                     }
                 }
             }
             return true;
         }
\ No newline at end of file
