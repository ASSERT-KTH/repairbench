diff --git a/tmp/59ef2994-3ed7-41c4-884c-d22e2181db4c_buggy.java b/tmp/2e8dab55-e41d-4adf-9461-4eb0fb8f50a2_fixed.java
index ae3784d..20a085b 100644
--- a/tmp/59ef2994-3ed7-41c4-884c-d22e2181db4c_buggy.java
+++ b/tmp/2e8dab55-e41d-4adf-9461-4eb0fb8f50a2_fixed.java
@@ -1,14 +1,18 @@
     /**
      Remove an attribute by key. <b>Case insensitive.</b>
      @param key attribute key to remove
      */
     public void removeIgnoreCase(String key) {
         Validate.notEmpty(key);
         if (attributes == null)
             return;
+        // To avoid ConcurrentModificationException, we must use the Iterator's remove() method
+        // when modifying the underlying collection during iteration, or collect keys to remove
+        // and remove them after the loop. Using Iterator.remove() is more direct and efficient here.
         for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {
             String attrKey = it.next();
-            if (attrKey.equalsIgnoreCase(key))
-                attributes.remove(attrKey);
+            if (attrKey.equalsIgnoreCase(key)) {
+                it.remove(); // Safely removes the attribute from the 'attributes' map
+            }
         }
     }
\ No newline at end of file
