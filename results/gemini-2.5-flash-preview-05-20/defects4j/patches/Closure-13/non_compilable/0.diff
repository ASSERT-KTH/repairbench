diff --git a/tmp/ad2f4466-31a8-4e97-8adf-40d33e2a2d8d_buggy.java b/tmp/c4e7308c-29d4-419d-965f-56d4e62e5ffe_fixed.java
index b5d94e0..3bed5f4 100644
--- a/tmp/ad2f4466-31a8-4e97-8adf-40d33e2a2d8d_buggy.java
+++ b/tmp/c4e7308c-29d4-419d-965f-56d4e62e5ffe_fixed.java
@@ -1,26 +1,43 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
+      // Create a snapshot of the children list at the beginning of each retraversal iteration.
+      // This is crucial because recursive calls to traverse(c) or visit(node)
+      // might modify the children list of the current 'node' (e.g., by adding,
+      // removing, or reordering children). If a child 'c' is removed or its siblings
+      // are modified during 'traverse(c)', calling 'c.getNext()' afterwards can lead
+      // to skipped nodes or unexpected behavior.
+      // By taking a snapshot, we ensure that all children present at the start of
+      // this traversal pass are visited exactly once.
+      List<Node> childrenToTraverse = new ArrayList<>();
       Node c = node.getFirstChild();
       while (c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
+        childrenToTraverse.add(c);
+        c = c.getNext();
+      }
+
+      for (Node child : childrenToTraverse) {
+        // It's possible for a child to have been detached from 'node' by a previous
+        // recursive call (e.g., moved elsewhere in the AST or removed entirely).
+        // However, we still attempt to traverse it. The 'shouldVisit(node)' check
+        // at the beginning of 'traverse(node)' will prevent further processing if
+        // the node is no longer relevant or has been detached.
+        traverse(child);
       }
 
       visit(node);
       visits++;
 
       Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
