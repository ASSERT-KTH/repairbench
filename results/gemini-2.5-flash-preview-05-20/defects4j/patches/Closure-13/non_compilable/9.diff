diff --git a/tmp/d8cf0965-80b0-4b2f-9750-5796322a2a13_buggy.java b/tmp/fd1693ee-3705-461a-8b41-19c0958302d4_fixed.java
index b5d94e0..94e6051 100644
--- a/tmp/d8cf0965-80b0-4b2f-9750-5796322a2a13_buggy.java
+++ b/tmp/fd1693ee-3705-461a-8b41-19c0958302d4_fixed.java
@@ -1,26 +1,36 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
-      Node c = node.getFirstChild();
+      // It is crucial to iterate over children in a way that is robust to
+      // structural changes (additions, removals, replacements) that might occur
+      // during the traversal of a child node.
+      // Iterating backwards is a common pattern to safely handle child
+      // removals or replacements, as getting the 'previous' sibling is less
+      // likely to be invalidated if the 'current' child is removed.
+      Node c = node.getLastChild();
       while(c != null) {
+        Node prev = c.getPrevious(); // Get the previous sibling *before* traversing 'c'
         traverse(c);
-        Node next = c.getNext();
-        c = next;
+        // After traverse(c), 'c' might have been removed, replaced, or new
+        // siblings might have been added. By storing 'prev' beforehand,
+        // we ensure we always have a valid reference to continue the iteration,
+        // even if 'c' itself is no longer attached or its 'getNext()' becomes invalid.
+        c = prev;
       }
 
       visit(node);
       visits++;
 
       Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
