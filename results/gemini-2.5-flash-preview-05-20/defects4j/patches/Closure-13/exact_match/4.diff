diff --git a/tmp/e87a07f3-5b77-450e-afa1-77001b129139_buggy.java b/tmp/1fe9544b-268a-496b-b23c-7977609f8b9a_fixed.java
index b5d94e0..e74cc2d 100644
--- a/tmp/e87a07f3-5b77-450e-afa1-77001b129139_buggy.java
+++ b/tmp/1fe9544b-268a-496b-b23c-7977609f8b9a_fixed.java
@@ -1,26 +1,38 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
+      // Re-initialize the child pointer for each iteration of the do-while loop.
+      // This is important because the child list might have changed due to
+      // optimizations applied during the previous child traversal or the
+      // 'visit(node)' call.
       Node c = node.getFirstChild();
       while(c != null) {
-        traverse(c);
+        // IMPORTANT FIX: Get the next sibling *before* the recursive call.
+        // The recursive call 'traverse(c)' might modify 'c' itself
+        // (e.g., by replacing it, or removing it from its parent).
+        // If 'c' is detached, calling 'c.getNext()' *after* 'traverse(c)'
+        // would incorrectly return null, causing subsequent siblings to be skipped.
+        // By capturing 'next' beforehand, we ensure we always move to the correct
+        // subsequent node in the original child list, regardless of what happens to 'c'
+        // during its traversal.
         Node next = c.getNext();
+        traverse(c);
         c = next;
       }
 
       visit(node);
       visits++;
 
       Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
