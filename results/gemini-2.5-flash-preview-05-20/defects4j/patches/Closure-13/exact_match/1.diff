diff --git a/tmp/d39cd66a-b5b2-4f64-ad7f-d37cb41ca35c_buggy.java b/tmp/227a6f16-863b-4a93-afa5-f48b2f6c4cc4_fixed.java
index b5d94e0..1f81b2d 100644
--- a/tmp/d39cd66a-b5b2-4f64-ad7f-d37cb41ca35c_buggy.java
+++ b/tmp/227a6f16-863b-4a93-afa5-f48b2f6c4cc4_fixed.java
@@ -1,26 +1,32 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
+      // Get the first child for the current iteration.
       Node c = node.getFirstChild();
       while(c != null) {
-        traverse(c);
+        // Store the next sibling BEFORE processing the current child 'c'.
+        // This is crucial because processing 'c' (or a child of 'c') might
+        // modify the child list of 'node', potentially detaching 'c' or
+        // changing its next sibling. By storing 'next' beforehand, we ensure
+        // we correctly move to the subsequent node in the original list.
         Node next = c.getNext();
+        traverse(c);
         c = next;
       }
 
       visit(node);
       visits++;
 
       Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
