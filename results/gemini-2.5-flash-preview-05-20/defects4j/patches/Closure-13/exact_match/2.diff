diff --git a/tmp/038bdc4d-4600-45f8-b641-fe3ed242835b_buggy.java b/tmp/ffb0e4fa-e49c-4d86-88f9-19ca6ec440e4_fixed.java
index b5d94e0..02714ae 100644
--- a/tmp/038bdc4d-4600-45f8-b641-fe3ed242835b_buggy.java
+++ b/tmp/ffb0e4fa-e49c-4d86-88f9-19ca6ec440e4_fixed.java
@@ -1,26 +1,32 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
+      // Fix: Get the next sibling *before* traversing the current child.
+      // If a child node 'c' is removed from its parent during the
+      // recursive call to `traverse(c)`, then `c.getNext()` would
+      // return null, prematurely terminating the child iteration.
+      // By storing `next` beforehand, we ensure the iteration
+      // continues correctly even if `c` is detached.
       Node c = node.getFirstChild();
       while(c != null) {
+        Node next = c.getNext(); // Store next sibling before `c` might be modified or detached.
         traverse(c);
-        Node next = c.getNext();
-        c = next;
+        c = next; // Move to the stored next sibling.
       }
 
       visit(node);
       visits++;
 
       Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
