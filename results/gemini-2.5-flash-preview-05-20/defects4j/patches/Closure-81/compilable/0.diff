diff --git a/tmp/a47dd5b6-1cc8-4c07-bd3d-5c7e1f22ba6f_buggy.java b/tmp/bb85a5b9-a8f6-4289-adcd-06f22be2144e_fixed.java
index 6e05e4b..d592878 100644
--- a/tmp/a47dd5b6-1cc8-4c07-bd3d-5c7e1f22ba6f_buggy.java
+++ b/tmp/bb85a5b9-a8f6-4289-adcd-06f22be2144e_fixed.java
@@ -1,51 +1,51 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+      Node newName; // This will hold the name node (either Token.NAME or Token.EMPTY)
+
       if (name == null) {
-        name = new Name();
-        name.setIdentifier("");
-        isUnnamedFunction = true;
-      }
-      Node node = newNode(Token.FUNCTION);
-      Node newName = transform(name);
-      if (isUnnamedFunction) {
+        // For unnamed function expressions, the name slot in the AST should be
+        // an EMPTY node, not a NAME node with an empty string.
+        newName = newNode(Token.EMPTY);
         // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+        // declaration. The original code used the function node's line number
+        // and derived charno from the left paren's position. We preserve this.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
+      } else {
+        // For named functions, transform the actual Name object from Rhino.
+        newName = transform(name);
       }
 
+      Node node = newNode(Token.FUNCTION);
       node.addChildToBack(newName);
+
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
