diff --git a/tmp/812c71c9-2c0a-460f-b749-f90927a23469_buggy.java b/tmp/2dcaf51d-ce89-4705-97c1-6a7618ff2210_fixed.java
index 6e05e4b..17fb2ff 100644
--- a/tmp/812c71c9-2c0a-460f-b749-f90927a23469_buggy.java
+++ b/tmp/2dcaf51d-ce89-4705-97c1-6a7618ff2210_fixed.java
@@ -1,51 +1,74 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
+      // Determine if the function is unnamed.
+      boolean isUnnamedFunction = (name == null);
+
+      // Rule: An unnamed function declaration (statement) is a syntax error.
+      // An unnamed function expression is valid, e.g., `(function() {});`
+      if (isUnnamedFunction && !functionNode.isFunctionExpression()) {
+        // This is an unnamed function that is not an expression, e.g., "function() {};"
+        // Report a parse error for "unnamed function statement".
+        reportError(
+            "unnamed function statement",
+            functionNode.getLineno(),
+            functionNode.getAbsolutePosition(),
+            functionNode.getLength());
+        // Continue to build the AST as best as possible, even if an error was reported.
+        // This allows the parser to potentially find more errors and prevents NullPointerExceptions
+        // in subsequent processing if the parser is designed for error recovery.
+      }
+
+      // If the function is unnamed, create a placeholder Name node with an empty identifier.
+      // This allows the AST to be built consistently even for unnamed functions.
+      if (isUnnamedFunction) {
         name = new Name();
-        name.setIdentifier("");
-        isUnnamedFunction = true;
+        name.setIdentifier(""); // Represents an empty name for an unnamed function.
       }
+
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
+
+      // If the function is unnamed, set its line and character numbers based on the
+      // function node's declaration, specifically the position of the opening parenthesis.
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
+
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on. We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.) If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
       return node;
     }
\ No newline at end of file
