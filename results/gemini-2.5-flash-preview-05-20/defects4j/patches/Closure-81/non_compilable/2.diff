diff --git a/tmp/577f2415-092c-4f68-a94a-b2998303fd94_buggy.java b/tmp/39a7aad1-46e2-4962-bf02-1264d9bdc4cb_fixed.java
index 6e05e4b..f26ed43 100644
--- a/tmp/577f2415-092c-4f68-a94a-b2998303fd94_buggy.java
+++ b/tmp/39a7aad1-46e2-4962-bf02-1264d9bdc4cb_fixed.java
@@ -1,51 +1,69 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
+
+      // Rule: Unnamed function statements are illegal.
+      // A function is considered a statement if it's not a function expression.
+      if (name == null && !functionNode.isFunctionExpression()) {
+        // Report an error for unnamed function statements.
+        // The compilation process will ultimately fail due to this error,
+        // but we continue to build a node structure to avoid potential
+        // NullPointerExceptions in subsequent processing stages if the
+        // error reporting mechanism allows continuation.
+        reportError("unnamed function statement", functionNode);
+      }
+
+      // If the function has no name (either a legal unnamed expression or an illegal unnamed statement),
+      // create a dummy name node with an empty identifier.
       if (name == null) {
         name = new Name();
-        name.setIdentifier("");
-        isUnnamedFunction = true;
+        name.setIdentifier(""); // Represents the empty name of an unnamed function
+        isUnnamedFunction = true; // Mark as an unnamed function
       }
+
       Node node = newNode(Token.FUNCTION);
-      Node newName = transform(name);
+      Node newName = transform(name); // Transforms the actual name or the dummy empty name.
+
+      // If it's an unnamed function (expression or statement), apply line/char details to its name node.
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
+      Name fnName = functionNode.getFunctionName(); // This gets the original Rhino AST name.
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
+        // This path is taken for all unnamed functions (expressions and statements).
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
\ No newline at end of file
