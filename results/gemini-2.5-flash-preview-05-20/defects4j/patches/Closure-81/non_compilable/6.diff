diff --git a/tmp/3da908e6-1c7f-4e59-a119-5b89980b5145_buggy.java b/tmp/248c9adc-245d-4431-9214-6f3da5a1bb04_fixed.java
index 6e05e4b..9fc7269 100644
--- a/tmp/3da908e6-1c7f-4e59-a119-5b89980b5145_buggy.java
+++ b/tmp/248c9adc-245d-4431-9214-6f3da5a1bb04_fixed.java
@@ -1,51 +1,68 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
+        // According to ECMA-262 (JavaScript specification), function declarations
+        // (statements) must have a name. Function expressions can be anonymous.
+        // The Rhino FunctionNode differentiates between function statements and expressions.
+        if (functionNode.isFunctionStatement()) {
+          // This is an unnamed function declaration, which is a syntax error.
+          // Report the error as expected by the ParserTest.
+          errorReporter.error(
+              "unnamed function statement", // This exact message is expected by the test.
+              this.sourceName, // `sourceName` is a field in IRFactory.
+              functionNode.getLineno(),
+              functionNode.getAbsolutePosition(),
+              functionNode.getLength());
+          // After reporting the error, we still create a dummy name node
+          // to allow the transformation to proceed and build a syntactically
+          // valid (though semantically erroneous) AST node for the function.
+          // This prevents subsequent transformation errors.
+        }
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
\ No newline at end of file
