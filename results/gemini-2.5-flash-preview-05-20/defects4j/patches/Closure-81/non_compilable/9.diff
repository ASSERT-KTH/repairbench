diff --git a/tmp/b804e8cd-7b8a-490f-b1db-cf6c1ebb974c_buggy.java b/tmp/8086bffa-29be-42df-8bb4-f3b5d22ade92_fixed.java
index 6e05e4b..eef2ab3 100644
--- a/tmp/b804e8cd-7b8a-490f-b1db-cf6c1ebb974c_buggy.java
+++ b/tmp/8086bffa-29be-42df-8bb4-f3b5d22ade92_fixed.java
@@ -1,51 +1,78 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
+      // Keep track of whether the original function was unnamed (i.e., name == null)
+      boolean originalFunctionWasUnnamed = (name == null);
+
+      if (originalFunctionWasUnnamed) {
+        // If it's an unnamed function and NOT a function expression, it's an error.
+        // Function statements/declarations must have a name in JavaScript.
+        // Unnamed function expressions are allowed (e.g., (function() {})).
+        if (!functionNode.isFunctionExpression()) {
+          // This is an unnamed function statement, which is an error.
+          // Report the error with the expected message.
+          reportError("unnamed function statement", functionNode);
+          // Despite the error, we proceed to create a dummy name node to allow
+          // the AST generation to continue. This is common in error-recovering
+          // parsers to collect all errors rather than stopping on the first one.
           name = new Name();
-        name.setIdentifier("");
-        isUnnamedFunction = true;
+          name.setIdentifier(""); // Empty identifier for the synthetic name
+        } else {
+          // It's an unnamed function expression, which is allowed.
+          // Create a dummy name node for the IR since there was no name in the source.
+          name = new Name();
+          name.setIdentifier(""); // Empty identifier for unnamed function expressions
+        }
       }
+
       Node node = newNode(Token.FUNCTION);
+      // Transform the (possibly synthetic) name node.
       Node newName = transform(name);
-      if (isUnnamedFunction) {
+
+      // Apply line/column info to the synthetic name node for unnamed functions.
+      // This logic is relevant if the function was originally unnamed, regardless
+      // of whether it was an expression or a problematic statement.
+      if (originalFunctionWasUnnamed) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
+      // Note: fnName here refers to the *original* Rhino function name, before
+      // any synthetic name was created for the IR.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
+        // If the original function was unnamed (either an expression or a problematic
+        // statement), use the function node's line number for the left paren.
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
\ No newline at end of file
