diff --git a/tmp/53b20263-8d5b-4406-a482-365a9d1f5601_buggy.java b/tmp/369bc638-dae3-4a4e-b1c6-665d37dd9875_fixed.java
index 6e05e4b..9e07921 100644
--- a/tmp/53b20263-8d5b-4406-a482-365a9d1f5601_buggy.java
+++ b/tmp/369bc638-dae3-4a4e-b1c6-665d37dd9875_fixed.java
@@ -1,51 +1,67 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+      boolean isUnnamedFunctionExpression = false; // Renamed for clarity and accuracy
       if (name == null) {
+        // This is an unnamed function.
+        // Unnamed function statements are an error in JavaScript.
+        // Unnamed function expressions (e.g., (function() {})) are valid.
+        if (functionNode.isFunctionStatement()) {
+          // If it's an unnamed function statement, report an error.
+          reportError("unnamed function statement", functionNode);
+          // Even after reporting an error, we continue to build the AST
+          // for potential recovery or to allow other errors to be found.
+          // So, we proceed by creating a dummy name node as the original code did.
           name = new Name();
           name.setIdentifier("");
-        isUnnamedFunction = true;
+        } else {
+          // It's an unnamed function expression. This is valid.
+          name = new Name();
+          name.setIdentifier("");
+          isUnnamedFunctionExpression = true;
+        }
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
-      if (isUnnamedFunction) {
+      if (isUnnamedFunctionExpression) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
+        // If the function was originally unnamed (whether statement or expression),
+        // use the line number of the function node itself for the left parenthesis.
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
\ No newline at end of file
