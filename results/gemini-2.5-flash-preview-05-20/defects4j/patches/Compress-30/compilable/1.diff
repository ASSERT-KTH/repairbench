diff --git a/tmp/692c518d-13e6-4540-84fa-21cfb70990b0_buggy.java b/tmp/09a52abf-6730-48c2-905d-94d76039fa42_fixed.java
index cae5e03..5a22583 100644
--- a/tmp/692c518d-13e6-4540-84fa-21cfb70990b0_buggy.java
+++ b/tmp/09a52abf-6730-48c2-905d-94d76039fa42_fixed.java
@@ -1,33 +1,43 @@
     /*
      * (non-Javadoc)
      * 
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
+        // As per InputStream contract, if len is 0, no bytes are read, and 0 should be returned.
+        // The original code would incorrectly return -1 in this case.
+        if (len == 0) {
+            return 0;
+        }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
 
         final int hi = offs + len;
         int destOffs = offs;
         int b;
         while (destOffs < hi && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
             count(1);
         }
 
+        // When this point is reached, 'len' is guaranteed to be > 0 due to the earlier check.
+        // If destOffs == offs, it means no bytes were successfully read despite 'len' > 0 being requested.
+        // This implies the end of the stream has been reached or an error occurred during read0().
+        // In such a case, -1 is the correct return value according to InputStream contract.
+        // Otherwise, destOffs - offs is the number of bytes successfully read.
         int c = (destOffs == offs) ? -1 : (destOffs - offs);
         return c;
     }
\ No newline at end of file
