diff --git a/tmp/9c1ada37-85e4-451e-a22b-f6f70e1d48c4_buggy.java b/tmp/b62f06b0-3e73-4918-911a-68a41d2a4590_fixed.java
index cae5e03..b6c861a 100644
--- a/tmp/9c1ada37-85e4-451e-a22b-f6f70e1d48c4_buggy.java
+++ b/tmp/b62f06b0-3e73-4918-911a-68a41d2a4590_fixed.java
@@ -1,33 +1,42 @@
     /*
      * (non-Javadoc)
      * 
      * @see java.io.InputStream#read(byte[], int, int)
      */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
+        // As per InputStream's contract for read(byte[] b, int off, int len),
+        // if len is zero, then no bytes are read and 0 is returned.
+        // This must occur after bounds checks, but before attempting to read.
+        if (len == 0) {
+            return 0;
+        }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
 
         final int hi = offs + len;
         int destOffs = offs;
         int b;
         while (destOffs < hi && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
             count(1);
         }
 
+        // If no bytes were read because end of stream was reached immediately,
+        // and 'destOffs' is still equal to 'offs', return -1.
+        // Otherwise, return the number of bytes read.
         int c = (destOffs == offs) ? -1 : (destOffs - offs);
         return c;
     }
\ No newline at end of file
