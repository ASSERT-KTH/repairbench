diff --git a/tmp/cade49f5-f333-4348-872f-1cf9ce712f5d_buggy.java b/tmp/f481fb97-1627-4fdd-ac15-54397c17e61b_fixed.java
index 544303b..a037379 100644
--- a/tmp/cade49f5-f333-4348-872f-1cf9ce712f5d_buggy.java
+++ b/tmp/f481fb97-1627-4fdd-ac15-54397c17e61b_fixed.java
@@ -1,29 +1,41 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        
+        // Determine 'mostNegative' value, relevant for problems where variables are not restricted to be non-negative.
+        // This value is usually derived from an artificial variable's value if it's basic, effectively shifting the origin.
+        Integer basicRowForArtificialVar = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+        double mostNegative = 0;
+        if (!restrictToNonNegative) {
+            mostNegative = basicRowForArtificialVar == null ? 0 : getEntry(basicRowForArtificialVar, getRhsOffset());
+        }
+
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+            // Find the basic row for the i-th original decision variable.
+            // The column index for x_i is getNumObjectiveFunctions() + i.
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            
             if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+                // If the variable is basic, its value is the RHS entry of its basic row.
+                // This value is then adjusted by 'mostNegative' if variables are not restricted to be non-negative.
+                coefficients[i] = getEntry(basicRow, getRhsOffset()) - mostNegative;
+            } else {
+                // If the variable is non-basic (i.e., its column is not a unit vector for a basic variable),
+                // its value is 0.
                 coefficients[i] = 0;
             }
-                }
-            }
+            // The original code contained a nested loop here that would potentially
+            // set coefficients[i] to 0 if a '1' was found in a previous variable's
+            // column within the current basic row. This logic was incorrect for
+            // standard simplex tableau solution extraction and caused the failure
+            // in testMath272 by zeroing out correctly determined basic variable values.
+            // That problematic loop has been removed.
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
