diff --git a/tmp/fd27a4fe-35fd-4f28-b7c9-42862971cd97_buggy.java b/tmp/dc568f84-697b-4712-9d37-e9c84ac80652_fixed.java
index 544303b..26e8e2f 100644
--- a/tmp/fd27a4fe-35fd-4f28-b7c9-42862971cd97_buggy.java
+++ b/tmp/dc568f84-697b-4712-9d37-e9c84ac80652_fixed.java
@@ -1,29 +1,32 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
-        for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+        int numDecisionVariables = getOriginalNumDecisionVariables();
+        double[] coefficients = new double[numDecisionVariables];
+
+        for (int i = 0; i < numDecisionVariables; i++) {
+            // Get the tableau column index for the i-th decision variable
+            int colIndex = getNumObjectiveFunctions() + i;
+
+            // Find the row where this variable is basic (if it is basic)
+            Integer basicRow = getBasicRow(colIndex);
+
+            if (basicRow == null) {
+                // If getBasicRow returns null, this variable is non-basic.
+                // Non-basic variables have a value of 0.
                 coefficients[i] = 0;
+            } else {
+                // If getBasicRow returns a row, this variable is basic.
+                // Its value is the corresponding entry in the RHS column.
+                coefficients[i] = getEntry(basicRow, getRhsOffset());
             }
         }
-            }
-        }
+        // The objective function value is calculated using the original objective function
+        // and the extracted coefficients, which is generally robust.
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
