diff --git a/tmp/70c0c3ce-1a43-4c47-bd9c-376592d484cf_buggy.java b/tmp/5240307a-19a1-4a72-af0c-78d83167acaa_fixed.java
index 544303b..0dea716 100644
--- a/tmp/70c0c3ce-1a43-4c47-bd9c-376592d484cf_buggy.java
+++ b/tmp/5240307a-19a1-4a72-af0c-78d83167acaa_fixed.java
@@ -1,29 +1,36 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+        // Initialize an array to hold the values of the original decision variables.
+        // The size is determined by the number of original decision variables.
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+
+        // Iterate through each original decision variable (x_0, x_1, ...)
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            // Calculate the column index for the current decision variable (x_i) in the tableau.
+            // In a simplex tableau, original variables are typically placed after the objective function coefficients
+            // and possibly before slack/artificial variables.
+            // The column index for the i-th original decision variable is numObjectiveFunctions + i.
+            int col = getNumObjectiveFunctions() + i;
+
+            // Determine if the current variable (x_i) is a basic variable in the tableau.
+            // A basic variable has a unique '1' in its column in some row, and '0's elsewhere in that column.
+            // getBasicRow(col) returns the row index where this variable is basic, or null if it's non-basic.
+            Integer basicRow = getBasicRow(col);
+
+            if (basicRow == null) {
+                // If the variable is non-basic (getBasicRow returned null), its value in the solution is 0.
                 coefficients[i] = 0;
+            } else {
+                // If the variable is basic, its value is found in the Right Hand Side (RHS) column of the basic row.
+                coefficients[i] = getEntry(basicRow, getRhsOffset());
             }
         }
-            }
-        }
+        // Construct and return the solution pair: (point values, objective function value at that point).
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
