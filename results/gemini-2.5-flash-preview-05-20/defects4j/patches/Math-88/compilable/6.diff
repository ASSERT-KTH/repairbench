diff --git a/tmp/83c33221-2e7c-48cb-b731-b0ddad5d67c3_buggy.java b/tmp/4e1139c9-f95b-42ea-9d9b-294b7c5c5020_fixed.java
index 544303b..b93a69d 100644
--- a/tmp/83c33221-2e7c-48cb-b731-b0ddad5d67c3_buggy.java
+++ b/tmp/4e1139c9-f95b-42ea-9d9b-294b7c5c5020_fixed.java
@@ -1,29 +1,27 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
+            // If the variable is basic, its value is on the RHS. Otherwise, it's 0.
+            // The 'mostNegative' part handles unrestricted variables.
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
+            // The original code contained a problematic inner loop here that incorrectly
+            // set coefficients[i] to 0 under certain conditions. This logic has been removed.
+            // The getBasicRow method ensures a column is basic only if it has exactly one '1'
+            // and all other entries are '0', making the previous inner loop unnecessary
+            // and erroneous for determining a basic variable's value.
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
