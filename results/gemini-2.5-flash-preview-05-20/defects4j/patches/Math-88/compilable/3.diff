diff --git a/tmp/8977c7a9-011d-4a1b-96a4-4bf5b076d454_buggy.java b/tmp/79336aad-6568-4064-8b20-a12e63b7923f_fixed.java
index 544303b..fdbc31d 100644
--- a/tmp/8977c7a9-011d-4a1b-96a4-4bf5b076d454_buggy.java
+++ b/tmp/79336aad-6568-4064-8b20-a12e63b7923f_fixed.java
@@ -1,29 +1,49 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        // The 'mostNegative' variable is used when variables are not restricted to be non-negative.
+        // It helps to adjust the solution values if the problem was transformed to handle unconstrained variables.
+        // For problems with 'restrictToNonNegative = true' (like testMath272), 'mostNegative' will effectively be 0
+        // in the calculation of coefficients[i].
+        Integer basicRowForObjective = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+        double mostNegative = basicRowForObjective == null ? 0 : getEntry(basicRowForObjective, getRhsOffset());
+
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
+            // Find the basic row for the current decision variable 'i'.
+            // The variable's column in the tableau is at getNumObjectiveFunctions() + i.
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+
+            // If 'basicRow' is null, it means the variable 'i' is non-basic and its value is 0.
+            // If 'basicRow' is not null, it means the variable 'i' is a basic variable,
+            // and its value is read from the RHS (Right Hand Side) of its basic row.
+            // The 'mostNegative' part is subtracted only if 'restrictToNonNegative' is false.
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
+
+            // The following commented-out block of code seems to be the cause of the bug.
+            // It attempts to prioritize earlier variables (j) over later variables (i) if
+            // both appear to be '1' in the same basic row. However, in a standard simplex tableau,
+            // each basic row should uniquely correspond to one basic variable (which has a '1' in its column
+            // and '0's elsewhere in that row). If 'getBasicRow' correctly identifies the unique basic row
+            // for variable 'i', then 'tableau.getEntry(basicRow, j)' for j != current variable should be 0
+            // for other basic variables. This logic was incorrectly setting coefficients to 0.
+            // For example, in testMath272, it caused coefficients[1] to be 0 instead of 1.0.
+            /*
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                          coefficients[i] = 0;
                     }
                 }
             }
+            */
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
