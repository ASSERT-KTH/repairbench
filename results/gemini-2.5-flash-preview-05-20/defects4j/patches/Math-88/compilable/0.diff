diff --git a/tmp/f8ad3992-7b90-4a77-a8e3-0fb0c9d05321_buggy.java b/tmp/bcbcaade-fba2-4841-8393-2a8004a9d1f5_fixed.java
index 544303b..d3174a3 100644
--- a/tmp/f8ad3992-7b90-4a77-a8e3-0fb0c9d05321_buggy.java
+++ b/tmp/bcbcaade-fba2-4841-8393-2a8004a9d1f5_fixed.java
@@ -1,29 +1,48 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
+        
+        // This variable 'mostNegative' is used for handling unrestricted variables (where x = x' - x'').
+        // If 'restrictToNonNegative' is true (as in testMath272), this part effectively evaluates to 0.
+        // Its calculation looks at the value of an auxiliary variable, typically the x'' variable
+        // associated with the first original decision variable if it were unrestricted.
+        Integer basicRowForMostNegative =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        double mostNegative = basicRowForMostNegative == null ? 0 : getEntry(basicRowForMostNegative, getRhsOffset());
+
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
+            // Determine if the i-th decision variable is a basic variable.
+            // getBasicRow(column_index) returns the row where the variable at column_index
+            // is basic (i.e., has a coefficient of 1.0 and all other coefficients in that column are 0.0).
+            // If it's non-basic, basicRow will be null.
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+
+            // Calculate the value of the i-th decision variable.
+            // If basicRow is null (variable is non-basic), its value is 0.
+            // If basicRow is not null (variable is basic), its value is the RHS of that row.
+            // The 'mostNegative' part is specific to handling unrestricted variables.
+            // For problems where variables are restricted to be non-negative, this term becomes 0.
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
+
+            // The original code contained a block here that attempted to handle
+            // degenerate solutions or multiple optimal solutions by zeroing out coefficients
+            // if an earlier-indexed variable appeared to be basic in the same row.
+            // However, this logic was flawed. In a correctly formed simplex tableau,
+            // if `basicRow` is identified as the basic row for variable `i` (meaning variable `i`
+            // is basic in `basicRow`), then no other variable `j` (especially `j < i`) should have
+            // `tableau.getEntry(basicRow, j) == 1`. Such a condition would imply a contradiction
+            // in the tableau structure (a row being basic for multiple variables), or an incorrect
+            // interpretation of the tableau. Removing this incorrect heuristic ensures that
+            // the solution is derived directly from the basic/non-basic status of variables,
+            // as is standard in the simplex method.
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
