diff --git a/tmp/1470ce9c-5cec-433f-b5fa-8b09c6319bcb_buggy.java b/tmp/2944a60b-f6ea-4ed4-a3db-8caed825309b_fixed.java
index 544303b..90b025c 100644
--- a/tmp/1470ce9c-5cec-433f-b5fa-8b09c6319bcb_buggy.java
+++ b/tmp/2944a60b-f6ea-4ed4-a3db-8caed825309b_fixed.java
@@ -1,29 +1,54 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
+        // The 'mostNegative' logic is specifically for handling variables that are not restricted to be non-negative.
+        // For such variables (x = x_plus - x_minus), if x_plus is basic, its value is typically `rhs`.
+        // If x_minus is basic, its value is `rhs` (since x_minus >= 0). Then x = -rhs.
+        // This 'mostNegative' seems to be a common adjustment value for all variables when `restrictToNonNegative` is false.
+        // For `testMath272`, `restrictToNonNegative` is true, so `mostNegative` will evaluate to 0.
+        // Thus, the calculation `coefficients[i] = ... - (restrictToNonNegative ? 0 : mostNegative)`
+        // simplifies to `coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))` for the failing test.
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+
         for (int i = 0; i < coefficients.length; i++) {
+            // Get the basic row for the current decision variable 'i'.
+            // The `getBasicRow(column)` method returns the row index where the entry in `column` is 1,
+            // provided all other entries in that column are 0. If not, it returns null.
+            // This means if `basicRow` is not null, the current variable `i` is a basic variable.
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
+
+            // Calculate the coefficient value.
+            // If `basicRow` is null, the variable is non-basic and its value is 0.
+            // If `basicRow` is not null, the variable is basic and its value is the RHS of `basicRow`,
+            // adjusted by `mostNegative` if variables are not restricted to be non-negative.
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
+
+            // The original code contained a problematic nested loop here:
+            // if (basicRow != null) {
+            //     for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
+            //         if (tableau.getEntry(basicRow, j) == 1) {
+            //              coefficients[i] = 0;
+            //         }
+            //     }
+            // }
+            // This loop incorrectly attempts to set a basic variable's coefficient to 0.
+            // If `basicRow` is not null, it means the column corresponding to `coefficients[i]` is a unit vector.
+            // In a valid simplex tableau, a basic variable's value is uniquely determined by the RHS of its basic row.
+            // The condition `tableau.getEntry(basicRow, j) == 1` for `j < getNumObjectiveFunctions() + i` would imply
+            // that the current `basicRow` for `x_i` also contains a 1 for an *earlier* variable `x_j`.
+            // This should not cause `x_i` to be 0 if `x_i`'s column is truly basic.
+            // This logic was causing `coefficients[2]` to be 0 instead of 1 in `testMath272`.
+            // Removing this erroneous logic fixes the issue.
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
