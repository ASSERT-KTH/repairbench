diff --git a/tmp/0221a4ce-c28c-4d04-9458-d869c2b15c99_buggy.java b/tmp/7fb72af0-f295-4b31-842f-c4971e73d62d_fixed.java
index 032fa8e..fe57ff8 100644
--- a/tmp/0221a4ce-c28c-4d04-9458-d869c2b15c99_buggy.java
+++ b/tmp/7fb72af0-f295-4b31-842f-c4971e73d62d_fixed.java
@@ -1,108 +1,122 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
+
+            // FIX 1: If current time t0 is the previous event time and g0 is effectively zero,
+            // shift ta and ga slightly to step over the already handled event.
+            // This prevents the BrentSolver from being called with an endpoint that is exactly zero,
+            // which would violate its strict bracketing requirement (f(a)*f(b) < 0).
+            if (!Double.isNaN(previousEventTime) && Math.abs(g0) <= convergence &&
+                Math.abs(t0 - previousEventTime) <= convergence) {
+                
+                // Shift ta to be just past the event to look for the *next* event.
+                // This ensures ga is non-zero and has a proper sign for bracketing.
+                ta += (forward ? convergence : -convergence);
+                interpolator.setInterpolatedTime(ta);
+                ga = handler.g(ta, interpolator.getInterpolatedState());
+                // g0Positive instance field is based on g0 (at t0), so it's not updated here.
+                // The crucial fix below (using ga for the sign check) makes g0Positive less critical here.
+            }
+            
+            // The initial tb calculation in the original code starts with an offset, then increments by h.
+            // This creates substeps that are not uniform 'h' from 'ta' but from 't0' plus offset.
+            // Keeping it as is, to preserve the original logic's intent for tb increment.
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+
+
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                // FIX 2: Check for sign change using ga (value at start of current substep) and gb (value at end of current substep).
+                // Original: if (g0Positive ^ (gb >= 0)) // Incorrectly used g0Positive (sign at overall step start t0)
+                if ((ga >= 0) ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
                             // rejected, this step must now be accepted since it
                             // properly ends exactly at the event occurrence
                             return false;
                         }
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
                         return true;
                     }
 
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
             throw new EventException(e);
         }
 
     }
