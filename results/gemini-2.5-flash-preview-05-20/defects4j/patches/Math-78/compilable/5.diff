diff --git a/tmp/e41d3df5-4dca-4d88-9cf6-d15b58afa6da_buggy.java b/tmp/62c940e4-0d36-4dcd-8776-a864b251ec3f_fixed.java
index 032fa8e..a4dc99b 100644
--- a/tmp/e41d3df5-4dca-4d88-9cf6-d15b58afa6da_buggy.java
+++ b/tmp/62c940e4-0d36-4dcd-8776-a864b251ec3f_fixed.java
@@ -1,108 +1,137 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+            // The original line initializing 'tb' here was buggy and has been removed.
+            // double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
-                tb += h;
+                // Evaluate handler value at the end of the substep.
+                // The 'tb' calculation was buggy in the original code, now it's correctly derived.
+                final double tb = t0 + (i + 1) * h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
+                // Check events occurrence
                 if (g0Positive ^ (gb >= 0)) {
-                    // there is a sign change: an event is expected during this step
-
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
-                    // variation direction, with respect to the integration direction
+                    // There is a sign change: an event is expected during this step
+
+                    // Handle numerical precision issues when endpoints are near roots.
+                    // Ensure the interval [ta, tb] (or [tb, ta]) is strictly bracketed for the solver.
+                    double solverTa = ta;
+                    double solverTb = tb;
+
+                    // Re-evaluate g(ta) and g(tb) to get the most accurate values for bracketing check.
+                    // This is crucial as initial 'ga' could be 0, and floating point errors might affect 'g(ta)'
+                    // evaluations during the solver's internal calls.
+                    interpolator.setInterpolatedTime(solverTa);
+                    double gAtSolverTa = handler.g(solverTa, interpolator.getInterpolatedState());
+                    interpolator.setInterpolatedTime(solverTb);
+                    double gAtSolverTb = handler.g(solverTb, interpolator.getInterpolatedState());
+
+                    if (gAtSolverTa * gAtSolverTb >= 0) {
+                        // The interval is not properly bracketed (e.g., one endpoint is zero or they have the same sign).
+                        // Since g0Positive ^ (gb >= 0) is true, we expect a root.
+                        // Perturb 'solverTa' to ensure bracketing.
+                        if (Math.abs(gAtSolverTa) < convergence) {
+                            // 'ta' is effectively a root. Perturb 'solverTa' to ensure bracketing.
+                            // The perturbation direction is chosen to ensure 'g(solverTa)' has the opposite sign to 'g(solverTb)'.
+                            // If moving forward and g(solverTb) is non-negative, or if moving backward and g(solverTb) is negative,
+                            // we need to move 'solverTa' against the integration direction. Otherwise, move in integration direction.
+                            solverTa += (interpolator.isForward() == (gAtSolverTb >= 0)) ? -convergence : convergence;
+                        } else {
+                            // Both 'gAtSolverTa' and 'gAtSolverTb' are non-zero but have the same sign.
+                            // This scenario implies a complex situation (e.g., multiple roots in a short interval)
+                            // or that the initial sign check was misleading due to precision.
+                            // In this case, perturb 'solverTa' backward (against integration direction)
+                            // to attempt to find an earlier root or clarify bracketing.
+                            solverTa += (interpolator.isForward() ? -convergence : convergence);
+                        }
+                    }
+                         
+                    // Determine variation direction for the event handler, based on current step values.
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                    // Use the potentially perturbed solverTa and solverTb for the solver call.
+                    final double root = (solverTa <= solverTb) ? solver.solve(f, solverTa, solverTb) : solver.solve(f, solverTb, solverTa);
+                    
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
+                        // We have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
                             // rejected, this step must now be accepted since it
                             // properly ends exactly at the event occurrence
                             return false;
                         }
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
                         return true;
                     }
 
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
             throw new EventException(e);
         }
 
     }
\ No newline at end of file
