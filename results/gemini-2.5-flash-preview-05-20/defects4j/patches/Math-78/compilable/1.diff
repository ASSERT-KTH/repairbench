diff --git a/tmp/fddb2647-75ad-4e80-84fa-4249290ac2f7_buggy.java b/tmp/0231ded5-2f3e-4124-bf00-cfb91f2741cf_fixed.java
index 032fa8e..86c0002 100644
--- a/tmp/fddb2647-75ad-4e80-84fa-4249290ac2f7_buggy.java
+++ b/tmp/0231ded5-2f3e-4124-bf00-cfb91f2741cf_fixed.java
@@ -1,108 +1,153 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
+            // The original initialization of tb was a bit unusual, starting with an offset.
+            // We maintain it to preserve existing behavior that passes other tests.
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                // check events occurrence: a sign change between current sub-interval start (ga) and end (gb)
+                if ((ga >= 0) ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
+                    // Set up the interval for the solver
+                    double tLo = ta; // Lower bound for search
+                    double gLo = ga; // g-value at lower bound
+                    double tHi = tb; // Upper bound for search
+                    double gHi = gb; // g-value at upper bound
+
+                    // Ensure gLo and gHi have strictly opposite signs for the BrentSolver.
+                    // If one endpoint value is zero, slightly perturb it.
+                    // This is crucial as BrentSolver requires f(a)*f(b) < 0.
+                    if (gLo == 0.0) {
+                        tLo = forward ? (ta + convergence) : (ta - convergence);
+                        // Ensure tLo does not jump past tHi (e.g., if interval is very small)
+                        if (forward) {
+                            if (tLo > tHi) {
+                                tLo = tHi;
+                            }
+                        } else {
+                            if (tLo < tHi) {
+                                tLo = tHi;
+                            }
+                        }
+                        interpolator.setInterpolatedTime(tLo);
+                        gLo = handler.g(tLo, interpolator.getInterpolatedState());
+                    }
+                    if (gHi == 0.0) {
+                        tHi = forward ? (tb - convergence) : (tb + convergence);
+                        // Ensure tHi does not jump past tLo
+                        if (forward) {
+                            if (tHi < tLo) {
+                                tHi = tLo;
+                            }
+                        } else {
+                            if (tHi > tLo) {
+                                tHi = tLo;
+                            }
+                        }
+                        interpolator.setInterpolatedTime(tHi);
+                        gHi = handler.g(tHi, interpolator.getInterpolatedState());
+                    }
+
+                    // If after adjustments, signs are still not different (e.g., both became zero or same sign),
+                    // then no valid bracket for the solver. This implies no detectable event in this sub-interval.
+                    // We consider no event found and proceed to the next sub-interval.
+                    if (gLo * gHi >= 0) {
+                        ta = tb;
+                        ga = gb;
+                        continue; // No event detected for this sub-interval after all
+                    }
 
                     // variation direction, with respect to the integration direction
+                    // This uses the original ga and gb, reflecting the overall trend in the sub-interval.
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                    // Call solver with adjusted bounds (tLo, tHi) to ensure f(low)*f(high) < 0
+                    final double root = (tLo <= tHi) ? solver.solve(f, tLo, tHi) : solver.solve(f, tHi, tLo);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
                             // rejected, this step must now be accepted since it
                             // properly ends exactly at the event occurrence
                             return false;
                         }
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
                         return true;
                     }
 
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
             throw new EventException(e);
         }
 
     }
\ No newline at end of file
