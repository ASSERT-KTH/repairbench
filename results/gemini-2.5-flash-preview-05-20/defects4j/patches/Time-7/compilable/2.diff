diff --git a/tmp/42fe07aa-5f82-47b5-8c46-f1189a9afd1a_buggy.java b/tmp/fa130ec4-9f94-4a13-b76c-a443c2f8d597_fixed.java
index 0bbaab0..4501c26 100644
--- a/tmp/42fe07aa-5f82-47b5-8c46-f1189a9afd1a_buggy.java
+++ b/tmp/fa130ec4-9f94-4a13-b76c-a443c2f8d597_fixed.java
@@ -1,62 +1,88 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant based on the chronology
      * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
+        
+        // Get the year from the input instant, as per Javadoc: "parses using the year from the supplied instant"
+        int defaultYear = chrono.year().get(instantMillis);
+        
+        // Calculate the instantLocal for the original instant to extract its time components.
+        long originalInstantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
+        
+        // Construct a new 'instantLocal' for the DateTimeParserBucket.
+        // This new instantLocal uses the defaultYear (from the input instant)
+        // and the time components (hour, minute, second, millis) from the original instant.
+        // The month and day are set to 1 (January 1st) to provide a neutral base for
+        // parsing month and day from the text, ensuring the Chronology's validation
+        // correctly considers the defaultYear's leap year status.
+        long bucketInstantLocal = chrono.getDateTimeMillis(
+            defaultYear, // Year from the input instant
+            1, // Month set to January
+            1, // Day set to 1st
+            chrono.hourOfDay().get(originalInstantLocal),
+            chrono.minuteOfHour().get(originalInstantLocal),
+            chrono.secondOfMinute().get(originalInstantLocal),
+            chrono.millisOfSecond().get(originalInstantLocal)
+        );
+        
+        chrono = selectChronology(chrono); // Apply formatter's chronology/zone settings
         
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+            bucketInstantLocal, chrono, iLocale, iPivotYear, defaultYear);
+        
         int newPos = parser.parseInto(bucket, text, position);
+        
+        // computeMillis will now correctly apply the defaultYear's leap status
+        // when validating month/day fields.
         instant.setMillis(bucket.computeMillis(false, text));
+        
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
             chrono = chrono.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
             chrono = chrono.withZone(bucket.getZone());
         }
         instant.setChronology(chrono);
         if (iZone != null) {
             instant.setZone(iZone);
         }
         return newPos;
     }
\ No newline at end of file
