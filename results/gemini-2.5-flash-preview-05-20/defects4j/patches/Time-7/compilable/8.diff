diff --git a/tmp/809e6cb0-b1a2-4734-b781-a402254cc2de_buggy.java b/tmp/9bf26965-0541-41aa-924c-0f498784bbad_fixed.java
index 0bbaab0..d8f4767 100644
--- a/tmp/809e6cb0-b1a2-4734-b781-a402254cc2de_buggy.java
+++ b/tmp/9bf26965-0541-41aa-924c-0f498784bbad_fixed.java
@@ -1,62 +1,83 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant based on the chronology
      * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
+        // instantLocal represents the initial instant's date-time in local time.
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
         chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
         
+        // The default year, used if the year is not present in the parsed text,
+        // is derived from the supplied instant as per Javadoc.
+        // To ensure consistent and accurate leap year calculations within DateTimeParserBucket,
+        // especially when only partial date fields (like month and day) are parsed,
+        // it's often beneficial to perform internal bucket calculations using a UTC chronology
+        // to avoid subtle timezone-related issues during date field resolution.
+        // The default year is still correctly obtained based on the original instant's local time.
+        Chronology bucketChrono = chrono.withUTC();
+        int defaultYear = bucketChrono.year().get(instantLocal);
+        
+        // Instantiate the bucket with the UTC chronology.
+        // The instantLocal still provides the base for defaulting fields not parsed from the text.
+        // The defaultYear provides the year if it's not present in the text.
         DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+            instantLocal, bucketChrono, iLocale, iPivotYear, defaultYear);
+        
         int newPos = parser.parseInto(bucket, text, position);
+        // computeMillis will resolve the parsed fields and default values using bucketChrono (UTC)
         instant.setMillis(bucket.computeMillis(false, text));
+        
+        // After parsing, re-apply the correct time zone to the chronology for the result.
+        // If an offset or zone was parsed from the text, use it. Otherwise, revert to
+        // the original chronology's zone.
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
             chrono = chrono.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
             chrono = chrono.withZone(bucket.getZone());
         }
         instant.setChronology(chrono);
+        
+        // Finally, if a specific zone was set on the formatter, override with that.
         if (iZone != null) {
             instant.setZone(iZone);
         }
         return newPos;
     }
\ No newline at end of file
