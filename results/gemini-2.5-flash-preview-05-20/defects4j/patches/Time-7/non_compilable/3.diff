diff --git a/tmp/9cad143c-6649-4e3d-b1c4-9117154048f6_buggy.java b/tmp/dc5a26da-8281-498b-abd5-9ec0665c434f_fixed.java
index 0bbaab0..ef38606 100644
--- a/tmp/9cad143c-6649-4e3d-b1c4-9117154048f6_buggy.java
+++ b/tmp/dc5a26da-8281-498b-abd5-9ec0665c434f_fixed.java
@@ -1,62 +1,84 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant based on the chronology
      * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
         chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
 
-        DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+        // Extract all fields from the original instant to preserve them.
+        // This is crucial for parseInto's contract which preserves unparsed fields.
+        int defaultYearForBucket = chrono.year().get(instantMillis);
+        int defaultMonthForBucket = chrono.monthOfYear().get(instantMillis);
+        int defaultDayForBucket = chrono.dayOfMonth().get(instantMillis);
+        int defaultHourForBucket = chrono.hourOfDay().get(instantMillis);
+        int defaultMinuteForBucket = chrono.minuteOfHour().get(instantMillis);
+        int defaultSecondForBucket = chrono.secondOfMinute().get(instantMillis);
+        int defaultMillisForBucket = chrono.millisOfSecond().get(instantMillis);
+        
+        // Create the bucket using 0L for instantLocal. This forces the bucket to use
+        // the 'defaultYearForBucket' parameter for the year if not parsed from the text.
+        // This addresses the leap year bug where instantLocal was not correctly informing
+        // the chronology about the leap year status when month/day were updated.
+        DateTimeParserBucket bucket = new DateTimeParserBucket(0L, chrono, iLocale, iPivotYear, defaultYearForBucket);
+
+        // Manually set all the original fields into the bucket.
+        // Fields parsed from the text will then overwrite these defaults.
+        bucket.set(chrono.monthOfYear(), defaultMonthForBucket);
+        bucket.set(chrono.dayOfMonth(), defaultDayForBucket);
+        // Note: Year is handled by defaultYearForBucket if not parsed.
+        bucket.set(chrono.hourOfDay(), defaultHourForBucket);
+        bucket.set(chrono.minuteOfHour(), defaultMinuteForBucket);
+        bucket.set(chrono.secondOfMinute(), defaultSecondForBucket);
+        bucket.set(chrono.millisOfSecond(), defaultMillisForBucket);
+        
         int newPos = parser.parseInto(bucket, text, position);
         instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
             chrono = chrono.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
             chrono = chrono.withZone(bucket.getZone());
         }
         instant.setChronology(chrono);
         if (iZone != null) {
             instant.setZone(iZone);
         }
         return newPos;
     }
\ No newline at end of file
