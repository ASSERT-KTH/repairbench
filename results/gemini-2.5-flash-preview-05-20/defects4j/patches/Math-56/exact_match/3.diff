diff --git a/tmp/11f6c843-ae31-4d14-8ac2-83f43209214c_buggy.java b/tmp/3eeb9889-734a-4ed8-b4cd-aadd71c01b3d_fixed.java
index 2608424..f86b396 100644
--- a/tmp/11f6c843-ae31-4d14-8ac2-83f43209214c_buggy.java
+++ b/tmp/3eeb9889-734a-4ed8-b4cd-aadd71c01b3d_fixed.java
@@ -1,39 +1,40 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
         int count = 0;
         for (int i = 0; i < last; i++) {
             int idx = 0;
             final int offset = uniCounterOffset[i];
             while (count <= index) {
                 count += offset;
                 ++idx;
             }
             --idx;
             count -= offset;
             indices[i] = idx;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // The 'count' variable at this point represents the sum of the unidimensional
+        // contributions from the dimensions 0 through (last - 1).
+        // For example, if dimensions are [D0, D1, D2] and 'index' is the
+        // unidimensional equivalent of [i0, i1, i2], then after the loop,
+        // 'count' will be (i0 * D1*D2) + (i1 * D2).
+        // Therefore, the value for the last dimension (indices[last]) is simply
+        // the original 'index' minus this accumulated 'count'.
+        indices[last] = index - count;
 
         return indices;
     }
\ No newline at end of file
