diff --git a/tmp/01abbd43-c8d8-411d-a268-00ff759322a1_buggy.java b/tmp/ca588582-e81f-4661-9682-94acfbd48803_fixed.java
index 2608424..05d45a3 100644
--- a/tmp/01abbd43-c8d8-411d-a268-00ff759322a1_buggy.java
+++ b/tmp/ca588582-e81f-4661-9682-94acfbd48803_fixed.java
@@ -1,39 +1,46 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
         int count = 0;
+        // Iterate through dimensions from most significant to second least significant
         for (int i = 0; i < last; i++) {
             int idx = 0;
             final int offset = uniCounterOffset[i];
+            // This loop effectively calculates:
+            // idx = floor((index - count) / offset)
+            // and updates count to be 'count + idx * offset'
             while (count <= index) {
                 count += offset;
                 ++idx;
             }
+            // After the loop, 'count' has incremented 'offset' one too many times,
+            // and 'idx' is one too high. Adjust them back.
             --idx;
             count -= offset;
             indices[i] = idx;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // For the last dimension (least significant), uniCounterOffset[last] is always 1.
+        // The value for the last dimension is simply the remainder of the total index
+        // after accounting for all higher dimensions.
+        // The variable 'count' already holds the sum of contributions from higher dimensions.
+        // The original code used a loop (while (count < index) { count += idx; ++idx; } --idx;)
+        // which was calculating a triangular number sequence for the last digit, which is incorrect
+        // for a standard mixed-radix counter.
+        indices[last] = index - count;
 
         return indices;
     }
\ No newline at end of file
