diff --git a/tmp/61ecb61e-dfe7-4659-8813-9020db7bb524_buggy.java b/tmp/2f572615-a4c2-48d1-a128-14c15c2891da_fixed.java
index 2608424..c63c2e6 100644
--- a/tmp/61ecb61e-dfe7-4659-8813-9020db7bb524_buggy.java
+++ b/tmp/2f572615-a4c2-48d1-a128-14c15c2891da_fixed.java
@@ -1,39 +1,50 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
+        // The 'count' variable accumulates the unidimensional index represented by
+        // the indices found so far for higher dimensions.
         int count = 0; 
         for (int i = 0; i < last; i++) {
             int idx = 0;
             final int offset = uniCounterOffset[i];
+            
+            // This loop calculates the count for the current dimension (idx)
+            // such that (count + idx * offset) does not exceed the original index.
+            // 'idx' will be the largest integer such that (count + idx * offset) <= original index.
+            // The original logic with `while (count <= index)` and then `count -= offset`
+            // achieves this correctly by overshooting and then correcting.
             while (count <= index) {
                 count += offset;
                 ++idx;
             }
-            --idx;
-            count -= offset;
+            // After the loop, 'count' is (previous_count_value + (idx_candidate * offset))
+            // and 'idx' is (idx_candidate).
+            // (previous_count_value + ((idx_candidate - 1) * offset)) <= index
+            // (previous_count_value + (idx_candidate * offset)) > index
+            
+            --idx; // Decrement 'idx' to get the actual count for this dimension.
+            count -= offset; // 'count' is updated to (previous_count_value + (actual_idx * offset)).
+                             // This 'count' now represents the portion of the unidimensional index
+                             // covered by indices[0] through indices[i].
             indices[i] = idx;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // The remaining part of the unidimensional index (index - count)
+        // directly corresponds to the count for the last dimension, as its effective offset is 1.
+        indices[last] = index - count;
 
         return indices;
     }
\ No newline at end of file
