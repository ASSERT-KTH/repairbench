diff --git a/tmp/29e3a140-288d-4eb2-89f1-2955c4263407_buggy.java b/tmp/e44166e6-93db-46e6-8233-7d2e6600fc09_fixed.java
index 2608424..2e48c85 100644
--- a/tmp/29e3a140-288d-4eb2-89f1-2955c4263407_buggy.java
+++ b/tmp/e44166e6-93db-46e6-8233-7d2e6600fc09_fixed.java
@@ -1,39 +1,41 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
         int count = 0;
+        // Calculate the indices for all dimensions except the last one.
+        // The uniCounterOffset stores the stride for each dimension (product of
+        // subsequent dimension sizes).
         for (int i = 0; i < last; i++) {
             int idx = 0;
             final int offset = uniCounterOffset[i];
             while (count <= index) {
                 count += offset;
                 ++idx;
             }
+            // After the loop, count has exceeded 'index', so we decrement 'idx'
+            // and subtract the 'offset' to get the correct count and the base
+            // for the next dimension.
             --idx;
             count -= offset;
             indices[i] = idx;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // The last dimension's index is simply the remaining part of the
+        // unidimensional index, as its stride is 1.
+        indices[last] = index - count;
 
         return indices;
     }
\ No newline at end of file
