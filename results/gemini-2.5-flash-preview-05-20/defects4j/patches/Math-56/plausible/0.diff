diff --git a/tmp/e660c279-f9c2-486f-809b-67efcc5effc8_buggy.java b/tmp/a6fc4610-214e-4bc6-ad9c-b1dbbf2c56fb_fixed.java
index 2608424..bf9211e 100644
--- a/tmp/e660c279-f9c2-486f-809b-67efcc5effc8_buggy.java
+++ b/tmp/a6fc4610-214e-4bc6-ad9c-b1dbbf2c56fb_fixed.java
@@ -1,39 +1,47 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
-        int count = 0;
+        // The original code tried to compute the multidimensional indices
+        // by iteratively adding offsets and then backing off.
+        // This logic was flawed, particularly in how the 'count' variable
+        // (which should represent the remaining unidimensional index)
+        // was updated and reset.
+
+        // The correct approach is to iteratively divide the unidimensional index
+        // by the offset of the current dimension to find its component,
+        // and then update the index to its remainder for the next (lower) dimension.
+        // The uniCounterOffset array is defined such that uniCounterOffset[i]
+        // is the product of dimensions from i+1 to dimension-1.
+
+        // Use a working copy of the index, as it will be modified (reduced).
+        int currentUnidimensionalIndex = index;
+
+        // Iterate through all dimensions except the last one.
+        // The last dimension's count is simply the final remainder.
         for (int i = 0; i < last; i++) {
-            int idx = 0;
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+            indices[i] = currentUnidimensionalIndex / offset; // Calculate the component index for this dimension
+            currentUnidimensionalIndex %= offset;             // Update the remaining unidimensional index for the next iteration
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // The count for the last dimension is simply the remaining unidimensional index.
+        // (Because uniCounterOffset[last] is 1, currentUnidimensionalIndex / 1 = currentUnidimensionalIndex
+        // and currentUnidimensionalIndex % dimensions[last] would give the same result as just the remainder
+        // if the remainder is less than dimensions[last], which it always should be).
+        indices[last] = currentUnidimensionalIndex;
 
         return indices;
     }
\ No newline at end of file
