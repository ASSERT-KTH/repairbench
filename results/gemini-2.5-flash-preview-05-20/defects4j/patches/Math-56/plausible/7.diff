diff --git a/tmp/f461c5e8-5cfe-4c05-baf9-c2931706df18_buggy.java b/tmp/9f2774e9-0508-4703-ac8b-50525fb8f53a_fixed.java
index 2608424..cf6091c 100644
--- a/tmp/f461c5e8-5cfe-4c05-baf9-c2931706df18_buggy.java
+++ b/tmp/9f2774e9-0508-4703-ac8b-50525fb8f53a_fixed.java
@@ -1,39 +1,41 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
         
-        int count = 0;
+        // Use a new variable to track the remaining part of the unidimensional index.
+        // This 'remainingIndex' will be progressively reduced.
+        int remainingIndex = index; 
+
+        // Iterate through dimensions from highest to lowest (based on uniCounterOffset)
+        // 'last' typically refers to dimension - 1. So this loop goes from 0 to dimension - 2.
         for (int i = 0; i < last; i++) {
-            int idx = 0;
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+            
+            // Calculate the count for the current dimension.
+            // This is equivalent to indices[i] = remainingIndex / offset;
+            int currentDimCount = 0;
+            while (remainingIndex >= offset) {
+                remainingIndex -= offset;
+                ++currentDimCount;
             }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+            indices[i] = currentDimCount;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        // For the last dimension, the remaining value in 'remainingIndex' is its count.
+        // This is equivalent to indices[last] = remainingIndex / 1;
+        indices[last] = remainingIndex;
 
         return indices;
     }
\ No newline at end of file
