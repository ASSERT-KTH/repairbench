diff --git a/tmp/e79166d6-e37a-444f-af5c-91d13d73abfc_buggy.java b/tmp/078986d2-2551-4d41-a94e-1b5238182fa3_fixed.java
index 2608424..772b6eb 100644
--- a/tmp/e79166d6-e37a-444f-af5c-91d13d73abfc_buggy.java
+++ b/tmp/078986d2-2551-4d41-a94e-1b5238182fa3_fixed.java
@@ -1,39 +1,38 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
+        int remainder = index; // This will hold the remaining part of the unidimensional index
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
+        // The uniCounterOffset array contains the strides for each dimension.
+        // uniCounterOffset[i] represents the product of the sizes of all dimensions
+        // after dimension 'i' (from most significant to least significant dimension order).
+        // For example, if dimensions are [s0, s1, s2], then:
+        // uniCounterOffset[0] = s1 * s2
+        // uniCounterOffset[1] = s2
+        // uniCounterOffset[2] = 1 (for the last dimension)
+        // To find the count for each dimension (d_i) from a linear index (idx):
+        // d_0 = floor(idx / uniCounterOffset[0])
+        // remainder = idx % uniCounterOffset[0]
+        // d_1 = floor(remainder / uniCounterOffset[1])
+        // new_remainder = remainder % uniCounterOffset[1]
+        // ... and so on.
+        for (int i = 0; i < dimension; i++) {
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+            indices[i] = remainder / offset; // Calculate the count for the current dimension
+            remainder %= offset;             // Update the remainder for the next dimension
         }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
 
         return indices;
     }
\ No newline at end of file
