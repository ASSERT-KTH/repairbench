diff --git a/tmp/3a5cd06e-d4c8-4292-806a-83485955eded_buggy.java b/tmp/c4737752-74b8-4d33-9d32-4a5a6c19161d_fixed.java
index 2608424..520010e 100644
--- a/tmp/3a5cd06e-d4c8-4292-806a-83485955eded_buggy.java
+++ b/tmp/c4737752-74b8-4d33-9d32-4a5a6c19161d_fixed.java
@@ -1,39 +1,32 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
+        int currentRemainingIndex = index; // This variable will hold the part of the index not yet decomposed.
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+        // Iterate through each dimension from the most significant to the least significant.
+        // The uniCounterOffset[i] stores the product of the sizes of all dimensions
+        // from (i+1) to (dimension-1). This acts as the stride for dimension 'i'.
+        // For example, if dimensions are (d0, d1, d2), then:
+        // uniCounterOffset[0] = d1 * d2
+        // uniCounterOffset[1] = d2
+        // uniCounterOffset[2] = 1
+        for (int i = 0; i < dimension; i++) {
+            int offset = uniCounterOffset[i];
+            indices[i] = currentRemainingIndex / offset; // Calculate the coordinate for the current dimension.
+            currentRemainingIndex %= offset;             // Update the remaining index for the next dimension.
         }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
 
         return indices;
     }
\ No newline at end of file
