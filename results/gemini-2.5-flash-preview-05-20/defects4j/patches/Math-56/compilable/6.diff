diff --git a/tmp/c8f6c42e-6bb3-4fe5-b736-50ccbffe31d7_buggy.java b/tmp/57d22b89-f09d-4a0d-8122-8602124ae47c_fixed.java
index 2608424..16937b7 100644
--- a/tmp/c8f6c42e-6bb3-4fe5-b736-50ccbffe31d7_buggy.java
+++ b/tmp/57d22b89-f09d-4a0d-8122-8602124ae47c_fixed.java
@@ -1,39 +1,39 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
+        int remainingIndex = index;
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
+        // The uniCounterOffset array stores the stride for each dimension.
+        // uniCounterOffset[i] is the product of the sizes of dimensions
+        // from i+1 up to dimension-1.
+        // For example, if sizes = {S0, S1, S2}, then:
+        // uniCounterOffset[0] = S1 * S2
+        // uniCounterOffset[1] = S2
+        // uniCounterOffset[2] = 1
+        //
+        // The conversion from a unidimensional index to multidimensional indices (d0, d1, ..., d_k)
+        // follows a base conversion principle:
+        // index = d0 * (S1*S2*...*Sk) + d1 * (S2*...*Sk) + ... + dk * (1)
+        //
+        // So, di = (remaining part of index) / uniCounterOffset[i]
+        // and the new remaining part is (remaining part of index) % uniCounterOffset[i]
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
+        for (int i = 0; i < dimension; i++) {
+            indices[i] = remainingIndex / uniCounterOffset[i];
+            remainingIndex %= uniCounterOffset[i];
         }
-        --idx;
-        indices[last] = idx;
 
         return indices;
     }
\ No newline at end of file
