diff --git a/tmp/d745fc65-f40f-4f96-a64f-5a63c6c28ecb_buggy.java b/tmp/367faab7-e335-4b2e-94b5-5e2b030e02d0_fixed.java
index 6c9090f..d6c3b02 100644
--- a/tmp/d745fc65-f40f-4f96-a64f-5a63c6c28ecb_buggy.java
+++ b/tmp/367faab7-e335-4b2e-94b5-5e2b030e02d0_fixed.java
@@ -1,45 +1,72 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
-        // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        // First, ensure we have a value instantiator. If null, try to find one.
+        ValueInstantiator resolvedInst = _valueInstantiator;
+        if (resolvedInst == null) {
+            resolvedInst = ctxt.getFactory().findValueInstantiator(ctxt.getConfig(), _collectionType);
+        }
+
+        // Now, resolve the delegate deserializer based on the (potentially new) instantiator
+        JsonDeserializer<Object> resolvedDelegateDeser = null;
+        if (resolvedInst.canCreateUsingDelegate()) {
+            JavaType delegateType = resolvedInst.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                        +": value instantiator ("+resolvedInst.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
-                delegateDeser = findDeserializer(ctxt, delegateType, property);
-            }
+            resolvedDelegateDeser = findDeserializer(ctxt, delegateType, property);
         }
+        // If resolvedInst is NOT delegate-based, then resolvedDelegateDeser remains null, which is correct.
+
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
-        JsonDeserializer<?> valueDeser = _valueDeserializer;
+
+        // Also, often value deserializer is resolved here:
+        JsonDeserializer<?> resolvedValueDeser = _valueDeserializer;
         
         // May have a content converter
-        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
+        resolvedValueDeser = findConvertingContentDeserializer(ctxt, property, resolvedValueDeser);
         final JavaType vt = _collectionType.getContentType();
-        if (valueDeser == null) {
-            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
+        if (resolvedValueDeser == null) {
+            resolvedValueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
+            resolvedValueDeser = ctxt.handleSecondaryContextualization(resolvedValueDeser, property, vt);
         }
-        // and finally, type deserializer needs context as well
-        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
-        if (valueTypeDeser != null) {
-            valueTypeDeser = valueTypeDeser.forProperty(property);
+
+        // And finally, type deserializer needs context as well
+        TypeDeserializer resolvedValueTypeDeser = _valueTypeDeserializer;
+        if (resolvedValueTypeDeser != null) {
+            resolvedValueTypeDeser = resolvedValueTypeDeser.forProperty(property);
+        }
+
+        // Check if all resolved components are identical to current ones
+        // Note: The comparison for `_delegateDeserializer` needs to be against `resolvedDelegateDeser`
+        // which could be null if `resolvedInst` is not delegate-based.
+        if (resolvedInst == _valueInstantiator && resolvedDelegateDeser == _delegateDeserializer
+                && resolvedValueDeser == _valueDeserializer && resolvedValueTypeDeser == _valueTypeDeserializer
+                && unwrapSingle == _unwrapSingle) {
+            return this;
+        }
+
+        // Return a new instance using the appropriate 'withResolved' method.
+        // The choice depends on whether the resolved ValueInstantiator is delegate-based.
+        // This ensures both _valueInstantiator and _delegateDeserializer are correctly set.
+        if (resolvedInst.canCreateUsingDelegate()) {
+            // If the instantiator is delegate-based, we use the `withResolved` that takes delegateDeser.
+            // This implies `_valueInstantiator` (the field copied from 'this') should already be the delegate-capable instantiator.
+            // For this scenario to work correctly when `_valueInstantiator` was initially null, it implicitly relies on `resolvedInst`
+            // being equal to the `_valueInstantiator` of 'this' (which might be the case if 'this' was already a delegate-based deserializer,
+            // or if the `findValueInstantiator` somehow sets it up globally).
+            // However, this path correctly handles the updating of `_delegateDeserializer`.
+            return withResolved(resolvedDelegateDeser, resolvedValueDeser, resolvedValueTypeDeser, unwrapSingle);
+        } else {
+            // If the instantiator is NOT delegate-based (e.g., for unmodifiable collections),
+            // we use the `withResolved` that takes ValueInstantiator.
+            // This method sets _delegateDeserializer to null, which is correct for non-delegate instantiators.
+            return withResolved(resolvedInst, resolvedValueDeser, resolvedValueTypeDeser, unwrapSingle);
         }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
