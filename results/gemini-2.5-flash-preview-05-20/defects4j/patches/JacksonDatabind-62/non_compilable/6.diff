diff --git a/tmp/3256b08c-ff32-4b14-91a8-502fb1ae5298_buggy.java b/tmp/0379379f-e2c0-4939-bfef-dba3ee1c6f08_fixed.java
index 6c9090f..36fab10 100644
--- a/tmp/3256b08c-ff32-4b14-91a8-502fb1ae5298_buggy.java
+++ b/tmp/0379379f-e2c0-4939-bfef-dba3ee1c6f08_fixed.java
@@ -1,45 +1,57 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
-        // May need to resolve types for delegate-based creators:
+        // Try to resolve ValueInstantiator if it's not already resolved (or is default/null)
+        // This is crucial for types that don't have default constructors but rely on creators.
+        // _valueInstantiator is final, so we'll use a local 'inst' variable and pass it to the constructor.
+        ValueInstantiator inst = _valueInstantiator;
+        if (inst == null) {
+            inst = ctxt.getDeserializerFactory().findValueInstantiator(ctxt, _collectionType);
+        }
+
         JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        if (inst != null) { // Use the (potentially resolved) instantiator
+            if (inst.canCreateUsingDelegate()) {
+                JavaType delegateType = inst.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +": value instantiator ("+inst.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
-        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
+        TypeDeserializer valueTypeDeser = _valueTypeDeser;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+        
+        // We cannot use the existing `withResolved` method directly because it always
+        // passes the original `_valueInstantiator` (which might be null or incorrect).
+        // Instead, we directly call the constructor with the potentially newly resolved 'inst'.
+        // This sacrifices the `if same` optimization of `withResolved` for correctness.
+        return new CollectionDeserializer(_collectionType, valueDeser, valueTypeDeser, inst, delegateDeser, unwrapSingle);
     }
\ No newline at end of file
