diff --git a/tmp/dd6eddd4-932e-4e46-97ab-a37399bccc06_buggy.java b/tmp/c54ad405-a0ef-44d3-bb62-db0d1d9cb3d6_fixed.java
index 6c9090f..d655bf4 100644
--- a/tmp/dd6eddd4-932e-4e46-97ab-a37399bccc06_buggy.java
+++ b/tmp/c54ad405-a0ef-44d3-bb62-db0d1d9cb3d6_fixed.java
@@ -1,45 +1,60 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
-        // May need to resolve types for delegate-based creators:
+        // Issue #684, #730: may need to resolve ValueInstantiator for collection
+        // if not already done, or if a more specific one is now available (e.g., via mix-ins).
+        // If _valueInstantiator is null, or if it needs to be updated (e.g., to find a @JsonCreator
+        // from a mix-in for a specific actual type like UnmodifiableSet), it should be resolved here.
+        ValueInstantiator inst = _valueInstantiator;
+        if (inst == null) {
+            inst = ctxt.getFactory().findValueInstantiator(ctxt.getConfig(), _collectionType);
+        }
+        // If 'inst' is now a different (and hopefully more specific/correct) instantiator,
+        // we should ensure this instance or the new one returned by withResolved uses it.
+        // Assuming _valueInstantiator field is mutable (not final) for this specific bug fix context,
+        // or that this effectively re-initializes it for subsequent uses.
+        if (_valueInstantiator != inst) {
+            _valueInstantiator = inst;
+        }
+
         JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
+        // Use the resolved 'inst' for delegate creator checks
+        if (_valueInstantiator != null && _valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
-        }
+
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
 
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
