diff --git a/tmp/a43afe59-ab0b-47b5-bc4f-697d2aeb401e_buggy.java b/tmp/48d0545d-8934-442c-b0d8-d032a2bc89b2_fixed.java
index 6c9090f..06e385d 100644
--- a/tmp/a43afe59-ab0b-47b5-bc4f-697d2aeb401e_buggy.java
+++ b/tmp/48d0545d-8934-442c-b0d8-d032a2bc89b2_fixed.java
@@ -1,45 +1,70 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
-        // May need to resolve types for delegate-based creators:
+        // 1. Resolve or confirm the ValueInstantiator.
+        // If _valueInstantiator is null, we need to find it here.
+        // If it's not null, we keep it, as it's assumed to be pre-resolved.
+        ValueInstantiator actualInst = _valueInstantiator;
+        if (actualInst == null) {
+            actualInst = ctxt.getFactory().findValueInstantiator(ctxt, _collectionType);
+        }
+
+        // 2. May need to resolve types for delegate-based creators, using the 'actualInst'.
         JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        if (actualInst != null) { // Use 'actualInst' for all checks
+            if (actualInst.canCreateUsingDelegate()) {
+                JavaType delegateType = actualInst.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +": value instantiator ("+actualInst.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
+        // 3. [databind#1043]: allow per-property allow-wrapping of single overrides:
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+        
+        // 4. Also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
-        // and finally, type deserializer needs context as well
-        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
+
+        // 5. And finally, type deserializer needs context as well
+        TypeDeserializer valueTypeDeser = _valueTypeDeser;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+
+        // 6. Check if any of the resolved components necessitate creating a new deserializer instance.
+        // This includes the ValueInstantiator, delegate deserializer, value deserializer,
+        // value type deserializer, and the unwrapSingle feature setting.
+        if (actualInst != _valueInstantiator
+                || delegateDeser != _delegateDeserializer
+                || valueDeser != _valueDeserializer
+                || valueTypeDeser != _valueTypeDeser
+                || unwrapSingle != _unwrapSingle)
+        {
+            // If any relevant component has changed, create and return a new instance
+            // with all the resolved (and possibly updated) parameters.
+            return new CollectionDeserializer(_collectionType, valueDeser, valueTypeDeser, actualInst,
+                    delegateDeser, unwrapSingle);
+        }
+        // If no changes, return 'this' for efficiency.
+        return this;
     }
\ No newline at end of file
