diff --git a/tmp/4c7a3fcf-f413-4444-b55b-d6b9bcd711a7_buggy.java b/tmp/0b5db140-6dc6-49a7-8ed4-794657535474_fixed.java
index 6c9090f..3c4be6c 100644
--- a/tmp/4c7a3fcf-f413-4444-b55b-d6b9bcd711a7_buggy.java
+++ b/tmp/0b5db140-6dc6-49a7-8ed4-794657535474_fixed.java
@@ -1,45 +1,66 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
-        // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        // 0. Resolve ValueInstantiator if not already resolved.
+        // This is crucial for types like UnmodifiableSet that require specific creators.
+        ValueInstantiator inst = _valueInstantiator;
+        if (inst == null) {
+            inst = ctxt.getFactory().findValueInstantiator(ctxt.getConfig(), _collectionType);
+        }
+
+        // 1. Resolve delegate deserializer using the (potentially newly resolved) instantiator
+        JsonDeserializer<Object> newDelegateDeser = null;
+        if (inst.canCreateUsingDelegate()) {
+            JavaType delegateType = inst.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +": value instantiator ("+inst.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
-                delegateDeser = findDeserializer(ctxt, delegateType, property);
-            }
+            newDelegateDeser = findDeserializer(ctxt, delegateType, property);
         }
+        
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+        
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
+        
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
-        if (valueTypeDeser != null) {
+        if (valueTypeDeser != null) { // Corrected: was `if (valueDeser != null)`
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+
+        // Check if any of the resolved components changed from the original deserializer's state.
+        // If `inst` was null and is now resolved, or if any deserializer changed, return a new instance.
+        if (inst != _valueInstantiator
+                || newDelegateDeser != _delegateDeserializer
+                || valueDeser != _valueDeserializer
+                || valueTypeDeser != _valueTypeDeserializer
+                || unwrapSingle != _unwrapSingle)
+        {
+            // Return a new instance with the resolved components using the full constructor.
+            // Casts to JsonDeserializer<Object> are necessary due to generic type constraints.
+            return new CollectionDeserializer(_collectionType, (JsonDeserializer<Object>) valueDeser,
+                    valueTypeDeser, inst, (JsonDeserializer<Object>) newDelegateDeser, unwrapSingle);
+        }
+        // If nothing changed, return this instance
+        return this;
     }
\ No newline at end of file
