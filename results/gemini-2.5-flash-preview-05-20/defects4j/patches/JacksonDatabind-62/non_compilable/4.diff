diff --git a/tmp/34c53473-ead5-4cd5-8db8-2cecb9058b0b_buggy.java b/tmp/ef72b320-002a-415f-920e-f74f0e916985_fixed.java
index 6c9090f..14bd683 100644
--- a/tmp/34c53473-ead5-4cd5-8db8-2cecb9058b0b_buggy.java
+++ b/tmp/ef72b320-002a-415f-920e-f74f0e916985_fixed.java
@@ -1,45 +1,122 @@
+import com.fasterxml.jackson.databind.BeanProperty;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.fasterxml.jackson.databind.JsonMappingException;
+import com.fasterxml.jackson.databind.JsonFormat;
+import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.deser.ValueInstantiator;
+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
+
+import java.util.Collection;
+
+// Assume CollectionDeserializer extends ContainerDeserializerBase and has the necessary fields.
+// And that CollectionDeserializer has a withResolved method with a signature similar to:
+// public CollectionDeserializer withResolved(ValueInstantiator inst, JsonDeserializer<Object> delegateDeser, JsonDeserializer<?> valueDeser, TypeDeserializer valueTypeDeser, Boolean unwrapSingle)
+// based on typical Jackson patterns for contextualizing immutable deserializers.
+// The provided code's return statement implies the original `withResolved` was missing the `ValueInstantiator` parameter.
+
+public class CollectionDeserializer extends com.fasterxml.jackson.databind.deser.std.CollectionDeserializer // assuming this is the class context
+{
+    // These fields would typically be inherited or passed in constructor
+    protected final JavaType _collectionType;
+    protected final boolean _mayOverrideAsArray; // Example field often found in constructor
+    protected ValueInstantiator _valueInstantiator; // This field is typically final, but we get a new instance
+    protected JsonDeserializer<Object> _valueDeserializer;
+    protected TypeDeserializer _valueTypeDeserializer;
+    protected JsonDeserializer<Object> _delegateDeserializer; // This is the resolved delegate deserializer
+    protected Boolean _unwrapSingle;
+
+    // Dummy constructor to make the class compile for the snippet, actual constructor is more complex
+    public CollectionDeserializer(JavaType collectionType, boolean mayOverrideAsArray, ValueInstantiator valueInstantiator,
+                                  JsonDeserializer<Object> valueDeser, TypeDeserializer valueTypeDeser,
+                                  JsonDeserializer<Object> delegateDeser, Boolean unwrapSingle) {
+        // Super constructor call, then assignments
+        // super(collectionType); // Example for ContainerDeserializerBase
+        this._collectionType = collectionType;
+        this._mayOverrideAsArray = mayOverrideAsArray;
+        this._valueInstantiator = valueInstantiator;
+        this._valueDeserializer = valueDeser;
+        this._valueTypeDeserializer = valueTypeDeser;
+        this._delegateDeserializer = delegateDeser; // The delegate deserializer field in the class
+        this._unwrapSingle = unwrapSingle;
+    }
+
+    // Dummy `withResolved` and `findDeserializer` methods to make snippet compile.
+    // In a real Jackson codebase, these would be in CollectionDeserializer or its superclasses.
+    protected CollectionDeserializer withResolved(ValueInstantiator inst, JsonDeserializer<Object> delegateDeser,
+                                                  JsonDeserializer<?> valueDeser, TypeDeserializer valueTypeDeser,
+                                                  Boolean unwrapSingle) {
+        return new CollectionDeserializer(_collectionType, _mayOverrideAsArray, inst, valueDeser, valueTypeDeser, delegateDeser, unwrapSingle);
+    }
+    protected JsonDeserializer<Object> findDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {
+        return ctxt.findContextualValueDeserializer(type, property);
+    }
+    protected JsonDeserializer<?> findConvertingContentDeserializer(DeserializationContext ctxt, BeanProperty property, JsonDeserializer<?> existingDeserializer) throws JsonMappingException {
+        // Placeholder, actual implementation would involve `ctxt.findConvertingDeserializer`
+        return existingDeserializer;
+    }
+    protected Boolean findFormatFeature(DeserializationContext ctxt, BeanProperty property, Class<?> type, JsonFormat.Feature feature) {
+        // Placeholder, actual implementation
+        return null;
+    }
+
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
-        // May need to resolve types for delegate-based creators:
+        // STEP 1: Ensure ValueInstantiator is resolved for the _collectionType
+        // If _valueInstantiator is null, or if it needs to be re-evaluated for the contextual type
+        // (e.g., if the initial type was an interface like List.class but now it's an UnmodifiableList)
+        // we should try to resolve it.
+        ValueInstantiator inst = _valueInstantiator;
+        if (inst == null) {
+            inst = ctxt.findValueInstantiator(_collectionType, property);
+        }
+
+        // STEP 2: Resolve delegate deserializer based on the (potentially new) instantiator
         JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        if (inst != null) { // Use the resolved 'inst' here
+            if (inst.canCreateUsingDelegate()) {
+                JavaType delegateType = inst.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +": value instantiator ("+inst.getClass().getName() // Use 'inst' here
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
+
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+        
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
+        
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+        
+        // STEP 3: Return a new instance using the potentially resolved 'inst' and 'delegateDeser'
+        // The original return statement was missing the 'inst' parameter.
+        // Assuming there is a `withResolved` overload that takes `ValueInstantiator` as the first argument.
+        return withResolved(inst, delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+    }
 }
