diff --git a/tmp/c736a06d-6bf7-452c-8388-d1ae89aa4ddf_buggy.java b/tmp/c67672d8-e099-4476-9fda-3d4811302a3c_fixed.java
index 6c9090f..67b75ab 100644
--- a/tmp/c736a06d-6bf7-452c-8388-d1ae89aa4ddf_buggy.java
+++ b/tmp/c67672d8-e099-4476-9fda-3d4811302a3c_fixed.java
@@ -1,45 +1,57 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
-        // May need to resolve types for delegate-based creators:
+        // 0. Resolve the ValueInstantiator based on the actual _collectionType.
+        // This is crucial if the initial deserializer was for a generic type (e.g. Set.class)
+        // and now needs to handle a concrete type (e.g. UnmodifiableSet) due to default typing.
+        // The original _valueInstantiator might be for a common mutable collection, not for the specific target type.
+        // We re-find the instantiator to ensure it's correct for the concrete _collectionType.
+        ValueInstantiator contextualInstantiator = ctxt.getFactory().findValueInstantiator(ctxt, _collectionType);
+
+        // 1. Resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        if (contextualInstantiator != null) {
+            if (contextualInstantiator.canCreateUsingDelegate()) {
+                JavaType delegateType = contextualInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +": value instantiator ("+contextualInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
+        // 2. [databind#1043]: allow per-property allow-wrapping of single overrides:
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+
+        // 3. Resolve value deserializer:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
-        
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
-        // and finally, type deserializer needs context as well
+
+        // 4. Resolve value type deserializer:
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+
+        // 5. Return a new instance using the (potentially re-resolved) contextualInstantiator
+        // We must use the constructor that allows specifying ValueInstantiator explicitly,
+        // as the default `withResolved` would copy the old `_valueInstantiator` (which might be wrong).
+        return new CollectionDeserializer(this, valueDeser, valueTypeDeser,
+                contextualInstantiator, delegateDeser, unwrapSingle);
     }
