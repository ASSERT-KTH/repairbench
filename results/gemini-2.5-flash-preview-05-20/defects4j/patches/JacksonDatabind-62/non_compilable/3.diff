diff --git a/tmp/67ee56cc-9f52-4c7a-80ab-51b379af1c31_buggy.java b/tmp/7b0a9143-2666-412b-8d6f-39a721266649_fixed.java
index 6c9090f..e0778bf 100644
--- a/tmp/67ee56cc-9f52-4c7a-80ab-51b379af1c31_buggy.java
+++ b/tmp/7b0a9143-2666-412b-8d6f-39a721266649_fixed.java
@@ -1,45 +1,73 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
+        // 1. Ensure ValueInstantiator is resolved, if not already.
+        // This is crucial for polymorphic types like UnmodifiableSet where
+        // the instantiator might be null or not correctly configured for delegate creation.
+        ValueInstantiator inst = _valueInstantiator;
+        if (inst == null) {
+            inst = ctxt.findValueInstantiator(_collectionType, property);
+        }
+
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        if (inst != null) { // Use the resolved 'inst'
+            if (inst.canCreateUsingDelegate()) {
+                JavaType delegateType = inst.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +": value instantiator ("+inst.getClass().getName() // Use 'inst'
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+        // 2. Pass the resolved 'inst' to withResolved, so the new instance uses it
+        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle, inst);
+    }
+
+    // This is a helper method, assuming it is part of the same class or a superclass that needs modification.
+    // The original CollectionDeserializer.withResolved only passed _valueInstantiator, not 'inst'.
+    // To properly fix, this method needs to be updated to accept and use the resolved ValueInstantiator.
+    // If this method is not directly provided in the context, it implicitly needs to be modified or added.
+    protected CollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser,
+            JsonDeserializer<?> valueDeser, TypeDeserializer valueTypeDeser,
+            Boolean unwrapSingle, ValueInstantiator inst) // Added 'inst' parameter
+    {
+        // Check if no changes occurred, including the instantiator
+        if (delegateDeser == _delegateDeserializer && valueDeser == _valueDeserializer
+                && valueTypeDeser == _valueTypeDeser && unwrapSingle == _unwrapSingle
+                && inst == _valueInstantiator) { // Compare 'inst' with current '_valueInstantiator'
+            return this;
+        }
+        // Create a new instance using the resolved 'inst'
+        return new CollectionDeserializer(_collectionType, valueDeser, valueTypeDeser,
+                inst, delegateDeser, unwrapSingle); // Use 'inst' in constructor call
     }
\ No newline at end of file
