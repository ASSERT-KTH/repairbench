diff --git a/tmp/aa06ce11-9036-474f-b48f-bbd41ec2bf30_buggy.java b/tmp/da3b52b4-e8e7-46fc-b475-d64000248977_fixed.java
index 6c9090f..943c126 100644
--- a/tmp/aa06ce11-9036-474f-b48f-bbd41ec2bf30_buggy.java
+++ b/tmp/da3b52b4-e8e7-46fc-b475-d64000248977_fixed.java
@@ -1,45 +1,80 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
+        
+        // FIX: For unmodifiable collections (like those from Collections.unmodifiableSet/List/Collection),
+        // the ValueInstantiator might not correctly report a delegating creator,
+        // even if a mix-in @JsonCreator is present. In such cases, we explicitly try
+        // to find a delegate deserializer for the corresponding mutable base type (e.g., Set for UnmodifiableSet).
+        // This ensures the deserializer is correctly configured for delegation.
+        if (delegateDeser == null && _collectionType != null &&
+                _collectionType.getRawClass().getName().startsWith("java.util.Collections$Unmodifiable")) {
+            
+            Class<?> rawType = _collectionType.getRawClass();
+            Class<?> mutableDelegateRawType = null;
+            
+            // Determine the appropriate mutable interface type as delegate for the unmodifiable collection
+            if (Set.class.isAssignableFrom(rawType)) {
+                mutableDelegateRawType = Set.class;
+            } else if (List.class.isAssignableFrom(rawType)) {
+                mutableDelegateRawType = List.class;
+            } else if (Collection.class.isAssignableFrom(rawType)) {
+                mutableDelegateRawType = Collection.class;
+            }
+
+            if (mutableDelegateRawType != null) {
+                // Construct the delegate JavaType, propagating content type from the original collection type
+                JavaType delegateType = ctxt.constructSpecializedType(_collectionType, mutableDelegateRawType);
+                if (delegateType != null && _collectionType.hasGenericTypes()) {
+                    delegateType = delegateType.withContentType(_collectionType.getContentType());
+                }
+                
+                // Try to find a deserializer for this derived delegate type
+                if (delegateType != null) {
+                    delegateDeser = findDeserializer(ctxt, delegateType, property);
+                }
+            }
+        }
+
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
