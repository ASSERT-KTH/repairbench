diff --git a/tmp/215b24f5-1764-4f9a-be1f-0a5697639ea7_buggy.java b/tmp/44750ac7-8b1c-4b99-a917-e8754b11e098_fixed.java
index 6ea5795..377df44 100644
--- a/tmp/215b24f5-1764-4f9a-be1f-0a5697639ea7_buggy.java
+++ b/tmp/44750ac7-8b1c-4b99-a917-e8754b11e098_fixed.java
@@ -1,37 +1,40 @@
     /**
      * Appends the usage clause for an Option to a StringBuffer.  
      *
      * @param buff the StringBuffer to append to
      * @param option the Option to append
      * @param required whether the Option is required or not
      */
     private static void appendOption(final StringBuffer buff, 
                                      final Option option, 
                                      final boolean required)
     {
         if (!required)
         {
             buff.append("[");
         }
 
         if (option.getOpt() != null)
         {
             buff.append("-").append(option.getOpt());
         }
         else
         {
             buff.append("--").append(option.getLongOpt());
         }
 
         // if the Option has a value
-        if (option.hasArg() && (option.getArgName() != null))
+        // The original condition `option.getArgName() != null` would evaluate to true
+        // even if `getArgName()` returned an empty string (""), leading to "<>" being appended.
+        // `option.hasArgName()` correctly checks if the argument name is non-null AND non-empty.
+        if (option.hasArg() && option.hasArgName())
         {
             buff.append(" <").append(option.getArgName()).append(">");
         }
 
         // if the Option is not a required option
         if (!required)
         {
             buff.append("]");
         }
     }
\ No newline at end of file
