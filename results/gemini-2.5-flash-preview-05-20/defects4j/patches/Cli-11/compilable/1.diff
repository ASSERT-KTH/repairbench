diff --git a/tmp/1deef3e6-2fc8-4c02-9664-d4490df3f0b5_buggy.java b/tmp/6bcc5857-4b34-4fce-bfc8-ff3d2012dabc_fixed.java
index 6ea5795..74e7faa 100644
--- a/tmp/1deef3e6-2fc8-4c02-9664-d4490df3f0b5_buggy.java
+++ b/tmp/6bcc5857-4b34-4fce-bfc8-ff3d2012dabc_fixed.java
@@ -1,37 +1,42 @@
     /**
      * Appends the usage clause for an Option to a StringBuffer.  
      *
      * @param buff the StringBuffer to append to
      * @param option the Option to append
      * @param required whether the Option is required or not
      */
     private static void appendOption(final StringBuffer buff, 
                                      final Option option, 
                                      final boolean required)
     {
-        if (!required)
+        // Use option.isRequired() to determine if brackets should be added.
+        // This handles cases where HelpFormatter might pass 'false' for the 'required' parameter
+        // but the option itself is marked as required.
+        if (!option.isRequired())
         {
             buff.append("[");
         }
 
         if (option.getOpt() != null)
         {
             buff.append("-").append(option.getOpt());
         }
         else
         {
             buff.append("--").append(option.getLongOpt());
         }
 
         // if the Option has a value
-        if (option.hasArg() && (option.getArgName() != null))
+        // The condition was too lenient, allowing empty argName to still print "<>"
+        // Added a check for empty argName to prevent "<>" from being appended if argName is empty.
+        if (option.hasArg() && (option.getArgName() != null) && !option.getArgName().isEmpty())
         {
             buff.append(" <").append(option.getArgName()).append(">");
         }
 
-        // if the Option is not a required option
-        if (!required)
+        // Use option.isRequired() to determine if brackets should be added.
+        if (!option.isRequired())
         {
             buff.append("]");
         }
     }
\ No newline at end of file
