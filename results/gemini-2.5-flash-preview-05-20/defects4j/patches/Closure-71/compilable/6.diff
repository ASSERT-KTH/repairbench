diff --git a/tmp/3c243ffa-4f58-416b-af84-a1fdfb52b884_buggy.java b/tmp/78ad928a-d094-4175-b889-b056bb817b8d_fixed.java
index 6f24eb6..f9c2a6f 100644
--- a/tmp/3c243ffa-4f58-416b-af84-a1fdfb52b884_buggy.java
+++ b/tmp/78ad928a-d094-4175-b889-b056bb817b8d_fixed.java
@@ -1,99 +1,116 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType != null) {
       // Is this a normal property access, or are we trying to override
       // an existing property?
       boolean isOverride = t.inGlobalScope() &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
 
       // Find the lowest property defined on a class with visibility
       // information.
       if (isOverride) {
+        // If it's an override, we look for the original property on the
+        // implicit prototype chain to find its visibility.
+        // This makes `objectType` represent the owner of the overridden property.
         objectType = objectType.getImplicitPrototype();
       }
       JSDocInfo docInfo = null;
       for (; objectType != null;
            objectType = objectType.getImplicitPrototype()) {
         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
         if (docInfo != null &&
             docInfo.getVisibility() != Visibility.INHERITED) {
           break;
         }
       }
 
       if (objectType == null) {
         // We couldn't find a visibility modifier; assume it's public.
         return;
       }
 
       boolean sameInput =
           t.getInput().getName().equals(docInfo.getSourceName());
       Visibility visibility = docInfo.getVisibility();
       JSType ownerType = normalizeClassType(objectType);
       if (isOverride) {
         // Check an ASSIGN statement that's trying to override a property
         // on a superclass.
         JSDocInfo overridingInfo = parent.getJSDocInfo();
         Visibility overridingVisibility = overridingInfo == null ?
             Visibility.INHERITED : overridingInfo.getVisibility();
 
         // Check that (a) the property *can* be overridden, and
         // (b) that the visibility of the override is the same as the
         // visibility of the original property.
         if (visibility == Visibility.PRIVATE && !sameInput) {
+          // Attempting to override a private property from a different file.
+          // If the overriding property has no explicit visibility, treat it as a general
+          // bad private access (because you can't "see" it to override it implicitly).
+          // Otherwise, it's a specific private override violation.
+          if (overridingVisibility == Visibility.INHERITED) {
+            compiler.report(
+                t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
+                    propertyName,
+                    validator.getReadableJSTypeName(
+                        getprop.getFirstChild(), true)));
+          } else {
             compiler.report(
                 t.makeError(getprop, PRIVATE_OVERRIDE,
                     objectType.toString()));
+          }
         } else if (overridingVisibility != Visibility.INHERITED &&
             overridingVisibility != visibility) {
+          // Visibility mismatch when overriding. This applies if the original is
+          // not private, or if it's private but in the same file.
           compiler.report(
               t.makeError(getprop, VISIBILITY_MISMATCH,
                   visibility.name(), objectType.toString(),
                   overridingVisibility.name()));
         }
       } else {
         if (sameInput) {
           // private access is always allowed in the same file.
           return;
         } else if (visibility == Visibility.PRIVATE &&
             (currentClass == null || ownerType.differsFrom(currentClass))) {
           if (docInfo.isConstructor() &&
               isValidPrivateConstructorAccess(parent)) {
             return;
           }
 
           // private access is not allowed outside the file from a different
           // enclosing class.
           compiler.report(
               t.makeError(getprop,
                   BAD_PRIVATE_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         } else if (visibility == Visibility.PROTECTED) {
           // There are 3 types of legal accesses of a protected property:
           // 1) Accesses in the same file
           // 2) Overriding the property in a subclass
           // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
+          // The first two have already been checked for (sameInput or isOverride logic).
           if (currentClass == null || !currentClass.isSubtype(ownerType)) {
             compiler.report(
                 t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
                     propertyName,
                     validator.getReadableJSTypeName(
                         getprop.getFirstChild(), true)));
           }
         }
       }
     }
   }
\ No newline at end of file
