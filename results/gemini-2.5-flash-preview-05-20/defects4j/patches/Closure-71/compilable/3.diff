diff --git a/tmp/b89cbf68-26a4-40c6-8993-c7f1c47cfc40_buggy.java b/tmp/dd6ff82d-6bb1-4638-a68a-7855d1af89a8_fixed.java
index 6f24eb6..c305a97 100644
--- a/tmp/b89cbf68-26a4-40c6-8993-c7f1c47cfc40_buggy.java
+++ b/tmp/dd6ff82d-6bb1-4638-a68a-7855d1af89a8_fixed.java
@@ -1,99 +1,127 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType != null) {
       // Is this a normal property access, or are we trying to override
       // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
-          parent.getType() == Token.ASSIGN &&
+      // An override is an assignment where the getprop is the target of the assignment.
+      boolean isOverride = parent.getType() == Token.ASSIGN &&
                            parent.getFirstChild() == getprop;
 
       // Find the lowest property defined on a class with visibility
       // information.
+      // If it's an override, we need to check the prototype chain to find
+      // the original property being overridden.
+      // We start searching from the implicit prototype because `getprop.getFirstChild()`
+      // would typically resolve to the current type (e.g., SubFoo.prototype),
+      // and we want to find the property's definition higher up the chain.
       if (isOverride) {
         objectType = objectType.getImplicitPrototype();
       }
       JSDocInfo docInfo = null;
       for (; objectType != null;
            objectType = objectType.getImplicitPrototype()) {
         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
         if (docInfo != null &&
             docInfo.getVisibility() != Visibility.INHERITED) {
           break;
         }
       }
 
       if (objectType == null) {
         // We couldn't find a visibility modifier; assume it's public.
         return;
       }
 
       boolean sameInput =
           t.getInput().getName().equals(docInfo.getSourceName());
       Visibility visibility = docInfo.getVisibility();
       JSType ownerType = normalizeClassType(objectType);
       if (isOverride) {
         // Check an ASSIGN statement that's trying to override a property
         // on a superclass.
         JSDocInfo overridingInfo = parent.getJSDocInfo();
         Visibility overridingVisibility = overridingInfo == null ?
             Visibility.INHERITED : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
-        if (visibility == Visibility.PRIVATE && !sameInput) {
+        // Check 1: Handling overrides of private properties.
+        if (visibility == Visibility.PRIVATE) {
+          if (sameInput) {
+            // Private property overridden in the same file. Always allowed.
+            // This applies to cases like `this.privateProp_ = ...` in a constructor
+            // or `MyClass.prototype.privateMethod_ = ...` in the same file as MyClass.
+            return;
+          } else {
+            // Private property overridden from a different file.
+            if (overridingVisibility == Visibility.PRIVATE) {
+              // Original private, override private, different file.
+              // This is an invalid override as private properties are not meant to be
+              // overridden, even privately, across different source files/classes.
               compiler.report(
                   t.makeError(getprop, PRIVATE_OVERRIDE,
                       objectType.toString()));
+            } else {
+              // Original private, override non-private (public/protected/inherited),
+              // from a different file. This is treated as a bad access, as it's an
+              // attempt to 'reach into' and modify a private member.
+              compiler.report(
+                  t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
+                      propertyName,
+                      validator.getReadableJSTypeName(
+                          getprop.getFirstChild(), true)));
+            }
+          }
         } else if (overridingVisibility != Visibility.INHERITED &&
                    overridingVisibility != visibility) {
+          // Check 2: Visibility mismatch for non-private properties (PUBLIC/PROTECTED).
+          // If the overriding property has an explicit visibility, it must match
+          // the original property's visibility.
           compiler.report(
               t.makeError(getprop, VISIBILITY_MISMATCH,
                   visibility.name(), objectType.toString(),
                   overridingVisibility.name()));
         }
-      } else {
+      } else { // Not an override (direct access or other forms of property use)
         if (sameInput) {
           // private access is always allowed in the same file.
           return;
         } else if (visibility == Visibility.PRIVATE &&
             (currentClass == null || ownerType.differsFrom(currentClass))) {
           if (docInfo.isConstructor() &&
               isValidPrivateConstructorAccess(parent)) {
             return;
           }
 
           // private access is not allowed outside the file from a different
           // enclosing class.
           compiler.report(
               t.makeError(getprop,
                   BAD_PRIVATE_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         } else if (visibility == Visibility.PROTECTED) {
           // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
+          // 1) Accesses in the same file (handled by sameInput check, if applicable)
+          // 2) Overriding the property in a subclass (handled by isOverride check above)
+          // 3) Accessing the property from inside a subclass (the check below)
+          // The first two have already been checked for (or are not relevant to this branch).
           if (currentClass == null || !currentClass.isSubtype(ownerType)) {
             compiler.report(
                 t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
                     propertyName,
                     validator.getReadableJSTypeName(
                         getprop.getFirstChild(), true)));
           }
         }
       }
     }
   }
\ No newline at end of file
