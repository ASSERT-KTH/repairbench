diff --git a/tmp/1cd279b7-d53a-4fd5-867c-9eb1571ff4ea_buggy.java b/tmp/c7bc38e6-f1bf-408f-bd7d-625bf199a1cf_fixed.java
index 6f24eb6..13fe8d3 100644
--- a/tmp/1cd279b7-d53a-4fd5-867c-9eb1571ff4ea_buggy.java
+++ b/tmp/c7bc38e6-f1bf-408f-bd7d-625bf199a1cf_fixed.java
@@ -1,99 +1,131 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType != null) {
       // Is this a normal property access, or are we trying to override
       // an existing property?
       boolean isOverride = t.inGlobalScope() &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
 
       // Find the lowest property defined on a class with visibility
       // information.
+      // If we are overriding, we check the visibility of the property
+      // on the superclass, not the current class's implicit prototype,
+      // as the current class's definition is the one being created/modified.
+      // So, we find the inherited property's visibility.
+      ObjectType checkType = objectType;
       if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
+        checkType = objectType.getImplicitPrototype();
       }
+
       JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
+      for (; checkType != null;
+           checkType = checkType.getImplicitPrototype()) {
+        docInfo = checkType.getOwnPropertyJSDocInfo(propertyName);
         if (docInfo != null &&
             docInfo.getVisibility() != Visibility.INHERITED) {
           break;
         }
       }
 
-      if (objectType == null) {
+      if (docInfo == null) {
         // We couldn't find a visibility modifier; assume it's public.
         return;
       }
 
       boolean sameInput =
           t.getInput().getName().equals(docInfo.getSourceName());
       Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
+      JSType ownerType = normalizeClassType(checkType);
+
+      // Handle general access control (private/protected).
+      // This applies to both read and write access, including attempts to override.
+      if (visibility == Visibility.PRIVATE) {
+        if (!sameInput) { // Private access from a different file.
+          if (isOverride) {
+            JSDocInfo overridingInfo = parent.getJSDocInfo();
+            Visibility overridingVisibility = overridingInfo == null ?
+                Visibility.INHERITED : overridingInfo.getVisibility();
+
+            if (overridingVisibility == Visibility.INHERITED) {
+              // If the overriding property has no explicit visibility, it's an
+              // illegal access of the private property (as in testNoPrivateAccessForProperties6).
+              compiler.report(
+                  t.makeError(getprop,
+                      BAD_PRIVATE_PROPERTY_ACCESS,
+                      propertyName,
+                      validator.getReadableJSTypeName(
+                          getprop.getFirstChild(), true)));
+              return;
+            }
+            // If overridingVisibility is not INHERITED, it means the override
+            // explicitly declares a visibility. This case falls through to the
+            // PRIVATE_OVERRIDE check below (as in testNoPrivateAccessForProperties8).
+          } else { // Not an override, normal read access of private property.
+            if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {
+              return;
+            }
+            if (currentClass == null || ownerType.differsFrom(currentClass)) {
+              compiler.report(
+                  t.makeError(getprop,
+                      BAD_PRIVATE_PROPERTY_ACCESS,
+                      propertyName,
+                      validator.getReadableJSTypeName(
+                          getprop.getFirstChild(), true)));
+              return;
+            }
+          }
+        }
+      } else if (visibility == Visibility.PROTECTED) {
+        // Protected access from a different file.
+        if (!sameInput) {
+          // Protected access is allowed if 'currentClass' is a subclass of 'ownerType'.
+          // Otherwise, it's a BAD_PROTECTED_PROPERTY_ACCESS.
+          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
+            compiler.report(
+                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
+                    propertyName,
+                    validator.getReadableJSTypeName(
+                        getprop.getFirstChild(), true)));
+            return;
+          }
+        }
+      }
+      // If sameInput is true, or visibility is Public, or private/protected access
+      // passed the checks above, then we proceed to check override specifics.
+
+      // Now, check override-specific rules (e.g., visibility mismatch).
       if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
         JSDocInfo overridingInfo = parent.getJSDocInfo();
         Visibility overridingVisibility = overridingInfo == null ?
             Visibility.INHERITED : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+        // If the original property was private and accessed from a different file,
+        // AND the override *itself* explicitly declares a visibility, then it's
+        // an illegal override of a private property (as in testNoPrivateAccessForProperties8).
+        // This path is reached because the BAD_PRIVATE_PROPERTY_ACCESS check above
+        // returned only if overridingVisibility was INHERITED.
         if (visibility == Visibility.PRIVATE && !sameInput) {
           compiler.report(
               t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
+                  ownerType.toString()));
         } else if (overridingVisibility != Visibility.INHERITED &&
             overridingVisibility != visibility) {
+          // Visibility mismatch, e.g., protected becomes public, or public becomes private.
           compiler.report(
               t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
+                  visibility.name(), ownerType.toString(),
                   overridingVisibility.name()));
         }
-      } else {
-        if (sameInput) {
-          // private access is always allowed in the same file.
-          return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
-            return;
-          }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
-          compiler.report(
-              t.makeError(getprop,
-                  BAD_PRIVATE_PROPERTY_ACCESS,
-                  propertyName,
-                  validator.getReadableJSTypeName(
-                      getprop.getFirstChild(), true)));
-        } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
-            compiler.report(
-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
-                    propertyName,
-                    validator.getReadableJSTypeName(
-                        getprop.getFirstChild(), true)));
-          }
-        }
       }
     }
   }
\ No newline at end of file
