diff --git a/tmp/fbe2f51b-1b21-479b-af40-6b98bf23f0d3_buggy.java b/tmp/a2cc9bbd-7b03-4de1-8d14-0d3a744aca43_fixed.java
index b529d33..4623a79 100644
--- a/tmp/fbe2f51b-1b21-479b-af40-6b98bf23f0d3_buggy.java
+++ b/tmp/a2cc9bbd-7b03-4de1-8d14-0d3a744aca43_fixed.java
@@ -1,29 +1,36 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
-        if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+        // Rule: Consonants from the same code group separated by W or H are treated as one.
+        // This means, if we have C1 (at index-2) followed by H/W (at index-1) followed by C2 (at index),
+        // and map(C1) == map(C2) (where C1 and C2 are actual consonants, not '0' mapped chars),
+        // then C2 should be ignored (mapped to '0').
+        if (index > 1 && mappedChar != '0') { // Current character (C2) must be a consonant
+            final char hwChar = str.charAt(index - 1); // This is the separator (H or W)
+            if ('H' == hwChar || 'W' == hwChar) { // Check if the separator is H or W
+                final char preHWChar = str.charAt(index - 2); // This is C1
+                final char firstCode = this.map(preHWChar); // Get mapping for C1
+
+                // Apply the rule: C1 must be a consonant (firstCode != '0')
+                // AND map(C1) must be equal to map(C2) (firstCode == mappedChar)
+                if (firstCode != '0' && firstCode == mappedChar) {
+                    return '0'; // Ignore C2 as per the rule
                 }
             }
         }
         return mappedChar;
     }
\ No newline at end of file
