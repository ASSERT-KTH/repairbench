diff --git a/tmp/eae44f58-18ab-4328-8f77-89eec0c3982a_buggy.java b/tmp/0cd33ea1-b25e-41ca-b0a5-7bf21db8debf_fixed.java
index b529d33..67683bf 100644
--- a/tmp/eae44f58-18ab-4328-8f77-89eec0c3982a_buggy.java
+++ b/tmp/0cd33ea1-b25e-41ca-b0a5-7bf21db8debf_fixed.java
@@ -1,29 +1,41 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
+        // Consonants from the same code group separated by W or H are treated as one.
+        // This rule applies when the current character (at `index`) is C2,
+        // the character immediately preceding it (at `index - 1`) is 'H' or 'W',
+        // and the character before that (at `index - 2`, which is C1) maps to the
+        // same Soundex code as C2. In such cases, C2 should be ignored (mapped to '0').
+        // The condition `index > 1` ensures that `index - 2` is a valid string index.
         if (index > 1 && mappedChar != '0') {
             final char hwChar = str.charAt(index - 1);
             if ('H' == hwChar || 'W' == hwChar) {
                 final char preHWChar = str.charAt(index - 2);
                 final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+                // The original condition `firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar`
+                // incorrectly suppressed characters if the character two positions back was 'H' or 'W' itself.
+                // The rule states that it should be a *consonant* (C1) that maps to the same
+                // code group as the current character (C2). 'H' and 'W' are typically ignored
+                // and do not belong to a 'code group' in this context; they are the separators.
+                // The fix removes the erroneous check for `preHWChar` being 'H' or 'W'.
+                if (firstCode == mappedChar) {
                     return 0;
                 }
             }
         }
         return mappedChar;
     }
\ No newline at end of file
