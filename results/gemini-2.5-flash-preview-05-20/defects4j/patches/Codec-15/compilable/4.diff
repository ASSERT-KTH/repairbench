diff --git a/tmp/a49c5dfb-be99-4012-9f8f-ff8db8c5a1bc_buggy.java b/tmp/f4ab9a62-eeb8-4d50-a0ae-53ad9add791e_fixed.java
index b529d33..89163a1 100644
--- a/tmp/a49c5dfb-be99-4012-9f8f-ff8db8c5a1bc_buggy.java
+++ b/tmp/f4ab9a62-eeb8-4d50-a0ae-53ad9add791e_fixed.java
@@ -1,29 +1,39 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
+        // This rule applies if:
+        // 1. The current character (str.charAt(index)) is a consonant (mappedChar != '0').
+        // 2. There's a character before the 'H' or 'W' (index > 1).
+        // 3. The character immediately before the current one (str.charAt(index - 1)) is 'H' or 'W'.
+        // 4. The character before the 'H' or 'W' (str.charAt(index - 2)) has the same mapped code as the current character.
         if (index > 1 && mappedChar != '0') {
             final char hwChar = str.charAt(index - 1);
             if ('H' == hwChar || 'W' == hwChar) {
                 final char preHWChar = str.charAt(index - 2);
                 final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                // If the consonant before H/W (preHWChar) and the current consonant (str.charAt(index))
+                // have the same Soundex code, then the current consonant is ignored (code '0').
+                // The condition `mappedChar != '0'` at the top of the if-block ensures that
+                // if `firstCode == mappedChar` is true, then `firstCode` must also be non-'0',
+                // fulfilling the "consonants from the same code group" part of the rule.
+                if (firstCode == mappedChar) {
+                    return 0; // The character at 'index' is ignored due to the HW rule.
                 }
             }
         }
         return mappedChar;
     }
\ No newline at end of file
