diff --git a/tmp/1cbd7499-38fc-4302-b930-7fd80eb21b2b_buggy.java b/tmp/e6a5528d-b18c-433b-b274-7ec8f78336c7_fixed.java
index b529d33..cf15dc0 100644
--- a/tmp/1cbd7499-38fc-4302-b930-7fd80eb21b2b_buggy.java
+++ b/tmp/e6a5528d-b18c-433b-b274-7ec8f78336c7_fixed.java
@@ -1,29 +1,40 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
+        // Rule: Consonants from the same code group separated by W or H are treated as one.
+        // This implies: char_X (code C) - (H or W) - char_Y (code C)
+        // If char_Y would map to code C, it should be ignored.
+        // So, if the char at index-2 (preHWChar) maps to the same code as current char (mappedChar),
+        // AND the char at index-1 (hwChar) is 'H' or 'W', then return '0' (ignore current char).
         if (index > 1 && mappedChar != '0') {
             final char hwChar = str.charAt(index - 1);
             if ('H' == hwChar || 'W' == hwChar) {
                 final char preHWChar = str.charAt(index - 2);
                 final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                // The original condition `firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar`
+                // was incorrect. If `preHWChar` itself was 'H' or 'W', then `firstCode` would be '0'.
+                // The `|| 'H' == preHWChar || 'W' == preHWChar` part would then cause characters
+                // (e.g., 'D' in "YHWDYT") to be incorrectly ignored, because `preHWChar` (e.g., 'H')
+                // matches one of the conditions, even if `firstCode` (0) is not equal to `mappedChar` (3).
+                // The rule applies only if the *codes* of the characters flanking H/W are the same.
+                if (firstCode == mappedChar) {
+                    return 0; // Ignore current character based on HW rule
                 }
             }
         }
         return mappedChar;
     }
\ No newline at end of file
