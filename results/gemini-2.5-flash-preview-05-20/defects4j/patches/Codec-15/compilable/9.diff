diff --git a/tmp/65f86cd0-c08b-459d-b311-293209312501_buggy.java b/tmp/c594f6bc-bf7c-43c9-a2a7-94abcdaebb93_fixed.java
index b529d33..753f448 100644
--- a/tmp/65f86cd0-c08b-459d-b311-293209312501_buggy.java
+++ b/tmp/c594f6bc-bf7c-43c9-a2a7-94abcdaebb93_fixed.java
@@ -1,29 +1,37 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
-        if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+        // Consonants from the same code group separated by W or H are treated as one.
+        // This implies: C1 [H|W] C2 where map(C1) == map(C2) => C2 is ignored (mapped to 0).
+        // The rule explicitly states "Consonants", meaning C1 must itself be a consonant (not H, W, or a vowel).
+        if (index > 1 && mappedChar != '0') { // Ensure current character (C2) is a mapped consonant and enough history exists
+            final char hwChar = str.charAt(index - 1); // Character at (index - 1) is the potential separator
+            if ('H' == hwChar || 'W' == hwChar) { // Check if separator is H or W
+                final char preHWChar = str.charAt(index - 2); // Character at (index - 2) is the potential previous consonant (C1)
+                final char firstCode = this.map(preHWChar); // Mapped code of C1
+
+                // Apply the rule: if C1 is a consonant (firstCode != '0') AND its code matches C2's code (mappedChar),
+                // then C2 should be treated as one with C1 (i.e., ignored).
+                // The original condition `|| 'H' == preHWChar || 'W' == preHWChar` was incorrect,
+                // as 'H' or 'W' are not consonants that form a "code group".
+                if (firstCode != '0' && firstCode == mappedChar) {
+                    return 0; // Return 0 to indicate this character should be ignored/skipped
                 }
             }
         }
         return mappedChar;
     }
\ No newline at end of file
