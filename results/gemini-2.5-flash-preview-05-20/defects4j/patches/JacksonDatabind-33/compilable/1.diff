diff --git a/tmp/a3eec7f2-c254-4e8c-bcc9-9ab7e36a1884_buggy.java b/tmp/55d4107a-6b69-4d52-81a8-5c7d628fd3be_fixed.java
index 3cb9232..280ff94 100644
--- a/tmp/a3eec7f2-c254-4e8c-bcc9-9ab7e36a1884_buggy.java
+++ b/tmp/55d4107a-6b69-4d52-81a8-5c7d628fd3be_fixed.java
@@ -1,26 +1,32 @@
     @Override
     public PropertyName findNameForSerialization(Annotated a)
     {
         String name = null;
 
         JsonGetter jg = _findAnnotation(a, JsonGetter.class);
         if (jg != null) {
             name = jg.value();
         } else {
             JsonProperty pann = _findAnnotation(a, JsonProperty.class);
             if (pann != null) {
                 name = pann.value();
                 /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
                  *   it's actually bit tricky to do it more efficiently (meta-annotations
                  *   add more lookups; AnnotationMap costs etc)
                  */
+            } else if (_hasAnnotation(a, com.fasterxml.jackson.annotation.JsonUnwrapped.class)) { // Added check for JsonUnwrapped
+                // If @JsonUnwrapped is present, this property does not have a name itself
+                // for serialization (its contents are flattened).
+                // Returning null here signals that this annotation introspector does not
+                // provide a name, allowing the unwrapping logic to take over.
+                return null;
             } else if (_hasAnnotation(a, JsonSerialize.class)
                     || _hasAnnotation(a, JsonView.class)
                     || _hasAnnotation(a, JsonRawValue.class)) {
                 name = "";
             } else {
                 return null;
             }
         }
         return PropertyName.construct(name);
     }
