diff --git a/tmp/e8b5b23e-31ae-4ce7-867c-5790465f66ec_buggy.java b/tmp/4345c7e1-8b7f-4078-b968-0bfb7dc053b3_fixed.java
index 3cb9232..4605e70 100644
--- a/tmp/e8b5b23e-31ae-4ce7-867c-5790465f66ec_buggy.java
+++ b/tmp/4345c7e1-8b7f-4078-b968-0bfb7dc053b3_fixed.java
@@ -1,26 +1,40 @@
     @Override
     public PropertyName findNameForSerialization(Annotated a)
     {
         String name = null;
 
+        // 1. Check for explicit name via JsonGetter
         JsonGetter jg = _findAnnotation(a, JsonGetter.class);
         if (jg != null) {
             name = jg.value();
         } else {
+            // 2. Check for explicit name via JsonProperty
             JsonProperty pann = _findAnnotation(a, JsonProperty.class);
             if (pann != null) {
                 name = pann.value();
-                /* 22-Apr-2014, tatu: Should figure out a better way to do this, but
-                 *   it's actually bit tricky to do it more efficiently (meta-annotations
-                 *   add more lookups; AnnotationMap costs etc)
-                 */
-            } else if (_hasAnnotation(a, JsonSerialize.class)
-                    || _hasAnnotation(a, JsonView.class)
-                    || _hasAnnotation(a, JsonRawValue.class)) {
-                name = "";
             } else {
-                return null;
+                // 3. Check for @JsonUnwrapped
+                // If present, this property itself does not have a direct name in the JSON,
+                // but its contents are flattened. This is signaled by PropertyName.UNWRAPPED.
+                if (_hasAnnotation(a, JsonUnwrapped.class)) {
+                    return PropertyName.UNWRAPPED;
                 }
+                
+                // 4. Other serialization-related annotations (JsonSerialize, JsonView, JsonRawValue)
+                // These annotations indicate that the property *is* relevant for serialization,
+                // but they do *not* define its name. In such cases, the default bean property
+                // naming strategy should apply. Returning `null` for `name` allows
+                // `PropertyName.construct(null)` to be returned, which signals "use default name".
+                // The problematic line `name = "";` from the original code (which effectively
+                // returned `PropertyName.UNWRAPPED`) is removed from this path.
+                
+                // If none of the above are found, `name` remains `null`.
+                // The final `return PropertyName.construct(name)` will then call
+                // `PropertyName.construct(null)`, which signals default naming.
             }
+        }
+        // If `name` was set by JsonGetter or JsonProperty, construct PropertyName with it.
+        // If `name` is still null (meaning no explicit name and not @JsonUnwrapped),
+        // PropertyName.construct(null) will be returned, signaling default naming.
         return PropertyName.construct(name);
     }
\ No newline at end of file
