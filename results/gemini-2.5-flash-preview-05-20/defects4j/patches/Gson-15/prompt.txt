You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
  /**
   * Encodes {@code value}.
   *
   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
   *     {@link Double#isInfinite() infinities}.
   * @return this writer.
   */
  public JsonWriter value(double value) throws IOException {
    writeDeferredName();
    if (Double.isNaN(value) || Double.isInfinite(value)) {
      throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
    }
    beforeValue();
    out.append(Double.toString(value));
    return this;
  }

```

The code fails the following tests.

Test `com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient`:
```java
  public void testNonFiniteDoublesWhenLenient() throws IOException {
    StringWriter stringWriter = new StringWriter();
    JsonWriter jsonWriter = new JsonWriter(stringWriter);
    jsonWriter.setLenient(true);
    jsonWriter.beginArray();
    jsonWriter.value(Double.NaN);
    jsonWriter.value(Double.NEGATIVE_INFINITY);
    jsonWriter.value(Double.POSITIVE_INFINITY);
    jsonWriter.endArray();
    assertEquals("[NaN,-Infinity,Infinity]", stringWriter.toString());
  }

```
Test `com.google.gson.stream.JsonWriterTest::testNonFiniteDoublesWhenLenient` error:
```
java.lang.IllegalArgumentException: Numeric values must be finite, but was NaN
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
