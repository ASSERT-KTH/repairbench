diff --git a/tmp/12808682-54bd-456a-b704-3e038a7650da_buggy.java b/tmp/a4b026c6-92cd-48af-a027-d923f6472257_fixed.java
index 4837962..7629142 100644
--- a/tmp/12808682-54bd-456a-b704-3e038a7650da_buggy.java
+++ b/tmp/a4b026c6-92cd-48af-a027-d923f6472257_fixed.java
@@ -1,175 +1,202 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
-        if (StringUtils.isBlank(str)) {
+        if (org.apache.commons.lang.StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }  
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear 
             // to be in specification of class. OS X Java parses it to 
             // a wrong value.
             return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
-            return createInteger(str);
+            return NumberUtils.createInteger(str); // Assuming createInteger is part of NumberUtils
         }   
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+        
+        // Fix: Correctly determine expPos as the minimum of 'e' and 'E' positions
+        int expPosE = str.indexOf('e');
+        int expPosUpperE = str.indexOf('E');
+
+        int expPos = -1;
+        if (expPosE > -1) {
+            expPos = expPosE;
+        }
+        if (expPosUpperE > -1) {
+            if (expPos == -1 || expPosUpperE < expPos) {
+                expPos = expPosUpperE;
+            }
+        }
 
         if (decPos > -1) {
 
             if (expPos > -1) {
                 if (expPos < decPos) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar)) {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            boolean allZeros = NumberUtils.isAllZeros(mant) && NumberUtils.isAllZeros(exp); // Assuming isAllZeros is part of NumberUtils
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && isDigits(numeric.substring(1))
-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
+                    // Fix: Improve validation for 'l'/'L' qualifier to handle single-digit numbers and leading signs
+                    boolean validLongFormat = false;
+                    if (dec == null && exp == null) { // Must be integer form
+                        if (numeric.length() > 0) {
+                            int start = 0;
+                            if (numeric.charAt(0) == '-') { // Check for sign
+                                start = 1;
+                            }
+                            // Ensure there are digits after the optional sign
+                            if (start < numeric.length()) { 
+                                validLongFormat = NumberUtils.isDigits(numeric.substring(start)); // Assuming isDigits is part of NumberUtils
+                            }
+                        }
+                    }
+
+                    if (validLongFormat) {
                         try {
-                            return createLong(numeric);
+                            return NumberUtils.createLong(numeric); // Assuming createLong is part of NumberUtils
                         } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                            // Too big for a long, try BigInteger
                         }
-                        return createBigInteger(numeric);
+                        return NumberUtils.createBigInteger(numeric); // Assuming createBigInteger is part of NumberUtils
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        Float f = NumberUtils.createFloat(numeric); // Assuming createFloat is part of NumberUtils
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (NumberFormatException nfe) {
                         // ignore the bad number
                     }
                     //Fall through
                 case 'd' :
                 case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        Double d = NumberUtils.createDouble(numeric); // Assuming createDouble is part of NumberUtils
+                        // Fix: Use d.doubleValue() instead of d.floatValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { 
                             return d;
                         }
                     } catch (NumberFormatException nfe) {
                         // ignore the bad number
                     }
                     try {
-                        return createBigDecimal(numeric);
+                        return NumberUtils.createBigDecimal(numeric); // Assuming createBigDecimal is part of NumberUtils
                     } catch (NumberFormatException e) {
                         // ignore the bad number
                     }
                     //Fall through
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         } else {
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
+            if (expPos > -1 && expPos < str.length()) {
                 exp = str.substring(expPos + 1, str.length());
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
                 //Must be an int,long,bigint
                 try {
-                    return createInteger(str);
+                    return NumberUtils.createInteger(str);
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
-                    return createLong(str);
+                    return NumberUtils.createLong(str);
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
-                return createBigInteger(str);
+                return NumberUtils.createBigInteger(str);
 
             } else {
                 //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+                boolean allZeros = NumberUtils.isAllZeros(mant) && NumberUtils.isAllZeros(exp);
                 try {
-                    Float f = createFloat(str);
+                    Float f = NumberUtils.createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
-                    Double d = createDouble(str);
+                    Double d = NumberUtils.createDouble(str);
+                    // Fix: Use d.doubleValue() instead of d.floatValue()
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
 
-                return createBigDecimal(str);
+                return NumberUtils.createBigDecimal(str);
 
             }
         }
     }
\ No newline at end of file
