diff --git a/tmp/04bff3c1-2fc0-44c7-a061-b6d4283c9d0e_buggy.java b/tmp/1085e25b-6e6b-46fc-98c3-b6877e5a5216_fixed.java
index 4837962..bdea3b8 100644
--- a/tmp/04bff3c1-2fc0-44c7-a061-b6d4283c9d0e_buggy.java
+++ b/tmp/1085e25b-6e6b-46fc-98c3-b6877e5a5216_fixed.java
@@ -1,175 +1,201 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>First, the value is examined for a type qualifier on the end
-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-     * <code>BigDecimal</code>.</p>
-     *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string
-     * @throws NumberFormatException if the value cannot be converted
-     */
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.math.NumberUtils;
+
+// Assuming the existence of helper methods:
+// createInteger(String str)
+// createLong(String str)
+// createBigInteger(String str)
+// createBigDecimal(String str)
+// isAllZeros(String str)
+
 public static Number createNumber(String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }  
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear 
         // to be in specification of class. OS X Java parses it to 
         // a wrong value.
         return null;
     }
     if (str.startsWith("0x") || str.startsWith("-0x")) {
         return createInteger(str);
     }   
     char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    String exp; // This 'exp' is for the case where there is no type suffix (last `else` block)
+
+    // Fix 1: Correctly parse the position of 'e' or 'E' for the main string 'str'
+    int ePos = str.indexOf('e');
+    int EPos = str.indexOf('E');
+    int expPos;
+    if (ePos == -1) {
+        expPos = EPos;
+    } else if (EPos == -1) {
+        expPos = ePos;
+    } else {
+        expPos = Math.min(ePos, EPos); // Take the first one if both exist
+    }
+
+    int decPos = str.indexOf('.'); // decPos is already initialized here in original code
 
     if (decPos > -1) {
-
         if (expPos > -1) {
             if (expPos < decPos) {
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             dec = str.substring(decPos + 1, expPos);
         } else {
             dec = str.substring(decPos + 1);
         }
         mant = str.substring(0, decPos);
     } else {
         if (expPos > -1) {
             mant = str.substring(0, expPos);
         } else {
             mant = str;
         }
         dec = null;
     }
+    
     if (!Character.isDigit(lastChar)) {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
-            }
         // Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        String numeric = str.substring(0, str.length() - 1); // numeric string without the type suffix
+
+        // Fix 2: Re-calculate exponent for the 'numeric' part accurately for allZeros check
+        String numericExp = null;
+        int numericEPOS = -1;
+        int numEPOS_e = numeric.indexOf('e');
+        int numEPOS_E = numeric.indexOf('E');
+        if (numEPOS_e == -1) {
+            numericEPOS = numEPOS_E;
+        } else if (numEPOS_E == -1) {
+            numericEPOS = numEPOS_e;
+        } else {
+            numericEPOS = Math.min(numEPOS_e, numEPOS_E);
+        }
+        
+        if (numericEPOS > -1 && numericEPOS < numeric.length() - 1) { // If 'e' or 'E' is not the last char of numeric
+            numericExp = numeric.substring(numericEPOS + 1);
+        } else if (numericEPOS == numeric.length() - 1) { // If 'e' or 'E' is the last char of numeric (e.g. "1e")
+            numericExp = null; // No actual exponent digits
+        }
+        // If numericEPOS is -1, numericExp remains null, which is correct.
+
+        boolean allZeros = isAllZeros(mant) && isAllZeros(numericExp); // Use the correctly derived numericExp
+
         switch (lastChar) {
             case 'l' :
             case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && isDigits(numeric.substring(1))
-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
+                // Fix 3: Correct validation logic for 'l'/'L' suffix
+                boolean isLongCandidate = false;
+                if (numeric.length() > 0) { // numeric won't be null as it's a substring of a non-null str
+                    char firstChar = numeric.charAt(0);
+                    if (firstChar == '-') {
+                        isLongCandidate = numeric.length() > 1 && StringUtils.isDigits(numeric.substring(1));
+                    } else if (Character.isDigit(firstChar)) {
+                        isLongCandidate = StringUtils.isDigits(numeric);
+                    }
+                }
+
+                if (dec == null // No decimal point allowed for long
+                    && numericEPOS == -1 // No exponent allowed for long
+                    && isLongCandidate) { 
                     try {
                         return createLong(numeric);
                     } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                        //Too big for a long, try BigInteger
                     }
                     return createBigInteger(numeric);
 
                 }
                 throw new NumberFormatException(str + " is not a valid number.");
             case 'f' :
             case 'F' :
                 try {
                     Float f = NumberUtils.createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
 
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 //Fall through
             case 'd' :
             case 'D' :
                 try {
                     Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    // Fix 4: Corrected floatValue() to doubleValue() for Double
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { 
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     return createBigDecimal(numeric);
                 } catch (NumberFormatException e) {
                     // ignore the bad number
                 }
                 //Fall through
             default :
                 throw new NumberFormatException(str + " is not a valid number.");
 
         }
     } else {
         //User doesn't have a preference on the return type, so let's start
         //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+        // `exp` variable for the full string `str` is derived using `expPos`.
+        if (expPos > -1 && expPos < str.length() -1) { // If 'e' or 'E' is not the last char of str
+            exp = str.substring(expPos + 1); // Get the rest of the string after 'e/E'
+        } else if (expPos == str.length() - 1) { // If 'e' or 'E' is the last char of str (e.g. "1e")
+            exp = null; // No actual exponent digits
         } else {
-                exp = null;
+            exp = null; // No 'e' or 'E' found
         }
+
         if (dec == null && exp == null) {
             //Must be an int,long,bigint
             try {
                 return createInteger(str);
             } catch (NumberFormatException nfe) {
                 // ignore the bad number
             }
             try {
                 return createLong(str);
             } catch (NumberFormatException nfe) {
                 // ignore the bad number
             }
             return createBigInteger(str);
 
         } else {
             //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Using the correct `exp` for the full string `str`
             try {
                 Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
             } catch (NumberFormatException nfe) {
                 // ignore the bad number
             }
             try {
                 Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
             } catch (NumberFormatException nfe) {
                 // ignore the bad number
             }
 
             return createBigDecimal(str);
 
         }
     }
 }
\ No newline at end of file
