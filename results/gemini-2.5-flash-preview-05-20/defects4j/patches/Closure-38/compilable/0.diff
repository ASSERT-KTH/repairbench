diff --git a/tmp/2512360f-f4d5-4149-8b02-dc58c531cee6_buggy.java b/tmp/dd412176-5dd1-4830-a0b1-290128afa112_fixed.java
index a7d4ff8..520e398 100644
--- a/tmp/2512360f-f4d5-4149-8b02-dc58c531cee6_buggy.java
+++ b/tmp/dd412176-5dd1-4830-a0b1-290128afa112_fixed.java
@@ -1,28 +1,35 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Add a space if the number is negative (including negative zero) and
+    // the previous character was a minus sign, to prevent parsing errors like "x--0.0".
+    if ((x < 0 || negativeZero) && prev == '-') {
       add(" ");
     }
 
     if ((long) x == x && !negativeZero) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
       if (Math.abs(x) >= 100) {
-        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
+        // This loop attempts to find if the number can be represented in scientific notation
+        // with an integer mantissa (e.g., 1200 as 12E2).
+        // It's crucial that mantissa / 10 * Math.pow(10, exp + 1) == value
+        // correctly represents the original value, which can be tricky with floating point.
+        // A more robust check might involve comparing with a small epsilon or using integer arithmetic.
+        while (mantissa / 10.0 * Math.pow(10, exp + 1) == value) { // Changed to 10.0 to ensure double division
           mantissa /= 10;
           exp++;
         }
       }
       if (exp > 2) {
         add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
         add(Long.toString(value));
       }
     } else {
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
