diff --git a/tmp/4829a0fc-0106-46eb-8beb-fcc255ead959_buggy.java b/tmp/22c938fe-2506-4152-b5a6-1f0b6f26b1f7_fixed.java
index a7d4ff8..35367fb 100644
--- a/tmp/4829a0fc-0106-46eb-8beb-fcc255ead959_buggy.java
+++ b/tmp/22c938fe-2506-4152-b5a6-1f0b6f26b1f7_fixed.java
@@ -1,28 +1,48 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Add a space between a negative number/negative zero and a preceding minus sign
+    // to prevent it from being parsed as a decrement operation (e.g., x--4).
+    // The condition `x < 0` is false for negative zero (-0.0), so we must explicitly
+    // check `negativeZero` as well.
+    if ((x < 0 || negativeZero) && prev == '-') {
       add(" ");
     }
 
     if ((long) x == x && !negativeZero) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
       if (Math.abs(x) >= 100) {
+        // This loop attempts to find a compact exponential representation
+        // (e.g., 123000 as 123E3).
+        // It's crucial that value is an integer and mantissa remains an integer
+        // for this exact check to work for powers of 10.
+        // We use Math.pow(10, exp + 1) to avoid potential floating point
+        // inaccuracies by comparing the original 'value' with the scaled 'mantissa'.
+        // The condition `mantissa / 10 * Math.pow(10, exp + 1) == value`
+        // is equivalent to `(mantissa / 10) * 10^(exp+1) == value`.
+        // If mantissa is 123000, and exp is 0, then mantissa/10 is 12300.
+        // 12300 * 10^(1) = 123000. So exp becomes 1. mantissa becomes 12300.
+        // If mantissa is 12300, exp is 1. mantissa/10 is 1230.
+        // 1230 * 10^(2) = 123000. So exp becomes 2. mantissa becomes 1230.
+        // If mantissa is 1230, exp is 2. mantissa/10 is 123.
+        // 123 * 10^(3) = 123000. So exp becomes 3. mantissa becomes 123.
+        // Next iteration: mantissa is 123, exp is 3. mantissa/10 is 12.
+        // 12 * 10^(4) != 123000. Loop terminates.
         while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
           mantissa /= 10;
           exp++;
         }
       }
-      if (exp > 2) {
+      if (exp > 2) { // Only use exponential notation if it saves at least 3 digits
         add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
         add(Long.toString(value));
       }
     } else {
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
