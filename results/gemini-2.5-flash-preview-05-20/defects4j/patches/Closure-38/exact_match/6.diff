diff --git a/tmp/3b20cefe-9b36-47e8-a3fd-cf74efd3451d_buggy.java b/tmp/b8a3c16c-d218-47d7-9a5f-2b32f7ade19b_fixed.java
index a7d4ff8..1b397c5 100644
--- a/tmp/3b20cefe-9b36-47e8-a3fd-cf74efd3451d_buggy.java
+++ b/tmp/b8a3c16c-d218-47d7-9a5f-2b32f7ade19b_fixed.java
@@ -1,28 +1,40 @@
   void addNumber(double x) {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
     boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+    // Add a space if the previous token was a minus sign and the current number
+    // is negative (including negative zero), to prevent "x--4" being parsed as
+    // x minus minus 4.
+    if ((x < 0 || negativeZero) && prev == '-') {
       add(" ");
     }
 
     if ((long) x == x && !negativeZero) {
+      // If x is an exact integer and not negative zero, represent it as a long.
+      // Negative zero will be handled by the else branch to ensure it prints as "-0.0".
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
+      // For large integers, try to represent them in scientific notation if it's shorter.
+      // This part ensures that integers like 1000000 are not printed as 1E6 if it's not optimal.
       if (Math.abs(x) >= 100) {
+        // Keep dividing by 10 as long as the value can be exactly represented
+        // as mantissa * 10^exp
         while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
           mantissa /= 10;
           exp++;
         }
       }
+      // If the exponent is significant, use scientific notation.
       if (exp > 2) {
         add(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
         add(Long.toString(value));
       }
     } else {
+      // For non-integer doubles or negative zero, use String.valueOf(x).
+      // This will correctly print "-0.0", "1.23", etc.
       add(String.valueOf(x));
     }
   }
\ No newline at end of file
