diff --git a/tmp/c1d4cfb5-81f6-42ff-93e2-ff33f8d55772_buggy.java b/tmp/425b49c8-25e4-41c6-b210-56d41f578017_fixed.java
index a7d0787..5ec721e 100644
--- a/tmp/c1d4cfb5-81f6-42ff-93e2-ff33f8d55772_buggy.java
+++ b/tmp/425b49c8-25e4-41c6-b210-56d41f578017_fixed.java
@@ -1,54 +1,145 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        // Added handling for common primitive wrapper types
+        else if (Boolean.class == clazz)
+        {
+            // For boolean, strict parsing is often preferred for CLI to avoid "false" for any non-"true" input
+            if ("true".equalsIgnoreCase(str))
+            {
+                return (T) Boolean.TRUE;
+            }
+            else if ("false".equalsIgnoreCase(str))
+            {
+                return (T) Boolean.FALSE;
+            }
             else
             {
-            return null;
+                throw new ParseException("For input string: \"" + str + "\" as Boolean");
+            }
+        }
+        else if (Byte.class == clazz)
+        {
+            try
+            {
+                return (T) Byte.valueOf(str);
+            }
+            catch (final NumberFormatException e)
+            {
+                throw new ParseException("For input string: \"" + str + "\"", e);
+            }
+        }
+        else if (Short.class == clazz)
+        {
+            try
+            {
+                return (T) Short.valueOf(str);
+            }
+            catch (final NumberFormatException e)
+            {
+                throw new ParseException("For input string: \"" + str + "\"", e);
+            }
+        }
+        else if (Integer.class == clazz)
+        {
+            try
+            {
+                return (T) Integer.valueOf(str);
+            }
+            catch (final NumberFormatException e)
+            {
+                throw new ParseException("For input string: \"" + str + "\"", e);
+            }
+        }
+        else if (Long.class == clazz)
+        {
+            try
+            {
+                return (T) Long.valueOf(str);
+            }
+            catch (final NumberFormatException e)
+            {
+                throw new ParseException("For input string: \"" + str + "\"", e);
+            }
+        }
+        else if (Float.class == clazz)
+        {
+            try
+            {
+                return (T) Float.valueOf(str);
+            }
+            catch (final NumberFormatException e)
+            {
+                throw new ParseException("For input string: \"" + str + "\"", e);
+            }
+        }
+        else if (Double.class == clazz)
+        {
+            try
+            {
+                return (T) Double.valueOf(str);
+            }
+            catch (final NumberFormatException e)
+            {
+                throw new ParseException("For input string: \"" + str + "\"", e);
+            }
+        }
+        else if (Character.class == clazz)
+        {
+            if (str == null || str.length() != 1)
+            {
+                throw new ParseException("For input string: \"" + str + "\" as Character");
+            }
+            return (T) Character.valueOf(str.charAt(0));
+        }
+        else // Fallback for any other unhandled types
+        {
+            throw new ParseException("Unable to handle type: " + clazz.getName());
         }
     }
\ No newline at end of file
