diff --git a/tmp/f4102f98-1df9-4bdc-ad26-284cab19f32d_buggy.java b/tmp/9749ba04-1879-4ade-8ee8-02885db157b9_fixed.java
index a7d0787..974c14a 100644
--- a/tmp/f4102f98-1df9-4bdc-ad26-284cab19f32d_buggy.java
+++ b/tmp/9749ba04-1879-4ade-8ee8-02885db157b9_fixed.java
@@ -1,54 +1,75 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+        else if (Number.class.isAssignableFrom(clazz))
         {
+            try {
+                if (clazz == Byte.class) {
+                    return (T) Byte.valueOf(str);
+                } else if (clazz == Short.class) {
+                    return (T) Short.valueOf(str);
+                } else if (clazz == Integer.class) {
+                    return (T) Integer.valueOf(str);
+                } else if (clazz == Long.class) {
+                    return (T) Long.valueOf(str);
+                } else if (clazz == Float.class) {
+                    return (T) Float.valueOf(str);
+                } else if (clazz == Double.class) {
+                    return (T) Double.valueOf(str);
+                } else {
+                    // For generic Number.class or other Number subclasses like BigDecimal, BigInteger
                     return (T) createNumber(str);
                 }
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse number: " + str + " as " + clazz.getName(), e);
+            }
+        }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            // If none of the specific types match, it means we cannot create the value.
+            // According to the Javadoc, this should throw ParseException.
+            throw new ParseException("Unable to handle the type " + clazz.getName());
         }
     }
\ No newline at end of file
