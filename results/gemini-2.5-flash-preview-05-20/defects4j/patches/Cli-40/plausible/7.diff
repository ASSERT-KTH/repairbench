diff --git a/tmp/47acaa54-eeb0-44c0-9e4c-07f3aff9e503_buggy.java b/tmp/ca686493-b171-49f0-8158-e38d120bfcea_fixed.java
index a7d0787..5660beb 100644
--- a/tmp/47acaa54-eeb0-44c0-9e4c-07f3aff9e503_buggy.java
+++ b/tmp/ca686493-b171-49f0-8158-e38d120bfcea_fixed.java
@@ -1,54 +1,63 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
+        // Note: PatternOptionBuilder.XYZ_VALUE holds a Class object, e.g., String.class.
+        // The comparison `PatternOptionBuilder.XYZ_VALUE == clazz` means `XYZ.class == clazz`.
+        // For types like Number and Date, subclasses should also be handled (e.g., Integer is a Number).
+        // Therefore, `isAssignableFrom` is used for these polymorphic types.
+        // For other types (String, Object, Class, File, URL, File[]), exact class match (`==`) is appropriate.
+        // The PatternOptionBuilder.EXISTING_FILE_VALUE constant is handled externally by DefaultParser
+        // and its presence here for File.class is effectively unreachable due to PatternOptionBuilder.FILE_VALUE.
+        // However, the existing structure is preserved.
+
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+        else if (Number.class.isAssignableFrom(clazz)) // Fix: Use isAssignableFrom for Number and its subclasses (Integer, Long, etc.)
         {
             return (T) createNumber(str);
         }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
+        else if (Date.class.isAssignableFrom(clazz)) // Fix: Use isAssignableFrom for Date and its subclasses (Timestamp, etc.)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
             return null;
         }
     }
\ No newline at end of file
