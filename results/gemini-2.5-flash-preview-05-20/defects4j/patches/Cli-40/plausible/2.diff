diff --git a/tmp/791e8ea0-7eb6-449d-b19b-36efa60aa494_buggy.java b/tmp/6e9a30a1-a5a2-46f9-8ccf-3c0867406ece_fixed.java
index a7d0787..8c830e7 100644
--- a/tmp/791e8ea0-7eb6-449d-b19b-36efa60aa494_buggy.java
+++ b/tmp/6e9a30a1-a5a2-46f9-8ccf-3c0867406ece_fixed.java
@@ -1,54 +1,83 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+        else if (Number.class.isAssignableFrom(clazz)) // Handle Number subclasses like Integer, Long, etc.
         {
-            return (T) createNumber(str);
+            // createNumber will throw ParseException if str is not a valid number
+            final Number num = createNumber(str);
+
+            // Now convert the parsed 'num' to the specific target 'clazz'
+            // Handle primitive wrapper classes specifically
+            if (clazz.equals(Byte.class)) {
+                return (T) Byte.valueOf(num.byteValue());
+            } else if (clazz.equals(Short.class)) {
+                return (T) Short.valueOf(num.shortValue());
+            } else if (clazz.equals(Integer.class)) {
+                return (T) Integer.valueOf(num.intValue());
+            } else if (clazz.equals(Long.class)) {
+                return (T) Long.valueOf(num.longValue());
+            } else if (clazz.equals(Float.class)) {
+                return (T) Float.valueOf(num.floatValue());
+            } else if (clazz.equals(Double.class)) {
+                return (T) Double.valueOf(num.doubleValue());
+            } else if (clazz.equals(Number.class)) {
+                // If the requested type is just Number.class itself
+                return (T) num;
+            } else {
+                // This case should ideally not be reached for standard Number types
+                // If it is, it means a custom Number subclass was passed which isn't handled
+                throw new ParseException("Cannot convert number value " + str + " to " + clazz.getName());
+            }
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
+            // Note: PatternOptionBuilder.FILE_VALUE and PatternOptionBuilder.EXISTING_FILE_VALUE both resolve to File.class.
+            // If clazz is File.class, the first branch (PatternOptionBuilder.FILE_VALUE == clazz) will be true.
+            // This means this 'EXISTING_FILE_VALUE' branch is effectively unreachable code for File.class.
+            // This is a design characteristic of PatternOptionBuilder constants, not a bug in this function's logic.
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            // Throw ParseException if the class type is not supported, as per Javadoc.
+            throw new ParseException("Unable to handle the class " + clazz.getName());
         }
     }
