diff --git a/tmp/f1287d5e-2b60-4b65-89eb-177efb296945_buggy.java b/tmp/1c4f59ae-4cbb-4b0e-a289-9236225e0a36_fixed.java
index a7d0787..5aa5ea7 100644
--- a/tmp/f1287d5e-2b60-4b65-89eb-177efb296945_buggy.java
+++ b/tmp/1c4f59ae-4cbb-4b0e-a289-9236225e0a36_fixed.java
@@ -1,54 +1,72 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
+        // For String.class, direct equality is sufficient as String is a final class.
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
+        // For Object.class, direct equality is used as isAssignableFrom would match any class.
+        // This indicates a specific handler for the exact Object.class type.
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+        // To handle subclasses of Number (e.g., Integer, Long, Double, Float),
+        // we should use isAssignableFrom to check for type compatibility.
+        // This specifically fixes the testCreateValueInteger_failure case.
+        else if (PatternOptionBuilder.NUMBER_VALUE.isAssignableFrom(clazz))
         {
             return (T) createNumber(str);
         }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
+        // To handle subclasses of Date (e.g., java.sql.Date),
+        // use isAssignableFrom for broader compatibility.
+        else if (PatternOptionBuilder.DATE_VALUE.isAssignableFrom(clazz))
         {
             return (T) createDate(str);
         }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
+        // To handle subclasses of Class (e.g., custom ClassLoader types),
+        // use isAssignableFrom for broader compatibility.
+        else if (PatternOptionBuilder.CLASS_VALUE.isAssignableFrom(clazz))
         {
             return (T) createClass(str);
         }
+        // For File types, PatternOptionBuilder.FILE_VALUE and PatternOptionBuilder.EXISTING_FILE_VALUE
+        // both resolve to File.class. The current method signature cannot distinguish
+        // between these two intents if only File.class is passed.
+        // The existing order means PatternOptionBuilder.EXISTING_FILE_VALUE branch is effectively unreachable
+        // if clazz is File.class. This is a deeper design issue.
+        // Keeping '==' for these specific constants, as it was in the original code,
+        // maintains the existing (albeit potentially problematic) behavior for files.
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
+            // If the specified class type is not handled, return null as per original behavior.
             return null;
         }
     }
\ No newline at end of file
