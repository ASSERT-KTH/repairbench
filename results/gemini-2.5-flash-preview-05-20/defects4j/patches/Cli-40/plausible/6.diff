diff --git a/tmp/9f7e8367-a0ba-4192-8a6b-e74739e30953_buggy.java b/tmp/0e0857ac-e3ed-4b27-9504-060dc81abdee_fixed.java
index a7d0787..ff181d4 100644
--- a/tmp/9f7e8367-a0ba-4192-8a6b-e74739e30953_buggy.java
+++ b/tmp/0e0857ac-e3ed-4b27-9504-060dc81abdee_fixed.java
@@ -1,54 +1,58 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+        // Fix for number types: Use isAssignableFrom to handle subclasses like Integer, Long, Double.
+        // Previously, it only matched Number.class itself, not its subclasses.
+        else if (Number.class.isAssignableFrom(clazz))
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            // If the class is not recognized, throw a ParseException instead of returning null.
+            // This aligns with the expectation that if creation fails, an exception is thrown.
+            throw new ParseException("Unable to handle the class: " + clazz.getName());
         }
     }
\ No newline at end of file
