diff --git a/tmp/ee9f14b9-b50d-46b7-92bf-3ac6cbc2ea65_buggy.java b/tmp/bc7df8d9-7759-458f-bd82-841cf58c8780_fixed.java
index a7d0787..58e7e1d 100644
--- a/tmp/ee9f14b9-b50d-46b7-92bf-3ac6cbc2ea65_buggy.java
+++ b/tmp/bc7df8d9-7759-458f-bd82-841cf58c8780_fixed.java
@@ -1,54 +1,57 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+        // Fix: Use isAssignableFrom to correctly handle subclasses of Number (e.g., Integer, Long)
+        // The original code `PatternOptionBuilder.NUMBER_VALUE == clazz` only matched `Number.class` exactly,
+        // preventing types like `Integer.class` from being processed by `createNumber`.
+        else if (PatternOptionBuilder.NUMBER_VALUE.isAssignableFrom(clazz))
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
             return null;
         }
     }
\ No newline at end of file
