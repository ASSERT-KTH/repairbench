diff --git a/tmp/0c15b2d3-8cb1-40c8-b611-b5c0931a0f5b_buggy.java b/tmp/b8f58216-3bd3-47e1-9109-a85c76a5ea84_fixed.java
index b86c1ea..02b6d90 100644
--- a/tmp/0c15b2d3-8cb1-40c8-b611-b5c0931a0f5b_buggy.java
+++ b/tmp/b8f58216-3bd3-47e1-9109-a85c76a5ea84_fixed.java
@@ -1,38 +1,41 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
+
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
+        // 'pos' will track the character index in the 'input' CharSequence.
+        // The loop should iterate as long as 'pos' is within the bounds of 'input'.
+        int inputLen = input.length(); 
+
+        while (pos < inputLen) {
+            // Call the abstract translate method.
+            // This method takes the character index 'pos' and returns the number of characters it consumed.
             int consumed = translate(input, pos, out); 
+
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                // If the translator did not handle the current code point,
+                // we write it directly to the output.
+                int codePoint = Character.codePointAt(input, pos);
+                out.write(Character.toChars(codePoint));
+                // Advance 'pos' by the actual number of characters consumed by this code point.
+                pos += Character.charCount(codePoint);
             } else {
-                        pos++;
+                // If the translator handled 'consumed' characters,
+                // advance 'pos' by that amount.
+                pos += consumed;
             }
-                }
-                pos--;
-            }
-            pos++;
+            // No additional 'pos++' here; 'pos' is advanced correctly in each branch.
         }
     }
\ No newline at end of file
