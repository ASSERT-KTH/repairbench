diff --git a/tmp/67325e03-5c71-4a37-aa50-8a2ee3f0561c_buggy.java b/tmp/6b7e7823-3b26-49e9-9b45-261c81e13378_fixed.java
index b86c1ea..df5510c 100644
--- a/tmp/67325e03-5c71-4a37-aa50-8a2ee3f0561c_buggy.java
+++ b/tmp/6b7e7823-3b26-49e9-9b45-261c81e13378_fixed.java
@@ -1,38 +1,47 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
+        // The loop condition should be based on the character length of the input,
+        // as 'pos' represents a character index.
+        int inputLength = input.length();
+
+        while (pos < inputLength) { // Loop while we haven't processed all characters
+            // Get the current code point at 'pos' and determine how many characters it occupies.
+            // This is crucial for advancing 'pos' correctly if the translator does not consume it.
+            int codePoint = Character.codePointAt(input, pos);
+            int charCount = Character.charCount(codePoint); // 1 for BMP, 2 for supplementary character
+
+            // Call the abstract translate method, passing the current character position.
+            // This method should return the number of characters it consumed from 'input' starting at 'pos'.
             int consumed = translate(input, pos, out);
+
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                // If the custom translator did not consume any characters (returned 0),
+                // then we write the current code point as characters to the output writer.
+                char[] c = Character.toChars(codePoint);
                 out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                // Advance 'pos' by the number of characters that constitute the current code point.
+                pos += charCount;
             } else {
-                        pos++;
+                // If the custom translator consumed characters (returned > 0),
+                // then we advance 'pos' by the exact number of characters it consumed.
+                // The translator is responsible for handling surrogate pairs if it translates them.
+                pos += consumed;
             }
-                }
-                pos--;
-            }
-            pos++;
+            // The problematic logic with `for (int pt...)`, `pos--`, and `pos++`
+            // has been removed as it was incorrect and led to off-by-one errors.
         }
     }
