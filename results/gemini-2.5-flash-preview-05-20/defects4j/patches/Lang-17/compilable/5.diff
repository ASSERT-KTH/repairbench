diff --git a/tmp/6cdee681-59af-4091-9be6-ba87ef13b5d5_buggy.java b/tmp/07f61319-ce71-4436-9b95-aded8968175a_fixed.java
index b86c1ea..272c6c5 100644
--- a/tmp/6cdee681-59af-4091-9be6-ba87ef13b5d5_buggy.java
+++ b/tmp/07f61319-ce71-4436-9b95-aded8968175a_fixed.java
@@ -1,38 +1,47 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        // The 'translate' abstract method takes a character index.
+        // Therefore, 'pos' must represent a character index into the input CharSequence.
+        // The loop should iterate over the character length of the input.
+        int len = input.length(); // Use character length, not code point count.
+
         while (pos < len) {
+            // Call the abstract translate method.
+            // 'translate(input, pos, out)' expects 'pos' to be a character index.
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                // If no specific translation occurred, write the current code point directly.
+                // We need to determine the code point at the current character position 'pos'
+                // to correctly handle both BMP characters and supplementary characters (surrogate pairs).
+                int codePoint = Character.codePointAt(input, pos);
+                char[] c = Character.toChars(codePoint);
                 out.write(c);
+                // Advance 'pos' by the number of characters that constitute this code point.
+                // For BMP characters, this is 1. For supplementary characters, this is 2.
+                pos += Character.charCount(codePoint);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
-                    }
-                }
-                pos--;
-            }
-            pos++;
+                // If the translator consumed characters, advance 'pos' by the number of
+                // characters it reported consuming.
+                pos += consumed;
+            }
+            // The original code had a 'pos++' here which was incorrect.
+            // 'pos' is already advanced correctly within the if/else block
+            // based on whether a translation occurred and how many characters were processed.
+            // Adding an extra 'pos++' would skip characters or misalign the processing.
         }
     }
\ No newline at end of file
