diff --git a/tmp/c36b3e04-3ad8-4d11-82af-3052d829e4ef_buggy.java b/tmp/c7cd9024-a0e2-410d-848e-e26a6a4112bd_fixed.java
index b86c1ea..efa8078 100644
--- a/tmp/c36b3e04-3ad8-4d11-82af-3052d829e4ef_buggy.java
+++ b/tmp/c7cd9024-a0e2-410d-848e-e26a6a4112bd_fixed.java
@@ -1,38 +1,34 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
+        int inputLen = input.length(); // Use character length for iteration
+        while (pos < inputLen) { // Iterate based on character index
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                // Translator didn't handle it, so write the current code point directly.
+                // Advance pos by the number of chars in this code point.
+                int codePoint = Character.codePointAt(input, pos);
+                out.write(Character.toChars(codePoint));
+                pos += Character.charCount(codePoint); // Correctly advance pos
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
+                // Translator handled 'consumed' characters.
+                // Advance pos by 'consumed'.
+                pos += consumed; // Correctly advance pos
             }
-                }
-                pos--;
-            }
-            pos++;
+            // Removed the problematic 'pos++;' from here, as 'pos' is now advanced within the if/else blocks.
         }
     }
\ No newline at end of file
