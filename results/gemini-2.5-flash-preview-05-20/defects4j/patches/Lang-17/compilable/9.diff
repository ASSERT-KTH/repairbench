diff --git a/tmp/c5d7f17b-54df-4fb4-92ec-7e2c646f70a1_buggy.java b/tmp/d6c87040-9dab-4607-8d05-c60774f44842_fixed.java
index b86c1ea..98f12fe 100644
--- a/tmp/c5d7f17b-54df-4fb4-92ec-7e2c646f70a1_buggy.java
+++ b/tmp/d6c87040-9dab-4607-8d05-c60774f44842_fixed.java
@@ -1,38 +1,36 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int pos = 0; // 'pos' is now consistently a character index
+        int len = input.length(); // 'len' is now consistently the total number of characters
         while (pos < len) {
+            // Get the code point at the current character position.
+            int codePoint = Character.codePointAt(input, pos);
+            
+            // Call the abstract translate method. This method receives the character index
+            // and is expected to return the number of *code points* it consumed.
+            // For typical CodePointTranslator implementations, this will be 0 or 1.
             int consumed = translate(input, pos, out); 
+            
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                // If the translator did not consume this code point, write it directly.
+                out.write(Character.toChars(codePoint));
             } 
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
-                    }
-                }
-                pos--;
-            }
-            pos++;
+            // In either case (consumed == 0 or consumed == 1), we have processed exactly one
+            // code point from the input starting at 'pos'. We must advance 'pos' by the
+            // number of characters that code point occupies (1 for BMP, 2 for supplementary).
+            pos += Character.charCount(codePoint);
         }
     }
