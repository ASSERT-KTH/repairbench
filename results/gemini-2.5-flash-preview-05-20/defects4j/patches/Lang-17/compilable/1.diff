diff --git a/tmp/6445448a-ad05-49bc-91df-b50ee3cd09f3_buggy.java b/tmp/e00e8dfd-fddb-4d79-95e2-639e7119a540_fixed.java
index b86c1ea..bd0efca 100644
--- a/tmp/6445448a-ad05-49bc-91df-b50ee3cd09f3_buggy.java
+++ b/tmp/e00e8dfd-fddb-4d79-95e2-639e7119a540_fixed.java
@@ -1,38 +1,44 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
+        int pos = 0; // 'pos' is a character index
+        int inputLen = input.length(); // Total number of characters in the input
+
+        while (pos < inputLen) {
+            // Call the abstract translate method, passing the current character index 'pos'
             int consumed = translate(input, pos, out);
+
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                // If the abstract translator did not consume any characters (i.e., it didn't handle the current code point),
+                // then we write the current code point as-is.
+                
+                // Get the code point at the current 'pos' (character index)
+                int codePoint = Character.codePointAt(input, pos);
+                
+                // Convert the code point back to a char array (handles surrogate pairs correctly)
+                char[] c = Character.toChars(codePoint);
+                
+                // Write the characters
                 out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                
+                // Advance 'pos' by the number of characters consumed for this code point (1 for BMP, 2 for supplementary)
+                pos += Character.charCount(codePoint);
             } else {
-                        pos++;
+                // If the abstract translator consumed characters, advance 'pos' by the number of characters it consumed.
+                // The 'consumed' value directly indicates how many characters from 'input' were processed.
+                pos += consumed;
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
\ No newline at end of file
