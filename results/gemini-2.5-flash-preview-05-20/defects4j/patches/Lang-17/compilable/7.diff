diff --git a/tmp/483c9207-2130-45f9-a609-cae23f2c04e2_buggy.java b/tmp/b6d9b171-635e-4e80-b40a-3d97e85d5748_fixed.java
index b86c1ea..18f7b89 100644
--- a/tmp/483c9207-2130-45f9-a609-cae23f2c04e2_buggy.java
+++ b/tmp/b6d9b171-635e-4e80-b40a-3d97e85d5748_fixed.java
@@ -1,38 +1,40 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
+        // Use character length for loop boundary, as 'pos' is a character index.
+        int inputLen = input.length(); 
+
+        while (pos < inputLen) {
+            // Call the abstract translate method to handle the current position
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                // If the abstract translator did not handle it (returned 0),
+                // then we handle it by writing the current code point directly.
+                int codePoint = Character.codePointAt(input, pos);
+                char[] chars = Character.toChars(codePoint);
+                out.write(chars);
+                // Advance position by the number of characters in this code point.
+                pos += Character.charCount(codePoint);
             } else {
-                        pos++;
+                // If the abstract translator handled it, 'consumed' indicates
+                // how many characters it processed from the input.
+                // Advance position by the number of characters consumed by the translator.
+                pos += consumed;
             }
-                }
-                pos--;
-            }
-            pos++;
+            // No global pos++ here, as pos is already advanced correctly
+            // within the if/else block based on the consumed characters.
         }
     }
\ No newline at end of file
