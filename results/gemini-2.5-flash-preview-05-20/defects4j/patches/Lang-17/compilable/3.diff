diff --git a/tmp/19a4041b-33ed-4b98-b7ae-0afced9221f0_buggy.java b/tmp/1d3d3cd5-164e-4625-ac79-601527dc4df5_fixed.java
index b86c1ea..584299d 100644
--- a/tmp/19a4041b-33ed-4b98-b7ae-0afced9221f0_buggy.java
+++ b/tmp/1d3d3cd5-164e-4625-ac79-601527dc4df5_fixed.java
@@ -1,38 +1,33 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int pos = 0; // This should be a character index
+        int len = input.length(); // This should be the total number of characters
         while (pos < len) {
+            // Call the abstract translate method, passing the current character index 'pos'.
+            // The abstract translate method is expected to return the number of characters consumed.
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                // If nothing was consumed by the translator, it means no specific translation
+                // for the current character(s) is needed. Write the current code point as-is.
+                int codePoint = Character.codePointAt(input, pos); // Get the code point at the current character position.
+                out.write(Character.toChars(codePoint)); // Write the character(s) corresponding to this code point.
+                pos += Character.charCount(codePoint); // Advance 'pos' by the number of characters consumed by this code point (1 for BMP, 2 for supplementary).
             } else {
-                        pos++;
+                // The translator consumed 'consumed' characters. Advance 'pos' by this amount.
+                pos += consumed;
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
\ No newline at end of file
