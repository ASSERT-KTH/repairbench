diff --git a/tmp/31df9d4a-d9d5-41d3-bdde-aab8f6ae1651_buggy.java b/tmp/5e6680a9-2eac-4770-984d-c95ab2de5954_fixed.java
index b86c1ea..72d69f1 100644
--- a/tmp/31df9d4a-d9d5-41d3-bdde-aab8f6ae1651_buggy.java
+++ b/tmp/5e6680a9-2eac-4770-984d-c95ab2de5954_fixed.java
@@ -1,38 +1,56 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        // The 'pos' variable is a character index within the CharSequence.
+        // Therefore, 'len' should represent the total number of characters in the input.
+        // The original code used Character.codePointCount, which calculates code points,
+        // leading to incorrect loop termination and index calculations.
+        int len = input.length();
         while (pos < len) {
+            // Attempt to translate the character sequence starting at 'pos'.
+            // The 'translate' abstract method (implemented by subclasses) is expected to
+            // write the translated output to 'out' and return the number of characters
+            // consumed from the input 'CharSequence'.
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                // If 'translate' did not consume any characters (i.e., no special translation
+                // was performed for the current characters), then write the code point
+                // at the current position directly to the output.
+                
+                // Get the code point at the current character index. This correctly handles
+                // both BMP characters (1 char) and surrogate pairs (2 chars).
+                int codePoint = Character.codePointAt(input, pos);
+                // Convert the code point back to a char array for writing.
+                char[] c = Character.toChars(codePoint);
                 out.write(c);
+                // Advance 'pos' by the number of characters this code point occupies.
+                // This ensures that 'pos' correctly skips past the character(s) just written.
+                pos += Character.charCount(codePoint);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
-                    }
-                }
-                pos--;
-            }
-            pos++;
+                // If 'translate' consumed characters (i.e., 'consumed' > 0),
+                // it means the translator handled the characters starting at 'pos'
+                // and wrote its own output.
+                // We simply need to advance 'pos' by the number of characters
+                // that the translator reported it consumed.
+                pos += consumed;
+            }
+            // There should be no additional 'pos++' here. The 'pos' variable is
+            // correctly advanced within the if/else block based on whether a translation
+            // occurred and how many characters were processed. An extra increment
+            // would lead to skipping characters or incorrect indexing.
         }
     }
\ No newline at end of file
