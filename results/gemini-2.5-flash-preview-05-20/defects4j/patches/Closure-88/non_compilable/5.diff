diff --git a/tmp/d8b147eb-2c7b-4274-bebc-9626c557a043_buggy.java b/tmp/798b29ad-b4ba-471b-94f8-49678ed16e52_fixed.java
index 9353941..4798be6 100644
--- a/tmp/d8b147eb-2c7b-4274-bebc-9626c557a043_buggy.java
+++ b/tmp/798b29ad-b4ba-471b-94f8-49678ed16e52_fixed.java
@@ -1,30 +1,76 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
+    // Base Case 1: 'n' is the variable name node itself.
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      Node parent = n.getParent();
+      if (NodeUtil.isLhs(n, parent)) {
+        if (parent.isAssign()) {
+          // If 'n' is the LHS of an ASSIGNment (e.g., `x = 5`),
+          // the assignment to 'n' happens AFTER its RHS is evaluated.
+          // So, this LHS reference itself is not yet an effective KILL for the purpose of
+          // finding the *first* reference in evaluation order.
+          // We return MAYBE_LIVE and defer the KILL decision to the parent ASSIGN node
+          // after it checks its RHS.
+          return VariableLiveness.MAYBE_LIVE;
+        } else {
+          // If 'n' is the LHS of a VAR declaration, FOR_IN, or FOR_OF (e.g., `var x;`, `for(x in y)`),
+          // these are definitive KILLs for the variable, and no RHS in the same expression
+          // takes precedence over this KILL for the purpose of finding the *first* reference.
           return VariableLiveness.KILL;
+        }
       } else {
+        // If 'n' is not an LHS, it's a plain reference/read. This is the first reference.
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Special handling for assignment nodes.
+    // For an assignment `LHS = RHS`:
+    // Evaluation order: evaluate sub-expressions in LHS (if any), then evaluate RHS, then perform assignment.
+    // If the variable is read in RHS, that's a READ before the KILL.
+    if (n.isAssign()) {
+      Node lhs = n.getFirstChild();
+      Node rhs = n.getLastChild();
+
+      // Check RHS for READ/KILL first, as it's evaluated before the assignment to LHS occurs.
+      VariableLiveness stateRhs = isVariableReadBeforeKill(rhs, variable);
+      if (stateRhs != VariableLiveness.MAYBE_LIVE) {
+        return stateRhs; // If a READ or KILL is found in the RHS, that's the first reference.
+      }
+
+      // If no READ/KILL was found in the RHS, check if the LHS itself is the variable being assigned to.
+      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+         // If we are here, it means:
+         // 1. `n` is an ASSIGN node.
+         // 2. `lhs` is the variable we are tracking (`x`).
+         // 3. `stateRhs` was MAYBE_LIVE (no READ/KILL in RHS).
+         // Therefore, the assignment *to* `x` is the first reference encountered in this subtree.
+         return VariableLiveness.KILL;
+      }
+
+      // If LHS is not the variable name itself (e.g., `obj[x] = 1`),
+      // any references to the variable within the LHS expression (e.g., `x` in `obj[x]`)
+      // will be handled by the general traversal that follows.
+      return VariableLiveness.MAYBE_LIVE;
+    }
+
+    // General case: Traverse children left-right, depth first.
+    // This handles all other node types (e.g., ADD, CALL, AND, OR)
+    // and also sub-expressions within LHS/RHS of assignments if they are not the
+    // direct variable name being assigned to.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Don't descend into functions (new CFG node)
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+          return state; // First READ or KILL found in left-to-right order.
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
