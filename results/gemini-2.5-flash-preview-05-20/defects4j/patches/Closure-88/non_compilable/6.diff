diff --git a/tmp/9e9fcae2-9de2-46f1-a2fa-ea9c412a3d56_buggy.java b/tmp/f6fe1e95-1b69-4dff-a8ac-58869b4588e9_fixed.java
index 9353941..a215263 100644
--- a/tmp/9e9fcae2-9de2-46f1-a2fa-ea9c412a3d56_buggy.java
+++ b/tmp/f6fe1e95-1b69-4dff-a8ac-58869b4588e9_fixed.java
@@ -1,30 +1,70 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+
+    // Special handling for assignment operator: RHS and complex LHS components
+    // are evaluated before the actual assignment to the LHS target occurs.
+    if (n.isAssign()) {
+      Node lhs = n.getFirstChild();
+      Node rhs = n.getLastChild();
+
+      // 1. Check the RHS first, as it's evaluated before the LHS is assigned.
+      VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state;
+      }
+
+      // 2. Check for references within the LHS expression (e.g., 'a' in 'a.b = c').
+      // These are evaluated before the final assignment to the LHS.
+      state = isVariableReadBeforeKill(lhs, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state; // Found a READ (e.g., 'a' in 'a.b = c') or a KILL (e.g., '(x=1).b = c')
+      }
+
+      // 3. If no READs or nested KILLs were found in RHS or complex LHS parts,
+      // and the LHS itself is the variable name, then this assignment is the
+      // first KILL of the variable.
+      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
         return VariableLiveness.KILL;
+      }
+
+      // If no reference was found within this assignment node, it's MAYBE_LIVE.
+      return VariableLiveness.MAYBE_LIVE;
+
     } else {
-        return VariableLiveness.READ;
-      }
-    }
-
-    // Expressions are evaluated left-right, depth first.
+      // General case: iterate children left-to-right, depth-first.
+      // This applies to all nodes that are not ASSIGN and also
+      // to recursive calls on child nodes (which might then hit the 'isName' base case).
       for (Node child = n.getFirstChild();
           child != null; child = child.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
           VariableLiveness state = isVariableReadBeforeKill(child, variable);
           if (state != VariableLiveness.MAYBE_LIVE) {
             return state;
           }
         }
       }
+    }
+
+    // Base case: if 'n' is the variable name itself.
+    // If 'n' is the LHS of an assignment, its 'KILL' effect is determined by
+    // the 'isAssign()' block above. So, if we reach this point and 'n' is
+    // the variable name, it must be a READ.
+    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+      // If it's an LHS, it would have been handled by the parent ASSIGN node.
+      // If it's not an LHS (or is an LHS but not handled as the direct assignment target),
+      // then it's a READ.
+      if (!NodeUtil.isLhs(n, n.getParent())) { // Check if it's explicitly not an LHS
+        return VariableLiveness.READ;
+      }
+      // If it is an LHS but the parent ASSIGN logic didn't return a KILL,
+      // it means it's a complex LHS (e.g., `a.b=c`) or no reference was found.
+      // In this specific scenario, it's MAYBE_LIVE from this point.
+    }
+
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
