diff --git a/tmp/9a849f73-409a-47ac-8eec-9b5b9f0eb549_buggy.java b/tmp/139eb675-8e4c-4401-a3bb-10821eac12d6_fixed.java
index 9353941..f1fb05b 100644
--- a/tmp/9a849f73-409a-47ac-8eec-9b5b9f0eb549_buggy.java
+++ b/tmp/139eb675-8e4c-4401-a3bb-10821eac12d6_fixed.java
@@ -1,30 +1,71 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
+    // Base case: If the current node 'n' is the variable we are looking for.
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+      // If it's on the LHS of an assignment, it's a KILL.
+      // The comment below explains the evaluation order for assignments.
+      // This base case will correctly identify the KILL if reached,
+      // but the special handling for ASSIGN nodes below ensures RHS is checked first.
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Special handling for ASSIGN nodes:
+    // The expression to which the assignment is made (LHS) is evaluated,
+    // then the RHS is evaluated, and finally the assignment (KILL) occurs.
+    // If the variable being assigned to is also referenced on the RHS
+    // (e.g., `x = x + 1`), the read on the RHS happens before the KILL.
+    // Therefore, for an ASSIGN node, we must check the RHS first.
+    if (n.isAssign()) {
+      Node lhs = n.getFirstChild();
+      Node rhs = n.getLastChild();
+
+      // 1. Check RHS first for any read/kill of the variable.
+      VariableLiveness stateRhs = isVariableReadBeforeKill(rhs, variable);
+      if (stateRhs != VariableLiveness.MAYBE_LIVE) {
+        // If a READ or KILL is found in the RHS, that's the first reference.
+        return stateRhs;
+      }
+
+      // 2. If no READ/KILL in RHS, check LHS.
+      // The LHS might contain a read (e.g., `arr[x] = value;` where 'x' is the variable)
+      // or the LHS itself might be the variable being killed (`x = value;`).
+      VariableLiveness stateLhs = isVariableReadBeforeKill(lhs, variable);
+      if (stateLhs != VariableLiveness.MAYBE_LIVE) {
+        // If a READ is found (e.g., in `arr[x]`), or if the LHS itself is the
+        // variable and it's identified as a KILL by the base case, this is
+        // the first reference.
+        return stateLhs;
+      }
+      // If neither RHS nor LHS (excluding the direct KILL of the variable itself,
+      // which would be caught by stateLhs if lhs is the variable) found anything,
+      // then the variable is MAYBE_LIVE within this assignment's subtree.
+      return VariableLiveness.MAYBE_LIVE;
+    }
+
+    // For all other node types (non-variable name, non-assignment),
+    // expressions are evaluated left-to-right, depth-first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      // We don't enter new control flow graph nodes (like function declarations
+      // or function expressions that define a new scope for liveness analysis).
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // If a READ or KILL is found in any child, return it immediately
+          // as it's the "first reference" according to the left-to-right, depth-first order.
           return state;
         }
       }
     }
+    // If no READ or KILL is found in this subtree, the variable MAYBE_LIVE.
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
