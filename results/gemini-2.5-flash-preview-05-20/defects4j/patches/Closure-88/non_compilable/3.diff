diff --git a/tmp/2ba3d67d-b22d-408c-8211-8df90005de46_buggy.java b/tmp/adb66105-3245-46b0-8af7-43325ad9dff7_fixed.java
index 9353941..d15ae13 100644
--- a/tmp/2ba3d67d-b22d-408c-8211-8df90005de46_buggy.java
+++ b/tmp/adb66105-3245-46b0-8af7-43325ad9dff7_fixed.java
@@ -1,30 +1,42 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        // If the variable is read on the RHS of this assignment, that read
+        // happens before the KILL of the LHS.
+        Node parent = n.getParent();
+        if (parent != null && parent.isAssign()) {
+          Node rhs = parent.getLastChild();
+          // Recursively check the RHS. If the variable is read here,
+          // that read happens before the assignment to 'n' (the LHS) completes.
+          VariableLiveness stateInRhs = isVariableReadBeforeKill(rhs, variable);
+          if (stateInRhs == VariableLiveness.READ) {
+            return VariableLiveness.READ; // Variable is read on RHS before this LHS is killed.
+          }
+        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
