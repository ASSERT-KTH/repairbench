diff --git a/tmp/c077738a-27ab-4fbf-b0de-a2930ad9874f_buggy.java b/tmp/e7402371-a23d-4497-a199-7970e6eb7bd5_fixed.java
index 9353941..262b8b4 100644
--- a/tmp/c077738a-27ab-4fbf-b0de-a2930ad9874f_buggy.java
+++ b/tmp/e7402371-a23d-4497-a199-7970e6eb7bd5_fixed.java
@@ -1,30 +1,66 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
+
+    // Special handling for assignment nodes (e.g., `x = y`).
+    // The RHS (`y`) is evaluated before the LHS (`x`) is assigned/killed.
+    if (n.isAssign()) {
+      Node rhs = n.getLastChild();
+      VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        // Found a read or kill in the RHS, which occurs first.
+        return state;
+      }
+
+      // If no reference was found in the RHS, then check the LHS.
+      // If the LHS is the variable we are looking for, the assignment itself
+      // is a "kill" for the variable. This is the first reference if it
+      // wasn't present in the RHS.
+      Node lhs = n.getFirstChild();
+      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+        return VariableLiveness.KILL;
+      }
+      // If the variable was not found in RHS, and the LHS is not the variable itself,
+      // then the variable's first reference is not within this assignment node.
+      return VariableLiveness.MAYBE_LIVE;
+    }
+
+    // Check if `n` itself is the variable in question.
+    // This handles direct variable references that are not the `ASSIGN` operator node itself.
+    // Examples: `x` in `x + 1`, `x` in `x++`, `x` in `x += 1`, or `x` as the LHS
+    // when `n` is the `NAME` node child of an `ASSIGN` node.
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+      // If `n` is the LHS of any assignment-like operation (e.g., `x = 1`, `x++`, `x += 1`),
+      // this represents a "kill" for the variable.
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
+        // Otherwise, it's a read.
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // For other node types, evaluate children in left-to-right, depth-first order,
+    // as is standard for most expression evaluations.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      // Avoid recursing into new control flow graph nodes (e.g., function expressions)
+      // as they define their own scope and analysis boundaries.
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // If a read or kill was found in a child, return it immediately
+          // as it's the first reference in evaluation order.
           return state;
         }
       }
     }
+
+    // If no read or kill was found within `n` itself or any of its children,
+    // the variable may still be live, but its first reference is not within this expression subtree.
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
