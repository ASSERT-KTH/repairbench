diff --git a/tmp/75020dcf-9cba-47dc-94dd-4858457239b0_buggy.java b/tmp/60fa7656-9488-41a0-b9f1-9af34235c528_fixed.java
index 9353941..e0f4b1f 100644
--- a/tmp/75020dcf-9cba-47dc-94dd-4858457239b0_buggy.java
+++ b/tmp/60fa7656-9488-41a0-b9f1-9af34235c528_fixed.java
@@ -1,30 +1,62 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
+
+    // Special handling for assignment nodes where the LHS is the variable.
+    // This must be checked first to correctly prioritize RHS evaluation.
+    if (n.isAssign()) {
+        Node lhs = n.getFirstChild();
+        // Check if the LHS of this assignment is the variable we are tracking.
+        if (lhs != null && lhs.isName() && variable.equals(lhs.getString())) {
+            Node rhs = n.getLastChild();
+            // Evaluate the RHS first for any references to the variable.
+            VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+
+            // If a READ or KILL is found in the RHS, that takes precedence.
+            if (rhsState != VariableLiveness.MAYBE_LIVE) {
+                return rhsState;
+            }
+            // If RHS is MAYBE_LIVE, then the assignment to 'lhs' is the first relevant event.
+            // This constitutes a KILL.
+            return VariableLiveness.KILL;
+        }
+        // If this is an assignment node but its LHS is not the tracked variable,
+        // it falls through to the general child traversal.
+    }
+
+    // If n is the variable name itself.
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
-        return VariableLiveness.KILL;
+        // If 'n' is the variable and it's on the LHS of an assignment,
+        // its KILL effect happens after the RHS is evaluated.
+        // Thus, if we encounter 'n' itself (the LHS name node), it's not a direct READ
+        // and its KILL is considered later via the parent ASSIGN node.
+        // So, for this specific node, it's MAYBE_LIVE to allow checking of subsequent nodes (RHS).
+        return VariableLiveness.MAYBE_LIVE;
       } else {
+        // 'n' is the variable and it's NOT an LHS. This is a direct READ.
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
+    // Iterate children, stopping at the first READ or KILL found.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      // Don't descend into new control flow graph nodes (e.g., functions),
+      // as their inner variables are not relevant for this scope.
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+          return state; // Found a READ or KILL, return it immediately.
         }
       }
     }
+
+    // If no READ or KILL was found in the current node or its children, it's MAYBE_LIVE.
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
