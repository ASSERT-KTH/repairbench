diff --git a/tmp/bf669af9-1036-4b5b-88b8-91a74bd949ba_buggy.java b/tmp/3234e706-c200-4c6b-abe5-99b47c3ddea3_fixed.java
index 9353941..e99bada 100644
--- a/tmp/bf669af9-1036-4b5b-88b8-91a74bd949ba_buggy.java
+++ b/tmp/3234e706-c200-4c6b-abe5-99b47c3ddea3_fixed.java
@@ -1,30 +1,69 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
-        return VariableLiveness.KILL;
+        // If 'n' is the LHS of an assignment, its 'KILL' effect happens last.
+        // Therefore, if a READ occurs in the RHS, that READ is "first".
+        // We return MAYBE_LIVE here to allow the parent ASSIGN node
+        // to check its RHS first. The ASSIGN node will then return KILL
+        // if no READ/KILL was found in the RHS.
+        return VariableLiveness.MAYBE_LIVE;
       } else {
+        // This is a direct read of the variable, and it's not an LHS.
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Special handling for ASSIGN nodes to correctly reflect evaluation order.
+    // The RHS is evaluated before the LHS is assigned (killed).
+    if (n.isAssign()) {
+        Node rhs = n.getLastChild(); // RHS is evaluated first
+        if (!ControlFlowGraph.isEnteringNewCfgNode(rhs)) {
+            VariableLiveness stateRhs = isVariableReadBeforeKill(rhs, variable);
+            if (stateRhs != VariableLiveness.MAYBE_LIVE) {
+                return stateRhs; // A READ or KILL was found in the RHS, which happens first.
+            }
+        }
+
+        // If no READ/KILL was found in the RHS, check the LHS.
+        // If the LHS is the variable itself, and RHS didn't contain any reference,
+        // then this assignment is the first reference (a KILL).
+        Node lhs = n.getFirstChild();
+        if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+            // This is the variable on the LHS. Since the RHS didn't contain
+            // a READ or KILL, this assignment is the first relevant reference.
+            return VariableLiveness.KILL;
+        }
+
+        // If the LHS is a complex expression (e.g., obj.prop = val), we need to
+        // recursively check within the LHS expression for references to 'variable'
+        // (e.g., if 'variable' is 'obj'). These reads happen before the final assignment.
+        if (!ControlFlowGraph.isEnteringNewCfgNode(lhs)) {
+            VariableLiveness stateLhs = isVariableReadBeforeKill(lhs, variable);
+            if (stateLhs != VariableLiveness.MAYBE_LIVE) {
+                return stateLhs;
+            }
+        }
+        return VariableLiveness.MAYBE_LIVE; // No reference found in RHS or LHS.
+    }
+
+    // For all other node types, expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
