diff --git a/tmp/22d646c7-a724-4150-bcde-53f61c49368a_buggy.java b/tmp/ec7b73ff-f032-4b05-b53a-1f08e8b875e9_fixed.java
index 9353941..f1b92d1 100644
--- a/tmp/22d646c7-a724-4150-bcde-53f61c49368a_buggy.java
+++ b/tmp/ec7b73ff-f032-4b05-b53a-1f08e8b875e9_fixed.java
@@ -1,30 +1,61 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        // This 'KILL' will be considered the first reference if no READ is found in the RHS.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Special handling for ASSIGN nodes: The RHS is evaluated before the assignment
+    // to the LHS actually takes place. So, we must process the RHS first.
+    if (n.isAssign()) {
+      Node lhs = n.getFirstChild();
+      Node rhs = n.getLastChild();
+
+      // 1. Check the RHS first for any reads or kills of the variable.
+      VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state; // If found in RHS, it's the first reference.
+      }
+
+      // 2. If the variable was not found in the RHS, then check the LHS.
+      // This handles cases like `a[x] = ...` where 'x' is read in the LHS expression.
+      // If `lhs` is the variable name itself (e.g., `x = ...`), the recursive call
+      // will hit the base case (`NodeUtil.isName(n)` and `NodeUtil.isLhs(n, n.getParent())`)
+      // and correctly return `KILL` as the first reference.
+      state = isVariableReadBeforeKill(lhs, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state;
+      }
+      // If neither RHS nor LHS determined liveness, it's MAYBE_LIVE within this assignment node.
+      return VariableLiveness.MAYBE_LIVE;
+    }
+
+    // For all other node types (or if n.isAssign() was false),
+    // expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      // ControlFlowGraph.isEnteringNewCfgNode checks if the child
+      // node creates a new control flow graph node (like a function).
+      // We don't analyze into function bodies for this specific check,
+      // as they have their own variable scopes and liveness.
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
