diff --git a/tmp/d354ea38-0058-4b32-a8e2-9b62bc883434_buggy.java b/tmp/dd1d8b06-3630-46ba-9816-b3882bebd619_fixed.java
index 9353941..0f4d597 100644
--- a/tmp/d354ea38-0058-4b32-a8e2-9b62bc883434_buggy.java
+++ b/tmp/dd1d8b06-3630-46ba-9816-b3882bebd619_fixed.java
@@ -1,30 +1,44 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+      // If 'n' is the LHS of an assignment, the KILL occurs after the RHS is evaluated.
+      // So, if we find 'n' as an LHS, we don't immediately return KILL here.
+      // Instead, we return MAYBE_LIVE to allow the traversal to check the RHS first.
+      // The KILL status will be determined by the parent ASSIGN node (if 'n' is its LHS)
+      // after checking its children.
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
-        return VariableLiveness.KILL;
+        return VariableLiveness.MAYBE_LIVE;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+          return state; // Found a READ or KILL in a child, propagate it.
         }
       }
     }
+
+    // If we've traversed all children and found no READ or KILL,
+    // and if 'n' is an ASSIGN node whose LHS is the variable, then this
+    // assignment is the first reference and constitutes a KILL.
+    // This handles cases like `x = 1`, where 'x' is not read in '1'.
+    if (n.isAssign()) {
+      Node lhs = n.getFirstChild();
+      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+        return VariableLiveness.KILL;
+      }
+    }
+    
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
