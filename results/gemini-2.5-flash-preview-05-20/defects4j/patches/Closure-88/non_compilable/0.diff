diff --git a/tmp/95ce29e4-eed8-420e-aefb-bda2b84fc767_buggy.java b/tmp/f0ee4017-fbfe-4cdd-898a-9d248993d9aa_fixed.java
index 9353941..964c5c6 100644
--- a/tmp/95ce29e4-eed8-420e-aefb-bda2b84fc767_buggy.java
+++ b/tmp/f0ee4017-fbfe-4cdd-898a-9d248993d9aa_fixed.java
@@ -1,30 +1,61 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
+    // Case 1: n is the variable name itself.
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+      // If this name node is the left-hand side of an assignment, it signifies a KILL.
+      // This KILL occurs *after* the RHS is evaluated. The handling for ASSIGN nodes
+      // below will ensure correct evaluation order for the overall assignment expression.
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
-        return VariableLiveness.READ;
+        return VariableLiveness.READ; // Otherwise, it's a read.
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Case 2: n is an ASSIGN node.
+    // For an assignment `lhs = rhs`, the `rhs` is evaluated before the assignment occurs.
+    if (n.isAssign()) {
+      // Evaluate the right-hand side first.
+      Node rhs = n.getLastChild();
+      VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        // If the variable is read or killed in the RHS, that's the first reference
+        // in this assignment expression.
+        return state;
+      }
+      // If the variable is not found in the RHS, then the assignment to the LHS
+      // is the first reference for this expression. This is a KILL, but only if
+      // the LHS is indeed the variable we are tracking.
+      Node lhs = n.getFirstChild();
+      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+        return VariableLiveness.KILL;
+      }
+      // If the LHS is not the variable, and RHS was MAYBE_LIVE, then the variable is MAYBE_LIVE
+      // within this assignment expression.
+      return VariableLiveness.MAYBE_LIVE;
+    }
+
+    // Case 3: General expression (not the variable name, not an ASSIGN node).
+    // Expressions are evaluated left-right, depth-first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      // Don't recurse into FUNCTION nodes or similar control flow boundaries,
+      // as they introduce new scopes or change control flow, handled by other analyses.
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // If a reference (READ or KILL) is found in a child, return it immediately
+          // as it's the "first" in evaluation order.
           return state;
         }
       }
     }
+
+    // Case 4: No reference found in this subtree.
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
