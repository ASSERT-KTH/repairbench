diff --git a/tmp/617ab889-0b99-4045-a493-44a4c4cff2dc_buggy.java b/tmp/de38b06e-b492-4c93-b6eb-a45f045c7970_fixed.java
index 25217b6..d31a92d 100644
--- a/tmp/617ab889-0b99-4045-a493-44a4c4cff2dc_buggy.java
+++ b/tmp/de38b06e-b492-4c93-b6eb-a45f045c7970_fixed.java
@@ -1,14 +1,40 @@
     /**
      Set the attribute value.
      @param val the new attribute value; must not be null
      */
     public String setValue(String val) {
-        String oldVal = parent.get(this.key);
+        String oldVal;
+
+        // Check if this attribute is part of a parent Attributes collection.
         if (parent != null) {
+            // If a parent exists, retrieve the old value from the parent's collection.
+            // The `parent.get(this.key)` method in Jsoup's Attributes class is guaranteed
+            // to return a non-null String (either the actual value or an empty string "" if not found).
+            oldVal = parent.get(this.key);
+
+            // Find the index of this attribute's key within the parent's internal array.
             int i = parent.indexOfKey(this.key);
-            if (i != Attributes.NotFound)
+            // If the key is found in the parent, update its corresponding value in the parent's array.
+            if (i != Attributes.NotFound) {
                 parent.vals[i] = val;
             }
+        } else {
+            // If there is no parent (this is an orphan attribute), the old value
+            // is simply the current value stored within this Attribute object.
+            oldVal = this.val;
+            // Jsoup's `Attributes.checkNotNull` (used in the return statement) performs a `Validate.notNull` check.
+            // This means the returned old value must not be null.
+            // To ensure consistency with how `parent.get()` behaves (always returning non-null)
+            // and to prevent an IllegalArgumentException if `this.val` was null,
+            // we convert a null old value to an empty string.
+            if (oldVal == null) {
+                oldVal = "";
+            }
+        }
+
+        // Update the value of this Attribute object itself.
         this.val = val;
+
+        // Return the captured old value. Attributes.checkNotNull ensures it's non-null.
         return Attributes.checkNotNull(oldVal);
     }
\ No newline at end of file
