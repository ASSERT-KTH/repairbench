diff --git a/tmp/1c6e88ba-ff1a-4aa3-97f7-29f7e044bb30_buggy.java b/tmp/94b86118-8ce3-4a29-ac2d-9b7e5f9c6cba_fixed.java
index 114ff20..7790bc8 100644
--- a/tmp/1c6e88ba-ff1a-4aa3-97f7-29f7e044bb30_buggy.java
+++ b/tmp/94b86118-8ce3-4a29-ac2d-9b7e5f9c6cba_fixed.java
@@ -1,41 +1,45 @@
     /**
      * Returns a (possibly empty) collection of legend items for the series
      * that this renderer is responsible for drawing.
      *
      * @return The legend item collection (never <code>null</code>).
      *
      * @see #getLegendItem(int, int)
      */
     public LegendItemCollection getLegendItems() {
         LegendItemCollection result = new LegendItemCollection();
         if (this.plot == null) {
             return result;
         }
         int index = this.plot.getIndexOf(this);
         CategoryDataset dataset = this.plot.getDataset(index);
-        if (dataset != null) {
+        // Original code: if (dataset != null) { return result; }
+        // This was a bug: if a dataset exists, it should process it, not return an empty result.
+        // It also caused a NullPointerException if dataset was null, as the next line
+        // 'dataset.getRowCount()' would be called.
+        if (dataset == null) { // Fix: If dataset is NULL, return an empty result.
             return result;
         }
         int seriesCount = dataset.getRowCount();
         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {
             for (int i = 0; i < seriesCount; i++) {
                 if (isSeriesVisibleInLegend(i)) {
                     LegendItem item = getLegendItem(index, i);
                     if (item != null) {
                         result.add(item);
                     }
                 }
             }
         }
         else {
             for (int i = seriesCount - 1; i >= 0; i--) {
                 if (isSeriesVisibleInLegend(i)) {
                     LegendItem item = getLegendItem(index, i);
                     if (item != null) {
                         result.add(item);
                     }
                 }
             }
         }
         return result;
     }
\ No newline at end of file
