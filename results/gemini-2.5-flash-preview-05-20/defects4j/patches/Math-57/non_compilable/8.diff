diff --git a/tmp/c3969fd2-d950-4e00-8655-cec03786779f_buggy.java b/tmp/9c0c97b8-cc2a-4e49-95b7-337023f5786b_fixed.java
index ad4b0d8..268f11d 100644
--- a/tmp/c3969fd2-d950-4e00-8655-cec03786779f_buggy.java
+++ b/tmp/9c0c97b8-cc2a-4e49-95b7-337023f5786b_fixed.java
@@ -1,47 +1,90 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
+        // Handle edge cases for input k or points.
+        // If k is 0 or less, no clusters are needed.
+        // If points is empty, no centers can be chosen.
+        if (k <= 0 || points.isEmpty()) {
+            return resultSet;
+        }
+
         // Choose one center uniformly at random from among the data points.
+        // pointSet.size() > 0 guaranteed by points.isEmpty() check above.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
+            // If there are no more points to choose from, break the loop.
+            // This can happen if k is greater than the number of unique points
+            // in the original collection.
+            if (pointSet.isEmpty()) {
+                break;
+            }
+
+            // For each data point x in the remaining pointSet, compute D(x)^2,
+            // the squared distance between x and the nearest center that has already been chosen.
+            // Store cumulative sums for roulette wheel selection.
+            // This list must be re-populated in each iteration for the current pointSet.
+            List<Double> dx2CumulativeSums = new ArrayList<>(pointSet.size());
+            double sumOfDx2 = 0.0; // Use double for sum of squared distances
+
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
+                // getNearestCluster is an assumed helper function not part of the bug fix.
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                sumOfDx2 += d * d; // Accumulate total sum of squared distances
+                dx2CumulativeSums.add(sumOfDx2); // Store cumulative sum for point at index i
+            }
+
+            // If the sum of squared distances is zero, it means all remaining points
+            // are duplicates of existing centers. In this case, select a random point
+            // from the remaining pointSet to continue adding centers until k is reached.
+            if (sumOfDx2 == 0.0) {
+                 final T p = pointSet.remove(random.nextInt(pointSet.size()));
+                 resultSet.add(new Cluster<T>(p));
+                 continue; // Proceed to the next iteration to check size or find next center
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+            // probability proportional to D(x)^2.
+            final double r = random.nextDouble() * sumOfDx2; // random value in [0.0, sumOfDx2)
+
+            int chosenIndex = -1;
+            // Find the first point whose cumulative sum of D(x)^2 is strictly greater than r.
+            // This ensures that points with D(x)^2 = 0 are not chosen unless r is also 0
+            // AND there are no points with D(x)^2 > 0 (handled by sumOfDx2 == 0.0 case).
+            // If r is 0, this loop will pick the first point with a non-zero D(x)^2.
+            for (int i = 0 ; i < dx2CumulativeSums.size(); i++) {
+                if (dx2CumulativeSums.get(i) > r) { // Changed from >= to > for correct probability selection
+                    chosenIndex = i;
                     break;
                 }
             }
+
+            // Fallback for floating-point precision issues or if r is exactly sumOfDx2 - epsilon.
+            // In theory, chosenIndex should always be found if sumOfDx2 > 0.
+            if (chosenIndex == -1) {
+                // This means r was effectively >= sumOfDx2 (due to precision). Pick the last point.
+                chosenIndex = dx2CumulativeSums.size() - 1;
+            }
+
+            // Remove the chosen point from the candidate set and add it as a new center.
+            final T p = pointSet.remove(chosenIndex);
+            resultSet.add(new Cluster<T>(p));
         }
 
         return resultSet;
-
     }
\ No newline at end of file
