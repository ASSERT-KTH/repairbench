diff --git a/tmp/e80c23ed-361b-4c0b-b51b-b6ba09bb2dcd_buggy.java b/tmp/d16b6881-f41c-43d6-af61-fefa7de40ca4_fixed.java
index ad4b0d8..2aabfe3 100644
--- a/tmp/e80c23ed-361b-4c0b-b51b-b6ba09bb2dcd_buggy.java
+++ b/tmp/d16b6881-f41c-43d6-af61-fefa7de40ca4_fixed.java
@@ -1,47 +1,57 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+        // The dx2 array should be re-calculated and re-sized in each iteration of the while loop
+        // because the pointSet shrinks and the distances to centers change.
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+
+            // BUG FIX 1: 'sum' must be a double to avoid truncation of d*d,
+            // especially for small squared distances (< 1.0).
+            double sum = 0;
+            // BUG FIX 2: dx2 array must be re-initialized for the current size of pointSet.
+            // If declared outside, its length becomes stale as pointSet shrinks,
+            // potentially leading to IndexOutOfBoundsException or incorrect behavior.
+            final double[] dx2 = new double[pointSet.size()];
+
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
                 sum += d * d;
-                dx2[i] = sum;
+                dx2[i] = sum; // Stores cumulative sum of squared distances
             }
 
             // Add one new data point as a center. Each point x is chosen with
             // probability proportional to D(x)2
             final double r = random.nextDouble() * sum;
             for (int i = 0 ; i < dx2.length; i++) {
                 if (dx2[i] >= r) {
+                    // Remove the chosen point from the pointSet
                     final T p = pointSet.remove(i);
                     resultSet.add(new Cluster<T>(p));
-                    break;
+                    break; // Only one point is chosen per iteration
                 }
             }
         }
 
         return resultSet;
 
     }
\ No newline at end of file
