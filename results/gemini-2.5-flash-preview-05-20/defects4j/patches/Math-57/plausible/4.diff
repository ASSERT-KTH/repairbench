diff --git a/tmp/f9cc9523-0e77-4951-b427-1a5ab245dada_buggy.java b/tmp/1a6ea5ca-93f4-4ab7-bd6f-fac63a807dad_fixed.java
index ad4b0d8..efa38b4 100644
--- a/tmp/f9cc9523-0e77-4951-b427-1a5ab245dada_buggy.java
+++ b/tmp/1a6ea5ca-93f4-4ab7-bd6f-fac63a807dad_fixed.java
@@ -1,47 +1,90 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
+        // Handle empty input gracefully. If k > 0 and points is empty, no centers can be chosen.
+        if (pointSet.isEmpty()) {
+            return resultSet;
+        }
+
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            // Bug fix 1: 'sum' must be a double to avoid precision loss from d*d.
+            double sum = 0.0;
+            // Bug fix 2: 'dx2' array must be re-initialized in each iteration
+            // to reflect the current size of 'pointSet' after removals.
+            final double[] dx2 = new double[pointSet.size()];
+
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
                 sum += d * d;
                 dx2[i] = sum;
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+            // probability proportional to D(x)^2.
+            if (sum == 0.0) {
+                // All remaining points are at 0 distance from existing clusters.
+                // This means they are effectively duplicates of existing centers or
+                // already covered. We can just pick the next available point.
+                if (!pointSet.isEmpty()) {
+                    final T p = pointSet.remove(0); // Pick the first remaining point
+                    resultSet.add(new Cluster<T>(p));
+                } else {
+                    // No more points to choose from, even if k centers haven't been selected.
+                    // This can happen if k is larger than the number of unique points available.
+                    break;
+                }
+            } else {
                 final double r = random.nextDouble() * sum;
+                int chosenIdx = -1;
+
+                // Bug fix 3: Handle the edge case where random.nextDouble() returns 0.0.
+                // If r is 0.0 and sum > 0, we must select a point that has a non-zero D(x)^2.
+                // The standard 'dx2[i] >= r' would incorrectly pick the first point if dx2[0] is 0.0.
+                if (r == 0.0) {
+                    // Find the first point that actually contributed to the sum (i.e., has D(x)^2 > 0).
+                    for (int i = 0 ; i < dx2.length; i++) {
+                        if (dx2[i] > 0.0) {
+                            chosenIdx = i;
+                            break;
+                        }
+                    }
+                } else {
+                    // Normal case: find the first index where the cumulative sum >= r.
                     for (int i = 0 ; i < dx2.length; i++) {
                         if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+                            chosenIdx = i;
                             break;
                         }
                     }
                 }
 
+                // A point should always be found if sum > 0.
+                // dx2[dx2.length - 1] is equal to sum, and r < sum.
+                // So, chosenIdx will always be set here.
+                final T p = pointSet.remove(chosenIdx);
+                resultSet.add(new Cluster<T>(p));
+            }
+        }
+
         return resultSet;
-
     }
\ No newline at end of file
