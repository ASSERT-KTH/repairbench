diff --git a/tmp/95106733-8d53-4b91-930d-764805d79353_buggy.java b/tmp/89791072-caff-4b32-aafb-88f9ee696cea_fixed.java
index ad4b0d8..c6895b3 100644
--- a/tmp/95106733-8d53-4b91-930d-764805d79353_buggy.java
+++ b/tmp/89791072-caff-4b32-aafb-88f9ee696cea_fixed.java
@@ -1,47 +1,66 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
+            // The dx2 array stores the cumulative sum of D(x)^2 for the remaining points.
+            // It must be re-initialized in each iteration because pointSet.size() changes.
+            final double[] dx2 = new double[pointSet.size()];
+
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            double currentSumOfSqDistances = 0.0; // Changed from int to double
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                currentSumOfSqDistances += d * d; // Accumulate sum of squared distances
+                dx2[i] = currentSumOfSqDistances; // dx2[i] stores the cumulative sum up to index i
             }
 
+            final double sum = currentSumOfSqDistances;
+
+            T newCenter;
+            if (sum == 0.0) {
+                // All remaining points are at distance 0 from existing centers.
+                // In this case, choose one uniformly at random from the remaining points.
+                newCenter = pointSet.remove(random.nextInt(pointSet.size()));
+            } else {
                 // Add one new data point as a center. Each point x is chosen with
                 // probability proportional to D(x)2
+                // The random value 'r' is between 0 (inclusive) and 'sum' (exclusive).
                 final double r = random.nextDouble() * sum;
+
+                int chosenIdx = -1; // This index will be found if sum > 0.0
                 for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+                    // Find the first point whose cumulative D(x)^2 is strictly greater than r.
+                    // Using '>' instead of '>=' ensures that points with D(x)^2 = 0 are not chosen
+                    // unless r is such that no point has a non-zero D(x)^2 contribution.
+                    if (dx2[i] > r) {
+                        chosenIdx = i;
                         break;
                     }
                 }
+                newCenter = pointSet.remove(chosenIdx);
+            }
+            resultSet.add(new Cluster<T>(newCenter));
         }
 
         return resultSet;
 
     }
\ No newline at end of file
