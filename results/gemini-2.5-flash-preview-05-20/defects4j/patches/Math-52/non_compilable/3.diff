diff --git a/tmp/0a9e18fb-1744-485b-94a0-11156562e8ab_buggy.java b/tmp/55a24492-2e95-4f9f-ab33-2169d79f2c93_fixed.java
index 0e110fe..d1a3b98 100644
--- a/tmp/0a9e18fb-1744-485b-94a0-11156562e8ab_buggy.java
+++ b/tmp/55a24492-2e95-4f9f-ab33-2169d79f2c93_fixed.java
@@ -1,96 +1,169 @@
+import org.apache.commons.math.exception.util.LocalizedFormats;
+import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
+import org.apache.commons.math.exception.MathRuntimeException;
+import org.apache.commons.math.util.FastMath;
+import org.apache.commons.math.util.Precision;
+
+// Class fields (q0, q1, q2, q3) are assumed to be implicitly available as they are assigned in the constructor.
+// For a complete runnable example, they would typically be private final fields initialized by the constructor.
+// private final double q0;
+// private final double q1;
+// private final double q2;
+// private final double q3;
+
+// The rest of the class (methods like getQ0, getQ1, etc.) is omitted as per instructions.
+
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
   // norms computation
   double u1u1 = u1.getNormSq();
   double u2u2 = u2.getNormSq();
   double v1v1 = v1.getNormSq();
   double v2v2 = v2.getNormSq();
   if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
     throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
   }
 
   // normalize v1 in order to have (v1'|v1') = (u1|u1)
   v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
 
   // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
   double u1u2   = u1.dotProduct(u2);
   double v1v2   = v1.dotProduct(v2);
   double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
+  double coeffV = v1v2 / u1u1; // v1v1 is now u1u1
+
+  // uOrthComponentSq is ||u2 - proj_{u1}u2||^2, which is ||u1 x u2||^2 / ||u1||^2
+  // vOrthComponentSq is ||v2 - proj_{v1}v2||^2, which is ||v1 x v2||^2 / ||v1||^2 (after v1 scaled)
+  double uOrthComponentSq = u2u2 - u1u2 * coeffU;
+  double vOrthComponentSq = v2v2 - v1v2 * coeffV;
+
+  double beta;
+
+  // Clamp values to non-negative to avoid NaN from sqrt due to precision issues
+  // Using a relative tolerance for checking if a value is effectively zero.
+  final double uOrthThreshold = Precision.EPSILON * u2u2;
+  final double vOrthThreshold = Precision.EPSILON * v2v2;
+
+  if (uOrthComponentSq < uOrthThreshold) {
+      uOrthComponentSq = 0.0;
+  }
+  if (vOrthComponentSq < vOrthThreshold) {
+      vOrthComponentSq = 0.0;
+  }
+
+  if (vOrthComponentSq == 0.0) { // v1 and v2 are collinear (or numerically so)
+      if (uOrthComponentSq == 0.0) { // u1 and u2 are also collinear (or numerically so)
+          // Both pairs are collinear. The transformation essentially maps u1 to v1,
+          // and u2 (which is k*u1) to v2' (which must be k*v1).
+          // In this scenario, beta should be 0, implying v2' = alpha * v1.
+          // Since alpha = coeffU - beta * coeffV, with beta=0, alpha = coeffU.
+          // This correctly leads to v2' = coeffU * v1, where coeffU is the scaling factor k.
+          beta = 0.0;
+      } else {
+          // u1,u2 are NOT collinear, but v1,v2 ARE collinear.
+          // It's impossible to map a 2D span (defined by non-collinear u1, u2)
+          // to a 1D span (defined by collinear v1, v2) using a rotation.
+          // This indicates an invalid input configuration.
+          throw MathRuntimeException.createIllegalArgumentException(
+              LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR // Reusing existing message, though not semantically perfect
+          );
+      }
+  } else {
+      beta = FastMath.sqrt(uOrthComponentSq / vOrthComponentSq);
+  }
+
   double alpha  = coeffU - beta * coeffV;
   v2 = new Vector3D(alpha, v1, beta, v2);
 
   // preliminary computation
   Vector3D uRef  = u1;
   Vector3D vRef  = v1;
   Vector3D v1Su1 = v1.subtract(u1);
   Vector3D v2Su2 = v2.subtract(u2);
   Vector3D k     = v1Su1.crossProduct(v2Su2);
   Vector3D u3    = u1.crossProduct(u2);
   double c       = k.dotProduct(u3);
-  if (c == 0) {
+
+  // Use a tolerance for checking if c is zero in the subsequent `if (c == 0)` blocks
+  // to avoid issues with very small non-zero values.
+  // For `testIssue639`, the critical part causing `NaN` is often `c < 0` before `sqrt(c)`.
+  // Or, if `c` is very small, it skips the `c==0` checks, leading to numerical issues later.
+  final double cThreshold = Precision.EPSILON * FastMath.max(FastMath.max(k.getNormSq(), u3.getNormSq()), 1.0); // Use a scale for tolerance
+
+  if (FastMath.abs(c) < cThreshold) { // c is effectively zero
     // the (q1, q2, q3) vector is close to the (u1, u2) plane
     // we try other vectors
     Vector3D v3 = Vector3D.crossProduct(v1, v2);
     Vector3D v3Su3 = v3.subtract(u3);
     k = v1Su1.crossProduct(v3Su3);
     Vector3D u2Prime = u1.crossProduct(u3);
     c = k.dotProduct(u2Prime);
 
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+    if (FastMath.abs(c) < cThreshold) { // c is also close to the (u1, u3) plane
+      // the (q1, q2, q3) vector is almost aligned with u1: we try (u2, u3) and (v2, v3)
+      k = v2Su2.crossProduct(v3Su3);
+      c = k.dotProduct(u2.crossProduct(u3));
 
-      if (c == 0) {
+      if (FastMath.abs(c) < cThreshold) {
         // the (q1, q2, q3) vector is aligned with everything
         // this is really the identity rotation
         q0 = 1.0;
         q1 = 0.0;
         q2 = 0.0;
         q3 = 0.0;
         return;
       }
 
       // we will have to use u2 and v2 to compute the scalar part
       uRef = u2;
       vRef = v2;
 
     }
 
   }
 
   // compute the vectorial part
-  c = FastMath.sqrt(c);
+  // Clamp c to non-negative to avoid NaN from sqrt if c became negative due to precision.
+  c = FastMath.sqrt(FastMath.max(0.0, c));
   double inv = 1.0 / (c + c);
   q1 = inv * k.getX();
   q2 = inv * k.getY();
   q3 = inv * k.getZ();
 
   // compute the scalar part
    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                     uRef.getZ() * q1 - uRef.getX() * q3,
                     uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
-
+   double kNormSq = k.getNormSq();
+   // If the vectorial part is numerically zero (q1,q2,q3 are effectively zero),
+   // then k (the second k) will be numerically zero, leading to 0/0 for q0.
+   // This means the rotation is effectively identity.
+   final double kNormSqThreshold = Precision.EPSILON * uRef.getNormSq(); // scale threshold by uRef norm
+   if (kNormSq < kNormSqThreshold) {
+       q0 = 1.0;
+       q1 = 0.0;
+       q2 = 0.0;
+       q3 = 0.0;
+   } else {
+       q0 = vRef.dotProduct(k) / (2 * kNormSq);
+   }
   }
