diff --git a/tmp/1d3ab213-967c-4d50-9827-c69fcff07bfd_buggy.java b/tmp/d0f79764-b91d-4929-a3ba-5e738b9da002_fixed.java
index 0e110fe..1745cbd 100644
--- a/tmp/1d3ab213-967c-4d50-9827-c69fcff07bfd_buggy.java
+++ b/tmp/d0f79764-b91d-4929-a3ba-5e738b9da002_fixed.java
@@ -1,96 +1,120 @@
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
   // norms computation
   double u1u1 = u1.getNormSq();
   double u2u2 = u2.getNormSq();
   double v1v1 = v1.getNormSq();
   double v2v2 = v2.getNormSq();
   if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
     throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
   }
 
   // normalize v1 in order to have (v1'|v1') = (u1|u1)
   v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
 
   // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
   double u1u2   = u1.dotProduct(u2);
   double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
+  
+  // c1 is squared norm of u2 orthogonal to u1
+  // c2 is squared norm of v2 orthogonal to v1 (after v1 has been scaled to u1's norm)
+  double c1 = u2u2 - u1u2 * u1u2 / u1u1;
+  double c2 = v2v2 - v1v2 * v1v2 / u1u1;
+
+  double alpha, beta;
+  if ((c1 < Precision.EPSILON) || (c2 < Precision.EPSILON)) {
+    // the vectors are almost aligned, we have to use only the norms
+    // (see comments in the method Rotation(Vector3D, Vector3D) in Commons Math)
+    alpha = u1u2 / u1u1;
+    beta  = FastMath.sqrt(u2u2 / v2v2);
+  } else {
+    alpha = (u1u2 * c2 - v1v2 * c1) / (u1u1 * c2);
+    beta  = FastMath.sqrt(c1 / c2);
+  }
   v2 = new Vector3D(alpha, v1, beta, v2);
 
   // preliminary computation
   Vector3D uRef  = u1;
   Vector3D vRef  = v1;
   Vector3D v1Su1 = v1.subtract(u1);
   Vector3D v2Su2 = v2.subtract(u2);
   Vector3D k     = v1Su1.crossProduct(v2Su2);
   Vector3D u3    = u1.crossProduct(u2);
   double c       = k.dotProduct(u3);
-  if (c == 0) {
+  if (FastMath.abs(c) < Precision.EPSILON) { // Changed == 0 to fuzzy comparison
     // the (q1, q2, q3) vector is close to the (u1, u2) plane
     // we try other vectors
     Vector3D v3 = Vector3D.crossProduct(v1, v2);
     Vector3D v3Su3 = v3.subtract(u3);
     k = v1Su1.crossProduct(v3Su3);
     Vector3D u2Prime = u1.crossProduct(u3);
     c = k.dotProduct(u2Prime);
 
-    if (c == 0) {
+    if (FastMath.abs(c) < Precision.EPSILON) { // Changed == 0 to fuzzy comparison
       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+      k = v2Su2.crossProduct(v3Su3);
+      c = k.dotProduct(u2.crossProduct(u3));
 
-      if (c == 0) {
+      if (FastMath.abs(c) < Precision.EPSILON) { // Changed == 0 to fuzzy comparison
         // the (q1, q2, q3) vector is aligned with everything
         // this is really the identity rotation
         q0 = 1.0;
         q1 = 0.0;
         q2 = 0.0;
         q3 = 0.0;
         return;
       }
 
       // we will have to use u2 and v2 to compute the scalar part
       uRef = u2;
       vRef = v2;
 
     }
 
   }
 
   // compute the vectorial part
   c = FastMath.sqrt(c);
+  // If c is very small, 2*c will be very small, leading to large 'inv' or NaN if c was negative.
+  // The 'if (FastMath.abs(c) < Precision.EPSILON)' checks above should catch cases where k is essentially zero.
+  // If c is non-zero (i.e. > Precision.EPSILON), then 2*c will also be non-zero and positive.
   double inv = 1.0 / (c + c);
   q1 = inv * k.getX();
   q2 = inv * k.getY();
   q3 = inv * k.getZ();
 
   // compute the scalar part
    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                     uRef.getZ() * q1 - uRef.getX() * q3,
                     uRef.getX() * q2 - uRef.getY() * q1);
+  // k.getNormSq() could be zero if q1, q2, q3 are all very small (near zero).
+  // This case implies k is zero, which means uRef and vRef are nearly aligned and/or the cross product k is nearly zero.
+  // If k is (0,0,0), then q0 would be NaN.
+  // If q1, q2, q3 are already computed from a non-zero k (due to the checks above),
+  // then the *new* k derived from q1, q2, q3 should also be non-zero.
+  // This `k` is actually `q_vectorial.cross(uRef)` or similar from quaternion math.
+  // The original Commons Math handles this implicitly.
+  // Given that q1, q2, q3 are derived from `k` which is supposed to be non-zero (due to fuzzy checks for `c`),
+  // this derived `k` should also be non-zero, preventing division by zero.
   q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
 
   }
\ No newline at end of file
