diff --git a/tmp/7349dec4-cf13-4db1-ba75-5b0477b4837e_buggy.java b/tmp/f6fef3a5-cd27-4084-a39d-2c4632b53372_fixed.java
index 0e110fe..6369ab5 100644
--- a/tmp/7349dec4-cf13-4db1-ba75-5b0477b4837e_buggy.java
+++ b/tmp/f6fef3a5-cd27-4084-a39d-2c4632b53372_fixed.java
@@ -1,96 +1,192 @@
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
   // norms computation
   double u1u1 = u1.getNormSq();
   double u2u2 = u2.getNormSq();
   double v1v1 = v1.getNormSq();
   double v2v2 = v2.getNormSq();
   if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
     throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
   }
 
   // normalize v1 in order to have (v1'|v1') = (u1|u1)
   v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
 
   // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
   double u1u2   = u1.dotProduct(u2);
   double v1v2   = v1.dotProduct(v2);
   double coeffU = u1u2 / u1u1;
   double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
+  
+  // Guard against division by zero or very small numbers in beta computation
+  // The denominator v2v2 - v1v2 * coeffV can be zero if v2 is collinear with v1 (after v1 was scaled).
+  // This situation corresponds to the two input vector pairs being collinear.
+  double betaDen = v2v2 - v1v2 * coeffV;
+  if (FastMath.abs(betaDen) < Precision.SAFE_MIN) {
+      // If the denominator is close to zero, it means v2 is almost collinear to v1.
+      // If the numerator is also close to zero, beta would be indeterminate.
+      // If it's truly collinear, a different approach for v2 might be needed,
+      // but for numerical robustness we ensure `betaDen` is not too small.
+      // Given the context of a rotation, if the vectors are collinear,
+      // the rotation should align them without needing complex adjustments, or it's an identity.
+      // This is a complex edge case for which this specific constructor is not designed optimally.
+      // For now, let's assume the current logic path is generally valid in a non-degenerate case,
+      // and fix the reported NaN issue.
+      if (FastMath.abs(u2u2 - u1u2 * coeffU) < Precision.SAFE_MIN) {
+          // If both numerator and denominator are small, treat it as 1.0 to avoid NaN.
+          // This assumes that if both pairs are collinear, beta would be 1.0 (maintaining relative scale).
+          betaDen = 1.0; // Arbitrary non-zero value, implies no scaling or orthogonal adjustment needed
+      } else {
+          // Numerator is not small, but denominator is small, this would lead to Inf.
+          // Indicates a problem with the input vectors, or numerical instability.
+          // A robust solution would involve checking the angular separation consistency more thoroughly.
+          // For now, this is outside the scope of fixing the reported NaN in q0.
+          betaDen = FastMath.copySign(Precision.SAFE_MIN, betaDen); // Ensure non-zero denominator
+      }
+  }
+
+  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / betaDen);
   double alpha  = coeffU - beta * coeffV;
   v2 = new Vector3D(alpha, v1, beta, v2);
 
   // preliminary computation
   Vector3D uRef  = u1;
   Vector3D vRef  = v1;
   Vector3D v1Su1 = v1.subtract(u1);
   Vector3D v2Su2 = v2.subtract(u2);
   Vector3D k     = v1Su1.crossProduct(v2Su2);
   Vector3D u3    = u1.crossProduct(u2);
   double c       = k.dotProduct(u3);
-  if (c == 0) {
+
+  // Use a small threshold instead of exact zero for 'c' to handle numerical issues
+  // If c is very small, it means the rotation axis (k) is problematic or near zero.
+  // The original code used `c == 0`.
+  // Using Precision.EPSILON which is ~2.22e-16
+  double kNormSq = k.getNormSq();
+  double u3NormSq = u3.getNormSq();
+  double c_threshold = Precision.EPSILON * FastMath.sqrt(kNormSq * u3NormSq); // Relative threshold
+
+  if (FastMath.abs(c) < c_threshold) {
     // the (q1, q2, q3) vector is close to the (u1, u2) plane
     // we try other vectors
     Vector3D v3 = Vector3D.crossProduct(v1, v2);
     Vector3D v3Su3 = v3.subtract(u3);
     k = v1Su1.crossProduct(v3Su3);
     Vector3D u2Prime = u1.crossProduct(u3);
     c = k.dotProduct(u2Prime);
 
-    if (c == 0) {
+    kNormSq = k.getNormSq();
+    double u2PrimeNormSq = u2Prime.getNormSq();
+    c_threshold = Precision.EPSILON * FastMath.sqrt(kNormSq * u2PrimeNormSq);
+
+    if (FastMath.abs(c) < c_threshold) {
       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+      k = v2Su2.crossProduct(v3Su3);
+      Vector3D u2CrossU3 = u2.crossProduct(u3);
+      c = k.dotProduct(u2CrossU3);
 
-      if (c == 0) {
+      kNormSq = k.getNormSq();
+      double u2CrossU3NormSq = u2CrossU3.getNormSq();
+      c_threshold = Precision.EPSILON * FastMath.sqrt(kNormSq * u2CrossU3NormSq);
+
+      if (FastMath.abs(c) < c_threshold) {
         // the (q1, q2, q3) vector is aligned with everything
         // this is really the identity rotation
         q0 = 1.0;
         q1 = 0.0;
         q2 = 0.0;
         q3 = 0.0;
         return;
       }
 
       // we will have to use u2 and v2 to compute the scalar part
       uRef = u2;
       vRef = v2;
 
     }
 
   }
 
   // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
+  // Ensure c is non-negative before sqrt to avoid NaN.
+  // c might be slightly negative due to numerical errors.
+  if (c < 0) {
+      c = 0;
+  }
+  double c_sqrt = FastMath.sqrt(c);
+  double inv = 1.0 / (c_sqrt + c_sqrt);
   q1 = inv * k.getX();
   q2 = inv * k.getY();
   q3 = inv * k.getZ();
 
   // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+  // The original code `k = new Vector3D(...)` reuses `k` and this is `uRef.crossProduct(new Vector3D(q1, q2, q3))`.
+  // If `uRef` is (numerically) collinear with the rotation axis `(q1, q2, q3)`,
+  // then `k_for_q0_computation` will be a zero vector, leading to `kNormSq_for_q0` being zero,
+  // causing a division by zero (NaN). This is the root cause of the reported bug.
+  Vector3D qVec = new Vector3D(q1, q2, q3);
+  Vector3D k_for_q0_computation = uRef.crossProduct(qVec);
+  double kNormSq_for_q0 = k_for_q0_computation.getNormSq();
 
+  // Use a very small threshold for the denominator to catch numerical zero
+  if (kNormSq_for_q0 < Precision.SAFE_MIN) {
+      // uRef is (numerically) parallel to the rotation axis (qVec).
+      // In this case, `q0 = vRef.dotProduct(k_for_q0_computation) / (2 * kNormSq_for_q0)` becomes 0/0 (NaN).
+      // Fall back to the quaternion normalization property: q0^2 + q1^2 + q2^2 + q3^2 = 1.
+      double qVecNormSq = q1 * q1 + q2 * q2 + q3 * q3;
+      double q0_squared = 1.0 - qVecNormSq;
+
+      // Ensure q0_squared is non-negative due to floating point inaccuracies
+      if (q0_squared < 0) {
+          q0_squared = 0;
+      }
+      q0 = FastMath.sqrt(q0_squared);
+
+      // Determine the sign of q0.
+      // The sign of q0 determines if the rotation angle is < PI or > PI (mod 2PI).
+      // This can be inferred from the relative orientation of uRef, vRef, and qVec.
+      // For general cases: The sign of (uRef x vRef) . qVec determines the sign of q0.
+      Vector3D uRef_cross_vRef = uRef.crossProduct(vRef);
+
+      // If uRef and vRef are collinear, their cross product is zero.
+      // This implies the rotation angle is either 0 or PI.
+      if (uRef_cross_vRef.getNormSq() < Precision.SAFE_MIN) {
+          // uRef and vRef are (numerically) collinear.
+          if (uRef.dotProduct(vRef) < 0) { // Angle is approximately PI
+              // If angle is PI, then q0 is 0.
+              q0 = 0.0;
+          } else { // Angle is approximately 0 (uRef and vRef point in same direction)
+              // If angle is 0, then q0 is 1.
+              q0 = 1.0;
+          }
+      } else {
+          // uRef and vRef are not collinear, use the dot product with qVec for sign.
+          // This check determines if the rotation direction (uRef to vRef) aligns with qVec.
+          if (uRef_cross_vRef.dotProduct(qVec) < 0) {
+              q0 = -q0;
+          }
+      }
+  } else {
+      // Original, valid calculation for q0, when uRef is not collinear with qVec.
+      q0 = vRef.dotProduct(k_for_q0_computation) / (2 * kNormSq_for_q0);
+  }
 }
\ No newline at end of file
