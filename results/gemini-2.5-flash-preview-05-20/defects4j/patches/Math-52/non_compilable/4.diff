diff --git a/tmp/a648279d-43cb-4aea-9535-8070f9bbdc85_buggy.java b/tmp/e7e7dc36-c655-4c9c-83bc-5d4274fa603e_fixed.java
index 0e110fe..9655ae5 100644
--- a/tmp/a648279d-43cb-4aea-9535-8070f9bbdc85_buggy.java
+++ b/tmp/e7e7dc36-c655-4c9c-83bc-5d4274fa603e_fixed.java
@@ -1,96 +1,117 @@
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
   // norms computation
   double u1u1 = u1.getNormSq();
   double u2u2 = u2.getNormSq();
-  double v1v1 = v1.getNormSq();
+  double v1v1 = v1.getNormSq(); // original v1 norm squared
   double v2v2 = v2.getNormSq();
   if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
     throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
   }
 
   // normalize v1 in order to have (v1'|v1') = (u1|u1)
+  // v1 is now v1_new, its norm squared is u1u1
   v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
 
   // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
   double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
+  double v1v2   = v1.dotProduct(v2); // this is v1_new.dotProduct(v2_original)
   double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+  double coeffV = v1v2 / u1u1; // u1u1 is v1_new.getNormSq()
+
+  // These are the terms ||u1 x u2||^2 / ||u1||^2 and ||v1_new x v2_original||^2 / ||v1_new||^2
+  // They are theoretically non-negative, but can be negative due to floating point issues.
+  double valU = u2u2 - u1u2 * coeffU;
+  double valV = v2v2 - v1v2 * coeffV;
+
+  double beta;
+  double alpha;
+
+  // Fix for MATH-639: handle numerical issues when vectors are collinear or nearly collinear.
+  // Precision.SAFE_MIN is a very small number, effectively treated as zero for practical purposes.
+  if (valU < Precision.SAFE_MIN || valV < Precision.SAFE_MIN) {
+      // At least one pair is collinear or very close to it.
+      // Use a simplified beta that just ensures the norms match.
+      // This approach is more stable and prevents division by zero or sqrt of negative number.
+      beta = FastMath.sqrt(u2u2 / v2v2);
+  } else {
+      // Both pairs are sufficiently non-collinear, use the standard formula.
+      beta = FastMath.sqrt(valU / valV);
+  }
+
+  alpha = coeffU - beta * coeffV;
+  v2 = new Vector3D(alpha, v1, beta, v2); // v2 is now the corrected v2_new
 
   // preliminary computation
   Vector3D uRef  = u1;
   Vector3D vRef  = v1;
   Vector3D v1Su1 = v1.subtract(u1);
   Vector3D v2Su2 = v2.subtract(u2);
   Vector3D k     = v1Su1.crossProduct(v2Su2);
   Vector3D u3    = u1.crossProduct(u2);
   double c       = k.dotProduct(u3);
   if (c == 0) {
     // the (q1, q2, q3) vector is close to the (u1, u2) plane
     // we try other vectors
     Vector3D v3 = Vector3D.crossProduct(v1, v2);
     Vector3D v3Su3 = v3.subtract(u3);
     k = v1Su1.crossProduct(v3Su3);
     Vector3D u2Prime = u1.crossProduct(u3);
     c = k.dotProduct(u2Prime);
 
     if (c == 0) {
       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
       k = v2Su2.crossProduct(v3Su3);;
       c = k.dotProduct(u2.crossProduct(u3));;
 
       if (c == 0) {
         // the (q1, q2, q3) vector is aligned with everything
         // this is really the identity rotation
         q0 = 1.0;
         q1 = 0.0;
         q2 = 0.0;
         q3 = 0.0;
         return;
       }
 
       // we will have to use u2 and v2 to compute the scalar part
       uRef = u2;
       vRef = v2;
 
     }
 
   }
 
   // compute the vectorial part
   c = FastMath.sqrt(c);
   double inv = 1.0 / (c + c);
   q1 = inv * k.getX();
   q2 = inv * k.getY();
   q3 = inv * k.getZ();
 
   // compute the scalar part
    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                     uRef.getZ() * q1 - uRef.getX() * q3,
                     uRef.getX() * q2 - uRef.getY() * q1);
   q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
 
   }
\ No newline at end of file
