diff --git a/tmp/df07f34c-ce08-41dd-884e-3e14d46016ad_buggy.java b/tmp/65ccbfb8-3228-44bb-b2f3-88aa3f28d275_fixed.java
index 0e110fe..65e8826 100644
--- a/tmp/df07f34c-ce08-41dd-884e-3e14d46016ad_buggy.java
+++ b/tmp/65ccbfb8-3228-44bb-b2f3-88aa3f28d275_fixed.java
@@ -1,96 +1,152 @@
   /** Build the rotation that transforms a pair of vector into another pair.
 
    * <p>Except for possible scale factors, if the instance were applied to
    * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
    * (v<sub>1</sub>, v<sub>2</sub>).</p>
 
    * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
    * not the same as the angular separation between v<sub>1</sub> and
    * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
    * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
    * v<sub>2</sub>) plane.</p>
 
    * @param u1 first vector of the origin pair
    * @param u2 second vector of the origin pair
    * @param v1 desired image of u1 by the rotation
    * @param v2 desired image of u2 by the rotation
    * @exception IllegalArgumentException if the norm of one of the vectors is zero
    */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
-  // norms computation
-  double u1u1 = u1.getNormSq();
-  double u2u2 = u2.getNormSq();
-  double v1v1 = v1.getNormSq();
-  double v2v2 = v2.getNormSq();
+  // Store original vectors and their squared norms for robust calculations
+  final Vector3D originalU1 = u1;
+  final Vector3D originalU2 = u2;
+  final Vector3D originalV1 = v1;
+  final Vector3D originalV2 = v2;
+
+  double u1u1 = originalU1.getNormSq();
+  double u2u2 = originalU2.getNormSq();
+  double v1v1 = originalV1.getNormSq();
+  double v2v2 = originalV2.getNormSq();
+
   if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
     throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
   }
 
   // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+  // v1 is now the scaled version, its squared norm is u1u1
+  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), originalV1);
 
   // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+  double u1u2   = originalU1.dotProduct(originalU2);
+
+  // Calculate component of originalU2 orthogonal to originalU1
+  double c1 = u1u2 / u1u1;
+  Vector3D u2Adj  = originalU2.subtract(new Vector3D(c1, originalU1));
+  double alphaA = u2Adj.getNormSq();
+
+  // Calculate component of originalV2 orthogonal to originalV1
+  double v1v2_orig_dot = originalV1.dotProduct(originalV2);
+  double c2 = v1v2_orig_dot / v1v1; // v1v1 is originalV1.getNormSq()
+  Vector3D v2Adj = originalV2.subtract(new Vector3D(c2, originalV1));
+  double alphaB = v2Adj.getNormSq();
+
+  // Handle collinearity cases
+  if (alphaA < Precision.EPSILON || alphaB < Precision.EPSILON) {
+      // u2 is colinear to u1 and/or v2 is colinear to v1.
+      // In this case, we ensure norms match and direction is preserved/flipped if needed.
+      if (u1u2 < 0) { // u1 and u2 are in opposite directions
+          v2 = new Vector3D(-FastMath.sqrt(u2u2 / v2v2), originalV2);
+      } else { // u1 and u2 are in same direction
+          v2 = new Vector3D(FastMath.sqrt(u2u2 / v2v2), originalV2);
+      }
+  } else {
+      // Normal case: use the adjusted v2 for the rotation.
+      // v1 is the scaled v1. v2Adj is (original v2 - its projection on original v1).
+      v2 = new Vector3D(c1, v1, FastMath.sqrt(alphaA / alphaB), v2Adj);
+  }
 
   // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
+  Vector3D uRef  = originalU1;
+  Vector3D vRef  = v1; // v1 is the scaled v1'
+  Vector3D v1Su1 = v1.subtract(originalU1);
+  Vector3D v2Su2 = v2.subtract(originalU2);
   Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
+  Vector3D u3    = originalU1.crossProduct(originalU2);
   double c       = k.dotProduct(u3);
-  if (c == 0) {
+
+  // Check for near-zero 'c' and adjust uRef/vRef or return identity
+  if (FastMath.abs(c) < Precision.EPSILON) { // Use Precision.EPSILON for robustness against small numbers
     // the (q1, q2, q3) vector is close to the (u1, u2) plane
     // we try other vectors
     Vector3D v3 = Vector3D.crossProduct(v1, v2);
     Vector3D v3Su3 = v3.subtract(u3);
     k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
+    Vector3D u2Prime = originalU1.crossProduct(u3);
     c = k.dotProduct(u2Prime);
 
-    if (c == 0) {
+    if (FastMath.abs(c) < Precision.EPSILON) { // Use Precision.EPSILON
       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+      k = v2Su2.crossProduct(v3Su3);
+      c = k.dotProduct(originalU2.crossProduct(u3));
 
-      if (c == 0) {
+      if (FastMath.abs(c) < Precision.EPSILON) { // Use Precision.EPSILON
         // the (q1, q2, q3) vector is aligned with everything
         // this is really the identity rotation
         q0 = 1.0;
         q1 = 0.0;
         q2 = 0.0;
         q3 = 0.0;
         return;
       }
 
       // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
+      uRef = originalU2;
       vRef = v2;
 
     }
-
   }
 
   // compute the vectorial part
-  c = FastMath.sqrt(c);
+  c = FastMath.sqrt(FastMath.max(0.0, c)); // Clamp c to prevent sqrt of negative zero due to precision
   double inv = 1.0 / (c + c);
   q1 = inv * k.getX();
   q2 = inv * k.getY();
   q3 = inv * k.getZ();
 
   // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
+  // k_prime is uRef.crossProduct(q_vector)
+  Vector3D k_prime = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                                   uRef.getZ() * q1 - uRef.getX() * q3,
                                   uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
 
+  double k_prime_normSq = k_prime.getNormSq();
+
+  // Handle case where k_prime is numerically zero (uRef parallel to q_vec)
+  if (k_prime_normSq < Precision.EPSILON) {
+      // If uRef is parallel to the rotation axis (q1,q2,q3), it should be invariant under rotation.
+      // Thus, vRef must be uRef (identity) or -uRef (180 degree rotation).
+      // The current q1, q2, q3 might not be normalized to 1 if q0=0.
+      // This is a known numerical instability for this specific q0 formula.
+      // Fallback to simpler q0 determination.
+      // If the axis is parallel to uRef, and uRef maps to vRef, then uRef and vRef must be collinear.
+      // Rotation angle is 0 or PI.
+      if (uRef.dotProduct(vRef) > 0) {
+          q0 = 1.0;
+      } else {
+          q0 = 0.0;
+          // If q0 is 0, the (q1,q2,q3) vector *must* be normalized to 1.
+          // Since q1, q2, q3 are already non-zero due to c not being zero,
+          // we can re-normalize them to ensure norm 1.
+          double q_vec_norm = FastMath.sqrt(q1*q1 + q2*q2 + q3*q3);
+          if (q_vec_norm > Precision.EPSILON) { // Avoid division by zero if q1,q2,q3 are truly (0,0,0)
+              q1 /= q_vec_norm;
+              q2 /= q_vec_norm;
+              q3 /= q_vec_norm;
+          }
+      }
+  } else {
+      q0 = vRef.dotProduct(k_prime) / (2 * k_prime_normSq);
+  }
 }
\ No newline at end of file
