diff --git a/tmp/bf0ca8d9-e333-4576-a36b-d5869e3380a8_buggy.java b/tmp/9d03a4e6-33ae-4fbe-81c5-4845eb1beb2b_fixed.java
index 1ea204a..eafac8a 100644
--- a/tmp/bf0ca8d9-e333-4576-a36b-d5869e3380a8_buggy.java
+++ b/tmp/9d03a4e6-33ae-4fbe-81c5-4845eb1beb2b_fixed.java
@@ -1,17 +1,24 @@
   private static String extractClassNameIfGoog(Node node, Node parent,
       String functionName){
     String className = null;
     if (NodeUtil.isExprCall(parent)) {
       Node callee = node.getFirstChild();
       if (callee != null && callee.getType() == Token.GETPROP) {
         String qualifiedName = callee.getQualifiedName();
         if (functionName.equals(qualifiedName)) {
+          // 'node' is the CALL node.
+          // The first child of CALL is the function being called (callee).
+          // The subsequent children are the arguments.
+          // We are interested in the first argument, which is 'callee.getNext()'.
           Node target = callee.getNext();
-          if (target != null) {
+          // The class name should only be extracted if the argument is a string literal.
+          // The original code extracted the string for any node type, which led to
+          // incorrect results for non-string literal arguments (e.g., `goog.require(foo)`).
+          if (target != null && target.getType() == Token.STRING) {
             className = target.getString();
           }
         }
       }
     }
     return className;
   }
\ No newline at end of file
