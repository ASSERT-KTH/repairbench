diff --git a/tmp/27ae448d-3c0e-4680-b6a6-39d7ad6ae000_buggy.java b/tmp/b0a25d8c-039c-483e-9cf9-36bedafb7512_fixed.java
index afcc27c..a0f6ed9 100644
--- a/tmp/27ae448d-3c0e-4680-b6a6-39d7ad6ae000_buggy.java
+++ b/tmp/b0a25d8c-039c-483e-9cf9-36bedafb7512_fixed.java
@@ -1,61 +1,82 @@
     /**
      * Variant called when creation of the POJO involves buffering of creator properties
      * as well as property-based creator.
      */
     public Object complete(JsonParser p, DeserializationContext ctxt,
             PropertyValueBuffer buffer, PropertyBasedCreator creator)
         throws IOException
     {
         // first things first: deserialize all data buffered:
         final int len = _properties.length;
         Object[] values = new Object[len];
         for (int i = 0; i < len; ++i) {
             String typeId = _typeIds[i];
             final ExtTypedProperty extProp = _properties[i];
             if (typeId == null) {
                 // let's allow missing both type and property (may already have been set, too)
                 if (_tokens[i] == null) {
                     continue;
                 }
                 // but not just one
                 // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
                 if (!extProp.hasDefaultType()) {
                     ctxt.reportInputMismatch(_beanType,
                             "Missing external type id property '%s'",
                             extProp.getTypePropertyName());
                 } else {
                     typeId = extProp.getDefaultTypeId();
                 }
             } else if (_tokens[i] == null) {
                 SettableBeanProperty prop = extProp.getProperty();
                 ctxt.reportInputMismatch(_beanType,
                         "Missing property '%s' for external type id '%s'",
                         prop.getName(), _properties[i].getTypePropertyName());
             }
             values[i] = _deserialize(p, ctxt, i, typeId);
 
             final SettableBeanProperty prop = extProp.getProperty();
             // also: if it's creator prop, fill in
             if (prop.getCreatorIndex() >= 0) {
                 buffer.assignParameter(prop, values[i]);
 
                 // [databind#999] And maybe there's creator property for type id too?
                 SettableBeanProperty typeProp = extProp.getTypeProperty();
                 // for now, should only be needed for creator properties, too
                 if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
                     // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
                     //    apply deserializer... fun fun.
-                    buffer.assignParameter(typeProp, typeId);
+                    // The `typeId` is a String, but `typeProp` might expect a different type (e.g., Enum).
+                    // We need to deserialize the `typeId` string into the target type of `typeProp`.
+                    JavaType typeIdType = typeProp.getType();
+                    JsonDeserializer<Object> deser = ctxt.findContextualValueDeserializer(typeIdType, typeProp);
+                    Object actualTypeIdValue;
+
+                    // Create a parser for the typeId string.
+                    // This handles cases where typeIdType is not String (e.g., Enum, Integer)
+                    // by allowing the deserializer to parse the string representation.
+                    // It also correctly handles the String case (deserializes a string from a string token).
+                    try (com.fasterxml.jackson.core.JsonParser idParser = ctxt.getFactory().createParser(typeId)) {
+                        // Need to advance the parser to the first token
+                        // For a string literal "foo", idParser.nextToken() will produce JsonToken.VALUE_STRING
+                        // For a number literal "123", idParser.nextToken() will produce JsonToken.VALUE_NUMBER_INT
+                        idParser.nextToken(); // Must get the initial token
+                        actualTypeIdValue = deser.deserialize(idParser, ctxt);
+                    } catch (com.fasterxml.jackson.core.JsonParseException e) {
+                        throw new IOException(String.format(
+                                "Failed to deserialize type id '%s' for property '%s'",
+                                typeId, typeProp.getName()), e);
+                    }
+                    buffer.assignParameter(typeProp, actualTypeIdValue);
                 }
             }
         }
         Object bean = creator.build(ctxt, buffer);
         // third: assign non-creator properties
         for (int i = 0; i < len; ++i) {
             SettableBeanProperty prop = _properties[i].getProperty();
             if (prop.getCreatorIndex() < 0) {
                 prop.set(bean, values[i]);
             }
         }
         return bean;
     }
\ No newline at end of file
