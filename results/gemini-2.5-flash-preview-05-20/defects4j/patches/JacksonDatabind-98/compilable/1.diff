diff --git a/tmp/4e987e12-a8bf-40a4-8ab4-49e9d8af94c9_buggy.java b/tmp/a212dc31-ec7d-4b4f-911d-2b4adcdfd305_fixed.java
index afcc27c..f3f6939 100644
--- a/tmp/4e987e12-a8bf-40a4-8ab4-49e9d8af94c9_buggy.java
+++ b/tmp/a212dc31-ec7d-4b4f-911d-2b4adcdfd305_fixed.java
@@ -1,61 +1,90 @@
     /**
      * Variant called when creation of the POJO involves buffering of creator properties
      * as well as property-based creator.
      */
     public Object complete(JsonParser p, DeserializationContext ctxt,
             PropertyValueBuffer buffer, PropertyBasedCreator creator)
         throws IOException
     {
         // first things first: deserialize all data buffered:
         final int len = _properties.length;
         Object[] values = new Object[len];
         for (int i = 0; i < len; ++i) {
             String typeId = _typeIds[i];
             final ExtTypedProperty extProp = _properties[i];
             if (typeId == null) {
                 // let's allow missing both type and property (may already have been set, too)
                 if (_tokens[i] == null) {
                     continue;
                 }
                 // but not just one
                 // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
                 if (!extProp.hasDefaultType()) {
                     ctxt.reportInputMismatch(_beanType,
                             "Missing external type id property '%s'",
                             extProp.getTypePropertyName());
                 } else {
                     typeId = extProp.getDefaultTypeId();
                 }
             } else if (_tokens[i] == null) {
                 SettableBeanProperty prop = extProp.getProperty();
                 ctxt.reportInputMismatch(_beanType,
                         "Missing property '%s' for external type id '%s'",
                         prop.getName(), _properties[i].getTypePropertyName());
             }
             values[i] = _deserialize(p, ctxt, i, typeId);
 
             final SettableBeanProperty prop = extProp.getProperty();
             // also: if it's creator prop, fill in
             if (prop.getCreatorIndex() >= 0) {
                 buffer.assignParameter(prop, values[i]);
 
                 // [databind#999] And maybe there's creator property for type id too?
                 SettableBeanProperty typeProp = extProp.getTypeProperty();
                 // for now, should only be needed for creator properties, too
                 if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
+                    Object actualTypeIdValue = typeId; // Default to the string type id
                     // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
                     //    apply deserializer... fun fun.
-                    buffer.assignParameter(typeProp, typeId);
+                    // This applies if the type property (e.g., enum, primitive wrapper) expects
+                    // something other than a plain String, so we need to deserialize the
+                    // 'typeId' string into the correct type.
+                    if (typeProp.getType().getRawClass() != String.class) {
+                        JsonDeserializer<Object> typeIdDeser = typeProp.getValueDeserializer();
+                        if (typeIdDeser == null) {
+                            // Fallback to finding a contextual deserializer for the type property
+                            typeIdDeser = ctxt.findContextualValueDeserializer(typeProp.getType(), typeProp);
+                        }
+
+                        if (typeIdDeser != null) {
+                            // Need a JsonParser to feed to the deserializer.
+                            // Create a temporary parser from the typeId string.
+                            // This uses the current parser's codec to ensure proper factory configuration.
+                            JsonParser tempParser = p.getCodec().getFactory().createParser(typeId);
+                            // Advance to the first token; deserializer expects parser to be at start of value.
+                            // For a simple string like "Dog" or "123", this will be VALUE_STRING or VALUE_NUMBER_INT.
+                            tempParser.nextToken(); 
+                            actualTypeIdValue = typeIdDeser.deserialize(tempParser, ctxt);
+                            tempParser.close(); // Close the temporary parser to release resources
+                        } else {
+                            // This case should ideally not be reached for standard types,
+                            // but provides a safety net if no deserializer can be found.
+                            ctxt.reportInputMismatch(_beanType,
+                                    "Cannot find deserializer for type id property '%s' of type %s",
+                                    typeProp.getName(), typeProp.getType().toString());
+                        }
+                    }
+                    buffer.assignParameter(typeProp, actualTypeIdValue);
                 }
             }
         }
         Object bean = creator.build(ctxt, buffer);
         // third: assign non-creator properties
         for (int i = 0; i < len; ++i) {
             SettableBeanProperty prop = _properties[i].getProperty();
             if (prop.getCreatorIndex() < 0) {
                 prop.set(bean, values[i]);
             }
         }
         return bean;
     }
\ No newline at end of file
