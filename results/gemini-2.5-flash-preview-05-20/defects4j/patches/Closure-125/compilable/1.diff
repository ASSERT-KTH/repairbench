diff --git a/tmp/00ed38fc-8177-4d3f-a4b8-ab70021c519e_buggy.java b/tmp/7e9fcc90-5a41-4d34-ad3c-361f7c4ff1e3_fixed.java
index 7e43c1c..087358a 100644
--- a/tmp/00ed38fc-8177-4d3f-a4b8-ab70021c519e_buggy.java
+++ b/tmp/7e9fcc90-5a41-4d34-ad3c-361f7c4ff1e3_fixed.java
@@ -1,19 +1,47 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
     FunctionType fnType = type.toMaybeFunctionType();
+
     if (fnType != null) {
+      // If the type is a FunctionType, check if it's a valid constructor-like function.
+      // This includes explicitly marked constructors/interfaces, and nominal constructors
+      // (which are semantically constructors, even if their internal flags might be inconsistent due to type aliasing).
+      if (fnType.isConstructor() || fnType.isInterface() || fnType.isNominalConstructor()) {
         visitParameterList(t, n, fnType);
-        ensureTyped(t, n, fnType.getInstanceType());
+
+        JSType instanceTypeToUse;
+        // If the FunctionType is properly marked as a constructor or an interface,
+        // we can safely get its instance type.
+        if (fnType.isConstructor() || fnType.isInterface()) {
+          instanceTypeToUse = fnType.getInstanceType();
         } else {
+          // This is the problematic case where fnType.isNominalConstructor() is true,
+          // but fnType.isConstructor() and fnType.isInterface() are false.
+          // This indicates an inconsistent type definition, likely from an alias or typedef.
+          // To prevent the IllegalStateException from getInstanceType(), we fall back
+          // to UNKNOWN_TYPE for the instance.
+          instanceTypeToUse = t.getCompiler().getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);
+        }
+        ensureTyped(t, n, instanceTypeToUse);
+      } else {
+        // It's a FunctionType, but not a constructor, interface, or nominal constructor.
+        // E.g., an ordinary function, which cannot be 'new'd.
+        report(t, n, NOT_A_CONSTRUCTOR);
         ensureTyped(t, n);
       }
     } else {
+      // If the type is not a FunctionType, check if it's an empty or unknown type.
+      // In these cases, we assume it *could* be a constructor due to incomplete type information.
+      if (type.isEmptyType() || type.isUnknownType()) {
+        ensureTyped(t, n);
+      } else {
+        // It's neither a FunctionType, nor empty/unknown. It's definitely not a constructor.
         report(t, n, NOT_A_CONSTRUCTOR);
         ensureTyped(t, n);
       }
     }
+  }
\ No newline at end of file
