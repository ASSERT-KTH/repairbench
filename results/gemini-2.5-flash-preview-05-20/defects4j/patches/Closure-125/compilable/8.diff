diff --git a/tmp/2d86ef29-6836-4e4a-9c45-e357b6c01faf_buggy.java b/tmp/6d72bcc4-f17c-4d43-ad7d-3ea98fca88aa_fixed.java
index 7e43c1c..5466355 100644
--- a/tmp/2d86ef29-6836-4e4a-9c45-e357b6c01faf_buggy.java
+++ b/tmp/6d72bcc4-f17c-4d43-ad7d-3ea98fca88aa_fixed.java
@@ -1,19 +1,39 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+
+    // The logic here is:
+    // If 'type' represents a valid constructor or something we can attempt to construct (empty/unknown):
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
-      FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+      FunctionType fnType = type.toMaybeFunctionType(); // Try to get a FunctionType from 'type'
+
+      if (fnType != null) { // If 'type' was indeed a FunctionType (or contained one picked by UnionType.toMaybeFunctionType)
         visitParameterList(t, n, fnType);
+
+        // We can only get an instance type if the function is actually a constructor.
+        // Otherwise, calling getInstanceType() on a non-constructor FunctionType throws IllegalStateException.
+        if (fnType.isConstructor()) {
           ensureTyped(t, n, fnType.getInstanceType());
         } else {
+          // If fnType is a function but not a constructor, it's an error.
+          // The result of `new X` where `X` is not a constructor is typically `unknown`
+          // or a warning is reported.
+          report(t, n, NOT_A_CONSTRUCTOR);
+          ensureTyped(t, n); // Default to unknown type for the NEW expression
+        }
+      } else {
+        // If fnType is null, it means 'type' was Empty or Unknown, or a UnionType that
+        // didn't contain a FunctionType or couldn't resolve to a single one.
+        // In these cases, we don't have a specific instance type from a constructor.
         ensureTyped(t, n);
       }
     } else {
+      // If 'type' is definitely not a constructor, not empty, and not unknown,
+      // then it's an error to use it with 'new'.
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
