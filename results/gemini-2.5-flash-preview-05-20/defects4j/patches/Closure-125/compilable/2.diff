diff --git a/tmp/c7b85f86-5e17-40dc-b41f-9d0e05f3f5c8_buggy.java b/tmp/2b4bdcb7-b8ae-4f70-a034-54f8a33a13ad_fixed.java
index 7e43c1c..7d3a215 100644
--- a/tmp/c7b85f86-5e17-40dc-b41f-9d0e05f3f5c8_buggy.java
+++ b/tmp/2b4bdcb7-b8ae-4f70-a034-54f8a33a13ad_fixed.java
@@ -1,19 +1,43 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+
+    // The 'type' must be a constructor function, or empty, or unknown to be a valid target for 'new'.
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
       if (fnType != null) {
+        // If it's a function type, check parameters.
         visitParameterList(t, n, fnType);
+
+        // Before calling getInstanceType(), ensure that the function type is actually
+        // a constructor or an interface. The getInstanceType() method itself has
+        // a precondition (checkState) that throws IllegalStateException if this
+        // condition is not met. This defensive check prevents that crash.
+        if (fnType.isConstructor() || fnType.isInterface()) {
+          // If it's a valid constructor/interface, get its instance type.
           ensureTyped(t, n, fnType.getInstanceType());
         } else {
+          // This path indicates an inconsistency: the type is a FunctionType,
+          // and passed the initial check (e.g., type.isConstructor() was true),
+          // but it's not a constructor or interface type suitable for instantiation.
+          // This should ideally not happen if the type system is perfectly consistent,
+          // but handles edge cases or unexpected states by reporting an error.
+          report(t, n, NOT_A_CONSTRUCTOR);
+          ensureTyped(t, n);
+        }
+      } else {
+        // If type is EmptyType or UnknownType, or a non-function type that somehow
+        // passed the initial 'isConstructor()' check (unlikely), toMaybeFunctionType() will return null.
+        // In such cases, we just ensure the 'new' node itself is typed, potentially as Unknown.
         ensureTyped(t, n);
       }
     } else {
+      // The type is neither a constructor, nor empty, nor unknown.
+      // This means 'new' is used on something that clearly isn't a constructor, e.g., 'new 5'.
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
