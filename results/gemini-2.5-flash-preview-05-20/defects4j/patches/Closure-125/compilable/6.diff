diff --git a/tmp/e0c0b3ec-500d-4d7e-879b-bf0e7ed43f86_buggy.java b/tmp/50705ca1-f209-4d67-9102-4477bef29a37_fixed.java
index 7e43c1c..89da846 100644
--- a/tmp/e0c0b3ec-500d-4d7e-879b-bf0e7ed43f86_buggy.java
+++ b/tmp/50705ca1-f209-4d67-9102-4477bef29a37_fixed.java
@@ -1,19 +1,34 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+
+    // Try to get a FunctionType from the constructor type.
     FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+
+    // Check if fnType is a valid constructor.
+    // If type.isConstructor() was true, fnType should be non-null and also a constructor.
+    // However, if type was EmptyType or UnknownType, fnType will be null,
+    // or if it was a union that resolved to a non-constructor function.
+    if (fnType != null && fnType.isConstructor()) {
+      // If it's a proper constructor function type, proceed.
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
-      } else {
+    } else if (type.isUnknownType() || type.isEmptyType() || (fnType != null && !fnType.isConstructor())) {
+      // If the type is unknown, empty, or it's a function type that is NOT a constructor
+      // (e.g., a function that can't be 'new'ed, or an interface function),
+      // we cannot determine a specific instance type. Treat the result of 'new' as unknown.
+      // The condition `(fnType != null && !fnType.isConstructor())` handles cases where
+      // the outer `type.isConstructor()` might have been false but `type.isEmptyType()`
+      // or `type.isUnknownType()` was true, leading to a non-constructor FunctionType via `toMaybeFunctionType()`,
+      // or to resolve inconsistencies where `type.isConstructor()` was true but `fnType.isConstructor()` is false.
       ensureTyped(t, n);
-      }
     } else {
+      // The type is known, but it's not a constructor, not empty, not unknown.
+      // For example, 'new 5()' or 'new someObject()'.
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
