diff --git a/tmp/25feacbb-dfe2-433f-806c-8c9dfe95c948_buggy.java b/tmp/ac3ef696-da1d-4223-86da-646827035fc0_fixed.java
index 7e43c1c..91c0b4d 100644
--- a/tmp/25feacbb-dfe2-433f-806c-8c9dfe95c948_buggy.java
+++ b/tmp/ac3ef696-da1d-4223-86da-646827035fc0_fixed.java
@@ -1,19 +1,25 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+
+    // Try to resolve the constructor type to a FunctionType.
     FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+
+    // Check if we have a valid constructor or interface function type.
+    if (fnType != null && (fnType.isConstructor() || fnType.isInterface())) {
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
-      } else {
+    } else if (type.isEmptyType() || type.isUnknownType()) {
+      // If the type is empty or unknown, we can't get a specific function type
+      // or instance type, so we just ensure the node has a type.
       ensureTyped(t, n);
-      }
     } else {
+      // The type is not a constructor, interface, empty, or unknown type.
+      // Report an error and ensure the node has a type.
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
