diff --git a/tmp/90108dfc-67ce-4ee1-ad02-cd03625381ac_buggy.java b/tmp/53906a6f-c8e6-4139-ae80-4d64cf11a598_fixed.java
index 7e43c1c..41c8a12 100644
--- a/tmp/90108dfc-67ce-4ee1-ad02-cd03625381ac_buggy.java
+++ b/tmp/53906a6f-c8e6-4139-ae80-4d64cf11a598_fixed.java
@@ -1,19 +1,37 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
       if (fnType != null) {
+        // FunctionType.getInstanceType() throws IllegalStateException if 'this'
+        // is not a constructor, an interface, or an enum type.
+        // Although type.isConstructor() should ideally ensure this,
+        // in complex type inference scenarios (like dead code branches or union types),
+        // fnType might sometimes resolve to a FunctionType that doesn't fit these categories.
+        // Adding an explicit check here prevents the IllegalStateException.
+        if (fnType.isConstructor() || fnType.isInterface() || fnType.isEnumType()) {
           visitParameterList(t, n, fnType);
           ensureTyped(t, n, fnType.getInstanceType());
         } else {
+          // If fnType is a FunctionType but not a constructor, interface, or enum,
+          // then it cannot be used with 'new'. Report an error.
+          report(t, n, NOT_A_CONSTRUCTOR);
+          ensureTyped(t, n);
+        }
+      } else {
+        // This branch is taken if type.isEmptyType() or type.isUnknownType() is true,
+        // as toMaybeFunctionType() returns null for these types.
+        // It also handles NoType, which can result from dead code analysis.
         ensureTyped(t, n);
       }
     } else {
+      // This branch is taken if type is neither a constructor, empty, nor unknown.
+      // This includes cases where type is a regular function type that is not constructible.
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
