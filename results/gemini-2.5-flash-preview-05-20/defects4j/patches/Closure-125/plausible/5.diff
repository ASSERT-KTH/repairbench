diff --git a/tmp/6506ef0c-ef6a-4b36-99bd-06188a5e5738_buggy.java b/tmp/0f98b21f-3aaa-4309-ab05-43eeaed98c5b_fixed.java
index 7e43c1c..d912e67 100644
--- a/tmp/6506ef0c-ef6a-4b36-99bd-06188a5e5738_buggy.java
+++ b/tmp/0f98b21f-3aaa-4309-ab05-43eeaed98c5b_fixed.java
@@ -1,19 +1,33 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
       if (fnType != null) {
+        // If 'type' was a UnionType containing constructor functions,
+        // 'fnType' might be a FunctionType representing their common supertype.
+        // This common supertype FunctionType may not itself be a constructor.
+        // Calling getInstanceType() on a non-constructor FunctionType throws an IllegalStateException.
+        // We must ensure fnType is a constructor before calling getInstanceType().
+        if (fnType.isConstructor()) {
           visitParameterList(t, n, fnType);
           ensureTyped(t, n, fnType.getInstanceType());
         } else {
+          // If fnType is not a constructor (e.g., common supertype of two distinct constructors),
+          // or if it was derived from an empty/unknown type and doesn't represent a precise constructor,
+          // we cannot determine a specific instance type.
+          ensureTyped(t, n);
+        }
+      } else {
+        // This path is taken if 'type' is Empty or Unknown, but not a FunctionType,
+        // or if it's a UnionType that cannot be meaningfully converted to a single FunctionType.
         ensureTyped(t, n);
       }
     } else {
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
