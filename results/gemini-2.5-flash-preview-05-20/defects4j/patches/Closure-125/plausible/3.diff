diff --git a/tmp/237bf4d7-35bf-47d2-ab22-be9ea164a05d_buggy.java b/tmp/5362bfa9-6bb1-4d03-98a9-819721bef6d1_fixed.java
index 7e43c1c..c3858f2 100644
--- a/tmp/237bf4d7-35bf-47d2-ab22-be9ea164a05d_buggy.java
+++ b/tmp/5362bfa9-6bb1-4d03-98a9-819721bef6d1_fixed.java
@@ -1,19 +1,37 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+
+    // If 'type' is a constructor function type, an empty type, or an unknown type,
+    // we attempt to process it as a constructor.
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+
+      // IMPORTANT: If 'type' was a UnionType where one of the types was a constructor
+      // (making type.isConstructor() true), but the common supertype (fnType)
+      // is not a constructor (e.g., the base Function prototype), then calling
+      // fnType.getInstanceType() would throw an IllegalStateException.
+      // We must ensure that the resolved fnType is indeed a constructor or interface
+      // before attempting to get its instance type.
+      if (fnType != null && (fnType.isConstructor() || fnType.isInterface())) {
         visitParameterList(t, n, fnType);
         ensureTyped(t, n, fnType.getInstanceType());
       } else {
+        // This path is taken if:
+        // 1. fnType is null (e.g., type was EmptyType or UnknownType, or a non-function type).
+        // 2. fnType is a FunctionType, but it's not a constructor or interface
+        //    (e.g., a generic FunctionType that is not a constructor, possibly derived
+        //    from a UnionType where type.isConstructor() was true due to a constituent type).
+        // In these cases, we cannot reliably determine the instance type, so we
+        // ensure a basic type (often unknown) for the 'new' expression.
         ensureTyped(t, n);
       }
     } else {
+      // If the type is definitively not a constructor, report an error.
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
\ No newline at end of file
