diff --git a/tmp/2d506bd8-2759-472b-9b45-030300be61b1_buggy.java b/tmp/2ea7a1da-73a2-4cd1-9448-8dd3193376f5_fixed.java
index 7e43c1c..a8cda24 100644
--- a/tmp/2d506bd8-2759-472b-9b45-030300be61b1_buggy.java
+++ b/tmp/2ea7a1da-73a2-4cd1-9448-8dd3193376f5_fixed.java
@@ -1,19 +1,45 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+
+    // The original logic groups constructor, empty, and unknown types.
+    // Let's refine this to explicitly handle constructors and then fallback for empty/unknown types.
+    if (type.isConstructor()) {
       FunctionType fnType = type.toMaybeFunctionType();
+      // If type.isConstructor() is true, fnType should always be a non-null FunctionType.
+      // However, defensive programming or unexpected internal states might make it null.
       if (fnType != null) {
         visitParameterList(t, n, fnType);
-        ensureTyped(t, n, fnType.getInstanceType());
+        
+        // Get the instance type that the constructor creates.
+        JSType instanceType = fnType.getInstanceType();
+        
+        // Fix for Issue 1002: If the instance type is NoType or UnknownType,
+        // it means the constructor doesn't produce a meaningful instance,
+        // or its type is not well-defined. In such cases,
+        // typing the NEW node with that specific instanceType might lead to
+        // IllegalStateException if later code expects a concrete ObjectType.
+        // Instead, we ensure the node is typed as UnknownType.
+        if (instanceType.isNoType() || instanceType.isUnknownType()) {
+          ensureTyped(t, n); // Assigns UnknownType
         } else {
+          ensureTyped(t, n, instanceType); // Assigns the actual instance type
+        }
+      } else {
+        // Fallback: If isConstructor() was true but toMaybeFunctionType() returns null,
+        // it indicates an internal compiler inconsistency. Treat as unknown.
         ensureTyped(t, n);
       }
+    } else if (type.isEmptyType() || type.isUnknownType()) {
+      // If the constructor's type is empty or unknown, we cannot verify it.
+      // Assign UnknownType to the NEW node.
+      ensureTyped(t, n);
     } else {
+      // If the type is not a constructor, empty, or unknown, report an error.
       report(t, n, NOT_A_CONSTRUCTOR);
-      ensureTyped(t, n);
+      ensureTyped(t, n); // Assign UnknownType.
     }
   }
\ No newline at end of file
