diff --git a/tmp/7063179c-1399-43c2-b421-3506e87db088_buggy.java b/tmp/8a441dcb-8166-498c-a5d6-a6175701f602_fixed.java
index cb1fb60..fca5b36 100644
--- a/tmp/7063179c-1399-43c2-b421-3506e87db088_buggy.java
+++ b/tmp/8a441dcb-8166-498c-a5d6-a6175701f602_fixed.java
@@ -1,73 +1,83 @@
     /**
      * <p>
      * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once
      * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached. The "-1"
      * call is not necessary when decoding, but it doesn't hurt, either.
      * </p>
      * <p>
      * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are
      * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,
      * garbage-out philosophy: it will not check the provided data for validity.
      * </p>
      * <p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations, and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      * 
      * @param in
      *            byte[] array of ascii data to base64 decode.
      * @param inPos
      *            Position to start reading data from.
      * @param inAvail
      *            Amount of bytes available from input for encoding.
      */
     void decode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
-        if (inAvail < 0) {
+        if (inAvail < 0) { // EOF signal
             eof = true;
         }
+
+        // Loop for processing actual input data bytes
+        // The loop condition `i < inAvail` correctly handles `inAvail < 0` by not iterating.
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             byte b = in[inPos++];
             if (b == PAD) {
                 // We're done.
                 eof = true;
-                break;
+                break; // Exit the loop as padding implies end of encoded data
             } else {
                 if (b >= 0 && b < DECODE_TABLE.length) {
                     int result = DECODE_TABLE[b];
-                    if (result >= 0) {
+                    if (result >= 0) { // Only process valid base64 characters
                         modulus = (++modulus) % 4;
                         x = (x << 6) + result;
-                        if (modulus == 0) {
+                        if (modulus == 0) { // A full 4-char block has been accumulated
                             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                             buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                             buffer[pos++] = (byte) (x & MASK_8BITS);
                         }
                     }
                 }
             }
         }
 
         // Two forms of EOF as far as base64 decoder is concerned: actual
         // EOF (-1) and first time '=' character is encountered in stream.
         // This approach makes the '=' padding characters completely optional.
         if (eof && modulus != 0) {
+            // Fix for CODEC-98: Ensure buffer is initialized if there's pending
+            // data (modulus != 0) and EOF is reached, especially if the loop
+            // above didn't execute (e.g., inAvail was -1 from the start, or
+            // input was too short to trigger buffer expansion/initialization).
+            if (buffer == null) {
+                resizeBuffer();
+            }
             
-            x = x << 6;
+            x = x << 6; // Left-shift by 6 bits to prepare for final byte extraction
             switch (modulus) {
-                case 2 :
-                    x = x << 6;
+                case 2 : // Two characters decoded, 1 byte output expected
+                    x = x << 6; // Another left-shift by 6 bits
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     break;
-                case 3 :
+                case 3 : // Three characters decoded, 2 bytes output expected
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                     break;
             }
         }
     }
\ No newline at end of file
