diff --git a/tmp/648ed3dc-080e-4d4d-8856-fd7bbbbf145b_buggy.java b/tmp/944ca95d-2f67-43c7-b602-94351966c991_fixed.java
index 25c13b3..1f13c95 100644
--- a/tmp/648ed3dc-080e-4d4d-8856-fd7bbbbf145b_buggy.java
+++ b/tmp/944ca95d-2f67-43c7-b602-94351966c991_fixed.java
@@ -1,15 +1,26 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      * 
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
+        // The mean of an F-distribution is d / (d - 2) for d > 2.
+        // For d <= 2, the mean is undefined or leads to division by zero/negative values.
+        // The inverseCumulativeProbability method requires a positive initial guess
+        // within the domain [0, +infinity).
+        if (d > 2.0) {
+            // Use mean if it's well-defined and positive
             ret = d / (d - 2.0);
+        } else {
+            // For d <= 2.0, the mean is undefined or non-positive.
+            // Provide a small, sensible positive initial guess to allow the solver to proceed.
+            // A value like 1.0 or 0.5 is a common robust choice for an initial positive guess.
+            ret = 1.0; 
+        }
         return ret;
     }
\ No newline at end of file
