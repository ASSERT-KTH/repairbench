diff --git a/tmp/8db55dec-84bd-4a01-b149-147ba195fb1a_buggy.java b/tmp/4938ea16-62c9-43bb-b404-2824e4990bbc_fixed.java
index 25c13b3..69da861 100644
--- a/tmp/8db55dec-84bd-4a01-b149-147ba195fb1a_buggy.java
+++ b/tmp/4938ea16-62c9-43bb-b404-2824e4990bbc_fixed.java
@@ -1,15 +1,25 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      * 
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
+        
+        // The mean of the F-distribution is d / (d - 2.0) for d > 2.0.
+        // If d <= 2.0, the mean is undefined or problematic (negative or infinite).
+        // Since the F-distribution is defined for positive values (x > 0),
+        // the initial domain value must also be positive.
+        // For small degrees of freedom (d <= 2.0), a fixed positive value
+        // like 1.0 is a common and safe initial guess.
+        if (d > 2.0) {
             ret = d / (d - 2.0);
+        } else {
+            ret = 1.0; // Fallback for d <= 2.0, ensuring a positive initial guess
+        }
         return ret;
     }
\ No newline at end of file
