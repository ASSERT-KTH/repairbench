diff --git a/tmp/be266864-e556-42b3-b780-c2115ec472c6_buggy.java b/tmp/b80bf23a-141b-4ed5-a57c-1f16fb345755_fixed.java
index 25c13b3..9cfce7d 100644
--- a/tmp/be266864-e556-42b3-b780-c2115ec472c6_buggy.java
+++ b/tmp/b80bf23a-141b-4ed5-a57c-1f16fb345755_fixed.java
@@ -1,15 +1,28 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      * 
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
+        // The mean of the F-distribution, d / (d - 2.0), is only defined for d > 2.0.
+        // For d <= 2.0, the mean is undefined or infinite.
+        // In these cases, using the mean formula can lead to negative values (e.g., d=1)
+        // or division by zero (e.g., d=2), causing IllegalArgumentException in the solver.
+        // A safe initial guess within the domain [0, +infinity) is 0.0,
+        // which is the lower bound of the F-distribution's domain.
+        // This is consistent with how some other distributions (e.g., TDistribution)
+        // handle cases where their characteristic values are undefined for small degrees of freedom.
+        if (d > 2.0) {
+            // Use the mean when it is well-defined
             ret = d / (d - 2.0);
+        } else {
+            // For d <= 2.0, return the lower bound of the domain as a safe initial guess.
+            ret = 0.0;
+        }
         return ret;
     }
\ No newline at end of file
