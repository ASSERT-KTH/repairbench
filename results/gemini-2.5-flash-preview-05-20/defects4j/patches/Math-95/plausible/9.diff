diff --git a/tmp/ac64b4d6-d372-427c-81c8-ef68040d66bf_buggy.java b/tmp/e9bbf5e3-b6c0-4cd9-916b-88c2b6401884_fixed.java
index 25c13b3..5822850 100644
--- a/tmp/ac64b4d6-d372-427c-81c8-ef68040d66bf_buggy.java
+++ b/tmp/e9bbf5e3-b6c0-4cd9-916b-88c2b6401884_fixed.java
@@ -1,15 +1,23 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      * 
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
+        // The mean of the F-distribution is d / (d - 2.0), but only if d > 2.0.
+        // If d <= 2.0, the mean is undefined or negative.
+        // In such cases, a positive initial domain value is required for the
+        // root-finding algorithm to avoid IllegalArgumentException for invalid bounds.
+        if (d <= 2.0) {
+            ret = 1.0; // Use a sensible default positive value.
+        } else {
             // use mean
             ret = d / (d - 2.0);
+        }
         return ret;
     }
\ No newline at end of file
