diff --git a/tmp/9ddb35a1-5503-49c1-a2e6-f213949b67d8_buggy.java b/tmp/4a2e01b3-54dc-4757-ad74-e2b262930d24_fixed.java
index 25c13b3..53259b4 100644
--- a/tmp/9ddb35a1-5503-49c1-a2e6-f213949b67d8_buggy.java
+++ b/tmp/4a2e01b3-54dc-4757-ad74-e2b262930d24_fixed.java
@@ -1,15 +1,25 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      * 
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
+        // The mean of the F-distribution is d / (d - 2.0) for d > 2.0.
+        // If d <= 2.0, the mean is undefined (for d < 2) or infinite (for d = 2).
+        // In such cases, a different initial value is needed for the root-finding
+        // algorithm, as a negative or infinite value would be invalid.
+        // A value of 1.0 is often a good heuristic, especially since the median
+        // of F(1,1) is 1.0 and many F-distributions are centered around 1.0.
+        if (d <= 2.0) {
+            ret = 1.0;
+        } else {
             // use mean
             ret = d / (d - 2.0);
+        }
         return ret;
     }
\ No newline at end of file
