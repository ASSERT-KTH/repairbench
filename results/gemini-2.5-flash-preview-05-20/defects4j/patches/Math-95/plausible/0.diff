diff --git a/tmp/c5b0b8f3-6a74-49b6-9d1b-75cd99fb7d22_buggy.java b/tmp/35eb74b2-118d-4816-9be2-a2c7fa20b34d_fixed.java
index 25c13b3..824cd8d 100644
--- a/tmp/c5b0b8f3-6a74-49b6-9d1b-75cd99fb7d22_buggy.java
+++ b/tmp/35eb74b2-118d-4816-9be2-a2c7fa20b34d_fixed.java
@@ -1,15 +1,34 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      * 
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
+        
+        // The mean of the F-distribution is d / (d - 2.0), but this is only
+        // defined and finite if the denominator degrees of freedom (d) is greater than 2.0.
+        // For d <= 2.0, the mean is undefined or infinite, and using this formula
+        // would lead to negative or infinite initial values, causing the
+        // inverseCumulativeProbability method to fail with an IllegalArgumentException.
+        if (d > 2.0) {
+            // Use the mean as an initial guess when it's well-defined and finite.
             ret = d / (d - 2.0);
+        } else {
+            // For small degrees of freedom (d <= 2.0), the mean is not a valid
+            // initial guess. Provide a robust, small positive value as a fallback.
+            // The F-distribution is defined on (0, infinity), so the initial guess
+            // must be positive. Heuristic values like 0.5 or 1.0 are often used
+            // as starting points for numerical root-finding algorithms in such cases.
+            if (p < 0.5) {
+                ret = 0.5;
+            } else {
+                ret = 1.0;
+            }
+        }
         return ret;
     }
\ No newline at end of file
