diff --git a/tmp/cb852ecc-00ed-43d9-b4e0-c213e407e6e0_buggy.java b/tmp/70bb756b-fa79-49bf-afdf-fed427ba3ff8_fixed.java
index 25c13b3..452a125 100644
--- a/tmp/cb852ecc-00ed-43d9-b4e0-c213e407e6e0_buggy.java
+++ b/tmp/70bb756b-fa79-49bf-afdf-fed427ba3ff8_fixed.java
@@ -1,15 +1,29 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      * 
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
+        
+        // The mean of the F-distribution is d / (d - 2.0), but it is only defined
+        // for d > 2.0. If d <= 2.0, the mean is not defined or infinite/negative.
+        // The inverseCumulativeProbability method expects a positive initial guess
+        // for the F-distribution, which is defined on [0, +infinity).
+        // The current implementation returns a negative value (-1.0) when d=1.0,
+        // which causes an IllegalArgumentException.
+        // For d <= 2.0, we need a fallback positive initial value.
+        if (d > 2.0) {
+            // Use the mean when it is well-defined and positive.
             ret = d / (d - 2.0);
+        } else {
+            // When d <= 2.0, the mean is not a suitable initial guess.
+            // Provide a common positive initial value. 1.0 is a reasonable default.
+            ret = 1.0;
+        }
         return ret;
     }
\ No newline at end of file
