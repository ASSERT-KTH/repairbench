diff --git a/tmp/b3b9a859-6a66-4cdb-bf80-33f1cad7394f_buggy.java b/tmp/35051e1c-6585-42d3-98cb-5e04e6115f0e_fixed.java
index 2b35d23..e074113 100644
--- a/tmp/b3b9a859-6a66-4cdb-bf80-33f1cad7394f_buggy.java
+++ b/tmp/35051e1c-6585-42d3-98cb-5e04e6115f0e_fixed.java
@@ -1,8 +1,25 @@
     /** Compute the maximum of two values
      * @param a first value
      * @param b second value
      * @return b if a is lesser or equal to b, a otherwise
      */
     public static float max(final float a, final float b) {
-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
+        // The original code was:
+        // return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
+        //
+        // This failed for cases like max(50.0f, -50.0f) because:
+        // 1. (50.0f <= -50.0f) is false.
+        // 2. The code then enters the 'else' branch: (Float.isNaN(a + b) ? Float.NaN : b)
+        // 3. a + b = 50.0f + (-50.0f) = 0.0f.
+        // 4. Float.isNaN(0.0f) is false.
+        // 5. The expression evaluates to 'b', which is -50.0f, while 50.0f was expected.
+        //
+        // The problem is that when 'a' is indeed greater than 'b' (and neither is NaN),
+        // the function should return 'a', but it was returning 'b' in the non-NaN case
+        // of the 'else' branch.
+        //
+        // The fix is to change the final 'b' to 'a' in the ternary operation's 'else' part.
+        // This preserves the NaN handling (if a or b is NaN, a+b is NaN, so NaN is returned)
+        // and correctly returns 'a' when 'a' is the greater non-NaN value.
+        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);
     }
\ No newline at end of file
