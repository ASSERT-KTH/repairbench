diff --git a/tmp/44b88936-8938-4ba4-a5e6-dd452800ad31_buggy.java b/tmp/431f9cc0-2446-4c5c-b061-f8f5c9b3390b_fixed.java
index 2b35d23..caef6b5 100644
--- a/tmp/44b88936-8938-4ba4-a5e6-dd452800ad31_buggy.java
+++ b/tmp/431f9cc0-2446-4c5c-b061-f8f5c9b3390b_fixed.java
@@ -1,8 +1,31 @@
     /** Compute the maximum of two values
      * @param a first value
      * @param b second value
      * @return b if a is lesser or equal to b, a otherwise
      */
     public static float max(final float a, final float b) {
-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
+        // Handle NaN: if either argument is NaN, the result is NaN.
+        // According to Math.max behavior, if 'a' is NaN, 'a' is returned.
+        // If 'a' is not NaN but 'b' is NaN, 'b' is returned.
+        if (a != a) { // Checks if 'a' is NaN
+            return a;
+        }
+        if (b != b) { // Checks if 'b' is NaN
+            return b;
+        }
+
+        // Handle signed zeros as per Math.max behavior.
+        // Math.max considers -0.0f strictly smaller than +0.0f.
+        // The simple comparison (a >= b) ? a : b would incorrectly return -0.0f
+        // for max(-0.0f, +0.0f) because -0.0f == +0.0f is true in Java,
+        // making -0.0f >= +0.0f also true, thus returning 'a' (-0.0f).
+        // This specific check ensures that if 'a' is -0.0f and 'b' is +0.0f,
+        // 'b' (+0.0f) is returned.
+        if (a == 0.0f && b == 0.0f && Float.floatToRawIntBits(a) == 0x80000000) {
+            return b;
+        }
+
+        // Standard comparison for non-NaN and non-conflicting zero cases.
+        // For max(+0.0f, -0.0f), (a >= b) is true (+0.0f >= -0.0f), so 'a' (+0.0f) is returned, which is correct.
+        return (a >= b) ? a : b;
     }
\ No newline at end of file
