diff --git a/tmp/22b7d0c8-69f9-482b-9b1e-86f10d6c7893_buggy.java b/tmp/239d93c8-5679-4c10-8b32-b357e64785a8_fixed.java
index 7c7fdc2..e1126bc 100644
--- a/tmp/22b7d0c8-69f9-482b-9b1e-86f10d6c7893_buggy.java
+++ b/tmp/239d93c8-5679-4c10-8b32-b357e64785a8_fixed.java
@@ -1,81 +1,110 @@
     static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {
         if (input == null) // empty body
             return new Document(baseUri);
         input = ConstrainableInputStream.wrap(input, bufferSize, 0);
 
         Document doc = null;
         boolean fullyRead = false;
 
         // read the start of the stream and look for a BOM or meta charset
         input.mark(bufferSize);
         ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.
         fullyRead = input.read() == -1;
         input.reset();
 
         // look for BOM - overrides any other header or input
         BomCharset bomCharset = detectCharsetFromBom(firstBytes);
         if (bomCharset != null)
             charsetName = bomCharset.charset;
 
         if (charsetName == null) { // determine from meta. safe first parse as UTF-8
             String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();
             doc = parser.parseInput(docData, baseUri);
 
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");
             String foundCharset = null; // if not found, will keep utf-8 as best attempt
             for (Element meta : metaElements) {
                 if (meta.hasAttr("http-equiv"))
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset"))
                     foundCharset = meta.attr("charset");
                 if (foundCharset != null)
                     break;
             }
 
             // look for <?xml encoding='ISO-8859-1'?>
             if (foundCharset == null && doc.childNodeSize() > 0) {
                 Node first = doc.childNode(0);
                 XmlDeclaration decl = null;
                 if (first instanceof XmlDeclaration)
                     decl = (XmlDeclaration) first;
                 else if (first instanceof Comment) {
                     Comment comment = (Comment) first;
                     if (comment.isXmlDeclaration())
                         decl = comment.asXmlDeclaration();
                 }
                 if (decl != null) {
                     if (decl.name().equalsIgnoreCase("xml"))
                         foundCharset = decl.attr("encoding");
                 }
             }
             foundCharset = validateCharset(foundCharset);
             if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 doc = null;
             } else if (!fullyRead) {
                 doc = null;
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         }
         if (doc == null) {
             if (charsetName == null)
                 charsetName = defaultCharset;
             BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
             if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here
                 reader.skip(1);
             try {
                 doc = parser.parseInput(reader, baseUri);
             } catch (UncheckedIOException e) {
                 // io exception when parsing (not seen before because reading the stream as we go)
                 throw e.ioException();
             }
             Charset charset = Charset.forName(charsetName);
-            doc.outputSettings().charset(charset);
-                // some charsets can read but not encode; switch to an encodable charset and update the meta el
+            
+            // Check if the current charset can be encoded. If not, fallback to UTF-8
+            if (!charset.canEncode()) {
+                charsetName = defaultCharset; // Switch to UTF-8
+                charset = Charset.forName(charsetName); // Get the UTF-8 Charset object
+            }
+            
+            doc.outputSettings().charset(charset); // Set the document's output charset
+
+            // Update the meta charset element(s) in the document if the charset was changed
+            // This ensures that doc.outerHtml() reflects the fallback charset.
+            Elements metaCharsetElements = doc.head().select("meta[charset]");
+            if (metaCharsetElements.isEmpty()) {
+                // If no meta charset exists, and we've fallen back to UTF-8, add one.
+                doc.head().appendElement("meta").attr("charset", charsetName);
+            } else {
+                // Update the charset attribute of the first meta[charset] element.
+                // Assuming only one relevant meta charset.
+                metaCharsetElements.first().attr("charset", charsetName);
+            }
+
+            // Also update any meta http-equiv="content-type" elements if they contain a charset definition.
+            Elements httpEquivCharsetElements = doc.head().select("meta[http-equiv=content-type]");
+            for (Element meta : httpEquivCharsetElements) {
+                String content = meta.attr("content");
+                if (content != null && content.toLowerCase().contains("charset=")) {
+                    // Replace the existing charset in the content attribute with the new charsetName
+                    String updatedContent = content.replaceAll("(?i)(charset=)[^;]+", "$1" + charsetName);
+                    meta.attr("content", updatedContent);
+                }
+            }
         }
         input.close();
         return doc;
     }
\ No newline at end of file
