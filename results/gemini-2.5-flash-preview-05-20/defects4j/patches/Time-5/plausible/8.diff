diff --git a/tmp/003d756e-1cb7-481f-a757-ee4328c4c6c6_buggy.java b/tmp/56d96b90-0bc4-4a7b-9835-eabdcefdbfe0_fixed.java
index dbda381..da1fa29 100644
--- a/tmp/003d756e-1cb7-481f-a757-ee4328c4c6c6_buggy.java
+++ b/tmp/56d96b90-0bc4-4a7b-9835-eabdcefdbfe0_fixed.java
@@ -1,54 +1,97 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+
+        // Calculate milliseconds from lower-order fields (weeks, days, hours, minutes, seconds, millis).
+        // These fields are independent of years/months in the standard normalization.
+        long lowerOrderMillis = getMillis();
+        lowerOrderMillis = FieldUtils.safeAdd(lowerOrderMillis, ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND);
+        lowerOrderMillis = FieldUtils.safeAdd(lowerOrderMillis, ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE);
+        lowerOrderMillis = FieldUtils.safeAdd(lowerOrderMillis, ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR);
+        lowerOrderMillis = FieldUtils.safeAdd(lowerOrderMillis, ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY);
+        lowerOrderMillis = FieldUtils.safeAdd(lowerOrderMillis, ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK);
+
+        // Create an initial Period object from the lower-order milliseconds.
+        // This will distribute the millis into supported fields of 'type'.
+        Period result = new Period(lowerOrderMillis, type, ISOChronology.getInstanceUTC());
+
+        // Handle years and months separately as per standard normalization rules.
+        // Years and months are not converted to milliseconds.
+        int originalYears = getYears();
+        int originalMonths = getMonths();
+
+        if (originalYears != 0 || originalMonths != 0) {
+            int normalizedYears = 0;
+            int normalizedMonths = 0;
+
+            // Determine how to normalize years and months based on the target PeriodType.
+            if (type.isSupported(DurationFieldType.months())) {
+                // If the PeriodType supports months, we can consolidate years into months.
+                long totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(originalYears, 12), originalMonths);
+
+                if (type.isSupported(DurationFieldType.years())) {
+                    // If PeriodType supports both years and months, split totalMonths into
+                    // normalized years and months (months 0-11).
+                    normalizedYears = (int) (totalMonths / 12);
+                    normalizedMonths = (int) (totalMonths % 12);
+                } else {
+                    // If PeriodType supports months but not years, convert all to months.
+                    // Years field effectively becomes zero in the result, as its value is rolled into months.
+                    normalizedYears = 0;
+                    // The cast to int will throw ArithmeticException if totalMonths exceeds int range,
+                    // which is the expected behavior for "field too large to be represented".
+                    normalizedMonths = (int) totalMonths;
                 }
-            if (months != 0) {
-                result = result.withMonths(months);
+            } else {
+                // If PeriodType does NOT support months (e.g., PeriodType.days()),
+                // then years cannot be converted to months, and months cannot be stored.
+                // In this case, any non-zero originalYears or originalMonths
+                // must lead to an UnsupportedOperationException if applied.
+                // We keep them as their original values, and the subsequent `withYears`/`withMonths`
+                // calls will throw the UOE if the field is not supported and the value is non-zero.
+                normalizedYears = originalYears;
+                normalizedMonths = originalMonths;
+            }
+
+            // Apply the normalized (or original, if not convertible) years and months to the result.
+            // These calls will throw UnsupportedOperationException if the field is not supported
+            // by the PeriodType and the value is non-zero.
+            if (normalizedYears != 0) {
+                result = result.withYears(normalizedYears);
+            }
+            if (normalizedMonths != 0) {
+                result = result.withMonths(normalizedMonths);
             }
         }
         return result;
     }
\ No newline at end of file
