diff --git a/tmp/0bc19ea5-23a6-4dbc-95c2-2fa81ff9a339_buggy.java b/tmp/116bf9a7-452b-4a02-a59f-895957e2be2d_fixed.java
index dbda381..eaf53b2 100644
--- a/tmp/0bc19ea5-23a6-4dbc-95c2-2fa81ff9a339_buggy.java
+++ b/tmp/116bf9a7-452b-4a02-a59f-895957e2be2d_fixed.java
@@ -1,54 +1,82 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+
+        // Start with a period of zero for the target type.
+        // This ensures the result period has the correct PeriodType and all fields are initialized to 0.
+        Period result = new Period(0, type, ISOChronology.getInstanceUTC());
+
+        // Handle years and months specially, as they don't have fixed millisecond equivalents.
+        int currentYears = getYears();
+        int currentMonths = getMonths();
+
+        if (currentYears != 0 || currentMonths != 0) {
+            // Combine years and months into a total month count for internal processing.
+            int totalCurrentMonths = FieldUtils.safeAdd(currentMonths, FieldUtils.safeMultiply(currentYears, 12));
+
+            if (type.isSupported(DurationFieldType.years())) {
+                // If years field is supported, normalize months into 0-11 and adjust years.
+                // Add to existing years/months in result (initially 0, but good practice).
+                result = result.withYears(FieldUtils.safeAdd(totalCurrentMonths / 12, result.getYears()));
+                result = result.withMonths(FieldUtils.safeAdd(totalCurrentMonths % 12, result.getMonths()));
+            } else if (type.isSupported(DurationFieldType.months())) {
+                // If only months field is supported (but not years), convert all to months.
+                result = result.withMonths(FieldUtils.safeAdd(totalCurrentMonths, result.getMonths()));
+            } else {
+                // Neither years nor months are supported by the PeriodType, but the source period has them.
+                // Throw an exception as per the Javadoc contract.
+                throw new UnsupportedOperationException("Field is not supported");
             }
-            if (months != 0) {
-                result = result.withMonths(months);
         }
+
+        // Handle other time-based fields (weeks, days, hours, minutes, seconds, milliseconds).
+        // These are converted into total milliseconds using standard fixed rules.
+        long lowerMillis = getMillis();
+        lowerMillis = FieldUtils.safeAdd(lowerMillis, ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND);
+        lowerMillis = FieldUtils.safeAdd(lowerMillis, ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE);
+        lowerMillis = FieldUtils.safeAdd(lowerMillis, ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR);
+        lowerMillis = FieldUtils.safeAdd(lowerMillis, ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY);
+        lowerMillis = FieldUtils.safeAdd(lowerMillis, ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK);
+
+        if (lowerMillis != 0) {
+            // Create a temporary Period from these lower milliseconds.
+            // This constructor will automatically distribute `lowerMillis` into fields
+            // supported by `type` (e.g., if type supports weeks, it will extract weeks from millis).
+            Period lowerPeriod = new Period(lowerMillis, type, ISOChronology.getInstanceUTC());
+            // Add this temporary period to the result. The `plus` method ensures
+            // fields are combined according to the `result`'s PeriodType.
+            result = result.plus(lowerPeriod);
         }
+
         return result;
     }
\ No newline at end of file
