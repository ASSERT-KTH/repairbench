diff --git a/tmp/0b8bb2fc-17f2-4fac-927e-fa7c1d984593_buggy.java b/tmp/fda3a490-bf3c-45e7-91c7-bb36d2b6883d_fixed.java
index dbda381..c031d18 100644
--- a/tmp/0b8bb2fc-17f2-4fac-927e-fa7c1d984593_buggy.java
+++ b/tmp/fda3a490-bf3c-45e7-91c7-bb36d2b6883d_fixed.java
@@ -1,54 +1,99 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+
+        // Calculate total milliseconds from standard time-based fields.
+        // The original method correctly accumulates these into 'millis'.
+        long millis = getMillis();
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+
+        // Create the initial result period based on accumulated milliseconds and the PeriodType.
+        // This will handle the time-based fields according to the PeriodType.
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // Handle years and months separately as they do not have a fixed millisecond duration.
         int years = getYears();
         int months = getMonths();
+
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
+            // Calculate total months. Using long to prevent overflow during intermediate calculations.
+            long totalMonths = (long) years * 12 + months;
+
+            boolean typeSupportsYears = type.isSupported(DurationFieldType.years());
+            boolean typeSupportsMonths = type.isSupported(DurationFieldType.months());
+
+            if (typeSupportsYears && typeSupportsMonths) {
+                // If both years and months are supported, normalize months to 0-11 and adjust years.
+                years = FieldUtils.safeToInt(totalMonths / 12);
+                months = FieldUtils.safeToInt(totalMonths % 12);
+                
                 if (years != 0) {
                     result = result.withYears(years);
                 }
                 if (months != 0) {
                     result = result.withMonths(months);
                 }
+            } else if (typeSupportsMonths) {
+                // If only months are supported, convert all years into months.
+                months = FieldUtils.safeToInt(totalMonths);
+                if (months != 0) {
+                    result = result.withMonths(months);
+                }
+            } else if (typeSupportsYears) {
+                // This is an unusual case (years without months). If only years are supported,
+                // convert total months to years. Any remaining months cannot be represented.
+                years = FieldUtils.safeToInt(totalMonths / 12);
+                if (totalMonths % 12 != 0) {
+                    throw new UnsupportedOperationException(
+                        "PeriodType does not support months, and " + (totalMonths % 12) + " months remain after conversion to years."
+                    );
+                }
+                if (years != 0) {
+                    result = result.withYears(years);
+                }
+            } else {
+                // Neither years nor months are supported by the PeriodType.
+                // If there are non-zero years or months, throw an exception as per javadoc.
+                if (totalMonths != 0) {
+                    throw new UnsupportedOperationException(
+                        "PeriodType does not support years or months and these fields are non-zero"
+                    );
+                }
+            }
         }
         return result;
     }
\ No newline at end of file
