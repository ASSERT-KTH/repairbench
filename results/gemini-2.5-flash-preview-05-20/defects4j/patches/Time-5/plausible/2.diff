diff --git a/tmp/4390edf8-bb89-4bd9-aea9-d08caf23de83_buggy.java b/tmp/2b290142-06a3-4762-91fd-183d01276cad_fixed.java
index dbda381..5e66985 100644
--- a/tmp/4390edf8-bb89-4bd9-aea9-d08caf23de83_buggy.java
+++ b/tmp/2b290142-06a3-4762-91fd-183d01276cad_fixed.java
@@ -1,54 +1,92 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
         int years = getYears();
         int months = getMonths();
-        if (years != 0 || months != 0) {
+
+        // Step 1: Handle years. If the target PeriodType does not support years,
+        // convert them to months if months are supported, otherwise throw.
+        if (years != 0) {
+            if (!type.isSupported(DurationFieldType.years())) {
+                if (type.isSupported(DurationFieldType.months())) {
+                    months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
+                    years = 0; // Years are now represented in months
+                } else {
+                    // Neither years nor months are supported for a non-zero years value
+                    throw new UnsupportedOperationException("Field is not supported: Years");
+                }
+            }
+            // Else (years are supported by type), years remain as they are for now.
+        }
+
+        // Step 2: Handle months. If the target PeriodType does not support months, throw.
+        // If years are supported, normalize months into years (e.g., 15 months -> 1 year 3 months).
+        if (months != 0) {
+            if (!type.isSupported(DurationFieldType.months())) {
+                // If months are non-zero but not supported by the type, throw an exception.
+                // If years was non-zero and not supported, it would have already thrown above.
+                throw new UnsupportedOperationException("Field is not supported: Months");
+            }
+            // If months are supported and years are also supported, normalize months into years.
+            if (type.isSupported(DurationFieldType.years())) {
                 years = FieldUtils.safeAdd(years, months / 12);
                 months = months % 12;
+            }
+            // Else (months supported, but years not), `years` would be 0 from the previous step
+            // if it was non-zero originally and converted. `months` now contains the combined value
+            // and no further normalization into years is applicable.
+        }
+        
+        // Calculate milliseconds from time-based fields (milliseconds, seconds, minutes, hours, days, weeks)
+        long millis = getMillis();
+        millis = FieldUtils.safeAdd(millis, ((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+        millis = FieldUtils.safeAdd(millis, ((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+        millis = FieldUtils.safeAdd(millis, ((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        millis = FieldUtils.safeAdd(millis, ((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
+        millis = FieldUtils.safeAdd(millis, ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+
+        // Create the initial period based on the accumulated milliseconds and the target type
+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+        
+        // Apply the processed years and months to the result period.
+        // These values are already adjusted to be compatible with 'type' or an exception was thrown earlier.
         if (years != 0) {
             result = result.withYears(years);
         }
         if (months != 0) {
             result = result.withMonths(months);
         }
-        }
+        
         return result;
     }
\ No newline at end of file
