diff --git a/tmp/d8e20fc4-062f-4b58-8afe-54bc3b08a042_buggy.java b/tmp/02e648b7-2a6c-4497-ab77-ca529c707829_fixed.java
index dbda381..5abbcaa 100644
--- a/tmp/d8e20fc4-062f-4b58-8afe-54bc3b08a042_buggy.java
+++ b/tmp/02e648b7-2a6c-4497-ab77-ca529c707829_fixed.java
@@ -1,54 +1,116 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // Standardize years and months first, so months are 0-11 as per javadoc.
+        // This is the "internal" normalization (e.g., 1 year 15 months -> 2 years 3 months)
+        // This logic is adapted from Period.normalized() to ensure proper canonical form.
         int years = getYears();
         int months = getMonths();
+
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
+            // Consolidate years into months, then normalize the total months.
+            // This handles cases like (-2 years, 15 months) correctly.
+            months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
+            years = 0; // Years are now consolidated into months
+
+            if (months != 0) {
+                years = months / 12;
                 months = months % 12;
+            }
+            // If months is negative (e.g., -15 months results in -3 months),
+            // adjust it to be positive (0-11) and decrement years accordingly.
+            // Example: -1 year, -3 months becomes -2 years, 9 months.
+            if (months < 0) {
+                months += 12;
+                years--;
+            }
+        }
+
+        // Calculate total milliseconds from all time-based fields.
+        // This accumulation is done on a long to prevent overflow.
+        long millis = getMillis();
+        millis = FieldUtils.safeAdd(millis, ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND);
+        millis = FieldUtils.safeAdd(millis, ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE);
+        millis = FieldUtils.safeAdd(millis, ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR);
+        millis = FieldUtils.safeAdd(millis, ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY);
+        millis = FieldUtils.safeAdd(millis, ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK);
+
+        // Create an initial Period with the calculated milliseconds and the target PeriodType.
+        // The constructor will distribute 'millis' among the supported time fields of 'type'
+        // (milliseconds, seconds, minutes, hours, days, weeks) according to standard rules.
+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // Now, handle the years and months part, considering the target PeriodType.
+        // The original problem arose because withYears/withMonths were called directly
+        // on a Period object whose type might not support those fields.
+        // This updated logic checks for type support and performs conversions/throws exceptions as necessary.
+        if (type.isSupported(DurationFieldType.years())) {
+            // If the PeriodType supports years, we can set the normalized years directly.
             if (years != 0) {
                 result = result.withYears(years);
             }
+            if (type.isSupported(DurationFieldType.months())) {
+                // If months are also supported, set the normalized months (0-11) directly.
                 if (months != 0) {
                     result = result.withMonths(months);
                 }
+            } else {
+                // PeriodType supports years but NOT months.
+                // As per Javadoc: "UnsupportedOperationException if this period contains non-zero
+                // years or months but the specified period type does not support them".
+                // Here, 'months' is already normalized to [0, 11]. If it's non-zero, it's an error.
+                if (months != 0) {
+                    throw new UnsupportedOperationException("PeriodType does not support months, but months are present");
                 }
+            }
+        } else if (type.isSupported(DurationFieldType.months())) {
+            // PeriodType does NOT support years, but it DOES support months.
+            // In this case, years must be converted to months and added to the existing months.
+            // This handles cases like PeriodType.months().
+            // 'years' and 'months' here are already in their canonical form (e.g., -1 year, 3 months).
+            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+            if (totalMonths != 0) {
+                result = result.withMonths(totalMonths);
+            }
+        } else {
+            // PeriodType supports neither years nor months.
+            // As per Javadoc, if years or months are non-zero, this is an error.
+            if (years != 0 || months != 0) {
+                throw new UnsupportedOperationException("PeriodType does not support years or months, but years or months are present");
+            }
+            // If both years and months are zero, nothing to do for them.
+        }
+
         return result;
     }
\ No newline at end of file
