diff --git a/tmp/9dfe3548-903e-4851-898c-b45aff19b92a_buggy.java b/tmp/52f6810e-f471-4514-ad1f-79dbf576000a_fixed.java
index dbda381..6df0cbd 100644
--- a/tmp/9dfe3548-903e-4851-898c-b45aff19b92a_buggy.java
+++ b/tmp/52f6810e-f471-4514-ad1f-79dbf576000a_fixed.java
@@ -1,54 +1,77 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
         int years = getYears();
         int months = getMonths();
+
+        // Step 1: Normalize years and months based on the "1 year 15 months -> 2 years 3 months" rule.
+        // This normalization ensures months are between 0-11, by overflowing into years.
+        // This step happens *before* considering the PeriodType's supported fields for years/months.
+        // The PeriodType's rules (e.g., converting years to months if years field is not supported)
+        // will be applied by the Period constructor in Step 2.
         if (years != 0 || months != 0) {
+            // Apply normalization for months overflowing into years
             years = FieldUtils.safeAdd(years, months / 12);
             months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+            
+            // Adjust sign to ensure months is consistent with years,
+            // e.g., 1 year -5 months should normalize to 0 years 7 months.
+            if (years > 0 && months < 0) {
+                years--;
+                months += 12;
+            } else if (years < 0 && months > 0) {
+                years++;
+                months -= 12;
             }
-            if (months != 0) {
-                result = result.withMonths(months);
         }
-        }
-        return result;
+
+        // Step 2: Create the new Period using the normalized years and months,
+        // and all other fields directly from the original period.
+        // The Period constructor will then apply the PeriodType rules:
+        // - If a field is not supported by the PeriodType, its value is added
+        //   to the next largest supported field (e.g., years to months, weeks to days).
+        // - Fields are otherwise kept as they are.
+        return new Period(
+            years,
+            months,
+            getWeeks(),
+            getDays(),
+            getHours(),
+            getMinutes(),
+            getSeconds(),
+            getMillis(),
+            type,
+            ISOChronology.getInstanceUTC()
+        );
     }
\ No newline at end of file
