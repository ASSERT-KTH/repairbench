diff --git a/tmp/ec5c42ed-4125-40d5-b5a5-9c8e78075381_buggy.java b/tmp/44affca5-000a-4a8c-ae91-de5a927ec26e_fixed.java
index dbda381..92e59e2 100644
--- a/tmp/ec5c42ed-4125-40d5-b5a5-9c8e78075381_buggy.java
+++ b/tmp/44affca5-000a-4a8c-ae91-de5a927ec26e_fixed.java
@@ -1,54 +1,73 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // 1. Get initial years and months from 'this' period
         int years = getYears();
         int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+
+        // 2. Combine years and months into a single total month count.
+        //    Use long to prevent overflow if years/months are very large.
+        long totalMonths = (long) years * 12 + months;
+
+        // 3. Calculate total milliseconds from all standard time-based fields.
+        //    These fields are normalized relative to each other (e.g., 61 seconds becomes 1 minute 1 second)
+        //    and then converted to milliseconds.
+        long totalMillis = getMillis();
+        totalMillis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+        totalMillis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
+        totalMillis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
+        totalMillis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;
+        totalMillis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;
+
+        // 4. Determine the new years and months based on whether the target PeriodType supports years.
+        int newYears;
+        int newMonths;
+        if (type.isSupported(DurationFieldType.years())) {
+            // If the PeriodType supports years, normalize totalMonths into years and months
+            // (months will be in the range [0, 11] for positive totalMonths, or [-11, 0] for negative totalMonths).
+            newYears = FieldUtils.safeToInt(totalMonths / 12);
+            newMonths = FieldUtils.safeToInt(totalMonths % 12);
+        } else {
+            // If the PeriodType does not support years, all totalMonths are collapsed into the months field.
+            // newYears is set to 0.
+            newYears = 0;
+            newMonths = FieldUtils.safeToInt(totalMonths);
         }
-            if (months != 0) {
-                result = result.withMonths(months);
-            }
-        }
-        return result;
+
+        // 5. Construct the new Period.
+        //    The constructor with all fields will correctly distribute totalMillis
+        //    among weeks, days, hours, minutes, seconds, and milliseconds
+        //    according to the specified PeriodType and Chronology.
+        return new Period(newYears, newMonths, 0, 0, 0, 0, 0, totalMillis, type, ISOChronology.getInstanceUTC());
     }
\ No newline at end of file
