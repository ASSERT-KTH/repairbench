diff --git a/tmp/86709432-4ca8-44b5-b9fa-11a95bd6be83_buggy.java b/tmp/b8f222c7-eb85-45ae-b969-fd618f8dbec6_fixed.java
index dbda381..54cc2ee 100644
--- a/tmp/86709432-4ca8-44b5-b9fa-11a95bd6be83_buggy.java
+++ b/tmp/b8f222c7-eb85-45ae-b969-fd618f8dbec6_fixed.java
@@ -1,54 +1,89 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+        // Calculate total milliseconds from time-based fields
+        // No overflow can happen for totalMillis as the sum of all int fields converted to millis
+        // will fit within a long.
+        long totalMillis = getMillis();
+        totalMillis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+        totalMillis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
+        totalMillis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
+        totalMillis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;
+        totalMillis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;
+
+        // Handle years and months based on the target PeriodType
         int years = getYears();
         int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+
+        // Calculate total months by converting years to months and adding them
+        // Use FieldUtils.safeMultiply and safeAdd to prevent int overflow during intermediate calculations
+        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+
+        int resultYears = 0;
+        int resultMonths = 0;
+
+        if (type.isSupported(DurationFieldType.years())) {
+            // If the target PeriodType supports years, normalize months to be between 0-11
+            // and keep years and months as separate fields.
+            resultYears = totalMonths / 12;
+            resultMonths = totalMonths % 12;
+        } else if (type.isSupported(DurationFieldType.months())) {
+            // If the target PeriodType supports months but not years (or both,
+            // but we prioritize years if supported, so this path is only if years not supported),
+            // then convert all years into months and combine into the months field.
+            resultMonths = totalMonths;
         }
-            if (months != 0) {
-                result = result.withMonths(months);
-            }
-        }
-        return result;
+        // If the target PeriodType supports neither years nor months,
+        // resultYears and resultMonths will remain 0, effectively discarding
+        // the years/months component from the original period, which is consistent
+        // with how PeriodType restricts the presence of fields.
+
+        // Construct the new Period. The constructor with explicit field arguments
+        // will take the determined years, months, and the combined totalMillis.
+        // It will then distribute the `totalMillis` into the appropriate
+        // time-based fields (weeks, days, hours, minutes, seconds, milliseconds)
+        // according to the specified `PeriodType`.
+        return new Period(
+            resultYears,
+            resultMonths,
+            0, // weeks field value is handled by totalMillis
+            0, // days field value is handled by totalMillis
+            0, // hours field value is handled by totalMillis
+            0, // minutes field value is handled by totalMillis
+            0, // seconds field value is handled by totalMillis
+            totalMillis, // the remaining milliseconds from time-based fields
+            type,
+            ISOChronology.getInstanceUTC()
+        );
     }
\ No newline at end of file
