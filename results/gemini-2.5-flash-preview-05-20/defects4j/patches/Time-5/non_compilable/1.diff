diff --git a/tmp/6dadf113-27ac-4158-9a79-f742113d0fb6_buggy.java b/tmp/7fa4cc20-d34e-4b40-9f20-96abe3aacfdf_fixed.java
index dbda381..a26cad1 100644
--- a/tmp/6dadf113-27ac-4158-9a79-f742113d0fb6_buggy.java
+++ b/tmp/7fa4cc20-d34e-4b40-9f20-96abe3aacfdf_fixed.java
@@ -1,54 +1,96 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+        Chronology chrono = ISOChronology.getInstanceUTC();
+
+        // Calculate total milliseconds from all fixed-duration fields (millis, seconds, minutes, hours, days, weeks).
+        // This sum will then be distributed into the result period according to the PeriodType.
+        long totalFixedMillis = 0L;
+        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getMillis());
+        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND);
+        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE);
+        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR);
+        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getDays() * DateTimeConstants.MILLIS_PER_DAY);
+        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);
+
+        // Create a base period from the total fixed milliseconds.
+        // This period will have its fields populated according to `type` and `chrono`,
+        // automatically handling normalization and field dropping for fixed-duration fields.
+        Period result = new Period(totalFixedMillis, type, chrono);
+
+        // Now handle years and months, which are not fixed-duration and have specific normalization rules.
+        long currentYears = getYears();
+        long currentMonths = getMonths();
+
+        // Consolidate years into months for consistent handling of negative values and easier conversion.
+        long totalMonthsValue = FieldUtils.safeAdd(currentYears * 12L, currentMonths);
+
+        if (type.isSupported(DurationFieldType.years())) {
+            // If years are supported by the PeriodType, months are normalized between 0 and 11,
+            // with excess going to years.
+            long normalizedYears = totalMonthsValue / 12L;
+            long normalizedMonths = totalMonthsValue % 12L;
+            if (normalizedMonths < 0) { // Adjust for negative modulo result (e.g., -3 instead of 9 for -15 % 12)
+                normalizedMonths += 12; 
+                normalizedYears--;
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+            result = result.withYears(FieldUtils.safeToInt(normalizedYears));
+            
+            if (type.isSupported(DurationFieldType.months())) {
+                result = result.withMonths(FieldUtils.safeToInt(normalizedMonths));
+            } else {
+                // This case: Years supported, but months not. Convert remaining months to milliseconds.
+                // This is an unlikely PeriodType but handled for completeness as per Joda-Time's flexible design.
+                totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, normalizedMonths * chrono.getAverageMillisPerMonth());
+                // Re-create the result to incorporate the additional milliseconds,
+                // as simple `plusMillis` only adds to the millis field, it doesn't re-distribute across fields based on type.
+                result = new Period(totalFixedMillis, type, chrono);
             }
+        } else if (type.isSupported(DurationFieldType.months())) {
+            // If months are supported but years are not, all years are converted to months.
+            // The months field can be larger than 11.
+            result = result.withMonths(FieldUtils.safeToInt(totalMonthsValue));
+        } else {
+            // Neither years nor months are supported by the PeriodType.
+            // Convert both to milliseconds using average durations and add to totalFixedMillis.
+            // This will then be distributed among the other fields by the Period constructor.
+            long yearsMillis = currentYears * chrono.getAverageMillisPerYear();
+            long monthsMillis = currentMonths * chrono.getAverageMillisPerMonth();
+            totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, yearsMillis);
+            totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, monthsMillis);
+            // Re-create the result to incorporate the additional milliseconds.
+            result = new Period(totalFixedMillis, type, chrono);
         }
+
         return result;
     }
\ No newline at end of file
