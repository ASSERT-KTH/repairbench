diff --git a/tmp/5b948b27-e2f1-421f-a346-7b00a39c0a1a_buggy.java b/tmp/dc1b15fd-c446-4e31-adbf-ff95e20cac99_fixed.java
index dbda381..5c7a6aa 100644
--- a/tmp/5b948b27-e2f1-421f-a346-7b00a39c0a1a_buggy.java
+++ b/tmp/dc1b15fd-c446-4e31-adbf-ff95e20cac99_fixed.java
@@ -1,54 +1,100 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+
+        // Step 1: Accumulate total milliseconds from fields smaller than months.
+        // These fields (millis, seconds, minutes, hours, days, weeks) have fixed standard durations.
+        long totalMillis = getMillis();
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getSeconds(), DateTimeConstants.MILLIS_PER_SECOND));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getHours(), DateTimeConstants.MILLIS_PER_HOUR));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getDays(), DateTimeConstants.MILLIS_PER_DAY));
+        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getWeeks(), DateTimeConstants.MILLIS_PER_WEEK));
+
+        int currentYears = getYears();
+        int currentMonths = getMonths();
+
+        // Step 2: Normalize years and months based on 12 months per year rule.
+        // This is the first internal normalization mentioned in the Javadoc:
+        // "If the period contains years or months, then the months will be
+        // normalized to be between 0 and 11. ... Thus a period of 1 year 15 months will normalize to 2 years 3 months."
+        if (currentYears != 0 || currentMonths != 0) {
+            currentYears = FieldUtils.safeAdd(currentYears, currentMonths / 12);
+            currentMonths = currentMonths % 12;
+            // The Javadoc implies months will be 0-11, but for negative periods,
+            // currentMonths % 12 can be negative. Joda-Time's Period handles negative fields.
         }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+        // Step 3: Decide how to handle years and months based on the target PeriodType's field support.
+        // The PeriodType controls how the result is split.
+        boolean targetTypeSupportsMonths = type.isSupported(DurationFieldType.months());
+
+        if (targetTypeSupportsMonths) {
+            // If the target PeriodType supports months, then years should be converted to months.
+            // This aligns with test cases like testNormalizedStandard_periodType_months1 (1Y 15M -> 27M).
+            currentMonths = FieldUtils.safeAdd(currentMonths, FieldUtils.safeMultiply(currentYears, 12));
+            currentYears = 0; // Years are now subsumed into months.
+        } else {
+            // If the target PeriodType does NOT support months, then it implicitly cannot support years
+            // (as years are a larger unit typically converted to months in this standard normalization context).
+            // If there are any non-zero years or months remaining, it's an unsupported operation.
+            // This aligns with the Javadoc: "throws UnsupportedOperationException if this period contains non-zero
+            // years or months but the specified period type does not support them".
+            if (currentYears != 0 || currentMonths != 0) {
+                throw new UnsupportedOperationException("Field is not supported");
             }
+            // If currentYears and currentMonths are both zero, nothing to do here.
         }
+
+        // Step 4: Create the result Period.
+        // Start by creating a period from the accumulated milliseconds and the target type.
+        Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+
+        // Step 5: Apply the normalized/converted years and months to the result.
+        // These fields are applied separately because they are not directly handled by the
+        // Period(long millis, PeriodType type, Chronology chrono) constructor without loss of precision,
+        // and their handling depends on the normalization rules of this method.
+        if (currentYears != 0) {
+            // This branch will only be taken if the PeriodType supports years but not months
+            // (a very rare or perhaps non-existent standard PeriodType, as months is usually included if years are).
+            // In the fixed logic, if targetTypeSupportsMonths is true, currentYears becomes 0.
+            // If targetTypeSupportsMonths is false, an exception is thrown if years/months are non-zero.
+            // So, for valid periods, currentYears will be 0 here.
+            result = result.withYears(currentYears);
+        }
+        if (currentMonths != 0) {
+            result = result.withMonths(currentMonths);
+        }
+        
         return result;
     }
\ No newline at end of file
