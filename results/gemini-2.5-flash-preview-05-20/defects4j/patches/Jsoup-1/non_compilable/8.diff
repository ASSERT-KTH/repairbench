diff --git a/tmp/4c24f9be-407b-4914-990b-304d3fc1851b_buggy.java b/tmp/a2fb4906-6416-424e-a820-9d25c7c66e2e_fixed.java
index 00914da..96206ad 100644
--- a/tmp/4c24f9be-407b-4914-990b-304d3fc1851b_buggy.java
+++ b/tmp/a2fb4906-6416-424e-a820-9d25c7c66e2e_fixed.java
@@ -1,17 +1,31 @@
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.Node;
+import org.jsoup.nodes.TextNode;
+
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
+        // To maintain the original order of the moved text nodes when prepending,
+        // iterate the list in reverse.
+        Collections.reverse(toMove);
+
         for (Node node: toMove) {
             element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            // The original code appended a space and then the node to the body.
+            // To move to the start of the body and preserve text flow, we prepend.
+            // The explicit space node added previously is often unnecessary as
+            // Jsoup's text() extraction handles whitespace between elements.
+            body().prependChild(node);
         }
     }
