diff --git a/tmp/7a66c5f5-7137-45a8-a5b4-3ef7e54732f0_buggy.java b/tmp/9f9e8d83-ae80-4fb4-8c40-048367f635f9_fixed.java
index 00914da..1969e5d 100644
--- a/tmp/7a66c5f5-7137-45a8-a5b4-3ef7e54732f0_buggy.java
+++ b/tmp/9f9e8d83-ae80-4fb4-8c40-048367f635f9_fixed.java
@@ -1,17 +1,27 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
+        // If 'toMove' contains multiple nodes (e.g., "A", "B", "C" in that order),
+        // and we want them to appear as "A B C" at the beginning of the body,
+        // using prependChild(node) on each in sequence (A, then B, then C)
+        // would result in the order "C B A" in the body.
+        // To maintain the original order, we must iterate the list in reverse
+        // when prepending.
+        Collections.reverse(toMove);
+
         for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            element.removeChild(node); // Remove the text node from its current parent (e.g., the Document itself)
+            // The goal is to move these nodes to the *start* of the body.
+            // The original code appended them and added an unnecessary space.
+            // Using prependChild inserts the node at the beginning of the body's children.
+            body().prependChild(node);
         }
     }
\ No newline at end of file
