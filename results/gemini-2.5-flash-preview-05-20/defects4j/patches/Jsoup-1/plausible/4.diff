diff --git a/tmp/5bafe68b-a3b0-4f17-9dc5-c0a799b3f2de_buggy.java b/tmp/ccd7e21d-10d7-4c66-9aeb-b0db4688d97e_fixed.java
index 00914da..ca481c9 100644
--- a/tmp/5bafe68b-a3b0-4f17-9dc5-c0a799b3f2de_buggy.java
+++ b/tmp/ccd7e21d-10d7-4c66-9aeb-b0db4688d97e_fixed.java
@@ -1,17 +1,24 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
-        for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+        // Iterate in reverse order because we are prepending.
+        // Prepending A then B results in B A.
+        // To achieve A B, we must prepend B first, then A.
+        // So if collected nodes are [n1, n2, n3], we prepend n3, then n2, then n1.
+        for (int i = toMove.size() - 1; i >= 0; i--) {
+            Node node = toMove.get(i);
+            element.removeChild(node); // Remove the node from its current parent (e.g., the Document root)
+            // The original code added a space before appending. This is not desired when
+            // prepending content to the start of the body; Jsoup's text() method handles
+            // natural spacing between block and inline elements.
+            body().prependChild(node); // Add the node to the start of the body
         }
     }
