diff --git a/tmp/a67dd463-dedc-4075-af27-a9219d8ce94c_buggy.java b/tmp/a07f5788-75aa-407f-a2fe-1120e0686052_fixed.java
index 00914da..b19d048 100644
--- a/tmp/a67dd463-dedc-4075-af27-a9219d8ce94c_buggy.java
+++ b/tmp/a07f5788-75aa-407f-a2fe-1120e0686052_fixed.java
@@ -1,17 +1,25 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
+        // To move the text nodes from the root element to the start of the body
+        // while preserving their original relative order, we need to prepend them
+        // to the body. Prepending in a loop requires iterating the list in reverse order
+        // so that the first node in 'toMove' ends up as the very first child of the body.
+        java.util.Collections.reverse(toMove);
+
         for (Node node: toMove) {
             element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            // The original code appended a space, which is not desired as it can lead
+            // to extra whitespace and incorrect text output.
+            // body().appendChild(new TextNode(" ", ""));
+            body().prependChild(node); // Move node to the start of the body
         }
     }
\ No newline at end of file
