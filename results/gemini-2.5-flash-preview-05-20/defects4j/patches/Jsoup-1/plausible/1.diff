diff --git a/tmp/9c3f8ee5-1801-4eb3-9850-db6931fdaa1b_buggy.java b/tmp/f1c5eb75-7737-4fd1-9303-f619a0e1ddf5_fixed.java
index 00914da..2e6eb01 100644
--- a/tmp/9c3f8ee5-1801-4eb3-9850-db6931fdaa1b_buggy.java
+++ b/tmp/f1c5eb75-7737-4fd1-9303-f619a0e1ddf5_fixed.java
@@ -1,17 +1,33 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
+        // The test case "foo <b>bar</b> baz" implies that "foo" (a TextNode
+        // likely at the document root level) needs to be moved to the beginning
+        // of the <body> element.
+        //
+        // The original code appended these nodes to the end of the body,
+        // leading to "bar baz foo" instead of "foo bar baz".
+        //
+        // To move nodes to the beginning of the body while maintaining their
+        // relative order, we need to process them in reverse order when
+        // using `prependChild()`.
+        java.util.Collections.reverse(toMove);
+
         for (Node node: toMove) {
             element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            // The original code `body().appendChild(new TextNode(" ", ""));`
+            // would add an extra space before each moved text node, which is
+            // not desired for the test case (e.g., "foo  bar baz"). Jsoup's
+            // text() method typically collapses whitespace, so explicit space
+            // insertion here is likely incorrect.
+            body().prependChild(node);
         }
     }
\ No newline at end of file
