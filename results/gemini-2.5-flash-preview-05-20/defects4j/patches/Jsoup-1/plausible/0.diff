diff --git a/tmp/6d419b5d-e3be-4eae-b24b-88b52bd27930_buggy.java b/tmp/03cf31ee-b886-46ef-81c0-660a03b49219_fixed.java
index 00914da..fa638ba 100644
--- a/tmp/6d419b5d-e3be-4eae-b24b-88b52bd27930_buggy.java
+++ b/tmp/03cf31ee-b886-46ef-81c0-660a03b49219_fixed.java
@@ -1,17 +1,30 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
-        for (Node node: toMove) {
+        // The problem is that the original code moves text nodes to the end of the body
+        // and adds an extra space.
+        // The test case requires these nodes to be moved to the *start* of the body,
+        // and the output "foo bar baz" indicates no additional spaces should be introduced
+        // by this normalisation process.
+
+        // To move nodes to the start of the body while preserving their original order,
+        // we need to iterate the 'toMove' list in reverse order when prepending them.
+        // This ensures that the first node collected ends up as the first child in the body,
+        // the second as the second, and so on.
+        for (int i = toMove.size() - 1; i >= 0; i--) {
+            Node node = toMove.get(i);
             element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            // The original code added a space before appending, which is not desired
+            // when prepending to the body's existing content or as the first content.
+            // body().appendChild(new TextNode(" ", "")); // Removed
+            body().prependChild(node); // Changed from appendChild to prependChild
         }
     }
\ No newline at end of file
