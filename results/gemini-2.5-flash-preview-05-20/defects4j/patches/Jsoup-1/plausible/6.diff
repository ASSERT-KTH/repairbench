diff --git a/tmp/f8c11d16-2d1e-4303-a551-f05a5e4b68bc_buggy.java b/tmp/f765f166-9fdf-4fa0-9b05-325e24fa45f2_fixed.java
index 00914da..845e1d7 100644
--- a/tmp/f8c11d16-2d1e-4303-a551-f05a5e4b68bc_buggy.java
+++ b/tmp/f765f166-9fdf-4fa0-9b05-325e24fa45f2_fixed.java
@@ -1,17 +1,33 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
-        for (Node node: toMove) {
+        // The original problem is that text nodes found outside the body (e.g., in the root Document)
+        // are moved to the *end* of the body using appendChild.
+        // The tests, and Jsoup's expected behavior, require these nodes to be moved to the *beginning*
+        // of the body, while preserving their original relative order.
+        //
+        // To move elements to the beginning while preserving order, iterate the list in reverse
+        // and use prependChild.
+
+        for (int i = toMove.size() - 1; i >= 0; i--) {
+            Node node = toMove.get(i);
             element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+
+            // The original code added a space TextNode *before* appending the actual node.
+            // If we are prepending, and we want the space to appear *after* the moved node
+            // in the flow (i.e., node space existing_content), we first prepend the node,
+            // then prepend the space. This will result in [space, node, existing_content].
+            // This setup makes 'node' effectively first, followed by a space.
+            // doc.text() normalises whitespace, so `foo  bar` becomes `foo bar`.
+            body().prependChild(new TextNode(" ", "")); // Add space before (in final order, after) the moved node.
+            body().prependChild(node); // Prepend the actual text node.
         }
     }
\ No newline at end of file
