diff --git a/tmp/f6a88342-6a4b-413c-b7d2-0b5a82bc9448_buggy.java b/tmp/7be081a5-590b-4a64-908c-2255404e1724_fixed.java
index 800e6e1..d77140f 100644
--- a/tmp/f6a88342-6a4b-413c-b7d2-0b5a82bc9448_buggy.java
+++ b/tmp/7be081a5-590b-4a64-908c-2255404e1724_fixed.java
@@ -1,32 +1,56 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
+            // This is a named function expression, e.g. `var x = function f() {}`
+            // The function name `f` is local to the function.
+            // Do not add `f` to the outer scope.
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT:
+          // Handle cases where a JSDoc-annotated expression forms a declaration,
+          // like `/** @param {number} x */ goog.foo;` or `/** @type {string} */ MY_GLOBAL;`
+          // The JSDoc is attached to the child expression (e.g., GETPROP or NAME).
+          Node expr = n.getFirstChild();
+          if (expr != null) {
+            JSDocInfo exprInfo = expr.getJSDocInfo();
+            // Check if the JSDoc indicates a type declaration or constant/enum.
+            if (exprInfo != null && (exprInfo.hasType() || exprInfo.isConstant() ||
+                                     exprInfo.hasEnumParameter() || exprInfo.hasParameters() ||
+                                     exprInfo.hasReturnType() || exprInfo.hasThisType())) {
+              if (expr.isGetProp() || expr.isGetElem()) {
+                // For `goog.foo;` or `this.foo;` (GETPROP/GETELEM with JSDoc)
+                defineDeclaredProperty(expr, n); // expr is GETPROP/GETELEM, n is EXPR_RESULT (its parent)
+              } else if (expr.isName()) {
+                // For `MY_GLOBAL;` (NAME with JSDoc)
+                defineDeclaredVar(expr); // expr is NAME
+              }
+            }
+          }
+          break;
       }
     }
\ No newline at end of file
