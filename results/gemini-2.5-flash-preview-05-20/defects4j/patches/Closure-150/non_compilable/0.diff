diff --git a/tmp/b44c9f6c-8706-4cef-8c7b-ca7c95ac7c00_buggy.java b/tmp/3b75b341-9f00-437b-994b-0711d8c2178f_fixed.java
index 800e6e1..f32424e 100644
--- a/tmp/b44c9f6c-8706-4cef-8c7b-ca7c95ac7c00_buggy.java
+++ b/tmp/3b75b341-9f00-437b-994b-0711d8c2178f_fixed.java
@@ -1,32 +1,52 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
+          // If the function is a function expression assigned to a NAME node
+          // (e.g., `var x = function() {}` or `foo = function() {}`),
+          // the variable `x` or `foo` will be handled by `defineVar` or during assignment.
+          // In this case, we don't need to define the function itself as a top-level symbol.
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT:
+          // Handle cases like `/** @param {number} x */ goog.foo;`
+          // where a JSDoc annotation on an expression declares a type for a qualified name.
+          JSDocInfo info = n.getJSDocInfo();
+          if (info != null) {
+            Node expr = n.getFirstChild();
+            // Check if the expression is a qualified name (e.g., `goog.foo`)
+            // or a property access (e.g., `this.foo`).
+            if (expr != null && expr.isQualifiedName()) {
+              // This method (maybeDeclareQualifiedName) is assumed to be part of TypedScopeCreator,
+              // and it processes JSDoc information to declare symbols or properties.
+              // We pass `null` for the RHS type because it's a stub declaration.
+              maybeDeclareQualifiedName(info, expr, null);
+            }
+          }
+          break;
       }
     }
\ No newline at end of file
