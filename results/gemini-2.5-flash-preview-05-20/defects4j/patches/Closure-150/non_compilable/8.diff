diff --git a/tmp/0394b5ae-9323-4e29-b9f6-20c42521b534_buggy.java b/tmp/f800f732-c176-4626-b7a3-e5d304cb6a1f_fixed.java
index 800e6e1..68d87d8 100644
--- a/tmp/0394b5ae-9323-4e29-b9f6-20c42521b534_buggy.java
+++ b/tmp/f800f732-c176-4626-b7a3-e5d304cb6a1f_fixed.java
@@ -1,32 +1,43 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT:
+          // Handle cases like "/** @param {number} x */ goog.foo;" or
+          // "/** @return {number} */ this.foo;" where a JSDoc is attached
+          // to an expression statement which is a GETPROP.
+          // This is a common way to declare properties that are not immediately assigned.
+          Node expr = n.getFirstChild();
+          JSDocInfo info = n.getJSDocInfo();
+          if (expr != null && expr.isGetProp() && info != null) {
+            handleProperty(expr, n, info);
+          }
+          break;
       }
     }
\ No newline at end of file
