diff --git a/tmp/c77fd2ae-d837-47e7-a688-bbc8fd20e10a_buggy.java b/tmp/71084d4a-412d-4604-bf96-21f23465d490_fixed.java
index 800e6e1..6de2ca6 100644
--- a/tmp/c77fd2ae-d837-47e7-a688-bbc8fd20e10a_buggy.java
+++ b/tmp/71084d4a-412d-4604-bf96-21f23465d490_fixed.java
@@ -1,32 +1,63 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
+            // Function expression in a VAR declaration (e.g., var f = function() {})
+            // or an ASSIGNMENT (e.g., goog.foo = function() {})
+            // or a call (e.g., (function(){})())
+            // Its name will be defined by the VAR/ASSIGNMENT/CALL parent.
+            // We only care about named function declarations here.
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.GETPROP:
+        case Token.GETELEM:
+          // This handles explicitly declared properties with JSDoc,
+          // for example:
+          // /** @param {number} x */ goog.foo;
+          // /** @return {number} */ this.foo;
+          // /** @type {string} */ goog.bar;
+          // These are often "stub" declarations without an assignment.
+          // They appear as standalone statements, where the GETPROP/GETELEM
+          // node's parent is an EXPR_RESULT.
+          if (parent.getType() == Token.EXPR_RESULT) {
+            JSDocInfo info = n.getJSDocInfo();
+            if (info != null) {
+              // Try to get a type from the JSDoc. This method handles both
+              // function types (from @param, @return, @this, etc.) and
+              // general types (from @type, @const).
+              JSType propertyType = getFunctionAnnotation(n);
+              if (propertyType != null) {
+                // If a type was successfully extracted from JSDoc,
+                // define this property in the symbol table.
+                // It's not inferred, as its type is explicitly declared via JSDoc.
+                defineProperty(n, parent, propertyType, false /* inferred */);
+              }
+            }
+          }
+          break;
       }
     }
\ No newline at end of file
