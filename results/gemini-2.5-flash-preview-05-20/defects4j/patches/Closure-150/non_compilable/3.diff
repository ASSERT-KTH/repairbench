diff --git a/tmp/34ca2ee7-5db0-47d3-8b54-1b7833639a5b_buggy.java b/tmp/7fea8c33-10a6-4b63-a774-202f5ae67575_fixed.java
index 800e6e1..7c1caaf 100644
--- a/tmp/34ca2ee7-5db0-47d3-8b54-1b7833639a5b_buggy.java
+++ b/tmp/7fea8c33-10a6-4b63-a774-202f5ae67575_fixed.java
@@ -1,32 +1,79 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
-
-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
-        handleFunctionInputs(parent);
+      if (n == scope.getRootNode()) {
+        // The first node we visit is the function.
+        // Its parameters are handled in handleFunctionInputs
+        // after the formal parameters have been added to the scope.
+        handleFunctionInputs(n);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
+          // For named function expressions (e.g., var x = function y() {}), the function's own name 'y' is handled in the NAME case.
+          // For other functions (anonymous or named function declarations like function foo() {}), define it here.
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.LP:
+          // This means we are visiting the parameter list of the scope's
+          // root function. We've already processed these.
+          if (parent == scope.getRootNode()) {
+            return;
+          }
+          break;
+        case Token.NAME:
+          // If this is a child of a FUNCTION node, it's a named function
+          // expression. The name needs to be added to the scope.
+          if (parent.getType() == Token.FUNCTION) {
+            defineDeclaredFunction(parent, parent.getParent());
+            return;
+          }
+          // If this is a variable definition, it's handled by defineVar.
+          // If this is a function parameter, it's handled by handleFunctionInputs.
+          // If this is a CATCH parameter, it's handled by defineCatch.
+          // Otherwise, it's a usage of a name or a variable definition.
+          defineName(n, parent);
+          break;
+        case Token.ASSIGN:
+          // For assignments to properties, this is handled by defineAssignedProperty.
+          // For assignments to names, this is handled by defineName.
+          defineAssigned(n, parent);
+          break;
+        case Token.GETPROP:
+        case Token.GETELEM:
+          // If this is a property get with a JSDoc annotation, and it's not
+          // part of an assignment, then it's a stub declaration.
+          if (n.getJSDocInfo() != null &&
+              // i.e., "foo.bar = ..." is handled by Token.ASSIGN
+              parent.getType() != Token.ASSIGN) {
+            defineStubByAnnotation(n, parent);
+          }
+          break;
+        case Token.CALL:
+          defineCall(n, parent);
+          break;
+        case Token.RETURN:
+          defineReturn(n, parent);
+          break;
+        case Token.BLOCK:
+          // Only interesting in the global scope where it means it's a script.
+          if (scope.isGlobal() && n.getParent() == null) {
+            defineScript(n, parent);
+          }
+          break;
       }
     }
\ No newline at end of file
