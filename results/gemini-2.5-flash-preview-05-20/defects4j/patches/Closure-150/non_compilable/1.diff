diff --git a/tmp/5cb3fb28-6e04-41b6-8d18-b8a742c88229_buggy.java b/tmp/165dbc06-366b-445d-a44a-8506438acd66_fixed.java
index 800e6e1..665804e 100644
--- a/tmp/5cb3fb28-6e04-41b6-8d18-b8a742c88229_buggy.java
+++ b/tmp/165dbc06-366b-445d-a44a-8506438acd66_fixed.java
@@ -1,32 +1,55 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
+
+      // Handle JSDoc-annotated nodes that define symbols. This is crucial for
+      // defining types for stubs (e.g., `goog.foo;`) or properties defined
+      // purely by JSDoc (`/** @type {string} */ someObj.prop;`).
+      // The `defineJSSymbol` method (presumably available in this class or a superclass)
+      // is responsible for parsing JSDoc and defining corresponding symbols or properties.
+      JSDocInfo info = n.getJSDocInfo();
+      if (info != null && defineJSSymbol(n, info, parent)) {
+        // If defineJSSymbol successfully processed the node and defined a symbol
+        // (e.g., a function stub, a typedef, a constant), no further generic
+        // symbol definition is needed for this node in the switch statement below.
+        return;
+      }
+
       switch (n.getType()) {
         case Token.FUNCTION:
+          // This condition handles cases where a FUNCTION node is an initializer
+          // for a NAME node (e.g., `var x = function() {}`). In such cases,
+          // the variable `x` is defined by `defineVar`, and the function itself
+          // is not a top-level declaration in the current scope that needs
+          // `defineDeclaredFunction` to define its name (if it has one, it's
+          // scoped to the function itself). For named function expressions
+          // like `(function foo() {})`, the parent is `EXPR_RESULT`, so this
+          // block is skipped, and `defineDeclaredFunction` is called, correctly
+          // defining `foo` within its own scope.
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
     }
\ No newline at end of file
