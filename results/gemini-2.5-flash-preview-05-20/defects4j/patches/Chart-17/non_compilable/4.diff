diff --git a/tmp/be8bcb72-aaca-4ad6-816d-29fd58db3675_buggy.java b/tmp/13c4e10e-a05d-44fb-88a8-2b82233601f9_fixed.java
index 55391e1..b0e64c9 100644
--- a/tmp/be8bcb72-aaca-4ad6-816d-29fd58db3675_buggy.java
+++ b/tmp/13c4e10e-a05d-44fb-88a8-2b82233601f9_fixed.java
@@ -1,19 +1,38 @@
     /**
      * Returns a clone of the time series.
      * <P>
      * Notes:
      * <ul>
      *   <li>no need to clone the domain and range descriptions, since String 
      *     object is immutable;</li>
      *   <li>we pass over to the more general method clone(start, end).</li>
      * </ul>
      *
      * @return A clone of the time series.
      * 
      * @throws CloneNotSupportedException not thrown by this class, but 
      *         subclasses may differ.
      */
     public Object clone() throws CloneNotSupportedException {
+        // The original implementation calls createCopy(0, getItemCount() - 1).
+        // This fails if getItemCount() is 0, because it results in createCopy(0, -1),
+        // which typically throws an IllegalArgumentException ("Requires start <= end.").
+
+        // If the time series is empty, a clone should also be an empty time series.
+        // In this case, we don't have any items to copy. Calling createCopy with
+        // invalid bounds (start > end) is incorrect. Instead, we create a new,
+        // independent empty TimeSeries object.
+        if (getItemCount() == 0) {
+            // Create a new TimeSeries instance. It will be empty initially,
+            // and independent from the original series.
+            // This assumes a constructor like TimeSeries(Comparable key, String domainDescription, String rangeDescription) exists.
+            // These methods (getKey(), getDomainDescription(), getRangeDescription()) are common in JFreeChart's TimeSeries.
+            return new TimeSeries(getKey(), getDomainDescription(), getRangeDescription());
+        } else {
+            // If the time series is not empty, delegate to createCopy to handle the cloning
+            // of the items. This method is assumed to create a new TimeSeries instance
+            // and populate it with deep copies of the data items.
             Object clone = createCopy(0, getItemCount() - 1);
             return clone;
         }
+    }
\ No newline at end of file
