diff --git a/tmp/81936387-235a-42fc-9c6f-cb1b4f22cdc6_buggy.java b/tmp/8a5abda2-8cd3-49fe-923b-48727c3433f9_fixed.java
index ba2718f..3a30c68 100644
--- a/tmp/81936387-235a-42fc-9c6f-cb1b4f22cdc6_buggy.java
+++ b/tmp/8a5abda2-8cd3-49fe-923b-48727c3433f9_fixed.java
@@ -1,7 +1,26 @@
   /**
-   * ContextTypeExpression := BasicTypeExpression | '?'
+   * ContextTypeExpression := BasicTypeExpression | '?' | '*'
    * For expressions on the right hand side of a this: or new:
+   *
+   * The JSDoc specification allows '?' (unknown type) and '*' (any type)
+   * in the position where a constructed type is expected (e.g., in `new:?` or `new:*`).
+   * The original implementation incorrectly tried to parse these as regular type names
+   * via `parseTypeName`, which led to syntax errors because `?` and `*` are not valid
+   * identifiers for type names.
+   * This fix explicitly handles `JsDocToken.QMARK` and `JsDocToken.STAR` by creating
+   * the corresponding AST nodes `Token.QMARK` and `Token.STAR`, and then consuming
+   * the token. For all other tokens, it defers to `parseTypeName`.
    */
   private Node parseContextTypeExpression(JsDocToken token) {
+    if (token == JsDocToken.QMARK) {
+      next(); // Consume the '?' token
+      return new Node(Token.QMARK); // Represent the '?' type as an AST node
+    } else if (token == JsDocToken.STAR) {
+      next(); // Consume the '*' token
+      return new Node(Token.STAR); // Represent the '*' type as an AST node
+    } else {
+      // If it's not '?' or '*', it should be a regular type name.
+      // parseTypeName is responsible for consuming the token it receives.
       return parseTypeName(token);
     }
+  }
\ No newline at end of file
