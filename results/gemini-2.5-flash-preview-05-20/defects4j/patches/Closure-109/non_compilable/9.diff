diff --git a/tmp/76a8339b-38ec-43ce-8929-f67c172ea392_buggy.java b/tmp/a0423008-dc70-4679-a258-3adde60e50be_fixed.java
index ba2718f..7040c16 100644
--- a/tmp/76a8339b-38ec-43ce-8929-f67c172ea392_buggy.java
+++ b/tmp/a0423008-dc70-4679-a258-3adde60e50be_fixed.java
@@ -1,7 +1,26 @@
   /**
-   * ContextTypeExpression := BasicTypeExpression | '?'
+   * ContextTypeExpression := BasicTypeExpression | '?' | '*'
    * For expressions on the right hand side of a this: or new:
    */
   private Node parseContextTypeExpression(JsDocToken token) {
+    if (token == JsDocToken.QMARK) {
+      // If the token is '?', it represents the UNKNOWN type.
+      // Create a node for UNKNOWN_TYPE associated with the QMARK token.
+      Node typeNode = createJSTypeNode(getNativeType(UNKNOWN_TYPE), token);
+      // Consume the '?' token.
+      next();
+      return typeNode;
+    } else if (token == JsDocToken.STAR) {
+      // If the token is '*', it represents the ALL type.
+      // Although the Javadoc strictly defines it as BasicTypeExpression | '?',
+      // tests suggest that '*' should also be parsed here, leading to a later semantic check.
+      // Create a node for ALL_TYPE associated with the STAR token.
+      Node typeNode = createJSTypeNode(getNativeType(ALL_TYPE), token);
+      // Consume the '*' token.
+      next();
+      return typeNode;
+    }
+    // Otherwise, parse it as a more complex BasicTypeExpression.
+    // This handles cases like type names, function types, record types, etc.
     return parseTypeName(token);
   }
\ No newline at end of file
