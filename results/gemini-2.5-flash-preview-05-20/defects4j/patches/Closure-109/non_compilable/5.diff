diff --git a/tmp/1a417212-e9e5-4858-b6b0-25968b1cce9b_buggy.java b/tmp/a7fdbe9c-078a-4547-9b23-5272b24a9df5_fixed.java
index ba2718f..9a7f992 100644
--- a/tmp/1a417212-e9e5-4858-b6b0-25968b1cce9b_buggy.java
+++ b/tmp/a7fdbe9c-078a-4547-9b23-5272b24a9df5_fixed.java
@@ -1,7 +1,27 @@
   /**
    * ContextTypeExpression := BasicTypeExpression | '?'
    * For expressions on the right hand side of a this: or new:
    */
   private Node parseContextTypeExpression(JsDocToken token) {
+    // ContextTypeExpression can be a BasicTypeExpression, '?', or '*' (based on tests).
+    // The current parseTypeName() likely doesn't correctly handle '?' or '*' as standalone
+    // type expressions in this context, leading to a syntax error.
+    if (token.getTokenType() == JsDocToken.QMARK) {
+      // Represents the unknown type.
+      Node typeNode = new Node(Token.QMARK);
+      stream.next(); // Consume the '?' token
+      return typeNode;
+    } else if (token.getTokenType() == JsDocToken.STAR) {
+      // Represents the "any" type.
+      // This is not explicitly in the comment's grammar for ContextTypeExpression,
+      // but testStructuralConstructor3 expects it to be parsed correctly
+      // before a semantic error is reported.
+      Node typeNode = new Node(Token.STAR);
+      stream.next(); // Consume the '*' token
+      return typeNode;
+    } else {
+      // Otherwise, it's a BasicTypeExpression, which parseTypeName handles.
+      // parseTypeName is responsible for consuming the tokens it parses.
       return parseTypeName(token);
     }
+  }
\ No newline at end of file
