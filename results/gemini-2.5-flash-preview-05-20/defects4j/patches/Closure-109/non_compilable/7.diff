diff --git a/tmp/a85a9532-056b-4c2f-af0e-a81c81b7cbc3_buggy.java b/tmp/74bd306e-8274-4b88-a957-cfd740fff71d_fixed.java
index ba2718f..d5612e8 100644
--- a/tmp/a85a9532-056b-4c2f-af0e-a81c81b7cbc3_buggy.java
+++ b/tmp/74bd306e-8274-4b88-a957-cfd740fff71d_fixed.java
@@ -1,7 +1,24 @@
   /**
    * ContextTypeExpression := BasicTypeExpression | '?'
    * For expressions on the right hand side of a this: or new:
    */
   private Node parseContextTypeExpression(JsDocToken token) {
+    // According to the JSDoc grammar for ContextTypeExpression, it can be a '?'
+    // token directly, indicating an unknown constructor/this type.
+    if (token == JsDocToken.QMARK) {
+      stream.next(); // Consume the '?' token
+      // Represent '?' as a QMARK node, similar to how '?' is used for nullable types.
+      return createJSDocNode(Token.QMARK);
+    }
+    // The tests also indicate that '*' (UNKNOWN type) should be handled explicitly
+    // in this context, preventing it from being misparsed by parseTypeName
+    // if parseTypeName expects a more specific BasicTypeExpression here.
+    else if (token == JsDocToken.STAR) {
+      stream.next(); // Consume the '*' token
+      // Represent '*' as a STAR node, which is the standard for UNKNOWN types.
+      return createJSDocNode(Token.STAR);
+    }
+    // For any other token, it is expected to be a BasicTypeExpression (e.g., a type name).
+    // parseTypeName is responsible for parsing these and also consumes the token.
     return parseTypeName(token);
   }
\ No newline at end of file
