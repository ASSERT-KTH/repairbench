diff --git a/tmp/cf1c792d-1637-4319-aee8-310abbb71836_buggy.java b/tmp/35d9736d-73e8-44bd-b800-1701ee3bd618_fixed.java
index ba2718f..9a0eb6b 100644
--- a/tmp/cf1c792d-1637-4319-aee8-310abbb71836_buggy.java
+++ b/tmp/35d9736d-73e8-44bd-b800-1701ee3bd618_fixed.java
@@ -1,7 +1,19 @@
   /**
    * ContextTypeExpression := BasicTypeExpression | '?'
    * For expressions on the right hand side of a this: or new:
    */
   private Node parseContextTypeExpression(JsDocToken token) {
+    if (token.isType(JsDocToken.QMARK)) {
+      // '?' represents an unknown type in JSDoc.
+      // In Closure Compiler's AST, this maps to Token.QMARK.
+      return createJSTypeNode(token.getStartLine(), token.getStartChar(), Token.QMARK);
+    } else if (token.isType(JsDocToken.STAR)) {
+      // '*' represents an all type in JSDoc.
+      // In Closure Compiler's AST, this maps to Token.STAR.
+      // Although the comment only explicitly mentions '?', the failing test for `new:*` indicates
+      // that '*' should also be handled explicitly here, similar to '?'.
+      return createJSTypeNode(token.getStartLine(), token.getStartChar(), Token.STAR);
+    }
+    // If it's neither '?' nor '*', try to parse it as a basic type name.
     return parseTypeName(token);
   }
\ No newline at end of file
