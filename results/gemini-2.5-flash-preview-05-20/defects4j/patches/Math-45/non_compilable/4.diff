diff --git a/tmp/05e58edb-2300-4ebf-8a1e-a51fc518b93b_buggy.java b/tmp/f38fd473-4e3f-486d-8efe-ba83adcde03f_fixed.java
index 6c5e87f..a31ebe4 100644
--- a/tmp/05e58edb-2300-4ebf-8a1e-a51fc518b93b_buggy.java
+++ b/tmp/f38fd473-4e3f-486d-8efe-ba83adcde03f_fixed.java
@@ -1,12 +1,25 @@
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException if the product of row and column dimensions
+     *  exceeds {@link Integer#MAX_VALUE}, which would lead to an overflow in internal index calculations.
      */
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
+        // Validate dimensions. The super constructor handles non-positive dimensions by throwing
+        // NotPositiveException. This constructor adds a check for dimensions that are
+        // positive but so large that their product (used for internal flat indexing)
+        // would overflow an int.
+        // For instance, a common internal implementation might use row * columns + col as a key,
+        // which must fit within an int.
+        long product = (long) rowDimension * columnDimension;
+        if (product > Integer.MAX_VALUE) {
+            throw new NumberIsTooLargeException(product, Integer.MAX_VALUE, false);
+        }
+
         super(rowDimension, columnDimension);
         this.rows = rowDimension;
         this.columns = columnDimension;
         this.entries = new OpenIntToDoubleHashMap(0.0);
     }
\ No newline at end of file
