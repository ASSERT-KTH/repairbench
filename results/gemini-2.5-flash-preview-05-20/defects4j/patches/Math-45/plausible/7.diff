diff --git a/tmp/ec515849-8c4b-452e-a169-acea3d183659_buggy.java b/tmp/b3d51d6f-8fb8-44b2-b8c1-c593e85dde3b_fixed.java
index 6c5e87f..9efc54f 100644
--- a/tmp/ec515849-8c4b-452e-a169-acea3d183659_buggy.java
+++ b/tmp/b3d51d6f-8fb8-44b2-b8c1-c593e85dde3b_fixed.java
@@ -1,12 +1,34 @@
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException if the product of row and column dimensions
+     *  exceeds {@link Integer#MAX_VALUE} + 1, which means the internal storage index would overflow.
      */
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
-        super(rowDimension, columnDimension);
+        super(rowDimension, columnDimension); // This calls AbstractRealMatrix constructor, which validates positive dimensions.
+
+        // The internal storage uses an int key for each entry, calculated as row * columns + column.
+        // The maximum possible key value for a matrix of (rows, columns) is (rows - 1) * columns + (columns - 1).
+        // If rows > 0 and columns > 0, this simplifies to (long)rows * columns - 1.
+        // For this maximum index to fit within an int, it must be less than or equal to Integer.MAX_VALUE.
+        // So, we need (long)rowDimension * columnDimension - 1 <= Integer.MAX_VALUE.
+        // This is equivalent to (long)rowDimension * columnDimension <= (long)Integer.MAX_VALUE + 1L.
+        // If this condition is violated, it means the dimensions are too large for the internal indexing scheme.
+        if ((long) rowDimension * columnDimension > ((long) Integer.MAX_VALUE + 1L)) {
+            // The "wrong" number is the conceptual total number of entries that would be needed if dense,
+            // which determines the range of potential internal indices.
+            // The "maximal" allowed number of such entries is (Integer.MAX_VALUE + 1)
+            // because the highest index is Integer.MAX_VALUE.
+            throw new org.apache.commons.math.exception.NumberIsTooLargeException(
+                    (long) rowDimension * columnDimension, // The actual product of dimensions
+                    (long) Integer.MAX_VALUE + 1L,       // The maximal allowed product such that indices fit int
+                    false // 'inclusive' is false because (wrong > maximal) indicates the error
+            );
+        }
+
         this.rows = rowDimension;
         this.columns = columnDimension;
-        this.entries = new OpenIntToDoubleHashMap(0.0);
+        this.entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);
     }
\ No newline at end of file
