diff --git a/tmp/d479a06e-b711-49aa-a779-fca07b2fe1c8_buggy.java b/tmp/8c47f43e-a2fa-4891-b51b-dd4944a1ff10_fixed.java
index 6c5e87f..24f0f1a 100644
--- a/tmp/d479a06e-b711-49aa-a779-fca07b2fe1c8_buggy.java
+++ b/tmp/8c47f43e-a2fa-4891-b51b-dd4944a1ff10_fixed.java
@@ -1,12 +1,26 @@
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
+     * @throws org.apache.commons.math.exception.NotPositiveException if row or column dimension is not positive.
+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException if the product of row and column dimensions
+     *                                                                     exceeds {@link Integer#MAX_VALUE}, which
+     *                                                                     is the maximum possible number of keys in the
+     *                                                                     internal hash map.
      */
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
         super(rowDimension, columnDimension);
+        // The super constructor handles non-positive dimensions.
+        // We need to ensure that the total number of potential cells (row * column)
+        // does not exceed Integer.MAX_VALUE, as the internal mapping uses int keys
+        // derived from a linear index (row * columnDimension + col).
+        long overallSize = (long) rowDimension * columnDimension;
+        if (overallSize > Integer.MAX_VALUE) {
+            throw new org.apache.commons.math.exception.NumberIsTooLargeException(overallSize, Integer.MAX_VALUE, true);
+        }
+
         this.rows = rowDimension;
         this.columns = columnDimension;
-        this.entries = new OpenIntToDoubleHashMap(0.0);
+        this.entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);
     }
\ No newline at end of file
