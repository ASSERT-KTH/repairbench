diff --git a/tmp/8f2075fa-cb5e-4123-882f-e0095b5d7407_buggy.java b/tmp/d888ad08-7fd2-42c3-af56-dcfc4948efbe_fixed.java
index 6c5e87f..8d4e954 100644
--- a/tmp/8f2075fa-cb5e-4123-882f-e0095b5d7407_buggy.java
+++ b/tmp/d888ad08-7fd2-42c3-af56-dcfc4948efbe_fixed.java
@@ -1,12 +1,32 @@
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException
+     *         if the product of {@code rowDimension} and {@code columnDimension}
+     *         exceeds {@link java.lang.Integer#MAX_VALUE}, which is the maximum
+     *         capacity for internal indexing.
      */
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
         super(rowDimension, columnDimension);
+
+        // The internal storage OpenIntToDoubleHashMap uses an int for keys.
+        // These keys are generated by row * columns + column.
+        // This implies that the total number of theoretical elements (rowDimension * columnDimension)
+        // must not exceed Integer.MAX_VALUE, otherwise the indexing will overflow.
+        // The super constructor ensures rowDimension and columnDimension are positive.
+        // We need to check if rowDimension * columnDimension would overflow an int.
+        // A safe check for a * b > MAX_INT without overflow: if (a > MAX_INT / b)
+        if (columnDimension > 0 && rowDimension > Integer.MAX_VALUE / columnDimension) {
+            throw new org.apache.commons.math.exception.NumberIsTooLargeException(
+                (long) rowDimension * columnDimension, // actual product that would be too large
+                Integer.MAX_VALUE,                     // maximum allowed for int indexing
+                false                                  // not inclusive, i.e., MAX_VALUE itself is allowed
+            );
+        }
+
         this.rows = rowDimension;
         this.columns = columnDimension;
         this.entries = new OpenIntToDoubleHashMap(0.0);
     }
\ No newline at end of file
