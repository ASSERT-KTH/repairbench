diff --git a/tmp/daa25c1f-a682-40ca-94c7-e51e2e417933_buggy.java b/tmp/80d0ae99-38e2-4d46-83ec-f4d2851dcd5f_fixed.java
index 6c5e87f..b2e747b 100644
--- a/tmp/daa25c1f-a682-40ca-94c7-e51e2e417933_buggy.java
+++ b/tmp/80d0ae99-38e2-4d46-83ec-f4d2851dcd5f_fixed.java
@@ -1,12 +1,28 @@
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
      */
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
         super(rowDimension, columnDimension);
         this.rows = rowDimension;
         this.columns = columnDimension;
+
+        // Check if the total number of theoretical entries (rowDimension * columnDimension)
+        // exceeds the maximum value that can be represented by an int for indexing.
+        // The internal storage (OpenIntToDoubleHashMap) uses int keys, where the key
+        // is typically computed as row * columnDimension + column.
+        // The maximum possible linear index would be (rowDimension * columnDimension) - 1.
+        // This maximum index must fit within an int, meaning (rowDimension * columnDimension) - 1 <= Integer.MAX_VALUE.
+        // This implies that rowDimension * columnDimension must be <= Integer.MAX_VALUE + 1.
+        // We cast to long before multiplication to prevent overflow when calculating
+        // totalEntries, allowing us to correctly check against Integer.MAX_VALUE.
+        long totalEntries = (long) rowDimension * columnDimension;
+        if (totalEntries > (long)Integer.MAX_VALUE + 1L) {
+            throw new org.apache.commons.math.exception.NumberIsTooLargeException(
+                totalEntries, (long)Integer.MAX_VALUE + 1L, true);
+        }
+
         this.entries = new OpenIntToDoubleHashMap(0.0);
     }
\ No newline at end of file
