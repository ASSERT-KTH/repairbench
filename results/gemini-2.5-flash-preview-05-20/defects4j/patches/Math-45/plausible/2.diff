diff --git a/tmp/9c4c11c5-006e-49af-a404-488b45b065f3_buggy.java b/tmp/88dc844e-d5d4-479f-8691-107f059439af_fixed.java
index 6c5e87f..94bd26c 100644
--- a/tmp/9c4c11c5-006e-49af-a404-488b45b065f3_buggy.java
+++ b/tmp/88dc844e-d5d4-479f-8691-107f059439af_fixed.java
@@ -1,12 +1,24 @@
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
      */
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
         super(rowDimension, columnDimension);
         this.rows = rowDimension;
         this.columns = columnDimension;
+
+        // The maximum possible index for a matrix cell is (rowDimension - 1) * columnDimension + (columnDimension - 1).
+        // This simplifies to (long)rowDimension * columnDimension - 1.
+        // For this index to fit into an int, (long)rowDimension * columnDimension - 1 <= Integer.MAX_VALUE.
+        // This implies (long)rowDimension * columnDimension <= Integer.MAX_VALUE + 1.
+        // If the product exceeds Integer.MAX_VALUE + 1, then at least one cell index will overflow an int.
+        // We use 1L to ensure the addition is performed using long arithmetic.
+        if ((long) rowDimension * columnDimension > (long) Integer.MAX_VALUE + 1L) {
+            throw new org.apache.commons.math.exception.NumberIsTooLargeException(
+                    (long) rowDimension * columnDimension, (long) Integer.MAX_VALUE + 1L, false);
+        }
+
         this.entries = new OpenIntToDoubleHashMap(0.0);
     }
\ No newline at end of file
