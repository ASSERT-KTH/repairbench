diff --git a/tmp/26bd72e2-fe1c-4131-8fe0-3a2aa400aa08_buggy.java b/tmp/8b18fa1e-c161-41cf-9e83-003a626f9292_fixed.java
index 6c5e87f..cc464c3 100644
--- a/tmp/26bd72e2-fe1c-4131-8fe0-3a2aa400aa08_buggy.java
+++ b/tmp/8b18fa1e-c161-41cf-9e83-003a626f9292_fixed.java
@@ -1,12 +1,30 @@
     /**
      * Build a sparse matrix with the supplied row and column dimensions.
      *
      * @param rowDimension Number of rows of the matrix.
      * @param columnDimension Number of columns of the matrix.
+     * @throws org.apache.commons.math.exception.NotPositiveException if the row or column dimension is not positive.
+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException if the product of row and column dimensions
+     *  exceeds {@link Integer#MAX_VALUE}, which is the maximum capacity for the internal linear index.
      */
     public OpenMapRealMatrix(int rowDimension, int columnDimension) {
         super(rowDimension, columnDimension);
+
+        // The internal storage (OpenIntToDoubleHashMap) uses int keys for linear indices.
+        // A linear index is typically calculated as `row * columnDimension + column`.
+        // Therefore, the maximum possible linear index `(rowDimension - 1) * columnDimension + (columnDimension - 1)`
+        // must fit within an int. This implies that the total number of potential elements
+        // (rowDimension * columnDimension) must not exceed Integer.MAX_VALUE.
+        // If rowDimension * columnDimension exceeds Integer.MAX_VALUE, then accessing elements
+        // via linear indexing will lead to an integer overflow.
+        if ((long) rowDimension * columnDimension > Integer.MAX_VALUE) {
+            throw new org.apache.commons.math.exception.NumberIsTooLargeException(
+                    (long) rowDimension * columnDimension,
+                    (long) Integer.MAX_VALUE,
+                    true); // true means Integer.MAX_VALUE itself is allowed, but anything strictly greater is not.
+        }
+
         this.rows = rowDimension;
         this.columns = columnDimension;
-        this.entries = new OpenIntToDoubleHashMap(0.0);
+        this.entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);
     }
\ No newline at end of file
