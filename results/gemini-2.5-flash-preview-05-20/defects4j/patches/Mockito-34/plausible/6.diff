diff --git a/tmp/e69d199f-aaec-4055-a8dd-ff5e46b5dce6_buggy.java b/tmp/6444cbbc-6cca-45c8-beae-bb2a6964665f_fixed.java
index d68a69c..a577594 100644
--- a/tmp/e69d199f-aaec-4055-a8dd-ff5e46b5dce6_buggy.java
+++ b/tmp/6444cbbc-6cca-45c8-beae-bb2a6964665f_fixed.java
@@ -1,9 +1,20 @@
     public void captureArgumentsFrom(Invocation i) {
         int k = 0;
+        Object[] actualArguments = i.getArguments(); // Get arguments once for efficiency and clarity
         for (Matcher m : matchers) {
             if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+                // Ensure that the current index 'k' is within the bounds of the actual arguments array.
+                // This prevents ArrayIndexOutOfBoundsException when matchers expect more arguments
+                // than provided in the actual invocation (e.g., when a vararg method is called with no arguments).
+                if (k < actualArguments.length) {
+                    ((CapturesArguments) m).captureFrom(actualArguments[k]);
+                }
+                // If k >= actualArguments.length, it means there are no more actual arguments
+                // to capture for this matcher. For matchers like AnyVararg that match an empty
+                // vararg, not calling captureFrom(Object) is the correct behavior as there's
+                // no single object to pass. For other CapturesArguments, it implies they are
+                // attempting to capture a non-existent argument.
             }
             k++;
         }
     }
\ No newline at end of file
