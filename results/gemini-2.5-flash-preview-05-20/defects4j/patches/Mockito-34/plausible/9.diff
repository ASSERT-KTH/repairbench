diff --git a/tmp/ac3ea730-57ec-44f1-ab62-09ec969765dc_buggy.java b/tmp/f02c405c-8d12-4a93-98fb-65d76c4cde27_fixed.java
index d68a69c..886e523 100644
--- a/tmp/ac3ea730-57ec-44f1-ab62-09ec969765dc_buggy.java
+++ b/tmp/f02c405c-8d12-4a93-98fb-65d76c4cde27_fixed.java
@@ -1,9 +1,24 @@
     public void captureArgumentsFrom(Invocation i) {
+        Object[] actualArguments = i.getArguments();
         int k = 0;
         for (Matcher m : matchers) {
             if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+                // Check if the current matcher's expected argument index (k) is within
+                // the bounds of the actual arguments provided in the invocation.
+                if (k < actualArguments.length) {
+                    // If an actual argument exists at this index, capture it.
+                    ((CapturesArguments) m).captureFrom(actualArguments[k]);
+                } else {
+                    // If no actual argument exists at this index (e.g., the invocation
+                    // had fewer arguments than expected by the matchers, or zero arguments
+                    // when a captor was at index 0), capture null. This prevents
+                    // ArrayIndexOutOfBoundsException and is a common way for argument captors
+                    // to signify that no argument was available for capture.
+                    ((CapturesArguments) m).captureFrom(null);
                 }
+            }
+            // Increment k for the next matcher, as k tracks the position in the matchers list
+            // which conceptually corresponds to the argument index.
             k++;
         }
     }
\ No newline at end of file
