diff --git a/tmp/43bb1977-a4bb-46bd-a5ed-d82e1f5ba4ba_buggy.java b/tmp/28228031-b09b-4b42-a3d9-63d9a1e01852_fixed.java
index d68a69c..c2a7a97 100644
--- a/tmp/43bb1977-a4bb-46bd-a5ed-d82e1f5ba4ba_buggy.java
+++ b/tmp/28228031-b09b-4b42-a3d9-63d9a1e01852_fixed.java
@@ -1,9 +1,30 @@
     public void captureArgumentsFrom(Invocation i) {
         int k = 0;
-        for (Matcher m : matchers) {
-            if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+        Object[] arguments = i.getArguments(); // Get the arguments array from the invocation
+        for (Matcher m : matchers) { // Iterate through each matcher defined for the stubbing
+            if (m instanceof CapturesArguments) { // Check if the current matcher is designed to capture arguments
+                // A CapturesArguments matcher needs an actual argument to capture.
+                // The index 'k' tracks the expected position of the argument relative to the matchers.
+                // However, the actual invocation's arguments might have a different count,
+                // especially with varargs matchers like AnyVararg that can match zero arguments.
+                //
+                // If 'k' is greater than or equal to the number of actual arguments,
+                // it means there's no corresponding argument in the invocation for this matcher to capture
+                // at the current position. Attempting to access arguments[k] would lead to
+                // an ArrayIndexOutOfBoundsException.
+                if (k < arguments.length) {
+                    // If an argument exists at this position, attempt to capture it.
+                    ((CapturesArguments) m).captureFrom(arguments[k]);
                 }
+                // If k >= arguments.length, we simply do not call captureFrom for this matcher,
+                // as there is no argument available at this position in the actual invocation.
+                // This prevents the ArrayIndexOutOfBoundsException that occurs when a matcher
+                // tries to capture an argument that doesn't exist (e.g., when a method
+                // expecting varargs is called with no arguments, and AnyVararg attempts capture).
+            }
+            // Increment the argument index for the next matcher.
+            // This maintains the one-to-one conceptual alignment between matchers and arguments
+            // that the original code structure implies.
             k++;
         }
     }
\ No newline at end of file
