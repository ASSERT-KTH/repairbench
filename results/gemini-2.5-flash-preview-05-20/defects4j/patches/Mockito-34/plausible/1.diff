diff --git a/tmp/b65d9351-fa46-4b8b-8a3a-702f26233eff_buggy.java b/tmp/6f072853-5302-4087-8a14-eb89e5df8fcf_fixed.java
index d68a69c..c69b069 100644
--- a/tmp/b65d9351-fa46-4b8b-8a3a-702f26233eff_buggy.java
+++ b/tmp/6f072853-5302-4087-8a14-eb89e5df8fcf_fixed.java
@@ -1,9 +1,22 @@
     public void captureArgumentsFrom(Invocation i) {
+        Object[] actualArguments = i.getArguments();
         int k = 0;
         for (Matcher m : matchers) {
             if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+                // Ensure that 'k' is a valid index for the actual arguments array.
+                // This prevents ArrayIndexOutOfBoundsException when the number of actual
+                // arguments is less than the number of matchers, especially when an
+                // ArgumentCaptor is present for an argument that was not provided
+                // in the actual invocation (e.g., in a varargs scenario where 0 arguments
+                // are matched by an AnyVararg, but an ArgumentCaptor is expected).
+                if (k < actualArguments.length) {
+                    ((CapturesArguments) m).captureFrom(actualArguments[k]);
                 }
+            }
+            // Increment 'k' for every matcher, regardless of whether it's a CapturesArguments.
+            // This maintains the 1:1 conceptual mapping between matchers and argument positions,
+            // even if a matcher like AnyVararg might consume multiple arguments in actual matching.
+            // For capturing, each CapturesArguments matcher is associated with a single argument position.
             k++;
         }
     }
\ No newline at end of file
