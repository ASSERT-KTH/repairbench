diff --git a/tmp/f7fbab02-32ae-4afd-a870-14d59b20c318_buggy.java b/tmp/d95067fe-1a3e-4e45-9db3-f4ea9c2293e4_fixed.java
index e3e3ec4..4a8c79e 100644
--- a/tmp/f7fbab02-32ae-4afd-a870-14d59b20c318_buggy.java
+++ b/tmp/d95067fe-1a3e-4e45-9db3-f4ea9c2293e4_fixed.java
@@ -1,9 +1,18 @@
     /**
      * {@inheritDoc}
      *
      * For population size {@code N}, number of successes {@code m}, and sample
      * size {@code n}, the mean is {@code n * m / N}.
      */
     public double getNumericalMean() {
-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
+        // The original implementation was:
+        // return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
+        // This can suffer from integer overflow if the product getSampleSize() * getNumberOfSuccesses()
+        // exceeds Integer.MAX_VALUE. For the test case (N=43130568, m=42976365, n=50),
+        // the product 50 * 42976365 = 2148818250, which is greater than Integer.MAX_VALUE (2147483647).
+        // This causes an integer overflow, resulting in a negative intermediate value,
+        // and consequently a negative mean, which is incorrect for a Hypergeometric Distribution.
+        // To prevent this, ensure the multiplication is performed using floating-point arithmetic
+        // from the start, so intermediate products are not truncated or wrapped around due to int limits.
+        return (double) getSampleSize() * getNumberOfSuccesses() / getPopulationSize();
     }
\ No newline at end of file
