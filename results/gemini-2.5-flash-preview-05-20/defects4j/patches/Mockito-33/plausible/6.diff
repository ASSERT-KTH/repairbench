diff --git a/tmp/577a9fb6-441b-4bc0-870e-19c3ffad9223_buggy.java b/tmp/652240ca-6332-453f-8843-644cf2ddcb7f_fixed.java
index e1fc51f..2688c8b 100644
--- a/tmp/577a9fb6-441b-4bc0-870e-19c3ffad9223_buggy.java
+++ b/tmp/652240ca-6332-453f-8843-644cf2ddcb7f_fixed.java
@@ -1,9 +1,39 @@
     public boolean hasSameMethod(Invocation candidate) {        
         //not using method.equals() for 1 good reason:
         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // The original comment indicates that Method.equals() is too strict for Mockito's purpose,
+        // especially when dealing with generics, inherited methods, and JVM-generated bridge/forwarding methods.
+        // Method.equals() considers the declaring class, which can differ for logically the same method
+        // (e.g., an interface method vs. its implementation, or a superclass method vs. its override in a subclass).
+        // For Mockito to correctly match invocations for stubbing and verification, methods
+        // are considered "the same" if they have the same name and the same parameter types,
+        // regardless of their declaring class or whether one is a synthetic bridge method.
+
+        // Compare method names
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // Compare parameter types
+        Class<?>[] params1 = m1.getParameterTypes();
+        Class<?>[] params2 = m2.getParameterTypes();
+
+        if (params1.length != params2.length) {
+            return false;
+        }
+
+        for (int i = 0; i < params1.length; i++) {
+            if (!params1[i].equals(params2[i])) {
+                return false;
+            }
+        }
+
+        // If names and parameter types match, they are considered the same logical method
+        // for the purpose of matching invocations in Mockito.
+        // This handles cases where Method.equals() would fail due to differing declaring classes
+        // or other subtle differences related to generics and inheritance that Mockito needs to ignore.
+        return true;
     }
\ No newline at end of file
