diff --git a/tmp/90368ade-4b38-4990-8e7c-486bbe523bfa_buggy.java b/tmp/b23cc6ad-0384-44f5-9a34-36bf7f1cceec_fixed.java
index e1fc51f..360742d 100644
--- a/tmp/90368ade-4b38-4990-8e7c-486bbe523bfa_buggy.java
+++ b/tmp/b23cc6ad-0384-44f5-9a34-36bf7f1cceec_fixed.java
@@ -1,9 +1,38 @@
     public boolean hasSameMethod(Invocation candidate) {        
         //not using method.equals() for 1 good reason:
         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // Original comment was misleading. m1.equals(m2) is too strict
+        // for scenarios involving generics and bridge methods, where the
+        // Method objects might differ in declaring class or return type,
+        // but semantically represent the same callable method.
+        // We need a more lenient comparison based on name and parameter types.
+        
+        // 1. Compare method names
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // 2. Compare parameter types
+        Class<?>[] p1 = m1.getParameterTypes();
+        Class<?>[] p2 = m2.getParameterTypes();
+
+        // Check number of parameters
+        if (p1.length != p2.length) {
+            return false;
+        }
+
+        // Check each parameter type
+        for (int i = 0; i < p1.length; i++) {
+            if (!p1[i].equals(p2[i])) {
+                return false;
+            }
+        }
+        
+        // If names and parameter types match, consider them the same method
+        // for the purpose of stubbing/verification, even if return type
+        // or declaring class differ due to generics/bridge methods.
+        return true;
     }
\ No newline at end of file
