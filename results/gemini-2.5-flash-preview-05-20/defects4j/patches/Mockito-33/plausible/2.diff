diff --git a/tmp/9f823e2c-f2b4-457a-b355-207838b21646_buggy.java b/tmp/99f6cbe3-e9ca-4039-a5d5-0184e9e37e90_fixed.java
index e1fc51f..8ad3b77 100644
--- a/tmp/9f823e2c-f2b4-457a-b355-207838b21646_buggy.java
+++ b/tmp/99f6cbe3-e9ca-4039-a5d5-0184e9e37e90_fixed.java
@@ -1,9 +1,26 @@
     public boolean hasSameMethod(Invocation candidate) {        
         //not using method.equals() for 1 good reason:
         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
         	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // Method.equals() is too strict for method matching, especially with generics,
+        // bridge methods, and polymorphism (overriding/implementing).
+        // It checks the declaring class and sometimes the return type, which can differ
+        // for semantically equivalent methods.
+
+        // A method is considered "the same" if:
+        // 1. Their names are identical.
+        // 2. Their parameter types are identical.
+        // 3. Their declaring classes are either the same, or one is assignable from the other
+        //    (e.g., an interface or superclass method being implemented/overridden).
+        // This approach handles bridge methods and covariant return types implicitly,
+        // as it focuses on the method's signature (name and parameter types)
+        // and class hierarchy, rather than strict Method object equality.
+        return m1.getName().equals(m2.getName())
+                && java.util.Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())
+                && (m1.getDeclaringClass().equals(m2.getDeclaringClass())
+                    || m1.getDeclaringClass().isAssignableFrom(m2.getDeclaringClass())
+                    || m2.getDeclaringClass().isAssignableFrom(m1.getDeclaringClass()));
     }
\ No newline at end of file
