diff --git a/tmp/57657b27-0ffe-4b62-a94d-48d46178030b_buggy.java b/tmp/061f39b8-df85-4155-a50d-a408f42a03e7_fixed.java
index e1fc51f..3e1fea8 100644
--- a/tmp/57657b27-0ffe-4b62-a94d-48d46178030b_buggy.java
+++ b/tmp/061f39b8-df85-4155-a50d-a408f42a03e7_fixed.java
@@ -1,9 +1,45 @@
     public boolean hasSameMethod(Invocation candidate) {        
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
+        // The original comment states:
+        // "not using method.equals() for 1 good reason:
+        // sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest"
+        // However, the original code used `return m1.equals(m2);`, which directly contradicted this comment.
+        //
+        // Method.equals() is too strict for Mockito's needs because it considers the declaring class.
+        // In polymorphic scenarios (e.g., method overriding or interface implementation),
+        // a method invoked through a supertype or interface might yield a `Method` object
+        // with a different declaring class than the method stubbed on the concrete type,
+        // even if they represent the same logical operation.
+        //
+        // To correctly handle these cases (including those involving bridge methods
+        // where parameter types are not affected by type erasure, like `iterator()`),
+        // we need a comparison that focuses on the method's signature: its name and parameter types.
+
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // 1. Compare method names
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // 2. Compare parameter types
+        Class<?>[] params1 = m1.getParameterTypes();
+        Class<?>[] params2 = m2.getParameterTypes();
+
+        if (params1.length != params2.length) {
+            return false;
+        }
+
+        // Iterate and compare each parameter type
+        for (int i = 0; i < params1.length; i++) {
+            // Class.equals() correctly compares Class objects
+            if (!params1[i].equals(params2[i])) {
+                return false;
+            }
+        }
+        
+        // If both the method name and all parameter types match,
+        // the methods are considered the same for the purpose of invocation matching
+        // within Mockito, resolving the issue of `Method.equals()` being too strict.
+        return true;
     }
