diff --git a/tmp/8f2fadbe-3303-4ae4-bf4c-2930ebc44109_buggy.java b/tmp/a03a73c7-3acf-44c6-8cec-3e9111cb11eb_fixed.java
index e1fc51f..430d784 100644
--- a/tmp/8f2fadbe-3303-4ae4-bf4c-2930ebc44109_buggy.java
+++ b/tmp/a03a73c7-3acf-44c6-8cec-3e9111cb11eb_fixed.java
@@ -1,9 +1,35 @@
     public boolean hasSameMethod(Invocation candidate) {        
         //not using method.equals() for 1 good reason:
         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // The original code `return m1.equals(m2);` contradicts the preceding comment.
+        // `Method.equals()` is too strict for situations involving generics and
+        // bridge/forwarding methods. When generics are used, Java might generate
+        // different Method objects (e.g., with different return types or declaring
+        // classes) for what is conceptually the same method from the user's perspective
+        // (e.g., an overloaded method in a subclass vs. its generic superclass/interface
+        // method).
+        //
+        // To properly match invocations in such scenarios, a more lenient comparison
+        // is required. A common approach in Mockito and similar frameworks is to
+        // compare methods based on their name and parameter types, as these are
+        // typically consistent for conceptually identical methods, even when
+        // return types or declaring classes differ due to generic specialization
+        // or bridge methods.
+
+        // Compare by name
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // Compare by parameter types
+        if (!java.util.Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())) {
+            return false;
+        }
+        
+        // If name and parameter types match, they are considered the same conceptual method
+        // in the context of handling generics and forwarding methods for Mockito.
+        return true;
     }
\ No newline at end of file
