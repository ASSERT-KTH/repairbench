diff --git a/tmp/c282103d-fdc7-4909-a098-3b37674cfa95_buggy.java b/tmp/713412c3-4846-4cfb-a5cf-60aeb18e1bb2_fixed.java
index e1fc51f..9a99e1a 100644
--- a/tmp/c282103d-fdc7-4909-a098-3b37674cfa95_buggy.java
+++ b/tmp/713412c3-4846-4cfb-a5cf-60aeb18e1bb2_fixed.java
@@ -1,9 +1,57 @@
     public boolean hasSameMethod(Invocation candidate) {        
         // not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
+        // sometimes java generates forwarding methods (bridge methods) when generics are in play
+        // or when dealing with covariant return types or methods implemented from interfaces/abstract classes.
+        // The standard Method.equals() is too strict for matching logical methods in these scenarios.
+        
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // 1. If methods are strictly equal, they are the same.
+        if (m1.equals(m2)) {
+            return true;
+        }
+
+        // 2. Check if method names are different. If so, they cannot be the same logical method.
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // 3. Check if parameter types are different. If so, they cannot be the same logical method.
+        Class<?>[] params1 = m1.getParameterTypes();
+        Class<?>[] params2 = m2.getParameterTypes();
+        if (!java.util.Arrays.equals(params1, params2)) {
+            return false;
+        }
+
+        // At this point, method names and parameter types are identical.
+        // Method.equals() returned false, implying either the declaring class or return type differs.
+
+        // 4. Handle bridge methods:
+        //    If one method is a bridge method and they share the same signature (name + parameter types),
+        //    they often represent the same logical method. This is common with generics.
+        if (m1.isBridge() || m2.isBridge()) {
+            return true;
+        }
+
+        // 5. Handle covariant return types or methods overridden/implemented across class hierarchies:
+        //    If neither is a bridge method, but their declaring classes are related by inheritance/implementation,
+        //    and their return types are compatible (e.g., one is a subtype of the other),
+        //    they are considered the same logical method.
+        Class<?> dc1 = m1.getDeclaringClass();
+        Class<?> dc2 = m2.getDeclaringClass();
+
+        if (dc1.isAssignableFrom(dc2) || dc2.isAssignableFrom(dc1)) {
+            // If declaring classes are related, check return type compatibility.
+            // For example, if A.getFoo() returns Foo and B.getFoo() returns Bar (where Bar extends Foo),
+            // then Foo.isAssignableFrom(Bar) is true.
+            if (m1.getReturnType().isAssignableFrom(m2.getReturnType()) ||
+                m2.getReturnType().isAssignableFrom(m1.getReturnType())) {
+                return true;
+            }
+        }
+
+        // If none of the above conditions met, they are not considered the same logical method
+        // for the purpose of stubbing or verification.
+        return false;
     }
\ No newline at end of file
