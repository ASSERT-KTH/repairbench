diff --git a/tmp/64f71061-5057-459a-abdf-bbd8f398ec4e_buggy.java b/tmp/6baffad6-c9d1-45ab-a198-a132ca1afc9c_fixed.java
index e1fc51f..42036a4 100644
--- a/tmp/64f71061-5057-459a-abdf-bbd8f398ec4e_buggy.java
+++ b/tmp/6baffad6-c9d1-45ab-a198-a132ca1afc9c_fixed.java
@@ -1,9 +1,46 @@
     public boolean hasSameMethod(Invocation candidate) {        
         //not using method.equals() for 1 good reason:
         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
         /* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // The original comment correctly points out that Method.equals() is too strict for
+        // scenarios involving generics, bridge methods, or polymorphic calls (overriding/implementing methods).
+        // Method.equals() requires the declaring class to be the same, which is not always desired
+        // when comparing an invoked method (e.g., from a subclass) to a stubbed/verified method
+        // (e.g., from an interface or superclass).
+
+        // If the methods are strictly equal, they definitely match.
+        if (m1.equals(m2)) {
+            return true;
+        }
+
+        // Otherwise, perform a more lenient comparison suitable for mockito.
+        // 1. Method names must be identical.
+        if (!m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // 2. Parameter types (raw types) must be identical and in the same order.
+        Class<?>[] params1 = m1.getParameterTypes();
+        Class<?>[] params2 = m2.getParameterTypes();
+        if (params1.length != params2.length) {
+            return false;
+        }
+        for (int i = 0; i < params1.length; i++) {
+            if (!params1[i].equals(params2[i])) {
+                return false;
+            }
+        }
+        
+        // At this point, method names and raw parameter types match.
+        // The only remaining difference for Method.equals() to return false is the declaring class.
+        // We consider them the "same method" if one method is an override/implementation of the other,
+        // which means one's declaring class is assignable from the other's.
+        // This handles cases like:
+        // - Invocation on `MyList.iterator()` matching a stub/verify on `Iterable.iterator()`.
+        // - Bridge methods generated by the JVM for covariant return types or generic type erasure.
+        return m1.getDeclaringClass().isAssignableFrom(m2.getDeclaringClass())
+               || m2.getDeclaringClass().isAssignableFrom(m1.getDeclaringClass());
     }
\ No newline at end of file
