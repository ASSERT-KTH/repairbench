diff --git a/tmp/ad0417d5-3808-4594-a7a3-de9611c8171d_buggy.java b/tmp/ad4a36e5-fda4-4b3f-bfec-64aa074af276_fixed.java
index e1fc51f..baa06de 100644
--- a/tmp/ad0417d5-3808-4594-a7a3-de9611c8171d_buggy.java
+++ b/tmp/ad4a36e5-fda4-4b3f-bfec-64aa074af276_fixed.java
@@ -1,9 +1,26 @@
     public boolean hasSameMethod(Invocation candidate) {        
         //not using method.equals() for 1 good reason:
         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
         
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // The original code was using m1.equals(m2) which is insufficient for generic and polymorphic calls.
+        // Method.equals() requires the same declaring class, which is not always true for
+        // logically equivalent methods in an inheritance hierarchy or involving bridge methods.
+        
+        // First, check for exact method equality (same declaring class, name, and parameter types)
+        if (m1.equals(m2)) {
+            return true;
+        }
+
+        // If not an exact match, check if one method overrides the other.
+        // This covers cases where methods have the same signature (name and parameter types)
+        // but different declaring classes in an inheritance hierarchy, or when bridge methods
+        // are involved due to type erasure in generics.
+        // MethodUtil.isOverridden checks if the first method argument overrides the second.
+        // We check in both directions (m1 overrides m2, or m2 overrides m1) to cover all scenarios
+        // where two logically same methods might be represented by different Method objects
+        // due to polymorphism or generics (e.g., when casting an object to an interface type).
+        return org.mockito.internal.util.reflection.MethodUtil.isOverridden(m1, m2) 
+            || org.mockito.internal.util.reflection.MethodUtil.isOverridden(m2, m1);
     }
\ No newline at end of file
