diff --git a/tmp/d90b973e-54bc-417a-a744-0aa77131a161_buggy.java b/tmp/4002a81f-40e7-45b0-bbbb-689d5c5d34ae_fixed.java
index 88647d1..fe1c02a 100644
--- a/tmp/d90b973e-54bc-417a-a744-0aa77131a161_buggy.java
+++ b/tmp/4002a81f-40e7-45b0-bbbb-689d5c5d34ae_fixed.java
@@ -1,44 +1,54 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
         double yMin = f.value(min);
         double yMax = f.value(max);
         
-        // Verify bracketing
+        // Check for roots at endpoints first, considering accuracy.
+        // If an endpoint is a root (or very close to zero), return it directly.
+        if (Math.abs(yMin) <= getAbsoluteAccuracy()) {
+            setResult(min, 0); // min is a root
+            return min;
+        }
+        if (Math.abs(yMax) <= getAbsoluteAccuracy()) {
+            setResult(max, 0); // max is a root
+            return max;
+        }
+
+        // Verify bracketing: signs of function values at endpoints must be opposite.
+        // If yMin * yMax >= 0, it means they have the same sign or one/both are exactly zero (already handled above).
         double sign = yMin * yMax;
         if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+            // Neither value is close to zero (checked above) and min and max do not bracket the root.
             throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs." +
                         "  Endpoints: [" + min + "," + max + "]" + 
                         "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
+            // Signs are opposite, proceed with solving the bracketed interval.
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
         }
 
         return ret;
     }
\ No newline at end of file
