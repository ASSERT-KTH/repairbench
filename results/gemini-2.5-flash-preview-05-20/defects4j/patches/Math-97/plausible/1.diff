diff --git a/tmp/0b8d2c79-3b11-4a18-9b16-b59bfbddb265_buggy.java b/tmp/51ffb920-ede6-450a-a69e-b8b4a6527cda_fixed.java
index 88647d1..08e23d1 100644
--- a/tmp/0b8d2c79-3b11-4a18-9b16-b59bfbddb265_buggy.java
+++ b/tmp/51ffb920-ede6-450a-a69e-b8b4a6527cda_fixed.java
@@ -1,44 +1,53 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
-        double ret = Double.NaN;
+        double ret = Double.NaN; // Initialize ret, though it will be set or returned directly.
         
         double yMin = f.value(min);
         double yMax = f.value(max);
         
-        // Verify bracketing
+        // Check if either endpoint is a root (or very close to zero).
+        // This must be done before checking the bracketing condition,
+        // as an endpoint being a root results in yMin*yMax >= 0.
+        if (Math.abs(yMin) <= getFunctionValueAccuracy()) {
+            return min;
+        }
+        if (Math.abs(yMax) <= getFunctionValueAccuracy()) {
+            return max;
+        }
+        
+        // Verify bracketing condition: yMin and yMax must have opposite signs.
+        // If they have the same sign (both positive or both negative), throw exception.
+        // If one of them was exactly zero, it would have been caught by the checks above.
         double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+        if (sign > 0) { // If both are strictly positive or strictly negative
             throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs." +
                         "  Endpoints: [" + min + "," + max + "]" + 
                         "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
+        } else { // sign < 0, meaning yMin and yMax have opposite signs
+            // Proceed with the actual bisection/interpolation algorithm
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
         }
 
         return ret;
     }
\ No newline at end of file
