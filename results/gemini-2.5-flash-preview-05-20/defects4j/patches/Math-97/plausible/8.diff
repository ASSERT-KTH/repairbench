diff --git a/tmp/c2fc37dc-efa1-4fdd-a9d2-db169a626259_buggy.java b/tmp/0f1beb73-d0cd-4ce0-9ab6-1c4b962dad5c_fixed.java
index 88647d1..365f1f8 100644
--- a/tmp/c2fc37dc-efa1-4fdd-a9d2-db169a626259_buggy.java
+++ b/tmp/0f1beb73-d0cd-4ce0-9ab6-1c4b962dad5c_fixed.java
@@ -1,44 +1,53 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
         double yMin = f.value(min);
         double yMax = f.value(max);
         
-        // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
+        // Check if either endpoint is a root within the solver's accuracy
+        if (Math.abs(yMin) <= getAbsoluteAccuracy()) {
+            return min;
+        }
+        if (Math.abs(yMax) <= getAbsoluteAccuracy()) {
+            return max;
+        }
+        
+        // Verify bracketing: yMin and yMax must have opposite signs.
+        // If one is zero, it would have been caught by the checks above.
+        // So, if their product is positive, they have the same non-zero sign.
+        if (yMin * yMax > 0) {
             // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
+            // yMin * yMax <= 0, meaning signs are opposite or one/both are very close to zero.
+            // (The case where one or both are *exactly* zero or within accuracy has been handled above).
+            // Proceed with the iterative solver.
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
         }
 
         return ret;
     }
\ No newline at end of file
