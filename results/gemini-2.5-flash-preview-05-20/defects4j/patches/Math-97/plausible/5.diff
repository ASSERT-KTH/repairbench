diff --git a/tmp/48576c7b-0824-407f-86cb-c6e802c580cf_buggy.java b/tmp/de1173e2-9db5-4a2e-926b-90889a98ff5a_fixed.java
index 88647d1..c965d6a 100644
--- a/tmp/48576c7b-0824-407f-86cb-c6e802c580cf_buggy.java
+++ b/tmp/de1173e2-9db5-4a2e-926b-90889a98ff5a_fixed.java
@@ -1,44 +1,57 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
-        double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
         
-        // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+        // Get the absolute accuracy from the solver settings.
+        // This method is inherited from UnivariateRealSolverImpl.
+        double accuracy = getAbsoluteAccuracy(); 
+
+        // Check if yMin is a root (within the specified accuracy).
+        // If it is, return min immediately.
+        if (Math.abs(yMin) <= accuracy) {
+            return min;
+        }
+        
+        // Check if yMax is a root (within the specified accuracy).
+        // If it is, return max immediately.
+        if (Math.abs(yMax) <= accuracy) {
+            return max;
+        }
+        
+        // If neither endpoint is a root, verify that the function values at the endpoints
+        // have strictly opposite signs (i.e., they bracket the root).
+        // If yMin * yMax > 0, it means they have the same sign, and thus do not bracket the root.
+        if (yMin * yMax > 0) {
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            // The interval is properly bracketed (yMin * yMax < 0).
+            // (The case yMin * yMax == 0 would have been handled by the above accuracy checks,
+            // as it implies at least one of yMin or yMax is exactly zero).
+            // Proceed with the actual root-finding algorithm.
+            return solve(min, yMin, max, yMax, min, yMin);
         }
-
-        return ret;
     }
\ No newline at end of file
