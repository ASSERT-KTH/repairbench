diff --git a/tmp/a9a619ad-85dd-4daf-8409-799a187735df_buggy.java b/tmp/a53102e8-aa6b-42b3-b719-1470cdd8904c_fixed.java
index 88647d1..32e13a0 100644
--- a/tmp/a9a619ad-85dd-4daf-8409-799a187735df_buggy.java
+++ b/tmp/a53102e8-aa6b-42b3-b719-1470cdd8904c_fixed.java
@@ -1,44 +1,55 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
-        double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
         
-        // Verify bracketing
+        // Check if either endpoint is a root (within tolerance)
+        // This handles cases where one endpoint is very close to a zero,
+        // which might cause yMin * yMax to be non-negative due to floating-point
+        // inaccuracies, even though it's a valid solution.
+        if (Math.abs(yMin) <= getFunctionValueAccuracy()) {
+            setResult(min, 0); // Found root at min with 0 iterations
+            return min;
+        }
+        
+        if (Math.abs(yMax) <= getFunctionValueAccuracy()) {
+            setResult(max, 0); // Found root at max with 0 iterations
+            return max;
+        }
+
+        // Verify bracketing: signs must be opposite
         double sign = yMin * yMax;
         if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+            // Neither value was close to zero, and min and max do not bracket a root.
+            // (yMin and yMax have the same sign, or one/both are zero but not
+            // close enough to be considered a root by the previous checks).
             throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs." +
                         "  Endpoints: [" + min + "," + max + "]" + 
                         "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            // yMin and yMax have opposite signs, proceed with iterative solution.
+            // The root is guaranteed to be between min and max.
+            return solve(min, yMin, max, yMax, min, yMin);
         }
-
-        return ret;
     }
\ No newline at end of file
