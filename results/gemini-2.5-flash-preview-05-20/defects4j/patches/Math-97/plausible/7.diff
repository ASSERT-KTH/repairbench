diff --git a/tmp/7bce9369-fb8f-435f-90a1-132cb7fbf3c6_buggy.java b/tmp/0f90d686-c6b2-47e8-8af1-522e02a46af3_fixed.java
index 88647d1..20fc912 100644
--- a/tmp/7bce9369-fb8f-435f-90a1-132cb7fbf3c6_buggy.java
+++ b/tmp/0f90d686-c6b2-47e8-8af1-522e02a46af3_fixed.java
@@ -1,44 +1,53 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
-        double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
         
-        // Verify bracketing
+        // Check if either endpoint is a root within tolerance
+        // If yMin is approximately zero, then min is a root.
+        if (Math.abs(yMin) <= getFunctionValueAccuracy()) {
+            setResult(min, 0); // Found root at min, 0 iterations
+            return min;
+        }
+        
+        // If yMax is approximately zero, then max is a root.
+        if (Math.abs(yMax) <= getFunctionValueAccuracy()) {
+            setResult(max, 0); // Found root at max, 0 iterations
+            return max;
+        }
+        
+        // Verify bracketing: signs must be opposite.
+        // If neither endpoint is a root, then yMin * yMax must be negative.
         double sign = yMin * yMax;
         if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+            // Neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs." +
                         "  Endpoints: [" + min + "," + max + "]" + 
                         "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            // The interval [min, max] properly brackets a root.
+            // Proceed with the actual Brent algorithm using the private helper method.
+            return solve(min, yMin, max, yMax, min, yMin);
         }
-
-        return ret;
     }
\ No newline at end of file
