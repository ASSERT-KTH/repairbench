diff --git a/tmp/e45f5abe-79fe-409f-820e-810616582738_buggy.java b/tmp/bb80b425-7dfa-4cae-9d0d-295d27703a6a_fixed.java
index 88647d1..64dddd7 100644
--- a/tmp/e45f5abe-79fe-409f-820e-810616582738_buggy.java
+++ b/tmp/bb80b425-7dfa-4cae-9d0d-295d27703a6a_fixed.java
@@ -1,44 +1,57 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
-        double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
         
-        // Verify bracketing
+        // Check if min is a root
+        // If the function value at min is close to zero (within absolute accuracy),
+        // then min is considered a root.
+        if (Math.abs(yMin) <= getAbsoluteAccuracy()) {
+            setResult(min, 0); // 0 iterations as it's an endpoint root
+            return min;
+        }
+        
+        // Check if max is a root
+        // If the function value at max is close to zero (within absolute accuracy),
+        // then max is considered a root.
+        if (Math.abs(yMax) <= getAbsoluteAccuracy()) {
+            setResult(max, 0); // 0 iterations
+            return max;
+        }
+        
+        // Verify bracketing condition after checking for roots at endpoints.
+        // If the signs of the function values at the endpoints are not opposite,
+        // throw an exception (unless one of the endpoints was already a root).
         double sign = yMin * yMax;
         if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs." +
                         "  Endpoints: [" + min + "," + max + "]" + 
                         "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
-        }
-
+            // If bracketing is confirmed, proceed with the actual solving algorithm.
+            // The internal solve method will find the root and presumably set its own result.
+            double ret = solve(min, yMin, max, yMax, min, yMin);
             return ret;
         }
+    }
\ No newline at end of file
