diff --git a/tmp/41b0aae0-5f47-48f4-a0eb-0019b8f6ca52_buggy.java b/tmp/eb14b4ef-9085-4dc4-9548-742f325cc0a1_fixed.java
index 88647d1..4371c09 100644
--- a/tmp/41b0aae0-5f47-48f4-a0eb-0019b8f6ca52_buggy.java
+++ b/tmp/eb14b4ef-9085-4dc4-9548-742f325cc0a1_fixed.java
@@ -1,44 +1,56 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
-        double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
         
-        // Verify bracketing
+        // Check if either endpoint is a root within the function value accuracy.
+        // This needs to be done *before* the bracketing check, as an endpoint being
+        // a root (or very close to it) means it should be returned, regardless
+        // of whether yMin * yMax is non-negative due to floating point inaccuracies.
+        if (Math.abs(yMin) <= this.functionValueAccuracy) {
+            setResult(min, 0); // Set result and indicate 0 iterations for direct hit
+            return min;
+        }
+        
+        if (Math.abs(yMax) <= this.functionValueAccuracy) {
+            setResult(max, 0); // Set result and indicate 0 iterations for direct hit
+            return max;
+        }
+
+        // Verify bracketing: function values at endpoints must have opposite signs.
+        // If yMin * yMax >= 0, it means signs are the same or one is exactly zero
+        // (which should have been caught by the accuracy checks above).
         double sign = yMin * yMax;
         if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+            // neither value is close to zero (checked above) and min and max do not bracket root.
             throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs." +
                         "  Endpoints: [" + min + "," + max + "]" + 
                         "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
-        }
-
+            // Signs are opposite, proceed with the actual solver algorithm
+            // The inner solve method will set the result internally.
+            double ret = solve(min, yMin, max, yMax, min, yMin);
             return ret;
         }
+    }
\ No newline at end of file
