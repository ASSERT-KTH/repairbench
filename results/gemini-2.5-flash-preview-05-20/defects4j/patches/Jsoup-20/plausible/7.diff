diff --git a/tmp/e75961ef-e3e0-45bf-9da8-d275ed262d79_buggy.java b/tmp/35699d84-ee68-4df3-a517-75342faf46ee_fixed.java
index db19f52..a7dace3 100644
--- a/tmp/e75961ef-e3e0-45bf-9da8-d275ed262d79_buggy.java
+++ b/tmp/35699d84-ee68-4df3-a517-75342faf46ee_fixed.java
@@ -1,32 +1,49 @@
     // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+            // Strip BOM immediately after initial decode, before the first parse for meta detection.
+            if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                docData = docData.substring(1);
+            }
+
+            // Parse with defaultCharset to find a meta charset. This parse should now be accurate for meta tags.
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    // Strip BOM again if re-decoded with the found charset.
+                    if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                        docData = docData.substring(1);
+                    }
+                    doc = null; // Mark doc as null to force re-parsing with the correct charset
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
+            // Strip BOM for explicitly specified charset as well.
+            if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                docData = docData.substring(1);
+            }
         }
         if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
+            // The comment explains the need for BOM stripping, which is now implemented above.
+            // "there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
             // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
+            // into head mode"
 
+            // At this point, docData should already be free of any leading BOM.
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
