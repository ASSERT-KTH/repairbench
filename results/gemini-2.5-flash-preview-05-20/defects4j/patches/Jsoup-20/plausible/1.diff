diff --git a/tmp/5a4653bf-0f9f-4681-b54e-70a8af17e299_buggy.java b/tmp/aad8e6d1-dd8e-45c0-aecb-e2661ef53652_fixed.java
index db19f52..3822e6a 100644
--- a/tmp/5a4653bf-0f9f-4681-b54e-70a8af17e299_buggy.java
+++ b/tmp/aad8e6d1-dd8e-45c0-aecb-e2661ef53652_fixed.java
@@ -1,32 +1,77 @@
-    // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
-        Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        Document doc = null; // Will hold the final parsed Document
+
+        // Variable to hold the effective charset used for parsing and for output settings.
+        String finalCharsetUsed = charsetName;
+
+        // Step 1: Decode byteData to String using the initial/default charset.
+        // Apply BOM stripping immediately after decoding.
+        String initialDecodeCharset = charsetName;
+        if (initialDecodeCharset == null) {
+            initialDecodeCharset = defaultCharset;
+        }
+
+        docData = Charset.forName(initialDecodeCharset).decode(byteData).toString();
+        
+        // --- BOM Stripping ---
+        // If the decoded string starts with a BOM, remove it.
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            docData = docData.substring(1);
+        }
+
+        // Step 2: If charsetName was null (auto-detect), try to find charset from meta tag.
+        if (charsetName == null) {
+            // Parse provisionally to find meta charset. This parse uses the BOM-stripped docData.
+            Document provisionalDoc = parser.parseInput(docData, baseUri);
+            Element meta = provisionalDoc.select("meta[http-equiv=content-type], meta[charset]").first();
+
+            if (meta != null) {
                 String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                
+                // If a different charset is found in meta, re-decode the byte data with the correct charset.
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(initialDecodeCharset)) {
+                    finalCharsetUsed = foundCharset; // Update the effective charset
+                    byteData.rewind(); // Rewind the byte buffer to read from the beginning again
+                    
+                    docData = Charset.forName(foundCharset).decode(byteData).toString(); // Re-decode
+
+                    // --- BOM Stripping (again, as docData was re-created) ---
+                    if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                        docData = docData.substring(1);
                     }
+                    // Doc needs to be re-parsed, so 'doc' remains null here to trigger the final parse below.
+                } else {
+                    // No different charset found in meta, or meta not present, or found charset is same as initial.
+                    // The provisionalDoc is effectively the final doc.
+                    doc = provisionalDoc; // Set the final doc, so the final parse block is skipped.
+                    finalCharsetUsed = initialDecodeCharset; // The charset used was the initial one.
                 }
-        } else { // specified by content type header (or by user on file load)
+            } else {
+                // No meta tag found, defaultCharset was used for the provisional parse.
+                doc = provisionalDoc; // Set the final doc, so the final parse block is skipped.
+                finalCharsetUsed = initialDecodeCharset; // The charset used was the initial one.
+            }
+        } else { // Charset was specified by content type header (or by user on file load)
+            // Validate that the provided charsetName is not empty.
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+            
+            // docData was already decoded with 'charsetName' and BOM-stripped in Step 1.
+            // 'doc' remains null here, which means the next block will perform the final parse.
+            // 'finalCharsetUsed' is already correctly set to 'charsetName'.
         }
+
+        // Step 3: Perform the final parse if 'doc' is not already set.
+        // This covers cases where a re-decode happened, or if charset was initially specified.
         if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
-
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
         }
+
+        // Step 4: Set the output settings charset on the final document.
+        // 'finalCharsetUsed' should always be non-null at this point, representing the charset used for parsing.
+        if (finalCharsetUsed != null) {
+            doc.outputSettings().charset(finalCharsetUsed);
+        }
+
         return doc;
     }
\ No newline at end of file
