diff --git a/tmp/b8116d10-c375-42b9-a6d5-56bc3225e8e2_buggy.java b/tmp/b432e38c-0596-44bf-bb27-a31893a7334e_fixed.java
index db19f52..f0145b8 100644
--- a/tmp/b8116d10-c375-42b9-a6d5-56bc3225e8e2_buggy.java
+++ b/tmp/b432e38c-0596-44bf-bb27-a31893a7334e_fixed.java
@@ -1,32 +1,37 @@
     // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
-        Document doc = null;
+        Document doc = null; // will be set if we find a meta charset and need to re-decode
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+            doc = parser.parseInput(docData, baseUri); // initial parse to find meta charset
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    doc = null; // Set doc to null so it gets re-parsed with the newly decoded data
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
+
+        // There are times where there is a spurious byte-order-mark at the start of the text.
+        // If after decoding, there is a BOM, strip it; otherwise, it will be treated as a character by the parser.
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            docData = docData.substring(1);
+        }
+
+        // If doc is still null, it means we either had a re-decode (charsetName was initially null, but found a different one),
+        // or charsetName was provided directly, and doc needs to be parsed for the first time.
         if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
-
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
