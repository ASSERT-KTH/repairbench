diff --git a/tmp/54d11dca-4d0a-45a9-ba42-35e2b4ecf24a_buggy.java b/tmp/6c1936aa-2b92-45a7-9c1a-8f2248ce4604_fixed.java
index db19f52..46aaad8 100644
--- a/tmp/54d11dca-4d0a-45a9-ba42-35e2b4ecf24a_buggy.java
+++ b/tmp/6c1936aa-2b92-45a7-9c1a-8f2248ce4604_fixed.java
@@ -1,32 +1,44 @@
     // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            // If BOM is present after decoding, strip it immediately.
+            if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                docData = docData.substring(1);
+            }
+
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    // If BOM is present after re-decoding, strip it again.
+                    if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                        docData = docData.substring(1);
+                    }
+                    doc = null; // Signal that a re-parse is needed
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
+            // If BOM is present after decoding, strip it.
+            if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                docData = docData.substring(1);
+            }
         }
         if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
+            // The comment "there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
             // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
-
+            // into head mode" now points to the logic handled above, ensuring docData is BOM-free before this parse.
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
