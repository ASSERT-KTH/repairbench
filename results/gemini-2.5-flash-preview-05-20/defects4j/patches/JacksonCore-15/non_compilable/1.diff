diff --git a/tmp/87e73d99-9d09-4449-bd7b-fe4482240e51_buggy.java b/tmp/068d9c52-7c1d-41d2-a50a-8184fe4a3fa3_fixed.java
index 82cd856..3fdee0b 100644
--- a/tmp/87e73d99-9d09-4449-bd7b-fe4482240e51_buggy.java
+++ b/tmp/068d9c52-7c1d-41d2-a50a-8184fe4a3fa3_fixed.java
@@ -1,213 +1,244 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
     	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
     	// check for no buffered context _exposedContext - null
     	//If all the conditions matches then check for scalar / non-scalar property
     		//if not scalar and ended successfully, then return null
     		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
     		// then return null 
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
 // Is this guaranteed to work without further checks?
 //                        if (t != JsonToken.START_ARRAY) {
                         _currToken = t;
                         return t;
                     }
 
                     // Almost! Most likely still have the current token;
                     // with the sole exception of 
                     /*
                     t = delegate.getCurrentToken();
                     if (t != JsonToken.FIELD_NAME) {
                         _currToken = t;
                         return t;
                     }
                     */
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
+        // --- Start of FIX: Handle _allowMultipleMatches = false ---
+        // If multiple matches are not allowed and we've already found a match,
+        // we should not try to find more tokens from the delegate, unless
+        // we are currently within a context that IS handled (i.e. part of the matched path).
+        // This applies when _includePath is false, because if _includePath is true,
+        // we always need to emit the whole path.
+        if (!_allowMultipleMatches && _filterMatchAcheived) {
+            if (!_includePath) { // Only apply this early exit if we are not including the path
+                // If the current head context is not marked as having its start handled,
+                // OR its filter is not INCLUDE_ALL (meaning we are not within a fully included sub-tree),
+                // then we are done with producing output.
+                if (!(_headContext.isStartHandled() && _headContext.getFilter() == TokenFilter.INCLUDE_ALL)) {
+                    return null; // No more matches allowed, and not inside a fully included path
+                }
+            }
+        }
+        // --- End of FIX ---
+
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             return (_currToken = t);
         }
 
         // otherwise... to include or not?
         TokenFilter f;
         
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
+                if (!_allowMultipleMatches) { _filterMatchAcheived = true; } // FIX: Set match flag
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
+                if (!_allowMultipleMatches) { _filterMatchAcheived = true; } // FIX: Set match flag
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildArrayContext(f, false);
             
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
+                if (!_allowMultipleMatches) { _filterMatchAcheived = true; } // FIX: Set match flag
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
+                if (!_allowMultipleMatches) { _filterMatchAcheived = true; } // FIX: Set match flag
                 return (_currToken = t);
             }
             _headContext = _headContext.createChildObjectContext(f, false);
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             // note: inclusion of surrounding Object handled separately via
             // FIELD_NAME
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                     f.filterFinishArray();
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
                 if (f == TokenFilter.INCLUDE_ALL) {
                     _itemFilter = f;
                     if (!_includePath) {
                         // Minor twist here: if parent NOT included, may need to induce output of
                         // surrounding START_OBJECT/END_OBJECT
                         if (_includeImmediateParent && !_headContext.isStartHandled()) {
                             t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                             _exposedContext = _headContext;
                         }
+                        // FIX: If _includePath is false, the match is for the value, not the field name itself.
+                        // So, don't set _filterMatchAcheived here; it will be set when the value is returned.
+                    } else { // _includePath is true: field name is part of the included path, so it's a "match"
+                        if (!_allowMultipleMatches) { _filterMatchAcheived = true; } // FIX: Set match flag
                     }
                     return (_currToken = t);
                 }
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 f = f.includeProperty(name);
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 _itemFilter = f;
                 if (f == TokenFilter.INCLUDE_ALL) {
                     if (_includePath) {
+                        if (!_allowMultipleMatches) { _filterMatchAcheived = true; } // FIX: Set match flag
                         return (_currToken = t);
                     }
+                    // FIX: If _includePath is false, and this leads to INCLUDE_ALL, the match is for the value.
+                    // So _filterMatchAcheived should be set when the value is returned, not the field name.
                 }
                 if (_includePath) {
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
                         return t;
                     }
                 }
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
+                if (!_allowMultipleMatches) { _filterMatchAcheived = true; } // FIX: Set match flag
                 return (_currToken = t);
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
                         || ((f != null) && f.includeValue(delegate))) {
+                    if (!_allowMultipleMatches) { _filterMatchAcheived = true; } // FIX: Set match flag
                     return (_currToken = t);
                 }
             }
             // Otherwise not included (leaves must be explicitly included)
             break;
         }
 
         // We get here if token was not yet found; offlined handling
         return _nextToken2();
     }
