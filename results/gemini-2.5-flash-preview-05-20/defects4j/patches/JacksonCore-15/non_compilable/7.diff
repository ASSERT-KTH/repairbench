diff --git a/tmp/9ee73ff4-231d-4bc2-a9dd-517901e3904c_buggy.java b/tmp/6e236889-a9cf-4c4a-8828-bd7897425db4_fixed.java
index 82cd856..bc44b6d 100644
--- a/tmp/9ee73ff4-231d-4bc2-a9dd-517901e3904c_buggy.java
+++ b/tmp/6e236889-a9cf-4c4a-8828-bd7897425db4_fixed.java
@@ -1,213 +1,248 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
-    	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
-    	// check for no buffered context _exposedContext - null
-    	//If all the conditions matches then check for scalar / non-scalar property
-    		//if not scalar and ended successfully, then return null
-    		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-    		// then return null 
+        // Add a field to the class: protected boolean _matchFound = false;
+        // This field should be initialized to 'false' in the constructor of FilteringParserDelegate.
+
+        // Check for _allowMultipleMatches condition.
+        // If we are not allowing multiple matches, and a match has already been found,
+        // AND there are no more buffered tokens associated with that match (_exposedContext is null),
+        // then we should stop.
+        if (!_allowMultipleMatches && _matchFound && _exposedContext == null) {
+            return null;
+        }
+
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             return (_currToken = t);
         }
 
         // otherwise... to include or not?
         TokenFilter f;
         
         switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
+                _currToken = t;
+                // If _includePath is false, this START_ARRAY is the actual match, not just a path token.
+                if (!_includePath) {
+                    _matchFound = true;
+                }
+                return t;
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
+                _currToken = t;
+                // If _includePath is false, this START_ARRAY is the actual match, not just a path token.
+                if (!_includePath) {
+                    _matchFound = true;
+                }
+                return t;
             }
             _headContext = _headContext.createChildArrayContext(f, false);
             
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
+                _currToken = t;
+                // If _includePath is false, this START_OBJECT is the actual match, not just a path token.
+                if (!_includePath) {
+                    _matchFound = true;
+                }
+                return t;
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
+                _currToken = t;
+                // If _includePath is false, this START_OBJECT is the actual match, not just a path token.
+                if (!_includePath) {
+                    _matchFound = true;
+                }
+                return t;
             }
             _headContext = _headContext.createChildObjectContext(f, false);
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             // note: inclusion of surrounding Object handled separately via
             // FIELD_NAME
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                     f.filterFinishArray();
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
                 if (f == TokenFilter.INCLUDE_ALL) {
                     _itemFilter = f;
+                    JsonToken nextToken = null;
                     if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
-                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
-                            _exposedContext = _headContext;
+                        // When _includePath is false, and FIELD_NAME matched, we want the VALUE.
+                        // _nextTokenWithBuffering will find the actual value token and buffer it.
+                        nextToken = _nextTokenWithBuffering(_headContext);
+                    } else {
+                        // When _includePath is true, FIELD_NAME itself is part of the path.
+                        // No buffering needed for the value here, just return current FIELD_NAME.
+                        nextToken = t;
+                        // _matchFound is NOT set here, as this is a path token.
                     }
+
+                    if (nextToken != null) {
+                        _currToken = nextToken;
+                        // Mark as found, as this is a successful filtered token being returned.
+                        // Only set if this token is actually a 'value' and not just a path element.
+                        // For FIELD_NAME when _includePath is true, it's a path.
+                        // For _nextTokenWithBuffering result (when _includePath is false), it's the value.
+                        if (!_includePath || nextToken.isScalarValue() || nextToken.isStructStart()) {
+                            _matchFound = true;
                         }
-                    return (_currToken = t);
+                        return nextToken;
+                    }
+                    // If nextToken was null from buffering, it means nothing found under this branch.
+                    break; // Continue to _nextToken2
                 }
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 f = f.includeProperty(name);
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 _itemFilter = f;
                 if (f == TokenFilter.INCLUDE_ALL) {
                     if (_includePath) {
-                        return (_currToken = t);
+                        return (_currToken = t); // Path token, do not set _matchFound
                     }
+                    // If _includePath is false, it should have gone through the _nextTokenWithBuffering path above.
+                    // This branch should ideally not be reached if it's a value match.
                 }
                 if (_includePath) {
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
                         return t;
                     }
                 }
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
-                return (_currToken = t);
+                _currToken = t;
+                _matchFound = true; // Direct scalar match
+                return t;
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
                         || ((f != null) && f.includeValue(delegate))) {
-                    return (_currToken = t);
+                    _currToken = t;
+                    _matchFound = true; // Direct scalar match
+                    return t;
                 }
             }
             // Otherwise not included (leaves must be explicitly included)
             break;
         }
 
         // We get here if token was not yet found; offlined handling
         return _nextToken2();
     }
\ No newline at end of file
