diff --git a/tmp/dae1fe89-d32a-464e-a05a-deca122c4b34_buggy.java b/tmp/69a479ae-9d0c-46fc-8769-eb93421b358d_fixed.java
index 46799da..56eee62 100644
--- a/tmp/dae1fe89-d32a-464e-a05a-deca122c4b34_buggy.java
+++ b/tmp/69a479ae-9d0c-46fc-8769-eb93421b358d_fixed.java
@@ -1,8 +1,23 @@
         /**
          * @param x Normalized objective variables.
          * @return the original objective variables, possibly repaired.
          */
         public double[] repairAndDecode(final double[] x) {
-            return
-                decode(x);
+            // First, decode the normalized variables to the original search space.
+            // The 'decode' method maps values from [-1, 1] (normalized) to [lower, upper] (original).
+            final double[] decoded = decode(x);
+
+            // Repair the decoded variables by explicitly clipping them to be within the
+            // defined lower and upper bounds. This is necessary because numerical precision
+            // issues or slight excursions of the normalized 'x' values outside the
+            // theoretical [-1, 1] range during the optimization process can cause 'decode'
+            // to produce values slightly outside the strict [lower, upper] range.
+            for (int i = 0; i < decoded.length; i++) {
+                if (decoded[i] < lowerBounds[i]) {
+                    decoded[i] = lowerBounds[i];
+                } else if (decoded[i] > upperBounds[i]) {
+                    decoded[i] = upperBounds[i];
+                }
+            }
+            return decoded;
         }
\ No newline at end of file
