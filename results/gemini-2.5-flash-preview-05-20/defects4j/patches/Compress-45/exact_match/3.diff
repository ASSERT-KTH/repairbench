diff --git a/tmp/e9938974-2523-4f78-9ff2-cb06fd13a582_buggy.java b/tmp/97d38db7-94c5-4589-a885-c64ba0713487_fixed.java
index 1bbc082..89af52f 100644
--- a/tmp/e9938974-2523-4f78-9ff2-cb06fd13a582_buggy.java
+++ b/tmp/97d38db7-94c5-4589-a885-c64ba0713487_fixed.java
@@ -1,36 +1,48 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      * 
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      * 
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
-        if (length < 9) {
+        // If the value does not fit as an octal string (e.g., it's negative or too large),
+        // it must be stored as a binary number.
+        // The choice between formatLongBinary and formatBigIntegerBinary depends on the field length.
+        // - formatLongBinary is typically for fields up to 8 bytes, representing a standard long value.
+        // - formatBigIntegerBinary is for fields of 9 bytes or more, potentially requiring a BigInteger
+        //   representation or a larger binary format.
+        if (length < 9) { // For lengths 1 to 8 (e.g., UID/GID fields which are 8 bytes)
             formatLongBinary(value, buf, offset, length, negative);
-        }
+        } else { // For lengths 9 or more (e.g., SIZE fields which are 12 bytes)
             formatBigIntegerBinary(value, buf, offset, length, negative);
+        }
 
+        // The first byte of a binary-encoded field indicates the type:
+        // 0xFF for negative, 0x80 for positive.
+        // This byte is set after the actual binary value is written to the buffer,
+        // implying that formatLongBinary and formatBigIntegerBinary write
+        // the actual value to buf[offset+1] through buf[offset+length-1].
         buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
