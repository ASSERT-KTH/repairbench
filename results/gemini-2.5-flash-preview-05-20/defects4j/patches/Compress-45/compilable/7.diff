diff --git a/tmp/c153a612-48a5-4529-beb3-206ca587baf3_buggy.java b/tmp/a1a7e900-fccc-47e2-9459-e0782d706a14_fixed.java
index 1bbc082..299ff55 100644
--- a/tmp/c153a612-48a5-4529-beb3-206ca587baf3_buggy.java
+++ b/tmp/a1a7e900-fccc-47e2-9459-e0782d706a14_fixed.java
@@ -1,36 +1,46 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      * 
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      * 
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
-        }
+        // Binary path
+        // The test failure (for length=8, negative value) indicates that formatLongBinary
+        // is not suitable for all 8-byte fields when they are negative.
+        // Therefore, for negative values or for lengths >= 9 (where BigInteger is typically preferred),
+        // formatBigIntegerBinary should be used. Otherwise, use formatLongBinary.
+        if (negative || length >= 9) {
             formatBigIntegerBinary(value, buf, offset, length, negative);
+        } else {
+            formatLongBinary(value, buf, offset, length, negative);
+        }
+
+        // The formatLongBinary and formatBigIntegerBinary methods already set
+        // the first byte (0xff for negative, 0x80 for positive).
+        // So, the following line is redundant and can be removed.
+        // buf[offset] = (byte) (negative ? 0xff : 0x80);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
\ No newline at end of file
