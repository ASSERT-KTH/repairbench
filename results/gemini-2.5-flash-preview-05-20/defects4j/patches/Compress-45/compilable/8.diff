diff --git a/tmp/0e59c239-4880-4f61-9080-e2f9018f202b_buggy.java b/tmp/aa5ede84-813c-4b0b-9c24-d37d9ddfc27b_fixed.java
index 1bbc082..b57e913 100644
--- a/tmp/0e59c239-4880-4f61-9080-e2f9018f202b_buggy.java
+++ b/tmp/aa5ede84-813c-4b0b-9c24-d37d9ddfc27b_fixed.java
@@ -1,36 +1,43 @@
     /**
-     * Write an long integer into a buffer as an octal string if this
+     * Write a long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      * 
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      * 
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
-        if (length < 9) {
+        // Value is negative or too large for octal, so format as binary.
+        // Choose the appropriate binary formatter based on the field length.
+        if (length < 9) { // Typically for UID/GID fields (8 bytes)
             formatLongBinary(value, buf, offset, length, negative);
-        }
+        } else { // For larger fields like SIZE (12 bytes)
             formatBigIntegerBinary(value, buf, offset, length, negative);
+        }
+
+        // The formatLongBinary and formatBigIntegerBinary methods already write
+        // the header byte (0xff or 0x80) at buf[offset].
+        // The original line below is redundant and would overwrite the header byte.
+        // buf[offset] = (byte) (negative ? 0xff : 0x80);
         
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
