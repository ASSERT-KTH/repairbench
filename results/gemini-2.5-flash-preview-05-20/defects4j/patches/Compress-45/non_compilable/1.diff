diff --git a/tmp/43eb1e55-f3d7-433d-9e8d-1face1b5f6fc_buggy.java b/tmp/72fb5eb8-0fab-4e8e-8ca4-f0ea277a6ce9_fixed.java
index 1bbc082..e2b381c 100644
--- a/tmp/43eb1e55-f3d7-433d-9e8d-1face1b5f6fc_buggy.java
+++ b/tmp/72fb5eb8-0fab-4e8e-8ca4-f0ea277a6ce9_fixed.java
@@ -1,36 +1,46 @@
     /**
-     * Write an long integer into a buffer as an octal string if this
+     * Write a long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      * 
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      * 
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
-        if (length < 9) {
+        // If not octal, then binary.
+        // Choose the correct binary format based on the field type/length.
+        // UID/GID/Mode/Checksum fields (typically 8 bytes) use formatLongBinary.
+        // Size field (typically 12 bytes) uses formatBigIntegerBinary with a prefix.
+        if (length == TarConstants.UIDLEN || length == TarConstants.GIDLEN || length == TarConstants.CHKLEN || length == TarConstants.MODLEN) {
             formatLongBinary(value, buf, offset, length, negative);
-        }
+        } else {
+            // This covers the SIZE field (length=12) and other fields that use the 0x80/0xFF prefix scheme.
             formatBigIntegerBinary(value, buf, offset, length, negative);
+        }
+        
+        // The original line below is removed because:
+        // 1. formatBigIntegerBinary already sets buf[offset].
+        // 2. formatLongBinary does not use such a prefix, so setting it here would be wrong.
+        // buf[offset] = (byte) (negative ? 0xff : 0x80);
         
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
