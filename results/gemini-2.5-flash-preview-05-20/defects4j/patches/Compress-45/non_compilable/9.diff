diff --git a/tmp/26b1ae90-621b-480d-a5dd-2097aff5f752_buggy.java b/tmp/87aa6a7b-8647-41aa-a13a-81647e8ccd08_fixed.java
index 1bbc082..4e1dc36 100644
--- a/tmp/26b1ae90-621b-480d-a5dd-2097aff5f752_buggy.java
+++ b/tmp/87aa6a7b-8647-41aa-a13a-81647e8ccd08_fixed.java
@@ -1,36 +1,61 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      * 
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      * 
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+        // --- Binary representation logic ---
+
+        // Determine if the value can fit within 'length - 1' bytes (after accounting for the 0x80/0xFF marker byte).
+        // This is necessary because formatBigIntegerBinary and formatLongBinary typically reserve the first byte.
+        // For a signed 7-byte value: max is 2^55 - 1, min is -2^55.
+        final long max7ByteValue = (1L << (7 * 8 - 1)) - 1; // 2^55 - 1
+        final long min7ByteValue = -(1L << (7 * 8 - 1));    // -2^55
+
+        // Special case for 8-byte fields (UIDLEN/SIZELEN) and values that don't fit into 7 bytes
+        // but fit into a full 8-byte long. This is a GNU tar extension for large numbers.
+        if (length == 8 && (value < min7ByteValue || value > max7ByteValue)) {
+            // Write the long directly as an 8-byte two's complement number.
+            // In this case, the first byte is part of the number, not a special marker.
+            for (int i = 0; i < 8; i++) {
+                buf[offset + 7 - i] = (byte) (value & 0xff);
+                value >>= 8;
             }
+            return offset + length;
+        }
+
+        // For all other binary cases (lengths other than 8, or length 8 where
+        // the value fits in 7 bytes for the magnitude), use the BigInteger binary formatter.
+        // This formatter handles the 0x80/0xFF prefix byte and converts the value
+        // into the remaining `length - 1` bytes. It will throw IllegalArgumentException
+        // if the value's magnitude does not fit in `length - 1` bytes.
         formatBigIntegerBinary(value, buf, offset, length, negative);
         
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+        // The original line below is removed because formatBigIntegerBinary already sets
+        // the header byte, and the 8-byte direct write case does not use it.
+        // buf[offset] = (byte) (negative ? 0xff : 0x80); 
+        
         return offset + length;
     }
\ No newline at end of file
