diff --git a/tmp/1bb35bb6-b0b0-4022-930b-3489219cf519_buggy.java b/tmp/07cd3cde-9189-4a28-a07a-6cc7db870697_fixed.java
index e69de29..e91b923 100644
--- a/tmp/1bb35bb6-b0b0-4022-930b-3489219cf519_buggy.java
+++ b/tmp/07cd3cde-9189-4a28-a07a-6cc7db870697_fixed.java
@@ -0,0 +1,38 @@
+// This function is typically part of a JsonGenerator implementation,
+// e.g., com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
+// or JsonGeneratorBase (if concrete subclasses override _writeFieldName(name, boolean quoted)).
+// The exact implementation might vary slightly depending on the specific JsonGenerator subclass.
+// This fix ensures that the JsonGenerator.Feature.QUOTE_FIELD_NAMES is respected.
+
+@Override // If overriding a base class method, or an interface method
+public void writeFieldName(String name) throws IOException {
+    // This is the common entry point for writing field names.
+    // It should check the JsonGenerator.Feature.QUOTE_FIELD_NAMES.
+    // Assuming 'this' or a superclass has access to 'isEnabled(Feature)' or '_features'
+    // and internal helper methods like '_writeString' (for quoted) and '_writeStringNoQuotes' (for unquoted).
+
+    // Handle pretty-printing, if applicable (common in Jackson, not direct fix focus)
+    if (_prettyPrinter != null) {
+        _prettyPrinter.writeFieldName(this, name);
+        return;
+    }
+
+    // Basic state management (common in Jackson, ensures correct context, not direct fix focus)
+    // For example, ensuring we are in an object and ready to write a field name:
+    // _writeContext.writeFieldName(name); 
+
+    // THE FIX: Correctly conditionally quote the field name based on the feature.
+    if (isEnabled(JsonGenerator.Feature.QUOTE_FIELD_NAMES)) {
+        // Feature is enabled, so write the field name with quotes.
+        // This typically delegates to an internal method that handles quoting and escaping.
+        _writeString(name); 
+    } else {
+        // Feature is disabled, so write the field name without quotes (raw).
+        // This delegates to an internal method that writes the string as-is.
+        _writeStringNoQuotes(name);
+    }
+
+    // After writing the field name, a colon separator is usually written
+    // (This part is context-dependent and typically handled internally by the generator's state)
+    _output.write(':'); // Example of writing the colon.
+}
\ No newline at end of file
