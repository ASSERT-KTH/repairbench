diff --git a/tmp/8fe2d889-0b52-441b-8e4d-ef18b9f0ba5b_buggy.java b/tmp/fa621de1-5925-417f-8b8e-fb6945773a56_fixed.java
index e69de29..0c976f9 100644
--- a/tmp/8fe2d889-0b52-441b-8e4d-ef18b9f0ba5b_buggy.java
+++ b/tmp/fa621de1-5925-417f-8b8e-fb6945773a56_fixed.java
@@ -0,0 +1,31 @@
+protected void _testFieldNameQuotingEnabled(com.fasterxml.jackson.core.JsonFactory f, boolean usePrettyPrinter,
+        boolean enableQuotesForGenerator, String expected) throws java.io.IOException
+{
+    java.io.StringWriter sw = new java.io.StringWriter();
+    com.fasterxml.jackson.core.JsonGenerator gen = f.createGenerator(sw);
+    if (usePrettyPrinter) {
+        // Use DefaultPrettyPrinter for pretty-printing behavior
+        gen.setPrettyPrinter(new com.fasterxml.jackson.core.util.DefaultPrettyPrinter());
+    }
+
+    // Configure the QUOTE_FIELD_NAMES feature on the generator
+    if (enableQuotesForGenerator) {
+        gen.enable(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    } else {
+        gen.disable(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    }
+
+    // Write a simple JSON object
+    gen.writeStartObject();
+    gen.writeFieldName("foo");
+    gen.writeNumber(1);
+    gen.writeEndObject();
+    gen.close();
+
+    // Get the actual generated JSON string
+    String actual = sw.toString();
+
+    // Assert that the actual output matches the expected output
+    // This assumes standard JUnit 3/4 assertion
+    junit.framework.Assert.assertEquals(expected, actual);
+}
\ No newline at end of file
