diff --git a/tmp/dad4a8fc-7991-49bd-8bc9-fe62701c3c47_buggy.java b/tmp/2fb7c1ae-ef0a-4a33-a042-e1b23db8a120_fixed.java
index e69de29..7147dc0 100644
--- a/tmp/dad4a8fc-7991-49bd-8bc9-fe62701c3c47_buggy.java
+++ b/tmp/2fb7c1ae-ef0a-4a33-a042-e1b23db8a120_fixed.java
@@ -0,0 +1,81 @@
+package com.fasterxml.jackson.core.json; // Assuming this is the correct package for JsonGeneratorBase
+
+import java.io.IOException;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.ObjectCodec;
+import com.fasterxml.jackson.core.SerializableString;
+import com.fasterxml.jackson.core.json.JsonWriteContext;
+import com.fasterxml.jackson.core.io.CharacterEscapes;
+import com.fasterxml.jackson.core.io.IOContext; // Needed for full context in a real file, but not for the method itself
+
+// NOTE: This is a simplified representation of JsonGeneratorBase.
+// The actual class has many more methods and fields.
+// The fix applies to the `configure` method within this class.
+public abstract class JsonGeneratorBase extends JsonGenerator // ... other interfaces and extends ...
+{
+    // ... fields relevant to generator state and features ...
+    protected int _features;
+    protected ObjectCodec _codec;
+    protected boolean _cfgWriteFieldNameQuotes;
+    protected boolean _cfgWriteNumbersAsStrings;
+    protected boolean _cfgEscapeNonAscii;
+    protected JsonWriteContext _writeContext;
+    protected CharacterEscapes _characterEscapes;
+    protected int _maximumNonEscapedChar;
+
+    // Constructor (example, not the actual fix)
+    protected JsonGeneratorBase(int features, ObjectCodec codec) {
+        _features = features;
+        _codec = codec;
+        _cfgWriteFieldNameQuotes = Feature.QUOTE_FIELD_NAMES.enabledIn(features);
+        _cfgWriteNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(features);
+        _cfgEscapeNonAscii = Feature.ESCAPE_NON_ASCII.enabledIn(features);
+        _writeContext = JsonWriteContext.createRootContext(this);
+    }
+
+    @Override
+    public JsonGenerator configure(Feature f, boolean state) {
+        if (f == Feature.QUOTE_FIELD_NAMES) {
+            // According to the test comment in TestJsonGeneratorFeatures,
+            // this feature should NOT override the factory setting once the
+            // generator is created. Removing the line below makes it immutable
+            // after creation, respecting the factory's initial configuration.
+            // _cfgWriteFieldNameQuotes = state; // REMOVED to make it factory-sticky
+        } else if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {
+            _cfgWriteNumbersAsStrings = state;
+        } else if (f == Feature.ESCAPE_NON_ASCII) {
+            _cfgEscapeNonAscii = state;
+            // 2.10: 
+            // _maximumNonEscapedChar = state ? 0 : 0x7F; // depends on version and other features
+        } else if (f == Feature.STRICT_DUPLICATE_DETECTION) {
+            if (state) {
+                if (_writeContext.getParent() != null) { // if already in non-root context
+                    _writeContext = _writeContext.getParent().getParent(); // reset to root
+                }
+                _writeContext = _writeContext.with(_writeContext.getDupDetector()); // re-initialize with new detector
+            } else {
+                _writeContext = JsonWriteContext.createRootContext(this); // reset without detector
+            }
+        } else if (f == Feature.IGNORE_UNKNOWN) { // 2.10
+            // This feature is not relevant to Generator
+        } else { // unrecognized new feature: must be base class (or unhandled)
+            // It is possible this is handled by a superclass, or it's a no-op if not.
+            // In a real scenario, this might call super.configure(f, state)
+            // if JsonGeneratorBase inherits from another configurable base class
+            // or if it's the top-level implementation for all features.
+            // For Jackson Core, it typically directly implements Feature handling.
+        }
+        // Update the aggregate features integer
+        if (state) {
+            _features |= f.getMask();
+        } else {
+            _features &= ~f.getMask();
+        }
+        return this;
+    }
+
+    // ... other abstract methods and concrete implementations
+    // (e.g., _verifyFieldName, writeStartObject, writeFieldName, writeNumber, etc.)
+    // ...
+}
\ No newline at end of file
