diff --git a/tmp/810faa49-7f2d-4789-9318-c781d16642ab_buggy.java b/tmp/42021593-38e2-4ecd-a61d-f5becfbd2348_fixed.java
index 40f74f7..3bb3890 100644
--- a/tmp/810faa49-7f2d-4789-9318-c781d16642ab_buggy.java
+++ b/tmp/42021593-38e2-4ecd-a61d-f5becfbd2348_fixed.java
@@ -1,50 +1,70 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
             String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+            boolean wildcard = nodeNameTest.isWildcard(); // True if testName.getName().equals("*")
             String testPrefix = testName.getPrefix();
+
+            // Case 1: Test is "*" (any node)
             if (wildcard && testPrefix == null) {
                 return true;
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+
+            String nodeLocalName = DOMNodePointer.getLocalName(node);
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
+
+            // Check local name match if not a wildcard name test
+            if (!wildcard && !testName.getName().equals(nodeLocalName)) {
+                return false;
+            }
+
+            // Check namespace match
+            if (NodeTest.WILDCARD_NAMESPACE.equals(namespaceURI)) {
+                // Case 5: Test is "*:localname" (if !wildcard) or "prefix:*" (if wildcard and testPrefix != null)
+                // or just "*" (already handled above).
+                // For "*:localname", it matches if the node has ANY namespace (not null).
+                // For "prefix:*", testName.getName() is "*", so wildcard is true. This branch is reached if namespaceURI is WILDCARD_NAMESPACE.
+                // However, NodeNameTest for prefix:* will have a specific namespaceURI, not WILDCARD_NAMESPACE.
+                // So this specific condition only applies to "*:localname".
+                return nodeNS != null;
+            } else {
+                // Cases 2, 3, 4: Specific namespace or no namespace.
+                // Case 2: "prefix:*" (wildcard is true, testPrefix != null, namespaceURI is specific)
+                // Case 3: "localname" (wildcard is false, testPrefix is null, namespaceURI is null)
+                // Case 4: "prefix:localname" (wildcard is false, testPrefix != null, namespaceURI is specific)
                 return equalStrings(namespaceURI, nodeNS);
             }
-            return false;
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
                 return testPI.equals(nodePI);
             }
         }
         return false;
     }
\ No newline at end of file
