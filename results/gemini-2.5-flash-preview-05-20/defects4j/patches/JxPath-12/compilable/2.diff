diff --git a/tmp/1abc7dfc-6431-4d44-b4f4-65cc5b68692d_buggy.java b/tmp/09308788-0e18-42f5-ae1e-6ee4d38068b0_fixed.java
index 40f74f7..30d8cd8 100644
--- a/tmp/1abc7dfc-6431-4d44-b4f4-65cc5b68692d_buggy.java
+++ b/tmp/09308788-0e18-42f5-ae1e-6ee4d38068b0_fixed.java
@@ -1,50 +1,78 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
             String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+            boolean localNameWildcard = nodeNameTest.isWildcard(); // true if testName.getName().equals("*")
             String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+
+            // Case 1: XPath name test is "*" (matches any element, any namespace)
+            // This occurs when the QName has a local name "*" and no prefix (or null prefix).
+            if (localNameWildcard && testPrefix == null) {
                 return true;
             }
-            if (wildcard
+
+            // Case 2: XPath name test is "prefix:*" (matches any local name within a specific namespace)
+            // In this case, localNameWildcard is true, and testPrefix is non-null and not "*".
+            // This will be handled by the final 'if' block, where 'localNameWildcard' will be true
+            // and the namespace check will be performed.
+
+            // Case 3: XPath name test is "*:localName" (matches a specific local name in any namespace)
+            // In this case, testPrefix is "*" and localNameWildcard is false.
+            // The original logic would incorrectly apply a namespace check (typically against null),
+            // making it only match nodes in no namespace. XPath dictates it should match
+            // any node with the given local name, regardless of its namespace.
+            if ("*".equals(testPrefix)) {
+                return testName.getName().equals(DOMNodePointer.getLocalName(node));
+            }
+            
+            // Cases 4 & 5:
+            // Case 4: XPath name test is "prefix:localName" (matches specific local name and specific namespace).
+            // Case 5: XPath name test is "localName" (matches specific local name, in default namespace or no namespace).
+            // In these cases, localNameWildcard is false.
+            // The logic should check for local name equality AND namespace URI equality.
+            // The 'localNameWildcard' in the condition handles 'prefix:*' cases not caught above.
+            if (localNameWildcard // True for 'prefix:*'
                 || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+                        .equals(DOMNodePointer.getLocalName(node))) { // True for 'prefix:localName' and 'localName'
                 String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+                // Compare namespace URIs. 'equalStrings' handles null/empty string equivalence.
+                return DOMNodePointer.equalStrings(namespaceURI, nodeNS);
             }
             return false;
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
-                return testPI.equals(nodePI);
+                // For a processing-instruction() test without a target, testPI would be null.
+                // In that case, it should match any processing instruction.
+                // Otherwise, it should match if the targets are equal.
+                return testPI == null || testPI.equals(nodePI);
             }
         }
         return false;
     }
\ No newline at end of file
