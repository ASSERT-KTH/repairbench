diff --git a/tmp/7da4f880-c0a2-4780-8b93-f03f17a0e50e_buggy.java b/tmp/e19cc4af-5e6a-456e-9685-887c2a83e421_fixed.java
index 40f74f7..46e2206 100644
--- a/tmp/7da4f880-c0a2-4780-8b93-f03f17a0e50e_buggy.java
+++ b/tmp/e19cc4af-5e6a-456e-9685-887c2a83e421_fixed.java
@@ -1,50 +1,65 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
             String namespaceURI = nodeNameTest.getNamespaceURI();
             boolean wildcard = nodeNameTest.isWildcard();
             String testPrefix = testName.getPrefix();
+
+            // Case 1: Test is '*' (any element)
+            // This applies if the test represents a universal name test, typically QName("*") where prefix is null.
             if (wildcard && testPrefix == null) {
                 return true;
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+
+            // Case 2: Test is '*:name' (any namespace, specific local name)
+            // This means the test prefix is '*', and the name is specific (not '*').
+            // Also handles '*:*' effectively as '*' (any name in any namespace) if testName.getName() is also "*".
+            if (testPrefix != null && testPrefix.equals("*")) {
+                // For '*:name' or '*:*', only the local name needs to match (or be wildcarded)
+                return testName.getName().equals(DOMNodePointer.getLocalName(node));
+            }
+
+            // Case 3: All other cases (non-wildcard prefix:name, or prefix:*)
+            // This covers:
+            // - 'prefix:*' (specific namespace, any local name) - wildcard is true, testPrefix is not null.
+            // - 'prefix:name' (specific namespace, specific local name) - wildcard is false.
+            // - 'name' (no prefix, no namespace) - wildcard is false, testPrefix is null.
+            if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {
                 String nodeNS = DOMNodePointer.getNamespaceURI(node);
                 return equalStrings(namespaceURI, nodeNS);
             }
             return false;
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
                 return testPI.equals(nodePI);
             }
         }
         return false;
     }
