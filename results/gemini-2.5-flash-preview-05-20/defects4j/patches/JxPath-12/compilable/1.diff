diff --git a/tmp/01603d05-0fd2-4f28-8d46-babb4b53ade7_buggy.java b/tmp/0927fd12-3c6a-4cff-b70c-57b045132eed_fixed.java
index 40f74f7..29890b2 100644
--- a/tmp/01603d05-0fd2-4f28-8d46-babb4b53ade7_buggy.java
+++ b/tmp/0927fd12-3c6a-4cff-b70c-57b045132eed_fixed.java
@@ -1,50 +1,65 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
             String namespaceURI = nodeNameTest.getNamespaceURI();
             boolean wildcard = nodeNameTest.isWildcard();
             String testPrefix = testName.getPrefix();
+            
+            // Handle different types of NodeNameTests:
+            // 1. Wildcard name test with no prefix (e.g., "*")
             if (wildcard && testPrefix == null) {
-                return true;
+                return true; // Matches any element node regardless of its name or namespace.
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+
+            // 2. Wildcard name test with a prefix (e.g., "prefix:*")
+            // 3. Specific name test with or without a prefix (e.g., "localname", "prefix:localname")
+            // These cases require matching the local name (unless it's prefix:*) and matching the namespace URI.
+
+            String nodeLocalName = DOMNodePointer.getLocalName(node);
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
+
+            if (wildcard) { // This handles "prefix:*" cases
+                // For "prefix:*", only the namespace URI needs to match.
+                // The local name is effectively a wildcard.
                 return equalStrings(namespaceURI, nodeNS);
+            } else { // This handles "localname" and "prefix:localname" cases
+                // For specific names, both the local name and the namespace URI must match.
+                if (testName.getName().equals(nodeLocalName)) {
+                    return equalStrings(namespaceURI, nodeNS);
+                }
+                return false; // Local names do not match for non-wildcard tests.
             }
-            return false;
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
                 return testPI.equals(nodePI);
             }
         }
         return false;
     }
\ No newline at end of file
