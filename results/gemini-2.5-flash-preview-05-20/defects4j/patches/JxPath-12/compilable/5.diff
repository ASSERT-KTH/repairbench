diff --git a/tmp/60c0c590-7f16-4f4f-a0e8-3f0948a1c3da_buggy.java b/tmp/c6fadc61-75ee-48cf-977c-9cd391c1ae81_fixed.java
index 40f74f7..1bee790 100644
--- a/tmp/60c0c590-7f16-4f4f-a0e8-3f0948a1c3da_buggy.java
+++ b/tmp/c6fadc61-75ee-48cf-977c-9cd391c1ae81_fixed.java
@@ -1,50 +1,70 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+            String testNamespaceURI = nodeNameTest.getNamespaceURI();
+            boolean isWildcardLocalName = nodeNameTest.isWildcard();
             String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+
+            String nodeLocalName = DOMNodePointer.getLocalName(node);
+            String nodeNamespaceURI = DOMNodePointer.getNamespaceURI(node);
+
+            // Handle the '*' case (matches any element)
+            if (isWildcardLocalName && testPrefix == null) {
                 return true;
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+
+            // Check if local name matches (for 'name', 'prefix:name', '*:name', 'prefix:*')
+            boolean localNameMatches;
+            if (isWildcardLocalName) { // Handles 'prefix:*'
+                localNameMatches = true;
+            } else { // Handles 'name', 'prefix:name', '*:name'
+                localNameMatches = testName.getName().equals(nodeLocalName);
             }
+
+            if (!localNameMatches) {
                 return false;
             }
+
+            // Check if namespace matches
+            // If the test has a namespace wildcard (e.g., '*:name'), any namespace matches.
+            if (testPrefix != null && testPrefix.equals("*")) {
+                return true;
+            }
+            
+            // For other cases ('name', 'prefix:name', 'prefix:*'), 
+            // the test's resolved namespace URI must match the node's namespace URI.
+            return equalStrings(testNamespaceURI, nodeNamespaceURI);
+        }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
                 return testPI.equals(nodePI);
             }
         }
         return false;
     }
