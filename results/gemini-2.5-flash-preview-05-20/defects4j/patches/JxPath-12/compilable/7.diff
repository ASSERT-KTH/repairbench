diff --git a/tmp/abdd06d5-8122-41c2-81ab-aff868fe59c7_buggy.java b/tmp/7ebef558-732b-470a-929e-892695b21f7c_fixed.java
index 40f74f7..499bc0d 100644
--- a/tmp/abdd06d5-8122-41c2-81ab-aff868fe59c7_buggy.java
+++ b/tmp/7ebef558-732b-470a-929e-892695b21f7c_fixed.java
@@ -1,50 +1,72 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
-            String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+            String testNamespaceURI = nodeNameTest.getNamespaceURI();
+            boolean testLocalNameIsWildcard = nodeNameTest.isWildcard(); // True if testName.getName() is "*"
+            String testPrefix = testName.getPrefix(); // Can be null, a prefix, or "*"
+
+            String nodeLocalName = DOMNodePointer.getLocalName(node);
+            String nodeNamespaceURI = DOMNodePointer.getNamespaceURI(node);
+
+            // Handle cases where the local name in the test is a wildcard "*"
+            if (testLocalNameIsWildcard) {
+                // Case 1: Test QName is `*` (any local name, any namespace)
+                // This implies testPrefix is null.
+                if (testPrefix == null) {
                     return true;
                 }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+                // Case 2: Test QName is `prefix:*` (specific namespace, any local name)
+                // Match if the node's namespace URI matches the test's resolved namespace URI.
+                return equalStrings(testNamespaceURI, nodeNamespaceURI);
             }
+
+            // At this point, the test local name is specific (not "*").
+            // First, check if the local names match.
+            if (!testName.getName().equals(nodeLocalName)) {
                 return false;
             }
+
+            // Local names match. Now, check the namespace.
+            // Case 3: Test QName is `*:localName` (any namespace, specific local name)
+            // If the test prefix is a wildcard "*", any namespace URI on the node is acceptable.
+            if ("*".equals(testPrefix)) {
+                return true;
+            }
+
+            // Case 4: Test QName is `localName` (no prefix) or `prefix:localName` (specific prefix/namespace)
+            // Match if the node's namespace URI matches the test's resolved namespace URI.
+            return equalStrings(testNamespaceURI, nodeNamespaceURI);
+        }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
                 return testPI.equals(nodePI);
             }
         }
         return false;
     }
\ No newline at end of file
