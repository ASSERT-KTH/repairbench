diff --git a/tmp/d22167d9-77a0-48bf-a3fb-68d18ffcda15_buggy.java b/tmp/7ebc8d5b-3778-427c-ba13-6f0bf65d93f9_fixed.java
index ec709bd..f49e387 100644
--- a/tmp/d22167d9-77a0-48bf-a3fb-68d18ffcda15_buggy.java
+++ b/tmp/7ebc8d5b-3778-427c-ba13-6f0bf65d93f9_fixed.java
@@ -1,8 +1,28 @@
     @Override
     public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 29-Jan-2016, tatu: Simple skipping for all other tokens, but FIELD_NAME bit
         //    special unfortunately
+        // The original code `p.skipChildren();` was insufficient in cases where
+        // the JsonParser was positioned at a FIELD_NAME token inside an object
+        // that was meant to be entirely skipped (e.g., after a TypeDeserializer
+        // consumed the START_OBJECT and type property).
+        // The robust fix involves handling different token types explicitly.
+        if (p.hasCurrentToken(JsonToken.START_OBJECT)) {
             p.skipChildren();
+        } else if (p.hasCurrentToken(JsonToken.START_ARRAY)) {
+            p.skipChildren();
+        } else if (p.hasCurrentToken(JsonToken.FIELD_NAME)) {
+            // This is the problematic case where a TypeDeserializer might have already
+            // consumed START_OBJECT and the type property, leaving the parser at
+            // another FIELD_NAME within the object.
+            // p.skipChildren() alone would only skip this field and its value,
+            // but not the rest of the object.
+            // We need to first move to the value token, then skip the value.
+            p.nextToken(); // Move from FIELD_NAME to its associated VALUE token
+            p.skipChildren(); // Skip the VALUE and its children (if complex)
+        } else { // Handle scalar values
+            p.skipChildren(); // Effectively consumes the scalar token
+        }
         return null;
     }
\ No newline at end of file
