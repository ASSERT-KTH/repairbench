diff --git a/tmp/bf7a2d73-1498-4d6d-9ca2-9148258637fa_buggy.java b/tmp/a0ae9e43-3a32-404b-9822-f33095f8eefd_fixed.java
index ec709bd..b0ed4ec 100644
--- a/tmp/bf7a2d73-1498-4d6d-9ca2-9148258637fa_buggy.java
+++ b/tmp/a0ae9e43-3a32-404b-9822-f33095f8eefd_fixed.java
@@ -1,8 +1,51 @@
     @Override
     public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 29-Jan-2016, tatu: Simple skipping for all other tokens, but FIELD_NAME bit
         //    special unfortunately
-            p.skipChildren();
+        //
+        // This deserializer is called for the *value* of a polymorphic type.
+        // Normally, `p` should be at `START_OBJECT`.
+        // However, if the type ID property has already been consumed
+        // (e.g., {"type":"unknown", "prop":"value"}), the parser may be
+        // at the next field name (`prop`) or even `END_OBJECT`.
+        // We need to consume the remaining tokens of the unknown object until `END_OBJECT`.
+
+        JsonToken t = p.currentToken();
+
+        // If the current token is the start of an object or array, skip the whole thing.
+        // This is the most common and ideal scenario for a value deserializer.
+        if (t == JsonToken.START_OBJECT || t == JsonToken.START_ARRAY) {
+            p.skipChildren(); // Skips the entire structure and moves parser to END_OBJECT/END_ARRAY
+        } else {
+            // If the parser is not at START_OBJECT/ARRAY, it means we are already
+            // inside the object, likely after the type ID field has been processed,
+            // or the value itself is a scalar. We need to consume remaining tokens.
+            
+            // Loop until we find the end of the current object (the polymorphic value)
+            // or the end of the stream.
+            while (t != JsonToken.END_OBJECT && t != null) {
+                if (t == JsonToken.FIELD_NAME) {
+                    // If it's a FIELD_NAME, we need to advance to its value
+                    // and then skip that value.
+                    t = p.nextToken(); // Advance to the value token
+                    
+                    // After nextToken(), `t` is now the token for the VALUE.
+                    // If the value is a structured type (object or array), skip its children.
+                    if (t == JsonToken.START_OBJECT || t == JsonToken.START_ARRAY) {
+                        p.skipChildren(); // Skips the whole structure and moves parser to END_OBJECT/END_ARRAY
+                    } else if (t != null) { // For scalar values (String, Number, Boolean, Null)
+                        // Consume the scalar value token. `skipChildren()` does not do this for scalars.
+                        // After this `nextToken()`, `p` will be at the next token (e.g., next FIELD_NAME or END_OBJECT).
+                        p.nextToken();
+                    }
+                } else if (t != null) {
+                    // This handles scalar values if the *initial* token was a scalar,
+                    // or if it's an unexpected token in the loop that wasn't a FIELD_NAME or START_STRUCT.
+                    p.nextToken(); // Consume current scalar token and advance
+                }
+                t = p.currentToken(); // Get next token for loop condition
+            }
+        }
         return null;
     }
\ No newline at end of file
