diff --git a/tmp/685641d8-eaf7-4329-b0bf-76637241cf68_buggy.java b/tmp/9704dda5-554d-46a8-9e49-1aa52420ff21_fixed.java
index ec709bd..ee36e69 100644
--- a/tmp/685641d8-eaf7-4329-b0bf-76637241cf68_buggy.java
+++ b/tmp/9704dda5-554d-46a8-9e49-1aa52420ff21_fixed.java
@@ -1,8 +1,31 @@
     @Override
     public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 29-Jan-2016, tatu: Simple skipping for all other tokens, but FIELD_NAME bit
         //    special unfortunately
+        // The original code `p.skipChildren()` is problematic if the parser is currently
+        // at a FIELD_NAME token when this deserializer is called.
+        // JsonParser.skipChildren() skips only the FIELD_NAME token itself, not its associated value.
+        // In the context of `AsPropertyTypeDeserializer`, after the type property
+        // (e.g., 'type':'xevent') is consumed, the parser is left at the next FIELD_NAME
+        // (e.g., 'location').
+        // To correctly skip the entire value associated with the unknown type, we must
+        // first advance the parser past the FIELD_NAME to its value, and then skip that value.
+
+        JsonToken t = p.getCurrentToken();
+
+        // If the current token is a FIELD_NAME, it means the type property has been consumed
+        // by the TypeDeserializer, and 'p' is now positioned at the next field name within
+        // the object of the unknown type. We must advance past this field name to its value.
+        if (t == JsonToken.FIELD_NAME) {
+            // Advance to the value token associated with this FIELD_NAME
+            t = p.nextToken();
+        }
+
+        // Now 'p' should be at the actual start of the value to be skipped
+        // (e.g., START_OBJECT, START_ARRAY, or a scalar value).
+        // JsonParser.skipChildren() correctly handles skipping the entire value from this point.
         p.skipChildren();
+
         return null;
     }
\ No newline at end of file
