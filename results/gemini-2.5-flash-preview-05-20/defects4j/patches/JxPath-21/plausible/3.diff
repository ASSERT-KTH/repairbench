diff --git a/tmp/32312e86-c81b-46e9-953c-9b58d30fbbca_buggy.java b/tmp/05b52b3f-69c6-4eec-9dd3-aa95a3c38283_fixed.java
index 516fad7..242028a 100644
--- a/tmp/32312e86-c81b-46e9-953c-9b58d30fbbca_buggy.java
+++ b/tmp/05b52b3f-69c6-4eec-9dd3-aa95a3c38283_fixed.java
@@ -1,8 +1,22 @@
     /**
      * If the property contains a collection, then the length of that
-     * collection, otherwise - 1.
+     * collection. If the property value is a single non-null object,
+     * its length is 1. If the property value is null, its length is also 1
+     * for XPath indexing purposes (treating null as a single item),
+     * otherwise -1 as per the original documentation if it means non-collection.
+     * The failing tests indicate that null values should be treated as single items.
      * @return int length
      */
     public int getLength() {
-        return ValueUtils.getLength(getBaseValue());
+        Object baseValue = getBaseValue();
+        if (baseValue == null) {
+            // The tests (e.g., $testnull/nothing[1] expecting [null]) indicate that
+            // a null property value should be treated as a single item for XPath indexing.
+            // ValueUtils.getLength(null) returns 0, which would cause an empty result.
+            // By returning 1, null values can be correctly indexed as a single element.
+            return 1;
+        }
+        // For non-null values (collections, arrays, iterators, maps, or single objects),
+        // ValueUtils.getLength provides the correct length (e.g., size for collections, 1 for single objects).
+        return ValueUtils.getLength(baseValue);
     }
\ No newline at end of file
