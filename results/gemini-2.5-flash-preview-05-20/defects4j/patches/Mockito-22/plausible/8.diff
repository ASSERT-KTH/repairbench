diff --git a/tmp/a01afbd5-5f73-41fd-9dff-10fc94279f2f_buggy.java b/tmp/dec64710-6cee-4f21-be3f-f7fc257288de_fixed.java
index 111ba5e..2bf183a 100644
--- a/tmp/a01afbd5-5f73-41fd-9dff-10fc94279f2f_buggy.java
+++ b/tmp/dec64710-6cee-4f21-be3f-f7fc257288de_fixed.java
@@ -1,9 +1,22 @@
     public static boolean areEqual(Object o1, Object o2) {
+        if (o1 == o2) { // If both objects are the same instance (or both null), they are equal.
+            return true;
+        }
+        // At this point, o1 and o2 are not the same instance.
+        // So if one is null, the other is definitely not null, meaning they are not equal.
         if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
+            return false;
+        }
+        // At this point, neither o1 nor o2 is null, and they are not the same instance.
+        if (isArray(o1)) {
+            // If o1 is an array, o2 must also be an array and their contents must be equal.
+            // This relies on `isArray` correctly identifying array types and `areArraysEqual`
+            // handling different primitive/wrapper array types and recursive element comparison.
             return isArray(o2) && areArraysEqual(o1, o2);
         } else {
+            // For non-array objects, use their custom equals method.
+            // The o1 == o2 check above protects against problematic equals() implementations
+            // that throw exceptions on self-comparison.
             return o1.equals(o2);
         }
     }
