diff --git a/tmp/68f873d5-0b9c-4f87-abef-db2ae50f2f5b_buggy.java b/tmp/b4128094-5673-4519-8521-b0f5c6ca7694_fixed.java
index 111ba5e..78cb603 100644
--- a/tmp/68f873d5-0b9c-4f87-abef-db2ae50f2f5b_buggy.java
+++ b/tmp/b4128094-5673-4519-8521-b0f5c6ca7694_fixed.java
@@ -1,9 +1,26 @@
     public static boolean areEqual(Object o1, Object o2) {
+        // If both objects are the same instance, they are equal. This also covers
+        // the case where both are null (o1 == o2 == null).
+        if (o1 == o2) {
+            return true;
+        }
+
+        // At this point, o1 and o2 are not the same instance.
+        // If one is null and the other is not (because o1 == o2 would have caught both null),
+        // then they cannot be equal.
         if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
+            return false;
+        }
+
+        // At this point, neither o1 nor o2 are null, and they are not the same instance.
+        // Check if o1 is an array.
+        // Note: isArray and areArraysEqual are assumed to be helper methods available in the context.
+        if (isArray(o1)) {
+            // If o1 is an array, o2 must also be an array for them to be equal.
+            // Then, delegate to a specific array comparison method.
             return isArray(o2) && areArraysEqual(o1, o2);
         } else {
+            // If o1 is not an array, use the standard Object.equals() method.
             return o1.equals(o2);
         }
     }
\ No newline at end of file
