diff --git a/tmp/97b9b1f3-62e4-4127-914f-776486e5b8f4_buggy.java b/tmp/bac83151-789d-4ca6-859a-a09579dd2c7c_fixed.java
index 111ba5e..8b23288 100644
--- a/tmp/97b9b1f3-62e4-4127-914f-776486e5b8f4_buggy.java
+++ b/tmp/bac83151-789d-4ca6-859a-a09579dd2c7c_fixed.java
@@ -1,9 +1,37 @@
+import java.lang.reflect.Array;
+
+public class Equality {
     public static boolean areEqual(Object o1, Object o2) {
         if (o1 == null || o2 == null) {
             return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+        }
+
+        boolean o1IsArray = o1.getClass().isArray();
+        boolean o2IsArray = o2.getClass().isArray();
+
+        if (o1IsArray && o2IsArray) {
+            // Both are arrays, compare their elements
+            int length1 = Array.getLength(o1);
+            int length2 = Array.getLength(o2);
+
+            if (length1 != length2) {
+                return false;
+            }
+
+            for (int i = 0; i < length1; i++) {
+                Object element1 = Array.get(o1, i);
+                Object element2 = Array.get(o2, i);
+                if (!areEqual(element1, element2)) { // Recursive call to areEqual for elements
+                    return false;
+                }
+            }
+            return true;
+        } else if (o1IsArray != o2IsArray) {
+            // One is an array and the other is not, so they are not equal
+            return false;
         } else {
+            // Neither are arrays, use standard equals() method
             return o1.equals(o2);
         }
     }
+}
\ No newline at end of file
