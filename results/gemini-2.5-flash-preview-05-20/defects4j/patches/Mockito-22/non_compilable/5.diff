diff --git a/tmp/a79ddf69-f00f-41bc-acc4-b36df32a9d1f_buggy.java b/tmp/290987b0-3de0-43b1-beda-f7b17a3147d4_fixed.java
index 111ba5e..712be05 100644
--- a/tmp/a79ddf69-f00f-41bc-acc4-b36df32a9d1f_buggy.java
+++ b/tmp/290987b0-3de0-43b1-beda-f7b17a3147d4_fixed.java
@@ -1,9 +1,49 @@
+import java.lang.reflect.Array;
+
+public class Equality { // Assuming Equality is the class containing areEqual, to provide context for 'isArray'
+    // The 'isArray' method is assumed to be provided by the environment,
+    // e.g., 'private static boolean isArray(Object o) { return o != null && o.getClass().isArray(); }'
+    // The 'areArraysEqual' method was buggy and is being effectively replaced or bypassed.
+
+    // A placeholder for isArray, assuming it exists in the original context.
+    // This is not part of the fix, but necessary for the code to compile and demonstrate the logic.
+    // If it's a static method in the same class, it doesn't need 'this.'.
+    // Assuming 'isArray' is accessible.
+    private static boolean isArray(Object o) {
+        return o != null && o.getClass().isArray();
+    }
+
     public static boolean areEqual(Object o1, Object o2) {
-        if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+        if (o1 == o2) { // Handles identical objects, including (null, null)
+            return true;
+        }
+        if (o1 == null || o2 == null) { // At this point, o1 != o2, so if one is null, they're not equal
+            return false;
+        }
+
+        // If both are arrays, handle deep comparison
+        if (isArray(o1) && isArray(o2)) {
+            int length1 = Array.getLength(o1);
+            int length2 = Array.getLength(o2);
+
+            if (length1 != length2) {
+                return false;
+            }
+
+            for (int i = 0; i < length1; i++) {
+                Object element1 = Array.get(o1, i);
+                Object element2 = Array.get(o2, i);
+                if (!areEqual(element1, element2)) { // Recursively call areEqual for elements
+                    return false;
+                }
+            }
+            return true;
+        } else if (isArray(o1) || isArray(o2)) {
+            // If one is an array and the other is not, they are not equal (already handled case where both are arrays)
+            return false;
         } else {
+            // Neither is an array, fallback to standard equals method
             return o1.equals(o2);
         }
     }
+}
