diff --git a/tmp/f9da7611-c006-4044-b3ec-8a2da1e8421e_buggy.java b/tmp/81261d26-c5ec-4112-a442-2c3a8fb9ef52_fixed.java
index ef76662..b2177b8 100644
--- a/tmp/f9da7611-c006-4044-b3ec-8a2da1e8421e_buggy.java
+++ b/tmp/81261d26-c5ec-4112-a442-2c3a8fb9ef52_fixed.java
@@ -1,17 +1,24 @@
         void read(Tokeniser t, CharacterReader r) {
             char c = r.consume();
             switch (c) {
                 case '>':
                     t.tagPending.selfClosing = true;
                     t.emitTagPending();
                     t.transition(Data);
                     break;
                 case eof:
                     t.eofError(this);
                     t.transition(Data);
                     break;
                 default:
+                    // In SelfClosingStartTag state, encountering a character other than '>' or EOF
+                    // (e.g., '/o' where 'o' is `c`) is a parse error.
+                    // The HTML5 parsing algorithm for such cases typically involves treating the '/'
+                    // as if it were not there for attribute parsing purposes and re-processing
+                    // the character 'c' as the start of an attribute name.
+                    // To do this, we unconsume 'c' so it's available for the next state.
                     t.error(this);
-                    t.transition(BeforeAttributeName);
+                    r.unconsume(); // Put the character back into the reader
+                    t.transition(BeforeAttributeName); // Transition to parse an attribute name
             }
         }
\ No newline at end of file
