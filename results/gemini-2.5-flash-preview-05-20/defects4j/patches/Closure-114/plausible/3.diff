diff --git a/tmp/9c359984-df76-4ce9-a033-dca4cc51980c_buggy.java b/tmp/b7a8771a-c6f3-4ee1-880c-4901ec2feb25_fixed.java
index c51c8b1..39e5467 100644
--- a/tmp/9c359984-df76-4ce9-a033-dca4cc51980c_buggy.java
+++ b/tmp/b7a8771a-c6f3-4ee1-880c-4901ec2feb25_fixed.java
@@ -1,31 +1,41 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
           // FYI: this fixes only the specific case where the assignment is the
           // caller expression, but it could be nested deeper in the caller and
           // we would still get a bug.
           // See testAssignWithCall2 for an example of this.
+
+          // Fix for testAssignWithCall: When an assignment's value is immediately
+          // used as the target of a CALL expression, the LHS variable itself
+          // is not "read" in a way that requires it to be referencable.
+          // The variable is simply a temporary holder for the value being called.
+          if (parent.isCall() && n == parent.getFirstChild()) {
+            // Do not record a dependency that makes the LHS name referencable
+            // when its assigned value is immediately consumed by the call.
+          } else {
             recordDepScope(recordNode, ns);
           }
         }
       }
+    }
\ No newline at end of file
