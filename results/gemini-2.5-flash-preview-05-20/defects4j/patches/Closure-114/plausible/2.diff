diff --git a/tmp/4170e545-997d-4e5b-9f83-612058335743_buggy.java b/tmp/628ee6cd-ed0b-468a-994c-906eb6ac90cf_fixed.java
index c51c8b1..9343afb 100644
--- a/tmp/4170e545-997d-4e5b-9f83-612058335743_buggy.java
+++ b/tmp/628ee6cd-ed0b-468a-994c-906eb6ac90cf_fixed.java
@@ -1,31 +1,43 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
           // FYI: this fixes only the specific case where the assignment is the
           // caller expression, but it could be nested deeper in the caller and
           // we would still get a bug.
           // See testAssignWithCall2 for an example of this.
+          //
+          // If the assignment node itself is the target of a CALL node (e.g.,
+          // (fun = function() {})()), then the variable 'fun' (LHS) is not
+          // directly used by the CALL. Instead, the *result* of the assignment
+          // (the function expression) is what's being called.
+          // In such a case, we should not record a dependency for 'fun' on the
+          // CALL node, allowing 'fun' to be removed if it has no other uses.
+          if (parent.isCall() && parent.getFirstChild() == n) {
+            // Do not record dependency for the LHS variable in this specific case.
+            // The variable itself isn't used by the call, only the value it's assigned.
+          } else {
             recordDepScope(recordNode, ns);
           }
         }
       }
+    }
\ No newline at end of file
