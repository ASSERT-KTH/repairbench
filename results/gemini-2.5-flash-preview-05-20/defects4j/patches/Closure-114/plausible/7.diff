diff --git a/tmp/dc25d852-5c99-4201-a131-bb70262efaa6_buggy.java b/tmp/e0479847-e79a-48c6-8ffd-7894887fdb08_fixed.java
index c51c8b1..f4d17ad 100644
--- a/tmp/dc25d852-5c99-4201-a131-bb70262efaa6_buggy.java
+++ b/tmp/e0479847-e79a-48c6-8ffd-7894887fdb08_fixed.java
@@ -1,31 +1,45 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
           // FYI: this fixes only the specific case where the assignment is the
           // caller expression, but it could be nested deeper in the caller and
           // we would still get a bug.
           // See testAssignWithCall2 for an example of this.
+          //
+          // If the assignment node (n) is the target of a CALL or NEW operation,
+          // like (fun = function(){})(), then the nameNode (fun) is not actually
+          // used by the recordNode (the function expression). The variable 'fun'
+          // is simply assigned a value which is then immediately consumed by the
+          // surrounding call. In this specific case, we should not record a
+          // dependency from the nameNode to the recordNode, as it prevents the
+          // nameNode from being correctly identified as unused if it has no
+          // other references.
+          if ((parent.isCall() || parent.isNew()) && parent.getFirstChild() == n) {
+            // Do not record a dependency scope. The nameNode's usage is determined
+            // by its other references, not by the RHS in this context.
+          } else {
             recordDepScope(recordNode, ns);
           }
         }
       }
+    }
