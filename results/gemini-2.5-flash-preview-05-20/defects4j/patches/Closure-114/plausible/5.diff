diff --git a/tmp/068161d5-5826-4ea4-b576-19331e90a314_buggy.java b/tmp/5af9552a-502f-42b0-acb6-d96b2e91fb63_fixed.java
index c51c8b1..b4c4b1a 100644
--- a/tmp/068161d5-5826-4ea4-b576-19331e90a314_buggy.java
+++ b/tmp/5af9552a-502f-42b0-acb6-d96b2e91fb63_fixed.java
@@ -1,31 +1,46 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
           // FYI: this fixes only the specific case where the assignment is the
           // caller expression, but it could be nested deeper in the caller and
           // we would still get a bug.
           // See testAssignWithCall2 for an example of this.
+
+          // Fix for testAssignWithCall:
+          // When an ASSIGN node (n) is the direct callee of a CALL expression (parent),
+          // the variable on the LHS (nameNode, e.g., 'fun' in '(fun = function(){})()')
+          // is not 'used' as a reference after the assignment. Its value is immediately
+          // consumed by the CALL. Therefore, recording a dependency scope for the LHS
+          // variable (ns) on the RHS node (recordNode) would incorrectly mark the
+          // LHS variable as used. To allow for proper dead-code elimination of 'fun',
+          // we skip recording this specific dependency.
+          if (parent.isCall() && parent.getFirstChild() == n) {
+            // Do not record a dependency scope for the LHS variable (ns) in this specific case.
+            // The variable's assigned value is used by the call, but the variable name itself
+            // is not referenced and should be eligible for removal if not used elsewhere.
+          } else {
             recordDepScope(recordNode, ns);
           }
         }
       }
+    }
\ No newline at end of file
