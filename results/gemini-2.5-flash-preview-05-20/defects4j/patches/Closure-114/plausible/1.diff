diff --git a/tmp/6d9dfe91-36cd-4f12-b113-175d6fba4827_buggy.java b/tmp/59c882ed-b712-4674-9b0d-9535d56921ab_fixed.java
index c51c8b1..c66a87c 100644
--- a/tmp/6d9dfe91-36cd-4f12-b113-175d6fba4827_buggy.java
+++ b/tmp/59c882ed-b712-4674-9b0d-9535d56921ab_fixed.java
@@ -1,31 +1,42 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
+        } else {
+          // If the assignment (n) is the direct target of a CALL (parent),
+          // e.g., (fun = function(){...})(), then the assigned variable
+          // (fun, which is nameNode) is not truly 'used' by this operation.
+          // Its value is used, but the variable itself is not.
+          // Skipping recordDepScope for the LHS in this specific case allows
+          // the variable to be removed if no other actual uses exist.
+          if (parent.isCall() && n == parent.getFirstChild()) {
+            // Do nothing for the LHS variable. It's not considered 'used'
+            // in this context.
           } else {
             // The rhs of the assignment is the caller, so it's used by the
             // context. Don't associate it w/ the lhs.
             // FYI: this fixes only the specific case where the assignment is the
             // caller expression, but it could be nested deeper in the caller and
             // we would still get a bug.
             // See testAssignWithCall2 for an example of this.
             recordDepScope(recordNode, ns);
           }
         }
       }
+    }
\ No newline at end of file
