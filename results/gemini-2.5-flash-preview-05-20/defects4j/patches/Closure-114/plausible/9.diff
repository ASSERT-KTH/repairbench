diff --git a/tmp/e23d72f0-c166-431d-95f3-b4532df17442_buggy.java b/tmp/36bf4b7e-39b7-4e46-acd4-ac4ccb9267f6_fixed.java
index c51c8b1..97e548d 100644
--- a/tmp/e23d72f0-c166-431d-95f3-b4532df17442_buggy.java
+++ b/tmp/36bf4b7e-39b7-4e46-acd4-ac4ccb9267f6_fixed.java
@@ -1,31 +1,45 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
+        // Check if the assignment expression itself is the target of a CALL.
+        // Example: (fun = function(){ x; })();
+        // In this case, the result of the assignment (the function) is immediately called.
+        // The variable 'fun' itself is not "referenced" in a way that requires it to be kept,
+        // as its value is used directly. The name 'fun' can be optimized away if not used elsewhere.
+        // The original code was incorrectly recording a dependency that prevented 'fun' from being removed,
+        // contrary to the comment's intention for this specific scenario.
+        if (parent.isCall() && parent.getFirstChild() == n) {
+          // Do not record a dependency for the LHS variable in this context.
+          // This allows NameAnalyzer to correctly identify 'fun' as removable
+          // if it's not used by any other reference.
+          return;
+        }
+
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
           // FYI: this fixes only the specific case where the assignment is the
           // caller expression, but it could be nested deeper in the caller and
           // we would still get a bug.
           // See testAssignWithCall2 for an example of this.
           recordDepScope(recordNode, ns);
         }
       }
     }
\ No newline at end of file
