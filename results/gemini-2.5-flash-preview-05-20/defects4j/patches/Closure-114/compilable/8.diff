diff --git a/tmp/a5a5aa2f-1a03-42c9-990e-5e7db96e1f2e_buggy.java b/tmp/9a01b4d1-fae6-4965-8b99-ba541517683a_fixed.java
index c51c8b1..217180a 100644
--- a/tmp/a5a5aa2f-1a03-42c9-990e-5e7db96e1f2e_buggy.java
+++ b/tmp/9a01b4d1-fae6-4965-8b99-ba541517683a_fixed.java
@@ -1,31 +1,44 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
           // FYI: this fixes only the specific case where the assignment is the
           // caller expression, but it could be nested deeper in the caller and
           // we would still get a bug.
           // See testAssignWithCall2 for an example of this.
+          //
+          // Fix for assignments that are the direct target of a CALL node,
+          // e.g., (fun = function(){ x; })();
+          // In such cases, the LHS 'fun' is effectively a temporary name
+          // whose value (the function) is immediately called. The name 'fun'
+          // itself is not "used" in the context of the CALL node's dependency
+          // scope, and recording it as such prevents proper dead code elimination.
+          if (recordNode.isCall() && recordNode.getFirstChild() == n) {
+            // Do nothing for this specific case. The 'fun' variable is
+            // a transient placeholder for the function being called,
+            // not a dependency of the CALL.
+          } else {
             recordDepScope(recordNode, ns);
           }
         }
       }
+    }
\ No newline at end of file
