diff --git a/tmp/879ac2b1-1545-4614-945d-143d8e0c2fc3_buggy.java b/tmp/5bbb85b6-590f-4355-ae5e-f00f01e7ec75_fixed.java
index c51c8b1..0229dfd 100644
--- a/tmp/879ac2b1-1545-4614-945d-143d8e0c2fc3_buggy.java
+++ b/tmp/5bbb85b6-590f-4355-ae5e-f00f01e7ec75_fixed.java
@@ -1,31 +1,47 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
           // FYI: this fixes only the specific case where the assignment is the
           // caller expression, but it could be nested deeper in the caller and
           // we would still get a bug.
           // See testAssignWithCall2 for an example of this.
+
+          // Fix for testAssignWithCall: If an assignment expression is immediately called
+          // (e.g., (x=f)()) or constructed (e.g., new (x=f)()), the variable 'x' (the LHS)
+          // is assigned a value, and that *value* is then called/constructed, not the variable itself.
+          // Therefore, the LHS variable should not be marked as 'used' by this call/new operation.
+          // 'recordNode' for an ASSIGN node is typically its parent (n.getParent()).
+          // So, if the parent of the ASSIGN node is a CALL or NEW node, and the ASSIGN node
+          // itself is the target expression of that CALL/NEW (i.e., its first child),
+          // then we should not record a dependency scope for the LHS variable.
+          boolean isCallTargetAssignment = false;
+          if ((recordNode.isCall() || recordNode.isNew()) && recordNode.getFirstChild() == n) {
+            isCallTargetAssignment = true;
+          }
+
+          if (!isCallTargetAssignment) {
             recordDepScope(recordNode, ns);
           }
         }
       }
+    }
\ No newline at end of file
