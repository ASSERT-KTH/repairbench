diff --git a/tmp/6a98449c-1c23-4bf2-9d9d-330124ffce15_buggy.java b/tmp/b0d44121-7018-493d-9ab3-179841ba8ced_fixed.java
index 82bdfd4..46ee348 100644
--- a/tmp/6a98449c-1c23-4bf2-9d9d-330124ffce15_buggy.java
+++ b/tmp/b0d44121-7018-493d-9ab3-179841ba8ced_fixed.java
@@ -1,51 +1,69 @@
     /**
      * <p>Test if two <code>Object</code>s are equal using their
      * <code>equals</code> method.</p>
      *
      * @param lhs  the left hand object
      * @param rhs  the right hand object
      * @return EqualsBuilder - used to chain calls.
      */
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
         Class lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
                 // The simple case, not an array, just test the element
-                isEquals = lhs.equals(rhs);
+                // Special handling for BigDecimal and BigInteger to use compareTo() for equality,
+                // as their equals() method considers scale, which is often not desired for equality.
+                // Also, ensure the current state of isEquals is combined using AND.
+                if (lhs instanceof java.math.BigDecimal) {
+                    if (rhs instanceof java.math.BigDecimal) {
+                        isEquals = isEquals && ((java.math.BigDecimal) lhs).compareTo((java.math.BigDecimal) rhs) == 0;
+                    } else {
+                        isEquals = false; // Different types, cannot be equal
+                    }
+                } else if (lhs instanceof java.math.BigInteger) {
+                    if (rhs instanceof java.math.BigInteger) {
+                        isEquals = isEquals && ((java.math.BigInteger) lhs).compareTo((java.math.BigInteger) rhs) == 0;
+                    } else {
+                        isEquals = false; // Different types, cannot be equal
+                    }
+                } else {
+                    isEquals = isEquals && lhs.equals(rhs);
+                }
         } else if (lhs.getClass() != rhs.getClass()) {
             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]
+            // Or different primitive array types (e.g., long[] to int[]). These are considered unequal.
             this.setEquals(false);
         }
         // 'Switch' on type of array, to dispatch to the correct handler
         // This handles multi dimensional arrays of the same depth
         else if (lhs instanceof long[]) {
             append((long[]) lhs, (long[]) rhs);
         } else if (lhs instanceof int[]) {
             append((int[]) lhs, (int[]) rhs);
         } else if (lhs instanceof short[]) {
             append((short[]) lhs, (short[]) rhs);
         } else if (lhs instanceof char[]) {
             append((char[]) lhs, (char[]) rhs);
         } else if (lhs instanceof byte[]) {
             append((byte[]) lhs, (byte[]) rhs);
         } else if (lhs instanceof double[]) {
             append((double[]) lhs, (double[]) rhs);
         } else if (lhs instanceof float[]) {
             append((float[]) lhs, (float[]) rhs);
         } else if (lhs instanceof boolean[]) {
             append((boolean[]) lhs, (boolean[]) rhs);
         } else {
-            // Not an array of primitives
+            // Not an array of primitives, assume it's an array of Objects
             append((Object[]) lhs, (Object[]) rhs);
         }
         return this;
     }
\ No newline at end of file
