diff --git a/tmp/2d15de04-cb02-4fba-834c-3bb00befef4d_buggy.java b/tmp/7f7fe775-f602-4701-aa24-9679403f3634_fixed.java
index 50f3e2e..9dc8e1b 100644
--- a/tmp/2d15de04-cb02-4fba-834c-3bb00befef4d_buggy.java
+++ b/tmp/7f7fe775-f602-4701-aa24-9679403f3634_fixed.java
@@ -1,7 +1,15 @@
     /** Get a line with reversed direction.
      * @return a new instance, with reversed direction
      */
     public Line revert() {
-        final Line reverted = new Line(zero, zero.subtract(direction));
+        // A line is defined by a point 'zero' on the line and a normalized direction 'direction'.
+        // To revert the line, we can keep the same point 'zero' and simply negate the existing direction vector.
+        // The Line constructor taking (origin, direction) will ensure the new direction is normalized.
+        // This approach is more numerically stable than computing `new Line(zero, zero.subtract(direction))`
+        // because it avoids intermediate vector subtractions (like `zero.subtract(direction)` and then
+        // implicitly `(zero.subtract(direction)).subtract(zero)`) which can lead to
+        // precision loss due to catastrophic cancellation when large coordinate values are involved.
+        // Directly negating the already normalized direction vector is more robust.
+        final Line reverted = new Line(zero, direction.negate());
         return reverted;
     }
\ No newline at end of file
