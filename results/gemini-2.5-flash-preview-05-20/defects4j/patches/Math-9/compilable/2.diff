diff --git a/tmp/f61b0a7c-a339-448b-b996-971ce21c1e77_buggy.java b/tmp/572ec55a-cb92-417e-af79-fdb2164c4092_fixed.java
index 50f3e2e..efe6391 100644
--- a/tmp/f61b0a7c-a339-448b-b996-971ce21c1e77_buggy.java
+++ b/tmp/572ec55a-cb92-417e-af79-fdb2164c4092_fixed.java
@@ -1,7 +1,21 @@
     /** Get a line with reversed direction.
      * @return a new instance, with reversed direction
      */
     public Line revert() {
-        final Line reverted = new Line(zero, zero.subtract(direction));
+        // The original line has its 'zero' point and 'direction'.
+        // To revert, we want the new line to pass through a point on the original line
+        // and have the opposite direction.
+        // The Line constructor takes two points (p1, p2) and computes its direction as (p2-p1).normalize().
+        // We want (p2-p1).normalize() to be equivalent to this.direction.negate().
+        //
+        // Original: p1 = zero, p2 = zero.subtract(direction)
+        // -> direction = (zero - direction) - zero = -direction
+        //
+        // Alternative: p1 = zero.add(direction), p2 = zero
+        // -> direction = zero - (zero + direction) = -direction
+        //
+        // Both are mathematically equivalent. The alternative might offer slightly different
+        // floating-point precision due to different calculation order for large numbers.
+        final Line reverted = new Line(zero.add(direction), zero);
         return reverted;
     }
\ No newline at end of file
