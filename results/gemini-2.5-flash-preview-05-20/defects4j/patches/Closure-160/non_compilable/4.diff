diff --git a/tmp/298fbd8f-3295-4e65-9cc3-99742a76aad4_buggy.java b/tmp/651bc49b-c732-4655-9946-0b13ae1e1404_fixed.java
index b05b859..445c611 100644
--- a/tmp/298fbd8f-3295-4e65-9cc3-99742a76aad4_buggy.java
+++ b/tmp/651bc49b-c732-4655-9946-0b13ae1e1404_fixed.java
@@ -1,61 +1,97 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
+    // If specific checks related to CHECK_VARIABLES are explicitly enabled
+    // as a warning or an error (via --jscomp_error/warning flags),
+    // then force options.checkSymbols to true. This ensures that the
+    // relevant compiler passes (like VarCheck's sub-checks, which depend
+    // on options.checkSymbols being true) are not skipped, even if
+    // `checkSymbols` was initially set to false (e.g., by --warning_level=QUIET).
+    boolean checkSymbolsForcedByExplicitErrorOrWarning = false;
+
+    // Check individual diagnostic types that are part of the CHECK_VARIABLES bundle.
+    // For example, DiagnosticGroups.UNDEFINED_VARIABLES (which includes VarCheck.UNDEFINED_VAR_ERROR)
+    // is part of CHECK_VARIABLES. If it's explicitly set to ERROR, we must enable checkSymbols.
+    for (DiagnosticType type : DiagnosticGroups.CHECK_VARIABLES.getDiagnostics()) {
+        CheckLevel currentLevel = options.getWarningsGuard().levelFor(DiagnosticGroup.forType(type));
+        if (currentLevel != null && currentLevel.isOn()) {
+            options.checkSymbols = true;
+            checkSymbolsForcedByExplicitErrorOrWarning = true;
+            break;
+        }
+    }
+
+    // Also check the CHECK_VARIABLES group itself, in case it was explicitly enabled.
+    // (e.g., via --jscomp_error=checkVars)
+    if (!checkSymbolsForcedByExplicitErrorOrWarning) {
+        CheckLevel checkVarsGroupLevel = options.getWarningsGuard().levelFor(DiagnosticGroups.CHECK_VARIABLES);
+        if (checkVarsGroupLevel != null && checkVarsGroupLevel.isOn()) {
+            options.checkSymbols = true;
+            // No need to set checkSymbolsForcedByExplicitErrorOrWarning here,
+            // as we don't break early and will exit this block.
+        }
+    }
+
+
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
+    // Add the warnings guard configured from command-line options. This guard
+    // reflects `--jscomp_error`, `--jscomp_warning`, etc.
     guards.add(options.getWarningsGuard());
 
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
     // about missing variable declarations, we shut that specific
     // error off.
+    // This logic only applies if options.checkSymbols is still false AFTER
+    // considering explicit --jscomp_error/warning flags above.
     if (!options.checkSymbols &&
         (warningsGuard == null || !warningsGuard.disables(
             DiagnosticGroups.CHECK_VARIABLES))) {
       guards.add(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
