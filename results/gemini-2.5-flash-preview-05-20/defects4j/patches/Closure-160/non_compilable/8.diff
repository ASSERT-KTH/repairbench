diff --git a/tmp/fd2bf445-abcf-4b1f-8bb8-4a86524c1fb1_buggy.java b/tmp/d458fa30-ec99-49f1-a05e-7049f99c1c03_fixed.java
index b05b859..8fe4bde 100644
--- a/tmp/fd2bf445-abcf-4b1f-8bb8-4a86524c1fb1_buggy.java
+++ b/tmp/d458fa30-ec99-49f1-a05e-7049f99c1c03_fixed.java
@@ -1,61 +1,73 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
     // about missing variable declarations, we shut that specific
     // error off.
+    // However, if a user explicitly enables a check within CHECK_VARIABLES
+    // (e.g., via --jscomp_error), that should override the default
+    // behavior of options.checkSymbols = false.
+    // The original condition (warningsGuard == null || !warningsGuard.disables(...))
+    // was problematic because 'warningsGuard' (this.warningsGuard) was
+    // being constructed at this point, leading to potential circularity
+    // or incorrect evaluation of user-specified overrides.
+    // We should consult options.getWarningsGuard() which already contains
+    // user-specified levels from command-line arguments.
     if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
+        options.getWarningsGuard().level(DiagnosticGroups.CHECK_VARIABLES) == CheckLevel.DEFAULT) {
+      // If checkSymbols is off and the user has not explicitly set a
+      // level for CHECK_VARIABLES (meaning it's at its default level),
+      // then turn it off. If the user has explicitly set a level
+      // (e.g., ERROR or WARNING), then we should not add this OFF guard.
       guards.add(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
