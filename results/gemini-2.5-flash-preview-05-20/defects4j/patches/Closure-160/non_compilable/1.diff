diff --git a/tmp/9b5e0fb2-9e18-4994-b88e-fe90c95aa40f_buggy.java b/tmp/8151d337-d31c-4724-978f-55f61ce066fc_fixed.java
index b05b859..90c88a5 100644
--- a/tmp/9b5e0fb2-9e18-4994-b88e-fe90c95aa40f_buggy.java
+++ b/tmp/8151d337-d31c-4724-978f-55f61ce066fc_fixed.java
@@ -1,61 +1,86 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
+    // Ensure VarCheck pass runs if any specific CHECK_VARIABLES diagnostic
+    // is explicitly enabled (e.g., via --jscomp_error=undefinedVars).
+    // This is because options.checkSymbols gates the VarCheck pass,
+    // but options.setWarningLevel only sets checkSymbols=true if
+    // DiagnosticGroups.CHECK_VARIABLES itself is directly set to WARNING/ERROR,
+    // not if a child group like UNDEFINED_VARIABLES is set.
+    if (!options.checkSymbols) {
+      boolean checkSymbolsEnabledByOption = false;
+      // Iterate through all registered diagnostic groups.
+      for (DiagnosticGroup group : getDiagnosticGroups().getRegisteredGroups()) {
+        // If this group is CHECK_VARIABLES or one of its members,
+        // and its level is ON via user options, then checkSymbols should be true.
+        // options.getWarningsGuard() reflects command-line flags like --jscomp_error
+        if (DiagnosticGroups.CHECK_VARIABLES.contains(group) || group == DiagnosticGroups.CHECK_VARIABLES) {
+          if (options.getWarningsGuard().getLevel(group).isOn()) {
+            checkSymbolsEnabledByOption = true;
+            break;
+          }
+        }
+      }
+      if (checkSymbolsEnabledByOption) {
+        options.checkSymbols = true;
+      }
+    }
+
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
     // about missing variable declarations, we shut that specific
     // error off.
-    if (!options.checkSymbols &&
+    if (!options.checkSymbols && // This condition will now be false if checkSymbols was just set to true
         (warningsGuard == null || !warningsGuard.disables(
             DiagnosticGroups.CHECK_VARIABLES))) {
       guards.add(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
