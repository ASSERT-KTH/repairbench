diff --git a/tmp/18126754-5239-4af9-baa9-fd7c94964c74_buggy.java b/tmp/ac14d836-5795-4ed8-858b-a132e646b08b_fixed.java
index 6e238e7..16ce06f 100644
--- a/tmp/18126754-5239-4af9-baa9-fd7c94964c74_buggy.java
+++ b/tmp/ac14d836-5795-4ed8-858b-a132e646b08b_fixed.java
@@ -1,15 +1,29 @@
     /**
      * Calculates the L<sub>2</sub> (Euclidean) distance between two points.
      *
      * @param p1 the first point
      * @param p2 the second point
      * @return the L<sub>2</sub> distance between the two points
      */
     public static double distance(int[] p1, int[] p2) {
-      int sum = 0;
+      // Check for null arguments to prevent NullPointerException
+      if (p1 == null || p2 == null) {
+          throw new IllegalArgumentException("Input points cannot be null.");
+      }
+
+      // Check if points have the same dimension
+      if (p1.length != p2.length) {
+          throw new IllegalArgumentException("Input points must have the same dimension.");
+      }
+
+      // Use long for sum and intermediate difference calculation to prevent
+      // potential integer overflow when squaring large differences.
+      // The maximum difference between two int values can be ~4*10^9,
+      // and its square can be ~16*10^18, which fits in a long but not an int.
+      long sum = 0;
       for (int i = 0; i < p1.length; i++) {
-          final int dp = p1[i] - p2[i];
+          final long dp = (long) p1[i] - p2[i];
           sum += dp * dp;
       }
       return Math.sqrt(sum);
     }
\ No newline at end of file
