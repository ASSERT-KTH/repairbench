diff --git a/tmp/0549580a-a1ba-45d3-be56-8b1fc3a48bfd_buggy.java b/tmp/68ad77d9-c0bd-45ba-bdcf-0543711d9752_fixed.java
index 6e238e7..8476dd6 100644
--- a/tmp/0549580a-a1ba-45d3-be56-8b1fc3a48bfd_buggy.java
+++ b/tmp/68ad77d9-c0bd-45ba-bdcf-0543711d9752_fixed.java
@@ -1,15 +1,28 @@
     /**
      * Calculates the L<sub>2</sub> (Euclidean) distance between two points.
      *
      * @param p1 the first point
      * @param p2 the second point
      * @return the L<sub>2</sub> distance between the two points
      */
     public static double distance(int[] p1, int[] p2) {
+      // Fix for NullPointerException: Ensure p1 and p2 are not null.
+      // A NullPointerException would occur if p1 or p2 are null when their length is accessed.
+      // Throwing IllegalArgumentException provides a more informative error for invalid input.
+      if (p1 == null || p2 == null) {
+          throw new IllegalArgumentException("Input points cannot be null.");
+      }
+
+      // Euclidean distance requires points to have the same number of dimensions.
+      // This also prevents an ArrayIndexOutOfBoundsException if p1.length > p2.length.
+      if (p1.length != p2.length) {
+          throw new IllegalArgumentException("Points must have the same dimension.");
+      }
+
       int sum = 0;
       for (int i = 0; i < p1.length; i++) {
           final int dp = p1[i] - p2[i];
           sum += dp * dp;
       }
       return Math.sqrt(sum);
     }
\ No newline at end of file
