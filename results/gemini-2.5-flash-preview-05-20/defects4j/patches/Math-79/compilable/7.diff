diff --git a/tmp/6bf5388f-88ff-4ff7-bf0c-d6144d406c92_buggy.java b/tmp/e3725cc1-d522-465c-978d-e253b3e68dc0_fixed.java
index 6e238e7..d208169 100644
--- a/tmp/6bf5388f-88ff-4ff7-bf0c-d6144d406c92_buggy.java
+++ b/tmp/e3725cc1-d522-465c-978d-e253b3e68dc0_fixed.java
@@ -1,15 +1,30 @@
     /**
      * Calculates the L<sub>2</sub> (Euclidean) distance between two points.
      *
      * @param p1 the first point
      * @param p2 the second point
      * @return the L<sub>2</sub> distance between the two points
      */
     public static double distance(int[] p1, int[] p2) {
+      // Fix: Add null checks for input points.
+      // A NullPointerException indicates that one of the input arrays was null.
+      // Throwing an IllegalArgumentException is appropriate for invalid input arguments.
+      if (p1 == null || p2 == null) {
+          throw new IllegalArgumentException("Points cannot be null.");
+      }
+
+      // The original code assumes p1 and p2 have the same length.
+      // If their lengths differ, an ArrayIndexOutOfBoundsException would occur,
+      // but the current reported issue is NullPointerException.
+      // For full robustness, one might add a length check here as well:
+      // if (p1.length != p2.length) {
+      //     throw new IllegalArgumentException("Points must have the same dimension.");
+      // }
+
       int sum = 0;
       for (int i = 0; i < p1.length; i++) {
           final int dp = p1[i] - p2[i];
           sum += dp * dp;
       }
       return Math.sqrt(sum);
     }
\ No newline at end of file
