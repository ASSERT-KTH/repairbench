diff --git a/tmp/c2d9f9e5-d7b1-48d0-9043-d63c5b00393d_buggy.java b/tmp/150c46c4-3c2e-40ec-bad4-09337cc2455b_fixed.java
index 6e238e7..79b841b 100644
--- a/tmp/c2d9f9e5-d7b1-48d0-9043-d63c5b00393d_buggy.java
+++ b/tmp/150c46c4-3c2e-40ec-bad4-09337cc2455b_fixed.java
@@ -1,15 +1,35 @@
     /**
      * Calculates the L<sub>2</sub> (Euclidean) distance between two points.
      *
      * @param p1 the first point
      * @param p2 the second point
      * @return the L<sub>2</sub> distance between the two points
      */
     public static double distance(int[] p1, int[] p2) {
+      // MATH-305: NullPointerException can occur if one or both points are null.
+      // This can happen, for example, if a cluster becomes empty and its centroid
+      // is implicitly set to null by the clustering algorithm.
+
+      // If both points are null, their "distance" is considered 0.
+      if (p1 == null && p2 == null) {
+          return 0.0;
+      }
+      // If one point is null and the other is not, their distance is considered infinite.
+      if (p1 == null || p2 == null) {
+          return Double.POSITIVE_INFINITY;
+      }
+
+      // At this point, both p1 and p2 are guaranteed to be non-null.
+      // The original code implicitly assumes p1.length == p2.length.
+      // If their lengths differ, an ArrayIndexOutOfBoundsException would occur.
+      // However, the reported issue is NullPointerException.
+      // In clustering contexts, points typically have consistent dimensions.
+      // No explicit check for length mismatch is added here, as it's not the cause of the reported NPE.
+
       int sum = 0;
       for (int i = 0; i < p1.length; i++) {
           final int dp = p1[i] - p2[i];
           sum += dp * dp;
       }
       return Math.sqrt(sum);
     }
\ No newline at end of file
