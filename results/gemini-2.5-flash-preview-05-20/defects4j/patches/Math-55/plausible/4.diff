diff --git a/tmp/3d75e4b5-c79d-4f67-aa4c-efbf2e35111f_buggy.java b/tmp/e86c5fca-9f0a-4f28-be22-1255c37f4650_fixed.java
index 1478ee1..ecaf7b9 100644
--- a/tmp/3d75e4b5-c79d-4f67-aa4c-efbf2e35111f_buggy.java
+++ b/tmp/e86c5fca-9f0a-4f28-be22-1255c37f4650_fixed.java
@@ -1,24 +1,46 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Handle zero vectors explicitly.
+      // The cross product of any vector with a zero vector is the zero vector.
+      // Using getNormSq() is robust for checking if a vector is zero (norm squared is zero).
+      // This avoids potential issues if getNorm() returns a subnormal number or for exponent calculation.
+      if (v1.getNormSq() == 0.0 || v2.getNormSq() == 0.0) {
+          return new Vector3D(0.0, 0.0, 0.0);
+      }
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // We reduce cancellation errors by preconditioning, as described by Kahan.
+      // The core idea is to replace v1 with v3 = v1 - rho * v2, where rho is chosen
+      // to make v3 as small as possible, thereby reducing cancellation in the cross product calculation.
+      // The identity v1 ^ v2 = (v1 - rho * v2) ^ v2 = v3 ^ v2 holds true because
+      // (rho * v2) is parallel to v2, so (rho * v2) ^ v2 is the zero vector.
 
+      // As per Kahan's method and the comments in the original code:
+      // "compute rho as an 8 bits approximation of v1.v2 / v2.v2"
+      // This implies rho should be a power of 2 (i.e., 2^k) to ensure that the
+      // multiplication `rho * v2` is computed exactly without floating point error.
+      // The exponent 'k' is chosen such that `rho * ||v2||` is approximately `||v1||`.
+      // A common way to achieve this is by setting k = getExponent(v1.getNorm()) - getExponent(v2.getNorm()).
+      // This ensures that `rho * v2` has components of similar magnitude to `v1`.
+      int k = org.apache.commons.math.util.FastMath.getExponent(v1.getNorm()) - org.apache.commons.math.util.FastMath.getExponent(v2.getNorm());
+      double rho = org.apache.commons.math.util.FastMath.scalb(1.0, k);
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute v3 = v1 - rho * v2 component-wise.
+      // Since rho is a power of 2, the products `rho * v2.getX()`, etc., are exact.
+      // This makes the subsequent subtractions (`v1.getX() - (rho * v2.getX())`)
+      // less prone to cancellation if `v1` and `rho * v2` are not very close.
+      double v3x = v1.getX() - rho * v2.getX();
+      double v3y = v1.getY() - rho * v2.getY();
+      double v3z = v1.getZ() - rho * v2.getZ();
 
+      // Compute the cross product using v3 and v2.
+      // This avoids cancellation errors that occur when the original components
+      // (v1.x * v2.y) and (v1.y * v2.x) are large and nearly equal, but their difference is small.
+      return new Vector3D(v3y * v2.getZ() - v3z * v2.getY(),
+                          v3z * v2.getX() - v3x * v2.getZ(),
+                          v3x * v2.getY() - v3y * v2.getX());
   }
\ No newline at end of file
