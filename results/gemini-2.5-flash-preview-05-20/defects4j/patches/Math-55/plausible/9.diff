diff --git a/tmp/a44ad4d4-b97d-4b09-802d-c10a22f6cd5b_buggy.java b/tmp/01dcd3ee-7f1a-4843-aea2-ac9921b3096f_fixed.java
index 1478ee1..a54bf2a 100644
--- a/tmp/a44ad4d4-b97d-4b09-802d-c10a22f6cd5b_buggy.java
+++ b/tmp/01dcd3ee-7f1a-4843-aea2-ac9921b3096f_fixed.java
@@ -1,24 +1,60 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // The original code commented about reducing cancellation errors using Kahan's
+      // algorithm, but the actual implementation was a naive cross product.
+      // The test 'testCrossProductCancellation' fails precisely due to catastrophic
+      // cancellation in the naive calculation (e.g., when calculating v1.x * v2.y - v1.y * v2.x)
+      // for inputs where components are very large/small, leading to intermediate
+      // products being rounded to identical values.
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // To fix this, we employ a robust floating-point technique, specifically the
+      // "two-product" algorithm, which computes the exact product of two doubles
+      // as a sum of two doubles (a main product and an error term).
+      // This allows for accurate subtraction of terms that would otherwise cancel
+      // each other out completely due to standard double precision limitations.
+      // This approach is derived from algorithms by Knuth and is used in older
+      // versions of Apache Commons Math for robust computations.
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Define an internal helper class for TwoProduct, mirroring MathUtils.twoProduct
+      // from Apache Commons Math. This avoids external dependencies.
+      final class TwoProduct {
+          public double p; // product (a * b)
+          public double e; // error term for (a * b) - p
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+          public TwoProduct(final double a, final double b) {
+              p = a * b;
+              // Compute error term using Dekker's method (adapted for 64-bit doubles)
+              // This splits 'a' and 'b' into high and low parts to capture the lost bits
+              // during the initial multiplication 'a * b'.
+              // 0xFFFFFFFFL << 32 isolates the high 32 bits (including exponent and sign)
+              // assuming a standard IEEE 754 double representation.
+              final double aHigh = Double.longBitsToDouble(Double.doubleToLongBits(a) & (0xFFFFFFFFL << 32));
+              final double bHigh = Double.longBitsToDouble(Double.doubleToLongBits(b) & (0xFFFFFFFFL << 32));
+              final double aLow = a - aHigh;
+              final double bLow = b - bHigh;
+              e = (((aHigh * bLow) + (aLow * bHigh)) + (aLow * bLow)) - (p - (aHigh * bHigh));
+          }
+      }
+
+      // Calculate x component: v1.y * v2.z - v1.z * v2.y
+      final TwoProduct pY1Z2 = new TwoProduct(v1.y, v2.z);
+      final TwoProduct pZ1Y2 = new TwoProduct(v1.z, v2.y);
+      final double x = pY1Z2.p - pZ1Y2.p + (pY1Z2.e - pZ1Y2.e);
 
+      // Calculate y component: v1.z * v2.x - v1.x * v2.z
+      final TwoProduct pZ1X2 = new TwoProduct(v1.z, v2.x);
+      final TwoProduct pX1Z2 = new TwoProduct(v1.x, v2.z);
+      final double y = pZ1X2.p - pX1Z2.p + (pZ1X2.e - pX1Z2.e);
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Calculate z component: v1.x * v2.y - v1.y * v2.x
+      final TwoProduct pX1Y2 = new TwoProduct(v1.x, v2.y);
+      final TwoProduct pY1X2 = new TwoProduct(v1.y, v2.x);
+      final double z = pX1Y2.p - pY1X2.p + (pX1Y2.e - pY1X2.e);
 
+      return new Vector3D(x, y, z);
   }
\ No newline at end of file
