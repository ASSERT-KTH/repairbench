diff --git a/tmp/a6dc62b4-604c-4325-b001-972c5585baf1_buggy.java b/tmp/163edf03-644c-4eb6-bf5d-fd32a6b8d7ad_fixed.java
index 1478ee1..67c2525 100644
--- a/tmp/a6dc62b4-604c-4325-b001-972c5585baf1_buggy.java
+++ b/tmp/163edf03-644c-4eb6-bf5d-fd32a6b8d7ad_fixed.java
@@ -1,24 +1,54 @@
+import org.apache.commons.math.util.FastMath; // Assuming FastMath is available and used for math functions
+
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
+    // Kahan's algorithm for robust cross product
+    // See: http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // We reduce cancellation errors by preconditioning:
     // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // v3 without loss of precision. Then v1 ^ v2 = v3 ^ v2.
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    // 1. Handle zero vectors explicitly.
+    // If either vector is a zero vector, their cross product is the zero vector.
+    // Using normSq() is more robust than checking against 0.0 directly for floating point numbers
+    // and avoids a square root calculation.
+    if (v1.getNormSq() == 0.0 || v2.getNormSq() == 0.0) {
+        return new Vector3D(0, 0, 0);
+    }
+
+    // 2. Compute rho as an approximation of v1.v2 / v2.v2.
+    // The dotProduct methods are assumed to be sufficient for this approximation
+    // within the context of this specific robust algorithm.
+    final double dotV1V2 = v1.dotProduct(v2);
+    final double dotV2V2 = v2.dotProduct(v2);
 
+    // If dotV2V2 is very small (v2 is effectively zero after potential scaling,
+    // though this should ideally be caught by the initial zero check),
+    // handle it to prevent division by zero or large 'rho' from numerical noise.
+    // However, the initial check covers the strict zero case. If dotV2V2 is non-zero
+    // but tiny due to floating point error, it implies v2 is very close to zero,
+    // and a robust algorithm would yield a zero cross product or something close.
+    // For this specific Kahan variant, proceed as rho will naturally be huge,
+    // which the v3 transformation is designed to handle.
+    final double rho = dotV1V2 / dotV2V2;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // 3. Compute v3 = v1 - rho * v2.
+    // This step reduces the component of v1 parallel to v2, making v3 more orthogonal to v2.
+    // The "without loss of precision" implies that the principle of this transformation
+    // leads to a more accurate final result, rather than requiring compensated arithmetic
+    // for these intermediate subtractions themselves (which would be much more complex).
+    final double v3x = v1.getX() - rho * v2.getX();
+    final double v3y = v1.getY() - rho * v2.getY();
+    final double v3z = v1.getZ() - rho * v2.getZ();
 
+    // 4. Compute the cross product from v3 and v2 instead of v1 and v2.
+    // This final calculation is numerically more stable due to v3's orthogonality to v2.
+    return new Vector3D(v3y * v2.getZ() - v3z * v2.getY(),
+                        v3z * v2.getX() - v3x * v2.getZ(),
+                        v3x * v2.getY() - v3y * v2.getX());
 }
