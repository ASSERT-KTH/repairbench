diff --git a/tmp/67549ab4-14a9-437f-89fd-5e5bd8c1f99a_buggy.java b/tmp/2973bbfc-f0c4-4f0b-91df-21d2cc98246d_fixed.java
index 1478ee1..2731cf0 100644
--- a/tmp/67549ab4-14a9-437f-89fd-5e5bd8c1f99a_buggy.java
+++ b/tmp/2973bbfc-f0c4-4f0b-91df-21d2cc98246d_fixed.java
@@ -1,24 +1,40 @@
+import org.apache.commons.math.util.MathArrays;
+
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+      // The original implementation directly computed the cross product components.
+      // This can lead to catastrophic cancellation errors when the products
+      // (e.g., v1.x * v2.y) are large and nearly equal, but their difference is small.
+      // The test case `testCrossProductCancellation` demonstrates this failure
+      // where the Z-component is expected to be 1.0 but computes to 0.0.
 
+      // A robust way to compute expressions of the form a*b - c*d (which are the components
+      // of a cross product) is to use an algorithm that maintains higher precision,
+      // such as one based on fused multiply-add (FMA) or error-compensated summation.
+      // In Apache Commons Math, `MathArrays.linearCombination` provides this robustness.
+      // The expression a*b - c*d can be rewritten as a*b + (-c)*d, allowing the use of
+      // MathArrays.linearCombination(a, b, -c, d).
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      final double x1 = v1.x;
+      final double y1 = v1.y;
+      final double z1 = v1.z;
+      final double x2 = v2.x;
+      final double y2 = v2.y;
+      final double z2 = v2.z;
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Compute each component using MathArrays.linearCombination for improved precision
+      // For the X component: v1.y * v2.z - v1.z * v2.y
+      final double crossX = MathArrays.linearCombination(y1, z2, -z1, y2);
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // For the Y component: v1.z * v2.x - v1.x * v2.z
+      final double crossY = MathArrays.linearCombination(z1, x2, -x1, z2);
 
+      // For the Z component: v1.x * v2.y - v1.y * v2.x
+      final double crossZ = MathArrays.linearCombination(x1, y2, -y1, x2);
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+      return new Vector3D(crossX, crossY, crossZ);
   }
