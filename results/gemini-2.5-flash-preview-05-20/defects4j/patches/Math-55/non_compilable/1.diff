diff --git a/tmp/1d301d81-4656-4b11-8a58-39a8d471756e_buggy.java b/tmp/fe4ece51-1119-4bf8-92b3-bfc451f972c7_fixed.java
index 1478ee1..49181dd 100644
--- a/tmp/1d301d81-4656-4b11-8a58-39a8d471756e_buggy.java
+++ b/tmp/fe4ece51-1119-4bf8-92b3-bfc451f972c7_fixed.java
@@ -1,24 +1,66 @@
+import org.apache.commons.math.util.FastMath;
+
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+      // This implementation uses Kahan's cross product for improved numerical accuracy,
+      // especially when vectors are nearly parallel. The traditional formula
+      // suffers from catastrophic cancellation errors in such cases.
+      //
+      // The core idea is to compute (v1 - rho * v2) x v2, which is mathematically
+      // equivalent to v1 x v2. Here, rho is chosen in a way that allows the
+      // (v1 - rho * v2) term to be computed with high relative precision.
+      // Specifically, we pick a coordinate of v2 with the largest absolute value
+      // to serve as a stable divisor.
 
+      final double x1 = v1.x;
+      final double y1 = v1.y;
+      final double z1 = v1.z;
+      final double x2 = v2.x;
+      final double y2 = v2.y;
+      final double z2 = v2.z;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+      // Determine which component of v2 is largest in magnitude.
+      // This component will be used as the scaling factor to form 'rho'
+      // in a way that minimizes precision loss.
+      if (FastMath.abs(x2) >= FastMath.abs(y2) && FastMath.abs(x2) >= FastMath.abs(z2)) {
+          // If x2 is the largest component of v2, compute intermediate values
+          // based on v3 = v1 - (x1/x2) * v2. The x-component of v3 will be zero.
+          final double ry1 = y1 - (x1 / x2) * y2;
+          final double rz1 = z1 - (x1 / x2) * z2;
+          // The cross product (v3 x v2) then becomes:
+          // X component: v3.y * v2.z - v3.z * v2.y = ry1 * z2 - rz1 * y2
+          // Y component: v3.z * v2.x - v3.x * v2.z = rz1 * x2 - 0 * z2 = rz1 * x2
+          // Z component: v3.x * v2.y - v3.y * v2.x = 0 * y2 - ry1 * x2 = -ry1 * x2
+          return new Vector3D(ry1 * z2 - rz1 * y2,
+                              rz1 * x2,
+                              -ry1 * x2);
+      } else if (FastMath.abs(y2) >= FastMath.abs(x2) && FastMath.abs(y2) >= FastMath.abs(z2)) {
+          // If y2 is the largest component of v2, compute intermediate values
+          // based on v3 = v1 - (y1/y2) * v2. The y-component of v3 will be zero.
+          final double rx1 = x1 - (y1 / y2) * x2;
+          final double rz1 = z1 - (y1 / y2) * z2;
+          // The cross product (v3 x v2) then becomes:
+          // X component: v3.y * v2.z - v3.z * v2.y = 0 * z2 - rz1 * y2 = -rz1 * y2
+          // Y component: v3.z * v2.x - v3.x * v2.z = rz1 * x2 - rx1 * z2
+          // Z component: v3.x * v2.y - v3.y * v2.x = rx1 * y2 - 0 * x2 = rx1 * y2
+          return new Vector3D(-rz1 * y2,
+                              rz1 * x2 - rx1 * z2,
+                              rx1 * y2);
+      } else {
+          // If z2 is the largest component of v2, compute intermediate values
+          // based on v3 = v1 - (z1/z2) * v2. The z-component of v3 will be zero.
+          final double rx1 = x1 - (z1 / z2) * x2;
+          final double ry1 = y1 - (z1 / z2) * z2;
+          // The cross product (v3 x v2) then becomes:
+          // X component: v3.y * v2.z - v3.z * v2.y = ry1 * z2 - 0 * y2 = ry1 * z2
+          // Y component: v3.z * v2.x - v3.x * v2.z = 0 * x2 - rx1 * z2 = -rx1 * z2
+          // Z component: v3.x * v2.y - v3.y * v2.x = rx1 * y2 - ry1 * x2
+          return new Vector3D(ry1 * z2,
+                              -rx1 * z2,
+                              rx1 * y2 - ry1 * x2);
+      }
   }
\ No newline at end of file
