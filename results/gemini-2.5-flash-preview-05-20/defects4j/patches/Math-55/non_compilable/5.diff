diff --git a/tmp/a2d26760-786b-430e-b5bb-016e191ff54b_buggy.java b/tmp/1a44e567-a50f-4c19-b27b-d4a7d5a74a62_fixed.java
index 1478ee1..f16a2bb 100644
--- a/tmp/a2d26760-786b-430e-b5bb-016e191ff54b_buggy.java
+++ b/tmp/1a44e567-a50f-4c19-b27b-d4a7d5a74a62_fixed.java
@@ -1,24 +1,70 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
+import org.apache.commons.math.util.FastMath; // Assuming FastMath is available in the environment
+
+public class Vector3D { // Class header implicitly assumed as only method is provided
+
+    // Assuming Vector3D has public final double x, y, z fields, or equivalent getters
+    public final double x;
+    public final double y;
+    public final double z;
+
+    public Vector3D(double x, double y, double z) {
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
     public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+        // The original code was a direct, numerically unstable cross product.
+        // This fix implements the Kahan-style preconditioning described in the comments,
+        // which is crucial for reducing cancellation errors when vectors are nearly parallel
+        // or have components of vastly different magnitudes (as in the cancellation test).
 
+        double x1 = v1.x;
+        double y1 = v1.y;
+        double z1 = v1.z;
+        double x2 = v2.x;
+        double y2 = v2.y;
+        double z2 = v2.z;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+        // Rescale both vectors without losing precision.
+        // This ensures their norms are of the same order of magnitude before
+        // computing the dot products for rho, preventing potential overflows or underflows.
+        double s  = FastMath.max(FastMath.max(FastMath.abs(x1), FastMath.abs(y1)), FastMath.abs(z1));
+        s = FastMath.max(s, FastMath.max(FastMath.max(FastMath.abs(x2), FastMath.abs(y2)), FastMath.abs(z2)));
 
-      // we reduce cancellation errors by preconditioning,
+        if (s > 1.0) {
+            x1 /= s; y1 /= s; z1 /= s;
+            x2 /= s; y2 /= s; z2 /= s;
+        }
+
+        // We reduce cancellation errors by preconditioning,
         // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
         // v3 without loss of precision. See Kahan lecture
         // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
         // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+        // Compute rho as an 8-bit approximation of v1.v2 / v2.v2.
+        // This specific bit-masking is part of the Kahan's algorithm for robustness.
+        final double b1 = x1 * x2 + y1 * y2 + z1 * z2; // Scaled dot product v1.v2
+        final double b2 = x2 * x2 + y2 * y2 + z2 * z2; // Scaled squared norm of v2
+        final double rho = b1 / b2;
 
+        // Truncate rho to 8 bits of mantissa precision.
+        // This ensures that r * v2_scaled can be computed accurately
+        // relative to v1_scaled, making the subtraction v1_scaled - r * v2_scaled stable.
+        final double r = Double.longBitsToDouble((Double.doubleToLongBits(rho) & 0xFFFFFFF800000000L));
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+        // Compute v3 = v1_scaled - r * v2_scaled.
+        // This intermediate vector's components are typically much smaller,
+        // reducing subsequent cancellation issues.
+        final double x3 = x1 - r * x2;
+        final double y3 = y1 - r * y2;
+        final double z3 = z1 - r * z2;
 
+        // Compute the cross product from v3 and v2_scaled instead of v1_scaled and v2_scaled.
+        // Mathematically, v1 ^ v2 = (v3 + r*v2) ^ v2 = v3 ^ v2.
+        // Numerically, this calculation is more accurate for near-parallel vectors.
+        // Finally, multiply by the original scaling factor 's' to restore the correct magnitude.
+        return new Vector3D((y3 * z2 - z3 * y2) * s, (z3 * x2 - x3 * z2) * s, (x3 * y2 - y3 * x2) * s);
+    }
 }
\ No newline at end of file
