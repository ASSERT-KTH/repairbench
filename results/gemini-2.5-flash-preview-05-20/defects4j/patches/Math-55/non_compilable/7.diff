diff --git a/tmp/9d28d948-11ca-4d3e-860c-68422c52462d_buggy.java b/tmp/eb529031-b376-445a-9236-37be0b9f5cfd_fixed.java
index 1478ee1..8388ca0 100644
--- a/tmp/9d28d948-11ca-4d3e-860c-68422c52462d_buggy.java
+++ b/tmp/eb529031-b376-445a-9236-37be0b9f5cfd_fixed.java
@@ -1,24 +1,59 @@
+import org.apache.commons.math.geometry.Vector3D; // Assuming this import for Vector3D class
+
+public class Vector3DFix {
+
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // The original code directly computes the cross product, which suffers
+      // from cancellation errors when v1 and v2 are nearly collinear and have large magnitudes.
+      // The comments indicate the intention to use a preconditioning method based on Kahan's work.
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // We replace v1 by v3 = v1 - rho * v2, where rho = (v1 . v2) / (v2 . v2).
+      // Then, v1 ^ v2 = (v3 + rho * v2) ^ v2 = v3 ^ v2 + (rho * v2) ^ v2 = v3 ^ v2 + 0 = v3 ^ v2.
+      // This transformation helps because v3 will be a small vector when v1 and v2 are nearly
+      // parallel, leading to more accurate computations of its cross product with v2.
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      final double x1 = v1.getX();
+      final double y1 = v1.getY();
+      final double z1 = v1.getZ();
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      final double x2 = v2.getX();
+      final double y2 = v2.getY();
+      final double z2 = v2.getZ();
 
+      // Calculate dot product (v1 . v2)
+      final double dotProductV1V2 = x1 * x2 + y1 * y2 + z1 * z2;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Calculate squared norm of v2 (v2 . v2)
+      final double v2NormSq = x2 * x2 + y2 * y2 + z2 * z2;
+
+      // Handle the case where v2 is a zero vector (or extremely close to it)
+      // If v2 is zero, the cross product is the zero vector.
+      if (v2NormSq == 0.0) {
+          return new Vector3D(0.0, 0.0, 0.0);
+      }
+
+      // Compute rho
+      final double rho = dotProductV1V2 / v2NormSq;
+
+      // Compute components of v3 = v1 - rho * v2
+      // These components (v3x, v3y, v3z) will be small if v1 and v2 are nearly parallel.
+      final double v3x = x1 - rho * x2;
+      final double v3y = y1 - rho * y2;
+      final double v3z = z1 - rho * z2;
+
+      // Compute the cross product of v3 and v2
+      // The standard formula is applied to v3 and v2.
+      // For instance, the X component is v3.y * v2.z - v3.z * v2.y
+      // This avoids cancellation errors by multiplying a small number (from v3) with a large number (from v2).
+      return new Vector3D(v3y * z2 - v3z * y2,
+                          v3z * x2 - v3x * z2,
+                          v3x * y2 - v3y * x2);
+  }
 
 }
\ No newline at end of file
