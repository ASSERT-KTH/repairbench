diff --git a/tmp/43b5e96c-1906-430c-9a8d-57decd5d4b8f_buggy.java b/tmp/9a542f54-440b-4fcc-aa23-b9bd58b2cb69_fixed.java
index e087f95..fd6961e 100644
--- a/tmp/43b5e96c-1906-430c-9a8d-57decd5d4b8f_buggy.java
+++ b/tmp/9a542f54-440b-4fcc-aa23-b9bd58b2cb69_fixed.java
@@ -1,53 +1,107 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // Enforce the minimum length requirement
+        if (length < 2) {
+            throw new IllegalArgumentException("length must be at least 2 bytes");
+        }
+
+        // Special case: if the buffer segment contains only NULs, return 0L
+        boolean isAllNuls = true;
+        for (int i = offset; i < offset + length; i++) {
+            if (buffer[i] != 0) {
+                isAllNuls = false;
+                break;
+            }
+        }
+        if (isAllNuls) {
+            return 0L;
+        }
+
         long result = 0;
-        boolean stillPadding = true;
         int end = offset + length;
-        int     start = offset;
+        boolean stillSkippingLeadingSpaces = true; // True if we are still skipping leading space characters.
+        boolean foundActualDigit = false; // True if we have encountered at least one valid octal digit (0-7).
 
-        for (int i = start; i < end; i++){
+        for (int i = offset; i < end; i++){
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
             if (currentByte == (byte) ' ') {
+                if (stillSkippingLeadingSpaces) {
+                    continue; // Skip leading spaces
+                }
+                // If we are not skipping leading spaces, this space must be a trailing terminator.
+                // All subsequent characters must also be space or NUL.
+                for (int j = i; j < end; j++) {
+                    if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, j, buffer[j]));
+                    }
+                }
+                // Valid trailing space found, stop parsing.
                 break;
             }
+
+            // Once a non-space character is encountered, we are no longer skipping leading spaces.
+            stillSkippingLeadingSpaces = false;
+
+            if (currentByte == 0) {
+                // NUL is a valid terminator.
+                // If we haven't found any actual digits yet, and it's not an "all NULs" field (already handled),
+                // then this NUL byte is an invalid character in this position (e.g., embedded NUL).
+                // Example: `byte[]{0,0,' '}` or `{' ',0,0,0}`.
+                if (!foundActualDigit) {
+                    throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, i, currentByte));
                 }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+                // If we have found actual digits, this NUL is a valid trailing terminator.
+                // All subsequent characters must also be NUL or space.
+                for (int j = i; j < end; j++) {
+                    if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, j, buffer[j]));
+                    }
+                }
+                // Valid trailing NUL found, stop parsing.
+                break;
+            }
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+            // If we are here, currentByte is not a space or NUL. It must be an octal digit.
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
+            
+            // This is a valid octal digit.
+            foundActualDigit = true; 
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+
+        // If the loop completes (i.e., `i == end`) without hitting a `break` statement:
+        // This means the buffer ended without a required trailing space or NUL.
+        // This is an error if any actual digits were parsed.
+        // If no digits were found (e.g., "   " or "000"), `result` will be 0, which is correct.
+        if (foundActualDigit) {
+            // No trailing NUL or space found, which is a requirement if actual digits were present.
+            throw new IllegalArgumentException(
+                "No trailing NUL or space found. Buffer: " +
+                exceptionMessage(buffer, offset, length)); // Use offset here for general message
         }
 
         return result;
     }
\ No newline at end of file
