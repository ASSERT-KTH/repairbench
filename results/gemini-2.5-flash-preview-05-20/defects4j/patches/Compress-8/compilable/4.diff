diff --git a/tmp/4a421232-d4fb-4f2e-84d4-30796d82fce4_buggy.java b/tmp/1958f90f-f7f1-48d2-9378-5f5a9c860272_fixed.java
index e087f95..fa01d69 100644
--- a/tmp/4a421232-d4fb-4f2e-84d4-30796d82fce4_buggy.java
+++ b/tmp/1958f90f-f7f1-48d2-9378-5f5a9c860272_fixed.java
@@ -1,53 +1,111 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // As per Javadoc: "length ... must be at least 2 bytes."
+        if (length < 2) {
+            throw new IllegalArgumentException("length must be at least 2 bytes");
+        }
+
         long result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
+        final int limit = offset + length;
+        int currentByteIdx = offset; // Current position in the buffer
+        int firstDigitOffset = offset; // Tracks the offset of the first actual digit (for error messages)
+        boolean hasParsedDigits = false; // Becomes true once a valid octal digit has been processed
 
-        for (int i = start; i < end; i++){
+        // Phase 1: Skip leading spaces
+        while (currentByteIdx < limit && buffer[currentByteIdx] == (byte) ' ') {
+            currentByteIdx++;
+            firstDigitOffset++; // Update firstDigitOffset to reflect skipped leading spaces
+        }
+
+        // Phase 2: Process digits and trailers
+        for (int i = currentByteIdx; i < limit; i++){
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
+            if (currentByte == (byte) ' ' || currentByte == 0) {
+                // This character is either a space or a NUL.
+                // It can be a valid trailer, or part of an "all NULs" field, or an embedded invalid character.
+
+                if (!hasParsedDigits) {
+                    // We are still in the "leading" part of the field (after initial spaces, but before digits).
+                    // If it's a space, it's an embedded space before any digits, which is invalid.
                     if (currentByte == (byte) ' ') {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, firstDigitOffset, currentByte));
+                    }
+                    // If currentByte is NUL and no digits have been seen yet, check if the *entire remaining field*
+                    // (from this NUL onwards) consists only of NULs. If so, it's an "all NULs" field.
+                    // Otherwise, it's an embedded NUL which is invalid because there are non-NULs/spaces after it.
+                    boolean allTrailingNuls = true;
+                    for (int j = i; j < limit; j++) {
+                        if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+                            allTrailingNuls = false;
                             break;
                         }
                     }
+                    if (allTrailingNuls) {
+                        return 0L; // Field is all NULs (or NULs with trailing spaces), as per Javadoc
+                    } else {
+                        // Embedded NUL before digits (e.g. " 0 123 ") or mixed field. Invalid.
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, firstDigitOffset, currentByte));
+                    }
+                } else {
+                    // hasParsedDigits is true. This NUL or space is a potential trailer character.
+                    // All *remaining* bytes (from the character after this one to the end of the field)
+                    // must also be NULs or spaces.
+                    for (int j = i + 1; j < limit; j++) {
+                        if (buffer[j] != (byte) ' ' && buffer[j] != 0) {
+                            throw new IllegalArgumentException(
+                                    exceptionMessage(buffer, offset, length, firstDigitOffset, buffer[j]));
+                        }
+                    }
+                    // Valid trailer(s) found, so we have finished parsing the number.
+                    return result;
+                }
+            }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
+            // If we reach here, currentByte is neither a space nor a NUL.
+            // It must be an octal digit ('0'-'7') or an invalid character.
+            // Check if it's within the valid octal digit range.
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, firstDigitOffset, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
+
+            // Valid octal digit found. Update result.
+            hasParsedDigits = true; // Mark that we've processed at least one digit
+            result = (result << 3) + (currentByte - '0'); // Convert from ASCII and add to result
+        }
+
+        // If the loop completes without returning, it means we iterated through all `length` bytes.
+        // This implies that no proper trailing NUL or space was found, or the last character was a digit.
+        // As per Javadoc: "The buffer must contain a trailing space or NUL".
+        // This condition is violated if `hasParsedDigits` is true (meaning we parsed a number)
+        // but didn't encounter a valid trailer that caused an early return.
+        if (hasParsedDigits) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, firstDigitOffset, (byte)0)); // Use 0 to signify missing trailer
         }
 
+        // If hasParsedDigits is false, it means the field was entirely composed of leading spaces
+        // (and no NULs were encountered to trigger the "all NULs" return).
+        // In this case, `result` will be 0, which is the correct interpretation for an empty numeric field.
         return result;
     }
\ No newline at end of file
