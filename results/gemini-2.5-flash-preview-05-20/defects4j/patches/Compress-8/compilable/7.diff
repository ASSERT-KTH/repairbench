diff --git a/tmp/540068de-baa0-4aec-82be-bd2ffee7a0cf_buggy.java b/tmp/97489d6c-0183-47ca-a409-a51af38dd3a2_fixed.java
index e087f95..2b2a154 100644
--- a/tmp/540068de-baa0-4aec-82be-bd2ffee7a0cf_buggy.java
+++ b/tmp/97489d6c-0183-47ca-a409-a51af38dd3a2_fixed.java
@@ -1,53 +1,81 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // According to Javadoc, length must be at least 2 bytes.
+        if (length < 2) {
+            throw new IllegalArgumentException("Length " + length + " must be at least 2 bytes");
+        }
+
+        // Check if the entire buffer segment consists of NULs.
+        // As per Javadoc: "The input buffer is allowed to contain all NULs,
+        // in which case the method returns 0L".
+        boolean allNULs = true;
+        for (int i = offset; i < offset + length; i++) {
+            if (buffer[i] != 0) {
+                allNULs = false;
+                break;
+            }
+        }
+        if (allNULs) {
+            return 0L;
+        }
+
+        // The buffer must contain a trailing space or NUL. This means the last byte must be ' ' or 0.
+        // This check is performed only if it's not an "all NULs" string.
+        final int end = offset + length;
+        final byte trailingByte = buffer[end - 1];
+        if (trailingByte != (byte) ' ' && trailingByte != 0) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, end - 1, trailingByte));
+        }
+
         long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
+        boolean stillPadding = true; // True if we are still skipping leading spaces or ASCII '0's.
 
-        for (int i = start; i < end; i++){
+        // Iterate up to, but not including, the trailing byte (end - 1).
+        // The last byte is already checked as the trailer.
+        for (int i = offset; i < end - 1; i++){
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
-                   continue;
-            }
                 if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+                    // Skip leading spaces
+                    continue;
+                } else if (currentByte == '0') {
+                    // Skip leading ASCII '0's. These are part of padding.
+                    // This explicitly distinguishes ASCII '0' (0x30) from NUL (0x00).
+                    continue;
+                } else {
+                    // First non-padding character found, it must be an octal digit.
                     stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+                }
+            }
+
+            // If not stillPadding (meaning we've found non-space/non-ASCII '0' characters)
+            // or if `currentByte` is not a leading space/ASCII '0', it must be an octal digit.
+            // Any NUL (0x00), space (0x20, if not leading), or other non-octal character
+            // will fall into this check and throw an IllegalArgumentException.
             if (currentByte < '0' || currentByte > '7'){
                  throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
+
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
