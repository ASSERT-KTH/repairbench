diff --git a/tmp/18d77d0c-5fd1-4d40-8535-bc3e0d99a550_buggy.java b/tmp/ba408f3c-b095-4dbb-aa06-19073ca77429_fixed.java
index e087f95..3f66603 100644
--- a/tmp/18d77d0c-5fd1-4d40-8535-bc3e0d99a550_buggy.java
+++ b/tmp/ba408f3c-b095-4dbb-aa06-19073ca77429_fixed.java
@@ -1,53 +1,106 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // [Fix 1]: Enforce minimum length as per Javadoc
+        if (length < 2) {
+            throw new IllegalArgumentException("length must be at least 2 bytes: " + length);
+        }
+
         long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
         int     start = offset;
+        int     end = offset + length;
 
-        for (int i = start; i < end; i++){
+        // Step 1: Skip leading spaces
+        int current = start;
+        while (current < end && buffer[current] == (byte) ' ') {
+            current++;
+        }
+
+        // Step 2: Handle "all NULs" special case, or an invalid leading NUL
+        // If the first non-space character is a NUL (byte 0), then the *entire remaining segment* must be NULs.
+        // Otherwise, it's an error because NULs are not valid as leading padding or embedded characters unless it's an "all NULs" scenario.
+        if (current < end && buffer[current] == 0) {
+            boolean allNULsFromCurrent = true;
+            for (int i = current; i < end; i++) {
+                if (buffer[i] != 0) {
+                    allNULsFromCurrent = false;
+                    break;
+                }
+            }
+            if (allNULsFromCurrent) {
+                return 0L; // This covers cases like {0,0,0} or { ' ', 0, 0 }
+            } else {
+                // If not all NULs from this point, then this NUL is an invalid embedded character or leading NUL.
+                // This correctly fails byte[]{0,0,' '} and byte[]{' ',0,0,0}
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, current, buffer[current]));
+            }
+        }
+        
+        // At this point, 'current' points to the first non-space, non-NUL character.
+        // Or it points to 'end' if the string was all spaces.
+        // If it was all spaces (e.g. "   "), return 0L.
+        if (current == end) {
+            return 0L;
+        }
+
+        // Step 3: Parse octal digits
+        // `parsedActualDigit` flag ensures that "00" (no trailer) throws, but "00 " returns 0.
+        boolean parsedActualDigit = false; 
+        int lastDigitIdx = -1; // Index of the last character that was an octal digit.
+
+        for (int i = current; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
+            if (currentByte >= '0' && currentByte <= '7') {
+                result = (result << 3) + (currentByte - '0');
+                parsedActualDigit = true;
+                lastDigitIdx = i; // Keep track of the last digit's index
+            } else if (currentByte == (byte) ' ' || currentByte == 0) {
+                // [Fix 4]: Found a space or NUL. This must be the *start of the trailing terminator sequence*.
+                // All remaining characters in the buffer up to 'end' must also be NUL or space.
+                for (int j = i; j < end; j++) {
+                    final byte trailerByte = buffer[j];
+                    if (trailerByte != 0 && trailerByte != (byte) ' ') {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, j, trailerByte));
                     }
                 }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+                return result; // Valid terminator sequence found.
+            } else {
+                // [Fix 4]: Invalid character within the number string (not a digit, not a valid terminator at this position).
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
         }
 
-        return result;
+        // [Fix 3]: If the loop completes, it means no valid terminator (NUL or space) was found.
+        // This implies the entire segment was digits (e.g., "123", "77777777777", "000").
+        // A trailing terminator is required.
+        // '00 ' -> `parsedActualDigit` is true, it finds ' ' and returns 0 correctly.
+        // '000' -> `parsedActualDigit` is true, loop finishes here.
+        if (parsedActualDigit) { // Only throw if actual digits were parsed but no trailer.
+             throw new IllegalArgumentException(
+                 exceptionMessage(buffer, offset, length, lastDigitIdx, buffer[lastDigitIdx]));
+        } else {
+            // This case should be unreachable if 'current == end' check is correct.
+            // But as a fallback for cases like "00" (if length is 2 and no space at end), this might return 0.
+            // If parsedActualDigit is false, it means only leading '0's were skipped or there were no digits at all.
+            // This is equivalent to a missing field, which returns 0L.
+            return 0L;
+        }
     }
\ No newline at end of file
