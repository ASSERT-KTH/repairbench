diff --git a/tmp/b878a1ad-7342-411a-b779-df87f42c7b23_buggy.java b/tmp/65458f33-0a3d-4768-ad09-36967359f6f8_fixed.java
index e087f95..7c75195 100644
--- a/tmp/b878a1ad-7342-411a-b779-df87f42c7b23_buggy.java
+++ b/tmp/65458f33-0a3d-4768-ad09-36967359f6f8_fixed.java
@@ -1,53 +1,85 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // Javadoc: "length ... must be at least 2 bytes."
+        if (length < 2) {
+            throw new IllegalArgumentException("Length " + length + " must be at least 2");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+        // Handle "all NULs" case explicitly first, as it's a special return value for missing fields.
+        boolean allNULs = true;
+        for (int k = offset; k < end; k++) {
+            if (buffer[k] != 0) {
+                allNULs = false;
+                break;
+            }
+        }
+        if (allNULs) {
+            return 0L;
+        }
+
+        // The last byte (at `end - 1`) must be the trailer (space or NUL).
+        // Check this condition before parsing digits to ensure a valid format.
+        final byte trailer = buffer[end - 1];
+        if (trailer != 0 && trailer != (byte) ' ') {
+            // If the last byte is neither NUL nor space, it's an invalid trailer.
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, end - 1, trailer));
+        }
+
+        // Loop through the potential digit characters (excluding the trailer).
+        for (int i = offset; i < end - 1; i++){
             final byte currentByte = buffer[i];
+
+            // Handle NUL characters within the potential digits area.
+            // Since "all NULs" case is handled, any NUL found here (before the trailer)
+            // is an invalid embedded NUL.
             if (currentByte == 0) {
-                break;
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
+            // Handle spaces within the potential digits area.
             if (currentByte == (byte) ' ') {
-                break;
+                if (stillPadding) { // Leading space, ignore
+                    continue;
+                } else { // Embedded space (after digits started), and not the trailer. Invalid.
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, i, currentByte));
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+            // If we reach here, `currentByte` is not NUL and not space, and not the trailer.
+            // It must be a digit or an invalid non-octal character.
+            stillPadding = false; // We've encountered a non-padding character.
 
-            stillPadding = false;
+            // Check for valid octal digits.
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
