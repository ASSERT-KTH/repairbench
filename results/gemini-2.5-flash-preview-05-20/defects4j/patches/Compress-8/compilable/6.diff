diff --git a/tmp/b2ff58f9-b95d-4622-b27c-abbacc47a73a_buggy.java b/tmp/0360b9e4-df9c-4551-a9c4-50c326e2e615_fixed.java
index e087f95..4140e1d 100644
--- a/tmp/b2ff58f9-b95d-4622-b27c-abbacc47a73a_buggy.java
+++ b/tmp/0360b9e4-df9c-4551-a9c4-50c326e2e615_fixed.java
@@ -1,53 +1,92 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // According to Javadoc, length must be at least 2 bytes.
+        // This handles cases like empty array or single-byte array.
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes.");
+        }
+
+        // Special handling for the "all NULs" case as specified in the Javadoc.
+        // This must be checked explicitly to distinguish "000" from e.g. "00\0 ".
+        boolean allNuls = true;
+        for (int i = offset; i < offset + length; i++) {
+            if (buffer[i] != 0) {
+                allNuls = false;
+                break;
+            }
+        }
+        if (allNuls) {
+            return 0L;
+        }
+
         long result = 0;
-        boolean stillPadding = true;
+        boolean stillPadding = true; // True while skipping leading spaces or leading zeroes
         int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+        for (int i = offset; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+            // If a NUL or space is encountered:
+            // 1. If it's a leading NUL and not an "all NULs" string, it's an error.
+            // 2. If it's a leading space, continue skipping.
+            // 3. If it's a NUL or space after digits, it's a terminator. All subsequent bytes must also be terminators.
+            if (currentByte == 0 || currentByte == (byte) ' ') {
+                // If we are still in padding mode:
                 if (stillPadding) {
+                    // Leading NULs are only allowed if the entire buffer is NULs (handled by `allNuls` check).
+                    // If we reach here and `currentByte == 0`, it means it's a leading NUL but not "all NULs", which is an error.
+                    if (currentByte == 0) {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, i, currentByte));
+                    }
+                    // Leading spaces are skipped.
                     continue;
                 }
-                if (currentByte == (byte) ' ') {
-                break;
+
+                // If we are NOT still padding (i.e., we've seen digits),
+                // then this NUL or space indicates the end of the number.
+                // All remaining characters in the specified length must also be NULs or spaces.
+                for (int j = i; j < end; j++) {
+                    if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, j, buffer[j]));
+                    }
                 }
+                return result; // All remaining bytes are valid terminators.
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+            // If we are here, currentByte is not a NUL or space. It must be an octal digit or an invalid character.
+            stillPadding = false; // We are no longer skipping padding.
 
-            stillPadding = false;
+            // Check for valid octal digit ('0' through '7').
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
-        return result;
+        // If the loop completes without returning, it means we reached the `end`
+        // of the specified length without encountering a NUL or space terminator.
+        // According to the Javadoc: "The buffer must contain a trailing space or NUL".
+        // Therefore, if this point is reached, the trailing terminator is missing.
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, end - 1, (byte)0)); // Point to the last byte as the "missing terminator" location
     }
\ No newline at end of file
