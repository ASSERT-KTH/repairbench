diff --git a/tmp/a0438f4d-45ae-4ccf-bcc1-dcf0f1f40a06_buggy.java b/tmp/edee7a10-96f8-493c-a3d2-e5ff7511bf6f_fixed.java
index e087f95..10a64f3 100644
--- a/tmp/a0438f4d-45ae-4ccf-bcc1-dcf0f1f40a06_buggy.java
+++ b/tmp/edee7a10-96f8-493c-a3d2-e5ff7511bf6f_fixed.java
@@ -1,53 +1,114 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // According to Javadoc, length must be at least 2 bytes.
+        if (length < 2) {
+            throw new IllegalArgumentException("length must be at least 2 bytes");
+        }
+
+        // Special case: The input buffer is allowed to contain all NULs,
+        // in which case the method returns 0L. Handle this upfront.
+        boolean allNULs = true;
+        for (int i = offset; i < offset + length; i++) {
+            if (buffer[i] != 0) {
+                allNULs = false;
+                break;
+            }
+        }
+        if (allNULs) {
+            return 0L;
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
         
-        for (int i = start; i < end; i++){
+        int i; // Declare i outside the loop to use its final value for post-loop validation
+
+        for (i = start; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+
+            if (currentByte == 0) { // NUL byte encountered
+                // If a NUL byte is found and the buffer is not entirely NULs,
+                // and we are still in the leading padding phase, it's an invalid format.
+                // This covers cases like " 0..." or "00..." where a NUL appears before digits.
+                // Or "[0,0,' ']" which is not all NULs and has a non-NUL after a NUL.
+                if (stillPadding) {
+                    throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
+                }
+                // If not stillPadding (i.e. digits were processed), then this NUL is a valid terminator.
+                // All remaining characters after this NUL must be NULs to be valid.
+                for (int j = i + 1; j < end; j++) {
+                    if (buffer[j] != 0) {
+                        throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, buffer[j]));
+                    }
+                }
+                break; // Valid NUL termination, exit parsing loop
             }
 
-        // Skip leading spaces
+            // Skip leading spaces or '0's (padding)
             if (currentByte == (byte) ' ' || currentByte == '0') {
                 if (stillPadding) {
-                   continue;
+                    continue; // Still skipping leading padding
                 }
+                // If not stillPadding, currentByte is not a leading character.
+                // If it's a space, it must be the trailing space.
                 if (currentByte == (byte) ' ') {
-                break;
+                    // All remaining characters after this trailing space must be NULs.
+                    for (int j = i + 1; j < end; j++) {
+                        if (buffer[j] != 0) { // Only NULs are allowed after the first trailing space.
+                            throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, start, buffer[j]));
                         }
                     }
+                    break; // Valid space termination, exit parsing loop
+                }
+                // If currentByte is '0' here and not stillPadding, it means it's an octal digit.
+                // Fall through to process it.
+            }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
+            // If we reach here, it must be an octal digit from '1' to '7' or a '0' that's part of the number.
+            stillPadding = false; // No longer in padding phase
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
+        // After the loop, validate if a trailing space or NUL was present as required by Javadoc.
+        // This check is for cases where the loop completed `i == end`,
+        // meaning no terminator (0 or ' ') was hit that caused a `break`.
+        // In such a case, the last byte `buffer[end - 1]` should have been a terminator.
+        if (i == end) { // The loop finished by reaching `end` without an explicit `break` (due to terminator)
+            // This means the last character was processed as a digit or ignored as padding.
+            // According to the Javadoc "The buffer must contain a trailing space or NUL",
+            // the last byte within the 'length' region must be one of these terminators.
+            if (buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, buffer[end-1]));
+            }
+        }
+        // If the loop broke (i < end), then a terminator was found and its trailing NULs were already validated.
+
         return result;
     }
\ No newline at end of file
