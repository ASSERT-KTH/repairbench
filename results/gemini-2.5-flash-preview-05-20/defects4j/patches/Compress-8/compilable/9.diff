diff --git a/tmp/b2cbb876-d006-477d-b9ff-320b4a9b0087_buggy.java b/tmp/baa62fae-dc26-48c4-8bf1-fe4ea1e2738e_fixed.java
index e087f95..f31997d 100644
--- a/tmp/b2cbb876-d006-477d-b9ff-320b4a9b0087_buggy.java
+++ b/tmp/baa62fae-dc26-48c4-8bf1-fe4ea1e2738e_fixed.java
@@ -1,53 +1,83 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // 1. Check for minimum length as per Javadoc.
+        if (length < 2) {
+            throw new IllegalArgumentException("length must be at least 2 bytes");
+        }
+
+        // 2. Check for "all NULs" case. This is a special condition and must be handled strictly.
+        // If every byte in the segment is NUL, return 0L.
+        boolean allNULs = true;
+        for (int i = offset; i < offset + length; i++) {
+            if (buffer[i] != 0) { // If any byte is not NUL, it's not an all-NULs field.
+                allNULs = false;
+                break;
+            }
+        }
+        if (allNULs) {
+            return 0L;
+        }
+
         long    result = 0;
-        boolean stillPadding = true;
+        boolean stillPadding = true; // True if we are still skipping leading spaces or ASCII '0's.
         int     end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+        // 3. Rule: The buffer must contain a trailing space or NUL.
+        // This applies to the *very last* byte of the field.
+        if (buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
+        }
+
+        // Iterate through the buffer to parse digits and validate characters.
+        for (int i = offset; i < end; i++){
             final byte currentByte = buffer[i];
+
+            // Handle NUL byte: NUL is only allowed as a trailing character.
             if (currentByte == 0) {
+                // If a NUL is found, it must be the start of a valid trailing sequence.
+                // All characters from current position `i` to `end-1` must be NUL or space.
+                for (int j = i; j < end; j++) {
+                    if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, j, buffer[j]));
+                    }
+                }
+                // If all remaining characters are valid trailers, then stop parsing digits.
                 break;
             }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
+            // Handle space character:
             if (currentByte == (byte) ' ') {
-                break;
+                if (stillPadding) {
+                    continue; // Skip leading spaces.
                 }
+                // If space found after leading padding has finished, it must be the start of a trailing sequence.
+                for (int j = i; j < end; j++) {
+                    if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, j, buffer[j]));
+                    }
+                }
+                break; // Stop parsing digits.
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+            // If we are still in padding mode (only leading spaces or ASCII '0's seen so far)
+            if (stillPadding) {
+                if (currentByte == '0') { // ASCII '0'
+                    continue; // Treat leading ASCII '0's as padding.
+                }
+                // If we reach here, `currentByte` is not ' ', NUL, or '0'. So padding has ended.
                 stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+            }
+
+            // Now, `stillPadding` is false. We are in the non-padding part of the string.
+            // Current character must be an octal digit.
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); // Convert from ASCII
         }
 
         return result;
     }
\ No newline at end of file
