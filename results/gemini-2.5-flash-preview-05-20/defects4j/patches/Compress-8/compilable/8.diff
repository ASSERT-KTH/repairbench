diff --git a/tmp/3c590ced-e02f-404e-8eca-8f3c81b2abef_buggy.java b/tmp/29ee2ddf-c614-4aa2-b988-7c259e3ec1eb_fixed.java
index e087f95..5d8d8f8 100644
--- a/tmp/3c590ced-e02f-404e-8eca-8f3c81b2abef_buggy.java
+++ b/tmp/29ee2ddf-c614-4aa2-b988-7c259e3ec1eb_fixed.java
@@ -1,53 +1,96 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    public static long parseOctal(final byte[] buffer, final int offset, final int int_length) { // Renamed length to int_length to avoid conflict with local variable "length" in comment. Original method signature used "length".
+        // The original method signature is `public static long parseOctal(final byte[] buffer, final int offset, final int length)`.
+        // Let's use `length` directly and ensure no local variables conflict with the parameter name if possible, or rename internally.
+        // Stick to the original parameter name `length`.
+
+        // Fix: Add check for minimum length as per Javadoc.
+        if (int_length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes, actual: " + int_length);
+        }
+
         long result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
+        int i = offset;
+        final int end = offset + int_length; // exclusive end
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+        while (i < end && buffer[i] == (byte) ' ') {
+            i++;
         }
-                if (currentByte == (byte) ' ') {
+
+        // Find the effective end of the number (exclusive limit)
+        // This is the first position from the end that is NOT a NUL or space.
+        // So, 'limit' will point to the character *after* the last digit.
+        // Characters from 'limit' to 'end' must be NULs or spaces (the trailing padding).
+        int limit = end;
+        while (limit > i && (buffer[limit - 1] == 0 || buffer[limit - 1] == (byte) ' ')) {
+            limit--;
+        }
+
+        // Special case: All NULs in the original range.
+        // This must be checked on the original buffer segment, not after trimming.
+        // E.g., {0,0,0} should return 0L.
+        // E.g., {' ',0,0} should throw error.
+        boolean allNulsInOriginalRange = true;
+        for (int j = offset; j < end; j++) {
+            if (buffer[j] != 0) {
+                allNulsInOriginalRange = false;
                 break;
             }
         }
+        if (allNulsInOriginalRange) {
+            return 0L;
+        }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        // If after trimming leading spaces and trailing NULs/spaces, `i == limit`,
+        // it means the effective content of the segment is empty.
+        // This implies the segment contained only spaces or spaces/NULs, but not all NULs
+        // (which was handled above). This is an invalid format.
+        // Example: "   " or " \0 \0"
+        if (i == limit) {
+             // Points to the start of the invalid sequence
+             throw new IllegalArgumentException(exceptionMessage(buffer, offset, int_length, offset, buffer[offset]));
+        }
 
-            stillPadding = false;
+        // Parse octal digits between i (inclusive) and limit (exclusive)
+        for (; i < limit; i++) {
+            final byte currentByte = buffer[i];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, int_length, i, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
+        // Validate trailing characters: The buffer must contain a trailing space or NUL.
+        // If 'limit' is still equal to 'end' after the trimming loop, it means no trailing
+        // NUL or space was found in the portion of the buffer specified by 'length'.
+        // This implies the last character was a digit, and no terminator was present.
+        // This is an error, as per the Javadoc ("trailing space/NUL is missing").
+        if (limit == end) {
+            // Error: No trailing space/NUL found.
+            // The exception message should point to the last byte of the number as the error source,
+            // as that byte should have been a terminator.
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, int_length, end - 1, buffer[end - 1]));
+        }
+
         return result;
     }
\ No newline at end of file
