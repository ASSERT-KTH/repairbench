diff --git a/tmp/1689438a-498c-4330-b3da-04edc5fc0ac0_buggy.java b/tmp/f3347a27-2e41-42cd-98d5-f2c694ddbe78_fixed.java
index 70cafe0..061612d 100644
--- a/tmp/1689438a-498c-4330-b3da-04edc5fc0ac0_buggy.java
+++ b/tmp/f3347a27-2e41-42cd-98d5-f2c694ddbe78_fixed.java
@@ -1,18 +1,36 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+        // Iterate through all rows, including objective function rows (starting from 0)
+        for (int i = 0; i < getHeight(); i++) {
+            final double entry = getEntry(i, col);
+            // If the entry is not effectively zero
+            if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // If it's a candidate for a basic variable, its single non-zero entry must be 1.0
+                if (MathUtils.equals(entry, 1.0, epsilon)) {
+                    // This is the first 1.0 we found in this column
                     if (row == null) {
                         row = i;
                     } else {
+                        // Found a second 1.0 (or effectively 1.0) in this column.
+                        // A basic column can only have one 1.0. So, this column is not basic.
+                        return null;
+                    }
+                } else {
+                    // Found a non-zero entry that is not 1.0.
+                    // A basic column must have its single non-zero entry as 1.0.
+                    // So, this column is not basic.
                     return null;
                 }
             }
         }
+        // If we reached here, it means:
+        // - All entries were 0.0 (row will be null).
+        // - Exactly one 1.0 was found, and all other entries were 0.0 (row will be the index of that 1.0).
+        // In both cases, 'row' correctly reflects whether the column is basic and, if so, in which row.
         return row;
     }
\ No newline at end of file
