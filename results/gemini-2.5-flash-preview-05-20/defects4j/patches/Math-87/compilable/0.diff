diff --git a/tmp/054d240f-fa38-4052-aa67-a8bad0231d69_buggy.java b/tmp/7f741b75-44c3-4b05-82de-2dd33a64d348_fixed.java
index 70cafe0..7fa9481 100644
--- a/tmp/054d240f-fa38-4052-aa67-a8bad0231d69_buggy.java
+++ b/tmp/7f741b75-44c3-4b05-82de-2dd33a64d348_fixed.java
@@ -1,18 +1,34 @@
     /**
      * Checks whether the given column is basic.
+     * A column is basic if it is a unit vector (contains exactly one 1.0, and all other entries are 0.0),
+     * and the 1.0 entry is located in a constraint row.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+        // Iterate through all rows (including objective function rows) to find a unique non-zero entry.
+        for (int i = 0; i < getHeight(); i++) {
+            final double entry = getEntry(i, col);
+            if (!MathUtils.equals(entry, 0.0, epsilon)) {
                 if (row == null) {
+                    // This is the first non-zero entry found in the column.
                     row = i;
                 } else {
-                return null;
+                    // Found a second non-zero entry, so this column is not a unit vector.
+                    return null; // Not basic
                 }
             }
         }
-        return row;
+
+        // At this point, 'row' is either null (all zeros in the column)
+        // or it contains the index of the single non-zero entry found.
+        // For a column to be basic:
+        // 1. It must have exactly one non-zero entry. (Checked by the loop)
+        // 2. That single non-zero entry must be 1.0.
+        // 3. That single non-zero entry (1.0) must be in a constraint row (not an objective row).
+        if (row != null && row >= getNumObjectiveFunctions() && MathUtils.equals(getEntry(row, col), 1.0, epsilon)) {
+            return row; // Column is basic in 'row'
+        }
+        return null; // Not basic (either no non-zero, multiple non-zeros, or the single non-zero is not 1.0, or it's in an objective row)
     }
\ No newline at end of file
