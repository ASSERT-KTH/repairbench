diff --git a/tmp/49cf4c6c-f207-46db-808a-e9a6d2454a11_buggy.java b/tmp/b1e763c5-6a93-4c72-a347-a7d6d8f86fbc_fixed.java
index 70cafe0..c20cbee 100644
--- a/tmp/49cf4c6c-f207-46db-808a-e9a6d2454a11_buggy.java
+++ b/tmp/b1e763c5-6a93-4c72-a347-a7d6d8f86fbc_fixed.java
@@ -1,18 +1,34 @@
     /**
      * Checks whether the given column is basic.
+     * A column is basic if it contains exactly one non-zero entry in the constraint rows (below objective functions),
+     * and that non-zero entry is 1.0 (within epsilon), and all other entries in the column (in constraint rows) are 0.0.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            final double entry = getEntry(i, col);
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
+                // Found an entry that is 1.0. This is a candidate for the basic row.
                 if (row == null) {
+                    // This is the first 1.0 found in this column. Store its row.
                     row = i;
                 } else {
+                    // Found a second 1.0 (or another non-zero entry that was 1.0) in this column.
+                    // A basic column must have exactly one 1.0 and all other entries 0.0.
+                    // Therefore, this column is not basic.
                     return null;
                 }
+            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // Found a non-zero entry that is not 1.0.
+                // A basic column must have 0.0 in all non-basic rows, and 1.0 in its basic row.
+                // Since this entry is non-zero but not 1.0, this column is not basic.
+                return null;
             }
+            // If entry is 0.0, continue to the next row (this is expected for a basic column in other constraint rows).
         }
+        // If the loop completes, 'row' will contain the index of the row where the single 1.0 was found,
+        // or it will be null if no 1.0 was found (or if the column was determined not to be basic earlier).
         return row;
     }
\ No newline at end of file
