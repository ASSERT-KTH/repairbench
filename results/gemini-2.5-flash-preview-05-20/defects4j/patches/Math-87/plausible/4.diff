diff --git a/tmp/198ec983-736c-429f-a3e3-5b27aff65eed_buggy.java b/tmp/9f9f4854-f0d2-4102-a074-8983096fa824_fixed.java
index 70cafe0..77a3fa5 100644
--- a/tmp/198ec983-736c-429f-a3e3-5b27aff65eed_buggy.java
+++ b/tmp/9f9f4854-f0d2-4102-a074-8983096fa824_fixed.java
@@ -1,18 +1,28 @@
     /**
      * Checks whether the given column is basic.
+     * A column is considered basic if it has exactly one non-zero entry (below the objective function row)
+     * and that non-zero entry is 1.0. All other entries in the column (below the objective function row)
+     * must be 0.0.
+     * 
      * @param col index of the column to check
      * @return the row that the variable is basic in. null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            final double entry = getEntry(i, col);
+            if (MathUtils.equals(entry, 1.0, epsilon)) { // If the entry is 1.0
                 if (row == null) {
-                row = i;
+                    row = i; // This is the first 1.0 found, store its row
                 } else {
-                return null;
+                    return null; // Found a second 1.0, which means this column is not basic
                 }
+            } else if (!MathUtils.equals(entry, 0.0, epsilon)) { // If the entry is non-zero AND not 1.0
+                return null; // This column is not basic (it has a non-zero value that isn't 1.0)
             }
+            // If the entry is 0.0, we continue to the next row as it does not affect basicity here.
         }
+        // If we reach here, 'row' is either null (meaning all entries were 0, or a non-1.0 non-zero was found)
+        // or it contains the row index of the single 1.0 entry found in the column.
         return row;
     }
\ No newline at end of file
