diff --git a/tmp/6f5c12b7-210e-4a2b-8bd1-c9c0e2f48874_buggy.java b/tmp/7a5ea4f4-4fb4-48a4-9a68-d04f3904013b_fixed.java
index 70cafe0..6583dba 100644
--- a/tmp/6f5c12b7-210e-4a2b-8bd1-c9c0e2f48874_buggy.java
+++ b/tmp/7a5ea4f4-4fb4-48a4-9a68-d04f3904013b_fixed.java
@@ -1,18 +1,29 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            final double entry = getEntry(i, col);
+            // A column is basic if it has exactly one non-zero entry,
+            // and that entry must be approximately 1.0.
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
                 if (row == null) {
-                row = i;
+                    row = i; // Found the first entry approximately 1.0
                 } else {
+                    // Found a second entry approximately 1.0 (or already found one and this is another 1.0),
+                    // so the column is not basic (it must have exactly one 1.0 and rest 0.0).
                     return null;
                 }
+            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // Found a non-zero entry that is NOT approximately 1.0.
+                // This means the column is not basic, as basic columns must have 1.0 in their pivot row.
+                return null;
             }
+            // If the entry is approximately 0.0, we just continue the loop, which is correct
+            // as other entries in a basic column (outside its pivot row) must be 0.0.
         }
-        return row;
+        return row; // Returns the row if exactly one entry was approximately 1.0, null otherwise.
     }
\ No newline at end of file
