diff --git a/tmp/7afbd60e-5f22-4231-a843-fba4e3bf61fa_buggy.java b/tmp/48ee20b2-ff60-448b-939c-087a485dd73d_fixed.java
index 70cafe0..b4cfb21 100644
--- a/tmp/7afbd60e-5f22-4231-a843-fba4e3bf61fa_buggy.java
+++ b/tmp/48ee20b2-ff60-448b-939c-087a485dd73d_fixed.java
@@ -1,18 +1,34 @@
     /**
      * Checks whether the given column is basic.
+     * A column is basic if it contains exactly one non-zero entry
+     * (in the constraint rows), and that non-zero entry is 1.0.
+     * All other entries in that column (in the constraint rows) must be 0.0.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            final double entry = getEntry(i, col);
+            if (!MathUtils.equals(entry, 0.0, epsilon)) {
+                // Found a non-zero entry
                 if (row == null) {
+                    // This is the first non-zero entry found in this column.
+                    // For the column to be basic, this entry must be 1.0.
+                    if (MathUtils.equals(entry, 1.0, epsilon)) {
                         row = i;
                     } else {
+                        // The first non-zero entry is not 1.0, so this column is not basic.
+                        return null;
+                    }
+                } else {
+                    // Found a second non-zero entry. A basic column can only have one non-zero entry.
                     return null;
                 }
             }
         }
+        // If we reach here, either:
+        // 1. No non-zero entries were found (row is still null), so not basic.
+        // 2. Exactly one non-zero entry was found, and it was 1.0 (row holds its index), so it is basic.
         return row;
     }
\ No newline at end of file
