diff --git a/tmp/0f313ad3-0707-4729-aafe-bd6292d242ec_buggy.java b/tmp/3c4d5df3-196d-4cd7-aa73-84348aebb4f6_fixed.java
index 70cafe0..e9e26c7 100644
--- a/tmp/0f313ad3-0707-4729-aafe-bd6292d242ec_buggy.java
+++ b/tmp/3c4d5df3-196d-4cd7-aa73-84348aebb4f6_fixed.java
@@ -1,18 +1,35 @@
     /**
-     * Checks whether the given column is basic.
+     * Checks whether the given column is basic. A column is considered basic if it contains exactly one non-zero entry,
+     * and that non-zero entry is 1.0, with all other entries in the column (within the constraint rows) being 0.0.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
+            // Check if the current entry is non-zero (within epsilon tolerance)
             if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+                // If the entry is non-zero, it must be 1.0 for the column to be basic.
+                if (MathUtils.equals(getEntry(i, col), 1.0, epsilon)) {
                     if (row == null) {
+                        // This is the first time we've found a 1.0 in this column within the constraint rows.
+                        // Record this row as the basic row for this column.
                         row = i;
                     } else {
+                        // We have found a second 1.0 in this column, which means it has multiple 1.0s.
+                        // A basic column must have exactly one 1.0. Therefore, this column is not basic.
+                        return null;
+                    }
+                } else {
+                    // We found a non-zero entry, but it's not 1.0.
+                    // For a column to be basic, its single non-zero entry must be 1.0.
+                    // Therefore, this column is not basic.
                     return null;
                 }
             }
         }
+        // If we reach here, either:
+        // 1. 'row' is null, meaning all entries in the column were 0.0. Not basic.
+        // 2. 'row' is not null, meaning we found exactly one 1.0 and all other entries were 0.0. Basic.
         return row;
     }
\ No newline at end of file
