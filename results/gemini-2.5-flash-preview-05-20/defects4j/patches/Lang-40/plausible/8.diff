diff --git a/tmp/bb55759e-b381-4783-a4a7-b9d78771b5d3_buggy.java b/tmp/cab7f4eb-c906-4786-b9e4-445bf874b07f_fixed.java
index 562001a..6ddc2fd 100644
--- a/tmp/bb55759e-b381-4783-a4a7-b9d78771b5d3_buggy.java
+++ b/tmp/cab7f4eb-c906-4786-b9e4-445bf874b07f_fixed.java
@@ -1,29 +1,28 @@
-    /**
-     * <p>Checks if String contains a search String irrespective of case,
-     * handling <code>null</code>. Case-insensitivity is defined as by
-     * {@link String#equalsIgnoreCase(String)}.
-     *
-     * <p>A <code>null</code> String will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.contains(null, *) = false
-     * StringUtils.contains(*, null) = false
-     * StringUtils.contains("", "") = true
-     * StringUtils.contains("abc", "") = true
-     * StringUtils.contains("abc", "a") = true
-     * StringUtils.contains("abc", "z") = false
-     * StringUtils.contains("abc", "A") = true
-     * StringUtils.contains("abc", "Z") = false
-     * </pre>
-     *
-     * @param str  the String to check, may be null
-     * @param searchStr  the String to find, may be null
-     * @return true if the String contains the search String irrespective of
-     * case or false if not or <code>null</code> string input
-     */
 public static boolean containsIgnoreCase(String str, String searchStr) {
     if (str == null || searchStr == null) {
         return false;
     }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+    if (searchStr.length() == 0) {
+        // An empty string is contained in any non-null string.
+        return true;
+    }
+    // If searchStr is longer than str, it cannot be contained.
+    if (searchStr.length() > str.length()) {
+        return false;
+    }
+
+    // Iterate through str, checking for searchStr as a substring, ignoring case.
+    // The loop runs from the start of str up to the point where a substring
+    // of length searchStr.length() can still be formed.
+    int strLen = str.length();
+    int searchLen = searchStr.length();
+    for (int i = 0; i <= strLen - searchLen; i++) {
+        // Extract a substring from 'str' of the same length as 'searchStr'
+        String sub = str.substring(i, i + searchLen);
+        // Compare this substring with 'searchStr' using equalsIgnoreCase
+        if (sub.equalsIgnoreCase(searchStr)) {
+            return true;
+        }
+    }
+    return false;
 }
\ No newline at end of file
