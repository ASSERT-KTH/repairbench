diff --git a/tmp/7eb98f74-0bcb-483d-baea-43fce60d5370_buggy.java b/tmp/a0309948-f596-4fbb-bfba-5cae735b00ad_fixed.java
index 562001a..93d1026 100644
--- a/tmp/7eb98f74-0bcb-483d-baea-43fce60d5370_buggy.java
+++ b/tmp/a0309948-f596-4fbb-bfba-5cae735b00ad_fixed.java
@@ -1,29 +1,47 @@
     /**
      * <p>Checks if String contains a search String irrespective of case,
      * handling <code>null</code>. Case-insensitivity is defined as by
      * {@link String#equalsIgnoreCase(String)}.
      *
      * <p>A <code>null</code> String will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.contains(null, *) = false
      * StringUtils.contains(*, null) = false
      * StringUtils.contains("", "") = true
      * StringUtils.contains("abc", "") = true
      * StringUtils.contains("abc", "a") = true
      * StringUtils.contains("abc", "z") = false
      * StringUtils.contains("abc", "A") = true
      * StringUtils.contains("abc", "Z") = false
      * </pre>
      *
      * @param str  the String to check, may be null
      * @param searchStr  the String to find, may be null
      * @return true if the String contains the search String irrespective of
      * case or false if not or <code>null</code> string input
      */
     public static boolean containsIgnoreCase(String str, String searchStr) {
         if (str == null || searchStr == null) {
             return false;
         }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+        // Handle the case where the search string is empty.
+        // As per Javadoc: contains("", "") = true, contains("abc", "") = true
+        if (searchStr.length() == 0) {
+            return true;
+        }
+
+        // Optimization: if str is shorter than searchStr, it cannot contain it.
+        if (str.length() < searchStr.length()) {
+            return false;
+        }
+
+        // Iterate through the str string to find a matching substring.
+        // Use regionMatches with ignoreCase = true for locale-independent case-insensitive comparison.
+        for (int i = 0; i <= str.length() - searchStr.length(); i++) {
+            if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {
+                return true;
+            }
+        }
+        return false;
     }
