diff --git a/tmp/8293a3b7-f04e-4cfc-9a80-1869a21cd61b_buggy.java b/tmp/f58d5797-dbce-408a-8191-f94cfc6de083_fixed.java
index 562001a..92e7403 100644
--- a/tmp/8293a3b7-f04e-4cfc-9a80-1869a21cd61b_buggy.java
+++ b/tmp/f58d5797-dbce-408a-8191-f94cfc6de083_fixed.java
@@ -1,29 +1,53 @@
     /**
      * <p>Checks if String contains a search String irrespective of case,
      * handling <code>null</code>. Case-insensitivity is defined as by
      * {@link String#equalsIgnoreCase(String)}.
      *
      * <p>A <code>null</code> String will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.contains(null, *) = false
      * StringUtils.contains(*, null) = false
      * StringUtils.contains("", "") = true
      * StringUtils.contains("abc", "") = true
      * StringUtils.contains("abc", "a") = true
      * StringUtils.contains("abc", "z") = false
      * StringUtils.contains("abc", "A") = true
      * StringUtils.contains("abc", "Z") = false
      * </pre>
      *
      * @param str  the String to check, may be null
      * @param searchStr  the String to find, may be null
      * @return true if the String contains the search String irrespective of
      * case or false if not or <code>null</code> string input
      */
     public static boolean containsIgnoreCase(String str, String searchStr) {
         if (str == null || searchStr == null) {
             return false;
         }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+        // An empty search string is considered to be contained in any (non-null) string.
+        if (searchStr.length() == 0) {
+            return true;
+        }
+
+        final int length = str.length();
+        final int searchLength = searchStr.length();
+
+        // If the search string is longer than the string to search within, it cannot be contained.
+        if (searchLength > length) {
+            return false;
+        }
+
+        // Iterate through all possible starting positions in 'str'.
+        // For each position, check if the substring of 'str' (of length searchLength)
+        // matches 'searchStr' case-insensitively using String.regionMatches.
+        // The 'ignoreCase' parameter of regionMatches uses the same logic as
+        // String.equalsIgnoreCase, providing locale-independent case comparison
+        // without the issues of full string uppercasing/lowercasing.
+        for (int i = 0; i <= length - searchLength; i++) {
+            if (str.regionMatches(true, i, searchStr, 0, searchLength)) {
+                return true;
+            }
+        }
+        return false;
     }
\ No newline at end of file
