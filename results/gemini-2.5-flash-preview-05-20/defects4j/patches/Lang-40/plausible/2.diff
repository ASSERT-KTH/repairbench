diff --git a/tmp/4b446bf7-d1ba-46bc-be56-14ba31217b86_buggy.java b/tmp/4fd7edbd-28a2-4d3c-8aba-9c96ab1d8ceb_fixed.java
index 562001a..c35c467 100644
--- a/tmp/4b446bf7-d1ba-46bc-be56-14ba31217b86_buggy.java
+++ b/tmp/4fd7edbd-28a2-4d3c-8aba-9c96ab1d8ceb_fixed.java
@@ -1,29 +1,49 @@
     /**
      * <p>Checks if String contains a search String irrespective of case,
      * handling <code>null</code>. Case-insensitivity is defined as by
      * {@link String#equalsIgnoreCase(String)}.
      *
      * <p>A <code>null</code> String will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.contains(null, *) = false
      * StringUtils.contains(*, null) = false
      * StringUtils.contains("", "") = true
      * StringUtils.contains("abc", "") = true
      * StringUtils.contains("abc", "a") = true
      * StringUtils.contains("abc", "z") = false
      * StringUtils.contains("abc", "A") = true
      * StringUtils.contains("abc", "Z") = false
      * </pre>
      *
      * @param str  the String to check, may be null
      * @param searchStr  the String to find, may be null
      * @return true if the String contains the search String irrespective of
      * case or false if not or <code>null</code> string input
      */
     public static boolean containsIgnoreCase(String str, String searchStr) {
         if (str == null || searchStr == null) {
             return false;
         }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+        // Handle empty search string as per Javadoc
+        if (searchStr.length() == 0) {
+            return true;
+        }
+
+        final int len = str.length();
+        final int searchLen = searchStr.length();
+
+        // If search string is longer than the string to search in, it cannot be contained.
+        if (searchLen > len) {
+            return false;
+        }
+
+        // Iterate through the string, checking for a case-insensitive match
+        // of the search string at each possible starting position.
+        for (int i = 0; i <= len - searchLen; i++) {
+            if (str.regionMatches(true, i, searchStr, 0, searchLen)) {
+                return true;
+            }
+        }
+        return false;
     }
\ No newline at end of file
