diff --git a/tmp/52df4b5f-2c8c-4664-88ba-8ede6a2d0021_buggy.java b/tmp/57b29a7e-39c1-4768-b02a-ddbde50da50c_fixed.java
index 21f64c6..e175919 100644
--- a/tmp/52df4b5f-2c8c-4664-88ba-8ede6a2d0021_buggy.java
+++ b/tmp/57b29a7e-39c1-4768-b02a-ddbde50da50c_fixed.java
@@ -1,23 +1,47 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while(++offset < length && startChar != input[offset]);
+            
+            // At this point, `offset` either points to the `startChar` or has reached `length`
+            // if `startChar` was not found.
+            // If `offset` is now `length` or greater, the outer loop condition (`offset < length`)
+            // will handle termination in the next iteration.
+            // The following `if (offset < length)` ensures we only proceed if `offset` is still valid.
+            if (offset < length) {
                 int i = offset + 1;
+                // 'last' is the expected index in 'input' *after* the full sequence match.
+                // If `seq` has length L, and its first char is at `offset`,
+                // then it occupies indices `offset` to `offset + L - 1`.
+                // So, the characters `seq.charAt(1)` to `seq.charAt(L-1)` are expected to match
+                // `input[offset+1]` to `input[offset + L - 1]`.
+                // `i` starts at `offset + 1`. After the loop, if full match, `i` should be `offset + L`.
+                // `last` is computed as `(offset + 1) + seq.length() - 1`, which simplifies to `offset + seq.length()`.
                 int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+
+                // The inner loop iterates to compare the rest of the sequence `seq` with `input`.
+                // It must ensure:
+                // 1. `j` stays within bounds of `seq` (j < seq.length()).
+                // 2. `i` stays within bounds of `input` (i < length). This is crucial to prevent `ArrayIndexOutOfBoundsException`.
+                // 3. Characters match.
+                for (int j = 1; j < seq.length() && i < length && seq.charAt(j) == input[i]; i++, j++);
+                
+                // If the loop completes because all characters in `seq` matched,
+                // then `j` will be equal to `seq.length()`, and `i` will have advanced
+                // such that `i == last`.
+                if (i == last) { // found full sequence
                     return offset - pos;
                 }
             }
+        }
         return -1;
     }
\ No newline at end of file
