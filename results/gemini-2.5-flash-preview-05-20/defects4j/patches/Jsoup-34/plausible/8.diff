diff --git a/tmp/33ab3b88-b8a1-4473-9ec8-dd54778c5569_buggy.java b/tmp/53df1ae6-4d19-44bf-8ef5-c7c3593ee5d6_fixed.java
index 21f64c6..224495f 100644
--- a/tmp/33ab3b88-b8a1-4473-9ec8-dd54778c5569_buggy.java
+++ b/tmp/53df1ae6-4d19-44bf-8ef5-c7c3593ee5d6_fixed.java
@@ -1,23 +1,65 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
+        // Assume seq.length() > 0 based on original charAt(0) call.
+        // If seq.length() were 0, seq.charAt(0) would throw an exception.
         char startChar = seq.charAt(0);
+        int targetLength = seq.length();
+
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+            // scan to first instance of startChar:
+            // If input[offset] is not startChar, advance offset until startChar is found or end of input is reached.
+            if (startChar != input[offset]) {
                 while(++offset < length && startChar != input[offset]);
+            }
+
+            // After the while loop, 'offset' might be 'length' if startChar was not found
+            // in the remaining input, or it points to the first occurrence of 'startChar'.
+            if (offset == length) {
+                return -1; // No more occurrences of startChar found, so the sequence cannot be found.
+            }
+
+            // At this point, input[offset] == startChar.
+            // Now, check if there are enough characters remaining in the input to match the full sequence.
+            // The full sequence would occupy characters from 'offset' up to 'offset + targetLength - 1'.
+            // So, 'offset + targetLength' (which is the index *after* the last character of the potential match)
+            // must not exceed 'length'.
+            if (offset + targetLength > length) {
+                // Not enough characters left in the input for a full match starting from this 'offset'.
+                // This 'offset' cannot yield a full match, so we continue searching for the next possible 'startChar'.
+                // The outer loop's 'offset++' will handle advancing the position.
+                continue;
+            }
+
+            // Now, input[offset] is startChar and we have enough room for the full sequence.
+            // Compare the rest of the sequence.
+            // 'i' represents the current index in the 'input' array, starting after 'offset'.
+            // 'j' represents the current index in the 'seq' (target sequence), starting after the first character.
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
+            // 'last' is the index *after* the last character of the sequence if it matches in the input array.
+            // If the sequence is 'targetLength' long, and starts at 'offset',
+            // it occupies indices 'offset' through 'offset + targetLength - 1'.
+            // So, the characters to check after the first are from 'offset + 1' to 'offset + targetLength - 1'.
+            // The loop for 'i' should run as long as 'i < offset + targetLength'.
+            int last = offset + targetLength;
+
+            // This loop compares characters from the sequence (starting at index 1)
+            // with characters from the input (starting at index offset + 1).
+            // The condition 'i < last' ensures that 'i' goes up to 'last-1',
+            // which is 'offset + targetLength - 1'. This is the correct last index for comparison.
+            // The 'offset + targetLength > length' check performed earlier guarantees that 'last <= length',
+            // so 'input[i]' access will always be within bounds (i.e., 'i < length').
             for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+
+            // If 'i' reached 'last', it means all characters of the sequence matched successfully.
+            if (i == last) { // found full sequence
+                return offset - pos; // Return the offset from the current 'pos'
             }
         }
-        return -1;
+        return -1; // Sequence not found in the remaining input
     }
\ No newline at end of file
