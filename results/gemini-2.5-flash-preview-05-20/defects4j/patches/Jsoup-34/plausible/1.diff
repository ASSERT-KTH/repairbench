diff --git a/tmp/72111d4b-ba24-413b-833b-c43f94bbc743_buggy.java b/tmp/4983d03a-b800-4651-b7ee-0623cfa44415_fixed.java
index 21f64c6..e09e0ee 100644
--- a/tmp/72111d4b-ba24-413b-833b-c43f94bbc743_buggy.java
+++ b/tmp/4983d03a-b800-4651-b7ee-0623cfa44415_fixed.java
@@ -1,23 +1,50 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while(++offset < length && startChar != input[offset]);
+            
+            // If the while loop advanced offset to length, it means startChar was not found
+            // or the last char was processed. In either case, we should break the outer loop.
+            if (offset == length) {
+                break;
+            }
+
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+            // 'last' represents the index just past the end of the expected sequence match.
+            // If seq has length L, and its first char is at offset, then the last char is at offset + L - 1.
+            // So, the expected value of 'i' if the full sequence matches is offset + L.
+            int last = offset + seq.length();
+
+            // Ensure there are enough characters left in the input to match the remaining sequence
+            // (from the second character of seq onwards).
+            // 'i' will represent the current position in 'input' being compared to 'seq.charAt(j)'.
+            // It must always be less than 'length'.
+            // The inner loop iterates from j=1 up to seq.length()-1.
+            // If seq.length() == 1, then seq.charAt(0) is the only character to match,
+            // and the inner loop will not execute, as 'j' starts at 1.
+            // In this case, 'i' will be 'offset + 1' and 'last' will be 'offset + 1'.
+            // The condition 'i < last' will be false, and the loop won't run, which is correct.
+            // The check 'if (i == last)' will then be true.
+
+            // The main bug was that 'input[i]' could be accessed when 'i' was already 'length'.
+            // This happens when 'i' advances to 'length' within the loop, and the next iteration
+            // tries to access 'input[length]'.
+            // Adding 'i < length' to the inner loop condition prevents this.
+            for (int j = 1; i < last && i < length && seq.charAt(j) == input[i]; i++, j++);
+
+            // If i reached 'last', it means all characters of 'seq' (from index 0 to length-1)
+            // matched the corresponding characters in 'input' starting from 'offset'.
             if (i == last) // found full sequence
                 return offset - pos;
         }
-        }
         return -1;
     }
\ No newline at end of file
