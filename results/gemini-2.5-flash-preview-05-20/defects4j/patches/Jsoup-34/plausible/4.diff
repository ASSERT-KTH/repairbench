diff --git a/tmp/62da5209-752e-4174-a815-598e8cc8fa8c_buggy.java b/tmp/157a4fc6-c1df-49b1-8144-7f84d60d2c6e_fixed.java
index 21f64c6..9cfe3da 100644
--- a/tmp/62da5209-752e-4174-a815-598e8cc8fa8c_buggy.java
+++ b/tmp/157a4fc6-c1df-49b1-8144-7f84d60d2c6e_fixed.java
@@ -1,23 +1,68 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
+
+        // Handle empty sequence: an empty sequence is typically found at the current position.
+        if (seq.length() == 0) {
+            return 0; // Offset is 0 (current position)
+        }
+
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+            // Scan to the first instance of startChar:
+            // This loop efficiently skips over characters that are not the startChar.
+            // If startChar is not found or we reach the end, 'offset' will be 'length'.
+            if (startChar != input[offset]) {
                 while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
             }
+
+            // After the while loop, 'offset' might be 'length' if startChar was not found
+            // or if we reached the end of the input while looking for startChar.
+            // If 'offset' is 'length', it means no startChar was found from 'pos' onwards,
+            // or not enough space left to find it and the full sequence.
+            if (offset == length) {
+                return -1;
+            }
+
+            // At this point, input[offset] == startChar.
+            // Now, check if the remaining characters in the input array are sufficient
+            // to contain the full sequence.
+            // The sequence has 'seq.length()' characters.
+            // If it starts at 'offset', its last character would be at 'offset + seq.length() - 1'.
+            // This index must be less than 'length'.
+            // So, 'offset + seq.length() - 1 < length'
+            // which simplifies to 'offset + seq.length() <= length'.
+            if (offset + seq.length() > length) {
+                // Not enough characters left in the input to match the full sequence.
+                // Since startChar was found, but the rest won't fit, we can stop searching.
+                return -1;
+            }
+
+            // Compare the rest of the sequence from seq.charAt(1) onwards.
+            // 'i' is the current index in 'input' array, corresponding to 'j' in 'seq'.
+            int i = offset + 1; // Start checking from the character after startChar in input.
+            int j = 1;          // Start checking from the second character in seq.
+            for (; j < seq.length(); j++) {
+                // The check 'offset + seq.length() > length' above ensures that
+                // 'i' will not go out of bounds ('i < length') as long as 'j < seq.length()'.
+                if (seq.charAt(j) != input[i]) {
+                    break; // Mismatch found, this 'offset' is not the start of the sequence.
+                }
+                i++; // Move to the next character in input.
+            }
+
+            // If the inner loop completed (i.e., 'j' reached 'seq.length()'),
+            // it means all characters of 'seq' matched successfully.
+            if (j == seq.length()) {
+                return offset - pos; // Return the relative offset from the current position.
+            }
+            // If a mismatch occurred (j < seq.length()), the outer loop continues to the next 'offset'.
         }
+        // If the outer loop finishes, the sequence was not found anywhere from 'pos' to 'length - 1'.
         return -1;
     }
\ No newline at end of file
