diff --git a/tmp/3b93d094-d488-4022-bea2-4082ad83e6cf_buggy.java b/tmp/7cfb0c64-ba16-441a-9a3c-30f82bd38a7e_fixed.java
index 21f64c6..4e4b645 100644
--- a/tmp/3b93d094-d488-4022-bea2-4082ad83e6cf_buggy.java
+++ b/tmp/7cfb0c64-ba16-441a-9a3c-30f82bd38a7e_fixed.java
@@ -1,23 +1,65 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length();
+
+        // Optimized path for single-character sequences
+        if (seqLen == 1) {
             for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+                if (startChar == input[offset]) {
+                    return offset - pos;
+                }
+            }
+            return -1;
+        }
+
+        // Search for longer sequences
+        for (int offset = pos; offset < length; offset++) {
+            // 1. Scan to the first instance of startChar
+            if (startChar != input[offset]) {
                 while(++offset < length && startChar != input[offset]);
+            }
+
+            // If startChar was not found in the remaining input, or we reached the end
+            if (offset >= length) {
+                return -1; // No match possible from this point onwards
+            }
+
+            // 2. Check if the full sequence can fit from this 'offset'
+            // The sequence would occupy indices from 'offset' to 'offset + seqLen - 1'.
+            // Therefore, 'offset + seqLen' must not exceed 'length'.
+            if (offset + seqLen > length) {
+                // If the remaining input is shorter than the sequence,
+                // no match is possible from this 'offset' or any subsequent 'offset'.
+                return -1;
+            }
+
+            // 3. Compare the rest of the sequence
+            // 'i' points to the character in 'input' after startChar
+            // 'j' points to the character in 'seq' after startChar (i.e., seq.charAt(1))
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+            int j = 1;
+            boolean match = true;
+            // Loop until all characters of 'seq' (from index 1 onwards) are checked
+            while (j < seqLen) {
+                // We don't need to check i < length here because the 'offset + seqLen > length'
+                // check above ensures that input[i] will be within bounds.
+                if (seq.charAt(j) != input[i]) {
+                    match = false;
+                    break; // Mismatch found, break inner loop
                 }
+                i++;
+                j++;
             }
-        return -1;
+
+            if (match) {
+                return offset - pos; // Full sequence found
+            }
+        }
+        return -1; // Exhausted all possible starting positions without finding a match
     }
\ No newline at end of file
