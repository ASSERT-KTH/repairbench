diff --git a/tmp/83c1d382-afcc-44a2-acaa-9b771614b9fc_buggy.java b/tmp/3a1470d5-ae45-47a4-baab-01de09a61aec_fixed.java
index 21f64c6..79dc2ea 100644
--- a/tmp/83c1d382-afcc-44a2-acaa-9b771614b9fc_buggy.java
+++ b/tmp/3a1470d5-ae45-47a4-baab-01de09a61aec_fixed.java
@@ -1,23 +1,35 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while(++offset < length && startChar != input[offset]);
+            
+            // If the while loop advanced offset to length, we are done
+            if (offset >= length) {
+                return -1;
+            }
+
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+            int last = i + seq.length()-1; // last is the index after the last char of the sequence if matched
+            
+            // This check ensures 'offset' is within bounds, which is already handled by the outer loop and the if statement above.
+            // The critical part is checking 'i' against 'length' in the inner loop.
+            // if (offset < length) { // This `if` is redundant given the `offset >= length` check above.
+                for (int j = 1; i < length && i < last && seq.charAt(j) == input[i]; i++, j++);
+                // The loop condition `i < length` is crucial to prevent ArrayIndexOutOfBoundsException
+                // when checking `input[i]` if the sequence extends beyond the input buffer.
+
                 if (i == last) // found full sequence
                     return offset - pos;
-            }
+            // } // Redundant closing brace
         }
         return -1;
     }
\ No newline at end of file
