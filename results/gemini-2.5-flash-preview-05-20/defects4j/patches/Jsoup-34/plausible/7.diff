diff --git a/tmp/2766c1e7-f15a-4323-bdbf-415c76606829_buggy.java b/tmp/753348b3-a750-481a-93b7-57023b09e0da_fixed.java
index 21f64c6..93e5bef 100644
--- a/tmp/2766c1e7-f15a-4323-bdbf-415c76606829_buggy.java
+++ b/tmp/753348b3-a750-481a-93b7-57023b09e0da_fixed.java
@@ -1,23 +1,65 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
+
+        if (seq.length() == 0) {
+            return 0; // Empty sequence is always found at the current position
+        }
+
+        // Special case for single character sequence to avoid StringIndexOutOfBoundsException with seq.charAt(j)
+        // and simplify logic.
+        if (seq.length() == 1) {
+            char targetChar = seq.charAt(0);
             for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+                if (targetChar == input[offset]) {
                     return offset - pos;
                 }
             }
             return -1;
         }
+
+        char startChar = seq.charAt(0);
+        int seqLen = seq.length();
+
+        for (int offset = pos; offset < length; offset++) {
+            // Scan to first instance of startChar:
+            // If startChar != input[offset], advance offset until startChar is found or end of input.
+            if (startChar != input[offset]) {
+                while(++offset < length && startChar != input[offset]);
+            }
+
+            // If the while loop advanced offset to length, it means startChar was not found from the current position
+            // to the end of the input, so no full sequence can be found.
+            if (offset == length) {
+                break; // Exit outer loop
+            }
+
+            // At this point, input[offset] == startChar.
+            // Now, check if there are enough characters remaining in the input to match the full sequence.
+            // If offset + seqLen > length, it means accessing input[offset + seqLen - 1] would be out of bounds.
+            if (offset + seqLen > length) {
+                continue; // Not enough characters for a full match, try next potential startChar
+            }
+
+            // Check the rest of the sequence (from the second character onwards).
+            // The first character (seq.charAt(0)) is already confirmed as input[offset].
+            boolean match = true;
+            for (int j = 1; j < seqLen; j++) {
+                // Compare seq.charAt(j) with input character at (offset + j)
+                if (seq.charAt(j) != input[offset + j]) {
+                    match = false;
+                    break;
+                }
+            }
+
+            if (match) {
+                return offset - pos; // Full sequence found, return offset relative to current position
+            }
+        }
+        return -1; // Sequence not found
+    }
\ No newline at end of file
