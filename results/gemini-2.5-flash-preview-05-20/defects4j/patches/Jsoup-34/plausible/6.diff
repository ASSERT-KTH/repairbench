diff --git a/tmp/2a6b40d7-7b9d-4312-9deb-dd1f8eaaf44a_buggy.java b/tmp/b632c688-7edb-4324-b885-bf023af9436a_fixed.java
index 21f64c6..3c012b2 100644
--- a/tmp/2a6b40d7-7b9d-4312-9deb-dd1f8eaaf44a_buggy.java
+++ b/tmp/b632c688-7edb-4324-b885-bf023af9436a_fixed.java
@@ -1,23 +1,51 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
+        // Handle empty sequence case: an empty sequence is "found" at the current position.
+        if (seq.length() == 0) {
+            return 0;
+        }
+
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length();
+
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+            // Scan to the first instance of startChar:
+            // If the current character is not the startChar, advance 'offset' using a while loop.
+            if (startChar != input[offset]) {
                 while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
             }
+
+            // After the while loop, 'offset' either points to startChar or has gone past 'length'.
+            // If 'offset' is now out of bounds, no match is possible from this point, so break.
+            if (offset >= length) {
+                break;
             }
-        return -1;
+
+            // At this point, input[offset] == startChar.
+            // Now, check if the rest of the sequence matches from this 'offset'.
+            boolean found = true;
+            for (int j = 1; j < seqLen; j++) {
+                int inputIdx = offset + j; // Calculate the corresponding index in 'input'
+
+                // If inputIdx goes out of bounds of 'input' or characters don't match,
+                // then this 'offset' is not the start of a full match.
+                if (inputIdx >= length || seq.charAt(j) != input[inputIdx]) {
+                    found = false;
+                    break;
+                }
+            }
+
+            // If the inner loop completed without 'found' being set to false,
+            // it means the full sequence was matched.
+            if (found) {
+                return offset - pos; // Return the offset from the initial 'pos'
+            }
+        }
+        return -1; // Sequence not found
     }
