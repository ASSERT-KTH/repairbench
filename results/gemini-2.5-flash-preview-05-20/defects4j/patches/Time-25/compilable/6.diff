diff --git a/tmp/83084450-834e-424a-872d-8f6bf3b6fcb3_buggy.java b/tmp/95eae7eb-eae1-4946-ae77-d8a82d0136a9_fixed.java
index 05aaf2d..a735fb3 100644
--- a/tmp/83084450-834e-424a-872d-8f6bf3b6fcb3_buggy.java
+++ b/tmp/95eae7eb-eae1-4946-ae77-d8a82d0136a9_fixed.java
@@ -1,56 +1,61 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
+            // We have two candidate offsets, offsetLocal and offsetAdjusted.
+            // According to the Javadoc, we should always favour daylight (summer) time.
+            // This means we need to determine which of the two offsets is the daylight one
+            // and return it.
+
+            // If (offsetLocal - offsetAdjusted) < 0, it means offsetLocal is smaller than offsetAdjusted.
+            // This implies offsetLocal is likely the standard/winter offset and offsetAdjusted is the daylight/summer offset.
+            // (e.g., +03:00 vs +04:00, or +01:00 vs +02:00 in certain interpretations of local vs adjusted times).
+            // In this case, offsetAdjusted is the daylight offset.
             if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
+                return offsetAdjusted;
+            } else { // (offsetLocal - offsetAdjusted) > 0, meaning offsetLocal is larger than offsetAdjusted.
+                // This implies offsetLocal is likely the daylight/summer offset and offsetAdjusted is the standard/winter offset.
+                // (e.g., +02:00 vs +01:00).
+                // In this case, offsetLocal is the daylight offset.
                 return offsetLocal;
             }
         }
-        }
         return offsetAdjusted;
     }
