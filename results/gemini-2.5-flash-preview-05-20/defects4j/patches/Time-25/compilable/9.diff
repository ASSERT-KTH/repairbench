diff --git a/tmp/482b5d63-4ac7-4474-9f25-fb29b852d2ca_buggy.java b/tmp/fcd42fb8-5cc6-40d0-b8dd-cc3bdf51694a_fixed.java
index 05aaf2d..c832e78 100644
--- a/tmp/482b5d63-4ac7-4474-9f25-fb29b852d2ca_buggy.java
+++ b/tmp/fcd42fb8-5cc6-40d0-b8dd-cc3bdf51694a_fixed.java
@@ -1,56 +1,70 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
+        // This 'getOffset' takes a UTC instant, so 'instantLocal' is treated as a UTC instant
+        // for an initial guess. For ambiguous local times, it often defaults to the standard offset.
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
-                }
-            }
+
+        // A common DST saving is 1 hour (3600000 milliseconds).
+        // The Javadoc states:
+        // 1. For DST gaps, return the offset suitable for calculating an instant *after* the gap.
+        // 2. For DST overlaps, favour daylight (summer) time, which means the *earlier* UTC instant.
+        // Both rules imply selecting the *larger* of the two possible offsets for an ambiguous local time,
+        // or the offset that applies *after* a gap.
+
+        // Test for an offset that is 1 hour greater than the current 'offsetAdjusted'.
+        // This covers common DST transitions (both gaps and overlaps) where the other
+        // valid offset is 1 hour different.
+        final int ONE_HOUR_MILLIS = 3600000;
+        final int possibleAlternativeOffset = offsetAdjusted + ONE_HOUR_MILLIS;
+        
+        // If 'instantLocal' mapped with 'possibleAlternativeOffset' gives a UTC instant
+        // for which 'getOffset' returns 'possibleAlternativeOffset', then this alternative
+        // offset is a valid interpretation of 'instantLocal' and is the preferred one.
+        if (getOffset(instantLocal - possibleAlternativeOffset) == possibleAlternativeOffset) {
+            // This 'possibleAlternativeOffset' would be the daylight offset in an overlap,
+            // or the after-gap offset in a gap. In both cases, this aligns with the Javadoc's preference.
+            return possibleAlternativeOffset;
         }
+
+        // If the 1-hour alternative check did not return, then 'offsetAdjusted' is the most suitable offset.
+        // This handles cases where there are no transitions, or where the first calculated offset was already correct.
+        // The original `if (offsetLocal != offsetAdjusted)` block and its nested logic are superseded
+        // by this more robust and simplified approach that aligns with the Javadoc rules.
         return offsetAdjusted;
     }
\ No newline at end of file
