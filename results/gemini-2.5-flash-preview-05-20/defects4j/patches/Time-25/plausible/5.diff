diff --git a/tmp/5c2ef693-74b9-4634-8c0d-c4aff92bcdc2_buggy.java b/tmp/8881b2bb-f456-47d8-b61c-051d1f45b32f_fixed.java
index 05aaf2d..8ad1f91 100644
--- a/tmp/5c2ef693-74b9-4634-8c0d-c4aff92bcdc2_buggy.java
+++ b/tmp/8881b2bb-f456-47d8-b61c-051d1f45b32f_fixed.java
@@ -1,56 +1,95 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
+        // This initial estimate treats instantLocal as a UTC instant, which can be problematic
+        // during transitions, especially overlaps where it often defaults to the standard offset.
         final int offsetLocal = getOffset(instantLocal);
+        
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
+        
+        // If the initial estimate matches the re-calculated offset, it means we found a stable
+        // offset. This could be the correct one, or it could be the standard offset during an overlap.
+        if (offsetLocal == offsetAdjusted) {
+            // Check for overlap: see if the local time also maps to a valid UTC time using the *previous* offset.
+            // This happens when the clock falls back, e.g., from +04:00 to +03:00.
+            // `instantAdjusted` is a UTC instant. We look at the transition immediately before it.
+            long prevTransition = previousTransition(instantAdjusted);
+            
+            // If prevTransition is not the same as instantAdjusted, there was a transition.
+            if (prevTransition != instantAdjusted) {
+                // Get the offset just before the previous transition. This would be the daylight offset.
+                int offsetBeforePrevTransition = getOffset(prevTransition - 1); 
+                
+                // If the offset before the previous transition is greater than the current `offsetAdjusted`,
+                // it implies a fall-back (overlap) transition, e.g., +04:00 (daylight) to +03:00 (standard).
+                if (offsetBeforePrevTransition > offsetAdjusted) {
+                    // Test if this daylight offset is also valid for `instantLocal`.
+                    long instantDaylightUTC = instantLocal - offsetBeforePrevTransition;
+                    int offsetAtDaylightUTC = getOffset(instantDaylightUTC);
+                    
+                    // If the daylight offset is consistent for the calculated UTC instant,
+                    // and it's larger (favours daylight/summer time), then return it.
+                    if (offsetAtDaylightUTC == offsetBeforePrevTransition) {
+                        return offsetBeforePrevTransition;
+                    }
+                }
+            }
+            // If no overlap requiring daylight preference was found, or if the daylight offset wasn't valid,
+            // return the initially found stable offset (which is the standard offset for this local time).
+            return offsetAdjusted;
+
+        } else { // offsetLocal != offsetAdjusted, we are near a DST boundary (a gap)
+            // This block handles gaps (spring forward), e.g., +01:00 to +02:00.
+            // The condition `(offsetLocal - offsetAdjusted) < 0` means `offsetLocal < offsetAdjusted`.
+            // This is typical for a spring forward where `offsetLocal` (before gap) is smaller than `offsetAdjusted` (after gap).
+            // The rule for gaps is to return the offset that maps to an instant *after* the gap.
+            // The existing logic implicitly returns `offsetLocal` (the before-gap offset) if it helps map to the after-gap time,
+            // by checking if the next transition from `instantLocal - offsetAdjusted` differs from `instantLocal - offsetLocal`.
             if ((offsetLocal - offsetAdjusted) < 0) {
                 // if we just return offsetAdjusted then the time is pushed
                 // back before the transition, whereas it should be
                 // on or after the transition
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
                     return offsetLocal;
                 }
             }
-        }
+            // If it's not a gap, or the gap logic didn't return, return the adjusted offset.
             return offsetAdjusted;
         }
+    }
\ No newline at end of file
