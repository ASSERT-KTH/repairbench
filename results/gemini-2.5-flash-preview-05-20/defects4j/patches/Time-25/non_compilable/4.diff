diff --git a/tmp/209b1ae2-4636-4b36-b1a1-0ae4f3c84ff2_buggy.java b/tmp/9715b152-9cce-4d23-9524-7ddb86f15d8b_fixed.java
index 05aaf2d..d0c2998 100644
--- a/tmp/209b1ae2-4636-4b36-b1a1-0ae4f3c84ff2_buggy.java
+++ b/tmp/9715b152-9cce-4d23-9524-7ddb86f15d8b_fixed.java
@@ -1,56 +1,76 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
             // we need to ensure that time is always after the DST gap
             // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
+            if ((offsetLocal - offsetAdjusted) < 0) { // Gap (spring forward): offsetLocal < offsetAdjusted (e.g., +03:00 to +04:00)
                 // if we just return offsetAdjusted then the time is pushed
                 // back before the transition, whereas it should be
                 // on or after the transition
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
                     return offsetLocal;
                 }
+            } else { // Overlap (fall back): offsetLocal > offsetAdjusted (e.g., +04:00 to +03:00)
+                // During overlap, favour daylight (summer) time, which corresponds to offsetLocal.
+                return offsetLocal;
             }
         }
+
+        // If offsetLocal == offsetAdjusted, it's either unambiguous, or it's an overlap
+        // where the initial getOffset(instantLocal) already defaulted to the standard offset.
+        // We need to check if the daylight offset is also a valid mapping.
+        // This is done by testing an offset one hour greater than the resolved offset.
+        // The one-hour adjustment covers most common DST transitions.
+        final int offsetOneHourForward = getOffset(instantAdjustAdjusted + 3600000L); // Check offset an hour ahead (UTC)
+        if (getOffset(instantLocal - offsetOneHourForward) == offsetOneHourForward) {
+            // If the time local - offsetOneHourForward results in an actual offset that matches offsetOneHourForward,
+            // it means this is a valid mapping for instantLocal.
+            // If offsetOneHourForward is greater than offsetAdjusted, it implies it's a daylight offset.
+            // We favor daylight in ambiguous cases.
+            if (offsetOneHourForward > offsetAdjusted) {
+                return offsetOneHourForward;
+            }
+        }
+        
         return offsetAdjusted;
     }
\ No newline at end of file
