diff --git a/tmp/69451159-805f-4fb2-984e-e90200ed8a2b_buggy.java b/tmp/737da559-2d4a-4f08-903b-d3dac83af6e3_fixed.java
index 05aaf2d..da53895 100644
--- a/tmp/69451159-805f-4fb2-984e-e90200ed8a2b_buggy.java
+++ b/tmp/737da559-2d4a-4f08-903b-d3dac83af6e3_fixed.java
@@ -1,56 +1,105 @@
+    import org.joda.time.DateTimeConstants;
+
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
+        // This initial guess treats `instantLocal` as if it were a UTC instant
+        // to find an approximate offset.
         final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
+        
+        // adjust instantLocal using the estimate to get a candidate UTC instant,
+        // then recalculate the offset at this estimated UTC instant.
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+
+        // If the two calculated offsets differ, we are near a DST boundary.
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
+            // Case 1: DST Gap (e.g., Spring Forward, 01:00 becomes 02:00 local, skipping 01:xx)
+            // `offsetLocal` (standard offset, e.g., +1) is less than `offsetAdjusted` (daylight offset, e.g., +2).
+            // (offsetLocal - offsetAdjusted) < 0
             if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
+                // Javadoc says for gaps: "return an offset suitable for calculating an instant after any DST gap."
+                // Example: "Input: 01:00 Output: 02:00". This means the *larger* (daylight) offset should be returned.
+                // `offsetAdjusted` typically represents this larger offset.
+                return offsetAdjusted;
+            }
+            // Case 2: DST Overlap (e.g., Fall Back, 02:00 occurs twice local, first +4 then +3)
+            // `offsetLocal` (daylight offset, e.g., +4) is greater than `offsetAdjusted` (standard offset, e.g., +3).
+            // (offsetLocal - offsetAdjusted) > 0 (implicitly handled by the `else` block)
+            else {
+                // Javadoc says for overlaps: "always favour daylight (summer) time over standard (winter) time."
+                // `offsetLocal` in this branch is likely the daylight offset. We should prefer it if it's consistent.
+                if (getOffset(instantLocal - offsetLocal) == offsetLocal) {
                     return offsetLocal;
                 }
+                // If `offsetLocal` (daylight) is not consistent (e.g., `instantLocal` is numerically past the actual daylight period in UTC),
+                // fall back to `offsetAdjusted` (standard).
+                return offsetAdjusted;
+            }
         }
+        
+        // If `offsetLocal == offsetAdjusted`, the initial two-step iteration converged.
+        // This covers normal times and also the problematic overlap scenario (like Moscow Autumn)
+        // where the initial `getOffset(instantLocal)` and subsequent `getOffset(instantAdjusted)`
+        // both resolve to the *standard* offset, failing to pick the daylight offset as per the rule.
+        // We need to explicitly check for this ambiguous overlap case.
+        
+        // Check if `instantLocal` could also map consistently to a 'daylight' offset
+        // that is typically 1 hour different from the current `offsetAdjusted` (which is assumed to be standard).
+        // This is done by estimating a UTC instant one hour earlier than the current `instantAdjusted`
+        // and checking if its offset is consistent with `instantLocal`.
+        
+        // Try an alternative offset, assuming a 1-hour difference typical for DST.
+        // `instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR` would try an instant 1 hour *later* in UTC,
+        // `instantAdjusted - DateTimeConstants.MILLIS_PER_HOUR` would try an instant 1 hour *earlier* in UTC.
+        // For overlaps, the desired daylight time is the one that occurred *earlier* in UTC.
+        // So, we calculate an alternative offset using a UTC instant that is one hour "behind" `instantAdjusted`
+        // relative to the standard/daylight difference.
+        
+        // This `offsetAlternative` represents the offset that would apply to `instantLocal` if it
+        // were interpreted with the *other* (e.g., daylight) offset in an overlap.
+        final int offsetAlternative = getOffset(instantLocal - (offsetAdjusted + DateTimeConstants.MILLIS_PER_HOUR));
+        
+        // If this alternative offset consistently maps back to `instantLocal` (meaning `instantLocal - offsetAlternative` gives `offsetAlternative`),
+        // AND if this `offsetAlternative` is numerically "larger" (more positive or less negative) than `offsetAdjusted`
+        // (which implies it's the daylight offset in common DST rules), then we prefer it.
+        if (getOffset(instantLocal - offsetAlternative) == offsetAlternative && offsetAlternative > offsetAdjusted) {
+            return offsetAlternative;
         }
+        
+        // If no special DST handling applied or the explicit daylight check for overlap didn't find a better match,
+        // return the initially converged `offsetAdjusted`.
         return offsetAdjusted;
     }
\ No newline at end of file
