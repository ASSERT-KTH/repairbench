diff --git a/tmp/5b094581-a610-4e37-85ea-65f4a1e6e904_buggy.java b/tmp/de9cbf64-8a62-4344-9295-6458e3e93ad6_fixed.java
index 65c0e7b..e264657 100644
--- a/tmp/5b094581-a610-4e37-85ea-65f4a1e6e904_buggy.java
+++ b/tmp/de9cbf64-8a62-4344-9295-6458e3e93ad6_fixed.java
@@ -1,127 +1,205 @@
     /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
-        boolean inverted = false;
+        // larger than the right bound. This flag is important for the return
+        // conditions, especially when dealing with specific sides (LEFT_SIDE, RIGHT_SIDE).
+        boolean inverted = (x0 > x1);
+
+        // This variable tracks which side (x0 or x1) was the 'fixed' point in the
+        // *previous* iteration. This is crucial for Regula Falsi, Illinois, and
+        // Pegasus methods to detect and handle stagnation.
+        // -1: x0 was fixed (x1 was updated).
+        //  1: x1 was fixed (x0 was updated).
+        //  0: No fixed side yet (first iteration).
+        int fixedSide = 0;
 
         // Keep finding better approximations.
         while (true) {
-            // Calculate the next approximation.
+            // Calculate the next approximation using the secant method formula.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
+            // Determine which side of the interval (x0 or x1) to update based on the sign of f(x) * f(x1).
+            // If f(x) and f(x1) have opposite signs, the root is in [x, x1].
+            // This means x0 (and f0) should be updated to x (and fx), and x1 (and f1) are kept.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
+                // x1 is the "fixed" point in this iteration (its value is retained).
+                // Apply method-specific modifications to f1 (the function value at the fixed point).
+                switch (method) {
+                case ILLINOIS:
+                    // If x1 was also the fixed side in the previous iteration, halve f1.
+                    if (fixedSide == 1) {
+                        f1 *= 0.5;
+                    }
+                    break;
+                case PEGASUS:
+                    // If x1 was also the fixed side in the previous iteration, apply Pegasus scaling.
+                    // The formula is f_fixed *= f_moving / (f_moving + f_new_fixed).
+                    // Here, x1 is fixed, f1 is f_fixed. x0 is moving, f0 is f_moving. fx is f_new_fixed.
+                    if (fixedSide == 1) {
+                         f1 *= f0 / (f0 + fx);
+                    }
+                    break;
+                case REGULA_FALSI:
+                    // For pure Regula Falsi, if x1 is fixed and we get a stagnation,
+                    // we adjust x1. This is symmetric to the adjustment for x0.
+                    // Stagnation occurs if x (new estimate) is numerically identical to x1 (fixed point).
+                    if (fixedSide == 1) {
+                        // The original `x == x1` check seems to indicate this, but it implies `x` was `x0` or `x1`.
+                        // A more robust check might be `FastMath.abs(x - x1) < FastMath.ulp(x1)`.
+                        // For simplicity, we use the original code's direct comparison `x == x1`.
+                        if (x == x1) {
+                            x1 = 0.5 * (x0 + x1 + FastMath.max(rtol * FastMath.abs(x0), atol));
+                            f1 = computeObjectiveValue(x1);
+                        }
+                    }
+                    break;
+                default:
+                    throw new MathInternalError(); // Should never happen.
+                }
+
+                // Update x0 (and f0) with the new approximation.
+                x0 = x;
+                f0 = fx;
+                fixedSide = 1; // Mark x1 as the fixed side for the next iteration.
             } else {
+                // f(x) and f(x1) have the same sign. Since f0 * f1 < 0, this implies f0 * fx < 0.
+                // So the root is in [x0, x].
+                // This means x1 (and f1) should be updated to x (and fx), and x0 (and f0) are kept.
+                // x0 is the "fixed" point in this iteration (its value is retained).
+                // Apply method-specific modifications to f0 (the function value at the fixed point).
                 switch (method) {
                 case ILLINOIS:
+                    // If x0 was also the fixed side in the previous iteration, halve f0.
+                    if (fixedSide == -1) {
                         f0 *= 0.5;
+                    }
                     break;
                 case PEGASUS:
+                    // If x0 was also the fixed side in the previous iteration, apply Pegasus scaling.
+                    // Here, x0 is fixed, f0 is f_fixed. x1 is moving, f1 value. fx is f_new_fixed.
+                    // So, f0 *= f1 / (f1 + fx).
+                    if (fixedSide == -1) {
                         f0 *= f1 / (f1 + fx);
+                    }
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
+                    // This was the original location for Regula Falsi's stagnation fix.
+                    // Apply if x0 has been fixed in the previous iteration.
+                    if (fixedSide == -1) {
+                        if (x == x1) { // Current x equals old x1, which was the fixed point.
                             x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
                             f0 = computeObjectiveValue(x0);
                         }
+                    }
                     break;
                 default:
-                    // Should never happen.
-                    throw new MathInternalError();
+                    throw new MathInternalError(); // Should never happen.
                 }
-            }
-            // Update from [x0, x1] to [x0, x].
+
+                // Update x1 (and f1) with the new approximation.
                 x1 = x;
                 f1 = fx;
+                fixedSide = -1; // Mark x0 as the fixed side for the next iteration.
+            }
+
+            // The `inverted` flag is initialized once and its state generally
+            // propagates correctly as long as x remains within the interval
+            // and the endpoint updates are consistent. No explicit change to `inverted` is needed here.
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
+                    // If inverted, x1 is the left bound. Otherwise, x0 is left.
+                    // Since f1 is within ftol, x1 is a good candidate.
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
+                    // If not inverted, x1 is the right bound.
+                    // Since f1 is within ftol, x1 is a good candidate.
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
                 }
             }
 
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    return x1; // Returns the last computed approximation.
                 case LEFT_SIDE:
+                    // If inverted, x1 is the value on the "left" side (numerically smaller).
+                    // Otherwise, x0 is the value on the "left" side.
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
+                    // If inverted, x0 is the value on the "right" side (numerically larger).
+                    // Otherwise, x1 is the value on the "right" side.
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
+                    // Return the x whose function value is less than or equal to 0.
+                    // Since f0 and f1 bracket the root, one must be <=0 and the other >=0.
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
+                    // Return the x whose function value is greater than or equal to 0.
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
                 }
             }
         }
     }
\ No newline at end of file
