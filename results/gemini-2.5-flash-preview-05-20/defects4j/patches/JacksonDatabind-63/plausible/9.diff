diff --git a/tmp/8cbbab96-7c50-4817-af69-b44f0b19f7c6_buggy.java b/tmp/0c08139d-80cb-4464-b59d-609a46780328_fixed.java
index f955f47..0c3402a 100644
--- a/tmp/8cbbab96-7c50-4817-af69-b44f0b19f7c6_buggy.java
+++ b/tmp/0c08139d-80cb-4464-b59d-609a46780328_fixed.java
@@ -1,34 +1,40 @@
         public String getDescription() {
             if (_desc == null) {
                 StringBuilder sb = new StringBuilder();
 
                 if (_from == null) { // can this ever occur?
                     sb.append("UNKNOWN");
                 } else {
                     Class<?> cls = (_from instanceof Class<?>) ? (Class<?>)_from : _from.getClass();
-                    // Hmmh. Although Class.getName() is mostly ok, it does look
-                    // butt-ugly for arrays.
-                    // 06-Oct-2016, tatu: as per [databind#1403], `getSimpleName()` not so good
-                    //   as it drops enclosing class. So let's try bit different approach
-                    String pkgName = com.fasterxml.jackson.databind.util.ClassUtil.getPackageName(cls);
-                    if (pkgName != null) {
-                        sb.append(pkgName);
-                        sb.append('.');
-                    }
-                    sb.append(cls.getSimpleName());
+                    // The original code used a combination of ClassUtil.getPackageName() and cls.getSimpleName().
+                    // This approach correctly handled non-nested classes by producing "pkg.ClassName".
+                    // However, for inner (nested) classes like 'Outer$Inner', cls.getSimpleName() returns "Inner",
+                    // leading to "pkg.Inner" instead of the expected "pkg.Outer$Inner".
+                    // The test failures explicitly show that the full name including the enclosing class
+                    // (e.g., 'ExceptionPathTest$Outer') is expected.
+                    //
+                    // Class.getName() returns the fully qualified name, including the '$' separator for inner classes
+                    // (e.g., "com.package.Outer$Inner"). This aligns with the test expectations.
+                    //
+                    // The comment "Although Class.getName() is mostly ok, it does look butt-ugly for arrays."
+                    // refers to array type names like "[Ljava.lang.String;" for String[]. While this is
+                    // less readable than "String[]", the correctness for inner class names is prioritized
+                    // given the failing tests. No test cases provided demonstrate a failure due to array
+                    // naming, only inner class naming.
+                    sb.append(cls.getName());
                 }
                 sb.append('[');
                 if (_fieldName != null) {
                     sb.append('"');
                     sb.append(_fieldName);
                     sb.append('"');
                 } else if (_index >= 0) {
                     sb.append(_index);
                 } else {
                     sb.append('?');
                 }
                 sb.append(']');
                 _desc = sb.toString();
             }
             return _desc;
         }
\ No newline at end of file
