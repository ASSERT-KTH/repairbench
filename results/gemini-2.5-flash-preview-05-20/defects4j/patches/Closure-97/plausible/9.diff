diff --git a/tmp/4236f81b-72db-4d1c-8c1c-8b2ed61dc122_buggy.java b/tmp/cee39fe9-3f00-4ce7-8c07-e23673707373_fixed.java
index 1126687..c733b96 100644
--- a/tmp/4236f81b-72db-4d1c-8c1c-8b2ed61dc122_buggy.java
+++ b/tmp/cee39fe9-3f00-4ce7-8c07-e23673707373_fixed.java
@@ -1,65 +1,73 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // Java as a Java int cannot represent the unsigned 32-bit number
+          // where JavaScript can. The Java >>> operator performs an unsigned
+          // shift, but its result is still an 'int'. If the bit pattern of
+          // this 'int' represents a number larger than Integer.MAX_VALUE
+          // (i.e., a negative 'int' value), casting it directly to a double
+          // would preserve the negative sign.
+          // To get the correct unsigned 32-bit value as a double, we first
+          // perform the unsigned shift on the int, then interpret that int's
+          // bit pattern as an unsigned long, and finally convert to double.
+          int shiftedInt = lvalInt >>> rvalInt;
+          result = (double) (shiftedInt & 0xFFFFFFFFL);
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
