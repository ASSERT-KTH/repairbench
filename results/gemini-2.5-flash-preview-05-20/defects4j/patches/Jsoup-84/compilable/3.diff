diff --git a/tmp/e214511e-3e16-4661-bb3c-9c7537ef417c_buggy.java b/tmp/e348b06b-5809-4575-b98f-04af95e7a5eb_fixed.java
index 98dde53..4255dd3 100644
--- a/tmp/e214511e-3e16-4661-bb3c-9c7537ef417c_buggy.java
+++ b/tmp/e348b06b-5809-4575-b98f-04af95e7a5eb_fixed.java
@@ -1,34 +1,63 @@
         public void head(org.jsoup.nodes.Node source, int depth) {
             namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
             if (source instanceof org.jsoup.nodes.Element) {
                 org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
-                String prefix = updateNamespaces(sourceEl);
-                String namespace = namespacesStack.peek().get(prefix);
-                String tagName = sourceEl.tagName();
+                // Determine the prefix of the current Jsoup element's tag.
+                String sourceElPrefix = sourceEl.tagName().contains(":") ? sourceEl.tagName().substring(0, sourceEl.tagName().indexOf(":")) : null;
+
+                // Update the namespace stack based on xmlns attributes found on the current element.
+                // This call updates `namespacesStack.peek()` with any new namespace declarations.
+                // It must be called for its side-effect, as it's crucial for inheriting namespaces down the tree.
+                updateNamespaces(sourceEl);
+
+                // Determine the namespace URI for the current element's tag.
+                String elementNamespaceUri = null;
+                if (sourceElPrefix != null) {
+                    // If a prefix exists, look up its corresponding URI in the current namespace scope.
+                    elementNamespaceUri = namespacesStack.peek().get(sourceElPrefix);
+                } else {
+                    // If no prefix, check for a default namespace (xmlns="some_uri").
+                    elementNamespaceUri = namespacesStack.peek().get("");
+                }
+
+                String tagName = sourceEl.tagName(); // The full qualified name, e.g., "fb:like" or "html".
+
+                Element el;
+                // Fix for NAMESPACE_ERR:
+                // According to W3C DOM spec, createElementNS(null, "prefix:local") throws NAMESPACE_ERR.
+                // If an element has a prefix but that prefix is undeclared (elementNamespaceUri is null),
+                // we should create it as a non-namespaced element using createElement() to avoid the error.
+                // This mimics a more tolerant, browser-like behavior for such cases.
+                if (elementNamespaceUri == null && sourceElPrefix != null) {
+                    // This is the case of an undeclared prefixed element (e.g., <fb:like>).
+                    // Use createElement for non-namespaced creation.
+                    el = doc.createElement(tagName);
+                } else {
+                    // Standard case: either no prefix, or prefix is declared (even if default/empty namespace).
+                    el = doc.createElementNS(elementNamespaceUri, tagName);
+                }
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
                 copyAttributes(sourceEl, el);
                 if (dest == null) { // sets up the root
                     doc.appendChild(el);
                 } else {
                     dest.appendChild(el);
                 }
                 dest = el; // descend
             } else if (source instanceof org.jsoup.nodes.TextNode) {
                 org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
                 Text text = doc.createTextNode(sourceText.getWholeText());
                 dest.appendChild(text);
             } else if (source instanceof org.jsoup.nodes.Comment) {
                 org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
                 Comment comment = doc.createComment(sourceComment.getData());
                 dest.appendChild(comment);
             } else if (source instanceof org.jsoup.nodes.DataNode) {
                 org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
                 Text node = doc.createTextNode(sourceData.getWholeData());
                 dest.appendChild(node);
             } else {
                 // unhandled
             }
         }
