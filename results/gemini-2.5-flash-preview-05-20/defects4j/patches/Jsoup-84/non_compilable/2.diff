diff --git a/tmp/ac7b2e88-685a-46f5-8ae1-e6943497408b_buggy.java b/tmp/d57b8a38-25f3-47fb-aaa3-83738a0cc04e_fixed.java
index 98dde53..37d0a33 100644
--- a/tmp/ac7b2e88-685a-46f5-8ae1-e6943497408b_buggy.java
+++ b/tmp/d57b8a38-25f3-47fb-aaa3-83738a0cc04e_fixed.java
@@ -1,34 +1,50 @@
         public void head(org.jsoup.nodes.Node source, int depth) {
             namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
             if (source instanceof org.jsoup.nodes.Element) {
                 org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
                 String prefix = updateNamespaces(sourceEl);
                 String namespace = namespacesStack.peek().get(prefix);
-                String tagName = sourceEl.tagName();
+                String tagName = sourceEl.tagName(); // e.g., "fb:like" or "div"
+
+                Element el;
+                // The org.w3c.dom.DOMException: NAMESPACE_ERR occurs when createElementNS() is called
+                // with a null namespaceURI and a qualifiedName (tagName) that contains a colon.
+                // This happens if a tag like "fb:like" is encountered and the "fb" prefix
+                // has not been declared with an xmlns:fb attribute, leading 'namespace' to be null.
+                // To avoid this specific DOMException, we must not pass a prefixed tag name
+                // when the namespaceURI is null. In such cases, the local name should be used.
+                // This aligns with how some DOM implementations or XML parsers handle undeclared prefixes
+                // by treating them as part of the local name in the default (null) namespace.
+                if (namespace == null && tagName.contains(":")) {
+                    // Extract the local name from the tagName (e.g., "like" from "fb:like")
+                    String localName = org.jsoup.internal.StringUtil.split(tagName, ":")[1];
+                    el = doc.createElementNS(null, localName);
+                } else {
+                    // For declared namespaces or non-prefixed tags, use the original namespace and tag name.
+                    el = doc.createElementNS(namespace, tagName);
+                }
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
                 copyAttributes(sourceEl, el);
                 if (dest == null) { // sets up the root
                     doc.appendChild(el);
                 } else {
                     dest.appendChild(el);
                 }
                 dest = el; // descend
             } else if (source instanceof org.jsoup.nodes.TextNode) {
                 org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
                 Text text = doc.createTextNode(sourceText.getWholeText());
                 dest.appendChild(text);
             } else if (source instanceof org.jsoup.nodes.Comment) {
                 org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
                 Comment comment = doc.createComment(sourceComment.getData());
                 dest.appendChild(comment);
             } else if (source instanceof org.jsoup.nodes.DataNode) {
                 org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
                 Text node = doc.createTextNode(sourceData.getWholeData());
                 dest.appendChild(node);
             } else {
                 // unhandled
             }
         }
\ No newline at end of file
