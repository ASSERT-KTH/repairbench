diff --git a/tmp/c4703050-f387-489c-83cf-9b0827e9f035_buggy.java b/tmp/3cc7d066-ef2c-42f7-a9e0-db0e538bb267_fixed.java
index 72a422c..aa53b3a 100644
--- a/tmp/c4703050-f387-489c-83cf-9b0827e9f035_buggy.java
+++ b/tmp/3cc7d066-ef2c-42f7-a9e0-db0e538bb267_fixed.java
@@ -1,51 +1,90 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        // Uses -2 to ensure there is something after the &#.
+        // For example, if input is "&#", index + 2 would be out of bounds.
+        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
                 // Check there's more than just an x after the &#
+                // If 'start' now points past the end of the sequence, it's just "&#x" or "&#X",
+                // which is not a complete entity, so return 0.
+                if (start >= seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Note that this supports character codes without a ; on the end.
+            // The loop identifies the end of the numeric part of the entity by checking
+            // if the character is a valid digit (decimal or hex).
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                if (isHex) {
+                    // For hex, valid characters are '0'-'9', 'a'-'f', 'A'-'F'
+                    if (!Character.isDigit(c) && !((c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
+                        // Found a non-hex-digit character, this is the end of the numeric part.
+                        break;
+                    }
+                } else { // Decimal
+                    // For decimal, valid characters are '0'-'9'
+                    if (!Character.isDigit(c)) {
+                        // Found a non-digit character, this is the end of the numeric part.
+                        break;
+                    }
+                }
                 end++;
             }
 
             int entityValue;
             try {
+                // Parse the numeric part of the entity.
+                // If subSequence(start, end) is empty (e.g., for "&#x;" or "&#;"),
+                // Integer.parseInt will throw NumberFormatException, caught below.
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
+                // If parsing fails (e.g., no digits found or invalid characters),
+                // treat it as not a valid entity and return 0.
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                 return 0;
             }
 
-            if(entityValue > 0xFFFF) {
+            // After parsing the numeric part, check for an optional semicolon.
+            // This is separate from the numeric parsing loop to handle cases where ';' is missing.
+            int consumedNumericChars = end - start;
+            int semicolonLength = 0;
+            if (end < seqEnd && input.charAt(end) == ';') {
+                semicolonLength = 1;
+            }
+
+            // Write the translated character(s)
+            if (entityValue > 0xFFFF) { // Handle surrogate pairs for Unicode supplementary characters
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
-            } else {
+            } else { // Basic Multilingual Plane (BMP) characters
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate total characters consumed from the input:
+            // 2 for "&#"
+            // 1 for 'x' or 'X' if it was a hexadecimal entity
+            // The length of the numeric part (e.g., "30" in "&#x30")
+            // 1 for the optional semicolon
+            return 2 + (isHex ? 1 : 0) + consumedNumericChars + semicolonLength;
         }
-        return 0;
+        return 0; // Not an entity starting with "&#" or not enough characters to be one
     }
\ No newline at end of file
