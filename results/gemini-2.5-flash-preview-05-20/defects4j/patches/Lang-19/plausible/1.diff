diff --git a/tmp/819f285e-53dc-482a-83a2-744873ac9609_buggy.java b/tmp/e5be9df3-6f28-4dda-a170-a9d899f6e51d_fixed.java
index 72a422c..e2f53ff 100644
--- a/tmp/819f285e-53dc-482a-83a2-744873ac9609_buggy.java
+++ b/tmp/e5be9df3-6f28-4dda-a170-a9d899f6e51d_fixed.java
@@ -1,51 +1,85 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if there's enough characters for at least the first digit/char after &#
+            if (start >= seqEnd) {
+                return 0; // Not a valid entity pattern (e.g., "Test &#")
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
-                // Check there's more than just an x after the &#
+                // Check there's more than just an x after the &#x
+                if (start >= seqEnd) {
+                    return 0; // Not a valid entity pattern (e.g., "Test &#x")
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Note that this supports character codes without a ; on the end.
+            // It stops at the first non-numeric/non-hex character or at a semicolon, or at the end of input.
+            while(end < seqEnd) {
+                char c = input.charAt(end);
+                if (c == ';') {
+                    break; // Semicolon terminates the entity
+                }
+                if (isHex) {
+                    // Check if it's a valid hex digit
+                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
+                        break; // Not a hex digit, so entity ends here
+                    }
+                } else { // Decimal
+                    // Check if it's a valid decimal digit
+                    if (!(c >= '0' && c <= '9')) {
+                        break; // Not a decimal digit, so entity ends here
+                    }
+                }
                 end++;
             }
 
             int entityValue;
             try {
+                // If start == end, it means there were no digits between &#(x) and the terminator/end.
+                // This would lead to Integer.parseInt("") which throws NumberFormatException.
+                // The tests expect such cases to return 0, which is handled by the catch block.
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            // System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]"); // Original debug print
                 return 0;
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate characters consumed:
+            // 2 for "&#"
+            // (isHex ? 1 : 0) for "x"
+            // (end - start) for the numeric part
+            // 1 for ";" if it was present and consumed
+            int charsConsumed = 2 + (end - start) + (isHex ? 1 : 0);
+            if (end < seqEnd && input.charAt(end) == ';') {
+                charsConsumed += 1;
+            }
+            return charsConsumed;
         }
         return 0;
     }
\ No newline at end of file
