diff --git a/tmp/5eab5c42-5557-4fd7-86e9-05de2921e663_buggy.java b/tmp/42ad09ca-5a5e-47e6-ab47-76acd31d689f_fixed.java
index 72a422c..68fca4a 100644
--- a/tmp/5eab5c42-5557-4fd7-86e9-05de2921e663_buggy.java
+++ b/tmp/42ad09ca-5a5e-47e6-ab47-76acd31d689f_fixed.java
@@ -1,51 +1,80 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
+
+            // Check if there's any content after "C&D#"
+            if (start >= seqEnd) { // e.g., "Test &#"
+                return 0; // Not a valid numeric entity
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
-                // Check there's more than just an x after the &#
+                // Check if there's content after "C&Dx" or "C&DX"
+                if (start >= seqEnd) { // e.g., "Test &#x" or "Test &#X"
+                    return 0; // Not a valid numeric entity
+                }
+            }
+
+            int numericEnd = start;
+            // Find the end of the numeric sequence, stopping at the first non-digit
+            while (numericEnd < seqEnd) {
+                char ch = input.charAt(numericEnd);
+                if (isHex) {
+                    if (!((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {
+                        break; // Not a hex digit
+                    }
+                } else { // Decimal
+                    if (!(ch >= '0' && ch <= '9')) {
+                        break; // Not a decimal digit
+                    }
+                }
+                numericEnd++;
+            }
+
+            // If no digits were found at all (e.g., "&#;" or "&#x;")
+            if (numericEnd == start) {
+                return 0;
             }
 
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+            // Now numericEnd points to the first non-digit char, or seqEnd.
+            // Check for semicolon immediately after the numeric part.
+            boolean semiColonFound = false;
+            if (numericEnd < seqEnd && input.charAt(numericEnd) == ';') {
+                semiColonFound = true;
             }
 
             int entityValue;
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+                // Parse the substring from 'start' to 'numericEnd'
+                // input.subSequence(start, numericEnd) extracts the numeric part
+                entityValue = Integer.parseInt(input.subSequence(start, numericEnd).toString(), isHex ? 16 : 10);
             } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                // If parsing fails (e.g., non-numeric characters found within the expected number range),
+                // it's not a valid entity, so return 0 (no translation).
                 return 0;
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate the total number of characters consumed.
+            // This includes the "&#" prefix, the 'x' (if hex), the digits, and the optional semicolon.
+            return numericEnd - index + (semiColonFound ? 1 : 0);
         }
-        return 0;
+        return 0; // Not a numeric entity.
     }
\ No newline at end of file
