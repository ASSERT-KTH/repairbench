diff --git a/tmp/c00157bf-2967-4bcf-b46d-1d8993449d4c_buggy.java b/tmp/6d7260b3-cae3-4dde-84eb-d28694e3bd70_fixed.java
index 72a422c..c10b8c3 100644
--- a/tmp/c00157bf-2967-4bcf-b46d-1d8993449d4c_buggy.java
+++ b/tmp/6d7260b3-cae3-4dde-84eb-d28694e3bd70_fixed.java
@@ -1,51 +1,101 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if there's a character at 'start' (after &#)
+            // e.g., for "Test &#", start would be input.length(), causing IndexOutOfBoundsException
+            if (start >= seqEnd) {
+                return 0; // Not enough characters for a valid entity starting with &#
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
-                // Check there's more than just an x after the &#
+                // Check there's more than just an x after the &# (e.g., for "Test &#x")
+                // If 'x' is the last character, start would be input.length(), causing IndexOutOfBoundsException
+                if (start >= seqEnd) {
+                    return 0; // Not enough characters for a valid hex entity (no digits follow 'x')
+                }
+            }
+
+            int endOfNumber = start; // This will be the exclusive end for subSequence
+            boolean foundSemicolon = false;
+
+            // Find the end of the numeric/hex value.
+            // It either ends with a semicolon, or the first non-numeric/hex character, or the end of the string.
+            while(endOfNumber < seqEnd) {
+                char c = input.charAt(endOfNumber);
+                if (c == ';') {
+                    foundSemicolon = true;
+                    // Semicolon marks the explicit end of the number part.
+                    // We consume it, but it's not part of the parsed number itself.
+                    endOfNumber++; // Increment to include ';' in consumed length
+                    break;
+                }
+                // Check if the character is a valid digit for the current base
+                if (isHex) {
+                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
+                        break; // Non-hex character marks the end of the number part
+                    }
+                } else { // Decimal
+                    if (!(c >= '0' && c <= '9')) {
+                        break; // Non-decimal character marks the end of the number part
+                    }
+                }
+                endOfNumber++;
+            }
+
+            // At this point, `endOfNumber` is the index of the first character *after* the numeric part.
+            // If a semicolon was found, `endOfNumber` is the index *after* the semicolon.
+            // `input.subSequence(start, parseEnd)` will be the string to parse.
+            int parseEnd = endOfNumber;
+            if (foundSemicolon) {
+                parseEnd--; // Exclude the semicolon from the part to be parsed as a number
             }
 
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+            // Handle cases where no digits were found between &#[x] and the end marker, e.g., "&#x;" or "&#;"
+            if (start == parseEnd) {
+                return 0; // No digits found, not a valid entity to translate
             }
 
             int entityValue;
             try {
                 if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(input.subSequence(start, parseEnd).toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(input.subSequence(start, parseEnd).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                // Not a valid number entity (e.g., "&#xnotanumber;")
                 return 0;
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate consumed length:
+            // '&' (1 char)
+            // '#' (1 char)
+            // 'x' or 'X' (1 char, if isHex)
+            // Numeric digits (parseEnd - start chars)
+            // ';' (1 char, if foundSemicolon)
+            // The `endOfNumber` variable already correctly tracks the index after the last consumed character.
+            // The total consumed length is `endOfNumber - index`.
+            return endOfNumber - index;
         }
         return 0;
     }
\ No newline at end of file
