diff --git a/tmp/4d7adf71-9667-4dac-a112-ea917b35fac3_buggy.java b/tmp/5b9ff5bf-3bf4-458b-8a26-3eb602806292_fixed.java
index 72a422c..a01ad21 100644
--- a/tmp/4d7adf71-9667-4dac-a112-ea917b35fac3_buggy.java
+++ b/tmp/5b9ff5bf-3bf4-458b-8a26-3eb602806292_fixed.java
@@ -1,51 +1,89 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
+
+            // Check if there's any content after "&#"
+            // e.g., "Test &#" -> index=5, start=7. seqEnd=7. start >= seqEnd is true.
+            if (start >= seqEnd) {
+                return 0; // Malformed entity like "Test &#"
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
                 // Check there's more than just an x after the &#
+                // e.g., "Test &#x" -> index=5, start was 7, becomes 8. seqEnd=8. start >= seqEnd is true.
+                if (start >= seqEnd) {
+                    return 0; // Malformed entity like "Test &#x"
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // The loop should stop at the first non-numeric/non-hex character, or at a semicolon.
+            // It should also respect the end of the input sequence.
+            while(end < seqEnd) {
+                char c = input.charAt(end);
+                if (c == ';') {
+                    // Semicolon found, this is the end of the entity
+                    break;
+                }
+                if (isHex) {
+                    // For hex, allow '0'-'9', 'a'-'f', 'A'-'F'
+                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
+                        // Not a hex digit, stop parsing the entity value
+                        break;
+                    }
+                } else { // Decimal
+                    // For decimal, allow '0'-'9'
+                    if (!(c >= '0' && c <= '9')) {
+                        // Not a decimal digit, stop parsing the entity value
+                        break;
+                    }
+                }
                 end++;
             }
 
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                // This entity did not contain a valid number, so it's not translated.
+                // The original code included System.err.println which is usually removed for production.
+                // System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
                 return 0;
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate consumed characters:
+            // 2 for "&#"
+            // (end - start) for the numeric part
+            // (isHex ? 1 : 0) for 'x' if present
+            // +1 for the ';' if it was present
+            int charsConsumed = 2 + (end - start) + (isHex ? 1 : 0);
+            if (end < seqEnd && input.charAt(end) == ';') {
+                charsConsumed += 1;
             }
-        return 0;
+            return charsConsumed;
+        }
+        return 0; // Not a numeric entity, return 0
     }
\ No newline at end of file
