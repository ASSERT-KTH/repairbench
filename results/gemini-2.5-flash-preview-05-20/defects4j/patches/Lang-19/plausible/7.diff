diff --git a/tmp/251644b8-60ce-444f-89ff-b8122a66cc26_buggy.java b/tmp/0cfe9204-1c36-4d5b-a011-d03de0ac151e_fixed.java
index 72a422c..77f7562 100644
--- a/tmp/251644b8-60ce-444f-89ff-b8122a66cc26_buggy.java
+++ b/tmp/0cfe9204-1c36-4d5b-a011-d03de0ac151e_fixed.java
@@ -1,51 +1,92 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
+
+            // Check if there's any character after "&#".
+            // For example, if input is "Test &#", start would be equal to seqEnd, causing SIOOBE.
+            if (start >= seqEnd) {
+                return 0;
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+                // If it's hex, ensure there's a character *after* 'x'/'X'.
+                // For example, if input is "Test &#x", start+1 would be equal to seqEnd, causing SIOOBE.
+                if (start + 1 >= seqEnd) {
+                    return 0;
+                }
+                start++; // Move past 'x' or 'X'
                 isHex = true;
-
-                // Check there's more than just an x after the &#
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+            // Note that this supports character codes without a ; on the end.
+            // It should stop at the first non-digit character (or non-hex digit for hex) or a semicolon.
+            while(end < seqEnd) {
+                char current = input.charAt(end);
+                if (current == ';') {
+                    break; // Found the end of the entity
+                }
+                // Check if current character is a valid digit for the base
+                if (isHex) {
+                    if (!((current >= '0' && current <= '9') ||
+                          (current >= 'a' && current <= 'f') ||
+                          (current >= 'A' && current <= 'F'))) {
+                        break; // Not a hex digit, stop parsing entity
+                    }
+                } else { // Decimal
+                    if (!(current >= '0' && current <= '9')) {
+                        break; // Not a decimal digit, stop parsing entity
+                    }
+                }
+                end++; // Valid character, continue
+            }
+
+            // If start == end, it means no digits were found (e.g., "&#;" or "&#x;").
+            // In these cases, it's not a valid numeric entity.
+            if (start == end) {
+                return 0;
             }
 
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                // If parsing fails, it's not a valid numeric entity. Return 0.
+                // The original code included a System.err.println which is typically for debugging.
+                // System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
                 return 0;
             }
 
-            if(entityValue > 0xFFFF) {
+            if(entityValue > 0xFFFF) { // Handles surrogate pairs for characters outside BMP (Basic Multilingual Plane)
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
-            } else {
+            } else { // Handles characters within BMP
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate the number of characters consumed:
+            // 2 for "&#"
+            // (isHex ? 1 : 0) for 'x' or 'X' if present
+            // (end - start) for the numeric/hex digits parsed
+            // +1 if a semicolon was consumed
+            int charsConsumed = 2 + (isHex ? 1 : 0) + (end - start);
+            if (end < seqEnd && input.charAt(end) == ';') {
+                charsConsumed += 1; // Account for the semicolon
+            }
+            return charsConsumed;
         }
         return 0;
     }
\ No newline at end of file
