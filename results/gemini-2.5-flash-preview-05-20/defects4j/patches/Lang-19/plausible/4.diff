diff --git a/tmp/1d296f57-5743-4e18-872b-2d30f0a62c6b_buggy.java b/tmp/6f2567e6-abaa-49d1-b0cb-e3ec54b3067e_fixed.java
index 72a422c..033ddfe 100644
--- a/tmp/1d296f57-5743-4e18-872b-2d30f0a62c6b_buggy.java
+++ b/tmp/6f2567e6-abaa-49d1-b0cb-e3ec54b3067e_fixed.java
@@ -1,51 +1,98 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+        // Check for "&#" prefix and ensure there's at least one character after '#' for the entity value.
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+            int start = index + 2; // Position after "&#"
+
+            // Check if there's anything after "&#"
+            // e.g., "Test &#" - In this case, 'start' would be 'seqEnd', leading to out-of-bounds.
+            if (start >= seqEnd) {
+                return 0;
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
-                start++;
+                // Check if there's anything after "&#x" or "&#X"
+                // e.g., "Test &#x" - 'start + 1' would be 'seqEnd', leading to out-of-bounds if not checked.
+                if (start + 1 >= seqEnd) {
+                    return 0;
+                }
+                start++; // Move 'start' past 'x' or 'X'
                 isHex = true;
-
-                // Check there's more than just an x after the &#
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Find the end of the numeric entity.
+            // It stops at the first non-digit/non-hex-digit character, or a semicolon, or the end of the string.
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                if (c == ';') { // Found a semicolon, this is a valid end for the entity
+                    break;
+                }
+                if (isHex) {
+                    // Check if character is a valid hex digit
+                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
+                        // Not a hex digit, so this is the end of the entity value (e.g., "&#x30 not")
+                        break;
+                    }
+                } else { // Decimal entity
+                    // Check if character is a valid decimal digit
+                    if (!(c >= '0' && c <= '9')) {
+                        // Not a decimal digit, so this is the end of the entity value (e.g., "&#123 not")
+                        break;
+                    }
+                }
                 end++;
             }
 
+            // If no digits were found between start and end (e.g., "&#x;" or "&#;"),
+            // it's not a valid entity to translate.
+            if (start == end) {
+                return 0;
+            }
+
             int entityValue;
             try {
+                // Extract the numeric part of the entity
+                String entityStr = input.subSequence(start, end).toString();
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(entityStr, 10);
                 }
             } catch (NumberFormatException nfe) {
+                // This catch handles cases where the extracted string (e.g., "not") isn't a valid number.
+                // While the loop conditions should ideally prevent this for well-formed inputs,
+                // it's kept for robustness.
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                 return 0;
             }
 
-            if(entityValue > 0xFFFF) {
+            // Write the translated character(s) to the output writer
+            if (entityValue > 0xFFFF) { // Character requires two chars (supplementary character)
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
-            } else {
+            } else { // Character can be represented by a single char
                 out.write(entityValue);
             }
 
+            // Calculate the number of characters consumed from the input
+            // 2 for "&#"
+            // (end - start) for the numeric/hex digits
+            // 1 if 'x' or 'X' was present
+            int charsConsumed = 2 + (end - start) + (isHex ? 1 : 0);
             
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // If a semicolon was found at the end position, consume it as well
+            if (end < seqEnd && input.charAt(end) == ';') {
+                charsConsumed++;
             }
-        return 0;
+            return charsConsumed;
+        }
+        return 0; // Not an entity, consume 0 characters
     }
\ No newline at end of file
