diff --git a/tmp/6329e3c8-3bac-4886-a3a0-476eb8d04b5b_buggy.java b/tmp/47725316-96b7-4fcd-bc95-4f667c27c780_fixed.java
index 72a422c..cb88f10 100644
--- a/tmp/6329e3c8-3bac-4886-a3a0-476eb8d04b5b_buggy.java
+++ b/tmp/47725316-96b7-4fcd-bc95-4f667c27c780_fixed.java
@@ -1,51 +1,101 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
+
+            // Check if there's enough characters for at least a numeric entity (e.g., "&#;")
+            // This covers "Test &#"
+            if (start >= seqEnd) {
+                return 0;
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
-                // Check there's more than just an x after the &#
+                // Check there's more than just an x after the &# (e.g., "Test &#x")
+                if (start >= seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Note that this supports character codes without a ; on the end.
+            // It will stop at a non-digit/non-hex character or the end of the input.
+            while(end < seqEnd) {
+                final char c = input.charAt(end);
+                if (c == ';') {
+                    // Semicolon found, this terminates the entity.
+                    break;
+                }
+                
+                // Check if character is a valid digit (decimal or hex)
+                boolean isDigit = Character.isDigit(c);
+                boolean isHexChar = (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
+
+                if (isHex) {
+                    if (!isDigit && !isHexChar) {
+                        // Not a hex digit, and not a semicolon, so stop parsing the number.
+                        break;
+                    }
+                } else { // Decimal entity
+                    if (!isDigit) {
+                        // Not a decimal digit, and not a semicolon, so stop parsing the number.
+                        break;
+                    }
+                }
                 end++;
             }
 
+            // If no numeric/hex characters were found after &# or &#x
+            // This covers "&#;" or "&#x;" (where 'end' would still be 'start' if only ';' follows)
+            // or "&#abc" or "&#xabc" (where 'end' would be 'start' if non-digit/hex follows)
+            if (end == start) {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            // This catch block is typically for debugging purposes or when parsing of valid number fails
+            // For valid but too large numbers, Integer.parseInt handles.
+            // For non-numeric content, the while loop should have already broken it.
+            // So, ideally this catch should not be hit for properly formatted entities ending before non-digits.
+            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]"); // Keep original debug line
                 return 0;
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
+            // Calculate the number of characters consumed.
+            // This includes '&', '#', optional 'x', the numeric part, and optional ';'.
+            int charsConsumed = 2 + (isHex ? 1 : 0) + (end - start);
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // If the loop stopped because of a semicolon, consume the semicolon.
+            // Check 'end < seqEnd' to ensure we don't access out of bounds if 'end' is 'seqEnd'.
+            if (end < seqEnd && input.charAt(end) == ';') {
+                charsConsumed++;
+            }
+
+            return charsConsumed;
         }
         return 0;
     }
