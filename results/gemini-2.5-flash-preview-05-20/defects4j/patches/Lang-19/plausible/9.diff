diff --git a/tmp/87b00ed9-f82c-48ab-8445-dcbfca52a487_buggy.java b/tmp/c7dcdf0a-0994-4162-9010-ebc888323771_fixed.java
index 72a422c..f75dc00 100644
--- a/tmp/87b00ed9-f82c-48ab-8445-dcbfca52a487_buggy.java
+++ b/tmp/c7dcdf0a-0994-4162-9010-ebc888323771_fixed.java
@@ -1,51 +1,92 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+        // The condition `index < seqEnd - 2` ensures `input.charAt(index + 2)` is safe.
+        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
+            int start = index + 2; // Position after '&#', possibly 'x' or the first digit
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
-                start++;
+                start++; // Move start past 'x' or 'X'
                 isHex = true;
 
                 // Check there's more than just an x after the &#
+                // If there's nothing after '&#x', the loop below will handle it by identifying
+                // that no digits were found, leading to the 'return 0' check.
             }
 
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+            // Find the end of the numeric entity characters
+            // entityDigitsEnd will point *after* the last valid digit that forms the number
+            int entityDigitsEnd = start; 
+            while (entityDigitsEnd < seqEnd) {
+                char ch = input.charAt(entityDigitsEnd);
+                if (ch == ';') {
+                    // Semicolon marks the end of the entity, but it's not part of the number itself.
+                    // Stop collecting digits at this point. The semicolon will be consumed later.
+                    break;
+                }
+                if (isHex) {
+                    if (!((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {
+                        // Character is not a hex digit, so the numeric part ends here
+                        break;
+                    }
+                } else { // Decimal
+                    if (!(ch >= '0' && ch <= '9')) {
+                        // Character is not a decimal digit, so the numeric part ends here
+                        break;
+                    }
+                }
+                entityDigitsEnd++;
+            }
+
+            // If no digits were found (e.g., "&#x;" or "&#;"), then no valid entity to translate
+            // This also covers cases like "&#x" or "&#" followed by end of input, where `start` equals `entityDigitsEnd`.
+            if (entityDigitsEnd == start) {
+                return 0; // No digits found, don't consume anything.
             }
 
             int entityValue;
             try {
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(input.subSequence(start, entityDigitsEnd).toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(input.subSequence(start, entityDigitsEnd).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                // This can happen if the parsed digits are too large for int, or other parsing errors.
+                System.err.println("FAIL: " + input.subSequence(start, entityDigitsEnd) + "[" + start + "][" + entityDigitsEnd + "]");
+                return 0; // Return 0 if parsing fails, meaning no characters were translated/consumed.
             }
 
+            // Write the character(s) to the output
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
+            // Calculate the total number of characters consumed from the input
+            int charsConsumed = 2; // For "&#"
+            if (isHex) {
+                charsConsumed += 1; // For "x" or "X"
+            }
+            charsConsumed += (entityDigitsEnd - start); // For the numeric digits (e.g., "30" in "&#x30")
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Check if a semicolon was present and consumed right after the digits
+            // entityDigitsEnd currently points to the character that stopped the digit collection loop (or seqEnd)
+            // If that character is a semicolon, it should be consumed as part of the entity.
+            if (entityDigitsEnd < seqEnd && input.charAt(entityDigitsEnd) == ';') {
+                charsConsumed += 1; // For ";"
+            }
+
+            return charsConsumed;
         }
         return 0;
     }
\ No newline at end of file
