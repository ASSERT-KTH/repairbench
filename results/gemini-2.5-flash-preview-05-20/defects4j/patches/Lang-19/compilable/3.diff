diff --git a/tmp/5bebdc5f-7ad5-44fc-ad76-c978fd836c01_buggy.java b/tmp/54b6242b-1061-4a6c-ba12-204c608ebd17_fixed.java
index 72a422c..a77ff0a 100644
--- a/tmp/5bebdc5f-7ad5-44fc-ad76-c978fd836c01_buggy.java
+++ b/tmp/54b6242b-1061-4a6c-ba12-204c608ebd17_fixed.java
@@ -1,51 +1,85 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if there are enough characters for 'x' or the first digit
+            // This handles cases like "Test &#"
+            if (start >= seqEnd) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
-                // Check there's more than just an x after the &#
+                // Check there's more than just an x after the &# (i.e., at least one digit)
+                // This handles cases like "Test &#x" or "Test &#X"
+                if (start >= seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+            // Loop while `end` is within bounds and the character is part of the numeric entity
+            while(end < seqEnd) {
+                char c = input.charAt(end);
+                boolean isDigitChar;
+                if (isHex) {
+                    isDigitChar = (c >= '0' && c <= '9') ||
+                                  (c >= 'a' && c <= 'f') ||
+                                  (c >= 'A' && c <= 'F');
+                } else {
+                    isDigitChar = (c >= '0' && c <= '9');
+                }
+
+                if (!isDigitChar) {
+                    // If it's not a digit, check if it's a semicolon.
+                    // If it is, consume it. If not, stop scanning for digits.
+                    if (c == ';') {
+                        end++; // consume the semicolon
+                    }
+                    break; // Stop scanning for digits (or hex digits)
+                }
+                end++; // continue scanning for digits (or hex digits)
+            }
+
+            // If start and end are the same, it means no valid number was found (e.g. &#; or &#x;)
+            // This also handles cases where no digits follow "&#" or "&#x"
+            if (end == start) {
+                return 0;
             }
 
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+            // System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                return 0; // Return 0 if the parsed sequence is not a valid number
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // The number of characters consumed from the input, starting from 'index'.
+            // 'end' is now the character *after* the full entity (including optional semicolon).
+            return end - index;
         }
         return 0;
     }
\ No newline at end of file
