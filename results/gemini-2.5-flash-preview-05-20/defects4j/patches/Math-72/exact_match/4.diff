diff --git a/tmp/c3adf158-b2cc-4904-9780-b0b70d196a09_buggy.java b/tmp/25144e3b-ae8b-4355-ad5e-d6d85d1f87fc_fixed.java
index 0fe7b81..f323660 100644
--- a/tmp/c3adf158-b2cc-4904-9780-b0b70d196a09_buggy.java
+++ b/tmp/25144e3b-ae8b-4355-ad5e-d6d85d1f87fc_fixed.java
@@ -1,67 +1,76 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            // Bug: Should return the x-value (min), not the function value (yMin)
+            setResult(min, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
+            // Note: The arguments to this solve method are typically x1, y1, x2, y2, x3, y3.
+            // The original code passed (min, yMin, initial, yInitial, min, yMin).
+            // This is likely a recursive call to a private or protected helper method.
+            // Assuming the existing arguments are correct for that helper based on context,
+            // the variable names here (yMin, yInitial) refer to function values at min and initial.
+            // This recursive call should be fine as it will eventually reach a set-result path.
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            // Bug: Should return the x-value (max), not the function value (yMax)
+            setResult(max, 0);
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
+            // Similar note as above for the recursive solve call.
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
         if (yMin * yMax > 0) {
             throw MathRuntimeException.createIllegalArgumentException(
                   NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
         }
 
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
