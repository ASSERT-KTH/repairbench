diff --git a/tmp/83a8467b-2684-4f1e-8e13-6913507f7393_buggy.java b/tmp/95bde6df-3aed-44f3-ab90-bc2eab00fbe8_fixed.java
index 0fe7b81..663f53e 100644
--- a/tmp/83a8467b-2684-4f1e-8e13-6913507f7393_buggy.java
+++ b/tmp/95bde6df-3aed-44f3-ab90-bc2eab00fbe8_fixed.java
@@ -1,67 +1,80 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0); // BUG FIX: Should set 'min' (x-value) as result, not 'yMin' (function value)
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
+            // Note: The call to solve here uses min, yMin, initial, yInitial.
+            // The original third and fourth arguments are min, yMin. The last two arguments are initial, yInitial.
+            // This suggests the internal solve method takes (x1, y1, x2, y2, x3, y3) where (x3, y3) is the initial guess.
+            // For bracketing min and initial, the interval becomes (min, initial).
+            // So, it should be solve(f, min, yMin, initial, yInitial, min, yMin) or solve(f, min, yMin, initial, yInitial, initial, yInitial) depending on which is the new 'initial' point.
+            // Given the signature solve(f, x1, y1, x2, y2, x3, y3), it correctly represents the interval [x1, x2] with initial guess x3.
+            // Here, the interval is [min, initial], so x1=min, y1=yMin, x2=initial, y2=yInitial. The initial guess would be initial.
+            // The original code implies solve(f, min, yMin, initial, yInitial, min, yMin). This seems correct for passing the new bounds and the initial guess, if the initial guess is min.
+            // However, the internal solve method usually takes x1, y1, x2, y2, x3, y3, where x3 is the initial guess.
+            // Let's assume the existing internal call structure is correct regarding parameter order for the internal solve method.
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0); // BUG FIX: Should set 'max' (x-value) as result, not 'yMax' (function value)
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
+            // Similar to the previous case, interval is [initial, max].
+            // x1=initial, y1=yInitial, x2=max, y2=yMax. Initial guess could be initial.
+            // The call solve(f, initial, yInitial, max, yMax, initial, yInitial) seems consistent.
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
         if (yMin * yMax > 0) {
             throw MathRuntimeException.createIllegalArgumentException(
                   NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
         }
 
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
