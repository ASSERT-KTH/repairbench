diff --git a/tmp/3dc82467-ca94-43a4-9521-4c0d18070312_buggy.java b/tmp/c84635b9-3f78-482e-8d38-f4d17afed911_fixed.java
index efa499e..b702b63 100644
--- a/tmp/3dc82467-ca94-43a4-9521-4c0d18070312_buggy.java
+++ b/tmp/c84635b9-3f78-482e-8d38-f4d17afed911_fixed.java
@@ -1,35 +1,74 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+      // Find the "negative variable" column, which is used for unrestricted variables (x = x_p - x_n).
+      // If restrictToNonNegative is true, this column should not contribute to variable values.
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
+      // Determine the value of the "negative part" of an unrestricted variable (x_n).
+      // This value is only relevant if variables are unrestricted (`restrictToNonNegative` is false).
+      double mostNegative = 0;
+      if (!restrictToNonNegative && negativeVarColumn >= 0) {
+          Integer negativeVarBasicRow = getBasicRow(negativeVarColumn);
+          if (negativeVarBasicRow != null) {
+              // If the negative variable is basic, its value is taken from the RHS.
+              mostNegative = getEntry(negativeVarBasicRow, getRhsOffset());
+          }
+          // If the negative variable is non-basic, mostNegative remains 0, which is correct.
+      }
+
+      // `basicRows` tracks which basic rows have already been assigned to an original decision variable.
+      // This is used to handle potential degeneracy or if multiple variables map to the same basic row,
+      // ensuring that each basic row's RHS value is used only once for a decision variable.
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
+
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
+            // Original decision variable "x_i" not found in the tableau columns.
+            // This can happen if variables were removed or optimized away. Assume its value is 0.
             coefficients[i] = 0;
             continue;
           }
+
+          // Get the row index where this variable `colIndex` is basic.
+          // Returns null if the variable is non-basic.
+          // Can return the objective function row index (typically 0) if the variable is effectively unconstrained.
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
+
+          double currentValue = 0;
+          if (basicRow == null) {
+              // Case 1: Variable is non-basic in the tableau. Its value is 0.
+              currentValue = 0;
+          } else if (basicRow.equals(getObjectiveFunctionRow())) {
+              // Case 2: Variable is identified as basic in the objective function row.
+              // This handles unconstrained variables that are still part of the objective function.
+              // Their solution value is effectively 0 in this context.
+              currentValue = 0;
+          } else {
+              // Case 3: Variable is basic in a constraint row.
+              // Its value is found at the RHS of that row.
+              // Ensure this basic row hasn't been claimed by another variable already.
+              // If it has, it indicates degeneracy or a structural issue; assign 0 to this variable.
               if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+                  // This basic row has already been used by a previously processed variable.
+                  // To avoid double-counting or ambiguity, set the current variable's coefficient to 0.
+                  currentValue = 0;
               } else {
                   basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+                  currentValue = getEntry(basicRow, getRhsOffset());
               }
           }
+
+          // Adjust the coefficient based on the "mostNegative" (x_n) value if variables are unrestricted.
+          // For an unrestricted variable x = x_p - x_n, `currentValue` represents x_p's value,
+          // and `mostNegative` represents x_n's value.
+          // If `restrictToNonNegative` is true, `mostNegative` will be 0, so no adjustment occurs.
+          coefficients[i] = currentValue - mostNegative;
+      }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
