diff --git a/tmp/8669a884-4995-4219-b324-7322a9ac80aa_buggy.java b/tmp/0f6afd5f-d0f2-45ba-866a-3a15885ee600_fixed.java
index efa499e..4830dff 100644
--- a/tmp/8669a884-4995-4219-b324-7322a9ac80aa_buggy.java
+++ b/tmp/0f6afd5f-d0f2-45ba-866a-3a15885ee600_fixed.java
@@ -1,35 +1,47 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+      // mostNegative is the value of the "negative variable" if it's basic, otherwise 0.
+      // This is used for unconstrained variables, where x = x_pos - x_neg.
+      // If restrictToNonNegative is true, this component should not be subtracted from variables.
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
-            coefficients[i] = 0;
+            coefficients[i] = 0; // Variable x_i not found, treat as 0
             continue;
           }
+          
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+          
+          // If the variable is non-basic (basicRow is null) OR its basic row
+          // is already assigned to another original variable (basicRows.contains(basicRow)),
+          // then its value is 0.
+          // For unconstrained variables (x = x_pos - x_neg), if x is 0,
+          // then x_pos = x_neg, so x = 0. The 'mostNegative' component does not apply here.
+          if (basicRow == null || basicRows.contains(basicRow)) {
+              coefficients[i] = 0;
           } else {
               basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              // Get the value of the basic variable from the RHS.
+              double basicValue = getEntry(basicRow, getRhsOffset());
+              
+              // Apply the adjustment for unconstrained variables (x = x_pos - x_neg).
+              // This adjustment is only needed if variables are NOT restricted to non-negative.
+              if (restrictToNonNegative) {
+                  coefficients[i] = basicValue;
+              } else {
+                  coefficients[i] = basicValue - mostNegative;
+              }
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
