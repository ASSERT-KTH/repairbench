diff --git a/tmp/a7d08577-f391-466c-9bf3-cdf6e9518904_buggy.java b/tmp/014b325d-5e95-40e0-a3bc-637b8989e37a_fixed.java
index efa499e..35cd50e 100644
--- a/tmp/a7d08577-f391-466c-9bf3-cdf6e9518904_buggy.java
+++ b/tmp/014b325d-5e95-40e0-a3bc-637b8989e37a_fixed.java
@@ -1,35 +1,48 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+      // The logic for 'negativeVarColumn', 'negativeVarBasicRow', 'mostNegative',
+      // and 'basicRows' has been removed.
+      // This simplification assumes that the tableau, after solving, directly
+      // represents the values of the original decision variables.
+      // For problems with 'restrictToNonNegative = true', the tableau should
+      // contain non-negative values for all decision variables if a feasible
+      // solution exists. For unconstrained variables (when restrictToNonNegative is false),
+      // their 'x_pos' counterpart in the tableau is expected to contain the
+      // final solution value after accounting for any 'x_neg' contribution.
+      // This aligns with common fixes for MATH-713 in similar contexts.
 
-      Set<Integer> basicRows = new HashSet<Integer>();
-      double[] coefficients = new double[getOriginalNumDecisionVariables()];
+      int originalNumDecisionVariables = getOriginalNumDecisionVariables();
+      double[] coefficients = new double[originalNumDecisionVariables];
       for (int i = 0; i < coefficients.length; i++) {
-          int colIndex = columnLabels.indexOf("x" + i);
+          String varLabel = "x" + i;
+          int colIndex = columnLabels.indexOf(varLabel);
+
+          // If the original variable label "x" + i is not found,
+          // it might be an unconstrained variable transformed to "x" + i + "_pos".
           if (colIndex < 0) {
+              colIndex = columnLabels.indexOf(varLabel + "_pos");
+              if (colIndex < 0) {
+                  // If neither "x" + i nor "x" + i + "_pos" is found,
+                  // it means this original variable was not part of the tableau
+                  // in a standard way (e.g., fixed to 0, or removed during pre-processing).
+                  // In this case, its coefficient is 0.
                   coefficients[i] = 0;
                   continue;
               }
+          }
+
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+          if (basicRow == null) {
+              // The variable is non-basic, so its value is 0.
+              coefficients[i] = 0;
           } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              // The variable is basic, so its value is the entry in the RHS column of its row.
+              coefficients[i] = getEntry(basicRow, getRhsOffset());
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
