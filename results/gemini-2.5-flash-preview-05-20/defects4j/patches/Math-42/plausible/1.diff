diff --git a/tmp/ae8492de-8925-4d2c-9244-2df648020eb2_buggy.java b/tmp/3d163d88-c651-4087-93db-3cd8ac762b4b_fixed.java
index efa499e..5e719a2 100644
--- a/tmp/ae8492de-8925-4d2c-9244-2df648020eb2_buggy.java
+++ b/tmp/3d163d88-c651-4087-93db-3cd8ac762b4b_fixed.java
@@ -1,35 +1,41 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
+
+          // A variable's value is determined if it is a basic variable in a constraint row.
+          // Cases where the coefficient should be 0 (adjusted by mostNegative for unconstrained problems):
+          // 1. basicRow is null: The variable is non-basic. Its value is 0.
+          // 2. basicRow is 0: The variable is basic in the objective function row. This variable does not directly
+          //    determine a component of the solution vector. Its value should be 0.
+          // 3. basicRows.contains(basicRow): The basic row for this variable has already been assigned to another
+          //    variable. This indicates degeneracy, and typically, one of the variables is chosen to be non-zero
+          //    and the others are set to 0.
+          if (basicRow == null || basicRow == 0 || basicRows.contains(basicRow)) {
               coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
           } else {
+              // This is the case where the variable is basic in a unique constraint row.
+              // Its value is the RHS of that row.
               basicRows.add(basicRow);
               coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+                  getEntry(basicRow, getRhsOffset()) -
                   (restrictToNonNegative ? 0 : mostNegative);
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
