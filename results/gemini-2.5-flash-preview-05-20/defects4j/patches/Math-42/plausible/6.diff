diff --git a/tmp/64707c37-4b23-42bf-81f3-c3865e14d1c9_buggy.java b/tmp/91018fa4-6a04-42f3-9ea9-10ec490f1d91_fixed.java
index efa499e..4b934d8 100644
--- a/tmp/64707c37-4b23-42bf-81f3-c3865e14d1c9_buggy.java
+++ b/tmp/91018fa4-6a04-42f3-9ea9-10ec490f1d91_fixed.java
@@ -1,35 +1,42 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
           }
+
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+          double value;
+
+          // If the variable is non-basic (basicRow is null) or
+          // basic in the objective function row (basicRow is 0), its value is 0.
+          if (basicRow == null || basicRow == 0) {
+              value = 0;
+          } else if (basicRows.contains(basicRow)) {
+              // This case handles situations where multiple variables could be basic in the same row
+              // (e.g., due to degeneracy or multiple optimal solutions).
+              // We choose the first variable found for this row and set subsequent ones to 0.
+              value = 0;
           } else {
+              // This is a basic variable in a unique constraint row.
               basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              value = getEntry(basicRow, getRhsOffset());
           }
+
+          // Apply adjustment for variables that can be negative (if restrictToNonNegative is false)
+          coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
