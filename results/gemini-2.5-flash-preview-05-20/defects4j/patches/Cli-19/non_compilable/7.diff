diff --git a/tmp/0fabd758-37c5-4fde-8687-869c557bdc7b_buggy.java b/tmp/4db78116-4d2f-4267-bf50-2ce45be56292_fixed.java
index 62e8ec8..1d790f6 100644
--- a/tmp/0fabd758-37c5-4fde-8687-869c557bdc7b_buggy.java
+++ b/tmp/4db78116-4d2f-4267-bf50-2ce45be56292_fixed.java
@@ -1,26 +1,30 @@
     /**
      * <p>If an {@link Option} exists for <code>token</code> then
      * set the current option and add the token to the processed 
      * list.</p>
      *
      * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
      * is set then ignore the current token and add the remaining tokens
      * to the processed tokens list directly.</p>
      *
      * @param token The current option token
      * @param stopAtNonOption Specifies whether flattening should halt
      * at the first non option.
      */
-    private void processOptionToken(String token, boolean stopAtNonOption)
+    private void processOptionToken(String token, boolean stopAtNonOption) throws org.apache.commons.cli.UnrecognizedOptionException
     {
         if (options.hasOption(token))
         {
             currentOption = options.getOption(token);
             tokens.add(token);
         }
         else if (stopAtNonOption)
         {
-            eatTheRest = true;
-            tokens.add(token);
+            // If the token is not a recognized option and stopAtNonOption is true,
+            // it means we've encountered an unrecognized option that should halt parsing
+            // with an exception, rather than treating it as a non-option argument that
+            // signals the end of options. The PosixParser should throw an exception for
+            // unrecognized options when in stop-at-non-option mode.
+            throw new org.apache.commons.cli.UnrecognizedOptionException("Unrecognized option: " + token, token);
         }
     }
\ No newline at end of file
