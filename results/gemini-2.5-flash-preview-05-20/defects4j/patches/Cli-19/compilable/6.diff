diff --git a/tmp/970dc4fe-5931-45e1-b8ac-6126e36c77f8_buggy.java b/tmp/a4e32ae5-8822-4463-bfb6-328b18125e05_fixed.java
index 62e8ec8..6b0f9e4 100644
--- a/tmp/970dc4fe-5931-45e1-b8ac-6126e36c77f8_buggy.java
+++ b/tmp/a4e32ae5-8822-4463-bfb6-328b18125e05_fixed.java
@@ -1,26 +1,31 @@
     /**
      * <p>If an {@link Option} exists for <code>token</code> then
      * set the current option and add the token to the processed 
      * list.</p>
      *
      * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
      * is set then ignore the current token and add the remaining tokens
      * to the processed tokens list directly.</p>
      *
      * @param token The current option token
      * @param stopAtNonOption Specifies whether flattening should halt
      * at the first non option.
      */
     private void processOptionToken(String token, boolean stopAtNonOption)
     {
         if (options.hasOption(token))
         {
             currentOption = options.getOption(token);
             tokens.add(token);
         }
-        else if (stopAtNonOption)
-        {
-            eatTheRest = true;
-            tokens.add(token);
-        }
+        // The original logic in the 'else if (stopAtNonOption)' block was incorrect.
+        // It treated an unrecognized option (when stopAtNonOption is true) as a
+        // non-option argument, which would then stop further option processing
+        // and add the unrecognized option to the tokens list as an argument.
+        // This behavior conflicts with the standard PosixParser expectation that
+        // unrecognized option-like tokens should result in an UnrecognizedOptionException.
+        // By removing this block, if a token is not a recognized option, this
+        // method does nothing, allowing the calling parser logic (e.g., in the
+        // flatten or parse method) to correctly identify it as an unrecognized
+        // option and throw an exception.
     }
\ No newline at end of file
