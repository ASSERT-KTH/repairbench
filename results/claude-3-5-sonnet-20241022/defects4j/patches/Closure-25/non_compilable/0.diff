diff --git a/tmp/ad8c22c9-12aa-4d8e-aac7-8a90eb801446_buggy.java b/tmp/9eeea251-4368-4acb-a862-c17ea48ba071_fixed.java
index b98f0a7..09b66f8 100644
--- a/tmp/ad8c22c9-12aa-4d8e-aac7-8a90eb801446_buggy.java
+++ b/tmp/9eeea251-4368-4acb-a862-c17ea48ba071_fixed.java
@@ -1,29 +1,50 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Handle constructor parameters for backward inference
+                Node arg = constructor.getNext();
+                int i = 0;
+                while (arg != null) {
+                    if (i < ct.getParameters().size()) {
+                        JSType paramType = ct.getParameters().get(i);
+                        if (paramType != null) {
+                            scope = traverse(arg, scope);
+                            JSType argType = arg.getJSType();
+                            if (argType != null) {
+                                scope = inferPropertyMatchingObjectType(scope, arg, argType, paramType);
+                            }
+                        }
+                    }
+                    arg = arg.getNext();
+                    i++;
+                }
             }
         }
     }
     n.setJSType(type);
+    
+    // Traverse remaining arguments if any weren't handled above
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (arg.getJSType() == null) {
             scope = traverse(arg, scope);
         }
+    }
     return scope;
 }
\ No newline at end of file
