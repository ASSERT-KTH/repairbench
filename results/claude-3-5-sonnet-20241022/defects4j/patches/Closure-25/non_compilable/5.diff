diff --git a/tmp/be706908-ef3c-4100-9387-1c0cbf184eca_buggy.java b/tmp/7cc7b9f1-5a37-4199-81ff-fe3cd3349333_fixed.java
index b98f0a7..4ae3f8e 100644
--- a/tmp/be706908-ef3c-4100-9387-1c0cbf184eca_buggy.java
+++ b/tmp/7cc7b9f1-5a37-4199-81ff-fe3cd3349333_fixed.java
@@ -1,29 +1,46 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Handle parameter type inference
+                FunctionType.Parameter[] parameters = ct.getParameters();
+                Node arg = constructor.getNext();
+                int i = 0;
+                while (arg != null && i < parameters.length) {
+                    scope = traverse(arg, scope);
+                    JSType paramType = parameters[i].getJSType();
+                    if (paramType != null) {
+                        arg.setJSType(paramType);
+                        if (arg.isName() || arg.isObjectLit()) {
+                            scope.inferQualifiedSlot(arg, arg.getQualifiedName(), paramType, paramType);
+                        }
+                    }
+                    arg = arg.getNext();
+                    i++;
+                }
+                // Traverse any remaining args
+                while (arg != null) {
+                    scope = traverse(arg, scope);
+                    arg = arg.getNext();
+                }
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
     return scope;
 }
\ No newline at end of file
