diff --git a/tmp/39370ed9-d455-4c5e-81ab-9e375950623e_buggy.java b/tmp/f29556b3-54b4-4e57-a9bb-fa9d70b1e69a_fixed.java
index b98f0a7..968f31f 100644
--- a/tmp/39370ed9-d455-4c5e-81ab-9e375950623e_buggy.java
+++ b/tmp/f29556b3-54b4-4e57-a9bb-fa9d70b1e69a_fixed.java
@@ -1,29 +1,48 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+
+                // Handle constructor parameters for backward type inference
+                FunctionType.Parameter[] parameters = ct.getParameters();
+                Node arg = constructor.getNext();
+                for (int i = 0; i < parameters.length && arg != null; i++) {
+                    scope = traverse(arg, scope);
+                    JSType paramType = parameters[i].getJSType();
+                    if (paramType != null) {
+                        scope = inferPropertyTypesToMatchConstraint(
+                            arg.getJSType(), paramType, arg, scope);
+                    }
+                    arg = arg.getNext();
+                }
+                // Handle any remaining args
+                while (arg != null) {
+                    scope = traverse(arg, scope);
+                    arg = arg.getNext();
+                }
+                n.setJSType(type);
+                return scope;
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
