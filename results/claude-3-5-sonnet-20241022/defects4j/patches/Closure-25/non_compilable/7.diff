diff --git a/tmp/e1719b86-015c-4ef8-ad32-b11fade38360_buggy.java b/tmp/1e52b752-4198-41fd-9477-84044535552c_fixed.java
index b98f0a7..2ae7ab8 100644
--- a/tmp/e1719b86-015c-4ef8-ad32-b11fade38360_buggy.java
+++ b/tmp/1e52b752-4198-41fd-9477-84044535552c_fixed.java
@@ -1,29 +1,39 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+
+                // Handle constructor parameters
+                FunctionType fnType = ct.toMaybeFunctionType();
+                if (fnType != null) {
+                    Node child = constructor.getNext();
+                    Node param = fnType.getParameters().iterator().hasNext() ? 
+                               fnType.getParameters().iterator().next() : null;
+                    if (param != null && child != null) {
+                        inferPropertyMatchingOnNode(child, param.getJSType());
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
