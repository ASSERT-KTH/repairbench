diff --git a/tmp/591fe484-4967-4528-a30c-93845ff1098e_buggy.java b/tmp/00cf4873-b299-493b-85c8-1b7056f502c8_fixed.java
index b98f0a7..c8045ed 100644
--- a/tmp/591fe484-4967-4528-a30c-93845ff1098e_buggy.java
+++ b/tmp/00cf4873-b299-493b-85c8-1b7056f502c8_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Handle constructor parameter types for backwards inference
+                FunctionType functionType = ct.toMaybeFunctionType();
+                if (functionType != null) {
+                    Iterator<Node> arguments = n.children();
+                    arguments.next(); // Skip the constructor
+                    Iterator<Node> parameters = functionType.getParameters().iterator();
+                    while (arguments.hasNext() && parameters.hasNext()) {
+                        Node argument = arguments.next();
+                        JSType parameterType = parameters.next().getJSType();
+                        if (argument.getJSType() != null && parameterType != null) {
+                            argument.getJSType().matchConstraint(parameterType);
+                        }
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
