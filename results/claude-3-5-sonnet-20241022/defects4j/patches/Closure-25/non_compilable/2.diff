diff --git a/tmp/31f35d35-a1b3-48d5-8fdf-c884ad996a41_buggy.java b/tmp/6d8cb70d-0dee-482b-acda-3cb41e644815_fixed.java
index b98f0a7..2375e7d 100644
--- a/tmp/31f35d35-a1b3-48d5-8fdf-c884ad996a41_buggy.java
+++ b/tmp/6d8cb70d-0dee-482b-acda-3cb41e644815_fixed.java
@@ -1,29 +1,46 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Handle parameter type inference
+                FunctionType fnType = ct;
+                Node argNode = constructor.getNext();
+                int paramIndex = 0;
+                for (Node param = fnType.getParameters().getFirstChild(); 
+                     param != null && argNode != null;
+                     param = param.getNext(), argNode = argNode.getNext()) {
+                    scope = traverse(argNode, scope);
+                    JSType paramType = param.getJSType();
+                    if (paramType != null) {
+                        backwardsInferenceFromCallSite(argNode, paramType);
+                    }
+                    paramIndex++;
+                }
             }
         }
     }
     n.setJSType(type);
+    // Traverse any remaining args that weren't handled in the parameter loop
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (arg.getJSType() == null) {
             scope = traverse(arg, scope);
         }
+    }
     return scope;
 }
\ No newline at end of file
