diff --git a/tmp/09af69ec-484f-4dc9-848a-17f4e0c1eacc_buggy.java b/tmp/21e2fb61-d19d-40b0-838f-8792efe4afaf_fixed.java
index b98f0a7..5278eb9 100644
--- a/tmp/09af69ec-484f-4dc9-848a-17f4e0c1eacc_buggy.java
+++ b/tmp/21e2fb61-d19d-40b0-838f-8792efe4afaf_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Get the parameter types for constructor
+                Node parameterNode = constructor.getNext();
+                if (parameterNode != null) {
+                    Node parameterTypeNode = ct.getParametersNode().getFirstChild();
+                    if (parameterTypeNode != null) {
+                        JSType parameterType = parameterTypeNode.getJSType();
+                        scope = traverse(parameterNode, scope);
+                        parameterNode.setJSType(parameterType);
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
+    
+    // Process remaining arguments
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (arg.getJSType() == null) {  // Only traverse if type not already set
             scope = traverse(arg, scope);
         }
+    }
     return scope;
 }
\ No newline at end of file
