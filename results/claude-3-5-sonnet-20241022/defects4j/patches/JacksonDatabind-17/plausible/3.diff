diff --git a/tmp/bddb1b5c-ed2b-4bba-85f7-b45a8907c2f2_buggy.java b/tmp/83ad1dbb-47d2-4ffd-843a-20a05b1d196c_fixed.java
index 01967cc..c8b6370 100644
--- a/tmp/bddb1b5c-ed2b-4bba-85f7-b45a8907c2f2_buggy.java
+++ b/tmp/83ad1dbb-47d2-4ffd-843a-20a05b1d196c_fixed.java
@@ -1,35 +1,34 @@
         /**
          * Method called to check if the default type handler should be
          * used for given type.
          * Note: "natural types" (String, Boolean, Integer, Double) will never
          * use typing; that is both due to them being concrete and final,
          * and since actual serializers and deserializers will also ignore any
          * attempts to enforce typing.
          */
         public boolean useForType(JavaType t)
         {
+            // Never use typing for JSON tree models
+            if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+                return false;
+            }
+            
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
                 return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                        || (!t.isConcrete());
 
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
-                // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+                return !t.isFinal();
             default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
         }
\ No newline at end of file
