diff --git a/tmp/dbc75d73-63d6-4044-98e6-34fe1579f27c_buggy.java b/tmp/17cdda54-fa71-4006-bbc8-4f2fae585add_fixed.java
index 1ad070d..038adf2 100644
--- a/tmp/dbc75d73-63d6-4044-98e6-34fe1579f27c_buggy.java
+++ b/tmp/17cdda54-fa71-4006-bbc8-4f2fae585add_fixed.java
@@ -1,38 +1,28 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
     case CR:
     case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+    case FF:
+    case TAB:
+    case BACKSPACE:
         return c;
     case END_OF_STREAM:
         throw new IOException("EOF whilst processing escape sequence");
     default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
+        // return both the escape character and the current character
+        in.lookAhead(c);
+        return escape;
     }
 }
\ No newline at end of file
