diff --git a/tmp/7f3f178d-692a-43a4-b43d-098e86038739_buggy.java b/tmp/0c6f93c8-2bde-449a-a9e8-1639136a0f49_fixed.java
index 5f1dcf2..c8a23d4 100644
--- a/tmp/7f3f178d-692a-43a4-b43d-098e86038739_buggy.java
+++ b/tmp/0c6f93c8-2bde-449a-a9e8-1639136a0f49_fixed.java
@@ -1,41 +1,45 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+            } else {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
-                return;
-
-            }
-
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            if (comparator.compare(contracted, original[original.length - 1]) < 0) {
                 // accept the contracted simplex
+            } else {
+                // perform a reduction step
+                evaluateNewSimplex(original, sigma, comparator);
+            }
+        }
 
         // check convergence
+        int iter = getIterations();
+        if (iter >= getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
+        if (checkConvergence()) {
             return;
         }
-
     }
-
 }
\ No newline at end of file
