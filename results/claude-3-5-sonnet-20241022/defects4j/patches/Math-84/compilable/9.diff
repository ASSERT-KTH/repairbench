diff --git a/tmp/ddc92fbb-26a8-4a59-859b-4ef7aaa2ec29_buggy.java b/tmp/3f76120b-a3ff-4c18-ad91-d52096aed435_fixed.java
index 5f1dcf2..69828eb 100644
--- a/tmp/ddc92fbb-26a8-4a59-859b-4ef7aaa2ec29_buggy.java
+++ b/tmp/3f76120b-a3ff-4c18-ad91-d52096aed435_fixed.java
@@ -1,41 +1,55 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
-                return;
-
-            }
-
+            } else {
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                    return;
+                }
+            }
 
             // check convergence
+            final double[] xSmall = simplex[0].getPoint();
+            final double[] xBig = simplex[0].getPoint();
+            double max = 0;
+            for (int i = 1; i < simplex.length; ++i) {
+                final double[] x = simplex[i].getPoint();
+                for (int j = 0; j < x.length; ++j) {
+                    if (x[j] < xSmall[j]) {
+                        xSmall[j] = x[j];
+                    }
+                    if (x[j] > xBig[j]) {
+                        xBig[j] = x[j];
+                    }
+                    max = Math.max(max, Math.abs(x[j] - simplex[0].getPoint()[j]));
+                }
+            }
+            if (max <= 1.0e-10) {
                 return;
             }
-
         }
-
     }
\ No newline at end of file
