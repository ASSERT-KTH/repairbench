diff --git a/tmp/1343abc6-484d-4e3d-b598-a175e315f7ef_buggy.java b/tmp/8ce69991-92eb-4e03-801a-9279b1e6d1d0_fixed.java
index 5f1dcf2..945d0eb 100644
--- a/tmp/1343abc6-484d-4e3d-b598-a175e315f7ef_buggy.java
+++ b/tmp/8ce69991-92eb-4e03-801a-9279b1e6d1d0_fixed.java
@@ -1,41 +1,42 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
-
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
-
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                } else {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
-
-                return;
-
-            }
-
+            } else {
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                } else {
+                    // accept the original simplex
+                    simplex = original;
+                }
+            }
 
             // check convergence
+            final RealPointValuePair[] newSimplex = simplex;
+            if (comparator.compare(newSimplex[0], best) >= 0) {
                 return;
             }
-
         }
-
     }
\ No newline at end of file
