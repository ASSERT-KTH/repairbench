diff --git a/tmp/686391bf-c15b-49b9-a0dc-3ac80963953a_buggy.java b/tmp/f4ebe398-98ad-46bf-b45d-f68aa403b90e_fixed.java
index 4c1ed27..baac73e 100644
--- a/tmp/686391bf-c15b-49b9-a0dc-3ac80963953a_buggy.java
+++ b/tmp/f4ebe398-98ad-46bf-b45d-f68aa403b90e_fixed.java
@@ -1,32 +1,38 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
+                // Copy the character to the output
+                char ch = input.charAt(pos);
+                if (Character.isHighSurrogate(ch) && pos + 1 < len) {
+                    char low = input.charAt(pos + 1);
+                    if (Character.isLowSurrogate(low)) {
+                        out.write(ch);
+                        out.write(low);
+                        pos += 2;
                         continue;
                     }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
                 }
+                out.write(ch);
+                pos += 1;
+                continue;
+            }
+            pos += consumed;
         }
     }
\ No newline at end of file
