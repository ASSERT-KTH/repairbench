diff --git a/tmp/6804fbc3-5ae7-407e-a840-47e09786b1ae_buggy.java b/tmp/302ea069-47bb-40ff-ab18-ff9d5fc5fd01_fixed.java
index 42b58d0..46775e1 100644
--- a/tmp/6804fbc3-5ae7-407e-a840-47e09786b1ae_buggy.java
+++ b/tmp/302ea069-47bb-40ff-ab18-ff9d5fc5fd01_fixed.java
@@ -1,19 +1,30 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Class<?> rawType = (Class<?>) parameterizedType.getRawType();
+    TypeVariable[] typeParameters = rawType.getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    
+    // Check if we've already processed this type to prevent infinite recursion
+    if (typeParameters.length == 0 || actualTypeArguments.length == 0) {
+        return;
+    }
+    
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // Skip if the actual type argument is the same as the declaring class
+        if (actualTypeArgument == classType) {
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
