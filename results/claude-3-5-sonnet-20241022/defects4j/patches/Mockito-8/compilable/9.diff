diff --git a/tmp/7a3a0951-0904-4aa6-a594-274277006e65_buggy.java b/tmp/10a368c9-2968-4471-81cb-cc4088d9b357_fixed.java
index 42b58d0..6c14308 100644
--- a/tmp/7a3a0951-0904-4aa6-a594-274277006e65_buggy.java
+++ b/tmp/10a368c9-2968-4471-81cb-cc4088d9b357_fixed.java
@@ -1,19 +1,30 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Class<?> rawType = (Class<?>) parameterizedType.getRawType();
+    TypeVariable[] typeParameters = rawType.getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    
+    // Guard against potential circular references
+    if (actualTypeArguments.length == 0 || typeParameters.length == 0) {
+        return;
+    }
+    
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // Skip if we've already processed this type parameter to prevent infinite recursion
+        if (contextualActualTypeParameters.containsKey(typeParameter)) {
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
