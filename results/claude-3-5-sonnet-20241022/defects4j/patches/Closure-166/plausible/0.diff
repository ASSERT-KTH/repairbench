diff --git a/tmp/5b9d51ec-a35a-4858-a815-5d149223c003_buggy.java b/tmp/10daffc1-dec1-48aa-a476-1d245d626111_fixed.java
index 5f96616..dfd09a7 100644
--- a/tmp/5b9d51ec-a35a-4858-a815-5d149223c003_buggy.java
+++ b/tmp/10daffc1-dec1-48aa-a476-1d245d626111_fixed.java
@@ -1,20 +1,28 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
+    // For union types, match each alternative in the union
+    if (constraint.isUnionType()) {
+      for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+        matchConstraint(alt);
+      }
+      return;
+    }
+
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
