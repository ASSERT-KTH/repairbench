diff --git a/tmp/58595ec0-ab8e-4c4e-b1d8-e65c7874e765_buggy.java b/tmp/9ca55577-63ff-4f48-8249-5cf0d15ab527_fixed.java
index 5f96616..7de3465 100644
--- a/tmp/58595ec0-ab8e-4c4e-b1d8-e65c7874e765_buggy.java
+++ b/tmp/9ca55577-63ff-4f48-8249-5cf0d15ab527_fixed.java
@@ -1,20 +1,28 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
+    // If it's a union type, process each alternate type
+    if (constraint.isUnionType()) {
+        for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+            if (alternate.isRecordType()) {
+                matchRecordTypeConstraint(alternate.toObjectType());
+            }
+        }
+    }
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    else if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
