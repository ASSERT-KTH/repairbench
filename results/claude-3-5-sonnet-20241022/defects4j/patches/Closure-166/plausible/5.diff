diff --git a/tmp/55c29146-f689-437b-aa68-97cce554de51_buggy.java b/tmp/07463786-010f-4926-b64d-e28e5ea34e53_fixed.java
index 5f96616..9629b06 100644
--- a/tmp/55c29146-f689-437b-aa68-97cce554de51_buggy.java
+++ b/tmp/07463786-010f-4926-b64d-e28e5ea34e53_fixed.java
@@ -1,20 +1,19 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    // Handle the case where the constraint object is a record type or a union containing record types
+    JSType constraintType = constraint;
+    if (constraintType.isUnionType()) {
+        for (JSType alternate : constraintType.toMaybeUnionType().getAlternates()) {
+            if (alternate.isRecordType()) {
+                matchRecordTypeConstraint(alternate.toObjectType());
+            }
+        }
+    } else if (constraintType.isRecordType()) {
+        matchRecordTypeConstraint(constraintType.toObjectType());
     }
 }
\ No newline at end of file
