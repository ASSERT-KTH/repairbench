diff --git a/tmp/1723e2ee-1610-47be-96d4-75fe17f374dc_buggy.java b/tmp/bbbb559c-d9d2-448a-870e-a1c94c961759_fixed.java
index 5f96616..8666343 100644
--- a/tmp/1723e2ee-1610-47be-96d4-75fe17f374dc_buggy.java
+++ b/tmp/bbbb559c-d9d2-448a-870e-a1c94c961759_fixed.java
@@ -1,20 +1,31 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
+    // If it's a union type, try to match against each record type in the union
+    if (constraint.isUnionType()) {
+        UnionType unionType = constraint.toMaybeUnionType();
+        for (JSType alternate : unionType.getAlternates()) {
+            if (alternate.isRecordType()) {
+                matchRecordTypeConstraint(alternate.toObjectType());
+            }
+        }
+        return;
+    }
+
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
