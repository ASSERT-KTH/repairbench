diff --git a/tmp/6bc2341c-c23e-42a3-b37e-1b3330cc0912_buggy.java b/tmp/38a4af9f-244f-4604-9cfa-0aeb95419e5c_fixed.java
index 5f96616..f8dcb6f 100644
--- a/tmp/6bc2341c-c23e-42a3-b37e-1b3330cc0912_buggy.java
+++ b/tmp/38a4af9f-244f-4604-9cfa-0aeb95419e5c_fixed.java
@@ -1,20 +1,28 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
+    // For union types, match against each type in the union
+    if (constraint.isUnionType()) {
+        for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+            matchConstraint(alternate);
+        }
+        return;
+    }
+
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
