diff --git a/tmp/acbd7669-e4a7-4764-a3e3-9c99000b386f_buggy.java b/tmp/299e1db0-83c8-47a4-9199-7509ba6b7fe5_fixed.java
index 5f96616..ff58481 100644
--- a/tmp/acbd7669-e4a7-4764-a3e3-9c99000b386f_buggy.java
+++ b/tmp/299e1db0-83c8-47a4-9199-7509ba6b7fe5_fixed.java
@@ -1,20 +1,21 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // Handle both record types and object types with record type properties
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+      // For union types, match each alternative type
+      for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+        if (alternate.isRecordType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+        }
+      }
+    } else if (constraint.isObjectType()) {
+      matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
