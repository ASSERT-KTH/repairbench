You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
  /**
   * @return Whether the node is a block with a single statement that is
   *     an expression.
   */
  private boolean isFoldableExpressBlock(Node n) {
    if (n.getType() == Token.BLOCK) {
      if (n.hasOneChild()) {
        Node maybeExpr = n.getFirstChild();
          // IE has a bug where event handlers behave differently when
          // their return value is used vs. when their return value is in
          // an EXPR_RESULT. It's pretty freaking weird. See:
          // http://code.google.com/p/closure-compiler/issues/detail?id=291
          // We try to detect this case, and not fold EXPR_RESULTs
          // into other expressions.

            // We only have to worry about methods with an implicit 'this'
            // param, or this doesn't happen.

          return NodeUtil.isExpressionNode(maybeExpr);
      }
    }

    return false;
  }

```

The code fails the following tests.

Test `com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest::testIssue291`:
```java
  public void testIssue291() {
    fold("if (true) { f.onchange(); }", "if (1) f.onchange();");
    foldSame("if (f) { f.onchange(); }");
    foldSame("if (f) { f.bar(); } else { f.onchange(); }");
    fold("if (f) { f.bonchange(); }", "f && f.bonchange();");
    foldSame("if (f) { f['x'](); }");
  }

```
Test `com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest::testIssue291` error:
```
junit.framework.AssertionFailedError:
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
