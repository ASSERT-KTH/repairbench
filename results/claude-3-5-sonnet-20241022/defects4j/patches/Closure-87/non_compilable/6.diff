diff --git a/tmp/24031594-2b76-41de-b4e3-91c8cb9321cc_buggy.java b/tmp/7c59556f-9a4c-429b-bfc5-a960a17c8b4f_fixed.java
index 19fd63e..750e970 100644
--- a/tmp/24031594-2b76-41de-b4e3-91c8cb9321cc_buggy.java
+++ b/tmp/7c59556f-9a4c-429b-bfc5-a960a17c8b4f_fixed.java
@@ -1,24 +1,30 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
       // IE has a bug where event handlers behave differently when
       // their return value is used vs. when their return value is in
       // an EXPR_RESULT. It's pretty freaking weird. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
       // We try to detect this case, and not fold EXPR_RESULTs
       // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+      if (maybeExpr.isExprResult()) {
+        Node expr = maybeExpr.getFirstChild();
+        if (expr.isCall()) {
+          Node callee = expr.getFirstChild();
+          if (callee.isGetProp() && callee.getLastChild().getString().startsWith("on")) {
+            return false;
+          }
+        }
+      }
       
       return NodeUtil.isExpressionNode(maybeExpr);
     }
   }
 
   return false;
 }
\ No newline at end of file
