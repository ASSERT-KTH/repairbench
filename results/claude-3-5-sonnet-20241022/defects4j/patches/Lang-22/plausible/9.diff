diff --git a/tmp/7852390f-d088-49bb-9673-3d465af420b4_buggy.java b/tmp/2c6feede-8de7-4e47-8e40-1d59b326137f_fixed.java
index e0a0552..b503d62 100644
--- a/tmp/7852390f-d088-49bb-9673-3d465af420b4_buggy.java
+++ b/tmp/2c6feede-8de7-4e47-8e40-1d59b326137f_fixed.java
@@ -1,54 +1,47 @@
-    /**
-     * <p>Gets the greatest common divisor of the absolute value of
-     * two numbers, using the "binary gcd" method which avoids
-     * division and modulo operations.  See Knuth 4.5.2 algorithm B.
-     * This algorithm is due to Josef Stein (1961).</p>
-     *
-     * @param u  a non-zero number
-     * @param v  a non-zero number
-     * @return the greatest common divisor, never zero
-     */
 private static int greatestCommonDivisor(int u, int v) {
+    // handle special case to avoid overflow with Integer.MIN_VALUE
+    if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+        // if any operand is MIN_VALUE, result can only be a power of 2
+        if (u == 0 || v == 0) {
+            return Math.abs(Math.max(u, v));
+        }
+        if ((u & 1) == 0 && (v & 1) == 0) {  // both even
+            return Math.abs(greatestCommonDivisor(u >> 1, v >> 1)) << 1;
+        } else if ((u & 1) == 0) {  // u even, v odd
+            return Math.abs(greatestCommonDivisor(u >> 1, v));
+        } else if ((v & 1) == 0) {  // u odd, v even
+            return Math.abs(greatestCommonDivisor(u, v >> 1));
+        } else {  // both odd
+            return Math.abs(greatestCommonDivisor((u - v) >> 1, v));
+        }
+    }
+
     // From Commons Math:
-        //if either operand is abs 1, return 1:
     if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
         return 1;
     }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        if (u>0) { u=-u; } // make u negative
-        if (v>0) { v=-v; } // make v negative
-        // B1. [Find power of 2]
+    if (u > 0) { u = -u; }
+    if (v > 0) { v = -v; }
     int k = 0;
-        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
-            u/=2; v/=2; k++; // cast out twos.
+    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
+        u /= 2;
+        v /= 2;
+        k++;
     }
     if (k == 31) {
         throw new ArithmeticException("overflow: gcd is 2^31");
     }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        //     one is odd.
-        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+    int t = ((u & 1) == 1) ? v : -(u / 2);
     do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t&1)==0) { // while t is even..
-                t/=2; // cast out twos
+        while ((t & 1) == 0) {
+            t /= 2;
         }
-            // B5 [reset max(u,v)]
         if (t > 0) {
             u = -t;
         } else {
             v = t;
         }
-            // B6/B3. at this point both u and v should be odd.
         t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
     } while (t != 0);
-        return -u*(1<<k); // gcd is u*2^k
+    return -u * (1 << k);
 }
\ No newline at end of file
