diff --git a/tmp/5fe244fa-4850-4167-8e43-e9a4fb68816b_buggy.java b/tmp/8cb962d6-551f-4ec3-b104-8e9512a5806b_fixed.java
index 229b3e7..e9987a5 100644
--- a/tmp/5fe244fa-4850-4167-8e43-e9a4fb68816b_buggy.java
+++ b/tmp/8cb962d6-551f-4ec3-b104-8e9512a5806b_fixed.java
@@ -1,55 +1,51 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             text = padding + text.substring(pos).trim();
+            
+            // if the text width is less than the indent, wrap at a single character
+            if (width <= nextLineTabStop) {
+                pos = nextLineTabStop + 1;
+            } else {
                 pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
-            }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+                if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
                     pos = width;
                 }
+            }
+
+            if (pos == -1)
+            {
+                sb.append(text);
+                return sb;
+            }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
