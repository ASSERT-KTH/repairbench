diff --git a/tmp/c6d8a5d7-b133-46d4-ab59-1ec69e63d451_buggy.java b/tmp/9193581e-5f3f-447f-9b13-485a12dee967_fixed.java
index 229b3e7..5d1c152 100644
--- a/tmp/c6d8a5d7-b133-46d4-ab59-1ec69e63d451_buggy.java
+++ b/tmp/9193581e-5f3f-447f-9b13-485a12dee967_fixed.java
@@ -1,55 +1,44 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
+        
+        // If the width is less than the nextLineTabStop, 
+        // we'll wrap one character at a time
+        if (width <= nextLineTabStop) {
+            pos = nextLineTabStop + 1;
+            if (text.length() <= pos) {
+                sb.append(rtrim(text));
+                return sb;
+            }
+        } else {
             pos = findWrapPos(text, width, 0);
-
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
             }
             
             if ((text.length() > width) && (pos == nextLineTabStop - 1)) 
             {
                 pos = width;
             }
+        }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
