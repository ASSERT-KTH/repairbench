diff --git a/tmp/5ce88d41-747e-4b36-8e73-29d272f6fa13_buggy.java b/tmp/21bd916e-b287-434d-b29c-ccd9e9070307_fixed.java
index 229b3e7..b45a9fe 100644
--- a/tmp/5ce88d41-747e-4b36-8e73-29d272f6fa13_buggy.java
+++ b/tmp/21bd916e-b287-434d-b29c-ccd9e9070307_fixed.java
@@ -1,55 +1,53 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             text = padding + text.substring(pos).trim();
+            
+            // If the text length is longer than the width and the wrap position is
+            // at the padding length, break at width instead
+            if (text.length() > width && text.substring(0, nextLineTabStop).trim().length() == 0)
+            {
+                pos = width;
+                sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            }
+            else
+            {
                 pos = findWrapPos(text, width, 0);
 
                 if (pos == -1)
                 {
                     sb.append(text);
-
                     return sb;
                 }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
                 sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
             }
         }
+    }
\ No newline at end of file
