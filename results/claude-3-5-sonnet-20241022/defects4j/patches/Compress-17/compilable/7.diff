diff --git a/tmp/a0543419-bb53-401d-b72b-845a30661306_buggy.java b/tmp/dae32ffc-9756-4610-8baa-7fa36d5c4bda_fixed.java
index 3b9a3c0..4bec6ad 100644
--- a/tmp/a0543419-bb53-401d-b72b-845a30661306_buggy.java
+++ b/tmp/dae32ffc-9756-4610-8baa-7fa36d5c4bda_fixed.java
@@ -1,71 +1,76 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
-        if (buffer[start] == 0) {
+        boolean allNUL = true;
+        for (int i = start; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNUL = false;
+                break;
+            }
+        }
+        if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
-            if (buffer[start] == ' '){
+            if (buffer[start] == ' ' || buffer[start] == 0){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
+        // Skip trailing spaces/NULs
+        while (end > start) {
+            if (buffer[end - 1] == ' ' || buffer[end - 1] == 0) {
                 end--;
             } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                break;
             }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        }
+
+        if (start == end) {
+            return 0L;
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
