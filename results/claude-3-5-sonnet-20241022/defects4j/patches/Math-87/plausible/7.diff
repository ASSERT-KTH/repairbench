diff --git a/tmp/e9961d08-e8be-402a-9873-06099f47b612_buggy.java b/tmp/cc16d189-4fc0-4b80-b927-027a17b65931_fixed.java
index 70cafe0..6fafce8 100644
--- a/tmp/e9961d08-e8be-402a-9873-06099f47b612_buggy.java
+++ b/tmp/cc16d189-4fc0-4b80-b927-027a17b65931_fixed.java
@@ -1,18 +1,33 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon)) {
+                // if we haven't found a pivot element yet, mark this one
                 if (row == null) {
+                    boolean isPivot = true;
+                    // check that all other entries in this column are 0
+                    for (int k = getNumObjectiveFunctions(); k < getHeight(); k++) {
+                        if (k != i && !MathUtils.equals(getEntry(k, col), 0.0, epsilon)) {
+                            isPivot = false;
+                            break;
+                        }
+                    }
+                    if (isPivot) {
                         row = i;
+                    }
                 } else {
+                    // we've already found a pivot element, so this column is not basic
                     return null;
                 }
+            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+                // if the entry is neither 1 nor 0, this column cannot be basic
+                return null;
             }
         }
         return row;
     }
\ No newline at end of file
