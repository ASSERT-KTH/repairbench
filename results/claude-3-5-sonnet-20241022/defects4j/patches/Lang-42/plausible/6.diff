diff --git a/tmp/88624ca4-798a-4b94-b3b4-ed84a9d5e88a_buggy.java b/tmp/a90ccb7e-b4ff-4a2e-8eb8-c7aa24296128_fixed.java
index 822447c..55e7b04 100644
--- a/tmp/88624ca4-798a-4b94-b3b4-ed84a9d5e88a_buggy.java
+++ b/tmp/a90ccb7e-b4ff-4a2e-8eb8-c7aa24296128_fixed.java
@@ -1,37 +1,49 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+            char ch = str.charAt(i);
+            String entityName = this.entityName(ch);
             if (entityName == null) {
-                if (c > 0x7F) {
+                if (ch > 0x7F) {
+                    // Handle Unicode surrogate pairs
+                    if (Character.isHighSurrogate(ch) && i + 1 < len) {
+                        char low = str.charAt(i + 1);
+                        if (Character.isLowSurrogate(low)) {
+                            int codePoint = Character.toCodePoint(ch, low);
                             writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                            writer.write(Integer.toString(codePoint, 10));
+                            writer.write(';');
+                            i++;
+                            continue;
+                        }
+                    }
+                    writer.write("&#");
+                    writer.write(Integer.toString(ch, 10));
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    writer.write(ch);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
         }
     }
\ No newline at end of file
