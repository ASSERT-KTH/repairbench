diff --git a/tmp/f61acc64-15e4-4d99-9149-1aa1b9bf8690_buggy.java b/tmp/029bc719-5432-4285-9208-d7e5ba14d7c3_fixed.java
index 9353941..f2e7945 100644
--- a/tmp/f61acc64-15e4-4d99-9149-1aa1b9bf8690_buggy.java
+++ b/tmp/029bc719-5432-4285-9208-d7e5ba14d7c3_fixed.java
@@ -1,30 +1,35 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+        // Special case: Assignment to a variable inside a larger expression
+        // should not be counted as a KILL if the variable is used later in
+        // the expression.
+        Node parent = n.getParent();
+        Node gramps = parent.getParent();
+        if (gramps != null && NodeUtil.isExpressionNode(gramps)) {
+          return VariableLiveness.MAYBE_LIVE;
+        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
