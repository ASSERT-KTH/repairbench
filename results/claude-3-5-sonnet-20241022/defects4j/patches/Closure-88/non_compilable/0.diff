diff --git a/tmp/87d0329b-9ba8-4a55-aeea-d397f8bb1e6a_buggy.java b/tmp/e887292d-4d33-47e4-9009-0ca856ba8181_fixed.java
index 9353941..ea04b58 100644
--- a/tmp/87d0329b-9ba8-4a55-aeea-d397f8bb1e6a_buggy.java
+++ b/tmp/e887292d-4d33-47e4-9009-0ca856ba8181_fixed.java
@@ -1,30 +1,29 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+        Node parent = n.getParent();
+        if (NodeUtil.isLhs(n, parent)) {
+            // Special case: The variable is both read and killed
+            // e.g., a = a + 1
+            if (NodeUtil.isAssign(parent) && parent.getLastChild().isName() &&
+                variable.equals(parent.getLastChild().getString())) {
+                return VariableLiveness.READ;
+            }
             return VariableLiveness.KILL;
         } else {
             return VariableLiveness.READ;
         }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
             VariableLiveness state = isVariableReadBeforeKill(child, variable);
             if (state != VariableLiveness.MAYBE_LIVE) {
                 return state;
             }
         }
     }
     return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
