diff --git a/tmp/e5142653-c0f7-4b41-a91a-23515edf8622_buggy.java b/tmp/f82f932d-11f8-4cbe-b801-ab7c474cced2_fixed.java
index 03b03d7..0561ef8 100644
--- a/tmp/e5142653-c0f7-4b41-a91a-23515edf8622_buggy.java
+++ b/tmp/f82f932d-11f8-4cbe-b801-ab7c474cced2_fixed.java
@@ -1,25 +1,30 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    long local = convertUTCToLocal(instant);
+    
+    // if the offsets before and after are the same, then nothing is happening
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    // find the instants immediately before and after the transition
+    long transition;
+    if (instantBefore > instantAfter) {
+        transition = earlierOrLater ? local : local - 1;
+    } else {
+        transition = earlierOrLater ? local + 1 : local;
+    }
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    return convertLocalToUTC(transition, earlierOrLater);
 }
\ No newline at end of file
