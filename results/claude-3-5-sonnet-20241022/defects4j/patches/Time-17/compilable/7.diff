diff --git a/tmp/1bfaf97d-6b49-4f0f-bb6a-62a563a1df69_buggy.java b/tmp/b6b5cc83-3b9b-41da-86ee-7a33c14b2977_fixed.java
index 03b03d7..781809b 100644
--- a/tmp/1bfaf97d-6b49-4f0f-bb6a-62a563a1df69_buggy.java
+++ b/tmp/b6b5cc83-3b9b-41da-86ee-7a33c14b2977_fixed.java
@@ -1,25 +1,30 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
+    if (instantBefore >= instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long localBefore = convertUTCToLocal(instant - 1);
     
     // calculate result
+    if (localBefore > local) {
         // currently in later offset
+        return earlierOrLater ? instant : convertLocalToUTC(local, false, instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    } else {
         // currently in earlier offset
+        return earlierOrLater ? convertLocalToUTC(local, false, instant + 3 * DateTimeConstants.MILLIS_PER_HOUR) : instant;
+    }
 }
\ No newline at end of file
