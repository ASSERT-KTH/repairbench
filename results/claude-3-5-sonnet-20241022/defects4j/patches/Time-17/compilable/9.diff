diff --git a/tmp/434326cd-31cb-4e4c-9ee2-f440ff056f49_buggy.java b/tmp/f42bc66b-c687-4529-a142-01636141b134_fixed.java
index 03b03d7..8cb0c96 100644
--- a/tmp/434326cd-31cb-4e4c-9ee2-f440ff056f49_buggy.java
+++ b/tmp/f42bc66b-c687-4529-a142-01636141b134_fixed.java
@@ -1,25 +1,26 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
+    if (instantBefore >= instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    long before = convertLocalToUTC(local, false, instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    long after = convertLocalToUTC(local, false, instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    if (instant == before || instant == after) {
+        return instant;  // if already at one of the overlapping times, return it
+    }
+    return earlierOrLater ? after : before;
 }
\ No newline at end of file
