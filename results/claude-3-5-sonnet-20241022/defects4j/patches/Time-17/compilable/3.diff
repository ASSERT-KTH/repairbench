diff --git a/tmp/eb2c1936-5e98-4ee8-8d7f-d926282fec80_buggy.java b/tmp/7c709967-da73-4aed-a886-91aef8cb2f65_fixed.java
index 03b03d7..6e5d1f0 100644
--- a/tmp/eb2c1936-5e98-4ee8-8d7f-d926282fec80_buggy.java
+++ b/tmp/7c709967-da73-4aed-a886-91aef8cb2f65_fixed.java
@@ -1,25 +1,27 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
+    if (instantBefore >= instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
+    // check if we're already at the required offset
+    long adjusted = convertLocalToUTC(local, false, instant);
+    if ((adjusted == instant && !earlierOrLater) || (adjusted != instant && earlierOrLater)) {
+        return instant;
+    }
+    // calculate result by converting using the appropriate offset
     return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
 }
\ No newline at end of file
