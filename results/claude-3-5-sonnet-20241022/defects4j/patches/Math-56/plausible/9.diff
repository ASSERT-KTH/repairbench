diff --git a/tmp/474d8166-761b-4799-bac5-933abb9319fd_buggy.java b/tmp/ab75f1b3-5d3d-427d-851c-c9ddf2857c30_fixed.java
index 2608424..46fe77a 100644
--- a/tmp/474d8166-761b-4799-bac5-933abb9319fd_buggy.java
+++ b/tmp/ab75f1b3-5d3d-427d-851c-c9ddf2857c30_fixed.java
@@ -1,39 +1,21 @@
-    /**
-     * Convert to multidimensional counter.
-     *
-     * @param index Index in unidimensional counter.
-     * @return the multidimensional counts.
-     * @throws OutOfRangeException if {@code index} is not between
-     * {@code 0} and the value returned by {@link #getSize()} (excluded).
-     */
 public int[] getCounts(int index) {
     if (index < 0 ||
         index >= totalSize) {
         throw new OutOfRangeException(index, 0, totalSize);
     }
 
     final int[] indices = new int[dimension];
+    int remaining = index;
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+    for (int i = 0; i < dimension; i++) {
+        int offset = uniCounterOffset[i];
+        if (offset != 0) {
+            indices[i] = remaining / offset;
+            remaining = remaining % offset;
+        } else {
+            indices[i] = remaining;
         }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
     }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
-
     return indices;
 }
\ No newline at end of file
