diff --git a/tmp/8c83d5ac-653a-49a9-920c-91070ef237e6_buggy.java b/tmp/592155e1-6af4-4143-81cf-752b0859ebb2_fixed.java
index 4e21866..530b371 100644
--- a/tmp/8c83d5ac-653a-49a9-920c-91070ef237e6_buggy.java
+++ b/tmp/592155e1-6af4-4143-81cf-752b0859ebb2_fixed.java
@@ -1,10 +1,32 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        final int nR = m.getRowDimension();
+        // Handle small or identity-like matrices directly
+        if (nR == 1) {
+            return MatrixUtils.createRealMatrix(new double[][] { { FastMath.sqrt(m.getEntry(0, 0)) } });
+        }
+        // For diagonal matrices, take the square root of each diagonal element
+        boolean isDiagonal = true;
+        for (int i = 0; i < nR && isDiagonal; i++) {
+            for (int j = 0; j < nR && isDiagonal; j++) {
+                if (i != j && m.getEntry(i, j) != 0.0) {
+                    isDiagonal = false;
+                }
+            }
+        }
+        if (isDiagonal) {
+            final double[][] sqrtData = new double[nR][nR];
+            for (int i = 0; i < nR; i++) {
+                sqrtData[i][i] = FastMath.sqrt(m.getEntry(i, i));
+            }
+            return MatrixUtils.createRealMatrix(sqrtData);
+        }
+        // Fall back to eigendecomposition for other cases
         final EigenDecomposition dec = new EigenDecomposition(m);
         return dec.getSquareRoot();
     }
\ No newline at end of file
