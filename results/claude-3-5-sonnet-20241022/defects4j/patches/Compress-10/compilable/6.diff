diff --git a/tmp/249948b5-1af0-4368-aa1b-abf386197806_buggy.java b/tmp/e5bf64b2-cd3e-4d4a-8aa0-1416261f4270_fixed.java
index 85e6a42..ef74db7 100644
--- a/tmp/249948b5-1af0-4368-aa1b-abf386197806_buggy.java
+++ b/tmp/e5bf64b2-cd3e-4d4a-8aa0-1416261f4270_fixed.java
@@ -1,50 +1,62 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
         for (ZipArchiveEntry ze : entries.keySet()) {
             OffsetEntry offsetEntry = entries.get(ze);
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
             int lenToSkip = fileNameLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip file name in"
                                                + " local file header");
                 }
                 lenToSkip -= skipped;
             }
             byte[] localExtraData = new byte[extraFieldLen];
             archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
+            // Merge local file extra data with central directory extra data
+            byte[] newExtra = ze.getExtra();
+            if (localExtraData.length > 0) {
+                if (newExtra == null) {
+                    newExtra = localExtraData;
+                } else {
+                    byte[] tmp = new byte[newExtra.length + localExtraData.length];
+                    System.arraycopy(newExtra, 0, tmp, 0, newExtra.length);
+                    System.arraycopy(localExtraData, 0, tmp, newExtra.length, localExtraData.length);
+                    newExtra = tmp;
+                }
+            }
+            ze.setExtra(newExtra);
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                          nc.comment);
                 if (!orig.equals(ze.getName())) {
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
         }
     }
\ No newline at end of file
