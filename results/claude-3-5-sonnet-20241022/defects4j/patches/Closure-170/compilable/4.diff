diff --git a/tmp/157b567b-e646-4d4d-802e-63b78c4b8c4b_buggy.java b/tmp/1f35b409-d73b-411c-bd76-f4119e514291_fixed.java
index 5abdeb5..bdcb2cb 100644
--- a/tmp/157b567b-e646-4d4d-802e-63b78c4b8c4b_buggy.java
+++ b/tmp/1f35b409-d73b-411c-bd76-f4119e514291_fixed.java
@@ -1,29 +1,28 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
         numUsesWithinCfgNode = 0;
         AbstractCfgNodeTraversalCallback gatherCb =
             new AbstractCfgNodeTraversalCallback() {
 
             @Override
             public void visit(NodeTraversal t, Node n, Node parent) {
                 if (n.isName() && n.getString().equals(varName) &&
                     // We make a special exception when the entire cfgNode is a chain
                     // of assignments, since in that case the assignment statements
                     // will happen after the inlining of the right hand side.
                     // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
                     //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+                    !(parent.isAssign() && parent.getFirstChild() == n) &&
+                    !(parent.getParent() != null && parent.getParent().isHook())) {
                     // Don't count lhs of top-level assignment chain
+                    // Don't count assignments inside conditional operators
                     numUsesWithinCfgNode++;
                 }
             }
-
         };
 
         NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
