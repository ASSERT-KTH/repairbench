diff --git a/tmp/3d3c8cf7-1af2-4c32-848a-453032d50ee8_buggy.java b/tmp/3d9466aa-c88c-44e1-b096-3c2b61aaf4d8_fixed.java
index 5abdeb5..2d0b4ea 100644
--- a/tmp/3d3c8cf7-1af2-4c32-848a-453032d50ee8_buggy.java
+++ b/tmp/3d9466aa-c88c-44e1-b096-3c2b61aaf4d8_fixed.java
@@ -1,29 +1,23 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Only count this as a use if it's not the left hand side of an assignment
+            if (!NodeUtil.isLhs(n, parent)) {
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
