diff --git a/tmp/fbcb08c2-7f35-4fbe-8b55-07aadf61517f_buggy.java b/tmp/7d3076ea-4615-4b39-aae9-a4d24c9529a7_fixed.java
index 1478ee1..c282b1f 100644
--- a/tmp/fbcb08c2-7f35-4fbe-8b55-07aadf61517f_buggy.java
+++ b/tmp/7d3076ea-4615-4b39-aae9-a4d24c9529a7_fixed.java
@@ -1,24 +1,24 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
+    final double norm1 = v1.getNorm();
+    final double norm2 = v2.getNorm();
+    if ((norm1 == 0.0) || (norm2 == 0.0)) {
+        return new Vector3D(0, 0, 0);
+    }
 
     // we reduce cancellation errors by preconditioning,
     // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
     // v3 without loss of precision. See Kahan lecture
     // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+    final double scale = FastMath.floor(FastMath.pow(2.0, FastMath.floor(FastMath.log(norm1 / norm2) / FastMath.log(2.0))));
+    final Vector3D v3 = new Vector3D(1, v1, -scale, v2);
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(v3.y * v2.z - v3.z * v2.y,
+                       v3.z * v2.x - v3.x * v2.z,
+                       v3.x * v2.y - v3.y * v2.x);
 }
\ No newline at end of file
