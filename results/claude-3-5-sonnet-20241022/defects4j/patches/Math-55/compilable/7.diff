diff --git a/tmp/9668c5d2-5912-4f6a-a3a4-7334a800bcbd_buggy.java b/tmp/1b269fe7-a9bd-4bf7-bb9b-c783cac8962b_fixed.java
index 1478ee1..23c0ff9 100644
--- a/tmp/9668c5d2-5912-4f6a-a3a4-7334a800bcbd_buggy.java
+++ b/tmp/1b269fe7-a9bd-4bf7-bb9b-c783cac8962b_fixed.java
@@ -1,24 +1,30 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
     
-
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
+    final double x1 = v1.getX();
+    final double y1 = v1.getY();
+    final double z1 = v1.getZ();
+    final double x2 = v2.getX();
+    final double y2 = v2.getY();
+    final double z2 = v2.getZ();
 
     // we reduce cancellation errors by preconditioning,
     // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
     // v3 without loss of precision. See Kahan lecture
     // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+    final double kx1 = FastMath.floor(x1 / x2 + 0.5);
+    final double ky1 = FastMath.floor(y1 / y2 + 0.5);
+    final double kz1 = FastMath.floor(z1 / z2 + 0.5);
+    final double dx1 = x1 - kx1 * x2;
+    final double dy1 = y1 - ky1 * y2;
+    final double dz1 = z1 - kz1 * z2;
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(dy1 * z2 - dz1 * y2,
+                       dz1 * x2 - dx1 * z2,
+                       dx1 * y2 - dy1 * x2);
 }
\ No newline at end of file
