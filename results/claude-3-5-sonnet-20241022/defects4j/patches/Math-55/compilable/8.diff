diff --git a/tmp/4e265d04-9a7a-4468-8636-996168fbba30_buggy.java b/tmp/93670628-862e-41c2-9161-1abfb635d196_fixed.java
index 1478ee1..32d24d2 100644
--- a/tmp/4e265d04-9a7a-4468-8636-996168fbba30_buggy.java
+++ b/tmp/93670628-862e-41c2-9161-1abfb635d196_fixed.java
@@ -1,24 +1,26 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute max norm
+    double n1 = Math.max(Math.abs(v1.x), Math.max(Math.abs(v1.y), Math.abs(v1.z)));
+    double n2 = Math.max(Math.abs(v2.x), Math.max(Math.abs(v2.y), Math.abs(v2.z)));
+    double scale = Math.max(n1, n2);
     
+    if (scale == 0) {
+        return new Vector3D(0, 0, 0);
+    }
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+    // Rescale to handle cancellation
+    double x1 = v1.x / scale;
+    double y1 = v1.y / scale;
+    double z1 = v1.z / scale;
+    double x2 = v2.x / scale;
+    double y2 = v2.y / scale;
+    double z2 = v2.z / scale;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute cross product
+    double dx = y1 * z2 - z1 * y2;
+    double dy = z1 * x2 - x1 * z2;
+    double dz = x1 * y2 - y1 * x2;
 
+    // Rescale back
+    return new Vector3D(dx * scale, dy * scale, dz * scale);
 }
\ No newline at end of file
