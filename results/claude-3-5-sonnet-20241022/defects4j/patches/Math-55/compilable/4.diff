diff --git a/tmp/dc194eb5-deac-49c1-a6b8-39549d1b617e_buggy.java b/tmp/36734019-56cf-4021-bb20-63424e17e8b1_fixed.java
index 1478ee1..d611829 100644
--- a/tmp/dc194eb5-deac-49c1-a6b8-39549d1b617e_buggy.java
+++ b/tmp/36734019-56cf-4021-bb20-63424e17e8b1_fixed.java
@@ -1,24 +1,18 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute dot products
+    double v1Dotv2 = Vector3D.dotProduct(v1, v2);
+    double v2Dotv2 = Vector3D.dotProduct(v2, v2);
     
+    // Compute rho to handle cancellation issues
+    double rho = (v2Dotv2 == 0) ? 0 : Math.rint(v1Dotv2 / v2Dotv2 * 256.0) / 256.0;
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Create preconditioned vector v3 = v1 - rho * v2
+    Vector3D v3 = new Vector3D(1.0, v1, -rho, v2);
     
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute the cross product using the preconditioned vector
+    double x = v3.y * v2.z - v3.z * v2.y;
+    double y = v3.z * v2.x - v3.x * v2.z;
+    double z = v3.x * v2.y - v3.y * v2.x;
     
+    return new Vector3D(x, y, z);
 }
\ No newline at end of file
