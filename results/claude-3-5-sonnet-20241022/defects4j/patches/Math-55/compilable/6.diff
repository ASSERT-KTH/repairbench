diff --git a/tmp/7b0caecf-1a40-4a6b-bc53-dab45846522e_buggy.java b/tmp/63d60b30-d04d-4f46-9b06-18aafbbecb55_fixed.java
index 1478ee1..54e9dcf 100644
--- a/tmp/7b0caecf-1a40-4a6b-bc53-dab45846522e_buggy.java
+++ b/tmp/63d60b30-d04d-4f46-9b06-18aafbbecb55_fixed.java
@@ -1,24 +1,23 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    final double v1x = v1.getX();
+    final double v1y = v1.getY();
+    final double v1z = v1.getZ();
+    final double v2x = v2.getX();
+    final double v2y = v2.getY();
+    final double v2z = v2.getZ();
     
+    final double v1Norm2 = v1x * v1x + v1y * v1y + v1z * v1z;
+    final double v2Norm2 = v2x * v2x + v2y * v2y + v2z * v2z;
+    final double rho = FastMath.rint((v1x * v2x + v1y * v2y + v1z * v2z) / v2Norm2 * 256.0) / 256.0;
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute v3 = v1 - rho v2
+    final double v3x = v1x - rho * v2x;
+    final double v3y = v1y - rho * v2y;
+    final double v3z = v1z - rho * v2z;
     
+    // Compute cross product from v3 and v2
+    return new Vector3D(v3y * v2z - v3z * v2y,
+                       v3z * v2x - v3x * v2z,
+                       v3x * v2y - v3y * v2x);
 }
\ No newline at end of file
