diff --git a/tmp/8d3c950e-4756-4392-b97f-fd363724034d_buggy.java b/tmp/68d8bf1b-bfb6-412f-af8b-6e5a17ef2929_fixed.java
index 1478ee1..2b2017a 100644
--- a/tmp/8d3c950e-4756-4392-b97f-fd363724034d_buggy.java
+++ b/tmp/68d8bf1b-bfb6-412f-af8b-6e5a17ef2929_fixed.java
@@ -1,24 +1,57 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // prepare computation
+    double x1 = v1.getX();
+    double y1 = v1.getY();
+    double z1 = v1.getZ();
+    double x2 = v2.getX();
+    double y2 = v2.getY();
+    double z2 = v2.getZ();
 
+    // find normalized components
+    double n1 = FastMath.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
+    double n2 = FastMath.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
+    if ((n1 == 0) || (n2 == 0)) {
+        return new Vector3D(0, 0, 0);
+    }
+    double inv = 1.0 / (n1 * n2);
+    double c = inv * (x1 * x2 + y1 * y2 + z1 * z2);
+    if (c < -0.99999999999) {
+        return new Vector3D(0, 0, 0);
+    }
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    // compute vectorial product
+    double nx = FastMath.abs(x1) + FastMath.abs(x2);
+    double ny = FastMath.abs(y1) + FastMath.abs(y2);
+    double nz = FastMath.abs(z1) + FastMath.abs(z2);
+    if (nz > nx && nz > ny) {
+        double f = 1.0 / FastMath.sqrt((1 + c) * (1 - c));
+        double alpha = x2 * y1 - x1 * y2;
+        double beta  = (x1 * x2 + y1 * y2) * f;
+        double tx = (x1 + x2) * f;
+        double ty = (y1 + y2) * f;
+        double gamma = 0.5 * (tx * ty - beta * alpha);
+        return new Vector3D((x2 * z1 - x1 * z2) * f,
+                          (y2 * z1 - y1 * z2) * f,
+                          gamma);
+    } else if (ny > nx) {
+        double f = 1.0 / FastMath.sqrt((1 + c) * (1 - c));
+        double alpha = y2 * z1 - y1 * z2;
+        double beta  = (y1 * y2 + z1 * z2) * f;
+        double ty = (y1 + y2) * f;
+        double tz = (z1 + z2) * f;
+        double gamma = 0.5 * (ty * tz - beta * alpha);
+        return new Vector3D(gamma,
+                          (z2 * x1 - z1 * x2) * f,
+                          (x2 * y1 - x1 * y2) * f);
+    } else {
+        double f = 1.0 / FastMath.sqrt((1 + c) * (1 - c));
+        double alpha = z2 * x1 - z1 * x2;
+        double beta  = (z1 * z2 + x1 * x2) * f;
+        double tz = (z1 + z2) * f;
+        double tx = (x1 + x2) * f;
+        double gamma = 0.5 * (tz * tx - beta * alpha);
+        return new Vector3D((y2 * z1 - y1 * z2) * f,
+                          gamma,
+                          (y1 * x2 - y2 * x1) * f);
+    }
 }
\ No newline at end of file
