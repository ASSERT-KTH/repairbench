diff --git a/tmp/26751a17-3261-43e9-98c6-ac1c2b827e65_buggy.java b/tmp/75c8ef4d-352d-4e0f-b586-8f662527fc25_fixed.java
index b36c3f0..08b7c64 100644
--- a/tmp/26751a17-3261-43e9-98c6-ac1c2b827e65_buggy.java
+++ b/tmp/75c8ef4d-352d-4e0f-b586-8f662527fc25_fixed.java
@@ -1,58 +1,55 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
 static boolean functionCallHasSideEffects(
     Node callNode, @Nullable AbstractCompiler compiler) {
   if (callNode.getType() != Token.CALL) {
     throw new IllegalStateException(
         "Expected CALL node, got " + Token.name(callNode.getType()));
   }
 
   if (callNode.isNoSideEffectsCall()) {
     return false;
   }
 
   Node nameNode = callNode.getFirstChild();
 
   // Built-in functions with no side effects.
   if (nameNode.getType() == Token.NAME) {
     String name = nameNode.getString();
     if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
       return false;
     }
   } else if (nameNode.getType() == Token.GETPROP) {
     if (callNode.hasOneChild()
         && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
               nameNode.getLastChild().getString())) {
       return false;
     }
 
     if (callNode.isOnlyModifiesThisCall()
         && evaluatesToLocalValue(nameNode.getFirstChild())) {
       return false;
     }
 
     // Functions in the "Math" namespace have no side effects.
+    if (nameNode.getFirstChild().getType() == Token.NAME
+        && nameNode.getFirstChild().getString().equals("Math")) {
+      return false;
+    }
 
     if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
       if (nameNode.getFirstChild().getType() == Token.REGEXP
           && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
         return false;
       } else if (nameNode.getFirstChild().getType() == Token.STRING
           && STRING_REGEXP_METHODS.contains(
               nameNode.getLastChild().getString())) {
         Node param = nameNode.getNext();
         if (param != null &&
             (param.getType() == Token.STRING
                 || param.getType() == Token.REGEXP))
         return false;
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
