diff --git a/tmp/b71e9c78-832a-4fc3-83b1-1a86b795dc0f_buggy.java b/tmp/c0a99afd-f16c-4717-8df1-7ae8b6bf949f_fixed.java
index f650982..a213058 100644
--- a/tmp/b71e9c78-832a-4fc3-83b1-1a86b795dc0f_buggy.java
+++ b/tmp/c0a99afd-f16c-4717-8df1-7ae8b6bf949f_fixed.java
@@ -1,42 +1,52 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
-        }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
-        }
-        if (l instanceof Iterator && r instanceof Iterator) {
+        if (l instanceof Iterator) {
+            Iterator iter = (Iterator) l;
+            if (r instanceof Iterator) {
                 return findMatch((Iterator) l, (Iterator) r);
             }
+            // Reset iterator and check each value
+            while (iter.hasNext()) {
+                if (equal(iter.next(), r)) {
+                    return true;
+                }
+            }
+            return false;
+        }
+        if (r instanceof Iterator) {
+            Iterator iter = (Iterator) r;
+            // Reset iterator and check each value
+            while (iter.hasNext()) {
+                if (equal(l, iter.next())) {
+                    return true;
+                }
+            }
+            return false;
+        }
         return equal(l, r);
     }
\ No newline at end of file
