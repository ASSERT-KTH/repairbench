diff --git a/tmp/a3511d52-6551-4896-a312-b6d28981b789_buggy.java b/tmp/8b8109cb-9700-4474-8a64-869cdf195c7f_fixed.java
index 544303b..c666e0b 100644
--- a/tmp/a3511d52-6551-4896-a312-b6d28981b789_buggy.java
+++ b/tmp/8b8109cb-9700-4474-8a64-869cdf195c7f_fixed.java
@@ -1,29 +1,25 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                          (restrictToNonNegative ? 0 : mostNegative);
+        
         if (basicRow != null) {
+            boolean foundOne = false;
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                 if (tableau.getEntry(basicRow, j) == 1) {
+                    foundOne = true;
+                    break;
+                }
+            }
+            if (foundOne) {
                 coefficients[i] = 0;
             }
         }
     }
-        }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
