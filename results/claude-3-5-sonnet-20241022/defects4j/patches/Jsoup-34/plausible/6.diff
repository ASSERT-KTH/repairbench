diff --git a/tmp/b0f4396f-b705-436d-8561-8fdbcd757e82_buggy.java b/tmp/ec344286-2841-438b-b665-e6c42d497ac9_fixed.java
index 21f64c6..948d255 100644
--- a/tmp/b0f4396f-b705-436d-8561-8fdbcd757e82_buggy.java
+++ b/tmp/ec344286-2841-438b-b665-e6c42d497ac9_fixed.java
@@ -1,23 +1,26 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
             while(++offset < length && startChar != input[offset]);
+        
+        if (offset >= length)
+            return -1;
+            
         int i = offset + 1;
         int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (last <= length) { // ensure the full sequence can fit within the remaining length
+            boolean matched = true;
+            for (int j = 1; j < seq.length() && i < last; i++, j++) {
+                if (seq.charAt(j) != input[i]) {
+                    matched = false;
+                    break;
+                }
+            }
+            if (matched && i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
