diff --git a/tmp/71295a76-2e3d-4c5a-a5ee-18248378f9c9_buggy.java b/tmp/444a643e-fb9f-4623-8557-5f72ffca85e9_fixed.java
index 21f64c6..ee7b1ea 100644
--- a/tmp/71295a76-2e3d-4c5a-a5ee-18248378f9c9_buggy.java
+++ b/tmp/444a643e-fb9f-4623-8557-5f72ffca85e9_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while(++offset < length && startChar != input[offset]);
+            if (offset >= length)
+                return -1;
+                
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int last = offset + seq.length();
+            if (last <= length) {  // check if the remaining length is enough for the sequence
+                boolean match = true;
+                for (int j = 1; j < seq.length(); j++, i++) {
+                    if (input[i] != seq.charAt(j)) {
+                        match = false;
+                        break;
+                    }
+                }
+                if (match)
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
