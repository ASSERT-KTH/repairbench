diff --git a/tmp/9b67d952-47a8-44c3-9a97-2ff635d6aa2c_buggy.java b/tmp/959df97e-65fc-4759-a71f-8b3cb6d65007_fixed.java
index 21f64c6..0f95169 100644
--- a/tmp/9b67d952-47a8-44c3-9a97-2ff635d6aa2c_buggy.java
+++ b/tmp/959df97e-65fc-4759-a71f-8b3cb6d65007_fixed.java
@@ -1,23 +1,30 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
             while(++offset < length && startChar != input[offset]);
+        
+        if (offset >= length)
+            return -1;
+            
         int i = offset + 1;
         int last = i + seq.length()-1;
+        if (last > length)
+            return -1;
+            
         if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            boolean match = true;
+            for (int j = 1; j < seq.length() && i < length; i++, j++) {
+                if (seq.charAt(j) != input[i]) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match && i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
