diff --git a/tmp/e8663989-edd3-434e-91c7-a416ab961fbe_buggy.java b/tmp/b187c4ce-144b-4d12-a614-5bdeddfee4e4_fixed.java
index b4d4f38..b75f041 100644
--- a/tmp/e8663989-edd3-434e-91c7-a416ab961fbe_buggy.java
+++ b/tmp/b187c4ce-144b-4d12-a614-5bdeddfee4e4_fixed.java
@@ -1,123 +1,107 @@
-    /** Accept a step, triggering events and step handlers.
-     * @param interpolator step interpolator
-     * @param y state vector at step end time, must be reset if an event
-     * asks for resetting or if an events stops integration during the step
-     * @param yDot placeholder array where to put the time derivative of the state vector
-     * @param tEnd final integration time
-     * @return time at end of step
-     * @exception MaxCountExceededException if the interpolator throws one because
-     * the number of functions evaluations is exceeded
-     * @exception NoBracketingException if the location of an event cannot be bracketed
-     * @exception DimensionMismatchException if arrays dimensions do not match equations settings
-     * @since 2.2
-     */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
         double previousT = interpolator.getGlobalPreviousTime();
         final double currentT = interpolator.getGlobalCurrentTime();
 
         // initialize the events states if needed
         if (! statesInitialized) {
             for (EventState state : eventsStates) {
                 state.reinitializeBegin(interpolator);
             }
             statesInitialized = true;
         }
 
         // search for next events that may occur during the step
         final int orderingSign = interpolator.isForward() ? +1 : -1;
         SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
             public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                int comparison = orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                return comparison == 0 ? System.identityHashCode(es0) - System.identityHashCode(es1) : comparison;
             }
-
         });
 
         for (final EventState state : eventsStates) {
             if (state.evaluateStep(interpolator)) {
                 // the event occurs during the current step
                 occuringEvents.add(state);
             }
         }
 
         while (!occuringEvents.isEmpty()) {
 
             // handle the chronologically first event
             final Iterator<EventState> iterator = occuringEvents.iterator();
             final EventState currentEvent = iterator.next();
             iterator.remove();
 
             // restrict the interpolator to the first part of the step, up to the event
             final double eventT = currentEvent.getEventTime();
             interpolator.setSoftPreviousTime(previousT);
             interpolator.setSoftCurrentTime(eventT);
 
             // get state at event time
             interpolator.setInterpolatedTime(eventT);
             final double[] eventY = interpolator.getInterpolatedState().clone();
 
             // advance all event states to current time
             currentEvent.stepAccepted(eventT, eventY);
             isLastStep = currentEvent.stop();
 
             // handle the first part of the step, up to the event
             for (final StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
             if (isLastStep) {
                 // the event asked to stop integration
                 System.arraycopy(eventY, 0, y, 0, y.length);
                 for (final EventState remaining : occuringEvents) {
                     remaining.stepAccepted(eventT, eventY);
                 }
                 return eventT;
             }
 
             boolean needReset = currentEvent.reset(eventT, eventY);
             if (needReset) {
                 // some event handler has triggered changes that
                 // invalidate the derivatives, we need to recompute them
                 System.arraycopy(eventY, 0, y, 0, y.length);
                 computeDerivatives(eventT, y, yDot);
                 resetOccurred = true;
                 for (final EventState remaining : occuringEvents) {
                     remaining.stepAccepted(eventT, eventY);
                 }
                 return eventT;
             }
 
             // prepare handling of the remaining part of the step
             previousT = eventT;
             interpolator.setSoftPreviousTime(eventT);
             interpolator.setSoftCurrentTime(currentT);
 
             // check if the same event occurs again in the remaining part of the step
             if (currentEvent.evaluateStep(interpolator)) {
                 // the event occurs during the current step
                 occuringEvents.add(currentEvent);
             }
 
         }
 
         // last part of the step, after the last event
         interpolator.setInterpolatedTime(currentT);
         final double[] currentY = interpolator.getInterpolatedState();
         for (final EventState state : eventsStates) {
             state.stepAccepted(currentT, currentY);
             isLastStep = isLastStep || state.stop();
         }
         isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
         // handle the remaining part of the step, after all events if any
         for (StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
         }
 
         return currentT;
-
 }
\ No newline at end of file
