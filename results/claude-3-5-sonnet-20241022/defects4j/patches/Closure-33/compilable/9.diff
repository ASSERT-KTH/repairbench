diff --git a/tmp/04402d8c-53b4-41cd-aebf-097c6c755498_buggy.java b/tmp/85e08cdc-1668-4f5c-a062-31b291d03034_fixed.java
index fb2b020..212ff6a 100644
--- a/tmp/04402d8c-53b4-41cd-aebf-097c6c755498_buggy.java
+++ b/tmp/85e08cdc-1668-4f5c-a062-31b291d03034_fixed.java
@@ -1,27 +1,24 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
+            // Only define properties that are declared in the constraint
+            if (!isPropertyTypeDeclared(prop) && propType != null) {
                 JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
