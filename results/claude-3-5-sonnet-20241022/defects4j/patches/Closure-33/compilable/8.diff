diff --git a/tmp/bf66c13f-d276-445b-a31e-a59217edfe2e_buggy.java b/tmp/35e6b276-e291-4e7a-8e8a-07e7d960c9c8_fixed.java
index fb2b020..6d6b9fa 100644
--- a/tmp/bf66c13f-d276-445b-a31e-a59217edfe2e_buggy.java
+++ b/tmp/35e6b276-e291-4e7a-8e8a-07e7d960c9c8_fixed.java
@@ -1,27 +1,22 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
+            if (!isPropertyTypeDeclared(prop) && !hasProperty(prop)) {
+                defineInferredProperty(prop, propType, null);
             }
         }
     }
 }
\ No newline at end of file
