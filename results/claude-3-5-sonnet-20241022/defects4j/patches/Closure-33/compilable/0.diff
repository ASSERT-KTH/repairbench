diff --git a/tmp/de68aeb2-ff8e-4317-a0c9-76aaf36fc8d3_buggy.java b/tmp/2a9e43d6-44c9-4e45-9c5d-978a95ed2d1a_fixed.java
index fb2b020..9b9504d 100644
--- a/tmp/de68aeb2-ff8e-4317-a0c9-76aaf36fc8d3_buggy.java
+++ b/tmp/2a9e43d6-44c9-4e45-9c5d-978a95ed2d1a_fixed.java
@@ -1,27 +1,23 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
+            if (!isPropertyTypeDeclared(prop) && !hasProperty(prop)) {
                 JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
