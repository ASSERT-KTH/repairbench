diff --git a/tmp/36a5fb54-0d41-43fa-a0f0-125b1a4835b7_buggy.java b/tmp/05411453-3d1a-4739-8233-7313f4ea6601_fixed.java
index 6e05e4b..df8b67d 100644
--- a/tmp/36a5fb54-0d41-43fa-a0f0-125b1a4835b7_buggy.java
+++ b/tmp/05411453-3d1a-4739-8233-7313f4ea6601_fixed.java
@@ -1,51 +1,52 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
-      if (name == null) {
+      // Reject unnamed function statements - they should only appear in expressions
+      if (name == null && !functionNode.isExpressionClosure()) {
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
       return node;
     }
\ No newline at end of file
