diff --git a/tmp/8cda1a02-5fd2-4f5b-86a8-7a3b24c51623_buggy.java b/tmp/82177152-f282-47cf-9fde-a856fd8be39b_fixed.java
index 5f8ac1a..01bb781 100644
--- a/tmp/8cda1a02-5fd2-4f5b-86a8-7a3b24c51623_buggy.java
+++ b/tmp/82177152-f282-47cf-9fde-a856fd8be39b_fixed.java
@@ -1,34 +1,47 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    
+    // Handle comparison of pointers from different hierarchies (like variables vs nodes)
+    if (depth1 == 1 && depth2 == 1) {
+        if (p1 == null) return -1;
+        if (p2 == null) return 1;
+        if (p1.equals(p2)) return 0;
+        // Compare based on pointer types and values when from different hierarchies
+        int type1 = p1.getClass().getName().hashCode();
+        int type2 = p2.getClass().getName().hashCode();
+        if (type1 != type2) return type1 < type2 ? -1 : 1;
+        return p1.toString().compareTo(p2.toString());
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
     
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Compare based on string representation when at root level
+        return p1.toString().compareTo(p2.toString());
     }
+    
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
