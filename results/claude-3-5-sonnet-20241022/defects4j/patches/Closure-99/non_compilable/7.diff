diff --git a/tmp/f36acef6-dd94-4cf5-8d75-c20e80ef2484_buggy.java b/tmp/abf07ba3-21ad-4a8d-ac6c-aa7cd46b5c6d_fixed.java
index 86553f4..8a48eb3 100644
--- a/tmp/f36acef6-dd94-4cf5-8d75-c20e80ef2484_buggy.java
+++ b/tmp/abf07ba3-21ad-4a8d-ac6c-aa7cd46b5c6d_fixed.java
@@ -1,57 +1,56 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
     if (n.getType() == Token.FUNCTION) {
         // Don't traverse functions that are constructors or have the @this
         // or @override annotation.
         JSDocInfo jsDoc = getFunctionJsDocInfo(n);
         if (jsDoc != null &&
             (jsDoc.isConstructor() ||
              jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+             jsDoc.isOverride() ||
+             jsDoc.isInterface())) {
             return false;
         }
 
         // Don't traverse functions unless they would normally
         // be able to have a @this annotation associated with them. e.g.,
         // var a = function() { }; // or
         // function a() {} // or
         // a.x = function() {};
         int pType = parent.getType();
         if (!(pType == Token.BLOCK ||
               pType == Token.SCRIPT ||
               pType == Token.NAME ||
               pType == Token.ASSIGN)) {
             return false;
         }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
         Node lhs = parent.getFirstChild();
         Node rhs = lhs.getNext();
         
         if (n == lhs) {
             // Always traverse the left side of the assignment. To handle
             // nested assignments properly (e.g., (a = this).property = c;),
             // assignLhsChild should not be overridden.
             if (assignLhsChild == null) {
                 assignLhsChild = lhs;
             }
         } else {
             // Only traverse the right side if it's not an assignment to a prototype
             // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+            if (lhs.getType() == Token.GETPROP) {
+                String propName = lhs.getLastChild().getString();
+                if (propName.equals("prototype") || containsPrototype(lhs)) {
                     return false;
                 }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+            } else if (lhs.getType() == Token.GETELEM && 
+                      lhs.getFirstChild().getQualifiedName() != null &&
+                      lhs.getFirstChild().getQualifiedName().contains(".prototype")) {
                 return false;
             }
         }
     }
 
     return true;
 }
\ No newline at end of file
