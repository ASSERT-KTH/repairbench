diff --git a/tmp/bc25d8a0-2394-4d69-b5cf-1c50a8333e52_buggy.java b/tmp/7b82183a-759b-4496-a6e1-7020892b9d36_fixed.java
index be2af16..250cc32 100644
--- a/tmp/bc25d8a0-2394-4d69-b5cf-1c50a8333e52_buggy.java
+++ b/tmp/7b82183a-759b-4496-a6e1-7020892b9d36_fixed.java
@@ -1,29 +1,33 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // Calculate timestamp using Julian or Gregorian chronology based on cutover
     long instant;
+    long julianInstant = iJulianChronology.getDateTimeMillis
+        (year, monthOfYear, dayOfMonth,
+         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+         
+    if (julianInstant < iCutoverMillis) {
+        // Date is before cutover, use Julian date
+        instant = julianInstant;
+    } else {
+        // Date is on or after cutover, use Gregorian date
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            // Date is in the cutover gap
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
