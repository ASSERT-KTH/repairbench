diff --git a/tmp/fce71e99-aa9c-435e-a3c9-0335283868cf_buggy.java b/tmp/9c2db76d-a98c-4d8f-840f-ba5c5de0fce6_fixed.java
index 939f49b..29dac6c 100644
--- a/tmp/fce71e99-aa9c-435e-a3c9-0335283868cf_buggy.java
+++ b/tmp/9c2db76d-a98c-4d8f-840f-ba5c5de0fce6_fixed.java
@@ -1,21 +1,28 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+        Node firstChild = n.getFirstChild();
         
+        // Handle direct prototype property
+        if (firstChild.getType() == Token.GETPROP) {
+          Node child = firstChild.getFirstChild().getNext();
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
+        
+        // Handle array-style prototype property
+        Node lastChild = n.getLastChild();
+        if (firstChild.getType() == Token.NAME && 
+            lastChild.getType() == Token.STRING &&
+            lastChild.getString().equals("prototype")) {
+          return true;
+        }
       }
 
       return false;
     }
\ No newline at end of file
