diff --git a/tmp/a686dadb-8af0-4dc4-9a46-527e5a1975b1_buggy.java b/tmp/3c2c7bd8-6d29-499e-a7e3-bfdd2990a100_fixed.java
index 939f49b..39642d8 100644
--- a/tmp/a686dadb-8af0-4dc4-9a46-527e5a1975b1_buggy.java
+++ b/tmp/3c2c7bd8-6d29-499e-a7e3-bfdd2990a100_fixed.java
@@ -1,21 +1,19 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // Check if the property chain contains "prototype"
+        Node current = n;
+        while (current != null && current.getType() == Token.GETPROP) {
+          Node propNode = current.getLastChild();
+          if (propNode.getType() == Token.STRING &&
+              propNode.getString().equals("prototype")) {
             return true;
           }
+          current = current.getFirstChild();
         }
       }
 
       return false;
     }
\ No newline at end of file
