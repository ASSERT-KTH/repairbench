diff --git a/tmp/5f9ef78f-02c3-4b46-99b2-3d47127f98c7_buggy.java b/tmp/d31b44e4-c965-4d9e-9f63-4cee1b7f80b0_fixed.java
index c9da1b7..7f37a42 100644
--- a/tmp/5f9ef78f-02c3-4b46-99b2-3d47127f98c7_buggy.java
+++ b/tmp/d31b44e4-c965-4d9e-9f63-4cee1b7f80b0_fixed.java
@@ -1,33 +1,27 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
-
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
             }
-
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
-
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                // Just accept the new one, no need to throw exception
+                // This allows proper handling of overloaded constructors
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
