diff --git a/tmp/1fa6ea14-ea5e-416b-9f74-ec25ef386687_buggy.java b/tmp/9a9c2c9e-ac47-4cbe-acba-69156b9bf772_fixed.java
index d6a560a..fb4e705 100644
--- a/tmp/1fa6ea14-ea5e-416b-9f74-ec25ef386687_buggy.java
+++ b/tmp/9a9c2c9e-ac47-4cbe-acba-69156b9bf772_fixed.java
@@ -1,33 +1,41 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // If we're already in the process of resolving this type, return early to break cycles
+    if (isResolvingTypeDeclaration()) {
+        handleTypeCycle(t);
+        return this;
+    }
+
+    setResolvingTypeDeclaration(true);
+    try {
         // TODO(user): Investigate whether it is really necessary to keep two
         // different mechanisms for resolving named types, and if so, which order
         // makes more sense. Now, resolution via registry is first in order to
         // avoid triggering the warnings built into the resolution via properties.
         boolean resolved = resolveViaRegistry(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
         }
 
         if (resolved) {
             super.resolveInternal(t, enclosing);
             finishPropertyContinuations();
             return registry.isLastGeneration() ?
                 getReferencedType() : this;
         }
 
         resolveViaProperties(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
         }
 
         super.resolveInternal(t, enclosing);
         if (isResolved()) {
             finishPropertyContinuations();
         }
         return registry.isLastGeneration() ?
             getReferencedType() : this;
+    } finally {
+        setResolvingTypeDeclaration(false);
+    }
 }
\ No newline at end of file
