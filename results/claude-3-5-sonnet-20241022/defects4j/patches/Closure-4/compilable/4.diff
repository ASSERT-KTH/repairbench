diff --git a/tmp/fa1a9d3d-0457-411c-9926-64b3189169f0_buggy.java b/tmp/81e62e79-d5e3-4d4a-bd54-ed3841d13c77_fixed.java
index d6a560a..7b4f7c9 100644
--- a/tmp/fa1a9d3d-0457-411c-9926-64b3189169f0_buggy.java
+++ b/tmp/81e62e79-d5e3-4d4a-bd54-ed3841d13c77_fixed.java
@@ -1,33 +1,32 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this;  // Return early to prevent infinite recursion
     }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
             getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this;  // Return early to prevent infinite recursion
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
 }
\ No newline at end of file
