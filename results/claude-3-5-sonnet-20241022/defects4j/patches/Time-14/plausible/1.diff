diff --git a/tmp/832d231a-16e0-4fff-bb2a-66cf3badc768_buggy.java b/tmp/b72655ad-a3c4-45de-aedb-c7ae14ed2848_fixed.java
index 10616db..63c25f2 100644
--- a/tmp/832d231a-16e0-4fff-bb2a-66cf3badc768_buggy.java
+++ b/tmp/b72655ad-a3c4-45de-aedb-c7ae14ed2848_fixed.java
@@ -1,19 +1,16 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
-        if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+    
+    int[] newValues = new int[values.length];
+    System.arraycopy(values, 0, newValues, 0, values.length);
+    
+    // Use a base year that's a leap year (2000) to handle February 29th correctly
+    long instant = ISOChronology.getInstanceUTC().year().set(0, 2000);
     for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+        instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);
     }
     instant = add(instant, valueToAdd);
     return iChronology.get(partial, instant);
-        } else {
-            return super.add(partial, fieldIndex, values, valueToAdd);
-        }
 }
\ No newline at end of file
