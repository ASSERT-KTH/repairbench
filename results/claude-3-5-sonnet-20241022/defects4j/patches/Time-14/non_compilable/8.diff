diff --git a/tmp/fbc7b676-743c-4b6e-8046-d59ba9598617_buggy.java b/tmp/f5e43b3d-f3cd-4949-a036-d31c4c5f4a5e_fixed.java
index 10616db..66ea66b 100644
--- a/tmp/fbc7b676-743c-4b6e-8046-d59ba9598617_buggy.java
+++ b/tmp/f5e43b3d-f3cd-4949-a036-d31c4c5f4a5e_fixed.java
@@ -1,19 +1,36 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    
+    // For MonthDay type, need to handle leap year special cases
+    if (partial instanceof MonthDay) {
+        int month = values[0];
+        int day = values[1];
+        // If it's February 29th
+        if (month == 2 && day == 29) {
+            // Create a full datetime to properly handle leap year calculations
+            int year = 2012; // Use a leap year for the base calculation
+            long instant = getChronology().getDateTimeMillis(year, month, day, 0, 0, 0, 0);
+            instant = add(instant, valueToAdd);
+            int[] newValues = getChronology().get(partial, instant);
+            
+            // If moving to February and original was 29th, preserve the 29th
+            if (newValues[0] == 2 && values[1] == 29) {
+                newValues[1] = 29;
+            }
+            return newValues;
+        }
+    }
+    
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
