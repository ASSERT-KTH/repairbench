diff --git a/tmp/b56a0acb-32e8-4ea6-b031-7674b1abe621_buggy.java b/tmp/c470912d-0e1d-4520-b56d-2cf8eb826429_fixed.java
index 10616db..5bb513d 100644
--- a/tmp/b56a0acb-32e8-4ea6-b031-7674b1abe621_buggy.java
+++ b/tmp/c470912d-0e1d-4520-b56d-2cf8eb826429_fixed.java
@@ -1,19 +1,38 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    
+    // Special handling for MonthDay type to properly handle leap year dates
+    if (partial instanceof MonthDay) {
+        // Get the current month and day
+        int month = values[0];
+        int day = values[1];
+        
+        // Calculate the new month
+        int newMonth = ((month - 1 + valueToAdd) % 12 + 12) % 12 + 1;
+        
+        // Adjust the day if necessary for the target month
+        int maxDay = DateTimeConstants.DAYS_PER_MONTH[newMonth - 1];
+        if (newMonth == 2 && day > 28) {
+            // Special handling for February
+            day = 29;  // Preserve Feb 29 for MonthDay
+        } else {
+            day = Math.min(day, maxDay);
+        }
+        
+        return new int[] {newMonth, day};
+    }
+    
+    // For other cases, use the standard logic
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
