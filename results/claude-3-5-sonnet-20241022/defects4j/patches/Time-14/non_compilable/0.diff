diff --git a/tmp/cad848fa-b1d1-4c9d-a303-d128144eecc0_buggy.java b/tmp/dd7f1e3c-06c6-48a7-914d-5e81247b7a34_fixed.java
index 10616db..aa850eb 100644
--- a/tmp/cad848fa-b1d1-4c9d-a303-d128144eecc0_buggy.java
+++ b/tmp/dd7f1e3c-06c6-48a7-914d-5e81247b7a34_fixed.java
@@ -1,19 +1,35 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    
+    // Special handling for MonthDay type to preserve leap day when possible
+    if (partial instanceof MonthDay) {
+        int month = values[0];
+        int day = values[1];
+        // If we're starting with February 29th or moving to/from a date that could be February 29th
+        if (day > 28) {
+            int newMonth = ((month - 1 + valueToAdd) % 12 + 12) % 12 + 1; // Normalize to 1-12 range
+            // If moving to February, try to preserve the 29th
+            if (newMonth == 2) {
+                if (day > 29) {
+                    day = 29;
+                }
+                values[0] = newMonth;
+                values[1] = day;
+                return values;
+            }
+        }
+    }
+    
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
