diff --git a/tmp/27ca7342-81d7-48a1-b4a1-1c67049e0fd0_buggy.java b/tmp/ba60ac76-e6a6-4d1d-98ea-3504ff0b4ce9_fixed.java
index 10616db..3c82413 100644
--- a/tmp/27ca7342-81d7-48a1-b4a1-1c67049e0fd0_buggy.java
+++ b/tmp/ba60ac76-e6a6-4d1d-98ea-3504ff0b4ce9_fixed.java
@@ -1,19 +1,55 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    
+    if (partial instanceof MonthDay) {
+        int[] newValues = new int[2];
+        newValues[0] = values[0];  // month
+        newValues[1] = values[1];  // day
+        
+        int month = values[0];
+        int day = values[1];
+        
+        switch (partial.getFieldType(fieldIndex).getName().toLowerCase()) {
+            case "monthofyear":
+                month = ((month - 1 + valueToAdd) % 12 + 12) % 12 + 1;
+                // Adjust day if necessary (for month end cases)
+                if (day == 29 && month == 2) {
+                    if (!iChronology.isLeapYear(2000)) {  // Use any non-leap year as reference
+                        day = 28;
+                    }
+                } else if (day > iChronology.getDaysInMonth(2000, month)) {
+                    day = iChronology.getDaysInMonth(2000, month);
+                }
+                break;
+            case "dayofmonth":
+                int daysInMonth = iChronology.getDaysInMonth(2000, month);
+                int newDay = ((day - 1 + valueToAdd) % daysInMonth + daysInMonth) % daysInMonth + 1;
+                if (newDay != day) {
+                    if (month == 2 && day == 29 && newDay == 1) {
+                        month = 3;
+                    } else if (month == 2 && day == 1 && newDay == 29 && !iChronology.isLeapYear(2000)) {
+                        newDay = 28;
+                    }
+                }
+                day = newDay;
+                break;
+        }
+        
+        newValues[0] = month;
+        newValues[1] = day;
+        return newValues;
+    }
+    
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
-        } else {
+    }
+    
     return super.add(partial, fieldIndex, values, valueToAdd);
 }
\ No newline at end of file
-    }
