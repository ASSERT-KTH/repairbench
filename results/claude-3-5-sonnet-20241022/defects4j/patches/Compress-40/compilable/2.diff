diff --git a/tmp/b6f1424c-12ef-43e5-8a49-8ad89c5d2a5b_buggy.java b/tmp/b81822b9-3132-4151-82d1-273a66bbbc72_fixed.java
index 7116384..0ea6dde 100644
--- a/tmp/b6f1424c-12ef-43e5-8a49-8ad89c5d2a5b_buggy.java
+++ b/tmp/b81822b9-3132-4151-82d1-273a66bbbc72_fixed.java
@@ -1,39 +1,34 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
             return nextByte;
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsCached |= (nextByte << bitsCachedSize);
+        } else {
+            if (bitsCachedSize >= 56) { // to prevent overflow
+                final int bitsToShift = 64 - bitsCachedSize - 8;
+                bitsCached |= (nextByte << bitsToShift);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
+        }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsOut = (bitsCached & MASKS[count]);
         bitsCached >>>= count;
     } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        bitsOut = (bitsCached >> (64 - count)) & MASKS[count];
+        bitsCached <<= count;
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
