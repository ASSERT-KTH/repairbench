diff --git a/tmp/4ce3cc94-3127-43ea-9b7a-de2c0d107eb9_buggy.java b/tmp/5a3e2446-a836-4fb7-8614-d6d74dd78557_fixed.java
index c9c77a4..8ffdb26 100644
--- a/tmp/4ce3cc94-3127-43ea-9b7a-de2c0d107eb9_buggy.java
+++ b/tmp/5a3e2446-a836-4fb7-8614-d6d74dd78557_fixed.java
@@ -1,35 +1,49 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
+            // if path is already encoded, preserve it as-is
+            String path = u.getPath();
+            if (path != null && path.contains("%")) {
+                // path is already encoded, use it directly
                 URI uri = new URI(
                     u.getProtocol(),
                     u.getUserInfo(),
                     IDN.toASCII(decodePart(u.getHost())), // puny-code
                     u.getPort(),
-                decodePart(u.getPath()),
+                    path, // use original encoded path
                     null, null // query and fragment appended later so as not to encode
                 );
+            } else {
+                // path needs encoding
+                URI uri = new URI(
+                    u.getProtocol(),
+                    u.getUserInfo(),
+                    IDN.toASCII(decodePart(u.getHost())), // puny-code
+                    u.getPort(),
+                    decodePart(path),
+                    null, null // query and fragment appended later so as not to encode
+                );
+            }
 
             String normUrl = uri.toASCIIString();
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
             u = new URL(normUrl);
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
\ No newline at end of file
