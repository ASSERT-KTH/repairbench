diff --git a/tmp/0ba92ac3-282f-4702-ad1b-c13d5668fab9_buggy.java b/tmp/3820b0c9-c96a-4eef-bbbd-fab2fc14bc52_fixed.java
index c9c77a4..2fa6c0d 100644
--- a/tmp/0ba92ac3-282f-4702-ad1b-c13d5668fab9_buggy.java
+++ b/tmp/3820b0c9-c96a-4eef-bbbd-fab2fc14bc52_fixed.java
@@ -1,35 +1,37 @@
 URL build() {
     try {
+        String path = u.getPath(); // don't decode the path, preserve it as is
+        
         // use the URI class to encode non-ascii in path
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
             IDN.toASCII(decodePart(u.getHost())), // puny-code
             u.getPort(),
-                decodePart(u.getPath()),
+            path, // use original path without decoding
             null, null // query and fragment appended later so as not to encode
         );
 
         String normUrl = uri.toASCIIString();
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
