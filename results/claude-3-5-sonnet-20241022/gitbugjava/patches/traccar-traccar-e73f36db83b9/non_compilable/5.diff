diff --git a/tmp/4b3b84da-c447-48f4-9df2-5a4d0813deea_buggy.java b/tmp/1e1e8a53-1d78-412d-9c26-daebf4aae718_fixed.java
index cd6f89c..d113e70 100644
--- a/tmp/4b3b84da-c447-48f4-9df2-5a4d0813deea_buggy.java
+++ b/tmp/1e1e8a53-1d78-412d-9c26-daebf4aae718_fixed.java
@@ -1,102 +1,107 @@
 private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
     Parser parser = new Parser(PATTERN_ERI, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     long mask = parser.nextHexLong();
 
     LinkedList<Position> positions = new LinkedList<>();
 
     Integer power = parser.nextInt();
 
     Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
     while (itemParser.find()) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         decodeLocation(position, itemParser);
 
         positions.add(position);
     }
 
     Position position = positions.getLast();
 
     skipLocation(parser);
 
     if (power != null) {
         position.set(Position.KEY_POWER, power * 0.001);
     }
 
     if (parser.hasNextAny(12)) {
 
         position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
         position.set(Position.KEY_HOURS, parseHours(parser.next()));
         position.set(Position.PREFIX_ADC + 1, parser.next());
         position.set(Position.PREFIX_ADC + 2, parser.next());
         position.set(Position.PREFIX_ADC + 3, parser.next());
         if (parser.hasNext(2)) {
             position.set(Position.KEY_INPUT, parser.nextHexInt());
             position.set(Position.KEY_OUTPUT, parser.nextHexInt());
         }
         if (parser.hasNext(4)) {
             position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
             decodeStatus(position, parser);
         }
 
         int index = 0;
         String[] data = parser.next().split(",");
 
+        if (data.length > 0) {
             index += 1; // device type
 
             if (BitUtil.check(mask, 0)) {
                 index += 1; // digital fuel sensor data
             }
 
             if (BitUtil.check(mask, 1)) {
                 int deviceCount = Integer.parseInt(data[index++]);
                 for (int i = 1; i <= deviceCount; i++) {
                     index += 1; // id
                     index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                    if (data.length > index && !data[index].isEmpty()) {
+                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index], 16) * 0.0625);
                     }
+                    index += 1;
                 }
             }
 
             if (BitUtil.check(mask, 2)) {
                 index += 1; // can data
             }
 
             if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
+                if (data.length > index) {
                     int deviceCount = Integer.parseInt(data[index++]);
                     for (int i = 1; i <= deviceCount; i++) {
                         index += 1; // type
-                    if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                        if (BitUtil.check(mask, 3) && data.length > index) {
+                            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index]));
+                            index += 1;
                         }
                         if (BitUtil.check(mask, 4)) {
                             index += 1; // volume
                         }
                     }
                 }
-
+            }
+        }
     }
 
     if (parser.hasNext()) {
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     }
 
     decodeDeviceTime(position, parser);
     if (ignoreFixTime) {
         positions.clear();
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
