diff --git a/tmp/ab214c79-a790-4b29-a784-e74eec57371f_buggy.java b/tmp/c2a8ec5d-7852-4ea6-9cd9-242d23fd5b58_fixed.java
index 144f6a9..bb77218 100644
--- a/tmp/ab214c79-a790-4b29-a784-e74eec57371f_buggy.java
+++ b/tmp/c2a8ec5d-7852-4ea6-9cd9-242d23fd5b58_fixed.java
@@ -1,394 +1,399 @@
 private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {
         deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     buf.readUnsignedShort(); // length
     int type = buf.readUnsignedByte();
 
     if (type == MSG_STRING_INFO) {
 
         buf.readUnsignedInt(); // server flag
         String data;
         if (buf.readUnsignedByte() == 1) {
             data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);
         } else {
             data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);
         }
 
         Parser parser = new Parser(PATTERN_LOCATION, data);
 
         if (parser.matches()) {
             position.setValid(true);
             position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
             position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
             position.setCourse(parser.nextDouble());
             position.setSpeed(parser.nextDouble());
             position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));
         } else {
             getLastLocation(position, null);
             position.set(Position.KEY_RESULT, data);
         }
 
         return position;
 
     } else if (type == MSG_INFO) {
 
         int subType = buf.readUnsignedByte();
 
         getLastLocation(position, null);
 
         if (subType == 0x00) {
 
             position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);
             return position;
 
         } else if (subType == 0x05) {
 
             if (buf.readableBytes() >= 6 + 1 + 6) {
                 DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                         .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                         .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
                 position.setDeviceTime(dateBuilder.getDate());
             }
 
             int flags = buf.readUnsignedByte();
             position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));
             position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));
             return position;
 
         } else if (subType == 0x0a) {
 
             buf.skipBytes(8); // imei
             buf.skipBytes(8); // imsi
             position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll("f", ""));
             return position;
 
         } else if (subType == 0x0d) {
 
             if (buf.getByte(buf.readerIndex()) != '!') {
                 buf.skipBytes(6);
             }
 
             Parser parser = new Parser(PATTERN_FUEL, buf.toString(
                     buf.readerIndex(), buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII));
             if (!parser.matches()) {
-                    return null;
+                getLastLocation(position, null);
+                return position;
             }
 
             position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));
             position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));
 
             return position;
 
         } else if (subType == 0x1b) {
 
             if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {
                 String data = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();
                 position.set("serial", data.trim());
             } else {
                 buf.readUnsignedByte(); // header
                 buf.readUnsignedByte(); // type
                 position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));
                 buf.readUnsignedByte(); // checksum
                 buf.readUnsignedByte(); // footer
             }
             return position;
 
         }
+        return position; // Return position for unhandled subtypes
 
     } else if (type == MSG_X1_PHOTO_DATA) {
 
         int pictureId = buf.readInt();
 
         ByteBuf photo = photos.get(pictureId);
 
         buf.readUnsignedInt(); // offset
         buf.readBytes(photo, buf.readUnsignedShort());
 
         if (photo.writableBytes() > 0) {
             sendPhotoRequest(channel, pictureId);
         } else {
             position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, "jpg"));
             photos.remove(pictureId).release();
         }
+        getLastLocation(position, null);
+        return position;
 
     } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {
 
         if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {
             getLastLocation(position, position.getDeviceTime());
         }
 
         if (decodeLbs(position, buf, type, true)) {
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         }
 
         buf.skipBytes(buf.readUnsignedByte()); // additional cell towers
         buf.skipBytes(buf.readUnsignedByte()); // wifi access point
 
         int status = buf.readUnsignedByte();
         position.set(Position.KEY_STATUS, status);
 
         if (type == MSG_AZ735_ALARM) {
             switch (status) {
                 case 0xA0:
                     position.set(Position.KEY_ARMED, true);
                     break;
                 case 0xA1:
                     position.set(Position.KEY_ARMED, false);
                     break;
                 case 0xA2:
                 case 0xA3:
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                     break;
                 case 0xA4:
                     position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                     break;
                 case 0xA5:
                     position.set(Position.KEY_ALARM, Position.ALARM_DOOR);
                     break;
                 default:
                     break;
             }
         }
 
         buf.skipBytes(buf.readUnsignedByte()); // reserved extension
 
         sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);
 
         return position;
 
     } else if (type == MSG_OBD) {
 
         DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                 .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                 .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
 
         getLastLocation(position, dateBuilder.getDate());
 
         position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);
 
         String data = buf.readCharSequence(buf.readableBytes() - 18, StandardCharsets.US_ASCII).toString();
         for (String pair : data.split(",")) {
             String[] values = pair.split("=");
             if (values.length >= 2) {
                 switch (Integer.parseInt(values[0].substring(0, 2), 16)) {
                     case 40:
                         position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);
                         break;
                     case 43:
                         position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);
                         break;
                     case 45:
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);
                         break;
                     case 53:
                         position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);
                         break;
                     case 54:
                         position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);
                         break;
                     case 71:
                         position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);
                         break;
                     case 73:
                         position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);
                         break;
                     case 74:
                         position.set(Position.KEY_VIN, values[1]);
                         break;
                     default:
                         break;
                 }
             }
         }
 
         return position;
 
     } else if (type == MSG_GPS_MODULAR) {
 
         while (buf.readableBytes() > 6) {
             int moduleType = buf.readUnsignedShort();
             int moduleLength = buf.readUnsignedShort();
 
             switch (moduleType) {
                 case 0x03:
                     position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));
                     break;
                 case 0x09:
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x0a:
                     position.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());
                     break;
                 case 0x11:
                     CellTower cellTower = CellTower.from(
                             buf.readUnsignedShort(),
                             buf.readUnsignedShort(),
                             buf.readUnsignedShort(),
                             buf.readUnsignedMedium(),
                             buf.readUnsignedByte());
                     if (cellTower.getCellId() > 0) {
                         position.setNetwork(new Network(cellTower));
                     }
                     break;
                 case 0x18:
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
                     break;
                 case 0x28:
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);
                     break;
                 case 0x29:
                     position.set(Position.KEY_INDEX, buf.readUnsignedInt());
                     break;
                 case 0x2a:
                     int input = buf.readUnsignedByte();
                     position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);
                     position.set("tamper", BitUtil.from(input, 4) > 0);
                     break;
                 case 0x2b:
                     int event = buf.readUnsignedByte();
                     switch (event) {
                         case 0x11:
                             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                             break;
                         case 0x12:
                             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                             break;
                         case 0x13:
                             position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);
                             break;
                         case 0x14:
                             position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);
                             break;
                         default:
                             break;
                     }
                     position.set(Position.KEY_EVENT, event);
                     break;
                 case 0x2e:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x33:
                     position.setTime(new Date(buf.readUnsignedInt() * 1000));
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     position.setAltitude(buf.readShort());
 
                     double latitude = buf.readUnsignedInt() / 60.0 / 30000.0;
                     double longitude = buf.readUnsignedInt() / 60.0 / 30000.0;
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
 
                     int flags = buf.readUnsignedShort();
                     position.setCourse(BitUtil.to(flags, 10));
                     position.setValid(BitUtil.check(flags, 12));
 
                     if (!BitUtil.check(flags, 10)) {
                         latitude = -latitude;
                     }
                     if (BitUtil.check(flags, 11)) {
                         longitude = -longitude;
                     }
 
                     position.setLatitude(latitude);
                     position.setLongitude(longitude);
                     break;
                 case 0x34:
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     buf.readUnsignedIntLE(); // time
                     buf.skipBytes(buf.readUnsignedByte()); // content
                     break;
                 default:
                     buf.skipBytes(moduleLength);
                     break;
             }
         }
 
         if (position.getFixTime() == null) {
             getLastLocation(position, null);
         }
 
         sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);
 
         return position;
 
     } else if (type == MSG_MULTIMEDIA) {
 
         buf.skipBytes(8); // serial number
         long timestamp = buf.readUnsignedInt() * 1000;
         buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); // gps
         buf.skipBytes(2 + 2 + 2 + 2); // cell
 
         int mediaId = buf.readInt();
         int mediaLength = buf.readInt();
         int mediaType = buf.readUnsignedByte();
         int mediaFormat = buf.readUnsignedByte();
 
         if (mediaType == 0 && mediaFormat == 0) {
 
             buf.readUnsignedByte(); // event
 
             ByteBuf photo;
             if (buf.readUnsignedShort() == 0) {
                 photo = Unpooled.buffer(mediaLength);
                 if (photos.containsKey(mediaId)) {
                     photos.remove(mediaId).release();
                 }
                 photos.put(mediaId, photo);
             } else {
                 photo = photos.get(mediaId);
             }
 
             if (photo != null) {
                 buf.readBytes(photo, buf.readableBytes() - 3 * 2);
                 if (!photo.isWritable()) {
                     position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
                     getLastLocation(position, new Date(timestamp));
                     position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, "jpg"));
                     photos.remove(mediaId).release();
                 }
             }
 
         }
 
         sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);
 
         return position;
 
     } else if (type == MSG_SERIAL) {
 
         position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         getLastLocation(position, null);
 
         buf.readUnsignedByte(); // external device type code
         int length = buf.readableBytes() - 9; // line break + checksum + index + checksum + footer
 
         if (length <= 0) {
-                return null;
+            return position;
         } else if (length < 8) {
             position.set(
                     Position.PREFIX_TEMP + 1,
                     Double.parseDouble(buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString()));
         } else {
             buf.readUnsignedByte(); // card type
             position.set(
                     Position.KEY_DRIVER_UNIQUE_ID,
                     buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString());
         }
 
         return position;
 
     }
 
-        return null;
+    getLastLocation(position, null);
+    return position;
 }
\ No newline at end of file
