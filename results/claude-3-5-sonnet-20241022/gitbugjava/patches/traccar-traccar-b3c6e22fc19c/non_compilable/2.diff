diff --git a/tmp/225a1685-cafb-4669-b7b8-c43572d04b07_buggy.java b/tmp/a2c99633-5893-4bf8-8b67-95c5fc30a42f_fixed.java
index a23ed28..82a2639 100644
--- a/tmp/225a1685-cafb-4669-b7b8-c43572d04b07_buggy.java
+++ b/tmp/a2c99633-5893-4bf8-8b67-95c5fc30a42f_fixed.java
@@ -1,533 +1,505 @@
     private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         int length = buf.readUnsignedByte();
         int dataLength = length - 5;
         int type = buf.readUnsignedByte();
 
         Position position = new Position(getProtocolName());
         DeviceSession deviceSession = null;
         if (type != MSG_LOGIN) {
             deviceSession = getDeviceSession(channel, remoteAddress);
             if (deviceSession == null) {
                 return null;
             }
             position.setDeviceId(deviceSession.getDeviceId());
             if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {
                 deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));
             }
         }
 
         if (type == MSG_LOGIN) {
 
             String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);
             buf.readUnsignedShort(); // type
 
             deviceSession = getDeviceSession(channel, remoteAddress, imei);
             if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {
                 deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));
             }
 
             if (dataLength > 10) {
                 int extensionBits = buf.readUnsignedShort();
                 int hours = (extensionBits >> 4) / 100;
                 int minutes = (extensionBits >> 4) % 100;
                 int offset = (hours * 60 + minutes) * 60;
                 if ((extensionBits & 0x8) != 0) {
                     offset = -offset;
                 }
                 if (deviceSession != null) {
                     TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);
                     if (timeZone.getRawOffset() == 0) {
                         timeZone.setRawOffset(offset * 1000);
                         deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);
                     }
                 }
             }
 
             if (deviceSession != null) {
                 sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
             }
 
             return null;
 
         } else if (type == MSG_HEARTBEAT) {
 
             getLastLocation(position, null);
 
             int status = buf.readUnsignedByte();
             position.set(Position.KEY_ARMED, BitUtil.check(status, 0));
             position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));
             position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));
 
             if (buf.readableBytes() >= 2 + 6) {
                 position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
             }
             if (buf.readableBytes() >= 1 + 6) {
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             }
 
             sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
 
             return position;
 
         } else if (type == MSG_ADDRESS_REQUEST) {
 
             String response = "NA&&NA&&0##";
             ByteBuf content = Unpooled.buffer();
             content.writeByte(response.length());
             content.writeInt(0);
             content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));
             sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);
 
             return null;
 
         } else if (type == MSG_TIME_REQUEST) {
 
             Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
             ByteBuf content = Unpooled.buffer();
             content.writeByte(calendar.get(Calendar.YEAR) - 2000);
             content.writeByte(calendar.get(Calendar.MONTH) + 1);
             content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));
             content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));
             content.writeByte(calendar.get(Calendar.MINUTE));
             content.writeByte(calendar.get(Calendar.SECOND));
             sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);
 
             return null;
 
         } else if (type == MSG_X1_GPS) {
 
             buf.readUnsignedInt(); // data and alarm
 
             decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             buf.readUnsignedShort(); // terminal info
 
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
 
             position.setNetwork(new Network(CellTower.from(
                     buf.readUnsignedShort(), buf.readUnsignedByte(),
                     buf.readUnsignedShort(), buf.readUnsignedInt())));
 
             long driverId = buf.readUnsignedInt();
             if (driverId > 0) {
                 position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));
             }
 
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
 
             long portInfo = buf.readUnsignedInt();
 
             position.set(Position.KEY_INPUT, buf.readUnsignedByte());
             position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
 
             for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {
                 position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);
             }
 
             return position;
 
         } else if (type == MSG_X1_PHOTO_INFO) {
 
             buf.skipBytes(6); // time
             buf.readUnsignedByte(); // fix status
             buf.readUnsignedInt(); // latitude
             buf.readUnsignedInt(); // longitude
             buf.readUnsignedByte(); // camera id
             buf.readUnsignedByte(); // photo source
             buf.readUnsignedByte(); // picture format
 
             ByteBuf photo = Unpooled.buffer(buf.readInt());
             int pictureId = buf.readInt();
             photos.put(pictureId, photo);
             sendPhotoRequest(channel, pictureId);
 
             return null;
 
         } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {
 
             ByteBuf time = buf.readSlice(6);
             DateBuilder dateBuilder = new DateBuilder()
                     .setYear(BcdUtil.readInteger(time, 2))
                     .setMonth(BcdUtil.readInteger(time, 2))
                     .setDay(BcdUtil.readInteger(time, 2))
                     .setHour(BcdUtil.readInteger(time, 2))
                     .setMinute(BcdUtil.readInteger(time, 2))
                     .setSecond(BcdUtil.readInteger(time, 2));
             getLastLocation(position, dateBuilder.getDate());
 
             Network network = new Network();
 
             int wifiCount;
             if (type == MSG_WIFI_4) {
                 wifiCount = buf.readUnsignedByte();
             } else {
                 wifiCount = buf.getUnsignedByte(2);
             }
 
             for (int i = 0; i < wifiCount; i++) {
                 if (type == MSG_WIFI_4) {
                     buf.skipBytes(2);
                 }
                 WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();
                 wifiAccessPoint.setMacAddress(String.format("%02x:%02x:%02x:%02x:%02x:%02x",
                         buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),
                         buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));
                 if (type != MSG_WIFI_4) {
                     wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());
                 }
                 network.addWifiAccessPoint(wifiAccessPoint);
             }
 
             if (type != MSG_WIFI_4) {
 
                 int cellCount = buf.readUnsignedByte();
                 int mcc = buf.readUnsignedShort();
                 int mnc = buf.readUnsignedByte();
                 for (int i = 0; i < cellCount; i++) {
                     network.addCellTower(CellTower.from(
                             mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));
                 }
 
                 if (channel != null) {
                     ByteBuf response = Unpooled.buffer();
                     response.writeShort(0x7878);
                     response.writeByte(0);
                     response.writeByte(type);
                     response.writeBytes(time.resetReaderIndex());
                     response.writeByte('\r');
                     response.writeByte('\n');
                     channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));
                 }
 
             }
 
             position.setNetwork(network);
 
             return position;
 
         } else if (type == MSG_INFO) {
 
             getLastLocation(position, null);
 
             position.set(Position.KEY_POWER, buf.readShort() * 0.01);
 
             return position;
 
         } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {
 
             decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             decodeLbs(position, buf, type, false);
 
             position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);
             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
 
             return position;
 
         } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3
                 || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2
                 || type == MSG_WIFI_3 || type == MSG_WIFI_5) {
 
             boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;
 
             DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                     .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                     .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
 
             getLastLocation(position, dateBuilder.getDate());
 
             if (variant == Variant.WANWAY_S20) {
                 buf.readUnsignedByte(); // ta
             }
 
             int mcc = buf.readUnsignedShort();
             int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();
             Network network = new Network();
 
             int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;
             for (int i = 0; i < cellCount; i++) {
                 int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();
                 int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();
                 int rssi = -buf.readUnsignedByte();
                 if (lac > 0) {
                     network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));
                 }
             }
 
             if (variant != Variant.WANWAY_S20) {
                 buf.readUnsignedByte(); // ta
             }
 
             if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3
                     && type != MSG_LBS_2) {
                 int wifiCount = buf.readUnsignedByte();
                 for (int i = 0; i < wifiCount; i++) {
                     String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
                     network.addWifiAccessPoint(WifiAccessPoint.from(
                             mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));
                 }
             }
 
             position.setNetwork(network);
 
         } else if (type == MSG_STRING) {
 
             getLastLocation(position, null);
 
             int commandLength = buf.readUnsignedByte();
 
             if (commandLength > 0) {
                 buf.readUnsignedInt(); // server flag (reserved)
                 String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);
                 if (data.startsWith("<ICCID:")) {
                     position.set(Position.KEY_ICCID, data.substring(7, 27));
                 } else {
                     position.set(Position.KEY_RESULT, data);
                 }
             }
 
         } else if (type == MSG_BMS) {
 
             buf.skipBytes(8); // serial number
 
             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
 
             position.set("relativeCapacity", buf.readUnsignedByte());
             position.set("remainingCapacity", buf.readUnsignedShort());
             position.set("absoluteCapacity", buf.readUnsignedByte());
             position.set("fullCapacity", buf.readUnsignedShort());
             position.set("batteryHealth", buf.readUnsignedByte());
             position.set("batteryTemp", buf.readUnsignedShort() * 0.1 - 273.1);
             position.set("current", buf.readUnsignedShort());
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
             position.set("cycleIndex", buf.readUnsignedShort());
             for (int i = 1; i <= 14; i++) {
                 position.set("batteryCell" + i, buf.readUnsignedShort() * 0.001);
             }
             position.set("currentChargeInterval", buf.readUnsignedShort());
             position.set("maxChargeInterval", buf.readUnsignedShort());
             position.set("barcode", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());
             position.set("batteryVersion", buf.readUnsignedShort());
             position.set("manufacturer", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());
             position.set("batteryStatus", buf.readUnsignedInt());
 
             position.set("controllerStatus", buf.readUnsignedInt());
             position.set("controllerFault", buf.readUnsignedInt());
 
             sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
 
             return position;
 
         } else if (type == MSG_STATUS && buf.readableBytes() == 22) {
 
             getLastLocation(position, null);
 
             buf.readUnsignedByte(); // information content
             buf.readUnsignedShort(); // satellites
             buf.readUnsignedByte(); // alarm
             buf.readUnsignedByte(); // language
 
             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
 
             buf.readUnsignedByte(); // working mode
             buf.readUnsignedShort(); // working voltage
             buf.readUnsignedByte(); // reserved
             buf.readUnsignedShort(); // working times
             buf.readUnsignedShort(); // working time
 
             int value = buf.readUnsignedShort();
             double temperature = BitUtil.to(value, 15) * 0.1;
             position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);
 
+        } else if (type == MSG_ALARM) {
+
+            boolean extendedAlarm = dataLength > 7;
+            if (extendedAlarm) {
+                decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
+            } else {
+                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
+                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
+                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
+                getLastLocation(position, dateBuilder.getDate());
+            }
+
+            short alarmType = buf.readUnsignedByte();
+            String alarmString;
+            if (alarmType == 0x01) {
+                alarmString = extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL;
+            } else {
+                alarmString = decodeAlarm(alarmType);
+            }
+            position.set(Position.KEY_ALARM, alarmString);
+
         } else if (isSupported(type)) {
 
             if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {
                 return null; // multi-lbs message
             }
 
             if (hasGps(type)) {
                 decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
             } else {
                 getLastLocation(position, null);
             }
 
             if (hasLbs(type) && buf.readableBytes() > 6) {
                 boolean hasLength = hasStatus(type)
                         && type != MSG_LBS_STATUS
                         && type != MSG_LBS_ALARM
                         && (type != MSG_GPS_LBS_STATUS_1 || variant != Variant.VXT01);
                 decodeLbs(position, buf, type, hasLength);
             }
 
             if (hasStatus(type)) {
                 decodeStatus(position, buf);
                 if (variant == Variant.OBD6) {
                     int signal = buf.readUnsignedShort();
                     int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);
                     position.set(Position.KEY_SATELLITES, satellites);
                     position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));
                     position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));
                     buf.readUnsignedByte(); // language
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     buf.readUnsignedByte(); // working mode
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);
                 } else {
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));
                 }
             }
 
             if (type == MSG_STATUS && variant == Variant.VXT01) {
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             }
 
             if (type == MSG_GPS_LBS_1) {
                 if (variant == Variant.GT06E_CARD) {
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
                     String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();
                     buf.readUnsignedByte(); // alarm
                     buf.readUnsignedByte(); // swiped
                     position.set(Position.KEY_CARD, data.trim());
                 } else if (variant == Variant.BENWAY) {
                     int mask = buf.readUnsignedShort();
                     position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));
                     if (BitUtil.check(mask, 8 + 4)) {
                         int value = BitUtil.to(mask, 8 + 1);
                         if (BitUtil.check(mask, 8 + 1)) {
                             value = -value;
                         }
                         position.set(Position.PREFIX_TEMP + 1, value);
                     } else {
                         int value = BitUtil.to(mask, 8 + 2);
                         if (BitUtil.check(mask, 8 + 5)) {
                             position.set(Position.PREFIX_ADC + 1, value);
                         } else {
                             position.set(Position.PREFIX_ADC + 1, value * 0.1);
                         }
                     }
                 } else if (variant == Variant.VXT01) {
                     decodeStatus(position, buf);
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     buf.readUnsignedByte(); // alarm extension
                 } else if (variant == Variant.S5) {
                     decodeStatus(position, buf);
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));
                     position.set("oil", buf.readUnsignedShort());
                     int temperature = buf.readUnsignedByte();
                     if (BitUtil.check(temperature, 7)) {
                         temperature = -BitUtil.to(temperature, 7);
                     }
                     position.set(Position.PREFIX_TEMP + 1, temperature);
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);
                 } else if (variant == Variant.WETRUST) {
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
                     position.set(Position.KEY_CARD, buf.readCharSequence(
                             buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString());
                     position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);
                     position.set("cardStatus", buf.readUnsignedByte());
                     position.set(Position.KEY_DRIVING_TIME, buf.readUnsignedShort());
                 }
             }
 
             if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)
                     && buf.readableBytes() >= 3 + 6) {
                 position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);
                 position.set(Position.KEY_EVENT, buf.readUnsignedByte()); // reason
                 position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);
             }
 
             if (type == MSG_GPS_LBS_3) {
                 int module = buf.readUnsignedShort();
                 int subLength = buf.readUnsignedByte();
                 switch (module) {
                     case 0x0027:
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         break;
                     case 0x002E:
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
                         break;
                     case 0x003B:
                         position.setAccuracy(buf.readUnsignedShort() * 0.01);
                         break;
                     default:
                         buf.skipBytes(subLength);
                         break;
                 }
             }
 
             if (buf.readableBytes() == 4 + 6) {
                 position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
             }
 
-        } else if (type == MSG_ALARM) {
-
-            boolean extendedAlarm = dataLength > 7;
-            if (extendedAlarm) {
-                decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
-            } else {
-                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
-                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
-                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
-                getLastLocation(position, dateBuilder.getDate());
-            }
-            short alarmType = buf.readUnsignedByte();
-            switch (alarmType) {
-                case 0x01:
-                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);
-                    break;
-                case 0x80:
-                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
-                    break;
-                case 0x87:
-                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);
-                    break;
-                case 0x90:
-                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
-                    break;
-                case 0x91:
-                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                    break;
-                case 0x92:
-                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                    break;
-                case 0x93:
-                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
-                    break;
-                default:
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
-                    break;
-            }
-
-        } else {
-
-            if (dataLength > 0) {
-                buf.skipBytes(dataLength);
-            }
-            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {
-                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
-            }
-            return null;
-
         }
 
         if (hasLanguage(type)) {
             buf.readUnsignedShort();
         }
 
         if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {
             position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());
         }
 
         sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
 
         return position;
     }
\ No newline at end of file
