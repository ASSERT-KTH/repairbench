diff --git a/tmp/ff597c59-90d0-40de-97a0-5462328ea4cd_buggy.java b/tmp/bd2e5f6a-ffd2-4eb9-a2bd-5e4c3d627ca9_fixed.java
index 3c69e10..c86f642 100644
--- a/tmp/ff597c59-90d0-40de-97a0-5462328ea4cd_buggy.java
+++ b/tmp/bd2e5f6a-ffd2-4eb9-a2bd-5e4c3d627ca9_fixed.java
@@ -1,27 +1,34 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    // If the computed z-score is outside the range of the
+    // cumulative probability, 1 minus the absolute value of the
+    // cumulative probability should be used.
+    if (z < 0) {
+        return 2 * (1 + standardNormal.cumulativeProbability(z));
+    } else {
+        return 2 * (1 - standardNormal.cumulativeProbability(z));
+    }
 }
\ No newline at end of file
