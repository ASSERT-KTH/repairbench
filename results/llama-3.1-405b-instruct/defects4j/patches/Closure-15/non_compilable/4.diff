diff --git a/tmp/60b230ef-1016-4197-ad52-bfad16cb1260_buggy.java b/tmp/1ceb6378-c181-4967-bb9e-b3b758c86925_fixed.java
index b56897c..01fd0d0 100644
--- a/tmp/60b230ef-1016-4197-ad52-bfad16cb1260_buggy.java
+++ b/tmp/1ceb6378-c181-4967-bb9e-b3b758c86925_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // We care about calls to functions that pass one of the dependent
+  // variables to a non-side-effect free function. We also care about
+  // 'in' operator, 'delete' operator and property accesses.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  if (n.isIn() || n.isDelProp() || n.isGetProp() || n.isSetProp()) {
+    return true;
+  }
 
   for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
