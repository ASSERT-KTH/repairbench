diff --git a/tmp/d960599c-b2de-46fd-bedb-c89571a1c935_buggy.java b/tmp/36f1afe6-266b-4d8e-bebc-8baef71c0111_fixed.java
index b56897c..915e3d9 100644
--- a/tmp/d960599c-b2de-46fd-bedb-c89571a1c935_buggy.java
+++ b/tmp/36f1afe6-266b-4d8e-bebc-8baef71c0111_fixed.java
@@ -1,27 +1,92 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+        // Check for binary ops that contain a property lookup on its left hand
+        // side
+        if (n.isBinaryOp() &&
+            NodeUtil.mightHaveSideEffectInExprResult(
+                  n,
+                  Predicates.instanceOf(Node.class).named("ObjectPropertyGetter", Predicates.or(
+                           Predicates.instanceOf(Token.class),
+                           Predicates.instanceOf(Node.class)), true/*allowUnknown*/)
+              /*NodeUtil.isPropertyLookup(n.getFirstChild()) */,
+            this.name) //
+        {
+            return true;
+        }
+
+
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
-
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+        if(NodeUtil.receivesExternObjectData(n)) {
         	return true;
         }
-        }
-        return false;
+        /**
+         * Added here: inline variables from if, which, else where and cases
+         *
+         *
+         */
+
+//        int type = this.nodeWithInlineableAssignmentsTypes.get(this.firstParentStatement);
+        this.checkSwitch(n);
+
+         if (!(n.getParent()==null))
+
+        if(isInsideNewScopeBlock()){
+        	addToBlackOrGreyTree(n);
+
+			FlowSensitiveInlineVariableTraverse.traverseOneStatementLeftToRight2(
+					  n.getNext()
+
+					  )
+
+		};
+        //
+
+        //    System.err.println(node)
+        Node c1 ;
+        Set<Node> treeToParent = Sets.newHashSet(Arrays.asList(n,n.getChildren()));
+
+				for ( Node c:
+						treeToParent )
+
+	/*		if
+			 node is blackTree  blackTreeChildren will not use it
+		  c  use black Tree as it might be called without this traverse
+				 inline to value
+		  use this set to updateBlackTree   */
+
+           		InlineWithoutBlackNodeByFlowContext(c);
+
+		  updateBlackInTreeWithoutDelete(
+          c1=getBlackLeaf(c)
+          ,"insetBlacktreeNoDeleet"
+         ,"testInlineSideEffectCallInsideVar"
+
+
+          );
+
+           treeToParent.addAll(getFromParentFirstChildren2Children(
+    c,
+					 c.getNodeType()))
+
+							treeToParent.removeAll(Predicates.instanceOf(Node.class)
+               .named(nodeToItsParent2InlineTree)
+
+
+				);
+
+        return getTranverseFlagInline();
+
  }
\ No newline at end of file
