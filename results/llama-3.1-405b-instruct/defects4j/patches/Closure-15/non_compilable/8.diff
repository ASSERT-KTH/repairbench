diff --git a/tmp/2676843a-fb24-4370-8d96-eed1b79ab50d_buggy.java b/tmp/e4e93f49-1105-46fb-8ede-8008b43db871_fixed.java
index b56897c..8abeacd 100644
--- a/tmp/2676843a-fb24-4370-8d96-eed1b79ab50d_buggy.java
+++ b/tmp/e4e93f49-1105-46fb-8ede-8008b43db871_fixed.java
@@ -1,27 +1,34 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
   // TODO(user): We only care about calls to functions that
   // passes one of the dependent variable to a non-side-effect free
   // function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // Consider for-in loop as side-effect if its object property is being modified
+  if (n.isForIn() && n.getFirstChild().isAssign()) {
+    Node target = n.getFirstChild().getLastChild();
+    if (target.isMemberField() && target.getParent().getNext().isOp(Operator.IN)) {
+      return true;
+    }
+  }
 
   for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
