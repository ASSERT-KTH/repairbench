diff --git a/tmp/599c1586-00b2-4bae-a5bc-7daffe1b7e3b_buggy.java b/tmp/abba3d62-7f05-4ae0-93f3-8cc706f58c8f_fixed.java
index bfa2423..c8818e9 100644
--- a/tmp/599c1586-00b2-4bae-a5bc-7daffe1b7e3b_buggy.java
+++ b/tmp/abba3d62-7f05-4ae0-93f3-8cc706f58c8f_fixed.java
@@ -1,23 +1,42 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
  * @throws NotStrictlyPositiveException if {@code sampleSize} is not
  * positive.
  */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Get the common superclass of all singleton values
+    Class<?> superClass = null;
+    for (T singleton : singletons) {
+        if (superClass == null) {
+            superClass = singleton.getClass();
+        } else {
+            superClass = getCommonSuperclass(superClass, singleton.getClass());
+        }
+    }
+
+    // Create an array of the common superclass type
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(superClass, sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
+}
 
+// Helper method to get the common superclass of two classes
+private Class<?> getCommonSuperclass(Class<?> class1, Class<?> class2) {
+    Class<?> superClass = class1.getSuperclass();
+    while (!superClass.isAssignableFrom(class2)) {
+        superClass = superClass.getSuperclass();
+    }
+    return superClass;
 }
\ No newline at end of file
