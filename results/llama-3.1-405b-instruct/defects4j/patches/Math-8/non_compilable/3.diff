diff --git a/tmp/7586fda2-881a-4314-bc55-a4aa3ba0bb2b_buggy.java b/tmp/e27a94ee-5eb4-4a2a-b4a3-378d21505e30_fixed.java
index bfa2423..3e42cd6 100644
--- a/tmp/7586fda2-881a-4314-bc55-a4aa3ba0bb2b_buggy.java
+++ b/tmp/e27a94ee-5eb4-4a2a-b4a3-378d21505e30_fixed.java
@@ -1,23 +1,44 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
  * @throws NotStrictlyPositiveException if {@code sampleSize} is not
  * positive.
  */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(getClassOfT(), sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
+}
+
+// Add the following method to infer the class of T at runtime
+private Class<?> getClassOfT() {
+    if (singletons.isEmpty()) {
+        throw new RuntimeException("Cannot infer the class of T from an empty list of singletons.");
+    }
+    return getCommonSuperclass(singletons.stream().map(Object::getClass).toArray(Class[]::new));
+}
 
+// Helper method to get the common superclass of an array of classes
+private Class<?> getCommonSuperclass(Class<?>[] classes) {
+    Class<?> commonSuperclass = classes[0];
+    for (int i = 1; i < classes.length; i++) {
+        while (!commonSuperclass.isAssignableFrom(classes[i])) {
+            commonSuperclass = commonSuperclass.getSuperclass();
+            if (commonSuperclass.equals(Object.class)) {
+                return Object.class;
+            }
+        }
+    }
+    return commonSuperclass;
 }
\ No newline at end of file
