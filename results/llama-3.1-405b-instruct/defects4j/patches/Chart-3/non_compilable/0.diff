diff --git a/tmp/7883af2a-d093-414c-8af9-1ca7ba73365e_buggy.java b/tmp/6477ee2c-104d-4a1b-b9f2-88ab20e0b5e6_fixed.java
index 388771b..a094234 100644
--- a/tmp/7883af2a-d093-414c-8af9-1ca7ba73365e_buggy.java
+++ b/tmp/6477ee2c-104d-4a1b-b9f2-88ab20e0b5e6_fixed.java
@@ -1,37 +1,48 @@
 /**
  * Creates a new timeseries by copying a subset of the data in this time
  * series.
  *
  * @param start  the index of the first time period to copy.
  * @param end  the index of the last time period to copy.
  *
  * @return A series containing a copy of this times series from start until
  *         end.
  *
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
             }
             catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
+        // Update min and max y values for the copied series
+        if (copy.data.size() > 0) {
+            double minY = Double.MAX_VALUE;
+            double maxY = Double.MIN_VALUE;
+            for (TimeSeriesDataItem item : copy.data) {
+                minY = Math.min(minY, item.getValue().doubleValue());
+                maxY = Math.max(maxY, item.getValue().doubleValue());
+            }
+            copy.minY = minY;
+            copy.maxY = maxY;
+        }
     }
     return copy;
 }
\ No newline at end of file
