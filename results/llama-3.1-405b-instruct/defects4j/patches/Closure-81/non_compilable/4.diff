diff --git a/tmp/35f3c0e3-c001-44bc-836e-d1be85866551_buggy.java b/tmp/4b6a7c7b-6b33-41cd-ad89-702a9f3fb052_fixed.java
index 6e05e4b..143590e 100644
--- a/tmp/35f3c0e3-c001-44bc-836e-d1be85866551_buggy.java
+++ b/tmp/4b6a7c7b-6b33-41cd-ad89-702a9f3fb052_fixed.java
@@ -1,51 +1,56 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
   Boolean isUnnamedFunction = false;
   if (name == null) {
+    // If the function name is null, it means the function is unnamed. However,
+    // we still need to check if it's an expression or a statement to decide
+    // how to handle it.
+    Node parent = functionNode.getParent();
+    if (parent instanceof ExpressionStatementNode ||
+        parent instanceof CallNode ||
+        parent instanceof NewNode) {
       name = new Name();
       name.setIdentifier("");
       isUnnamedFunction = true;
+    } else {
+      throw new RuntimeException("Unnamed function statement");
+    }
   }
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
   if (isUnnamedFunction) {
     // Old Rhino tagged the empty name node with the line number of the
     // declaration.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
   // The left paren's complicated because it's not represented by an
   // AstNode, so there's nothing that has the actual line number that it
   // appeared on.  We know the paren has to appear on the same line as the
   // function name (or else a semicolon will be inserted.)  If there's no
   // function name, assume the paren was on the same line as the function.
   // TODO(bowdidge): Mark line number of paren correctly.
   Name fnName = functionNode.getFunctionName();
   if (fnName!= null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
 
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
