diff --git a/tmp/2807d477-3a1c-48d4-95b3-a99b04b7eae0_buggy.java b/tmp/ec8815f5-ca84-424e-9ce1-6060829092b3_fixed.java
index b86c1ea..6827837 100644
--- a/tmp/2807d477-3a1c-48d4-95b3-a99b04b7eae0_buggy.java
+++ b/tmp/ec8815f5-ca84-424e-9ce1-6060829092b3_fixed.java
@@ -1,38 +1,28 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is 
  * tightly coupled with the abstract method of this class. 
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+    int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
             char[] c = Character.toChars(Character.codePointAt(input, pos));
             out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+            pos += c.length;
         } else {
-                        pos++;
+            pos += consumed;
         }
     }
-                pos--;
-            }
-            pos++;
-        }
 }
\ No newline at end of file
