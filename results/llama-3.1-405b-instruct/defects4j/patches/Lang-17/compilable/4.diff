diff --git a/tmp/b8149f29-3373-40fc-98e7-79f6e2ea4f81_buggy.java b/tmp/9d0bda50-2903-49e8-9529-04819479d768_fixed.java
index b86c1ea..49d723b 100644
--- a/tmp/b8149f29-3373-40fc-98e7-79f6e2ea4f81_buggy.java
+++ b/tmp/9d0bda50-2903-49e8-9529-04819479d768_fixed.java
@@ -1,38 +1,28 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                pos += c.length;
             } else {
-                        pos++;
+                pos += consumed;
             }
         }
-                pos--;
-            }
-            pos++;
-        }
     }
\ No newline at end of file
