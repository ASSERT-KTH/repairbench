diff --git a/tmp/5d35b006-1532-489c-91cb-2d1557802e45_buggy.java b/tmp/d6b0e183-14d6-49af-99f0-c0941b625f76_fixed.java
index bb3193c..3585f46 100644
--- a/tmp/5d35b006-1532-489c-91cb-2d1557802e45_buggy.java
+++ b/tmp/d6b0e183-14d6-49af-99f0-c0941b625f76_fixed.java
@@ -1,52 +1,61 @@
   /**
    * For each qualified name N in the global scope, we check if:
    * (a) No ancestor of N is ever aliased or assigned an unknown value type.
    *     (If N = "a.b.c", "a" and "a.b" are never aliased).
    * (b) N has exactly one write, and it lives in the global scope.
    * (c) N is aliased in a local scope.
    *
    * If (a) is true, then GlobalNamespace must know all the writes to N.
    * If (a) and (b) are true, then N cannot change during the execution of
    *    a local scope.
    * If (a) and (b) and (c) are true, then the alias can be inlined if the
    *    alias obeys the usual rules for how we decide whether a variable is
    *    inlineable.
    * @see InlineVariables
    */
   private void inlineAliases(GlobalNamespace namespace) {
     // Invariant: All the names in the worklist meet condition (a).
     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
     while (!workList.isEmpty()) {
       Name name = workList.pop();
 
       // Don't attempt to inline a getter or setter property as a variable.
       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
         continue;
       }
 
       if (name.globalSets == 1 && name.localSets == 0 &&
           name.aliasingGets > 0) {
         // {@code name} meets condition (b). Find all of its local aliases
         // and try to inline them.
         List<Ref> refs = Lists.newArrayList(name.getRefs());
         for (Ref ref : refs) {
           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
             // {@code name} meets condition (c). Try to inline it.
             if (inlineAliasIfPossible(ref, namespace)) {
               name.removeRef(ref);
             }
           }
         }
       }
 
       // Check if {@code name} has any aliases left after the
       // local-alias-inlining above.
       if ((name.type == Name.Type.OBJECTLIT ||
            name.type == Name.Type.FUNCTION) &&
           name.aliasingGets == 0 && name.props!= null) {
         // All of {@code name}'s children meet condition (a), so they can be
         // added to the worklist.
         workList.addAll(name.props);
+      } else if (name.type == Name.Type.OBJECTLIT &&
+                 name.aliasingGets > 0 && name.props!= null) {
+        // Special case for arguments object literal.
+        // We still want to inline its properties even if it has aliases.
+        for (Name prop : name.props) {
+          if (prop.aliasingGets == 0) {
+            workList.add(prop);
+          }
+        }
       }
     }
   }
\ No newline at end of file
