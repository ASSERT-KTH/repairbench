diff --git a/tmp/50470958-1767-43d2-a4e5-d3099e533800_buggy.java b/tmp/29456b6a-56bb-42ba-a21f-554f5a083bf7_fixed.java
index d6a560a..9c3beac 100644
--- a/tmp/50470958-1767-43d2-a4e5-d3099e533800_buggy.java
+++ b/tmp/29456b6a-56bb-42ba-a21f-554f5a083bf7_fixed.java
@@ -1,33 +1,32 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
   // TODO(user): Investigate whether it is really necessary to keep two
   // different mechanisms for resolving named types, and if so, which order
   // makes more sense. Now, resolution via registry is first in order to
   // avoid triggering the warnings built into the resolution via properties.
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+
+  if (resolved && (detectImplicitPrototypeCycle())) {
     handleTypeCycle(t);
+    return is_nominal_abstract()? UnknownType.getInstance() : checkAbstract();
   }
 
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
+  if (!resolved) resolveViaProperties(t, enclosing);
 
-    resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
+  if (getReferencedType() instanceof FunctionType) {
+      FunctionType ft = ((FunctionType)(getReferencedType())); 
+      if ((ftExtendsCycle(ft))) ft = checkExtendsft(ft, t);
+      
+      if (ft.findImplementsCycle()) setReferencedType(UnknownType.getInstance());
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
       finishPropertyContinuations();
+
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return!registry.isLastGeneration()? this:getReferencedType();
 }
\ No newline at end of file
