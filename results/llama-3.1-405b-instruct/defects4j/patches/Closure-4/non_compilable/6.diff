diff --git a/tmp/bdd6bbf1-2329-4dee-9b50-615a615e0991_buggy.java b/tmp/605338a1-f2b1-4ef1-9685-ed7b331acb2b_fixed.java
index d6a560a..6fd8b4a 100644
--- a/tmp/bdd6bbf1-2329-4dee-9b50-615a615e0991_buggy.java
+++ b/tmp/605338a1-f2b1-4ef1-9685-ed7b331acb2b_fixed.java
@@ -1,33 +1,32 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // If we are already resolving, we have a cycle.
+  if (isResolving()) {
+    handleTypeCycle(t);
+    return this;
+  }
+
+  boolean wasResolving = startResolving();
+  try {
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration()?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration()?
         getReferencedType() : this;
+  } finally {
+    stopResolving(wasResolving);
+  }
 }
\ No newline at end of file
