diff --git a/tmp/45f80739-0bee-48e8-9be7-0fd866e03337_buggy.java b/tmp/e0cf2bdd-aec6-4d9a-abb4-92c2b5ffe584_fixed.java
index d6a560a..44915b3 100644
--- a/tmp/45f80739-0bee-48e8-9be7-0fd866e03337_buggy.java
+++ b/tmp/e0cf2bdd-aec6-4d9a-abb4-92c2b5ffe584_fixed.java
@@ -1,33 +1,35 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this; // Prevent further resolution to avoid stack overflow
     }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration()?
             getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this; // Prevent further resolution to avoid stack overflow
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration()?
         getReferencedType() : this;
 }
\ No newline at end of file
