diff --git a/tmp/89733f64-fde4-4f1e-b2b4-ec5626cf4fc3_buggy.java b/tmp/09e61bfd-6487-4ad0-8937-78b48cb97cc2_fixed.java
index d926eea..658d393 100644
--- a/tmp/89733f64-fde4-4f1e-b2b4-ec5626cf4fc3_buggy.java
+++ b/tmp/09e61bfd-6487-4ad0-8937-78b48cb97cc2_fixed.java
@@ -1,48 +1,52 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                                 || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                            ? format.getPattern()
                             : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                            ? format.getLocale()
                             : serializers.getLocale();
                     SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                     if (tz == null) {
                         tz = serializers.getTimeZone();
                     }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+        // Otherwise, use contextual SimpleDateFormat
+        SimpleDateFormat contextualSdf = (SimpleDateFormat)serializers.getDateFormat();
+        if (contextualSdf!= null) {
+            SimpleDateFormat instance = (SimpleDateFormat)contextualSdf.clone();
+            instance.setTimeZone(serializers.getTimeZone());
+            instance.setLenient(true); // if needed, might be worth adding config ability
+            return withFormat(Boolean.FALSE, instance);
+        }
+        // We should always get the formatter from provider.
+        if (contextualSdf == null) {
+            throw new JsonMappingException("SimpleDateFormat instance expected as providers date format.");
+        }
 
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+        // We don't expect it to go in here if it didn't go above
+        serializers.reportBadDefinition(handledType(), String.format("Could not resolve the SimpleDateFormater used while creating new Date formatter")); 
     }
\ No newline at end of file
