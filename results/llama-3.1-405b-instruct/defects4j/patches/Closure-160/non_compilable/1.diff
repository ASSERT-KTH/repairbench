diff --git a/tmp/d395f5aa-98f9-433a-869a-9abe159ad86f_buggy.java b/tmp/c5c905c3-712f-4a56-8c84-e3275c818cfb_fixed.java
index b05b859..f24ff61 100644
--- a/tmp/d395f5aa-98f9-433a-869a-9abe159ad86f_buggy.java
+++ b/tmp/c5c905c3-712f-4a56-8c84-e3275c818cfb_fixed.java
@@ -1,61 +1,56 @@
 /**
  * Initialize the compiler options. Only necessary if you're not doing
  * a normal compile() job.
  */
 public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
         if (outStream == null) {
             setErrorManager(
                     new LoggerErrorManager(createMessageFormatter(), logger));
         } else {
             PrintStreamErrorManager printer =
                     new PrintStreamErrorManager(createMessageFormatter(), outStream);
             printer.setSummaryDetailLevel(options.summaryDetailLevel);
             setErrorManager(printer);
         }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
         options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
         options.checkTypes = false;
     } else if (!options.checkTypes) {
         // If DiagnosticGroups did not override the plain checkTypes
         // option, and checkTypes is enabled, then turn off the
         // parser type warnings.
         options.setWarningLevel(
                 DiagnosticGroup.forType(
                         RhinoErrorReporter.TYPE_PARSE_ERROR),
                 CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
         options.setWarningLevel(
                 DiagnosticGroups.GLOBAL_THIS,
                 options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
             new SuppressDocWarningsGuard(
                     getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
-
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
-    }
+    // The variable check synthesizes variables later so that the
+    // compiler doesn't crash, but it only needs to be run once.
+    guards.add(new OncePerConfigurationDiagnosticGroupWarningsGuard(
+            DiagnosticGroups.CHECK_VARIABLES,
+            new SimpleConfigurationTracker(options, checkSymbols),
+            new QuietCheckGuard(options),
+            options.disables(DiagnosticGroups.CHECK_VARIABLES)));
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
 }
\ No newline at end of file
