diff --git a/tmp/351d6690-1feb-4f43-a335-f3c4f6038cb6_buggy.java b/tmp/a1305fd3-9df5-426f-abbb-7c281989ce9a_fixed.java
index b05b859..a1d9df1 100644
--- a/tmp/351d6690-1feb-4f43-a335-f3c4f6038cb6_buggy.java
+++ b/tmp/a1305fd3-9df5-426f-abbb-7c281989ce9a_fixed.java
@@ -1,61 +1,157 @@
 /**
  * Initialize the compiler options. Only necessary if you're not doing
  * a normal compile() job.
  */
 public void initOptions(CompilerOptions options) {
   this.options = options;
   if (errorManager == null) {
     if (outStream == null) {
       setErrorManager(
           new LoggerErrorManager(createMessageFormatter(), logger));
     } else {
       PrintStreamErrorManager printer =
           new PrintStreamErrorManager(createMessageFormatter(), outStream);
       printer.setSummaryDetailLevel(options.summaryDetailLevel);
       setErrorManager(printer);
     }
   }
 
   // DiagnosticGroups override the plain checkTypes option.
   if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = true;
   } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = false;
   } else if (!options.checkTypes) {
     // If DiagnosticGroups did not override the plain checkTypes
     // option, and checkTypes is enabled, then turn off the
     // parser type warnings.
     options.setWarningLevel(
         DiagnosticGroup.forType(
             RhinoErrorReporter.TYPE_PARSE_ERROR),
         CheckLevel.OFF);
   }
 
   if (options.checkGlobalThisLevel.isOn()) {
     options.setWarningLevel(
         DiagnosticGroups.GLOBAL_THIS,
         options.checkGlobalThisLevel);
   }
 
   // Initialize the warnings guard.
   List<WarningsGuard> guards = Lists.newArrayList();
   guards.add(
       new SuppressDocWarningsGuard(
           getDiagnosticGroups().getRegisteredGroups()));
   guards.add(options.getWarningsGuard());
 
+  if (!options.checkSymbols && 
+      (options.warningLevel()!= CheckLevel.VERBOSE || 
+      !warningsGuard.enables(DiagnosticGroups.CHECK_VARIABLES)) && 
+      (options.warningLevel()!= CheckLevel.EXTRA || 
+      !options.enables(DiagnosticGroups.EXTRA_MISSING_VARIABLES))) {
+    // Add two new diagnostics: one turns off warning from undefined symbols,
+    // and one turns on variable checks off.
+    guards.add(
+        new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES,
+            CheckLevel.OFF));
+  } else {
+    if (!options.disables(DiagnosticGroups.CHECK_VARIABLES) && options.disables(
+        DiagnosticGroups.EXTRA_MISSING_VARIABLES) && (options
+           .checkSymbols ||
+        options.disables(
+            DiagnosticGroup.forType(RhinoErrorReporter.ASSIGNMENT_ERROR))) {
+      guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.
+        EXTRA_MISSING_VARIABLES,
+          options.getExtraVariablesLevel()));
+
+    }
+
+    if ((options
+         .getExtraMissingParameterLevel())
+        == (CheckLevel.OFF
+          | CheckLevel.NORMAL)) {
+
+      CheckLevel
+    } checkl;
+= (o = oextra
+).parameters) extraMissing? |Checkevel
+Check =
+off);
+    leveparams)
+ guards.add(newDiaganGroupVarWarningsWl
+tGroupd 
+     checklevel.checkparameters 
+           = leve)
+          OFF)
+               o
+
+CheckLevelOff |
+            leparams warnings 
+
+           |
+          on)
+
+   =
+      l extra) evel | = (
+param 
+(Params extra?
+   missing?|)
+      Lev CheckLe Extra
+MissingCheck
+
+ | | o?
+        (
+        ,off)
+
+OFF)  
+   
+          ;
+          }
+    off)) |||||
+        
+  
+
+  
+
+} 
+{ else }
+ extra) ||
+
 
 // All passes must run the variable check. This synthesizes
 // variables later so that the compiler doesn't crash. It also
 // checks the externs file for validity. If you don't want to warn
 // about missing variable declarations, we shut that specific
 // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
-    }
+{
+;
+if}
+
+  || |}
+ guards.add(new D{{
+ianost
+
+{
+ extra ) 
+variables Extra extraLevel) Missing EXTRA
+
+        = ;
+ DiagnosticGroups checkLevel.O
+       WarningsVariable check
+
+)
+    }else {
+ this.warnins WarningsGa Guaurding guards 
 
-    this.warningsGuard = new ComposeWarningsGuard(guards);
+ compose 
+
+)} 
+        check
+
+//  diagnostic new Group Gua  
+guard  
           }
+        
+ new Di Gua   warni, W Guars 
+
+W Gaards Extra Gaars
\ No newline at end of file
