diff --git a/tmp/f4497969-7614-4eb2-824a-96144e981019_buggy.java b/tmp/ae632377-5c1a-46b5-8cd2-8c6d164b1da9_fixed.java
index a9a5e27..0a4e130 100644
--- a/tmp/f4497969-7614-4eb2-824a-96144e981019_buggy.java
+++ b/tmp/ae632377-5c1a-46b5-8cd2-8c6d164b1da9_fixed.java
@@ -1,24 +1,46 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
-                return -val1;
-            case 0:
+        if (val2 == 0) {
             return 0L;
-            case 1:
+        }
+        
+        if (val2 == 1) {
             return val1;
         }
+        
+        if (val2 == -1) {
+            if (val1 == Long.MIN_VALUE) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            } else {
+                return -val1;
+            }
+        }
+        
         long total = val1 * val2;
-        if (total / val2 != val1) {
+        
+        if (val2 > 0) {
+            if (val1 > 0 && total < val1) {
                 throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
             }
+            if (val1 < 0 && total > val1) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        } else {
+            if (val1 > 0 && total > val1) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+            if (val1 < 0 && total < val1) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        }
+        
         return total;
     }
