diff --git a/tmp/1ce48e9b-d01a-4498-ab95-5d733acb6465_buggy.java b/tmp/67330a36-b566-4958-b7bc-3a41f326786c_fixed.java
index a9a5e27..1b0896e 100644
--- a/tmp/1ce48e9b-d01a-4498-ab95-5d733acb6465_buggy.java
+++ b/tmp/67330a36-b566-4958-b7bc-3a41f326786c_fixed.java
@@ -1,24 +1,40 @@
 /**
  * Multiply two values throwing an exception if overflow occurs.
  * 
  * @param val1  the first value
  * @param val2  the second value
  * @return the new total
  * @throws ArithmeticException if the value is too big or too small
  * @since 1.2
  */
 public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
-                return -val1;
-            case 0:
+    if (val2 == 0) {
         return 0L;
-            case 1:
-                return val1;
     }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
+    
+    long val2Long = (long) val2;
+    if (val2Long == val2) {
+        long total = val1 * val2Long;
+        if (total / val2Long!= val1) {
           throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
+    // Special case when Integer.MIN_VALUE is passed (since its absolute value can't be represented in an int)
+    else if (val2 == Integer.MIN_VALUE) {
+        // Since we only care about the case of Long.MIN_VALUE here (if val1 is Long.MAX_VALUE the multiplication can still be done)
+        // We use a single explicit check to cover that value.
+        if (val1 == Long.MIN_VALUE) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+        long absTotal = val1 * -((long) Integer.MIN_VALUE);
+        // Here the only problematic input value was Long.MAX_VALUE but it will cause a negation so the condition isn't violated
+        // Therefore it is possible for val1 to be between -Long.MAX_VALUE & Long.MAX_VALUE for (Long.MIN_VALUE > the actual limit of safe_negation).
+        // We therefore take a chance here. Either way val1 < Integer.MAX_VALUE (i. e., Long.MAX_VALUE is valid) as there isn't an actual larger positive input
+        long result = -absTotal;
+        return result;
+    }
+    // A final possibility for this could occur for inputs which multiply to give 2 times negative the upper bound. They're always overflow so one may do an overflow validation on negating inputs, also we should validate
+    // input in advance but for val1 the number was either Integer.MAX_VALUE (Long.MIN_VALUE > input can never actually reach an exact Long.MIN_VALUE to provide for negation and remain a negative).
+    throw new ArithmeticException("Unknown internal case: should probably have reached one of your conditions in order to end up with valid state given this implementation. See relevant comments on implementation specifics; in safeMultiply. Sorry");
+}
\ No newline at end of file
