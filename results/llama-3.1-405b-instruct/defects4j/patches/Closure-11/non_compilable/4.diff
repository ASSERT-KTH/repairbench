diff --git a/tmp/6fb43b99-dd7f-44e4-b136-3876c622440a_buggy.java b/tmp/21cb7177-4b67-4f5e-9d02-617e68d70c3c_fixed.java
index 57c40b2..a275114 100644
--- a/tmp/6fb43b99-dd7f-44e4-b136-3876c622440a_buggy.java
+++ b/tmp/21cb7177-4b67-4f5e-9d02-617e68d70c3c_fixed.java
@@ -1,27 +1,21 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
   // obj.prop or obj.method()
   // Lots of types can appear on the left, a call to a void function can
   // never be on the left. getPropertyType will decide what is acceptable
   // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
-    if (childType.isDict()) {
-      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
-      checkPropertyAccess(childType, property.getString(), t, n);
+  validator.expectNotNullOrUndefined(
+      t, objNode, childType, "No properties on this expression", getNativeType(OBJECT_TYPE));
+
+  JSType propertyType =
+      getTypeFromType(t, property.getString(), childType.toString(), parent, n.getToken());
+
+  if (isPropertyDefinition(objNode.getToken(), parent.getToken())) {
+    updatePropertyTypeDeclaration(t, property.getString(), propertyType, childType);
   }
-    ensureTyped(t, n);
+
+  t.setType(n, propertyType);
 }
\ No newline at end of file
