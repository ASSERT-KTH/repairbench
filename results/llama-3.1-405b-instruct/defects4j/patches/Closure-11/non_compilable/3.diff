diff --git a/tmp/c2f3293c-9ffe-43d7-b381-122a48d32e45_buggy.java b/tmp/85cf7b1c-9e74-4106-b3a2-ccb2605ac475_fixed.java
index 57c40b2..c600ddb 100644
--- a/tmp/c2f3293c-9ffe-43d7-b381-122a48d32e45_buggy.java
+++ b/tmp/85cf7b1c-9e74-4106-b3a2-ccb2605ac475_fixed.java
@@ -1,27 +1,34 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
+    } else if (n.getJSType()!= null && parent.isAssign() && objNode.getType() == NodeType.OBJECTLIT) {
+      ensureTyped(t, n);
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
       checkPropertyAccess(childType, property.getString(), t, n);
+    } else {
+      // Handle the case when objNode is null.
+      if (objNode.getType() == NodeType.NULL) {
+        report(t, property, TypeValidator.TYPE_MISMATCH_WARNING,
+            "No properties on this expression\n" +
+            "found   : null\n" +
+            "required: Object");
+      }
     }
-    ensureTyped(t, n);
   }
\ No newline at end of file
