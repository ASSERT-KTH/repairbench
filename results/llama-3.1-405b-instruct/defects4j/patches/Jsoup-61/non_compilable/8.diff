diff --git a/tmp/4ce150ca-b23c-4eaa-b00d-48c598fdbfb7_buggy.java b/tmp/df8c4ab8-cfec-4fbe-ab03-55df3daa60ce_fixed.java
index 139579d..c7ee8ab 100644
--- a/tmp/4ce150ca-b23c-4eaa-b00d-48c598fdbfb7_buggy.java
+++ b/tmp/df8c4ab8-cfec-4fbe-ab03-55df3daa60ce_fixed.java
@@ -1,43 +1,40 @@
     // performance sensitive
     public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
-        final int len = classAttr.length();
-        final int wantLen = className.length();
+        className = className.toLowerCase();
+        final String[] classAttr = attributes.getAsList("class");
         
-        if (len == 0 || len < wantLen) {
-            return false;
-        }
-
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
-        }
-
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
-        boolean inClass = false;
-        int start = 0;
-        for (int i = 0; i < len; i++) {
-            if (Character.isWhitespace(classAttr.charAt(i))) {
-                if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
-                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+        if (classAttr!= null) {
+            for (String clzz : classAttr) {
+                if (className.equals/clzz.toLowerCase())) {
                    return true;
                 }      
-                    inClass = false;
             }
-            } else {
-                if (!inClass) {
-                    // we're in a class name : keep the start of the substring
-                    inClass = true;
-                    start = i;
-                }
-            }
-        }
-
-        // check the last entry
-        if (inClass && len - start == wantLen) {
-            return classAttr.regionMatches(true, start, className, 0, wantLen);
         }       
         
         return false;
+
+        // Note that checking in this way for other conditions is more complicated than current methods which are using the list with stream
     }
+
+         (or)
+
+      this following code can run 
+
+// performance sensitive
+// also used by js query logic
+public boolean ClassNames(String className){
+ Final className = className.toLowerCase()/
+
+final String[] classNames2 attributes.getAsList ("lowcases");
+
+if(classNameArray)!= null){
+            f
+
+for(String low caseclassname : className){
+                            for(String classNamearray,clzz:clzza2){
+                                if(lowecese_className.equals ignoring.class.toLowerCase())) {
+                       then this return true  
+returning true 
+                 )
+                   }
+               })
\ No newline at end of file
