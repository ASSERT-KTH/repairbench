diff --git a/tmp/ba14aaa1-2f0e-4cd6-b31b-05398c3426f4_buggy.java b/tmp/e3da6c33-8d61-49a9-b892-e1d8e52c7503_fixed.java
index 29a9d2f..94d1085 100644
--- a/tmp/ba14aaa1-2f0e-4cd6-b31b-05398c3426f4_buggy.java
+++ b/tmp/e3da6c33-8d61-49a9-b892-e1d8e52c7503_fixed.java
@@ -1,43 +1,47 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
   Node left = n.getFirstChild();
   Node arg = left.getNext();
   if (verifyLastArgumentIsString(t, left, arg)) {
     String ns = arg.getString();
     ProvidedName provided = providedNames.get(ns);
     if (provided == null ||!provided.isExplicitlyProvided()) {
       unrecognizedRequires.add(
           new UnrecognizedRequire(n, ns, t.getSourceName()));
     } else {
       JSModule providedModule = provided.explicitModule;
 
       // This must be non-null, because there was an explicit provide.
       Preconditions.checkNotNull(providedModule);
 
       JSModule module = t.getModule();
       if (moduleGraph!= null &&
           module!= providedModule &&
          !moduleGraph.dependsOn(module, providedModule)) {
         compiler.report(
             t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                 providedModule.getName(),
                 module.getName()));
       }
     }
 
     maybeAddToSymbolTable(left);
     maybeAddStringNodeToSymbolTable(arg);
 
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
+    // If goog.require() is inside an if or loop or not at the top 
+    // level, never remove it even if require is satisfied
+    // and always keep track of namespace 
+    Node ancestor = n.getParent();
+    if (ancestor.getParent() == null || 
+        isGrandparentNotExecutable(t, ancestor.getParent())) {
       if (provided!= null) {
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
+    } else if (provided!= null){
+      compiler.ensureLibraryNamespace(ns);
+    }
   }
 }
\ No newline at end of file
