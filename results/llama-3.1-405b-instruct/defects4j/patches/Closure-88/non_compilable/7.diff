diff --git a/tmp/daf16c04-7115-4737-8e20-b71e82d20d0c_buggy.java b/tmp/a3c55055-b2ad-4a80-b147-82e1746b6b28_fixed.java
index 9353941..e0169a9 100644
--- a/tmp/daf16c04-7115-4737-8e20-b71e82d20d0c_buggy.java
+++ b/tmp/a3c55055-b2ad-4a80-b147-82e1746b6b28_fixed.java
@@ -1,30 +1,34 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    if (n.isComma()) {
       for (Node child = n.getFirstChild();
           child!= null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+        if (child.isAssign() || child.isOp() || child.isFunctionCall() || child.isPropertyCall()) {
+          return isVariableReadBeforeKill(child, variable);
+        }
+      }
+    }
+
+    if (n.isFunction()) {
+      return VariableLiveness.MAYBE_LIVE;
+    }
+
+    for (Node child = n.getFirstChild();
+        child!= null; child = child.getNext()) {
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state!= VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
