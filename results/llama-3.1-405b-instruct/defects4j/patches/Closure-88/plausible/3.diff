diff --git a/tmp/b0fe5b31-1c59-4f3e-84e6-71fff0e5df04_buggy.java b/tmp/ec5ee5d7-c856-481a-839d-0ebbd300e768_fixed.java
index 9353941..3d9ce53 100644
--- a/tmp/b0fe5b31-1c59-4f3e-84e6-71fff0e5df04_buggy.java
+++ b/tmp/ec5ee5d7-c856-481a-839d-0ebbd300e768_fixed.java
@@ -1,30 +1,42 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child!= null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+        if (state == VariableLiveness.READ) {
           return state;
+        } else if (state == VariableLiveness.KILL) {
+          // Don't return immediately, continue to check other children.
+          // If any of them return READ, return READ.
+          // If none of them return READ, return KILL.
+          while (child.getNext()!= null) {
+            child = child.getNext();
+            state = isVariableReadBeforeKill(child, variable);
+            if (state == VariableLiveness.READ) {
+              return state;
+            }
+          }
+          return VariableLiveness.KILL;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
