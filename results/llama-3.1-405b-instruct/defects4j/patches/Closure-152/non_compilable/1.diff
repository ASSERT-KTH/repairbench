diff --git a/tmp/e33a74ed-db11-48b7-86ca-5228cb70f986_buggy.java b/tmp/72dd26d4-a37f-4e4a-9558-b873dc41b468_fixed.java
index 58a1651..41da6ae 100644
--- a/tmp/e33a74ed-db11-48b7-86ca-5228cb70f986_buggy.java
+++ b/tmp/72dd26d4-a37f-4e4a-9558-b873dc41b468_fixed.java
@@ -1,32 +1,61 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Resolve typeOfThis
+  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+  
+  // Check if the typeOfThis is a union type
+  if (resolvedTypeOfThis instanceof UnionType) {
+    // If it is, check if all alternatives of the union are object types
+    UnionType unionType = (UnionType) resolvedTypeOfThis;
+    for (JSType alt : unionType.getAlternates()) {
+      if (!(alt instanceof ObjectType)) {
+        // If not, report an error
+        t.report(t.makeError(typeOfThis.getSourceName(), typeOfThis.getSourceOffset(),
+            "Bad type annotation. @this type of a function must be an object\n" +
+            "Actual type: " + unionType.toString()));
+        // And use the unknown type
+        typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+        break;
+      }
+    }
+    if (!(typeOfThis instanceof ObjectType)) {
+      // If the loop didn't break, we can use the resolved type
+      typeOfThis = resolvedTypeOfThis;
+    }
+  } else if (!(resolvedTypeOfThis instanceof ObjectType)) {
+    // If typeOfThis is not a union type and not an object type, report an error
+    t.report(t.makeError(typeOfThis.getSourceName(), typeOfThis.getSourceOffset(),
+        "Bad type annotation. @this type of a function must be an object\n" +
+        "Actual type: " + resolvedTypeOfThis.toString()));
+    // And use the unknown type
+    typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+  } else {
+    // If everything is fine, use the resolved type
+    typeOfThis = resolvedTypeOfThis;
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface!= iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes!= null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
