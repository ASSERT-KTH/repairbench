diff --git a/tmp/ed72780c-bca8-46dd-a0b0-a1526b31bca7_buggy.java b/tmp/c950d98b-43db-4d61-8d93-30bfd56cbcaa_fixed.java
index a7549f0..0238713 100644
--- a/tmp/ed72780c-bca8-46dd-a0b0-a1526b31bca7_buggy.java
+++ b/tmp/c950d98b-43db-4d61-8d93-30bfd56cbcaa_fixed.java
@@ -1,50 +1,68 @@
 /**
  * Sets the values of Options using the values in <code>properties</code>.
  *
  * @param properties The value properties to be processed.
  */
 protected void processProperties(Properties properties)
 {
     if (properties == null)
     {
         return;
     }
 
     for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
     {
         String option = e.nextElement().toString();
 
         if (!cmd.hasOption(option))
         {
             Option opt = getOptions().getOption(option);
 
             // get the value from the properties instance
             String value = properties.getProperty(option);
 
             if (opt.hasArg())
             {
                 if (opt.getValues() == null || opt.getValues().length == 0)
                 {
                     try
                     {
                         opt.addValueForProcessing(value);
                     }
                     catch (RuntimeException exp)
                     {
                         // if we cannot add the value don't worry about it
                     }
                 }
             }
-                else if (!("yes".equalsIgnoreCase(value)
+            else if (("yes".equalsIgnoreCase(value)
                     || "true".equalsIgnoreCase(value)
                     || "1".equalsIgnoreCase(value)))
             {
-                    // if the value is not yes, true or 1 then don't add the
-                    // option to the CommandLine
-                    break;
+                // add option only if the value is yes, true or 1
+                cmd.addOption(opt);
+                continue;
             }
 
+            if (opt.hasOptionalArg()) {
+                // assume the option was given with optional arg = value
+                // will not add it by breaking, as no check that opt was really on CL
+                // no use for opt.addValueForProcessing() as not wanted optional argument
+                try
+                {
+                    // here to keep original parser addOption behavior with an arbitrary arg
+                    // we would not get cmd by the opt directly for parsing and processing of remaining in line CL arguments 
+                    new Parser().processOption(opt.getOpt(), opt.getLongOpt().trim(), value);       
+                }
+                catch (ParseException exp)
+                {
+                }
+            }
+            if (opt.getOptionalArg()!= null && "".equalsIgnoreCase(value)) {
+                opt.addValueForProcessing("");
+                cmd.addOption(opt);    
+            }
             cmd.addOption(opt);                    
         }
     }
 }
