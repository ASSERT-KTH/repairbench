diff --git a/tmp/cce20eb9-9561-43d0-ab40-f34d2ec66211_buggy.java b/tmp/faa6a2b6-8f03-4e3d-a6a6-233604921ef8_fixed.java
index 99141e0..1ee6670 100644
--- a/tmp/cce20eb9-9561-43d0-ab40-f34d2ec66211_buggy.java
+++ b/tmp/faa6a2b6-8f03-4e3d-a6a6-233604921ef8_fixed.java
@@ -1,33 +1,39 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
     StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num!= null) {
             try {
                 int base = m.group(2)!= null? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                charval = Integer.parseInt(num, base); // Use parseInt to handle the case where value is larger than a character
+                if (charval < 0x10000) { // Unicode range
+                    // valid, use as Unicode code point
+                } else if (charval < 0x110000) { // bigger than code point, use substitution
+                    charval = 0xFFFD;
+                } else { // out of range
+                    charval = -1;
+                }
             } catch (NumberFormatException e) {
-                } // skip
+                // skip, invalid character code
+            }
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+        if (charval!= -1) { 
+            m.appendReplacement(accum, Matcher.quoteReplacement(Character.toString((char) charval)));
         } else {
-                m.appendReplacement(accum, m.group(0));
+            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
