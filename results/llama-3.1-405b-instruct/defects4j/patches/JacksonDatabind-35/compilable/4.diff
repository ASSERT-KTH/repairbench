diff --git a/tmp/266dfc10-ea35-4bbc-b315-c4bd8d3211da_buggy.java b/tmp/e467cebf-9a4f-4485-8e3f-0db867074154_fixed.java
index 7d8d756..948acf6 100644
--- a/tmp/266dfc10-ea35-4bbc-b315-c4bd8d3211da_buggy.java
+++ b/tmp/e467cebf-9a4f-4485-8e3f-0db867074154_fixed.java
@@ -1,48 +1,53 @@
 /**
  * Method that handles type information wrapper, locates actual
  * subtype deserializer to use, and calls it to do actual
  * deserialization.
  */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId!= null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
     // first, sanity checks
     if (p.getCurrentToken()!= JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
     }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+    JsonDeserializer<Object> deser = null;
+    while (p.nextToken() == JsonToken.FIELD_NAME) {
+        final String propertyName = p.getCurrentName();
+        if (_typePropertyName.equals(propertyName)) {
+            final String typeId = p.nextTextValue();
+            deser = _findDeserializer(ctxt, typeId);
+        } else {
+            // if we already have deserializer, skip; otherwise, fail
+            if (deser == null) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
-        final String typeId = p.getText();
-        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
-
+            p.skipChildren();
+        }
+    }
     // Minor complication: we may need to merge type id in?
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
         // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
         tb.writeStartObject(); // recreate START_OBJECT
         tb.writeFieldName(_typePropertyName);
-            tb.writeString(typeId);
+        tb.writeString(p.getCurrentName());
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
-        
     Object value = deser.deserialize(p, ctxt);
     // And then need the closing END_OBJECT
     if (p.nextToken()!= JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
