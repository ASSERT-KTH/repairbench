diff --git a/tmp/80105163-d5a2-4021-b21f-8dbf817cb2b8_buggy.java b/tmp/83bdedad-3d19-4bda-8775-361a3a428fe5_fixed.java
index 6c9090f..fa83cbc 100644
--- a/tmp/80105163-d5a2-4021-b21f-8dbf817cb2b8_buggy.java
+++ b/tmp/83bdedad-3d19-4bda-8775-361a3a428fe5_fixed.java
@@ -1,45 +1,46 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator!= null) {
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+        // 28-Dec-2021, ckozak: Sometimes creators like delegate-based don't support null/empty values;
+        //     should then pass as-is so it'll potentially fail properly, if/when there's some input.
+        if ((delegateDeser == null) &&!_valueInstantiator.canCreateUsingDefault()
+                &&!ctxt.isEnabled(MapperFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {
+            return new CollectionDeserializer(_collectionType, _valueDeserializer,
+                    _valueTypeDeserializer, _valueInstantiator);
+        }
+
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+        
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser!= null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
