diff --git a/tmp/2f64a20a-c91e-4f81-b58a-6caa6572b7f9_buggy.java b/tmp/5239872b-03a2-4ccf-964d-7f484c8ffb3e_fixed.java
index 6e45f80..a0d8db6 100644
--- a/tmp/2f64a20a-c91e-4f81-b58a-6caa6572b7f9_buggy.java
+++ b/tmp/5239872b-03a2-4ccf-964d-7f484c8ffb3e_fixed.java
@@ -1,21 +1,37 @@
 /**
  * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
  * that the deserialized type matches the type requested.
  */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
+      final TypeAdapter<T2> result = (TypeAdapter<T2>) typeAdapter;
+      return new TypeAdapter<T2>() {
+        @Override
+        public T2 read(JsonReader in) throws IOException {
+          T1 value = typeAdapter.read(in);
+          if (!requestedType.isInstance(value)) {
+            throw new JsonSyntaxException("Expected a " + requestedType.getName() + " but was " + value.getClass().getName());
+          }
+          return (T2) value;
+        }
 
+        @Override
+        public void write(JsonWriter out, T2 value) throws IOException {
+          typeAdapter.write(out, (T1) value);
         }
-      @Override public String toString() {
+      };
+    }
+
+    @Override
+    public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
