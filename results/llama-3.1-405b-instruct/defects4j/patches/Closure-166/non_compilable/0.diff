diff --git a/tmp/27717aca-64a8-4236-8695-c4f6aba6bdc8_buggy.java b/tmp/10ba9b8e-100d-40cc-9811-8e5f34f1e1bb_fixed.java
index 5f96616..4b77b49 100644
--- a/tmp/27717aca-64a8-4236-8695-c4f6aba6bdc8_buggy.java
+++ b/tmp/10ba9b8e-100d-40cc-9811-8e5f34f1e1bb_fixed.java
@@ -1,20 +1,25 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
+    // Handle the case where the constraint object is a union type.
     //
-    // param constraint {{prop: (number|undefined)}}
+    // param constraint string|{{prop: (string|undefined)}}
     // function f(constraint) {}
     // f({});
     //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // We want to modify the object literal to match any records in the constraint,
+    // by taking each record on the constraint and trying to match properties on
+    // this object.
+    if (constraint.isUnionType()) {
+      JSType record = JSType.findMatchingRecord(constraint);
+      if (record!= null) {
+        matchConstraint(record);
+      }
+    } else if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
