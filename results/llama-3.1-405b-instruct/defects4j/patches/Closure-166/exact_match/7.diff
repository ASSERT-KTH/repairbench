diff --git a/tmp/d2d3845d-a48c-4d4d-bee2-6271201ae098_buggy.java b/tmp/4d866bcb-f028-4e53-bb76-5ee3085a4239_fixed.java
index 5f96616..2392793 100644
--- a/tmp/d2d3845d-a48c-4d4d-bee2-6271201ae098_buggy.java
+++ b/tmp/4d866bcb-f028-4e53-bb76-5ee3085a4239_fixed.java
@@ -1,20 +1,19 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
+  } else if (constraint.isUnionType()) {
+    // Iterate over each alternate type in the union and try to match.
+    for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+      if (alt.isRecordType()) {
+        matchRecordTypeConstraint(alt.toObjectType());
+      }
+    }
   }
 }
\ No newline at end of file
