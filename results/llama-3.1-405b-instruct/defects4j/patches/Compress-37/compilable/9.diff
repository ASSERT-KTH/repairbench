diff --git a/tmp/af16c5f6-6acd-4cf9-bd0a-19beb6394f9f_buggy.java b/tmp/da0adb87-a864-4827-80d6-c278e0bd4f0e_fixed.java
index 4b7e1e4..f2b0799 100644
--- a/tmp/af16c5f6-6acd-4cf9-bd0a-19beb6394f9f_buggy.java
+++ b/tmp/da0adb87-a864-4827-80d6-c278e0bd4f0e_fixed.java
@@ -1,52 +1,59 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
-            int read = 0;
         while ((ch = i.read())!= -1) {
-                read++;
             if (ch == ' ') {
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // blank line
+                continue;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (len == 0) {
+            continue;
+        }
+        int read = String.valueOf(len).length() + 1; // length and space
+
         // Get keyword
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read())!= -1) {
             read++;
             if (ch == '=') { // end of keyword
                 final String keyword = coll.toString(CharsetNames.UTF_8);
                 // Get rest of entry
                 final int restLen = len - read;
                 if (restLen == 1) { // only NL
                     headers.remove(keyword);
                 } else {
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got!= restLen) {
                         throw new IOException("Failed to read "
                                 + "Paxheader. Expected "
                                 + restLen
                                 + " bytes, read "
                                 + got);
                     }
                     // Drop trailing NL
                     final String value = new String(rest, 0,
                             restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
                 break; // Processed single header
             }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+            coll.write((byte) ch);
         }
     }
     return headers;
 }
\ No newline at end of file
