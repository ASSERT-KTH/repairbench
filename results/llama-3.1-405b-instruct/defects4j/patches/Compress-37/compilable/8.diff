diff --git a/tmp/d102f157-6fa3-46cf-8b6a-164d9db1ef1d_buggy.java b/tmp/a87fc61c-8dc1-40da-a74d-597680598f8f_fixed.java
index 4b7e1e4..fd7f24e 100644
--- a/tmp/d102f157-6fa3-46cf-8b6a-164d9db1ef1d_buggy.java
+++ b/tmp/a87fc61c-8dc1-40da-a74d-597680598f8f_fixed.java
@@ -1,52 +1,61 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
         while((ch = i.read())!= -1) {
             read++;
             if (ch == ' '){
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read())!= -1) {
                     read++;
                     if (ch == '='){ // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        if (restLen <= 1) { // only NL or empty
+                            if (restLen == 1) {
+                                // Consume the NL
+                                i.read();
+                            }
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got!= restLen) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
                                                       restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
-                }
+            } else if (ch == '\n') {
+                // skip blank lines
+                len = 0;
+                read = 0;
+            } else {
                 len *= 10;
                 len += ch - '0';
             }
+        }
         if (ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
