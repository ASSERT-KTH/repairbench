diff --git a/tmp/f6cc995a-9ada-4c51-a996-479c017a98c7_buggy.java b/tmp/8e42561c-e449-45ec-8c72-2d437c31a44d_fixed.java
index 4b7e1e4..0ea12d7 100644
--- a/tmp/f6cc995a-9ada-4c51-a996-479c017a98c7_buggy.java
+++ b/tmp/8e42561c-e449-45ec-8c72-2d437c31a44d_fixed.java
@@ -1,52 +1,57 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
-            int read = 0;
             while((ch = i.read())!= -1) {
-                read++;
                 if (ch == ' '){
+                    break;
+                }
+                if (ch < '0' || ch > '9') {
+                    throw new IOException("Invalid PAX header");
+                }
+                len *= 10;
+                len += ch - '0';
+            }
+            if (ch == -1){ // EOF
+                break;
+            }
             // Get keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+            int read = len;
             while((ch = i.read())!= -1) {
-                        read++;
+                read--;
                 if (ch == '='){ // end of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
                     // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                    if (read == 1) { // only NL
                         headers.remove(keyword);
                     } else {
-                                final byte[] rest = new byte[restLen];
+                        final byte[] rest = new byte[read - 1];
                         final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
+                        if (got!= rest.length) {
                             throw new IOException("Failed to read "
                                                   + "Paxheader. Expected "
-                                                          + restLen
+                                                  + rest.length
                                                   + " bytes, read "
                                                   + got);
                         }
                         // Drop trailing NL
+                        i.read(); // read NL
                         final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                                      rest.length, CharsetNames.UTF_8);
                         headers.put(keyword, value);
                     }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
                     break; // Processed single header
                 }
-                len *= 10;
-                len += ch - '0';
+                coll.write((byte) ch);
             }
-            if (ch == -1){ // EOF
-                break;
+            if (read > 0) {
+                IOUtils.skipFully(i, read);
             }
         }
         return headers;
     }
\ No newline at end of file
