diff --git a/tmp/bb90f7e8-9b0f-4ffd-9050-dee24fa8884b_buggy.java b/tmp/911463a5-f344-4fb1-82de-39e149b9affe_fixed.java
index 822447c..3e50559 100644
--- a/tmp/bb90f7e8-9b0f-4ffd-9050-dee24fa8884b_buggy.java
+++ b/tmp/911463a5-f344-4fb1-82de-39e149b9affe_fixed.java
@@ -1,37 +1,36 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
-        int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+    int codePoint;
+    for (int i = 0; i < str.length(); i += Character.charCount(codePoint = str.codePointAt(i))) {
+        String entityName = this.entityName((char) codePoint);
         if (entityName == null) {
-                if (c > 0x7F) {
+            if (codePoint > 0x7F || Character.charCount(codePoint) > 1) {
                 writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                writer.write(Integer.toString(codePoint, 10));
                 writer.write(';');
             } else {
-                    writer.write(c);
+                writer.write((char) codePoint);
             }
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
         }
     }
 }
\ No newline at end of file
