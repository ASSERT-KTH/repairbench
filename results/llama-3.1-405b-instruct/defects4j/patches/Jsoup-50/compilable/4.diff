diff --git a/tmp/d876bddb-e5a5-443f-936c-aa35f1181352_buggy.java b/tmp/02cf358b-1afa-43bd-aada-0d4db553b2f3_fixed.java
index 25ca093..dccdeac 100644
--- a/tmp/d876bddb-e5a5-443f-936c-aa35f1181352_buggy.java
+++ b/tmp/02cf358b-1afa-43bd-aada-0d4db553b2f3_fixed.java
@@ -1,52 +1,88 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    byte[] bom = new byte[4];
+    byteData.get(bom);
+    byteData.rewind();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
+    if (isUtf8Bom(bom)) {
+        byteData.position(3);
+        docData = Charset.forName("UTF-8").decode(byteData).toString();
+        charsetName = "UTF-8";
+    } else if (isUtf16LeBom(bom)) {
+        byteData.position(2);
+        docData = Charset.forName("UTF-16LE").decode(byteData).toString();
+        charsetName = "UTF-16LE";
+    } else if (isUtf16BeBom(bom)) {
+        byteData.position(2);
+        docData = Charset.forName("UTF-16BE").decode(byteData).toString();
+        charsetName = "UTF-16BE";
+    } else if (isUtf32LeBom(bom)) {
+        byteData.position(4);
+        docData = Charset.forName("UTF-32LE").decode(byteData).toString();
+        charsetName = "UTF-32LE";
+    } else if (isUtf32BeBom(bom)) {
+        byteData.position(4);
+        docData = Charset.forName("UTF-32BE").decode(byteData).toString();
+        charsetName = "UTF-32BE";
+    } else if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta!= null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static boolean isUtf8Bom(byte[] bom) {
+    return bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF;
+}
+
+private static boolean isUtf16LeBom(byte[] bom) {
+    return bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE;
+}
+
+private static boolean isUtf16BeBom(byte[] bom) {
+    return bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF;
+}
+
+private static boolean isUtf32LeBom(byte[] bom) {
+    return bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00;
+}
+
+private static boolean isUtf32BeBom(byte[] bom) {
+    return bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF;
+}
\ No newline at end of file
