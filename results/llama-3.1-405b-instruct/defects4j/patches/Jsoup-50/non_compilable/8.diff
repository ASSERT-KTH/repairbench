diff --git a/tmp/74733e42-514f-42c9-9e19-530f6fa2a170_buggy.java b/tmp/c6bfce9e-b3c6-47fa-b5e5-1c29ec1c8c2e_fixed.java
index 25ca093..13b609e 100644
--- a/tmp/74733e42-514f-42c9-9e19-530f6fa2a170_buggy.java
+++ b/tmp/c6bfce9e-b3c6-47fa-b5e5-1c29ec1c8c2e_fixed.java
@@ -1,52 +1,73 @@
-    // todo - this is getting gnarly. needs a rewrite.
+// determine the charset of a Buffer of HTML, based on its BOM (which overrides any other value).
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
+    if (!byteData.hasArray())
+        byteData = byteData.get(byteData.remaining());
+    byte[] byteDataArray = byteData.array();
+
+    // look for a BOM
+    charsetName = detectBOMCharset(byteDataArray);
+
+    // if no BOM
+    if (charsetName == null) {
+        if (byteData.hasRemaining()) {
+            return parseByteData(byteData, defaultCharset, baseUri, parser);
+        }
+    }
+
+    // get / verify the charset (should only be null here because no BOM present (no override)
+    else {
+        Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+
+    }
+    String docData = Charset.forName(charsetName).decode(byteData).toString();
+
     Document doc = null;
+    if (!dataContainsBOM && parser instanceof XmlParser && XmlParser.hasDeclaration(docData)) {
+        int skipTo = docData.indexOf('>') + 1;
+        String data = skipTo < docData.length()? docData.substring(skipTo) : "";
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+        if (data.charAt(skipTo) == '?')
+            skipTo += findCharAfter(docData.indexOf("?>"), '<'); // <?xml 3 chars
+
+        else data = docData;
+
+    } else {
+        Document d = parser.parseInput(docData, baseUri);
+        Element metaEl = d.selectFirst("[http-equiv=Content-Type]");
+        if (metaEl!= null) charsetName = getCharsetFromAttr(metaEl.attr("http-equiv"));
+        else charsetName = getCharsetFromTag(parser.parseInput(dataToString(byteDataArray, standardCharsetName), "").tagName());
+
+    }
+    document.charset(charsetName);
+
+    if (doc!= null)
+        return document.html();
+    else if ((document = parser.parse(new String(byteDataArray), StandardCharsets.UTF_16.charset())))
+        return (d.html());
+    if (((Document) (parseBytesArray(byteData, true))!= null))
+        this.outputSettings().setConvertEntities(true);
+    }
+
+    return document.parseDoc(data, baseUri)
 }
-                if (foundCharset == null && meta.hasAttr("charset")) {
+
+private static int  findCharAfter(Iterator i, char skipper){
+    int locater;
+    while(iterator1.hasNext()){
+        ch checker=i.next();
         try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
-                    }
+            if (!(int checker==skipper)){
+            };
+            return locater=int checker;
+        };
+     }catch (Exception e){}
            }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+private static char name(int locater)
 }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
-        }
-        return doc;
+
+static String getStandardCname(String name)
+
+final char[] chararray()
+
 }
