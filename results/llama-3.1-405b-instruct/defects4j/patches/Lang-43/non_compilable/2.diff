diff --git a/tmp/0c0fde22-3d8d-47f6-8348-3d11b0373701_buggy.java b/tmp/9b91db7f-ad53-41d9-b0db-b2c49e827a04_fixed.java
index b6b11b6..96d56b8 100644
--- a/tmp/0c0fde22-3d8d-47f6-8348-3d11b0373701_buggy.java
+++ b/tmp/9b91db7f-ad53-41d9-b0db-b2c49e827a04_fixed.java
@@ -1,38 +1,51 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
         if (escapingOn && c[start] == QUOTE) {
+            pos.setIndex(pos.getIndex() + 1); // Increment the position.
             return appendTo == null? null : appendTo.append(QUOTE);
         }
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
+        for (; pos.getIndex() < pattern.length();) {
+            int i = pos.getIndex();
+            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {
+                // Append data prior to next escaped quote, then resume.
+                appendTo = appendData(c, pattern, appendTo, start, pos.getIndex());
                 pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+            } else switch (c[i]) {
+            case QUOTE: // found non-escap'd
+                {
+                    appendTo = (appendTo == null) ?  new StringBuffer(DEFAULT_BUFFER_SIZE)
+                        // Append everything, including starting quote.
+                        : appendTo.append(c, start!= 0? start+1 : 0
+                                // don't cut off quotes after the parameter
+                                // part from the actual result
+                                 ,pos.getIndex() 
+                                 ,pattern.length () - 2);
+                         // Cut of the remaining quote!
+                }
+                       pos.setIndex(i); // restore!
                        continue;
               }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            incrementPosition(positions, len, parse, pos):
+        }   // break out! 
+
+        char[] finalAppend =pattern.toCharArray( ;
+        assert(finalAppend.length-pattern.length()
+                   == "Unterminated quoted.equals (
+                                "Pattern:pattern,"+Integer.toString(( 
+        && "lastPosition" =
+        throw
      }
  }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
-    }
