diff --git a/tmp/007b757a-13a2-4335-b575-f10e7fafe4b9_buggy.java b/tmp/4b3009ed-42bc-4e9e-b08e-fa168e412403_fixed.java
index b6b11b6..286c9f2 100644
--- a/tmp/007b757a-13a2-4335-b575-f10e7fafe4b9_buggy.java
+++ b/tmp/4b3009ed-42bc-4e9e-b08e-fa168e412403_fixed.java
@@ -1,38 +1,36 @@
 /**
  * Consume a quoted string, adding it to <code>appendTo</code> if
  * specified.
  * 
  * @param pattern pattern to parse
  * @param pos current parse position
  * @param appendTo optional StringBuffer to append
  * @param escapingOn whether to process escaped quotes
  * @return <code>appendTo</code>
  */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
     if (escapingOn && c[start] == QUOTE) {
         return appendTo == null? null : appendTo.append(QUOTE);
     }
     int lastHold = start;
     for (int i = pos.getIndex(); i < pattern.length(); i++) {
         if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
+            appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
             pos.setIndex(i + ESCAPED_QUOTE.length());
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
+        switch (c[i]) {
         case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
+            pos.setIndex(i + 1);
+            return appendTo == null? null : appendTo.append(c, lastHold, i - lastHold);
         default:
-                next(pos);
+            // Do nothing, just continue the loop
         }
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
