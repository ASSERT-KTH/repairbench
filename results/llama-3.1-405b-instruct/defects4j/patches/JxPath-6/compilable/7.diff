diff --git a/tmp/03192266-e450-467f-ae2e-9550fe803fed_buggy.java b/tmp/8a4bf47a-c3a7-4cb0-a49b-1666e5348474_fixed.java
index f650982..3a95a84 100644
--- a/tmp/03192266-e450-467f-ae2e-9550fe803fed_buggy.java
+++ b/tmp/8a4bf47a-c3a7-4cb0-a49b-1666e5348474_fixed.java
@@ -1,42 +1,54 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+    if (l instanceof Iterable) {
+        return contains((Iterable) l, r);
+    }
+    if (r instanceof Iterable) {
+        return contains((Iterable) r, l);
+    }
     return equal(l, r);
 }
+
+// Add a new helper method
+private boolean contains(Iterable iterable, Object target) {
+    for (Object item : iterable) {
+        if (equal(item, target)) {
+            return true;
+        }
+    }
+    return false;
+}
\ No newline at end of file
