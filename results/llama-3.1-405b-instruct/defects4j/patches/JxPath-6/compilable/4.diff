diff --git a/tmp/2b0c8c08-eb27-4541-ac38-07ae5de88a1f_buggy.java b/tmp/5415bdce-eae9-41eb-9982-f5edeb6c55a5_fixed.java
index f650982..92cb20c 100644
--- a/tmp/2b0c8c08-eb27-4541-ac38-07ae5de88a1f_buggy.java
+++ b/tmp/5415bdce-eae9-41eb-9982-f5edeb6c55a5_fixed.java
@@ -1,42 +1,60 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null? "null" : l.getClass().getName()) + " " +
 //            (r == null? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+    if (l instanceof Iterable && r instanceof Object) {
+        Iterator li = ((Iterable) l).iterator();
+        while (li.hasNext()) {
+            if (equal(li.next(), r)) {
+                return true;
+            }
+        }
+        return false;
+    }
+    if (r instanceof Iterable && l instanceof Object) {
+        Iterator ri = ((Iterable) r).iterator();
+        while (ri.hasNext()) {
+            if (equal(l, ri.next())) {
+                return true;
+            }
+        }
+        return false;
+    }
     return equal(l, r);
 }
\ No newline at end of file
