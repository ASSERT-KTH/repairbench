diff --git a/tmp/422b142e-b9d8-44f9-95ba-98ad3d86cdf5_buggy.java b/tmp/8fc86c21-c19e-472a-bb55-1ebfecf1b223_fixed.java
index f650982..d3ce818 100644
--- a/tmp/422b142e-b9d8-44f9-95ba-98ad3d86cdf5_buggy.java
+++ b/tmp/8fc86c21-c19e-472a-bb55-1ebfecf1b223_fixed.java
@@ -1,42 +1,43 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    // If one of the objects is an array, compare as arrays
+    if (l.getClass().isArray() && r.getClass().isArray()) {
+        return Arrays.equals((Object[]) l, (Object[]) r);
+    }
+    // If none of the above, use the equals method
+    return (l == null? r == null : l.equals(r));
 }
\ No newline at end of file
