diff --git a/tmp/9f002034-7f83-41d3-9071-39e952153f18_buggy.java b/tmp/91b4b731-5faf-4ac0-9be3-6e1d8379567b_fixed.java
index 6cfa79b..e56fff1 100644
--- a/tmp/9f002034-7f83-41d3-9071-39e952153f18_buggy.java
+++ b/tmp/91b4b731-5faf-4ac0-9be3-6e1d8379567b_fixed.java
@@ -1,12 +1,29 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
+    if (x < mean - 20 * standardDeviation) {
+        return 0;
+    }
+    if (x > mean + 20 * standardDeviation) {
+        return 1;
+    }
+    try {
         return 0.5 * (1.0 + Erf.erf((x - mean) /
                 (standardDeviation * Math.sqrt(2.0))));
+    } catch (MaxIterationsExceededException e) {
+        // If we get here, it's because the algorithm failed to converge,
+        // which should not happen given the checks above. However, we'll
+        // handle it just in case.
+        if (x < mean) {
+            return 0;
+        } else {
+            return 1;
+        }
+    }
 }
\ No newline at end of file
