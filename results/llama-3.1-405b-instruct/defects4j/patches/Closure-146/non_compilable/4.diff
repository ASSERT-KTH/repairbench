diff --git a/tmp/6fa7433d-de0c-4be1-8902-87d75029d8c6_buggy.java b/tmp/2e2656b4-d576-40dd-83e1-d27cd7c17a93_fixed.java
index 210695a..5b27741 100644
--- a/tmp/6fa7433d-de0c-4be1-8902-87d75029d8c6_buggy.java
+++ b/tmp/2e2656b4-d576-40dd-83e1-d27cd7c17a93_fixed.java
@@ -1,32 +1,48 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
-        return new TypePair(null, null);
+        // Return both types as they are since they are known to be equal
+        return new TypePair(this, that);
 
       case FALSE:
+        // When we know types are not equal, do not update their types to NULL or to the types
+        // of variables directly being compared, keep types and the original behavior when dealing with undefined/none in logic downstream.
+        // return original this, original that since none can only take 0
+        if ((that.isVoidOrNull()) && this.isNoType()){
+          return new TypePair(null, that);
+        } else {
+          if(this.isNoType()){
+            return new TypePair(null, null);
+          }else {
+            return new TypePair(this, null);
+          }
+        }
+        
       case UNKNOWN:
+        // do nothing - original, non-changed function - for future types where tests not failing today  
         return new TypePair(this, that);
-    }
 
       // switch case is exhaustive  
+    }
+
     throw new IllegalStateException();
   }
