diff --git a/tmp/b5ce2053-ff0b-4106-ae05-e31058aadd61_buggy.java b/tmp/b5ab06ed-ba2b-47ce-9606-0f4fd64bae30_fixed.java
index 210695a..0287617 100644
--- a/tmp/b5ce2053-ff0b-4106-ae05-e31058aadd61_buggy.java
+++ b/tmp/b5ab06ed-ba2b-47ce-9606-0f4fd64bae30_fixed.java
@@ -1,32 +1,36 @@
 /**
  * Computes the subset of {@code this} and {@code that} types if inequality
  * is observed. If a value {@code v1} of type {@code number} is not equal to a
  * value {@code v2} of type {@code (undefined,number)}, we can infer that the
  * type of {@code v1} is {@code number} and the type of {@code v2} is
  * {@code number} as well.
  *
  * @return a pair containing the restricted type of {@code this} as the first
  *         component and the restricted type of {@code that} as the second
  *         element. The returned pair is never {@code null} even though its
  *         components may be {@code null}
  */
 public TypePair getTypesUnderInequality(JSType that) {
   // unions types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
   // other types
   switch (this.testForEquality(that)) {
     case TRUE:
+      if (this.isVoidType() && that.isVoidType()) {
+        return new TypePair(NO_TYPE, NO_TYPE);
+      } else {
         return new TypePair(null, null);
+      }
 
     case FALSE:
     case UNKNOWN:
       return new TypePair(this, that);
   }
 
   // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
