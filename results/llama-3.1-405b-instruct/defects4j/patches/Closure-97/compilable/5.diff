diff --git a/tmp/fa310488-e31d-42fd-b5fb-24470a104815_buggy.java b/tmp/3fd8cf35-6566-416d-aa94-719c6bfa42c9_fixed.java
index 1126687..2594442 100644
--- a/tmp/fa310488-e31d-42fd-b5fb-24470a104815_buggy.java
+++ b/tmp/3fd8cf35-6566-416d-aa94-719c6bfa42c9_fixed.java
@@ -1,65 +1,66 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
+      // Convert the numbers to longs to correctly handle cases where the result
+      // is greater than the maximum integer value.
+      long lvalLong = (long) lval;
+      if (lvalLong!= lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
-      int rvalInt = (int) rval;
-      if (rvalInt != rval) {
+      long rvalLong = (long) rval;
+      if (rvalLong!= rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          result = (lvalLong << rvalLong) & 0xFFFFFFFFL;
           break;
         case Token.RSH:
-          result = lvalInt >> rvalInt;
+          result = (lvalLong >> rvalLong);
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          result = (lvalLong >>> rvalLong) & 0xFFFFFFFFL;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
