diff --git a/tmp/045f5b6e-4a09-4dfd-afa0-08697d51fbaa_buggy.java b/tmp/8bf81586-db72-47fe-b75e-54b7809dccf7_fixed.java
index 46817a7..6fe540c 100644
--- a/tmp/045f5b6e-4a09-4dfd-afa0-08697d51fbaa_buggy.java
+++ b/tmp/8bf81586-db72-47fe-b75e-54b7809dccf7_fixed.java
@@ -1,16 +1,24 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    boolean commonProperties = false;
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+      if (that.toMaybeRecordType().hasProperty(property)) {
+        JSType thisPropType = getPropertyType(property);
+        JSType thatPropType = that.toMaybeRecordType().getPropertyType(property);
+        JSType leastSupPropType = thisPropType.getLeastSupertype(thatPropType);
+        if (thisPropType.equals(leastSupPropType)) {
+          builder.addProperty(property, thisPropType, getPropertyNode(property));
         }
+        commonProperties = true;
       }
+    }
+    if (commonProperties && properties.keySet().size() == that.toMaybeRecordType().getPropertyNames().size()) {
       return builder.build();
     }
+    // If record types have non-common properties or one contains all the other's, return their union type
+    return registry.createUnionType(this, that);
+  }
