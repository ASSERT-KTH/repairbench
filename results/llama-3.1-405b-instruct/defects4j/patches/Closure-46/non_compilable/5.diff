diff --git a/tmp/68a46a63-3800-4aa3-b67b-72051375e34f_buggy.java b/tmp/246b2f34-ab6a-4a7a-b9b3-7356af2d73da_fixed.java
index 46817a7..7823f2e 100644
--- a/tmp/68a46a63-3800-4aa3-b67b-72051375e34f_buggy.java
+++ b/tmp/246b2f34-ab6a-4a7a-b9b3-7356af2d73da_fixed.java
@@ -1,16 +1,48 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    boolean hasSharedProperties = false;
     for (String property : properties.keySet()) {
       if (that.toMaybeRecordType().hasProperty(property) &&
           that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
               getPropertyType(property))) {
+        hasSharedProperties = true;
+        break;
+      }
+    }
+    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    for (String property : properties.keySet()) {
       builder.addProperty(property, getPropertyType(property),
           getPropertyNode(property));
     }
+    JSType allPropertiesRecord = builder.build();
+    if (that.isEquivalentTo(allPropertiesRecord) ||!hasSharedProperties) {
+      return super.getLeastSupertype(that);
     }
-    return builder.build();
+
+    Set<String> differentProperties = new HashSet<>();
+    for (String property : properties.keySet()) {
+      if (!that.toMaybeRecordType().hasProperty(property) || 
+         !that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
+              getPropertyType(property))) {
+        differentProperties.add(property);
+      }
+    }
+    Map<String, JSType> onlyDifferentProperties1 = 
+        Maps.restrictedMapView(properties, collection(differentProperties));
+    
+    JSType partialRecordWithDifferentPropertiesFrom1 =
+        newFromMapWithPropertyNodesWithoutInfluencingTheRegistryAtAll(registry, ImmutableMap.of(), onlyDifferentProperties1);
+    
+    Map<String, JSType> onlyDifferentProperties2 =
+        Maps.<String,JSType/filterMap(this.properties, entries -> propertyEntry -> {
+
+            });
+    JSType partialRecordWithDiffereningPropertiesFromB =
+      newFromUnorderedPropMapWithoutFlatteningAndWithoutInfluencingInTheRegistryWhatsoever(registries2, onlyNonEqualTypesFromBTypes);
+
+  JSTypes typesofDifferiungPops =JSTypes.differPartialTypesAsUnions(fixPartials(parcialREcordWithAdifferFromB, pafrictialRecordOnlyDiff))
+    return fufgulType(getPropertyTpes(), recrdToUnionWithDifferPop);
 }
