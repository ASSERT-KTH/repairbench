diff --git a/tmp/4d78beb5-455f-4e2f-aefa-dcc7eda4ebb9_buggy.java b/tmp/2ec6dfd5-54fe-41d4-b05a-0e5a4140f4b7_fixed.java
index 46817a7..f3b8864 100644
--- a/tmp/4d78beb5-455f-4e2f-aefa-dcc7eda4ebb9_buggy.java
+++ b/tmp/2ec6dfd5-54fe-41d4-b05a-0e5a4140f4b7_fixed.java
@@ -1,16 +1,18 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  Set<String> commonProperties = new HashSet<>(properties.keySet());
+  commonProperties.retainAll(that.toMaybeRecordType().getProperties().keySet());
+  if (commonProperties.isEmpty()) {
+    return registry.createUnionType(this, that);
+  }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
+  for (String property : commonProperties) {
+    JSType commonType = getPropertyType(property).getLeastSupertype(
+        that.toMaybeRecordType().getPropertyType(property));
+    builder.addProperty(property, commonType, getPropertyNode(property));
   }
   return builder.build();
 }
\ No newline at end of file
