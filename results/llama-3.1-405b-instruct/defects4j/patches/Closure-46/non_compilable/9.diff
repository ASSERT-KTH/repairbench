diff --git a/tmp/f413a52b-f3c2-4df4-a3a2-37a0b10fcbf7_buggy.java b/tmp/a420c0cb-6c99-4905-a6a8-32aa0113a7b6_fixed.java
index 46817a7..a65343c 100644
--- a/tmp/f413a52b-f3c2-4df4-a3a2-37a0b10fcbf7_buggy.java
+++ b/tmp/a420c0cb-6c99-4905-a6a8-32aa0113a7b6_fixed.java
@@ -1,16 +1,22 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+  Set<String> commonProperties = Sets.intersection(properties.keySet(), that.toMaybeRecordType().getProperties().keySet());
+  for (String property : commonProperties) {
+    JSType propertyType = getPropertyType(property);
+    JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+    JSType leastSupertype = propertyType.getLeastSupertype(thatPropertyType);
+    builder.addProperty(property, leastSupertype, null);
   }
+  RecordType commonType = builder.build();
+  if (commonType.getProperties().size() == 0) {
+    return registry.createUnionType(this, that);
+  } else if (commonType.isSubtypeOf(this) && commonType.isSubtypeOf(that)) {
+    return commonType;
+  } else {
+    return registry.createUnionType(this, that);
   }
-    return builder.build();
 }
\ No newline at end of file
