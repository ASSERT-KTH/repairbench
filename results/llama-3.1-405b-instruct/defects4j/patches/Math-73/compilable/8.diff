diff --git a/tmp/6cd0fc8d-d74a-4eb4-a921-e1f8626fb6a6_buggy.java b/tmp/c8f52124-2777-4253-a21e-7fbbbb3f33ee_fixed.java
index 757067a..1768fe7 100644
--- a/tmp/6cd0fc8d-d74a-4eb4-a921-e1f8626fb6a6_buggy.java
+++ b/tmp/c8f52124-2777-4253-a21e-7fbbbb3f33ee_fixed.java
@@ -1,63 +1,72 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * (even if it <em>is</em> a root) or if any two among min, initial and
+     * max have the same sign.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        // check that the values at min, max, and initial are not of the same sign
+        double yMin = f.value(min);
         double yInitial = f.value(initial);
+        double yMax = f.value(max);
+
+        if (yMin * yInitial >= 0 && yInitial * yMax >= 0) {
+            throw new IllegalArgumentException("No bracketing, function value has the "
+                    + "same sign at: {min:" + min + ", yMin:" + yMin + "} and {"
+                    + "initial:" + initial + ", yInitial:" + yInitial + "} "
+                    + "and also at initial and {max:" + max + ", yMax:" + yMax + "}");
+        }
+
+        // return the initial guess if it is good enough
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
-        double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
+            return result;
+        }
+
+        // return the second endpoint if it is good enough
+        if (Math.abs(yMax) <= functionValueAccuracy) {
+            setResult(max, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
-
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
-
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
