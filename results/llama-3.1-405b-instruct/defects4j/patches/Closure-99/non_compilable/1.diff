diff --git a/tmp/938e8935-111d-45bb-864e-ed36f94b157f_buggy.java b/tmp/f37814c0-883c-4c64-906e-58e728055383_fixed.java
index 86553f4..c0d3cd1 100644
--- a/tmp/938e8935-111d-45bb-864e-ed36f94b157f_buggy.java
+++ b/tmp/f37814c0-883c-4c64-906e-58e728055383_fixed.java
@@ -1,57 +1,68 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc!= null &&
         (jsDoc.isConstructor() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+          pType == Token.ASSIGN ||
+          pType == Token.GETPROP ||
+          (pType == Token.STRING && parent.getParent().getType() == Token.GETPROP))) {
       return false;
     }
   }
 
   if (parent!= null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      // property or subproperty, unless it is in a block.
+      Node assignGrandParent = parent.getParent();
+      if ((lhs.getType() == Token.GETPROP ||
+           (lhs.getType() == Token.STRING && assignGrandParent.getType() == Token.GETPROP)) &&
+          assignGrandParent.getParent() instanceof Block) {
+        if (lhs.getType() == Token.GETPROP) {
+          Node propNameNode = lhs.getLastChild();
+          if ("prototype".equals(propNameNode.getString()) ||
+              (assignGrandParent.getParent().getParent().getParent() instanceof ClassMembers && "prototype".equals(((ClassMembers)assignGrandParent.getParent().getParent().getParent()).getNode().getString()))) {
             return false;
           }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+        } else if (assignGrandParent.getParent().getType() == Token.OBJECTLIT) {
           return false;
+        } else {
+          if (("prototype.".equals(lhs.getParent().getQualifiedName().substring(assignGrandParent.getQualifiedName().length()))) ||
+              lhs.getParent().getQualifiedName().substring(assignGrandParent.getQualifiedName().length()).startsWith(".prototype.")) {
+            return false;
+          }
+        }
+      } else if (lhs.getType() == Token.GETPROP && (lhs.getLastChild().getType() == Token.THIS) &&!rhs.getParent().getParent().isAssignFrom()) {
+        return true;
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
