diff --git a/tmp/87fde0d8-0a6a-4169-a470-40383bb39319_buggy.java b/tmp/55a5f854-f958-40a7-9a6c-3c6c1a3e60aa_fixed.java
index 98d89dc..be9060d 100644
--- a/tmp/87fde0d8-0a6a-4169-a470-40383bb39319_buggy.java
+++ b/tmp/55a5f854-f958-40a7-9a6c-3c6c1a3e60aa_fixed.java
@@ -1,23 +1,37 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    // Added check for NaN
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        int cmp;
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            cmp = 0; // Two NaN values are considered equal
+        } else if (Double.isNaN(ld)) {
+            cmp = -1; // NaN is less than any other number
+        } else {
+            cmp = 1; // Any other number is greater than NaN
+        }
+        return evaluateCompare(cmp);
+    }
+
     return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1);
 }
\ No newline at end of file
