diff --git a/tmp/ee8f074f-3cd2-4132-8adc-d9cd20ffd71e_buggy.java b/tmp/10d1624d-5deb-43dd-8f43-b5c6fb43cb52_fixed.java
index 0dbce00..12150e6 100644
--- a/tmp/ee8f074f-3cd2-4132-8adc-d9cd20ffd71e_buggy.java
+++ b/tmp/10d1624d-5deb-43dd-8f43-b5c6fb43cb52_fixed.java
@@ -1,33 +1,58 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property!= null) {
         JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
         if (format!= null) {
 
             // Simple case first: serialize as numeric timestamp?
             JsonFormat.Shape shape = format.getShape();
             if (shape.isNumeric()) {
                 return withFormat(Boolean.TRUE, null);
             }
 
-                if (format.getShape() == JsonFormat.Shape.STRING) {
-                    TimeZone tz = format.getTimeZone();
+            if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
+                // This is our new case!
                 final String pattern = format.hasPattern()
                        ? format.getPattern()
                         : StdDateFormat.DATE_FORMAT_STR_ISO8601;
                 final Locale loc = format.hasLocale()
                        ? format.getLocale()
                         : serializers.getLocale();
                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
+                if (format.getTimeZone()!= null) {
+                    df.setTimeZone(format.getTimeZone());
+                } else {
+                    df.setTimeZone(serializers.getTimeZone());
                 }
-                    df.setTimeZone(tz);
                 return withFormat(Boolean.FALSE, df);
+            } else {
+                // Other cases here...
+                JsonFormat.Features features = format.getFeatures();
+                boolean writeAsTimeStamps = features.equals(JsonFormat.Value.EMPTY/features) && features.equals((JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, JsonFormat.DEFAULT_WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS))?
+                        JsonFormat.Feature.enabledIn(
+                                format,
+                                settings.get(JsonWriteFeature.WRITE_DATES_AS_TIMESTAMPS))
+                            : Boolean.TRUE.equals(serializers.getContextualReadCapabilities(). isEnabled(JsonReadCapability.ALLOW_UNQUOTED_PROPERTIES));
+                SimpleDateFormat df;
+                if (!writeAsTimeStamps) {
+                    df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale());
+                } else {
+                    return withFormat(writeAsTimeStamps? Boolean.TRUE : Boolean.FALSE, null);
                 }
+
+                return withFormat(!writeAsTimeStamps? Boolean.FALSE : null, df.setTimeZone(timeZone), pattern);
                 }
+        } else { // @jsonFormat(null) - 
+            FormatShape defaultDateTimeShape = DateTimeShape;
+                if(serializers.hasActiveView(), property);
+             //... other conditions if needed in the code depending on conditions
+        defaultDateTimeShape = DateTimeSerializerBase.findSerializableDateTimeShapes(serializers.getOwner(), properties, view );
+        format = DateTimeValue.with Shape(defaultDateTimeShapes);
               }
-        return this;
-    }
+       DateTimeSerializer dateSerializer;
+                if(this._format  == true) {
+      dateSerializer = this }
+     ... // here would be default case in needed
+ return dateSerializer;}
\ No newline at end of file
