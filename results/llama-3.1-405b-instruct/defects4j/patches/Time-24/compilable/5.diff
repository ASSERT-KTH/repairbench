diff --git a/tmp/50d3a5f2-1916-4ad4-91fc-62a13f62df91_buggy.java b/tmp/988b5975-dcf0-483e-abed-67fbb9f4617c_fixed.java
index 99d6a44..6a411a4 100644
--- a/tmp/50d3a5f2-1916-4ad4-91fc-62a13f62df91_buggy.java
+++ b/tmp/988b5975-dcf0-483e-abed-67fbb9f4617c_fixed.java
@@ -1,58 +1,99 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+            // If first field is weekyear or weekOfWeekyear, handle specially
+            if (savedFields[0].iField.getType() == DateTimeFieldType.weekyear()) {
+                // Handle weeks of weekyear
+                long millis = iMillis;
+                try {
+                    millis = savedFields[0].set(millis, resetFields);
+                } catch (IllegalFieldValueException e) {
+                    if (text!= null) {
+                        e.prependMessage("Cannot parse \"" + text + '"');
+                    }
+                    throw e;
+                }
+                int week = iChrono.weekOfWeekyear().get(millis);
+                if (week > 1) {
+                    millis = iChrono.weekyear().roundFloor(millis);
+                    millis += (week - 1) * iChrono.weekOfWeekyear().get(millis);
+                }
+                return millis;
+            } else if (savedFields[0].iField.getType() == DateTimeFieldType.year()) {
+                // If year is present, make sure to adjust for possible ISO year change
+                long millis = iMillis;
+                try {
+                    millis = savedFields[0].set(millis, resetFields);
+                } catch (IllegalFieldValueException e) {
+                    if (text!= null) {
+                        e.prependMessage("Cannot parse \"" + text + '"');
+                    }
+                    throw e;
+                }
+                int year = iChrono.year().get(millis);
+                int isoYear = iChrono.weekyear().get(millis);
+                if (year!= isoYear) {
+                    if (isoYear < year) {
+                        millis -= iChrono.weekOfWeekyear().get(millis);
+                    } else {
+                        millis += iChrono.weekOfWeekyear().get(millis);
+                    }
+                }
+                return millis;
+            } else {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
+    }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text!= null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset!= iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text!= null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
