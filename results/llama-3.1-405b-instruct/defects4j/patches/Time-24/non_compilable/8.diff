diff --git a/tmp/61eb262a-9b46-4a5e-9343-4c3274624255_buggy.java b/tmp/7f3b9417-2562-4e3d-9e8a-eeb6e1688164_fixed.java
index 99d6a44..0f9baf3 100644
--- a/tmp/61eb262a-9b46-4a5e-9343-4c3274624255_buggy.java
+++ b/tmp/7f3b9417-2562-4e3d-9e8a-eeb6e1688164_fixed.java
@@ -1,58 +1,68 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+            // Check if the first field is a week-based field
+            if (savedFields[0].iField instanceof DateTimeFieldType &&
+                (savedFields[0].iField == DateTimeFieldType.weekyear() ||
+                 savedFields[0].iField == DateTimeFieldType.weekOfWeekyear())) {
+                // Use the default year if week-based fields are provided
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
+            } else {
+                // If the first field is month or day, use the default year
+                saveField(DateTimeFieldType.year(), iDefaultYear);
+                return computeMillis(resetFields, text);
+            }
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text!= null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset!= iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text!= null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
