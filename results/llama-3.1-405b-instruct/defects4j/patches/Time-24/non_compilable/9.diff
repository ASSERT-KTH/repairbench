diff --git a/tmp/37b945fc-6f08-4869-bac9-456aed4e9688_buggy.java b/tmp/05450942-6155-493c-b107-0907c36c8a69_fixed.java
index 99d6a44..0da4997 100644
--- a/tmp/37b945fc-6f08-4869-bac9-456aed4e9688_buggy.java
+++ b/tmp/05450942-6155-493c-b107-0907c36c8a69_fixed.java
@@ -1,58 +1,83 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+    
+    // Check for invalid year/week combinations.
+    if (count >= 2) {
+        SavedField first = savedFields[0];
+        SavedField second = savedFields[1];
+        
+        if (first.iField.getType() == DateTimeFieldType.weekyear() && 
+            second.iField.getType() == DateTimeFieldType.weekOfWeekyear()) {
+            int year = first.getValue();
+            int week = second.getValue();
+            
+            if (week >= 1 && week <= 52) {
+                long date = iChrono.weekyear().set(0, year);
+                date = iChrono.weekOfWeekyear().set(date, week);
+                
+                if (iChrono.weekyear().get(date)!= year || 
+                    iChrono.weekOfWeekyear().get(date)!= week) {
+                    throw new IllegalArgumentException("Value " + week + " for weekOfWeekyear must be in the range " + 
+                        iChrono.weekOfWeekyear().getMinimumValue(date) + " to " + 
+                        iChrono.weekOfWeekyear().getMaximumValue(date));
+                }
+            }
+        }
+    }
+    
+    // Set base year for parsing if first field is month or day.
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text!= null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset!= iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text!= null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
