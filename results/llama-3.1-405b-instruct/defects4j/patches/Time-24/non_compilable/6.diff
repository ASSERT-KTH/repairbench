diff --git a/tmp/5a3b49ec-0819-4ae8-915a-0dc6fa7411c3_buggy.java b/tmp/855210d0-e208-453c-96a2-cc9636d76498_fixed.java
index 99d6a44..dffc47b 100644
--- a/tmp/5a3b49ec-0819-4ae8-915a-0dc6fa7411c3_buggy.java
+++ b/tmp/855210d0-e208-453c-96a2-cc9636d76498_fixed.java
@@ -1,58 +1,65 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
-        if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
-                saveField(DateTimeFieldType.year(), iDefaultYear);
-                return computeMillis(resetFields, text);
+    
+    // adjust for relative week year or year field
+    DurationField isoWeekyear = DurationFieldType.weekyears().getField(ISOChronology.getInstance());
+    DurationField isoYear = DurationFieldType.years().getField(ISOChronology.getInstance());
+    boolean adjustWeekyear = count > 0 && isoWeekyear.equals(savedFields[0].iField.getDurationField());
+    for (int i = count - 1; i >= 0; i--) {
+        DurationField field = savedFields[i].iField.getDurationField();
+        if ((adjustWeekyear &&!isoWeekyear.equals(field)) || (isoWeekyear.equals(field) || (isoYear.equals(field)))) {
+            if (compareReverse(field, DurationFieldType.months().getField(iChrono)) >= 0 && compareReverse(field, DurationFieldType.days().getField(iChrono)) <= 0) {
+                if (isoWeekyear.equals(field) || ((isoYear.equals(field) &&!adjustWeekyear))) {
+                    saveField(DateTimeFieldType.year(), savedFields[i].getValueAsLong());
+                } else {
+                    saveField(DateTimeFieldType.weekyear(), savedFields[i].getValueAsLong());
+                }
+            }
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text!= null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset!= iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text!= null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
