diff --git a/tmp/5f5c61a6-27a9-4256-946d-1f22c2fe7994_buggy.java b/tmp/b24c3f2f-e6fa-4833-a038-c7c1445012b9_fixed.java
index 574b43c..40a014d 100644
--- a/tmp/5f5c61a6-27a9-4256-946d-1f22c2fe7994_buggy.java
+++ b/tmp/b24c3f2f-e6fa-4833-a038-c7c1445012b9_fixed.java
@@ -1,57 +1,63 @@
     /**
      * Method that will construct a regular bean property setter using
      * the given setter method.
      *
      * @return Property constructed, if any; or null to indicate that
      *   there should be no property based on given definitions.
      */
     protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanPropertyDefinition propDef,
             JavaType propType0)
         throws JsonMappingException
     {
         // need to ensure method is callable (for non-public)
         AnnotatedMember mutator = propDef.getNonConstructorMutator();
 
-        if (ctxt.canOverrideAccessModifiers()) {
         // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
-            // never needed and attempts may cause problems on some platforms.
-            // !!! NOTE: should be handled better for 2.8 and later
+        // never needed and attempts may cause problems on some platforms
+        if (mutator instanceof AnnotatedField) {
+            AnnotatedField field = (AnnotatedField) mutator;
+            if (Throwable.class.equals(field.getDeclaringClass()) && "cause".equals(field.getName())) {
+                mutator = new OpaqueAnnotatedField(field, field.getAnnotated());
+            }
+        }
+
+        if (ctxt.canOverrideAccessModifiers()) {
             mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
         }
         // note: this works since we know there's exactly one argument for methods
         BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
                 propType0, propDef.getWrapperName(),
                 beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
         JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
         // did type change?
         if (type!= propType0) {
             property = property.withType(type);
         }
 
         // First: does the Method specify the deserializer to use? If so, let's use it.
         JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
         type = modifyTypeByAnnotation(ctxt, mutator, type);
         TypeDeserializer typeDeser = type.getTypeHandler();
         SettableBeanProperty prop;
         if (mutator instanceof AnnotatedMethod) {
             prop = new MethodProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
         } else {
             prop = new FieldProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
         }
         if (propDeser!= null) {
             prop = prop.withValueDeserializer(propDeser);
         }
         // need to retain name of managed forward references:
         AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
         if (ref!= null && ref.isManagedReference()) {
             prop.setManagedReferenceName(ref.getName());
         }
         ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
         if(objectIdInfo!= null){
             prop.setObjectIdInfo(objectIdInfo);
         }
         return prop;
     }
\ No newline at end of file
