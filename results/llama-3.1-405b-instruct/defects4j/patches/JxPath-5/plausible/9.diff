diff --git a/tmp/6e85714c-0d86-4650-8223-7c07cccf9133_buggy.java b/tmp/211c746d-f9eb-4ae0-8637-39050c892375_fixed.java
index 5f8ac1a..e0c4fb7 100644
--- a/tmp/6e85714c-0d86-4650-8223-7c07cccf9133_buggy.java
+++ b/tmp/211c746d-f9eb-4ae0-8637-39050c892375_fixed.java
@@ -1,34 +1,48 @@
 private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        // Check if either pointer is a variable pointer, 
+        // in which case it should not be compared as a tree node
+        if (p1 instanceof VariablePointer || p2 instanceof VariablePointer) {
+            if (p1 == p2) {
+                return 0;
+            } else if (p1 == null) {
+                return -1;
+            } else if (p2 == null) {
+                return 1;
+            } else {
+                return p1.hashCode() - p2.hashCode();
+            }
+        }
+        
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1!= null && p1.equals(p2)) {
             return 0;
         }
 
         if (depth1 == 1) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r!= 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
