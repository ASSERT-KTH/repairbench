diff --git a/tmp/17afb2cd-0754-4e04-9a17-e84fbdfd9155_buggy.java b/tmp/7cf4f5f7-fa08-40d9-b99b-bd61993de99f_fixed.java
index 5f8ac1a..87c4712 100644
--- a/tmp/17afb2cd-0754-4e04-9a17-e84fbdfd9155_buggy.java
+++ b/tmp/7cf4f5f7-fa08-40d9-b99b-bd61993de99f_fixed.java
@@ -1,34 +1,50 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // If both pointers are of different types (node or variable), they cannot be compared
+    if (p1 instanceof VariablePointer && p2 instanceof NodePointer) {
+        return 1; // or throw an exception
+    } else if (p1 instanceof NodePointer && p2 instanceof VariablePointer) {
+        return -1; // or throw an exception
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1!= null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
+        if (p1 instanceof VariablePointer && p2 instanceof VariablePointer) {
+            throw new JXPathException(
+                "Cannot compare two variables: '" + p1 + "' and '" + p2 + "'");
+        } else if (p1 instanceof VariablePointer) {
+            return 1;
+        } else if (p2 instanceof VariablePointer) {
+            return -1;
+        } else {
             throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                 + p1 + "' and '" + p2 + "'");
         }
+    }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r!= 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
