diff --git a/tmp/c4e9a6ef-1543-40db-8b66-5aece44f93d1_buggy.java b/tmp/20c8b465-7cb0-4c40-b39b-cccaee032203_fixed.java
index 5f8ac1a..54f7099 100644
--- a/tmp/c4e9a6ef-1543-40db-8b66-5aece44f93d1_buggy.java
+++ b/tmp/20c8b465-7cb0-4c40-b39b-cccaee032203_fixed.java
@@ -1,34 +1,51 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == null && p2!= null) {
+        // null pointer is considered "before" any non-null pointer
+        return -1;
+    }
+    if (p1!= null && p2 == null) {
+        // null pointer is considered "before" any non-null pointer
+        return 1;
+    }
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
+
+    if (p1 instanceof VariablePointer &&!(p2 instanceof VariablePointer)) {
+        // Treat VariablePointers separately
+        return -1;
+    } else if (!(p1 instanceof VariablePointer) && p2 instanceof VariablePointer) {
+        // Treat VariablePointers separately
+        return 1;
+    } else if (p1 instanceof VariablePointer) {
+        // Compare variables
+        return ((VariablePointer) p1).getBaseValue().compareTo(((VariablePointer) p2).getBaseValue());
     }
 
-        if (p1 != null && p1.equals(p2)) {
+    // All non-variable pointers 
+    if (p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r!= 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
