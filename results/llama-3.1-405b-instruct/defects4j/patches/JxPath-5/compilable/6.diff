diff --git a/tmp/a532182b-3ac2-45d2-94fa-2a1711bb3100_buggy.java b/tmp/ca3cf6ef-8bbe-4e2a-9e86-ec8e5bdd19ee_fixed.java
index 5f8ac1a..7dfb83f 100644
--- a/tmp/a532182b-3ac2-45d2-94fa-2a1711bb3100_buggy.java
+++ b/tmp/ca3cf6ef-8bbe-4e2a-9e86-ec8e5bdd19ee_fixed.java
@@ -1,34 +1,48 @@
 private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
 {
+    // If both pointers are null, consider them equal
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+
+    // If both pointers are variables, consider them not comparable
+    if (p1 instanceof VariablePointer && p2 instanceof VariablePointer) {
+        throw new JXPathException(
+                "Cannot compare two variable pointers: '" + p1 + "' and '" + p2 + "'");
+    }
+
+    // If one pointer is a variable and the other is a node, consider them not comparable
+    if ((p1 instanceof VariablePointer)!= (p2 instanceof VariablePointer)) {
+        throw new JXPathException(
+                "Cannot compare a variable pointer with a node pointer: '" + p1 + "' and '" + p2 + "'");
+    }
+
+    // Compare non-variable pointers
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
     if (p1!= null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
         throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+                "Cannot compare pointers that do not belong to the same tree: '" + p1 + "' and '" + p2 + "'");
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r!= 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
