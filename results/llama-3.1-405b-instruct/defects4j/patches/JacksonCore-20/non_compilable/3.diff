diff --git a/tmp/2e27301a-e601-4a3b-bed5-7c5f8adc1828_buggy.java b/tmp/844a07e4-166f-49fb-b93c-3961128a7b48_fixed.java
index a6f008f..5d5152a 100644
--- a/tmp/2e27301a-e601-4a3b-bed5-7c5f8adc1828_buggy.java
+++ b/tmp/844a07e4-166f-49fb-b93c-3961128a7b48_fixed.java
@@ -1,11 +1,33 @@
 /**
  * Method that can be called on backends that support passing opaque datatypes of
  * non-JSON formats
  *
  * @since 2.8
  */
 public void writeEmbeddedObject(Object object) throws IOException {
-        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases
-        throw new JsonGenerationException("No native support for writing embedded objects",
-                this);
+    if (object == null) {
+        writeNull();
+        return;
     }
+
+    byte[] bytes;
+    if (object instanceof byte[]) {
+        bytes = (byte[]) object;
+        if (_outputBuffer!= null && (_outputEnd - _outputTail >= bytes.length)) {
+            // direct embedded copying if small enough?
+            _outputHead++;
+            System.arraycopy(bytes, 0, _outputBuffer, _outputTail, bytes.length);
+            _outputTail += bytes.length;
+            _flushWrite(); // needed so last batch of buffering does need full flush at close etc.
+        } else if (getOutputTarget()!= null) {
+            (_flushBuffer().getInputTarget()).write(bytes, 0, bytes.length);
+            getOutput().setCommitted(bytes.length);
+        } else if (useStdoutWithNoEmbeddedFormatting) {
+            for (int i = 0, len = bytes.length; i < len; ) {
+                // This variant might have faster branches that use byte[i], vs copying the `bytes' first:
+                while (++_outputPtr <= Buf_size && ++i!= len) _output.append(_symbols.quote(int)) == i).quote >.
+                    + ((())])])
+                   .
+                        /, i).
+            return this; i <length (outputBytes - byte.append. flush byte.
+      ;
\ No newline at end of file
