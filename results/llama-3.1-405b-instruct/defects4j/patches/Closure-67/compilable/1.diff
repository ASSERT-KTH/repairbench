diff --git a/tmp/c5cfa6d5-edee-49da-8dda-7b807f1ae6c3_buggy.java b/tmp/9d4ce31e-cb0e-4b6d-9f87-f191c603a0c7_fixed.java
index 939f49b..18e4bba 100644
--- a/tmp/c5cfa6d5-edee-49da-8dda-7b807f1ae6c3_buggy.java
+++ b/tmp/9d4ce31e-cb0e-4b6d-9f87-f191c603a0c7_fixed.java
@@ -1,21 +1,27 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        Node child = n.getFirstChild();
+        if (child.getType() == Token.GETPROP) {
+          // Check if we have an assignment like "a.prototype.b =..."
+          if (child.getFirstChild().getNext().getType() == Token.STRING
+              && child.getFirstChild().getNext().getString().equals("prototype")) {
             return true;
           }
+          // Check if we have an assignment like "a.b.prototype.c =..."
+          child = child.getNext();
+          while (child!= null && child.getType() == Token.GETPROP) {
+            if (child.getFirstChild().getType() == Token.STRING
+                && child.getFirstChild().getString().equals("prototype")) {
+              return true;
+            }
+            child = child.getNext();
+          }
         }
       }
 
       return false;
     }
