diff --git a/tmp/2004a545-a588-4d1a-bace-6c63d01248c4_buggy.java b/tmp/26d45382-3ae8-46b0-8a71-c1e82386ef9f_fixed.java
index 939f49b..3ef384a 100644
--- a/tmp/2004a545-a588-4d1a-bace-6c63d01248c4_buggy.java
+++ b/tmp/26d45382-3ae8-46b0-8a71-c1e82386ef9f_fixed.java
@@ -1,21 +1,51 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
         n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
       Node child = n.getFirstChild().getFirstChild().getNext();
 
       if (child.getType() == Token.STRING &&
           child.getString().equals("prototype")) {
         return true;
       }
+    } else {
+      Node parent = n.getFirstChild();
+      if (parent.getType() == Token.NAME) {
+        Node grandparent = assign.getParent();
+        if (grandparent.getType() == Token.ASSIGN) {
+          Node rhs = grandparent.getLastChild();
+          if (rhs.getType() == Token.GETPROP) {
+            Node rhsParent = rhs.getFirstChild();
+            if (rhsParent.getType() == Token.NAME &&
+                rhsParent.getString().equals(parent.getString())) {
+              Node rhsGrandparent = rhsParent.getParent();
+              if (rhsGrandparent.getType() == Token.GETPROP) {
+                Node rhsGreatGrandparent = rhsGrandparent.getParent();
+                if (rhsGreatGrandparent.getType() == Token.ASSIGN) {
+                  Node rhsGGGParent = rhsGreatGrandparent.getParent();
+                  if (rhsGGGParent.getType() == Token.EXPR_RESULT) {
+                    Node rhsGGGGParent = rhsGGGParent.getParent();
+                    if (rhsGGGGParent.getType() == Token.BLOCK) {
+                      Node stringNode = rhsGrandparent.getLastChild();
+                      if (stringNode.getType() == Token.STRING &&
+                          stringNode.getString().equals("prototype")) {
+                        return true;
+                      }
+                    }
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
     }
   }
 
   return false;
 }
\ No newline at end of file
