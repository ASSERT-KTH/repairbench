diff --git a/tmp/324cc224-8427-4c95-b82b-7cd7a325a3d1_buggy.java b/tmp/9c59fe48-ae9c-47ab-a710-aec04a18e733_fixed.java
index 939f49b..537c999 100644
--- a/tmp/324cc224-8427-4c95-b82b-7cd7a325a3d1_buggy.java
+++ b/tmp/9c59fe48-ae9c-47ab-a710-aec04a18e733_fixed.java
@@ -1,21 +1,28 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
         n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
       Node child = n.getFirstChild().getFirstChild().getNext();
 
       if (child.getType() == Token.STRING &&
           child.getString().equals("prototype")) {
         return true;
       }
+    } else {
+      // Check if the property is being assigned to a prototype
+      Node parent = n.getFirstChild();
+      if (parent.getType() == Token.GETPROP &&
+          parent.getFirstChild().getNext().getType() == Token.STRING &&
+          parent.getFirstChild().getNext().getString().equals("prototype")) {
+        return true;
+      }
     }
   }
 
   return false;
 }
\ No newline at end of file
