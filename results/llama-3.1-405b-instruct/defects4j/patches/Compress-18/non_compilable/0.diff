diff --git a/tmp/b147c69b-3f80-4ab5-b13e-51b6749e9bb7_buggy.java b/tmp/cc198c09-c3a8-452f-ab38-bb07ed8f232d_fixed.java
index 08093b4..5c2ec1a 100644
--- a/tmp/b147c69b-3f80-4ab5-b13e-51b6749e9bb7_buggy.java
+++ b/tmp/cc198c09-c3a8-452f-ab38-bb07ed8f232d_fixed.java
@@ -1,42 +1,52 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
-        if (name.length() >= TarConstants.NAMELEN) {
-            name = name.substring(0, TarConstants.NAMELEN - 1);
-        }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
+        pex.setSize(countPaxHeaderSize(headers));
 
-        StringWriter w = new StringWriter();
+        putArchiveEntry(pex);
+
+        OutputStream writer = new BufferedOutputStream(this);
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len!= actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
-            w.write(line);
+            writer.write(line.getBytes(CharsetNames.UTF_8));
         }
-        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
-        pex.setSize(data.length);
-        putArchiveEntry(pex);
-        write(data);
+        writer.flush();
         closeArchiveEntry();
     }
+
+    private int countPaxHeaderSize(Map<String, String> headers) {
+        int len = 0;
+        for (Map.Entry<String, String> h : headers.entrySet()) {
+            String key = h.getKey();
+            String value = h.getValue();
+            int lineLength = key.length() + value.length()
+                + 3 /* blank, equals and newline */
+                + 2 /* guess 9 < actual length < 100 */;
+            String line = lineLength + " " + key + "=" + value + "\n";
+            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
+            while (lineLength!= actualLength) {
+                lineLength = actualLength;
+                line = lineLength + " " + key + "=" + value + "\n";
+                actualLength = line.getBytes(CharsetNames.UTF_8).length;
+            }
+            len += actualLength;
+        }
+        return len;
+    }
\ No newline at end of file
