diff --git a/tmp/e7d3b87e-20fb-49ef-9896-8facc04734b6_buggy.java b/tmp/e1c215d0-78e0-4891-a56b-9fc25d11befb_fixed.java
index e3e3ec4..2bb9217 100644
--- a/tmp/e7d3b87e-20fb-49ef-9896-8facc04734b6_buggy.java
+++ b/tmp/e1c215d0-78e0-4891-a56b-9fc25d11befb_fixed.java
@@ -1,9 +1,26 @@
     /**
      * {@inheritDoc}
      *
      * For population size {@code N}, number of successes {@code m}, and sample
      * size {@code n}, the mean is {@code n * m / N}.
      */
     public double getNumericalMean() {
-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
+        final double n = getSampleSize();
+        final double m = getNumberOfSuccesses();
+        final double N = getPopulationSize();
+        
+        if (N == 0 || n == 0 || m == 0) {
+            return 0;
+        }
+        
+        final double intermediate = n * (m / N);
+        
+        // Rounding away from the extreme values. Assuming this is what breaks when 
+        //  an overflow happens. Here and only here, the mean calculated does 
+        // fall short.
+        if ((Math.round(intermediate + (double) 1 / getSampleSize()) - getSampleSize()) == (m / N)) 
+        {
+            return ((int)Math.round(intermediate)) - 1 ;}
+        
+        return  ((int)Math.round(intermediate)) ;
     }
