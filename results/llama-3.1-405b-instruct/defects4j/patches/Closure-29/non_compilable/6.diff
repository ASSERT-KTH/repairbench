diff --git a/tmp/7d79f46e-1bf7-4153-ab14-a3116692dd66_buggy.java b/tmp/e826049c-ce1b-4751-9384-1b1eea64650f_fixed.java
index be9c8a3..302320c 100644
--- a/tmp/7d79f46e-1bf7-4153-ab14-a3116692dd66_buggy.java
+++ b/tmp/e826049c-ce1b-4751-9384-1b1eea64650f_fixed.java
@@ -1,94 +1,96 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
+      boolean hasUnknown = false;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+          if (gramps.isCall() && gramps.getFirstChild() == parent) {
             return false;
           }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+          // If a child is undefined, assume Object.prototype was accessed
+          Node value = ref.getValue();
+          if (value!= null &&!isUndefined(value)) {
             continue;
           }
+          // TODO(nicksantos): This could do something cleverer. Eg, look
+          // for places where a previous pass proved that this cannot
+          // happen because there's no function calling going on.
+          if (name.getString() == null ||!JSErrorBase.contains(name.getString().substring(0,1).toLowerCase())) {
+            continue;
+          }
+        }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
         // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
         // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
         for (Node child = val.getFirstChild(); child!= null;
              child = child.getNext()) {
           if (child.isGetterDef() ||
               child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
 
-
           Node childVal = child.getFirstChild();
+          if (isUndefined(childVal)) {
+            continue;
+          }
+
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments
           // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
             while (!NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
                 // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
+        // Found an object declaration. That's what counts
+        hasUnknown |= isObjectUnknown(ref);
 
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
       }
-      return ret;
+      // For inlinable object properties must all be in known or object unknown states and must
+      // start from at least an init or constructor state.
+      return hasUnknown || isInConstructor(refs);
     }
