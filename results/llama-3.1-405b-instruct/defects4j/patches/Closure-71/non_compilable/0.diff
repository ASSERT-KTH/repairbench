diff --git a/tmp/331e7806-6830-46f9-9547-8b051f1935b3_buggy.java b/tmp/ed2692b9-7167-4a01-8619-01e9d7ab73be_fixed.java
index 6f24eb6..b06b55b 100644
--- a/tmp/331e7806-6830-46f9-9547-8b051f1935b3_buggy.java
+++ b/tmp/ed2692b9-7167-4a01-8619-01e9d7ab73be_fixed.java
@@ -1,99 +1,86 @@
-  /**
-   * Determines whether the given property is visible in the current context.
-   * @param t The current traversal.
-   * @param getprop The getprop node.
-   */
 private void checkPropertyVisibility(NodeTraversal t,
     Node getprop, Node parent) {
   ObjectType objectType =
       ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
   String propertyName = getprop.getLastChild().getString();
 
   if (objectType!= null) {
     // Is this a normal property access, or are we trying to override
     // an existing property?
     boolean isOverride = t.inGlobalScope() &&
         parent.getType() == Token.ASSIGN &&
         parent.getFirstChild() == getprop;
 
     // Find the lowest property defined on a class with visibility
     // information.
     if (isOverride) {
       objectType = objectType.getImplicitPrototype();
     }
     JSDocInfo docInfo = null;
     for (; objectType!= null;
          objectType = objectType.getImplicitPrototype()) {
       docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
       if (docInfo!= null &&
           docInfo.getVisibility()!= Visibility.INHERITED) {
         break;
       }
     }
 
     if (objectType == null) {
       // We couldn't find a visibility modifier; assume it's public.
       return;
     }
 
     boolean sameInput =
         t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
     JSType ownerType = normalizeClassType(objectType);
+
+    if (visibility!= Visibility.PRIVATE && ownerType.isSubtype(JSTypeNative.UNKNOWN_TYPE.getInstance())) {
+      ownerType = JSTypeNative.UNKNOWN_TYPE.getInstance();
+    }
+
     if (isOverride) {
       // Check an ASSIGN statement that's trying to override a property
       // on a superclass.
       JSDocInfo overridingInfo = parent.getJSDocInfo();
       Visibility overridingVisibility = overridingInfo == null?
           Visibility.INHERITED : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
-        if (visibility == Visibility.PRIVATE && !sameInput) {
+      // If the original property is PROTECTED, then we only accept
+      // non-package-private (i.e., PROTECTED or PUBLIC, but not
+      // PACKAGE_PRIVATE) overrides, due to the way package-scoping
+      // operates in the Java-based module system.
+      // PACKAGE_PRIVATE is the default (documented) visibility level here.
+      if (docInfo.getVisibility()!= Visibility.PRIVATE) {
+        if (overridingVisibility == Visibility.PRIVATE) {
           compiler.report(
-              t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
-            overridingVisibility != visibility) {
+              t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));
+          // We still need to accept this property, so we don't let the
+          // BAD_PRIVATE_PROPERTY_ACCESS report show up.
+          visibility = Visibility.PUBLIC;
+          sameInput = true;
+          ownerType = null;
+
+        } else if (!(overridingVisibility == docInfo.getVisibility())) {
           compiler.report(
-              t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
+              t.makeError(getprop,  VISIBILITY_MISMATCH, visibility.name(),
+                  validateType(objectType),
                   overridingVisibility.name()));
         }
+      }
+
+      // Check that  the visibility of the property is the same
+      // as the visibility when it was declared. Because we've already
+      // checked that  in the previous block for (non-private) classes when
+      // is override is true, only proceed if we are working out of a class.
     } else {
-        if (sameInput) {
-          // private access is always allowed in the same file.
-          return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
-            return;
-          }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
-          compiler.report(
-              t.makeError(getprop,
-                  BAD_PRIVATE_PROPERTY_ACCESS,
-                  propertyName,
-                  validator.getReadableJSTypeName(
-                      getprop.getFirstChild(), true)));
-        } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
-            compiler.report(
-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
-                    propertyName,
-                    validator.getReadableJSTypeName(
-                        getprop.getFirstChild(), true)));
-          }
-        }
-      }
-    }
-  }
+      String ownerTypeName = null!= ownerType? validateType(ownerType) : validator.getReadableJSTypeName(getprop.getFirstChild(), true);
+      try {
+        if (!hasSameVisibility(visibility,sameInput, docInfo, getprop.getFirstChild(),ownerType,t ")) {
+          compiler.reportError(
+              t.makeInvalidAccessError(getprop,sameInput,validateDeclaringType(docInfo)),
+              visibility,propertyName,new String[]{ownerTypeName.validateType(getprop.getFirstChild().getJSType())});
+        }    } catch (Exception e)    {
+        }
+      }}}}
\ No newline at end of file
