diff --git a/tmp/355da411-ab63-4cb8-9f15-cab739259947_buggy.java b/tmp/230a6773-8271-43a1-af44-9ad4b610a8e4_fixed.java
index 6f24eb6..68e9868 100644
--- a/tmp/355da411-ab63-4cb8-9f15-cab739259947_buggy.java
+++ b/tmp/230a6773-8271-43a1-af44-9ad4b610a8e4_fixed.java
@@ -1,99 +1,101 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType!= null) {
       // Is this a normal property access, or are we trying to override
       // an existing property?
       boolean isOverride = t.inGlobalScope() &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
 
       // Find the lowest property defined on a class with visibility
       // information.
       if (isOverride) {
         objectType = objectType.getImplicitPrototype();
       }
       JSDocInfo docInfo = null;
+      ObjectType originalObjectType = objectType; // store the original ObjectType
       for (; objectType!= null;
            objectType = objectType.getImplicitPrototype()) {
         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
         if (docInfo!= null &&
             docInfo.getVisibility()!= Visibility.INHERITED) {
           break;
         }
       }
 
       if (objectType == null) {
         // We couldn't find a visibility modifier; assume it's public.
         return;
       }
 
       boolean sameInput =
           t.getInput().getName().equals(docInfo.getSourceName());
       Visibility visibility = docInfo.getVisibility();
       JSType ownerType = normalizeClassType(objectType);
       if (isOverride) {
         // Check an ASSIGN statement that's trying to override a property
         // on a superclass.
         JSDocInfo overridingInfo = parent.getJSDocInfo();
         Visibility overridingVisibility = overridingInfo == null?
             Visibility.INHERITED : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+        // Check if the property is private, and we're trying to override it
         if (visibility == Visibility.PRIVATE &&!sameInput) {
+          // don't allow private properties to be overridden
           compiler.report(
               t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
+                  originalObjectType.toString()));
+        } else {
+          // Check that (b) the visibility of the override is the same as the
+          // visibility of the original property
+          if (overridingVisibility!= Visibility.INHERITED &&
               overridingVisibility!= visibility) {
             compiler.report(
                 t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
+                    visibility.name(), originalObjectType.toString(),
                     overridingVisibility.name()));
           }
+        }
       } else {
         if (sameInput) {
           // private access is always allowed in the same file.
           return;
         } else if (visibility == Visibility.PRIVATE &&
             (currentClass == null || ownerType.differsFrom(currentClass))) {
           if (docInfo.isConstructor() &&
               isValidPrivateConstructorAccess(parent)) {
             return;
           }
 
-          // private access is not allowed outside the file from a different
-          // enclosing class.
           compiler.report(
               t.makeError(getprop,
                   BAD_PRIVATE_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         } else if (visibility == Visibility.PROTECTED) {
           // There are 3 types of legal accesses of a protected property:
           // 1) Accesses in the same file
           // 2) Overriding the property in a subclass
           // 3) Accessing the property from inside a subclass
           // The first two have already been checked for.
           if (currentClass == null ||!currentClass.isSubtype(ownerType)) {
             compiler.report(
                 t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                     propertyName,
                     validator.getReadableJSTypeName(
                         getprop.getFirstChild(), true)));
           }
         }
       }
     }
   }
