diff --git a/tmp/56477b36-7a76-4b71-837e-010e0a8d53ea_buggy.java b/tmp/0be25aee-3c93-4b2b-af90-5e950c9207a7_fixed.java
index 61ffdbf..088c47c 100644
--- a/tmp/56477b36-7a76-4b71-837e-010e0a8d53ea_buggy.java
+++ b/tmp/0be25aee-3c93-4b2b-af90-5e950c9207a7_fixed.java
@@ -1,44 +1,43 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
         // The parameters object literal setters can not be removed.
         return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
             && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
         // Strip unreferenced args off the end of the function declaration.
         Node lastArg;
+        boolean removedArgs = false;
         while ((lastArg = argList.getLastChild())!= null) {
             Var var = fnScope.getVar(lastArg.getString());
             if (!referenced.contains(var)) {
                 argList.removeChild(lastArg);
                 compiler.reportCodeChange();
+                removedArgs = true;
             } else {
                 break;
             }
         }
+        // If we are in simple mode and we did not remove any args we should
+        // short circuit here to prevent arguments from being removed in the 
+        // call sites. This is to maintain consistent behavior with the old
+        // compiler.
+        if (!removedArgs && compiler.getOptions().getOptimizationLevel() == OptimizationLevel.SIMPLE) {
+            return;
+        }
     } else {
         callSiteOptimizer.optimize(fnScope, referenced);
     }
 }
\ No newline at end of file
