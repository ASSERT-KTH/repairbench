diff --git a/tmp/841dc75a-1c6f-4682-9cac-1334b8b00b62_buggy.java b/tmp/6cfcc6bd-ac9a-4429-96c3-1ad19222747e_fixed.java
index 61ffdbf..c04a628 100644
--- a/tmp/841dc75a-1c6f-4682-9cac-1334b8b00b62_buggy.java
+++ b/tmp/6cfcc6bd-ac9a-4429-96c3-1ad19222747e_fixed.java
@@ -1,44 +1,37 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
+    boolean canModifyCallers = removeGlobal && modifyCallSites && callSiteOptimizer.canModifyCallers(function);
+
+    Node arg = argList.getFirstChild();
+    while (arg!= null) {
+        Var var = fnScope.getVar(arg.getString());
         if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
+            if (!canModifyCallers || compilationLevel == CompilationLevel.WHITESPACE_ONLY
+                    || compilationLevel == CompilationLevel.SIMPLE_OPTIMIZATIONS
+                    || function.getParent() instanceof Node
+                    || function.getParent() instanceof ExternsRoot) {
+                arg = arg.getNext();
+            } else {
+                argList.removeChild(arg);
                 compiler.reportCodeChange();
-        } else {
-          break;
+                arg = argList.getFirstChild();
+                continue;
             }
         }
-    } else {
-      callSiteOptimizer.optimize(fnScope, referenced);
+        arg = arg.getNext();
     }
   }
\ No newline at end of file
