diff --git a/tmp/ecd98731-8d60-4eab-af92-f51f21df0c44_buggy.java b/tmp/0bf5723f-eb59-431f-bcbd-85f9db9da570_fixed.java
index 61ffdbf..27227f6 100644
--- a/tmp/ecd98731-8d60-4eab-af92-f51f21df0c44_buggy.java
+++ b/tmp/0bf5723f-eb59-431f-bcbd-85f9db9da570_fixed.java
@@ -1,44 +1,69 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
         // The parameters object literal setters can not be removed.
         return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
+
+    if (removeGlobal) {
+        // If we're allowed to remove globals, then we should remove
+        // unreferenced function arguments regardless of compilation level.
         if (!modifyCallers) {
             // Strip unreferenced args off the end of the function declaration.
             Node lastArg;
             while ((lastArg = argList.getLastChild())!= null) {
                 Var var = fnScope.getVar(lastArg.getString());
                 if (!referenced.contains(var)) {
                     argList.removeChild(lastArg);
                     compiler.reportCodeChange();
                 } else {
                     break;
                 }
             }
         } else {
             callSiteOptimizer.optimize(fnScope, referenced);
         }
+    } else {
+        // If we're not allowed to remove globals, then we should only
+        // remove unreferenced function arguments in advanced mode.
+        if (compiler.getOptions().getCompilationLevel().ordinal() >= CompilationLevel.ADVANCED_OPTIMIZATIONS.ordinal()) {
+            if (!modifyCallers) {
+                // Strip unreferenced args off the end of the function declaration.
+                Node lastArg;
+                while ((lastArg = argList.getLastChild())!= null) {
+                    Var var = fnScope.getVar(lastArg.getString());
+                    if (!referenced.contains(var)) {
+                        argList.removeChild(lastArg);
+                        compiler.reportCodeChange();
+                    } else {
+                        break;
+                    }
+                }
+            } else {
+                callSiteOptimizer.optimize(fnScope, referenced);
+            }
+        }
+    }
 }
\ No newline at end of file
