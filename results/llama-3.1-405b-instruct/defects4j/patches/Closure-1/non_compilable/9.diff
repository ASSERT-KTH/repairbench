diff --git a/tmp/e3fa45a0-8396-48bc-95a5-72713b75302d_buggy.java b/tmp/cd36194a-dbb1-4c9e-8811-810c8bb1e6a3_fixed.java
index 61ffdbf..3e4328a 100644
--- a/tmp/e3fa45a0-8396-48bc-95a5-72713b75302d_buggy.java
+++ b/tmp/cd36194a-dbb1-4c9e-8811-810c8bb1e6a3_fixed.java
@@ -1,44 +1,39 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
   Node function = fnScope.getRootNode();
 
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
     // The parameters object literal setters can not be removed.
     return;
   }
 
   Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);
+  
+  if (compiler.options.compilationLevel == CompilationLevel.SIMPLE_OPTIMIZATIONS) {
+    // Don't remove args in simple mode
+    return;
+  }
+
   if (!modifyCallers) {
     // Strip unreferenced args off the end of the function declaration.
     Node lastArg;
     while ((lastArg = argList.getLastChild())!= null) {
       Var var = fnScope.getVar(lastArg.getString());
       if (!referenced.contains(var)) {
         argList.removeChild(lastArg);
         compiler.reportCodeChange();
       } else {
         break;
       }
     }
   } else {
     callSiteOptimizer.optimize(fnScope, referenced);
   }
 }
\ No newline at end of file
