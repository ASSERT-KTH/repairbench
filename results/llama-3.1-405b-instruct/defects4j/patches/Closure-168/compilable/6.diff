diff --git a/tmp/d660e779-9efa-4995-b19e-02204b1d268d_buggy.java b/tmp/1ed2028d-fa8e-4c7d-8677-61675412b72e_fixed.java
index b12de99..edb7844 100644
--- a/tmp/d660e779-9efa-4995-b19e-02204b1d268d_buggy.java
+++ b/tmp/1ed2028d-fa8e-4c7d-8677-61675412b72e_fixed.java
@@ -1,52 +1,62 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override 
+public void visit(NodeTraversal t, Node n, Node parent) {
     if (t.inGlobalScope()) {
         return;
     }
 
     if (n.isReturn() && n.getFirstChild()!= null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
     }
 
     if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
+        // But we do need to record the current scope information for them
+        String name = n.getString();
+        Scope scope = t.getScope();
+        if (n.isName() && NodeUtil.isLValue(n)) {
+          Var var = scope.getVar(name);
+          if (var!= null && var.getScope().isLocal()) {
+            data.get(var.getScope().getRootNode()).recordAssignedName(name);
+          }
+        }
         return;
     }
 
     if (n.isName() && NodeUtil.isLValue(n) &&
           // Be careful of bleeding functions, which create variables
           // in the inner scope, not the scope where the name appears.
          !NodeUtil.isBleedingFunctionName(n)) {
       String name = n.getString();
       Scope scope = t.getScope();
       Var var = scope.getVar(name);
       if (var!= null) {
         Scope ownerScope = var.getScope();
         if (ownerScope.isLocal()) {
           data.get(ownerScope.getRootNode()).recordAssignedName(name);
         }
 
         if (scope!= ownerScope && ownerScope.isLocal()) {
           data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
         }
       }
     } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
       String name = NodeUtil.getRootOfQualifiedName(n).getString();
       Scope scope = t.getScope();
       Var var = scope.getVar(name);
       if (var!= null) {
         Scope ownerScope = var.getScope();
         if (scope!= ownerScope && ownerScope.isLocal()) {
           data.get(ownerScope.getRootNode())
              .recordEscapedQualifiedName(n.getQualifiedName());
         }
       }
     }
 }
\ No newline at end of file
