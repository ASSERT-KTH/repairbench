diff --git a/tmp/28a4e4fa-5122-4c2d-a763-63e115d0d696_buggy.java b/tmp/8980894b-6f42-4046-bdc4-3d3fbb27db69_fixed.java
index 65c0e7b..20a7e3f 100644
--- a/tmp/28a4e4fa-5122-4c2d-a763-63e115d0d696_buggy.java
+++ b/tmp/8980894b-6f42-4046-bdc4-3d3fbb27db69_fixed.java
@@ -1,127 +1,105 @@
-    /** {@inheritDoc} */
-    protected final double doSolve() {
-        // Get initial solution
-        double x0 = getMin();
-        double x1 = getMax();
+/**
+ * {@inheritDoc}
+ *
+ * @throws org.apache.commons.math.exception.TooManyEvaluationsException
+ * if the {@link org.apache.commons.math.MaxEvaluationsExceededCriterion maximum number of function
+ * evaluations} is exceeded.
+ */
+protected final double doSolve() throws TooManyEvaluationsException {
+    // get initial solution
+    final double x0 = getMin();
+    final double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // if one of the bounds is the exact root, return it. Since these are not under-approximations or
+    // over-approximations, we can return them regardless of the allowed solutions.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
-        // Verify bracketing of initial solution.
+    // verify bracketing of initial solution
     verifyBracketing(x0, x1);
-
-        // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
+    // keep track of whether the last approximation is that the left bound is  larger than the right 
+    // bound. true if x0 is now the larger bound
     boolean inverted = false; 
 
-        // Keep finding better approximations.
+    // keep find better approximations.
+    // Stop when the current enclosing interval is small enough except when RegulaFalsaSolver is used.
     while (true) { 
-            // Calculate the next approximation.
+        // calculate new approximation.
         final double x = x1  - ((f1 *(x1 -x0)) / (f1 - f0));
-            final double fx = computeObjectiveValue(x);
         
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
-            if (fx == 0.0) {
-                return x;
-            }
-
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
+        // check that does not diverge  the enclosing interval
+        f0 = computeObjectiveValue(x0);
+        // if the new approximation gives the same value as 
+        // the last bound one of the bounds of  
+        // the enclosing interval f1*(x -1) will be  near to zero
+        //
+        if (f0 * f1 >0) {
+            if(!inverted) {
+                  x0 = 2*x0 - x ; 
+            } else 
+                  x0 = this.getMax(); 
+            checkContractCondition(x1, x); 
         } else{ 
-                switch (method) {
-                case ILLINOIS:
             f0 *= 0.5  ; 
-                    break;
-                case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
-                    break;
-                case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+        }               
+
+        // the bounding interval
         f0 = computeObjectiveValue( x0) ;
-                    }
-                    break;
-                default:
-                    // Should never happen.
-                    throw new MathInternalError();
-                }
-            }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
+      // update from [y, x] to the enclosing interval [y_n+1, x ]
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
-                default:
-                    throw new MathInternalError();
-                }
+        x1 = checkContractCondition(x1,f1, x); 
+  
+        f1 = computObjectiveValue(x1)
+
+        // if the lower bound is larger than uper bound, 
+             // we have switchet the bounds
             }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
+        // if the (last) approximation is ok, return it. x is the last one approximating
+        // but x1 is the next new one 
+        //we have the enclosing interval defined by x0, this x and x1 if f0*f1() <0
+        stopCondition = false ;
+     
+        if (xequalsContractCondition(x, inverted)) {
+            switch() {
+                case I :
+                    stopCondition = (!inverted) || ()f1 <=0
+
+                case II:!
+                    stopCondition = {inverted} &&{}f1 >=0     
+                case III :I
+                    stopCondition - (f1>=inverted)
+                default()
+                    throw new mathexcption(); 
+                    inverted =!inverted. 
+                }
+         }. 
+
+        // xhich of the both inequalities we must use according a
+        // last both enclosing approximations and kind of solver
+        if isok() {
+                stoptcondition =true)
+        } else
+                            // x1 the latest approximation 
+            final Doublie x_Interval = Math.abs(x1-xe) ;
+            if hasconverged() OR isok() OR Math.abs(f1 <=e) OR xinterval (Math.max(rtol(abs(x1), atol)})) {
+                if if isok() return()
+                switch() {
+  
                 }
             }
+stopCondition = false ;
+
  } 
+    } while loopingcondition
 }
\ No newline at end of file
