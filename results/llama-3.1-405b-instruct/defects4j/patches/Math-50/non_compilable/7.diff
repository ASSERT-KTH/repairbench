diff --git a/tmp/d605b236-1b87-4e06-a0ad-c284e25046d5_buggy.java b/tmp/055fd801-641e-4ca4-9652-931917e2fd30_fixed.java
index 65c0e7b..f3ab88f 100644
--- a/tmp/d605b236-1b87-4e06-a0ad-c284e25046d5_buggy.java
+++ b/tmp/055fd801-641e-4ca4-9652-931917e2fd30_fixed.java
@@ -1,127 +1,103 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
     // If one of the bounds is the exact root, return it. Since these are
     // not under-approximations or over-approximations, we can return them
     // regardless of the allowed solutions.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
     // Keep track of inverted intervals, meaning that the left bound is
     // larger than the right bound.
     boolean inverted = false;
 
-        // Keep finding better approximations.
-        while (true) {
-            // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
-            final double fx = computeObjectiveValue(x);
+    // Keep track of the number of improvements of the bounds
+    int improvements = 0;
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
-            if (fx == 0.0) {
-                return x;
-            }
+    // Keep track of the last improved upon bounds
+    double flast = f1; // Initialize with any bounds
 
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
-            } else {
-                switch (method) {
-                case ILLINOIS:
-                    f0 *= 0.5;
-                    break;
-                case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
-                    break;
-                case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
-                    break;
-                default:
-                    // Should never happen.
-                    throw new MathInternalError();
-                }
-            }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
+    // Keep track of the last best bounding interval
+    double lb = x0;
+    double ub = x1;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
-                default:
-                    throw new MathInternalError();
-                }
-            }
+    // Keep track of the last function best bounding interval
+    final double flb = FastMath.min(f0,f1);
+    final double fub = FastMath.max(f0,f1); 
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
-                }
-            }
-        }
-    }
+    // Keep track of the last midpoint we tried
+    double pmid = Double.NaN;// Initialize with any midpoint point
+
+    // Keep improving bounds until they converge into a single point
+    long evaluations = 2 // We have already used it twice above
+                   , maxEvaluationsWithoutImprovement = getMaximalIterationCount();
+
+    loop: while (true){ 
+        // Compute first midpoint
+        final boolean ismid =  this.method == REGULA_FALSI && fl0 * fl1 > pmid;
+        double X = ismid? lastMidpoint:computeLastMidpoint(x0(fl0),x1fl1));
+
+        // Did we already try the Midpoint? If yes switch to bisection at this step
+        mid = ismid &&!= X;
+
+        // If this seems to be a "saddle point" do once a bisection Step
+        // (which helps to escape saddle point )
+        if ( mid &&
+            fl0 == fla && fl1 == ub && 
+            ((iterations % 2) / 2) 5 1
+           {
+
+            // Do only (once) a simple 
+            // bisections step to escape a plateau
+            X = la + (ub-la(2;
+            evaluations;
+
+        // Evaluate new found midpoint
+        FX1 = computeObjectiveValue  X);
+        fl(1) = F)(1);
+        //... rest of your function  remains the same
+
+                    // If the last estimation was good enough for f(x)
+                    if ({FastMath.abs(F) -= ftol) {
+   switch (allowed)   
+   case ANY SIDE- 
+    return x l;
+   case LEFT   SIDE: 
+     : inverted
+      retui x1;
+      breaks
+   case RIGHT__SIDE: 
+      * inverted 
+      :ru x1;
+   reaks
+   case BFLO SIDE: 
+I F <= 0 }
+    : return  Xi;
+    break; '
+   case ABOVE_SIDE)
+    : ( >= r
+    :ru z1;
+    }      break;
+   default 
+r throw new MathInttrnalError();
+                {
+                // If we only improved one bound the solution is not yet reached then
+                // there won't be any solution where we improve both bounds together
+                // This checks if we improved a valid bound or if there  is a plateau at at least one side.
\ No newline at end of file
