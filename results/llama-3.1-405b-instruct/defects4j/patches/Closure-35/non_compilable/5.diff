diff --git a/tmp/139af5e2-08c7-411b-944b-d18af3e3f7f8_buggy.java b/tmp/9908b309-3e89-42b5-a46c-a398dd8d7002_fixed.java
index d57736b..2310a1f 100644
--- a/tmp/139af5e2-08c7-411b-944b-d18af3e3f7f8_buggy.java
+++ b/tmp/9908b309-3e89-42b5-a46c-a398dd8d7002_fixed.java
@@ -1,39 +1,34 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj!= null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType!= null) {
-        for (String prop : constraintObj.getOwnPropertyNames()) {
+        Collection<String> propertyNames = new HashSet<>();
+        propertyNames.addAll(constraintObj.getOwnPropertyNames());
+        if (type instanceof FunctionType) {
+          propertyNames.addAll(constraintObj.getOwnPropertyNamesOfType(null));
+        }
+        
+        for (String prop : propertyNames) {
           JSType propType = constraintObj.getPropertyType(prop);
+          if (propType!= null) {
             if (!objType.isPropertyTypeDeclared(prop)) {
               JSType typeToInfer = propType;
               if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                typeToInfer = propType;
+              } else {
+                typeToInfer = objType.getPropertyType(prop).leastSupertype(propType);  // Infer type including non-record types
               }
               objType.defineInferredProperty(prop, typeToInfer, null);
             }
           }
         }
       }
     }
+  }
\ No newline at end of file
