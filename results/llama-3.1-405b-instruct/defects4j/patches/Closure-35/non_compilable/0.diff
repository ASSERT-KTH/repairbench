diff --git a/tmp/2fdfc060-612e-4a46-a24e-98c1d607e440_buggy.java b/tmp/79c8c541-b3db-4c3e-9dc1-30b5567fb494_fixed.java
index d57736b..7e65390 100644
--- a/tmp/2fdfc060-612e-4a46-a24e-98c1d607e440_buggy.java
+++ b/tmp/79c8c541-b3db-4c3e-9dc1-30b5567fb494_fixed.java
@@ -1,39 +1,57 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj!= null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType!= null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
+        if (propType.isUnion() || propType.isNoObject()) {
+          continue; // Don't let nullable types pollute results of type inference.
+        }
+
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
             typeToInfer =
                 getNativeType(VOID_TYPE).getLeastSupertype(propType);
+          } else {
+            typeToInfer = type.getGreatestSubtype(getJSType(prop), null);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
+        } else {
+          JSType inferredType = null;
+
+          if (objType instanceof RecordType) {
+            inferredType = 
+              ((RecordType)objType).getInvertedRestrictedPropertyType(prop).loosen();
           }
+        
+          if (null!= inferredType) 
+              objType.defineOverrideFromConstraint(prop, inferredType.getLeastSupertype(inferredType), null, -1);
         }
-      }
-    }
-  }
+
+       /* 
+        * Remove or comment out the whole objType.hasPropertyInDirectSuperclass(prop)).
+         * 
+         */}
+  
\ No newline at end of file
