diff --git a/tmp/69746e92-b8f0-406c-a3f5-87e4b3345516_buggy.java b/tmp/d1bc5d2d-230d-4a53-92e3-8dca2c100014_fixed.java
index 03b03d7..22dc821 100644
--- a/tmp/69746e92-b8f0-406c-a3f5-87e4b3345516_buggy.java
+++ b/tmp/d1bc5d2d-230d-4a53-92e3-8dca2c100014_fixed.java
@@ -1,25 +1,19 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
+    long instantBefore = convertUTCToLocal(instant - DateTimeConstants.MILLIS_PER_HOUR);
+    long instantSame = convertUTCToLocal(instant);
+    long instantAfter = convertUTCToLocal(instant + DateTimeConstants.MILLIS_PER_HOUR);
     
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+    if (instantBefore <= instantSame && instantAfter <= instantSame) {
+        return earlierOrLater? (instant - (instantBefore - instantSame)) : instant;
+    } else if (instantBefore > instantSame && instantAfter > instantSame) {
+        return earlierOrLater? instant : (instant + (instantAfter - instantSame));
     }
-        
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    return instant;
 }
\ No newline at end of file
