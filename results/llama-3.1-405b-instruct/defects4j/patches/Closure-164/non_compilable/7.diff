diff --git a/tmp/6828cfc9-9867-4549-b2f8-064251a74d2b_buggy.java b/tmp/891a3426-2084-43bd-9cc7-7d8606fcdf90_fixed.java
index 9976e43..d7e2a23 100644
--- a/tmp/6828cfc9-9867-4549-b2f8-064251a74d2b_buggy.java
+++ b/tmp/891a3426-2084-43bd-9cc7-7d8606fcdf90_fixed.java
@@ -1,76 +1,63 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
   // that.paramType[i] <: this.paramType[i] (contravariant)
   //
   // If this.paramType[i] is required,
   // then that.paramType[i] is required.
  //
   // In theory, the "required-ness" should work in the other direction as
   // well. In other words, if we have
   //
   // function f(number, number) {}
   // function g(number) {}
   //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
-    Node thisParam = parameters.getFirstChild();
-    Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
-          return false;
-        }
-      }
+  // Then f *should* not be a subtype of g. But in practice, if the number
+  // of parameters in 'other' is less than number of parameters in 'that',
+  // we just return false.
+  var thisParamCount = countingIterator(parameters.getChildNodes(new JSTypePredicate(getRegistry()))).sum((e) -> e.getParamCount());
+  var otherParamCount = countingIterator(that.parameters.getChildNodes()).sum((e) -> e.getParamCount());
       
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
+  if (this.getParamCount() < otherParamCount) {
+    return isOptionalParametersSubtypeImpl(that);
+  }
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+//...
 
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
-      }
-      if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
+  return true
 }
 
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+private boolean isLooseSubtypeImpl(List<ArrowType> types ) {
+  //...
+ if (this.getParamCountWithoutOptional() < typeOnList.getParamCountWithoutImplicitlyOptional()) {
+                            return false;
                        }
+
+//...
 }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+private default boolean isOptionalParametersStrengtheningSubtiImpl(ArrowType theStrengtheningVersion){
+  //...
+ final var thisParamCountLessImplicitlyOptional = function.getParameterCountWithoutImplicitlitlyOptional();
+ final 
+    var otherParamerterCountLessImplicitlilOptionals = theArithmeticallyStoringArrowType.getParameterCountMinusImplicityOptional();
+                        
+if (thisParammerterCountLessImplicit > implicitlyOptionalParamter, CountLessImplicitlyLtionals) {
+        
+            return false;
      
-    return true;
+ //...
 }
\ No newline at end of file
