diff --git a/tmp/30b57b8a-3b94-4b5e-a860-7f64feacda6d_buggy.java b/tmp/c7064c11-c81f-4b34-ab05-5be416f96628_fixed.java
index e69de29..5df9bc4 100644
--- a/tmp/30b57b8a-3b94-4b5e-a860-7f64feacda6d_buggy.java
+++ b/tmp/c7064c11-c81f-4b34-ab05-5be416f96628_fixed.java
@@ -0,0 +1,30 @@
+public ResolvedRecursiveType buildUnresolvedType(Type type, TypeBindings bindings, JavaType superType)
+{
+    _notClosed(); // in case recursion goes through constructor (successors of super)
+    RecursionCounter recCtr = new RecursionCounter(); // note: do we need new counter every time?
+    
+    RecursionContext returnCtr = getRecursionContext(_primaryType,
+            RecursionContextStack.findContext());
+    recCtr.onBegin();
+    
+    TypeUtil.toResolvedClassIfKnown(type);
+
+    final AtomicReference<Class<?>> fallbackContainer = _maybeTryDefaultContainerTypeResolution(_configuredClassForResolution.get(type));
+    
+    UnresolvedRecursiveContext currentContainerToTryFallbackContainerTypesWithin = buildRecursiveRecursionContextFor(type, recCtr);
+    return ResolvedRecursiveType.withReferenceAsRootClassIfAsEmptyOrResolvedForSameAndSubtypesOnNewIfOtherwise(_updateResolvedStateWhenConstructNew(
+                    UnresolvedResolvedTypeRefKey.from(this,
+                    RecursionState._recursiveResolve(_cached, true))::equals
+                            && type.getTypeIdClassContainerForClassSuperAndIdBoundIfObjectBoundUnwrapsSelf(_key
+                            (_updateIdUnresolvedResolutionAndUseDefaultContainer
+                                    = findRecursionContainerTargetSubTypeRecursively(recCtr,
+                                                    new ContextInContextWithBoundAsParam<RecursionState.TypeClassRecursionTypeMarker.TypeKeyWithConfig, 
+                                            ResolvedRecursiveWithPrimaryAsSubSuperReferenceFromId,?>(_baseLookupContext(type)) {},_maybeCurrentResolutionAttemptRecursionResolvesWithinOtherPrimaryTarget,
+                                                                 superType = null)).maybeAsSamePrimaryRecursiveInTargetResolvedContextPrimaryUnresolvedOnUnResolved),
+           !(_currentlyWithinTypeSubConstruction? buildSubState(recCtr): super::superWithinNonSuper) 
+           ? ((targetFoundBeforeOrNextIfFromDefaultUnBoundForAllKnown,  primaryMatchOfSuperByStateBoundResolvingWhenWithForContainerForAnd)  = findBaseFromOtherPrimariesSuperFromPrimTargetSuperSuperWithinForToBuildNonResolvedBefore(type,
+                                        typeClassMarkerFromThisMarker(this.findFromAndNonAnyOfAny, new ToDefaultForDefaultInResolutionOnFromEmptyMarker())
+                     || resolvedOnFindBuildOnIdTypeMaybeAnyTypeSameInFoundStateBeforeContainerBuildOfToDefaultAsResolvable))).
+            state()// set id so as id build before find type resolve non primary when sub.
+                  , maybeUpdateBeforeSetState(findAnyResolved, true)))
+}
\ No newline at end of file
