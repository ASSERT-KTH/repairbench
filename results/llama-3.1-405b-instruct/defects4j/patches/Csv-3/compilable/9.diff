diff --git a/tmp/c227734f-68b4-4b5a-af6f-ea28a769ec6b_buggy.java b/tmp/f09f1aaa-4c4f-4916-9948-9f855c994829_fixed.java
index 1ad070d..f1629ec 100644
--- a/tmp/c227734f-68b4-4b5a-af6f-ea28a769ec6b_buggy.java
+++ b/tmp/f09f1aaa-4c4f-4916-9948-9f855c994829_fixed.java
@@ -1,38 +1,28 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
     case CR:
     case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+    case FF:
+    case TAB:
+    case BACKSPACE:
         return c;
     case END_OF_STREAM:
         throw new IOException("EOF whilst processing escape sequence");
     default:
         // Now check for meta-characters
+        // Return the original character if it's not a special escape sequence
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
\ No newline at end of file
