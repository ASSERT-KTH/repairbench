diff --git a/tmp/6e88d763-4525-445b-b401-252c1ca45b2a_buggy.java b/tmp/bb0b7d96-2e67-41bf-9e56-d4591904c568_fixed.java
index 5f1dcf2..d3d402c 100644
--- a/tmp/6e88d763-4525-445b-b401-252c1ca45b2a_buggy.java
+++ b/tmp/bb0b7d96-2e67-41bf-9e56-d4591904c568_fixed.java
@@ -1,41 +1,44 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        boolean simplexModified = true;
 
-            incrementIterationsCounter();
+        while (simplexModified) {
+
+            simplexModified = false;
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
-                }
-
-                return;
+                    simplexModified = true;
 
+                } else {
+                    // accept the expanded simplex
+                    simplex = createNextSimplex(original, expanded, comparator);
+                    simplexModified = true;
                 }
 
-            // compute the contracted simplex
+            } else {
+                // perform a contraction step
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
-
-            // check convergence
-                return;
+                    simplex = createNextSimplex(original, contracted, comparator);
+                    simplexModified = true;
+                }
             }
-
         }
-
     }
\ No newline at end of file
