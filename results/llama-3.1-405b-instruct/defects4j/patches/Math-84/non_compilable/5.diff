diff --git a/tmp/95b46875-2f5a-48ee-843f-619b1be15b90_buggy.java b/tmp/abb9a13f-031a-4231-bbb7-712f6461e4e8_fixed.java
index 5f1dcf2..ed8e48b 100644
--- a/tmp/95b46875-2f5a-48ee-843f-619b1be15b90_buggy.java
+++ b/tmp/abb9a13f-031a-4231-bbb7-712f6461e4e8_fixed.java
@@ -1,41 +1,52 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = evaluateNewSimplex(original, khi, comparator);
                 }
 
-                return;
-
-            }
-
+            } else {
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
-
+                    simplex = evaluateNewSimplex(original, gamma, comparator);
+                } else {
                     // check convergence
+                    if (convergenceChecker.converged(getIterations(), simplex)) {
                         return;
                     }
+                }
+            }
 
+            // check convergence
+            if (convergenceChecker.converged(getIterations(), simplex)) {
+                return;
             }
 
+            if (getIterations() >= getMaxIterations()) {
+                throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+            }
+        }
     }
\ No newline at end of file
