diff --git a/tmp/d55f0bd2-950b-42e5-bbc1-e0e1356ea5b9_buggy.java b/tmp/f98c737e-601d-4f32-981a-bdccf5aa5d8b_fixed.java
index 5f1dcf2..c25bb12 100644
--- a/tmp/d55f0bd2-950b-42e5-bbc1-e0e1356ea5b9_buggy.java
+++ b/tmp/f98c737e-601d-4f32-981a-bdccf5aa5d8b_fixed.java
@@ -1,41 +1,50 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator);
             }
 
-                return;
-
-            }
-
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = evaluateNewSimplex(original, gamma, comparator);
+            } else {
+                // check convergence
+                if (convergenceChecker.converged(iterations, evaluations, simplex)) {
+                    return;
+                }
+            }
+        }
 
         // check convergence
+        if (convergenceChecker.converged(iterations, evaluations, simplex)) {
             return;
         }
 
     }
 
 }
\ No newline at end of file
