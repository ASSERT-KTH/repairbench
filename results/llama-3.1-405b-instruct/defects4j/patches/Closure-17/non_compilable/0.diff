diff --git a/tmp/f8151149-3136-47f5-a3bc-99f1d8b40fcd_buggy.java b/tmp/1ee79142-49cc-469b-85ce-6f1d0ba6ae15_fixed.java
index eb9ce9f..9b308e5 100644
--- a/tmp/f8151149-3136-47f5-a3bc-99f1d8b40fcd_buggy.java
+++ b/tmp/1ee79142-49cc-469b-85ce-6f1d0ba6ae15_fixed.java
@@ -1,60 +1,48 @@
-    /**
-     * Look for a type declaration on a property assignment
-     * (in an ASSIGN or an object literal key).
-     *
-     * @param info The doc info for this property.
-     * @param lValue The l-value node.
-     * @param rValue The node that {@code n} is being initialized to,
-     *     or {@code null} if this is a stub declaration.
-     */
-    private JSType getDeclaredType(String sourceName, JSDocInfo info,
-        Node lValue, @Nullable Node rValue) {
+private JSType getDeclaredType(String sourceName, JSDocInfo info, Node lValue, @Nullable Node rValue) {
   if (info!= null && info.hasType()) {
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
   } else if (rValue!= null && rValue.isFunction() && 
-          shouldUseFunctionLiteralType(
-              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
+             shouldUseFunctionLiteralType(JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
     return rValue.getJSType();
   } else if (info!= null) {
     if (info.hasEnumParameterType()) {
       if (rValue!= null && rValue.isObjectLit()) {
         return rValue.getJSType();
       } else {
-            return createEnumTypeFromNodes(
-                rValue, lValue.getQualifiedName(), info, lValue);
+        return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);
       }
     } else if (info.isConstructor() || info.isInterface()) {
-          return createFunctionTypeFromNodes(
-              rValue, lValue.getQualifiedName(), info, lValue);
+      if (info.isConst() &&!lValue.isAssign() && rValue!= null && rValue.getJSType()!= null &&!rValue.getJSType().isUnknownType()) {
+        // If we are annotating a const, the declared type of the LHS
+        // is that of the RHS. So no matter what kind of LHS, we will use 
+        // RHS type in getDeclaredType
+        return rValue.getJSType();
+      }
+      return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);
     } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
-            if (rValue != null) {
+      if (info.isConstant() && rValue!= null) {
         if (rValue.getJSType()!= null &&!rValue.getJSType().isUnknownType()) {
           // If rValue has a type-cast, we use the type in the type-cast.
           // If rValue's type was already computed during scope creation,
           // then we can safely use that.
           return rValue.getJSType();
         } else if (rValue.isOr()) {
           // Check for a very specific JS idiom:
           // var x = x || TYPE;
           // This is used by Closure's base namespace for esoteric
           // reasons.
           Node firstClause = rValue.getFirstChild();
           Node secondClause = firstClause.getNext();
           boolean namesMatch = firstClause.isName() 
                                && lValue.isName()
                                && firstClause.getString().equals(lValue.getString());
           if (namesMatch && secondClause.getJSType()!= null 
               &&!secondClause.getJSType().isUnknownType()) {
             return secondClause.getJSType();
           }
         }
       }
     }
   }
-      }
-
   return getDeclaredTypeInAnnotation(sourceName, lValue, info);
 }
\ No newline at end of file
