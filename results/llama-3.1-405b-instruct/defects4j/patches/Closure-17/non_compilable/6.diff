diff --git a/tmp/3dd9a705-065a-4445-a96a-f56beb847680_buggy.java b/tmp/7f2cae0f-74b3-485f-b980-8ea8929d9d5b_fixed.java
index eb9ce9f..09d8639 100644
--- a/tmp/3dd9a705-065a-4445-a96a-f56beb847680_buggy.java
+++ b/tmp/7f2cae0f-74b3-485f-b980-8ea8929d9d5b_fixed.java
@@ -1,60 +1,70 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
       if (info!= null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
       } else if (rValue!= null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
       } else if (info!= null) {
         if (info.hasEnumParameterType()) {
           if (rValue!= null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
-          return createFunctionTypeFromNodes(
+          JSType rValueType = rValue!= null? rValue.getJSType() : null;
+          JSType interfaceType = createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
+          if (rValueType!= null &&!rValueType.isUnknownType() &&
+              // If the RHS is just an interface implementation, keep the type as
+              // just the interface itself.
+             !(rValueType.getInterfaces().contains(interfaceType))) {
+            return JSType.getLeastCommonSupertypeOfTypesWithoutUnknownType(
+                lValue.getSourceFileName(), this, interfaceType, rValueType);
+          } else {
+            return interfaceType;
+          }
         } else {
           // Check if this is constant, and if it has a known type.
           if (info.isConstant()) {
             JSType knownType = null;
             if (rValue!= null) {
               if (rValue.getJSType()!= null &&!rValue.getJSType().isUnknownType()) {
                 // If rValue has a type-cast, we use the type in the type-cast.
                 // If rValue's type was already computed during scope creation,
                 // then we can safely use that.
                 return rValue.getJSType();
               } else if (rValue.isOr()) {
                 // Check for a very specific JS idiom:
                 // var x = x || TYPE;
                 // This is used by Closure's base namespace for esoteric
                 // reasons.
                 Node firstClause = rValue.getFirstChild();
                 Node secondClause = firstClause.getNext();
                 boolean namesMatch = firstClause.isName()
                     && lValue.isName()
                     && firstClause.getString().equals(lValue.getString());
                 if (namesMatch && secondClause.getJSType()!= null
                     &&!secondClause.getJSType().isUnknownType()) {
                   return secondClause.getJSType();
                 }
               }
             }
           }
         }
       }
 
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
