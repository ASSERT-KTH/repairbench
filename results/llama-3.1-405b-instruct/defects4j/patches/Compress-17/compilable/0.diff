diff --git a/tmp/402dba65-37ae-4e2a-aca9-30acb523ddf9_buggy.java b/tmp/06a1df82-7962-49f9-ab63-b4a6337cca78_fixed.java
index 3b9a3c0..c11eec6 100644
--- a/tmp/402dba65-37ae-4e2a-aca9-30acb523ddf9_buggy.java
+++ b/tmp/06a1df82-7962-49f9-ab63-b4a6337cca78_fixed.java
@@ -1,71 +1,44 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long    result = 0;
     int     end = offset + length;
     int     start = offset;
 
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
+    if (length < 1) {
+        throw new IllegalArgumentException("Length " + length + " must be at least 1");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
+    // Remove trailing NULs or spaces
+    while (end > start && (buffer[end-1] == 0 || buffer[end-1] == ' ')) {
         end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
     }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+
+    if (end == start) {
+        return 0L;  // empty input is considered a missing field
     }
 
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
