diff --git a/tmp/fb5a772a-08e2-49c5-813b-57fd95264669_buggy.java b/tmp/41f20a0d-10ab-42a7-b7d5-08c240b487de_fixed.java
index 21f64c6..4c20678 100644
--- a/tmp/fb5a772a-08e2-49c5-813b-57fd95264669_buggy.java
+++ b/tmp/41f20a0d-10ab-42a7-b7d5-08c240b487de_fixed.java
@@ -1,23 +1,24 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        if (startChar!= input[offset]) {
+            while (++offset < length && startChar!= input[offset]) {
+                // do nothing
+            }
+            if (offset == length) {
+                return -1; // not found
+            }
+        }
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (last <= length) { // check if the seq can fit in the remaining input
+            for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) {
+                // do nothing
+            }
+            if (i == last) { // found full sequence
                 return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
