diff --git a/tmp/6e1b43bc-5cf7-4e66-9a03-1c83406557c5_buggy.java b/tmp/b914179f-d543-49d5-8dde-61ae8e20fd82_fixed.java
index 21f64c6..c1a8257 100644
--- a/tmp/6e1b43bc-5cf7-4e66-9a03-1c83406557c5_buggy.java
+++ b/tmp/b914179f-d543-49d5-8dde-61ae8e20fd82_fixed.java
@@ -1,23 +1,26 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        if (startChar!= input[offset]) {
+            while (++offset < length && startChar!= input[offset]) {
+                if (offset == length - 1) {
+                    return -1; // not found, at end of input
+                }
+            }
+        }
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
+        if (last <= length) { // check if in bounds
             for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) ;
             if (i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
