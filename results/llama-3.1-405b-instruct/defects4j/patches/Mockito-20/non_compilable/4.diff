diff --git a/tmp/a5b133dd-604a-4b1e-98f6-e2aa50cfa3b3_buggy.java b/tmp/41176964-fde8-4615-8759-fcdbb8ea32a2_fixed.java
index f9a9b5b..d4dfaea 100644
--- a/tmp/a5b133dd-604a-4b1e-98f6-e2aa50cfa3b3_buggy.java
+++ b/tmp/41176964-fde8-4615-8759-fcdbb8ea32a2_fixed.java
@@ -1,30 +1,62 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
-        T mockInstance = null;
+    T mockInstance;
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        Constructor<? extends T> constructorToUse = getConstructor(mockedProxyType);
+        if (constructorToUse == null) {
+            throw new InstantiationException(String.format(
+                    "%s has no 0-arg constructor. Make sure that your target type is correctly set up",
+                    settings.getTypeToMock()));
+        }
+        Object outerInstance = settings.getOuterInstance();
+        mockInstance = classInstantiator.instantiate(constructorToUse, outerInstance);
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
-        } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
-                    "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (Exception e) {
+        throw new MockitoException(String.format("Unable to create mock instance of type '%s'",
+                settings.getTypeToMock()), e);
     }
 }
+
+private <T> Constructor<? extends T> getConstructor(Class<? extends T> mockedProxyType) {
+    if (mockedProxyType.isMemberClass()) {
+        return getNonPrivateNoArgsConstructorIncludingDeclared(mockedProxyType);
+    } else {
+        return getParameterTypesFrom(mockedProxyType.getConstructors(), EMPTY_CLASS_ARRAY);
+    }
+}
+
+private <T> Constructor<? extends T> getNonPrivateNoArgsConstructorIncludingDeclared(Class<? extends T> clazz) {
+    for (Constructor<? extends T> constructor : clazz.getDeclaredConstructors()) {
+        if (hasOnlyZeroArgs(constructor.getParameterTypes())) {
+            makeConstructorAccessible(constructor);
+            return constructor;
+        }
+    }
+    if (clazz.getEnclosingClass()!= null) {
+        return null; // We can only pass arguments to the constructors for the top-level types.
+    }
+    return null;
+}
+
+private boolean hasOnlyZeroArgs(Class<?>[] args) {
+    return args.length == 0;
+}
+
+private <T> Constructor<? extends T> getParameterTypesFrom(Constructor<? extends T>[] constructors, Class<?>... paramTypes) {
+    for (Constructor<? extends T> constructor : constructors) {
+        if (arraysAreEqual(constructor.getParameterTypes(), paramTypes)) {
+            return constructor;
+        }
+    }
+    return null;
+}
\ No newline at end of file
