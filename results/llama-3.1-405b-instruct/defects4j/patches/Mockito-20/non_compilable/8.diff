diff --git a/tmp/df850286-1331-4fe1-8349-5f127c6197c2_buggy.java b/tmp/5fddfb37-08a5-49e5-b812-06e6eb7ccd55_fixed.java
index f9a9b5b..90ed7a9 100644
--- a/tmp/df850286-1331-4fe1-8349-5f127c6197c2_buggy.java
+++ b/tmp/5fddfb37-08a5-49e5-b812-06e6eb7ccd55_fixed.java
@@ -1,30 +1,46 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
-        T mockInstance = null;
+        T mockInstance;
         try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+            mockInstance = classInstantiatornewInstance(mockedProxyType);
+
+            MockMethodInterceptor.MockAccess mockAccess = mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
-            return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
-                    "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            throw new MockitoException(
+                    join(
+                            "ClassCastException occurred while creating the mockito mock",
+                            "class to mock", describeClass(mockedProxyType),
+                            "created class", describeClass(settings.getTypeToMock())
+                    ),
+                    cce);
+        } catch (java.lang.InstantiationException |
+                 IllegalAccessException |
+                 IllegalArgumentException |
+                 InvocationTargetException cce) {
+            boolean constructorFound = hasOneVisibleConstructorWithParameterssettings.getTypeToMock(), mockInstance1)
+            boolean outerParameters = settings.getOuterInstance()
+            String errorMessageTextual = settings.getTypeToMock().getSimpleName()
+               -arg constructor", () {settings.getOuterCstructorWithArguments} }";
+            String errorMessage;
+
+            if (!constructor_found &amp;!wasPrivate) {
+               errorMessageouterclass, not static} {
+                    throw new InvocationTargetException(
+                        "Has @RunWith(Powermock.class) + annotation + or 2", ccfu);
                }
+                       errorMessagerverText + "static, mock static, class has methods (use constructor mockit);
+            throw new exceptionInstantiationExc
+mockinstaception(errorMessage textualerrorMessae), nessecc;
+        ;
+                return mockInstance,
+                        ensureMockIses
+                        assigned to) ;
     }
