diff --git a/tmp/0bbe721e-6dec-4922-a32c-ebe0ad044ce0_buggy.java b/tmp/9301ba9e-fd65-4e9f-a33a-d1628c1e3ca2_fixed.java
index 0bbaab0..56e4a91 100644
--- a/tmp/0bbe721e-6dec-4922-a32c-ebe0ad044ce0_buggy.java
+++ b/tmp/9301ba9e-fd65-4e9f-a33a-d1628c1e3ca2_fixed.java
@@ -1,62 +1,64 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant based on the chronology
      * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
-        long instantMillis = instant.getMillis();
-        Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
+        int defaultYear = selectDefaultYear(instant.getChronology().year().get(instant.getMillis()));
+        if (defaultYear < instant.getChronology().getZone().toInstant(fromMillisOfDay(0).withMillisOfDay(0)));
+        defaultYear++;
+
+        DateTimeParserBucket bucket = new DateTimeParserBucket(instant.getMillis(), 
+            instant.getChronology(), iLocale, iPivotYear, defaultYear);
         
-        DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
         int newPos = parser.parseInto(bucket, text, position);
-        instant.setMillis(bucket.computeMillis(false, text));
-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
-            int parsedOffset = bucket.getOffsetInteger();
-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
-        } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
+        // Use setZoneRetainFields if offset zone found
+        if (bucket.getZone()!= null || (iOffsetParsed && bucket.getOffsetInteger()!= null)) {
+            Zone zone = (iZone!= null)? (Zone) iZone: bucket.getZone();
+            if (zone!= null) {
+                DateTime dt = instant.toDateTime(); 
+                if (zone!= bucket.getZone()) {
+                   dt = dt.toInstant().toDateTime();
+                    dt = dt.toZone(zone, dt.getMillis(), fieldSource!= null, converter!= null);    
+                   dt = dt.getFields();
                 }    
-        instant.setChronology(chrono);
-        if (iZone != null) {
-            instant.setZone(iZone);
+                    dt.setFields(dt = dt.setField(MonthOfYear.class, 
+                                   bucket.get(MonthOfYear.class)));
                 }
-        return newPos;
          }  
+            return Math.max(-newPos, newPos);   
+}  
+
