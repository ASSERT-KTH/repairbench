diff --git a/tmp/3fb64217-6435-4016-8120-d20211fbc089_buggy.java b/tmp/78d335ea-d1c0-4f3f-9c54-b61e6d913fa2_fixed.java
index 0bbaab0..7bbc395 100644
--- a/tmp/3fb64217-6435-4016-8120-d20211fbc089_buggy.java
+++ b/tmp/78d335ea-d1c0-4f3f-9c54-b61e6d913fa2_fixed.java
@@ -1,62 +1,32 @@
-    /**
-     * Parses a datetime from the given text, at the given position, saving the
-     * result into the fields of the given ReadWritableInstant. If the parse
-     * succeeds, the return value is the new text position. Note that the parse
-     * may succeed without fully reading the text and in this case those fields
-     * that were read will be set.
-     * <p>
-     * Only those fields present in the string will be changed in the specified
-     * instant. All other fields will remain unaltered. Thus if the string only
-     * contains a year and a month, then the day and time will be retained from
-     * the input instant. If this is not the behaviour you want, then reset the
-     * fields before calling this method, or use {@link #parseDateTime(String)}
-     * or {@link #parseMutableDateTime(String)}.
-     * <p>
-     * If it fails, the return value is negative, but the instant may still be
-     * modified. To determine the position where the parse failed, apply the
-     * one's complement operator (~) on the return value.
-     * <p>
-     * This parse method ignores the {@link #getDefaultYear() default year} and
-     * parses using the year from the supplied instant based on the chronology
-     * and time-zone of the supplied instant.
-     * <p>
-     * The parse will use the chronology of the instant.
-     *
-     * @param instant  an instant that will be modified, not null
-     * @param text  the text to parse
-     * @param position  position to start parsing from
-     * @return new position, negative value means parse failed -
-     *  apply complement operator (~) to get position of failure
-     * @throws UnsupportedOperationException if parsing is not supported
-     * @throws IllegalArgumentException if the instant is null
-     * @throws IllegalArgumentException if any field is out of range
-     */
 public int parseInto(ReadWritableInstant instant, String text, int position) {
     DateTimeParser parser = requireParser();
     if (instant == null) {
         throw new IllegalArgumentException("Instant must not be null");
     }
 
-        long instantMillis = instant.getMillis();
-        Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
+    // Use the year of the instant to be modified to find the correct
+    // leap year or non leap year for the parsed February.
+    int year = instant.getYear();
 
+    // Reuse the current offset. The parsed instant can overwrite it.
     DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+        0L, instant.getChronology(), iLocale, iPivotYear, year);
     int newPos = parser.parseInto(bucket, text, position);
-        instant.setMillis(bucket.computeMillis(false, text));
-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
-            int parsedOffset = bucket.getOffsetInteger();
-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
-        } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
-        }
+    if (newPos < 0) {
+        // the instant may have been set, so return its initial state
+        long initialMilli = instant.getMillis();
+        Chronology chrono = instant.getChronology();
+        DateTimeZone iZone = instant.getZone();
+        // Restore.
+        instant.setMillis(initialMilli);
         instant.setChronology(chrono);
-        if (iZone != null) {
         instant.setZone(iZone);
+    } else {
+        instant.setMillis(bucket.computeMillis(true, text));
+        DateTimeZone parsedZone = bucket.getZone()!= null? bucket.getZone() : (bucket.getOffsetInteger()!= null? DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()) : null);
+        instant.setChronology(instant.getChronology().withZone(parsedZone));
+        instant.setZone(parsedZone);
     }
+
     return newPos;
 }
\ No newline at end of file
