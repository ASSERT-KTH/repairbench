diff --git a/tmp/24491791-ad9d-4688-a965-69ddec4bd36f_buggy.java b/tmp/ee8b176f-7ae5-4c7a-a0c8-a5f68aa0e1a5_fixed.java
index c4b260c..1f3c4e8 100644
--- a/tmp/24491791-ad9d-4688-a965-69ddec4bd36f_buggy.java
+++ b/tmp/ee8b176f-7ae5-4c7a-a0c8-a5f68aa0e1a5_fixed.java
@@ -1,51 +1,55 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
+    if (charsetName == null) { 
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // check and discard BOM marker before parsing HTML
+        if (docData.length() > 0 && (docData.charAt(0) == 65279 || docData.charAt(0) == '\uFEFF')) {
+            docData = docData.substring(1);
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta!= null) { 
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { 
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
+                // check and discard BOM marker after re-decoding
+                if (docData.length() > 0 && (docData.charAt(0) == 65279 || docData.charAt(0) == '\uFEFF')) {
+                    docData = docData.substring(1);
+                }
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { 
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // check and discard BOM marker
+        if (docData.length() > 0 && (docData.charAt(0) == 65279 || docData.charAt(0) == '\uFEFF')) {
             docData = docData.substring(1);
-            charsetName = defaultCharset;
+        }
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName == null? defaultCharset : charsetName);
     }
     return doc;
 }
\ No newline at end of file
