diff --git a/tmp/bd69f716-8981-4104-b482-dc1b1e65122f_buggy.java b/tmp/b79ae5b5-f702-4f4f-815c-f9c6941f0356_fixed.java
index 7116384..cd6123b 100644
--- a/tmp/bd69f716-8981-4104-b482-dc1b1e65122f_buggy.java
+++ b/tmp/b79ae5b5-f702-4f4f-815c-f9c6941f0356_fixed.java
@@ -1,39 +1,47 @@
 /**
  * Returns at most 63 bits read from the underlying stream.
  *
  * @param count the number of bits to read, must be a positive
  * number not bigger than 63.
  * @return the bits concatenated as a long using the stream's byte order.
  *         -1 if the end of the underlying stream has been reached before reading
  *         the requested number of bits
  * @throws IOException on error
  */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
             return nextByte;
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsCached |= (nextByte << bitsCachedSize);
         } else {
             bitsCached <<= 8;
             bitsCached |= nextByte;
         }
         bitsCachedSize += 8;
     }
     // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsOut = (bitsCached & MASKS[count]);
         bitsCached >>>= count;
+    } else {
+        if (bitsCachedSize > 63) {
+            // handle the case where bitsCachedSize is greater than 63
+            bitsOut = (bitsCached >> (bitsCachedSize - 63)) & MASKS[63];
+            bitsCached >>>= (bitsCachedSize - 63);
+            bitsCachedSize = 63;
+            bitsOut |= (bitsCached >> (63 - count)) & MASKS[count];
         } else {
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
         }
+    }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
