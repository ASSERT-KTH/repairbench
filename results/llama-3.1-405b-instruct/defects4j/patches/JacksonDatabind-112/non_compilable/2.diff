diff --git a/tmp/09952803-c8bc-4bed-b333-c8661d666f46_buggy.java b/tmp/80d106f2-2dd2-4cde-bdb5-cee4617550e9_fixed.java
index 4ebe4f9..1fb2872 100644
--- a/tmp/09952803-c8bc-4bed-b333-c8661d666f46_buggy.java
+++ b/tmp/80d106f2-2dd2-4cde-bdb5-cee4617550e9_fixed.java
@@ -1,41 +1,64 @@
-    /*
-    /**********************************************************
+/**
+ **********************************************************
  /* Validation, post-processing
-    /**********************************************************
+ **********************************************************
   */
 @Override
 public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegate = null;
+    AnnotatedWithParams delegateCreator = null;
     if (_valueInstantiator!= null) {
         // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
+        delegateCreator = _valueInstantiator.getDelegateCreator();
+        AnnotatedWithParams arrayCreator = _valueInstantiator.getArrayDelegateCreator();
         if (delegateCreator!= null) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             delegate = findDeserializer(ctxt, delegateType, property);
+        } else if (arrayCreator!= null) {
+            Type[] delegateTypes = new Type[arrayCreator.getParameterCount()];
+            for (int i = 0, len = delegateTypes.length; i < len; ++i) {
+                delegateTypes[i] =ctxt.getTypeFactory().findResolveType(arrayCreator.getParameterSource(), arrayCreator.getDeclaredType(i));
             }
+
+            JavaType delegateToArrayType = ctxt.getTypeFactory().constructArrayType(ctxt.getTypeFactory().constructComponentType(delegateTypes));
+            
+            delegate = findArrayDeserializer(ctxt, delegateToArrayType, property);
+ 
         }
+    }
+   
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     final JavaType valueType = _containerType.getContentType();
     if (valueDeser == null) {
         // [databind#125]: May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         if (valueDeser == null) {
         // And we may also need to get deserializer for String
             valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
         }
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
     }
        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
     JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY); 
     NullValueProvider nuller = findContentNullProvider(ctxt,property,valueDeser);
-        if (isDefaultDeserializer(valueDeser)) {
-            valueDeser = null;
+    Boolean unwrapSingle = findUnwrapSingle(ctxt,false);
+    if (Boolean.TRUE.equals(unwrapSingle)) {
+        if ([valueDeser] boolean.class.isAssignableFrom(valuetype.getRawClass())) {
+return new SingleElementCollection[UnwrappedDeserializer].Boolean>(this,unwrapBool);
+} else if(Object.class.equals(valueType(rawClass())) {
+    Collections[UnwrappedDeserializer<java.lang.Object>> [this,unwrapBool]);
+
     }
-        return withResolved(delegate, valueDeser, nuller, unwrapSingle);
+    }
+ } else if(isDefaultdefaultDeserializer(valueDeser(){
+    valueDeser)) {
+        valueDeser}
+    } 
+return{withResolved{delegate,,valueDeser, }
 }
\ No newline at end of file
