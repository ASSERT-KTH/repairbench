diff --git a/tmp/84a7db00-486c-494f-ac79-3bc176ce60ff_buggy.java b/tmp/e321cc73-d61f-4674-966e-6df44df0bb51_fixed.java
index 46799da..50a10e7 100644
--- a/tmp/84a7db00-486c-494f-ac79-3bc176ce60ff_buggy.java
+++ b/tmp/e321cc73-d61f-4674-966e-6df44df0bb51_fixed.java
@@ -1,8 +1,34 @@
 /**
  * @param x Normalized objective variables.
  * @return the original objective variables, possibly repaired.
  */
 public double[] repairAndDecode(final double[] x) {
-            return
-                decode(x);
+    final double[] repairedX = new double[x.length];
+    for (int i = 0; i < x.length; i++) {
+        final double lower = bounds[i][0];
+        final double upper = bounds[i][1];
+        if (x[i] < 0) {
+            // If x[i] is less than 0, it means the point lies outside the bounds in the normalized space.
+            // Let's shift it to the bound of the original space, not the normalized space
+            // (i.e., do not use lower bound 0 for the decoded point)
+            repairedX[i] = -Math.tan(-x[i] * Math.PI * 0.4) * (upper - lower) / 2;
+            // Add the shift necessary to map the interval ]0, 1] in ]lower, upper] at the end
+            // when x[i] -> -∞, to -∞, because that is the limit from one side of tan's
+            // asymptote where 1 / tan has 1 / ∞ ≈ -∞
+            // But at x[i] == -1, we'll only get -∞ with tan(-π * 0.4 / 2) = -tan(π / 5),
+            // so apply to the result the limit we found
+            repairedX[i] = Math.min(lower, lower + 0.5 * (repairedX[i] - 1) * (upper - lower));
+        } else {
+            // Case similar to the one previously analyzed
+            repairedX[i] = Math.tan(x[i] * Math.PI * 0.4) * (upper - lower) / 2;
+            repairedX[i] = lower + 0.5 * (repairedX[i] + 1) * (upper - lower);
+        }
+        if (repairedX[i] < lower) {
+            repairedX[i] = lower;
+        }
+        if (repairedX[i] > upper) {
+            repairedX[i] = upper;
+        }
+    }
+    return repairedX;
 }
\ No newline at end of file
