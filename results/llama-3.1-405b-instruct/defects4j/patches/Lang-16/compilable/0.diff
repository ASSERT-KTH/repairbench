diff --git a/tmp/81302e74-419d-4a6b-b770-7e9593e3ef89_buggy.java b/tmp/6dab75d2-57f5-485f-8a2c-aafc3210a6d0_fixed.java
index d95d5a8..727f8ec 100644
--- a/tmp/81302e74-419d-4a6b-b770-7e9593e3ef89_buggy.java
+++ b/tmp/6dab75d2-57f5-485f-8a2c-aafc3210a6d0_fixed.java
@@ -1,177 +1,62 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>First, the value is examined for a type qualifier on the end
-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-     * <code>BigDecimal</code>.</p>
-     *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
 public static Number createNumber(String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear
         // to be in specification of class. OS X Java parses it to
         // a wrong value.
-            return null;
-        }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
-            return createInteger(str);
-        }   
-        char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
-
-        if (decPos > -1) {
-
-            if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
-            }
-            mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) {
         throw new NumberFormatException(str + " is not a valid number.");
     }
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+    // Need to deal with case when have both leading sign and 0x suffix
+    String strForCheck = str.replaceAll("^\\+", "");
+    if (strForCheck.startsWith("0x") || strForCheck.startsWith("-0x")) {
+        return createInteger(str);
     }
-            dec = null;
+    if (strForCheck.endsWith("x") || strForCheck.endsWith("X")) {
+        // Handles 7fffffff int value as String "2147483648x"
+        return Long.parseLong(strForCheck.replaceAll("[xX]", "").replaceAll("\\s+", "")); 
     }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+    if (strForCheck.indexOf('e')!= -1 || strForCheck.indexOf('E')!= -1) {
+        return createBigDecimal(str); // case with exponential will be here
     } else {
-                exp = null;
-            }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
         try {
-                            return createLong(numeric);
-                        } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
-                        return createBigInteger(numeric);
+            char lastChar = strForCheck.charAt(strForCheck.length() - 1);
+            String numericValue = strForCheck.indexOf('.') == -1 // decimal case
+                    || Character.isDigit(lastChar) // normal int Long case
+                    ||!(lastChar == 'F' || lastChar == 'D' || lastChar == 'f'
+                    || lastChar == 'd')? strForCheck : strForCheck.substring(0, strForCheck.length()-1);
 
+            // Normal case here, integer etc
+            return createDouble(numericValue);
+        } catch (NumberFormatException nonDecimalValue) {
+            // Ignore, as expected
         }
-                    throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
-                    try {
-                        Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
-                        }
-
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
     }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
+    // if it still haven't passed above conditions probably hex.
     try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
-                        }
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
+        // Check for Long and Integer then hex check, then the rest as stated
+        return Long.parseLong(str.replaceFirst("^0x", "")); // 0xcafebabeL should worked
+    } catch(NumberFormatException numberFormatException) { // no valid integer here eg. case of Hex not Long 
         try{
-                        return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+            // try Integer Value
+            return Integer.parseInt(str.replaceFirst("^0x", "")); // Handle Integer literal 0 as "0"
         }
-                    //$FALL-THROUGH$
-                default :
-                    throw new NumberFormatException(str + " is not a valid number.");
-
-            }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
-            }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+        catch (NumberFormatException illegalArgumentException) { // number not in int or any valid literal 
+            final String origStr = str;
+            // Hex notation not integer/long only, not int etc need to add radix 
             try{
-                    return createInteger(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                // Handles Hex as int 
+                return Long.parseLong(str,16);
+            } catch(IllegalArgumentException lastResort){
+                 // Now throw
+            throw new NumberFormatException("Unparsable number as Integer nor hex : [ " + origStr 
+                    + " ] or [ 0x [" + origStr + "]" + "] not valid values.");
             }
-                try {
-                    return createLong(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
-                return createBigInteger(str);
-
-            } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-                try {
-                    Float f = createFloat(str);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                        return f;
-                    }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
-                try {
-                    Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                        return d;
-                    }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
-
-                return createBigDecimal(str);
-
         } 
     }
 }
\ No newline at end of file
