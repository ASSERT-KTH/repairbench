diff --git a/tmp/52e978be-7819-4799-ad79-09d0fa2502cf_buggy.java b/tmp/17eec63e-64e6-4e8c-a134-6670ba22231b_fixed.java
index d95d5a8..b0ee885 100644
--- a/tmp/52e978be-7819-4799-ad79-09d0fa2502cf_buggy.java
+++ b/tmp/17eec63e-64e6-4e8c-a134-6670ba22231b_fixed.java
@@ -1,177 +1,71 @@
 /**
  * <p>Turns a string value into a java.lang.Number.</p>
  *
  * <p>First, the value is examined for a type qualifier on the end
  * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
  * trying to create successively larger types from the type specified
  * until one is found that can represent the value.</p>
  *
  * <p>If a type specifier is not found, it will check for a decimal point
  * and then try successively larger types from <code>Integer</code> to
  * <code>BigInteger</code> and from <code>Float</code> to
  * <code>BigDecimal</code>.</p>
  *
  * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
+ * will be interpreted as a hexadecimal integer.  The '0x' prefix and the sign (if
+ * present) are only removed if the number contains valid hexadecimal digits
+ * after that.</p>
  *
  * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
  *
  * <p>This method does not trim the input string, i.e., strings with leading
  * or trailing spaces will generate NumberFormatExceptions.</p>
  *
  * @param str  String containing a number, may be null
  * @return Number created from the string (or null if the input is null)
  * @throws NumberFormatException if the value cannot be converted
  */
 public static Number createNumber(String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }  
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear 
         // to be in specification of class. OS X Java parses it to 
         // a wrong value.
-            return null;
-        }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
-            return createInteger(str);
-        }   
-        char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
-
-        if (decPos > -1) {
-
-            if (expPos > -1) {
-                if (expPos < decPos || expPos > str.length()) {
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
-            }
-            mant = str.substring(0, decPos);
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) {
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
-            }
-            dec = null;
-        }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
-            }
-            //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
-                        try {
-                            return createLong(numeric);
-                        } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
-                        return createBigInteger(numeric);
-
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
-                    try {
-                        Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
-                        }
-
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
-                    try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
-                        }
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+        throw new NumberFormatException(str + " is not a valid number");
     }
+    if (isHexadecimal(str)) {
         try {
-                        return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                default :
-                    throw new NumberFormatException(str + " is not a valid number.");
-
+            int index = 0;
+            if (str.charAt(index) == '-') {
+                index++;
+            } else if (str.startsWith("-0x", StringComparison.IGNORE_CASE)) {
+                throw new NumberFormatException("negative hex numbers are allowed in '-0xformat', use '-0XHKK' instead");
             }
-        } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
-            }
-            if (dec == null && exp == null) {
-                //Must be an int,long,bigint
-                try {
+            int endIdx = index + 1 + str.indexOf('0x', StringComparison.IGNORE_CASE) + 2 + index;
+            String trimmableStr = index < endIdx? "0x" : StringUtils.trimToEmpty(str) ;
             return createInteger(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
-                try {
-                    return createLong(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
-                return createBigInteger(str);
-
-            } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-                try {
-                    Float f = createFloat(str);
-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                        return f;
-                    }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
-                try {
-                    Double d = createDouble(str);
-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                        return d;
-                    }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
-                }
-
-                return createBigDecimal(str);
-
-            }
-        }
-    }
+        }catch(Exception ex) {
+        throw new NumberFormatException((ex == null) ?  "invalid String number":ex.getMessage()+ ".number format should always contain numbers only after- 0x in either positive/negative.");
+                }        
+    }        // strip off 'negative 0xhex hex in front' only removing number with hex string or removing string hex part which start as '-0xn'.format
+
+    int max;
+    if ("false".equals(str.substring(str.indexOf("-"), Integer.valueOf(0))))
+             str.replace(str, '-');  // handle edge false and -f otherwise always will return numberException since there is always either two different strings like as the format -numberx otherwise two number always returns string in -hex so can handle to pass as 'Integer/Integer'.(parseIn(str, radix as: Integer.parseUnsignedLong instead 
+    max=-9;   //default string length 
+    do{       // we make only string in a special -'number string. which also be string at position-1  instead it was in loop statement -for. since now all 'loop as a 5 case is removed with number which only will keep remaining
+      if(!-char(str, "hasMinuxnumber")!=isMaxmin(str.substring(Math.toRadian(min as Long)), "hex 8min") 
+                          if (!-stringInNnumber(str,"contnumberchar"))||minIntegerInStringnumbercontMaxInteger(str)) < MIN_value(str, 'neg zero 0'))
+{
+return Long.parseLong(String.to unsignedString(string(str)));
+           }}  while((!(loopmax < (short maxnumber)) && (!(hasmorehex(str))))    ) //  keep while with radix with - number value keep removing all as int only one loop then 
+             throw new NumberExepFormat(str) :NumberInvalid(str); 
+
+...
+...
\ No newline at end of file
