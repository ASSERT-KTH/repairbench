diff --git a/tmp/d6ef7d27-efe2-46b9-8f38-a31be11caf15_buggy.java b/tmp/68b606cc-c0ba-40cf-94a7-7ab2df78c349_fixed.java
index 1530b34..231f9e4 100644
--- a/tmp/d6ef7d27-efe2-46b9-8f38-a31be11caf15_buggy.java
+++ b/tmp/68b606cc-c0ba-40cf-94a7-7ab2df78c349_fixed.java
@@ -1,23 +1,41 @@
 /**
  * Declares all of a function's arguments.
  */
 private void declareArguments(Node functionNode) {
   Node astParameters = functionNode.getFirstChild().getNext();
   Node body = astParameters.getNext();
   FunctionType functionType = (FunctionType) functionNode.getJSType();
   if (functionType!= null) {
     Node jsDocParameters = functionType.getParametersNode();
     if (jsDocParameters!= null) {
       Node jsDocParameter = jsDocParameters.getFirstChild();
       for (Node astParameter : astParameters.children()) {
         if (jsDocParameter!= null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
+          JSType paramType = jsDocParameter.getJSType();
+          defineSlot(astParameter, functionNode, paramType, true);
+          // Check for duplicate local var declarations
+          checkDuplicateLocalVarDecl(functionNode, astParameter, paramType);
           jsDocParameter = jsDocParameter.getNext();
         } else {
           defineSlot(astParameter, functionNode, null, true);
         }
       }
     }
   }
-    } // end declareArguments
+}
+
+// Add this new method to check for duplicate local var declarations
+private void checkDuplicateLocalVarDecl(Node functionNode, Node astParameter, JSType paramType) {
+  // Iterate through the function's body to find any local variable declarations
+  for (Node node : functionNode.getLastChild().children()) {
+    if (node instanceof VariableDeclaration) {
+      VariableDeclaration varDecl = (VariableDeclaration) node;
+      if (varDecl.getTarget().equals(astParameter.getString())) {
+        JSType localType = varDecl.getType();
+        if (localType!= null &&!localType.equals(paramType)) {
+          reportError("variable " + astParameter.getString() + " redefined with type " + localType.toString() + ", original definition at " + functionNode.getSourceFileName() + " : " + functionNode.getLineno() + " with type " + paramType.toString());
+        }
+      }
+    }
+  }
+}
\ No newline at end of file
