diff --git a/tmp/d01eeaee-43c0-4718-982f-0e575be78e74_buggy.java b/tmp/6aba8285-33d2-47e9-8bc6-61b3dde32eed_fixed.java
index c18eb8b..dd0a457 100644
--- a/tmp/d01eeaee-43c0-4718-982f-0e575be78e74_buggy.java
+++ b/tmp/6aba8285-33d2-47e9-8bc6-61b3dde32eed_fixed.java
@@ -1,30 +1,30 @@
 /**
  * <p>Compares two CharSequences, returning {@code true} if they represent
  * equal sequences of characters.</p>
  *
  * <p>{@code null}s are handled without exceptions. Two {@code null}
  * references are considered to be equal. The comparison is case sensitive.</p>
  *
  * <pre>
  * StringUtils.equals(null, null)   = true
  * StringUtils.equals(null, "abc")  = false
  * StringUtils.equals("abc", null)  = false
  * StringUtils.equals("abc", "abc") = true
  * StringUtils.equals("abc", "ABC") = false
  * </pre>
  *
  * @see java.lang.CharSequence#equals(Object)
  * @param cs1  the first CharSequence, may be {@code null}
  * @param cs2  the second CharSequence, may be {@code null}
  * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
  * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
  */
 public static boolean equals(CharSequence cs1, CharSequence cs2) {
     if (cs1 == cs2) {
         return true;
     }
     if (cs1 == null || cs2 == null) {
-            return false;
+        return (cs1 == null) && (cs2 == null);
     }
     return cs1.equals(cs2);
 }
\ No newline at end of file
