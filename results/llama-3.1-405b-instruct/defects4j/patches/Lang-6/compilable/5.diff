diff --git a/tmp/ee6da290-1c7d-4042-b223-777edab7ef0f_buggy.java b/tmp/d3f6f0ef-3edc-417e-9eee-83ede5503d47_fixed.java
index 4c1ed27..6393fe9 100644
--- a/tmp/ee6da290-1c7d-4042-b223-777edab7ef0f_buggy.java
+++ b/tmp/d3f6f0ef-3edc-417e-9eee-83ede5503d47_fixed.java
@@ -1,32 +1,29 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is 
  * tightly coupled with the abstract method of this class. 
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
             char[] c = Character.toChars(Character.codePointAt(input, pos));
             out.write(c);
             pos += c.length;
             continue;
         }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-            }
+        // Move pos forward by the actual number of characters consumed, not code points
+        pos += consumed;
     }
 }
\ No newline at end of file
