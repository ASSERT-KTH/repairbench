diff --git a/tmp/3ef6220a-7c3f-450f-8326-884ea003a210_buggy.java b/tmp/7b4f14f6-2c29-4acd-9388-3e916dcb5a1d_fixed.java
index fe73b81..c098b33 100644
--- a/tmp/3ef6220a-7c3f-450f-8326-884ea003a210_buggy.java
+++ b/tmp/7b4f14f6-2c29-4acd-9388-3e916dcb5a1d_fixed.java
@@ -1,42 +1,29 @@
-    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
-    {
+protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context) {
     final String name = type.getName();
-        // 19-Mar-2015: Without context, all we can check are bounds.
+    
     if (context == null) {
-            // And to prevent infinite loops, now need this:
         return _unknownType();
-        } else {
-            // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
+    }
+    
     JavaType actualType = context.findType(name);
     if (actualType!= null) {
         return actualType;
     }
-        }
 
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
     Type[] bounds = type.getBounds();
     
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
+    if (bounds == null || bounds.length == 0) {
+        // In this case Type variable has no bounds
+        // But it's necessary to find a placeholdeer to prevent infinite loops later on
+        context._addPlaceholder(name);
+        return _unknownType();
+    }
 
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
+    // Store type variable name for inner resolution of recursive bounds type.
     context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+    JavaType[] javaTypeParams = new JavaType[bounds.length];
+    for (int i = 0; i < bounds.length; i++) {
+        javaTypeParams[i] = _constructType(bounds[i], context);
+    }
+    return _binder.bind(type, _newTypeVariable(context.classKey, name, this._newWildcardType(context.classKey, javaTypeParams[0])));
 }
\ No newline at end of file
