diff --git a/tmp/5c1800f1-46c1-46e4-8849-b9eca5ea7cb9_buggy.java b/tmp/a3282f7c-1a29-4a3f-8ca7-c9392976efbd_fixed.java
index 7e64f1d..061e605 100644
--- a/tmp/5c1800f1-46c1-46e4-8849-b9eca5ea7cb9_buggy.java
+++ b/tmp/a3282f7c-1a29-4a3f-8ca7-c9392976efbd_fixed.java
@@ -1,78 +1,52 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
+        if ("--".equals(arg)) {
             eatTheRest = true;
             tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
+        } else if ("-".equals(arg)) {
             tokens.add("-");
-            }
-            else if (arg.startsWith("-"))
-            {
+        } else if (arg.startsWith("-")) {
             String opt = Util.stripLeadingHyphens(arg);
 
-                if (options.hasOption(opt))
-                {
+            if (options.hasOption(opt)) {
                 tokens.add(arg);
+            } else {
+                int pos = arg.indexOf('=');
+                if (pos!= -1) {
+                    String optName = arg.substring(0, pos);
+                    if (options.hasOption(optName)) {
+                        tokens.add(optName);
+                        tokens.add(arg.substring(pos + 1));
+                        continue;
                     }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
+                }
+
+                if (options.hasOption(arg.substring(0, 2))) {
                     // the format is --foo=value or -foo=value
                     // the format is a special properties option (-Dproperty=value)
                     tokens.add(arg.substring(0, 2)); // -D
                     tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
-                    {
+                } else {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
-            }
-            else
-            {
+        } else {
             tokens.add(arg);
         }
 
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+        if (eatTheRest) {
+            for (i++; i < arguments.length; i++) {
                 tokens.add(arguments[i]);
             }
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
