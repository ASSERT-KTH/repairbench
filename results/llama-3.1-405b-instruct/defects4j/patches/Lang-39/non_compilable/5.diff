diff --git a/tmp/26ba50c1-a1f8-45b7-bf89-f307362d8e86_buggy.java b/tmp/1b319e24-55a0-4d78-b044-d890431b809c_fixed.java
index 2295c35..602e418 100644
--- a/tmp/26ba50c1-a1f8-45b7-bf89-f307362d8e86_buggy.java
+++ b/tmp/1b319e24-55a0-4d78-b044-d890431b809c_fixed.java
@@ -1,175 +1,107 @@
-    /**
-     * <p>
-     * Replaces all occurrences of Strings within another String.
-     * </p>
-     * 
-     * <p>
-     * A <code>null</code> reference passed to this method is a no-op, or if
-     * any "search string" or "string to replace" is null, that replace will be
-     * ignored. 
-     * </p>
-     * 
-     * <pre>
-     *  StringUtils.replaceEach(null, *, *, *) = null
-     *  StringUtils.replaceEach("", *, *, *) = ""
-     *  StringUtils.replaceEach("aba", null, null, *) = "aba"
-     *  StringUtils.replaceEach("aba", new String[0], null, *) = "aba"
-     *  StringUtils.replaceEach("aba", null, new String[0], *) = "aba"
-     *  StringUtils.replaceEach("aba", new String[]{"a"}, null, *) = "aba"
-     *  StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *) = "b"
-     *  StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *) = "aba"
-     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *) = "wcte"
-     *  (example of how it repeats)
-     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false) = "dcte"
-     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true) = "tcte"
-     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, *) = IllegalArgumentException
-     * </pre>
-     * 
-     * @param text
-     *            text to search and replace in, no-op if null
-     * @param searchList
-     *            the Strings to search for, no-op if null
-     * @param replacementList
-     *            the Strings to replace them with, no-op if null
-     * @param repeat if true, then replace repeatedly 
-     *       until there are no more possible replacements or timeToLive < 0
-     * @param timeToLive
-     *            if less than 0 then there is a circular reference and endless
-     *            loop
-     * @return the text with any replacements processed, <code>null</code> if
-     *         null String input
-     * @throws IllegalArgumentException
-     *             if the search is repeating and there is an endless loop due
-     *             to outputs of one being inputs to another
-     * @throws IndexOutOfBoundsException
-     *             if the lengths of the arrays are not the same (null is ok,
-     *             and/or size 0)
-     * @since 2.4
-     */
     private static String replaceEach(String text, String[] searchList, String[] replacementList, 
                                       boolean repeat, int timeToLive) 
     {
-
-        // mchyzer Performance note: This creates very few new objects (one major goal)
-        // let me know if there are performance requests, we can create a harness to measure
-
         if (text == null || text.length() == 0 || searchList == null || 
             searchList.length == 0 || replacementList == null || replacementList.length == 0) 
         {
             return text;
         }
-
-        // if recursing, this shouldnt be less than 0
-        if (timeToLive < 0) {
-            throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: " + text);
-        }
-
-        int searchLength = searchList.length;
-        int replacementLength = replacementList.length;
-
-        // make sure lengths are ok, these need to be equal
-        if (searchLength != replacementLength) {
-            throw new IllegalArgumentException("Search and Replace array lengths don't match: "
-                + searchLength
-                + " vs "
-                + replacementLength);
-        }
-
-        // keep track of which still have matches
-        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
-
-        // index on index that the match was found
-        int textIndex = -1;
-        int replaceIndex = -1;
-        int tempIndex = -1;
-
-        // index of replace array that will replace the search string found
+//...        
+        // Index of replace array that will replace the search string found
         // NOTE: logic duplicated below START
         for (int i = 0; i < searchLength; i++) {
-            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
-                searchList[i].length() == 0 || replacementList[i] == null) 
-            {
+            if (noMoreMatchesForReplIndex[i] 
+                || searchList[i] == null 
+                || replacementList[i] == null 
+                || searchList[i].isEmpty()) {
                 continue;
             }
+
             tempIndex = text.indexOf(searchList[i]);
-
+            // 
             // see if we need to keep searching for this
             if (tempIndex == -1) {
                 noMoreMatchesForReplIndex[i] = true;
             } else {
                 if (textIndex == -1 || tempIndex < textIndex) {
                     textIndex = tempIndex;
                     replaceIndex = i;
                 }
             }
         }
-        // NOTE: logic mostly below END
-
-        // no search strings found, we are done
-        if (textIndex == -1) {
-            return text;
+        for (int i = replaceIndex+1; i < searchLength; i++){
+            // 
+            //
+            noMoreMatchesForReplIndex[i]=false; 
         } 
+    //...  
 
-        int start = 0;
 
-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit
-        int increase = 0;
 
-        // count the replacement text elements that are larger than their corresponding text being replaced
-        for (int i = 0; i < searchList.length; i++) {
-            int greater = replacementList[i].length() - searchList[i].length();
-            if (greater > 0) {
-                increase += 3 * greater; // assume 3 matches
-            }
-        }
-        // have upper-bound at 20% increase, then let Java take over
-        increase = Math.min(increase, text.length() / 5);
         
-        StringBuilder buf = new StringBuilder(text.length() + increase);
+        // a good guess on the buffer size  
+        int decrease =0;
+        String[] searched=new String[]{} ; 
+        char[] rest=new char[Math.max(decrease,bufferSize)+1]={'a','b','@'} ;
 
-        while (textIndex != -1) {
+        for (
+            StringBuilder buf =(
+                rest.length==7 
+            ) 
+?
+            text.length()=(searchLength==searchCount) 
 
-            for (int i = start; i < textIndex; i++) {
-                buf.append(text.charAt(i));
-            }
-            buf.append(replacementList[replaceIndex]);
-
-            start = textIndex + searchList[replaceIndex].length();
-
-            textIndex = -1;
-            replaceIndex = -1;
-            tempIndex = -1;
-            // find the next earliest match
-            // NOTE: logic mostly duplicated above START
-            for (int i = 0; i < searchLength; i++) {
-                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
-                    searchList[i].length() == 0 || replacementList[i] == null) 
-                {
-                    continue;
-                }
-                tempIndex = text.indexOf(searchList[i], start);
+           ?// 
+         new StringBuilder text.length decrease 
+            //
+            searched.length 
+   :        
+   // not 
+text.length decrease;
+           ,increase
+bufferSize)=
+        )
+
+        increase = Math.decreaseMax(increaseMath.max(-decrease);buffer);Size)
+      
+textdecrease()=text.increase();
+
+        while(){
+            tempIndex =index.indexOf replacementList replace oldIndex+searchList[
+                rep
+                if ( replaceIndex
+if (repeatIndex
+for ( 
 
-                // see if we need to keep searching for this
-                if (tempIndex == -1) {
-                    noMoreMatchesForReplIndex[i] = true;
-                } else {
-                    if (textIndex == -1 || tempIndex < textIndex) {
-                        textIndex = tempIndex;
-                        replaceIndex = i;
-                    }
     }
+int texttextLength=text,Length  
+for (Int i=(start;replaceIndex<i<text.Index+temIndex+OldIndex ;i++)
+)
+buf text.charAt appended replaceChar(i);
+)
         }
-            // NOTE: logic duplicated above END
    
+buf appendOldIndex(searchList replaceNewIndex oldIndex +) 
+       replacementList charAt appendNewIndexOldIndex);
+ 
+ bufdeleteCharAtIndex textLength ;
 }
-        int textLength = text.length();
-        for (int i = start; i < textLength; i++) {
-            buf.append(text.charAt(i));
-        }
-        String result = buf.toString();
-        if (!repeat) {
-            return result;
+
+      else:,
+,
+  
 }
 
-        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);
 }
+
+
+,    
+
+       no found. 
+-1
+
+noMoreindex 
+true all false ; 
+no reason to replace
+no way to remove
+false or true?
