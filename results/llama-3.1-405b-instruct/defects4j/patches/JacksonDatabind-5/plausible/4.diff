diff --git a/tmp/f409923f-a4a3-40ea-bbd2-b61e1b2d50fb_buggy.java b/tmp/e2ef9fb0-798e-42ba-b927-f4e8cbb2b7f9_fixed.java
index b2db1d6..cce61a4 100644
--- a/tmp/f409923f-a4a3-40ea-bbd2-b61e1b2d50fb_buggy.java
+++ b/tmp/e2ef9fb0-798e-42ba-b927-f4e8cbb2b7f9_fixed.java
@@ -1,29 +1,30 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
-                if (am != null) {
+            if (am == null) {
+                if (mixIns.find(m) == null) { // Only add if hasn't been added yet 
+                    mixIns.add(_constructMethod(m));
+                }
+            } else {
                 _addMixUnders(m, am);
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
-                } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
