diff --git a/tmp/a718215a-793e-42ee-b1d8-8758f8136a5f_buggy.java b/tmp/a36c2561-9a70-473b-845c-0633fee9d598_fixed.java
index 3127f85..f21fe43 100644
--- a/tmp/a718215a-793e-42ee-b1d8-8758f8136a5f_buggy.java
+++ b/tmp/a36c2561-9a70-473b-845c-0633fee9d598_fixed.java
@@ -1,24 +1,23 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+        if (Double.isInfinite(x)) {
+            return (x > 0)? 1 : 0;
+        } else if (Math.abs(dev) > 40 * standardDeviation) {
+            return (dev < 0)? 0 : 1;
+        }
         try {
             return 0.5 * (1.0 + Erf.erf((dev) /
                         (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+            throw new ConvergenceException(ex.getLocalizedMessage(), ex.getMax(), x);
         }
     }
