diff --git a/tmp/ba0d0d16-514f-49a1-a662-1112c49384a3_buggy.java b/tmp/13edc298-a6b1-4151-8b05-fb9c352020f7_fixed.java
index 1a63a66..442cd50 100644
--- a/tmp/ba0d0d16-514f-49a1-a662-1112c49384a3_buggy.java
+++ b/tmp/13edc298-a6b1-4151-8b05-fb9c352020f7_fixed.java
@@ -1,21 +1,47 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
         // TODO: fix in 2.8
+        if (!_class.isAssignableFrom(subclass)) {
             /*
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
                     */
             return new SimpleType(subclass, _bindings, this, _superInterfaces,
                     _valueHandler, _typeHandler, _asStatic);
+        }
         // Otherwise, stitch together the hierarchy. First, super-class
+        Class<?> next = subclass.getSuperclass();
+        if (next == _class) { // straight up parent class? Great.
+            return new SimpleType(subclass, _bindings, this,
+                    _superInterfaces, _valueHandler, _typeHandler, _asStatic);
+        }
+        if ((next != null) && _class.isAssignableFrom(next)) {
+            JavaType superb = _narrow(next);
+            return new SimpleType(subclass, _bindings, superb,
+                    null, _valueHandler, _typeHandler, _asStatic);
+        }
         // if not found, try a super-interface
+        Class<?>[] nextI = subclass.getInterfaces();
+        for (Class<?> iface : nextI) {
+            if (iface == _class) { // directly implemented
+                return new SimpleType(subclass, _bindings, null,
+                        new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic);
+            }
+            if (_class.isAssignableFrom(iface)) { // indirect, so recurse
+                JavaType superb = _narrow(iface);
+                return new SimpleType(subclass, _bindings, null,
+                        new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic);
+            }
+        }
         // should not get here but...
+        throw new IllegalArgumentException("Internal error: Can not resolve sub-type for Class "+subclass.getName()+" to "
+                +_class.getName());
     }
