diff --git a/tmp/bc0a4018-6733-45fe-be4f-97c2bcca45f1_buggy.java b/tmp/bd13abb7-05a9-41f8-9c52-4dbac281f05e_fixed.java
index 4b163f6..1263859 100644
--- a/tmp/bc0a4018-6733-45fe-be4f-97c2bcca45f1_buggy.java
+++ b/tmp/bd13abb7-05a9-41f8-9c52-4dbac281f05e_fixed.java
@@ -1,28 +1,35 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
+            // fall back to using read() if skip() couldn't skip any bytes
+            if (input.read()!= -1) {
+                numToSkip--;
+            } else {
+                // reached the end of the stream, stop trying to skip
                 break;
             }
+        } else {
             numToSkip -= skipped;
         }
+    }
 
     return available - numToSkip;
 }
\ No newline at end of file
