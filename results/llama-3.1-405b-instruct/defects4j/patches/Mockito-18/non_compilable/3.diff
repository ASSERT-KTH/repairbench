diff --git a/tmp/7879a428-b31e-4913-936b-c430b0e4ad30_buggy.java b/tmp/5a23d045-0230-4449-9d85-f6d2a3927fd0_fixed.java
index 710fcc0..a079825 100644
--- a/tmp/7879a428-b31e-4913-936b-c430b0e4ad30_buggy.java
+++ b/tmp/5a23d045-0230-4449-9d85-f6d2a3927fd0_fixed.java
@@ -1,37 +1,12 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
-            return new LinkedList<Object>();
-        } else if (type == Set.class) {
-            return new HashSet<Object>();
-        } else if (type == HashSet.class) {
-            return new HashSet<Object>();
-        } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
-        } else if (type == List.class) {
-            return new LinkedList<Object>();
-        } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
-        } else if (type == ArrayList.class) {
-            return new ArrayList<Object>();
-        } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == TreeMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
+    } else if (Iterable.class.isAssignableFrom(type)) {
+        return Collections.emptyList();
+    } else if (Map.class.isAssignableFrom(type)) {
+        return Collections.emptyMap();
+    } else if (Set.class.isAssignableFrom(type)) {
+        return Collections.emptySet();
     }
-        //Let's not care about the rest of collections.
     return null;
 }
\ No newline at end of file
