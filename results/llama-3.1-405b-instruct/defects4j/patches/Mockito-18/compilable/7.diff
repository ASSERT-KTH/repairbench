diff --git a/tmp/5a146076-d4a2-4185-8f42-9fb76a45ec88_buggy.java b/tmp/b6000e5c-0731-410a-be12-16ef88327097_fixed.java
index 710fcc0..f9e5400 100644
--- a/tmp/5a146076-d4a2-4185-8f42-9fb76a45ec88_buggy.java
+++ b/tmp/b6000e5c-0731-410a-be12-16ef88327097_fixed.java
@@ -1,37 +1,11 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
+    } else if (Iterable.class.isAssignableFrom(type)) {
         return new LinkedList<Object>();
-        } else if (type == Set.class) {
-            return new HashSet<Object>();
-        } else if (type == HashSet.class) {
-            return new HashSet<Object>();
-        } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
-        } else if (type == List.class) {
-            return new LinkedList<Object>();
-        } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
-        } else if (type == ArrayList.class) {
-            return new ArrayList<Object>();
-        } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == HashMap.class) {
+    } else if (Map.class.isAssignableFrom(type)) {
         return new HashMap<Object, Object>();
-        } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == TreeMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
     }
-        //Let's not care about the rest of collections.
+    //Let's not care about the rest of types.
     return null;
 }
\ No newline at end of file
