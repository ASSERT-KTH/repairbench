diff --git a/tmp/15190ebd-2dfe-47d4-8fac-a5828b813157_buggy.java b/tmp/741e50aa-4d0b-4f1b-a2fd-812252296d8f_fixed.java
index fb2b020..2ee1e73 100644
--- a/tmp/15190ebd-2dfe-47d4-8fac-a5828b813157_buggy.java
+++ b/tmp/741e50aa-4d0b-4f1b-a2fd-812252296d8f_fixed.java
@@ -1,27 +1,27 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
   // We only want to match contraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
              .getLeastSupertype(propType);
         }
-          defineInferredProperty(prop, typeToInfer, null);
+        defineInferredProperty(prop, typeToInfer, /* isOptional */ true);
       }
     }
   }
 }
\ No newline at end of file
