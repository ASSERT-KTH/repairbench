diff --git a/tmp/7d7da24a-cffa-43bc-a6b6-b4c4640d1835_buggy.java b/tmp/657968d3-2590-4cf5-adbb-bc293e8f7b87_fixed.java
index fb2b020..ca3d770 100644
--- a/tmp/7d7da24a-cffa-43bc-a6b6-b4c4640d1835_buggy.java
+++ b/tmp/657968d3-2590-4cf5-adbb-bc293e8f7b87_fixed.java
@@ -1,27 +1,29 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   // 
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
+      JSType existingType = getPropertyType(prop);
+      if (existingType == null) {
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+          propType = getNativeType(JSTypeNative.VOID_TYPE)
              .getLeastSupertype(propType);
         }
-          defineInferredProperty(prop, typeToInfer, null);
+        defineInferredProperty(prop, propType, null);
+      } else {
+        setType(prop, existingType.getLeastSupertype(propType));
       }
     }
   }
 }
\ No newline at end of file
