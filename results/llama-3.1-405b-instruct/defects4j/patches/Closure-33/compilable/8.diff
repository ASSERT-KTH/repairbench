diff --git a/tmp/1f428245-6a01-4f13-b798-891200995b80_buggy.java b/tmp/29497a6e-557f-44b5-9e6b-c55f7d543e87_fixed.java
index fb2b020..9766569 100644
--- a/tmp/1f428245-6a01-4f13-b798-891200995b80_buggy.java
+++ b/tmp/29497a6e-557f-44b5-9e6b-c55f7d543e87_fixed.java
@@ -1,27 +1,32 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
   // We only want to match contraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
              .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
+      } else {
+        JSType existingPropType = getPropertyType(prop);
+        if (!existingPropType.isSubtype(propType)) {
+          defineInferredProperty(prop, existingPropType.getLeastSupertype(propType), null);
+        }
       }
     }
   }
 }
\ No newline at end of file
