diff --git a/tmp/bf252808-2e99-47bc-a3a5-8bde7cb526c4_buggy.java b/tmp/f5037927-f0d0-453f-826b-e255e2783222_fixed.java
index 14b78fb..dc8fd7e 100644
--- a/tmp/bf252808-2e99-47bc-a3a5-8bde7cb526c4_buggy.java
+++ b/tmp/f5037927-f0d0-453f-826b-e255e2783222_fixed.java
@@ -1,56 +1,47 @@
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
+        int maxPos = startPos + width;
 
         // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        int pos = text.indexOf('\n', startPos);
+        if (pos >= 0 && pos < maxPos)
         {
             return pos + 1;
         }
-        else if (startPos + width >= text.length())
+        pos = text.indexOf('\t', startPos);
+        if (pos >= 0 && pos < maxPos)
+        {
+            return pos + 1;
+        }
+        else if (maxPos >= text.length())
         {
             return -1;
         }
 
 
         // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+        pos = maxPos;
 
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
+        // if we didn't start at the beginning of text, then we must use the
+        // beginning of text as our base
+        if (maxPos > text.length() - 1)
+            pos = text.length();
+        while ((pos >= startPos) && ((c = text.charAt(pos-1))!= ' ') && (c!= '\n') && (c!= '\r'))
             --pos;
-        }
 
-        // if we found it - just return
-        if (pos > startPos)
-        {
         return pos;
     }
\ No newline at end of file
-        
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
-    }
