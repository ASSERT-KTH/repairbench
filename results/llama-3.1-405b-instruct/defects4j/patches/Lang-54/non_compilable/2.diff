diff --git a/tmp/97c05daf-3b5f-47e4-912a-c12db4853981_buggy.java b/tmp/9065dfeb-7506-479d-bd7c-a8a1c3267a75_fixed.java
index 90fe130..63760cb 100644
--- a/tmp/97c05daf-3b5f-47e4-912a-c12db4853981_buggy.java
+++ b/tmp/9065dfeb-7506-479d-bd7c-a8a1c3267a75_fixed.java
@@ -1,61 +1,81 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        if (len < 2 || len == 3 || len == 4 || (len > 5 && (str.charAt(2)!= '_' || str.charAt(5)!= '_'))) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        if (len == 2) {
-            return new Locale(str, "");
-        } else {
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+        if (len == 2 || str.charAt(2)!= '_') {
+            if (str.length() >= 4 && str.charAt(2) == '_' && str.charAt(3) == '_') {
+                // we have the new _ _, not xx_yy_
+                if (str.length() > 4 && (str.substring(4).isEmpty() || (str.charAt(4) < 'a' || str.charAt(4) > 'z' && str.charAt(4) < 'A' || str.charAt(4) > 'Z'))) {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
                 } else {
-                if (str.charAt(5) != '_') {
-                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                    return new Locale(str.substring(0, 2), "", str.substring(4));
                 }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
             }
+            if (str.length()!= 2 || str.substring(2).isEmpty() ||!isValidVariant(str.substring(2))) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            } else {
+                return new Locale(str.substring(0, 2), "", str.substring(2));
             }
         }
+        if (str.charAt(3)!= '_') {
+            // then maybe of the "zh_HK" shape.
+            String country = str.substring(3, 5);
+            String varPart = str.substring(5);
+            String varFirstChar = str.substring(5, 6);
+
+            // varPart needs to match something like zh_CN_AW
+            // therefore this part, as variant could be there,
+            // or no char to fill the void if "normal" en, US pair.
+            // first: if of len zero no need. Else char or more
+
+            // need to figure what can lead to illegal args to 
+            // ensure "throw IllegalArgumentException 
+            // that follows"
+            if (
+                    str.charAt(4)!= '_'
+                    || len >= 5
+                    || country == ""
+                    || str.length() < 7 // no place left
+            )
+            {  
+                String varCheck = "  ";
+                varCheck=varFirstChar+" _";
+                varFirstChar = (len== 7)?  "" : (str.length()== 8? ( str.substring(5)):_emptySpaceIfIndexGreater(str.substring(7))) ;
+                String[] vals = country.split(varFirstChar);
+                country=  vals[0]; if (str.substring(6).startsWith("   "))
+                {
+
+                country="fr ";}
+                return (checkIfSecondParamMustIncludeThirdToConstitute(str)?
+                        //if only this part does lead to throwing: then just get what of this param does hold truth.
+                    //now also if str ==_ at index zero; get other and add up both!
+                 new Locale(    new Locale("").getCountry( ).replace(str,"hk").toString( ),
+            //so inital:  //return: use the _ then in middle!
+                    ""  ," "+varFirstChar 
+//                   ,
+                  ).getLanguage().
+                        split(
+                 splitToHaveLastAtSplitIndex1
+                  ,
+                 ("  ,")
+
+                 )) . replace("de  ")("de"):
+                  str.
+                  subSequence(str.subSequence
+                  .chars()
+                       ). 
+                          chars 
+                       :str;
+           //since last did error, should see at test 329; or
+           Locale("",   ).getScript
+
+         }) 
\ No newline at end of file
