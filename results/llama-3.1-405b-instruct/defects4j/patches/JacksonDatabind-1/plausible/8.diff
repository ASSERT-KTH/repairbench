diff --git a/tmp/43a0bbbf-af0e-4402-8ecc-33ad121b552b_buggy.java b/tmp/b18d98c0-c27b-44cd-80dd-60d91e27529e_fixed.java
index dbadad4..7fcfeb7 100644
--- a/tmp/43a0bbbf-af0e-4402-8ecc-33ad121b552b_buggy.java
+++ b/tmp/b18d98c0-c27b-44cd-80dd-60d91e27529e_fixed.java
@@ -1,50 +1,44 @@
     /**
      * Alternative to {@link #serializeAsField} that is used when a POJO
      * is serialized as JSON Array; the difference is that no field names
      * are written.
      * 
      * @since 2.1
      */
     public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
         throws Exception
     {
         Object value = get(bean);
         if (value == null) { // nulls need specialized handling
-            if (_nullSerializer != null) {
-                _nullSerializer.serialize(null, jgen, prov);
-            } else { // can NOT suppress entries in tabular output
             jgen.writeNull();
-            }
-        }
-        // otherwise find serializer to use
+        } else {
             JsonSerializer<Object> ser = _serializer;
             if (ser == null) {
                 Class<?> cls = value.getClass();
                 PropertySerializerMap map = _dynamicSerializers;
                 ser = map.serializerFor(cls);
                 if (ser == null) {
                     ser = _findAndAddDynamic(map, cls, prov);
                 }
             }
             // and then see if we must suppress certain values (default, empty)
             if (_suppressableValue!= null) {
                 if (MARKER_FOR_EMPTY == _suppressableValue) {
-                if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
-                    serializeAsPlaceholder(bean, jgen, prov);
+                    if (ser.isEmpty(value)) { 
                         return;
                     }
-            } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
-                serializeAsPlaceholder(bean, jgen, prov);
+                } else if (_suppressableValue.equals(value)) {
                     return;
                 }
             }
             // For non-nulls: simple check for direct cycles
             if (value == bean) {
                 _handleSelfReference(bean, ser);
             }
             if (_typeSerializer == null) {
                 ser.serialize(value, jgen, prov);
             } else {
                 ser.serializeWithType(value, jgen, prov, _typeSerializer);
             }
         }
+    }
