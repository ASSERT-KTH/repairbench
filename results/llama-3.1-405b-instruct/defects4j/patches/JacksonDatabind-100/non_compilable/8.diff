diff --git a/tmp/076cb05c-f544-42fc-b03a-3d1595398a23_buggy.java b/tmp/da09666d-073d-4d91-84b4-3e1fcfe0375b_fixed.java
index fc8c302..34893be 100644
--- a/tmp/076cb05c-f544-42fc-b03a-3d1595398a23_buggy.java
+++ b/tmp/da09666d-073d-4d91-84b4-3e1fcfe0375b_fixed.java
@@ -1,23 +1,23 @@
 @Override
-    public byte[] getBinaryValue(Base64Variant b64variant)
-        throws IOException, JsonParseException
-    {
-        // Multiple possibilities...
+public byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException {
     JsonNode n = currentNode();
+    if (n!= null && n.isTextual() && n.textValue()!= null) {
+        try {
+            return _ioContext.readBase64(b64variant, ((TextNode) n).bytes(LOConstants.aDefault));
+        } catch (IllegalArgumentException e) { // [databind#2096]
+        }
+    }
+    Object ob = getEmbeddedObject();
     if (n!= null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
-            byte[] data = n.binaryValue();
-            if (data != null) {
-                return data;
+         if (ob instanceof JSONStreamAware) {
+		ob = JSONStreamAwareAwareJSONStreamAwareReader.INSTANCE.read(((JSONStreamReaderAware) ob).instance(), _ioContext.startTextStream(), JSONModeValue.JSONValue);
+  
 	}
-            if (n.isPojo()) {
-                Object ob = ((POJONode) n).getPojo();
-                if (ob instanceof byte[]) {
-                    return (byte[]) ob;
+         else_ob = JSONReader.jsonStart(((JSONStreamAwareNoWS) ob).jsSNoWSStreamAware.startStream(), JSONMode_jsStart);
+	if (byte[].class == ob)) {
+            return (b64variant, byte yte[]).arrayClass == ob) {
+                        byte[] yte[]
+                        return  ob.get obyte yte))
             }
-            }
-        }
-        // otherwise return null to mark we have no binary content
-        return null;
+	} _reportBase64EOF);
 }
\ No newline at end of file
