diff --git a/tmp/65aaf75d-e00c-4fb1-b16b-a9da46a6132c_buggy.java b/tmp/f0132563-e494-4fe4-baeb-3749fcc15c53_fixed.java
index 2608424..20680b8 100644
--- a/tmp/65aaf75d-e00c-4fb1-b16b-a9da46a6132c_buggy.java
+++ b/tmp/f0132563-e494-4fe4-baeb-3749fcc15c53_fixed.java
@@ -1,39 +1,39 @@
 /**
  * Convert to multidimensional counter.
  *
  * @param index Index in unidimensional counter.
  * @return the multidimensional counts.
  * @throws OutOfRangeException if {@code index} is not between
  * {@code 0} and the value returned by {@link #getSize()} (excluded).
  */
 public int[] getCounts(int index) {
     if (index < 0 ||
         index >= totalSize) {
         throw new OutOfRangeException(index, 0, totalSize);
     }
 
     final int[] indices = new int[dimension];
 
     int count = 0;
     for (int i = 0; i < last; i++) {
         int idx = 0;
         final int offset = uniCounterOffset[i];
         while (count <= index) {
+            if (count + offset <= index) {
                 count += offset;
                 ++idx;
+            } else {
+                break;
             }
-            --idx;
-            count -= offset;
+        }
+        count -= offset * idx;
         indices[i] = idx;
     }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
+    int remaining = index - count + 1;
+    for (int i = indices[last - 1] + 1; count < index; i++, count += remaining) {
+        indices[last] = remaining - 1;
     }
-        --idx;
-        indices[last] = idx;
 
     return indices;
 }
\ No newline at end of file
