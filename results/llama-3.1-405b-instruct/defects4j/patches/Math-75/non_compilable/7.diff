diff --git a/tmp/67310862-a240-46e9-af77-b1a68ea6b487_buggy.java b/tmp/b8b80c27-cdae-4096-94f5-86718e3b31e7_fixed.java
index 877a1a1..7c9e77c 100644
--- a/tmp/67310862-a240-46e9-af77-b1a68ea6b487_buggy.java
+++ b/tmp/b8b80c27-cdae-4096-94f5-86718e3b31e7_fixed.java
@@ -1,14 +1,24 @@
 /**
  * Returns the percentage of values that are equal to v
  * (as a proportion between 0 and 1).
  * <p>
  * Returns <code>Double.NaN</code> if no values have been added.</p>
  *
  * @param v the value to lookup
  * @return the proportion of values equal to v
  * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
  */
 @Deprecated
 public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+    return getCumPct((Comparable<?>) v) - getCumPctLessThan((Comparable<?>) v);
+}
+
+// If getCumPctLessThan method does not exist, it can be implemented like this:
+private double getCumPctLessThan(Comparable<?> v) {
+    int index = findIndex((Comparable<?>) v);
+    return (index < 0)? 0.0d : (index / (double) getSumFreq());
+}
+
+private int findIndex(Comparable<?> v) {
+    // Implementation depends on your internal data structure
 }
\ No newline at end of file
