diff --git a/tmp/9b658a4e-a981-4179-a138-5e7565f1ceab_buggy.java b/tmp/ef533458-b3af-4a93-91f2-7a654de0347f_fixed.java
index be2af16..500f8fa 100644
--- a/tmp/9b658a4e-a981-4179-a138-5e7565f1ceab_buggy.java
+++ b/tmp/ef533458-b3af-4a93-91f2-7a654de0347f_fixed.java
@@ -1,29 +1,37 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase())!= null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
+    try {
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
+    } catch (IllegalFieldValueException e) {
         // Maybe it's Julian.
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
+        return instant;
+    }
+    if (instant < iCutoverMillis) {
+        // Okay, date is definitely in the Julian period
+        return iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
     return instant;
 }
\ No newline at end of file
