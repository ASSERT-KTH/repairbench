diff --git a/tmp/11b586e1-cea1-411f-ad68-734139ed7e21_buggy.java b/tmp/66d56ff6-50ce-4537-9f51-b80a6b8a5f04_fixed.java
index be2af16..212f8da 100644
--- a/tmp/11b586e1-cea1-411f-ad68-734139ed7e21_buggy.java
+++ b/tmp/66d56ff6-50ce-4537-9f51-b80a6b8a5f04_fixed.java
@@ -1,29 +1,36 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase())!= null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
+    try {
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
             // Maybe it's Julian.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
         }
+    } catch (IllegalFieldValueException e) {
+        // Maybe it's Julian.
+        instant = iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    }
     return instant;
 }
\ No newline at end of file
