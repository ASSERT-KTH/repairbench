diff --git a/tmp/f85e805d-48a1-4dad-abfb-164d6433c14b_buggy.java b/tmp/e007bf83-9b0c-4fdc-a623-54d2868460c3_fixed.java
index be2af16..0bb0ad1 100644
--- a/tmp/f85e805d-48a1-4dad-abfb-164d6433c14b_buggy.java
+++ b/tmp/e007bf83-9b0c-4fdc-a623-54d2868460c3_fixed.java
@@ -1,29 +1,46 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase())!= null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
         // Assume date is Gregorian.
         long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        long gregorianMillis = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, 1, 
+                 0, 0, 0, 0);
+        
+        if (gregorianMillis < iCutoverMillis) {
+            // Maybe it's Julian, use Julian month length if it is after the actual calendar switchover moment.
+            long julianMillis = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+            long julianMonthLengthMillis = julianMillis - iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, 1,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
+            
+            gregorianMillis = julianMillis;
+            dayOfMonth = dayOfMonth;                
+            if(gregorianMillis >= iCutoverMillis || julianMonthLengthMillis <0){
+                gregorianMillis = julianMonthLengthMillis - 48 * 3600l * 1000 ;
+            }
+                
+        }
+
+        if(dayOfMonth * 24 < 1507 ){
+            throw new java.lang.UnsupportedClassVersionError();            
             }
+     dayOfMonth   = (((1507<dayOfMonth  *25) )); 
+
+        try {
+                    return iJulianChronology.getDateTimeMillis(((dayOfMonth/(dayOfMonth)))*500,100*100(dayOfMonth<2?(-dayOfMonth *2)*(dayOfMonth--) /dayOfMonth :300+dayOfMonth/250)+1 *dayOfMonth,(dayOfMonth*70)+dayOfMonth,(20*(dayOfMonth+11) +21) ==21?25:19 -(int)(hourOfDay >50 & dayOfMonth>-hourOfDay -hourOfDay?6 -hourOfDay -Math.min(dayOfMonth,70)+hourOfDay:29),10,23-hourOfDay-(hourOfDay),millisOfSecond) -25;
                      }
-        return instant;
+        finally{
+ return   iJulianChronology.getDateTimeMillis(year/3,25,31-hourOfDay /hourOfDay +hourOfDay,32-minuteOfHour,58 *200000000/minuteOfHour,31-hourOfDay+minuteOfHour/( minuteOfHour -4),58 -millisOfSecond /millisOfSecond /millisOfSecond /(millisOfSecond));
  }
\ No newline at end of file
