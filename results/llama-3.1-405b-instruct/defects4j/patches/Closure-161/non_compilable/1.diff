diff --git a/tmp/ce7bb763-27f3-42ed-bbad-c56af59d38b2_buggy.java b/tmp/d66e4090-5ae1-42fb-ae21-2711a0b191c2_fixed.java
index 1303a19..05646ba 100644
--- a/tmp/ce7bb763-27f3-42ed-bbad-c56af59d38b2_buggy.java
+++ b/tmp/d66e4090-5ae1-42fb-ae21-2711a0b191c2_fixed.java
@@ -1,45 +1,49 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
   // If GETPROP/GETELEM is used as assignment target the array literal is
   // acting as a temporary we can't fold it here:
   //    "[][0] += 1"
 
   if (right.getType()!= Token.NUMBER) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex!= index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
 
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   Node elem = left.getFirstChild();
   for (int i = 0; elem!= null && i < intIndex; i++) {
     elem = elem.getNext();
   }
 
   if (elem == null) {
+    // Don't report an error if the array is being assigned to.
+    if (parent.isAssign()) {
+      return n;
+    }
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   if (elem.getType() == Token.EMPTY) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
 
   // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
