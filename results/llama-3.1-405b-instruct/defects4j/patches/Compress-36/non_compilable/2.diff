diff --git a/tmp/78a9e53a-6b95-443e-bd1d-13620f63253b_buggy.java b/tmp/6a5259eb-6e95-421e-9eaf-b5c0decd6494_fixed.java
index d357c7e..d33ba31 100644
--- a/tmp/78a9e53a-6b95-443e-bd1d-13620f63253b_buggy.java
+++ b/tmp/6a5259eb-6e95-421e-9eaf-b5c0decd6494_fixed.java
@@ -1,16 +1,23 @@
 private InputStream getCurrentStream() throws IOException {
-        if (deferredBlockStreams.isEmpty()) {
+    if (deferredBlockStreams.isEmpty() &&!hasMoreEntries()) {
         throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
     }
-        
+    // No need to uncompress the whole solidly compressed archive if the test
+    // for 'hasMoreEntries' below has determined there is one
+    if (!hasMoreEntries() &&!deferredBlockStreams.isEmpty()) {
+        IOUtils.skip(deferredBlockStreams.get(0), Long.MAX_VALUE);
+        deferredBlockStreams.remove(0).close();
+    }
     while (deferredBlockStreams.size() > 1) {
         // In solid compression mode we need to decompress all leading folder'
         // streams to get access to an entry. We defer this until really needed
         // so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
         IOUtils.skip(stream, Long.MAX_VALUE);
         stream.close();
     }
-
+    if (!deferredBlockStreams.isEmpty()) {
         return deferredBlockStreams.get(0);
     }
+    throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+}
\ No newline at end of file
