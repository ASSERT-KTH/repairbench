diff --git a/tmp/7dd9af77-1373-42d1-8c34-12edda27add9_buggy.java b/tmp/40012b49-dfba-4b08-a4fc-b3b3564fbb41_fixed.java
index dc93be3..8b32943 100644
--- a/tmp/7dd9af77-1373-42d1-8c34-12edda27add9_buggy.java
+++ b/tmp/40012b49-dfba-4b08-a4fc-b3b3564fbb41_fixed.java
@@ -1,14 +1,23 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (Tag.isKnownTag(startTag.name())) {  // handle known tags like div, script specially.
+            Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+            insert(el);
+            stack.add(el);
+            tokeniser.emit(new Token.EndTag(el.tagName()));  // force the end tag in parser. emitted for yielded processing.
+            return el;
+        } else {
             Element el = insertEmpty(startTag);
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing.
             return el;
         }
-        
+    }
+    // same as before, remove and insert the new elements and append to stack 
+    // if the nextTag on stack is not correct it calls the insert process as described in the loop and process 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
