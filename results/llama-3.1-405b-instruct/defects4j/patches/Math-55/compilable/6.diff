diff --git a/tmp/85fb2145-727a-4082-8eb8-61a6e994b63f_buggy.java b/tmp/bcd958e3-7b24-4c4b-8a5c-1e244b314e54_fixed.java
index 1478ee1..3aa54c3 100644
--- a/tmp/85fb2145-727a-4082-8eb8-61a6e994b63f_buggy.java
+++ b/tmp/bcd958e3-7b24-4c4b-8a5c-1e244b314e54_fixed.java
@@ -1,24 +1,27 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
 
     // we reduce cancellation errors by preconditioning,
     // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
     // v3 without loss of precision. See Kahan lecture
     // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+    double norm2 = v2.getX() * v2.getX() + v2.getY() * v2.getY() + v2.getZ() * v2.getZ();
+    double rho   = (v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ()) / norm2;
+    double v3X   = v1.getX() - rho * v2.getX();
+    double v3Y   = v1.getY() - rho * v2.getY();
+    double v3Z   = v1.getZ() - rho * v2.getZ();
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(v3Y * v2.getZ() - v3Z * v2.getY(),
+                        v3Z * v2.getX() - v3X * v2.getZ(),
+                        v3X * v2.getY() - v3Y * v2.getX());
 }
\ No newline at end of file
