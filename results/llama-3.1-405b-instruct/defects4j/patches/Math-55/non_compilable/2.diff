diff --git a/tmp/9e9fca58-90ee-4399-a326-98f25c23ae3c_buggy.java b/tmp/24491f13-cf60-4b91-8cc6-92e98c8846dc_fixed.java
index 1478ee1..65b7d31 100644
--- a/tmp/9e9fca58-90ee-4399-a326-98f25c23ae3c_buggy.java
+++ b/tmp/24491f13-cf60-4b91-8cc6-92e98c8846dc_fixed.java
@@ -1,24 +1,19 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
+    // compute a value for rho as described in Kahan lecture notes
+    // http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    double normv1 = v1.norm();
+    double normv2 = v2.norm();
+    if (normv1 < 0.1 * normv2) {
+        double alpha = 0.5 * v1.dotProduct(v2);
+        Vector3D u2  = new Vector3D(alpha / normv2, v2);
+        Vector3D u3  = new Vector3D(v1, u2);
+        return u3.crossProduct(v2);
+    } else {
         return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    }
 }
\ No newline at end of file
