diff --git a/tmp/6fd8c748-fe19-4f2b-8f18-758f012db951_buggy.java b/tmp/22b5ab8e-ba6b-4e0e-bac7-f1c2300400d6_fixed.java
index 1478ee1..cf1865c 100644
--- a/tmp/6fd8c748-fe19-4f2b-8f18-758f012db951_buggy.java
+++ b/tmp/22b5ab8e-ba6b-4e0e-bac7-f1c2300400d6_fixed.java
@@ -1,24 +1,27 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      double v2NormSq = v2.dotProduct(v2);
+      double v1DotV2  = v1.dotProduct(v2);
+      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      double rho = v2NormSq!= 0? (v1DotV2 / v2NormSq) * 256 : 0;
 
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+      double v1x = v1.x - (rho / 256) * v2.x;
+      double v1y = v1.y - (rho / 256) * v2.y;
+      double v1z = v1.z - (rho / 256) * v2.z;
 
       // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      return new Vector3D(v1y * v2.z - v1z * v2.y,
+                          v1z * v2.x - v1x * v2.z,
+                          v1x * v2.y - v1y * v2.x);
 
   }
\ No newline at end of file
