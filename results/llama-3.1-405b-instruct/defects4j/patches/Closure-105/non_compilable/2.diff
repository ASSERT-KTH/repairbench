diff --git a/tmp/fda603db-5b61-47ea-a2c7-407d58b9d76e_buggy.java b/tmp/25db1344-7765-4d36-9912-fb8c16bbc248_fixed.java
index ef65dd9..f06d8e8 100644
--- a/tmp/fda603db-5b61-47ea-a2c7-407d58b9d76e_buggy.java
+++ b/tmp/25db1344-7765-4d36-9912-fb8c16bbc248_fixed.java
@@ -1,92 +1,102 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) ||!NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType()!= Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem!= null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType()!= Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+          if (!arrayFoldedChildren.get(0).getString().equals("") ||!arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getString().equals("")) {
             return;
           }
+          for (int i = 1; i < arrayFoldedChildren.size() - 1; i++) {
+            if (arrayFoldedChildren.get(i).getString().equals("")) {
+              Node foldedStringNode = arrayFoldedChildren.get(i);
+              Node previous = arrayFoldedChildren.get(i - 1);
+              arrayFoldedChildren.set(i - 1, new Node(Token.ADD,
+                  previous, new Node(Token.ADD, Node.newString(","), foldedStringNode)));
+              arrayFoldedChildren.remove(i);
+              i--;
+            }
+          }
+          foldedSize += InlineCostEstimator.getCost(arrayFoldedChildren.get(0));
+        }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
