diff --git a/tmp/cf19c2d8-1c25-49b3-b0fa-c1b134988d1e_buggy.java b/tmp/b5a3c778-ab49-4182-9c8b-72d7a847ebc4_fixed.java
index 0f439b3..7dce942 100644
--- a/tmp/cf19c2d8-1c25-49b3-b0fa-c1b134988d1e_buggy.java
+++ b/tmp/b5a3c778-ab49-4182-9c8b-72d7a847ebc4_fixed.java
@@ -1,38 +1,42 @@
 /**
  * Reads bytes from the current tar archive entry.
  *
  * This method is aware of the boundaries of the current
  * entry in the archive and will deal with them as if they
  * were this stream's start and EOF.
  *
  * @param buf The buffer into which to place bytes read.
  * @param offset The offset at which to place bytes read.
  * @param numToRead The number of bytes to read.
  * @return The number of bytes read, or -1 at EOF.
  * @throws IOException on error
  */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
     int totalRead = 0;
 
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
     numToRead = Math.min(numToRead, available());
     
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
-        if (totalRead == -1) {
-            hasHitEOF = true;
+    int bytesRead = is.read(buf, offset, numToRead);
+    if (bytesRead == -1) {
+        // The underlying stream unexpectedly returned -1. Check if
+        // there's an entry truncation and throw an exception.
+        if (entryOffset < entrySize) {
+            throw new IOException("Truncated TAR entry");
+        }
     } else {
-            entryOffset += totalRead;
+        count(bytesRead);
+        entryOffset += bytesRead;
+        totalRead = bytesRead;
     }
 
     return totalRead;
 }
\ No newline at end of file
