diff --git a/tmp/7ae16094-d7c0-4760-b023-ac769f53b3bd_buggy.java b/tmp/76d6d89a-cfc2-48d5-b88a-3c568120fc49_fixed.java
index 730ab7d..25fce9a 100644
--- a/tmp/7ae16094-d7c0-4760-b023-ac769f53b3bd_buggy.java
+++ b/tmp/76d6d89a-cfc2-48d5-b88a-3c568120fc49_fixed.java
@@ -1,48 +1,42 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData!= null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
+            int expectedLength = (hasUncompressedSize? 8 : 0)
+                + (hasCompressedSize? 8 : 0)
+                + (hasRelativeHeaderOffset? 8 : 0)
+                + (hasDiskStart? 4 : 0);
+            int actualLength = Math.min(expectedLength, rawCentralDirectoryData.length);
+            if (actualLength!= expectedLength) {
+                // log a warning?
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += 8;
             }
             if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
-                offset += DWORD;
+                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                offset += 8;
             }
             if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                offset += 8;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                offset += 4;
             }
         }
     }
\ No newline at end of file
