diff --git a/tmp/dbd2eb05-362b-497a-8a8b-a5540c2c1dae_buggy.java b/tmp/5c05cd57-3264-438d-93fb-973dbf0d22e7_fixed.java
index 730ab7d..22a98b7 100644
--- a/tmp/dbd2eb05-362b-497a-8a8b-a5540c2c1dae_buggy.java
+++ b/tmp/5c05cd57-3264-438d-93fb-973dbf0d22e7_fixed.java
@@ -1,48 +1,47 @@
 /**
  * Parses the raw bytes read from the central directory extra
  * field with knowledge which fields are expected to be there.
  *
  * <p>All four fields inside the zip64 extended information extra
  * field are optional and must only be present if their corresponding
  * entry inside the central directory contains the correct magic
  * value.</p>
  */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData!= null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+        int expectedLength = (hasUncompressedSize? 8 : 0)
+            + (hasCompressedSize? 8 : 0)
+            + (hasRelativeHeaderOffset? 8 : 0)
+            + (hasDiskStart? 4 : 0);
+        int actualLength = Math.min(rawCentralDirectoryData.length, expectedLength);
+        if (actualLength!= expectedLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
                                    + " data.  Expected length "
                                    + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
+                                   + actualLength);
         }
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += 8;
         }
         if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
-                offset += DWORD;
+            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            offset += 8;
         }
         if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            offset += 8;
         }
         if (hasDiskStart) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+            offset += 4;
         }
     }
 }
\ No newline at end of file
