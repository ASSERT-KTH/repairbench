diff --git a/tmp/141ca5a5-ebfd-43d5-aa08-f2fe4373cb7f_buggy.java b/tmp/68f9f9f7-5083-44a7-93b4-45e41268b0b1_fixed.java
index 730ab7d..9753559 100644
--- a/tmp/141ca5a5-ebfd-43d5-aa08-f2fe4373cb7f_buggy.java
+++ b/tmp/68f9f9f7-5083-44a7-93b4-45e41268b0b1_fixed.java
@@ -1,48 +1,49 @@
 /**
  * Parses the raw bytes read from the central directory extra
  * field with knowledge which fields are expected to be there.
  *
  * <p>All four fields inside the zip64 extended information extra
  * field are optional and must only be present if their corresponding
  * entry inside the central directory contains the correct magic
  * value.</p>
  */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData!= null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+        int expectedLength = (hasUncompressedSize? QWORD : 0)
+            + (hasCompressedSize? QWORD : 0)
+            + (hasRelativeHeaderOffset? QWORD : 0)
+            + (hasDiskStart? DWORD : 0);
+        if (rawCentralDirectoryData.length < expectedLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
                                    + " data.  Expected length "
                                    + expectedLength + " but is "
                                    + rawCentralDirectoryData.length);
         }
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += QWORD;
         }
         if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                      offset);
-                offset += DWORD;
+            offset += QWORD;
         }
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += QWORD;
         }
         if (hasDiskStart) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+            offset += DWORD;
         }
+        // ignore excess data, if any
     }
 }
\ No newline at end of file
