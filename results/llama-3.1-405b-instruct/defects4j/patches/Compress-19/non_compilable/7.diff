diff --git a/tmp/936f9f6c-b592-4360-8b16-061762175c58_buggy.java b/tmp/fe30512c-22e5-4133-8e1b-9bbdbca58074_fixed.java
index 730ab7d..bf064f5 100644
--- a/tmp/936f9f6c-b592-4360-8b16-061762175c58_buggy.java
+++ b/tmp/fe30512c-22e5-4133-8e1b-9bbdbca58074_fixed.java
@@ -1,48 +1,48 @@
 /**
  * Parses the raw bytes read from the central directory extra
  * field with knowledge which fields are expected to be there.
  *
  * <p>All four fields inside the zip64 extended information extra
  * field are optional and must only be present if their corresponding
  * entry inside the central directory contains the correct magic
  * value.</p>
  */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData!= null) {
         int expectedLength = (hasUncompressedSize? DWORD : 0)
             + (hasCompressedSize? DWORD : 0)
             + (hasRelativeHeaderOffset? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            + (hasDiskStart? QWORD : 0); // Use QWORD instead of WORD
+        if (rawCentralDirectoryData.length < expectedLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
                                    + " data.  Expected length "
                                    + expectedLength + " but is "
                                    + rawCentralDirectoryData.length);
         }
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += QWORD; // Use QWORD instead of DWORD
         }
         if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                      offset);
-                offset += DWORD;
+            offset += QWORD; // Use QWORD instead of DWORD
         }
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += QWORD; // Use QWORD instead of DWORD
         }
         if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+            diskStart = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            offset += QWORD; // Use QWORD instead of WORD
         }
     }
 }
\ No newline at end of file
