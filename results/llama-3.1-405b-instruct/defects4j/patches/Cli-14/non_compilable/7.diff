diff --git a/tmp/a80c25ca-fd50-4594-8ec1-3df304d09921_buggy.java b/tmp/fbd2d80d-864a-49da-9a5c-4791e6fbb659_fixed.java
index 71189c3..dcb2f23 100644
--- a/tmp/a80c25ca-fd50-4594-8ec1-3df304d09921_buggy.java
+++ b/tmp/fbd2d80d-864a-49da-9a5c-4791e6fbb659_fixed.java
@@ -1,46 +1,60 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
 
                     break;
                 }
 
-                option.validate(commandLine);
+                Argument argument = option.argument;
+                Object value = commandLine.getValue(option);
+
+                if (argument.validator instanceof FileValidator) {
+                    argument.validate((File)value);
+                } else {
+                    argument.validate(String.valueOf(value));
+                }
             }
         }
 
         // too many options
         if (unexpected!= null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
-            option.validate(commandLine);
+            Argument argument = option.argument;
+            Object value = commandLine.getValue(option);
+
+            if (argument.validator instanceof FileValidator) {
+                argument.validate((File)value);
+            } else {
+                argument.validate(String.valueOf(value));
+            }
         }
     }
\ No newline at end of file
