diff --git a/tmp/0241dfb6-3dff-4093-a232-647ace7d8b8c_buggy.java b/tmp/a60e40a9-b925-4e3a-a65e-04635eb213f1_fixed.java
index 71189c3..2d562fd 100644
--- a/tmp/0241dfb6-3dff-4093-a232-647ace7d8b8c_buggy.java
+++ b/tmp/a60e40a9-b925-4e3a-a65e-04635eb213f1_fixed.java
@@ -1,46 +1,58 @@
 public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
+            final Object value = commandLine.getValue(option);
             option.validate(commandLine);
+
+            if (value!= null) {
+                final Argument argument = option.getArgument();
+
+                if (argument!= null && value.getClass()!= argument.getDefaultType()) {
+                    Object convertedValue = argument.converter.convert(value);
+
+                    // set the converted value back
+                    commandLine.addValue(option, convertedValue);
+                }
+            }
         }
     }
 
     // too many options
     if (unexpected!= null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
