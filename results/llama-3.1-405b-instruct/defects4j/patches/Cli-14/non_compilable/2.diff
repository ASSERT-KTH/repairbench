diff --git a/tmp/3bc22525-556f-48a8-b244-ac8537b47c77_buggy.java b/tmp/27f988f5-75cf-4d37-a8ed-2cbe70954a9d_fixed.java
index 71189c3..0e6829e 100644
--- a/tmp/3bc22525-556f-48a8-b244-ac8537b47c77_buggy.java
+++ b/tmp/27f988f5-75cf-4d37-a8ed-2cbe70954a9d_fixed.java
@@ -1,46 +1,58 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
-                option.validate(commandLine);
+            // Check if the option value is expected to be of type File
+            Argument argument = option.getArgument();
+            if (argument!= null && argument.getValidator() instanceof FileValidator) {
+                Object value = commandLine.getValue(option);
+                if (value!= null &&!(value instanceof File)) {
+                    try {
+                        // Convert the string to a File object
+                        commandLine.addValue(option, new File(value.toString()));
+                    } catch (Exception e) {
+                        throw new OptionException(option, ResourceConstants.INVALIDArgument, value.toString());
+                    }
+                }
+            }
         }
     }
 
     // too many options
     if (unexpected!= null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
