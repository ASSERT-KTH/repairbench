diff --git a/tmp/bebb441b-ec6e-44c4-9b65-df93a2d97386_buggy.java b/tmp/4d4a4038-3086-4e6a-9bc0-0563de5d868d_fixed.java
index 19fd63e..3638aa1 100644
--- a/tmp/bebb441b-ec6e-44c4-9b65-df93a2d97386_buggy.java
+++ b/tmp/4d4a4038-3086-4e6a-9bc0-0563de5d868d_fixed.java
@@ -1,24 +1,20 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+      // Check if the expression is a call to a method with an implicit 'this' param
+      if (maybeExpr.getType() == Token.CALL && maybeExpr.getFirstChild().getType() == Token.GETPROP) {
+        Node getProp = maybeExpr.getFirstChild();
+        if (getProp.getLastChild().getString().equals("onchange")) {
+          return false;
+        }
+      }
       return NodeUtil.isExpressionNode(maybeExpr);
     }
   }
-
   return false;
 }
\ No newline at end of file
