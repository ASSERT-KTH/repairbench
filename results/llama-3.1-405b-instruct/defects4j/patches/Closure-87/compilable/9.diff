diff --git a/tmp/5f183036-ad94-4c7f-bbda-576dc3bc5648_buggy.java b/tmp/60f2119e-258a-4e88-b2a6-d1fdf818b884_fixed.java
index 19fd63e..4b9212c 100644
--- a/tmp/5f183036-ad94-4c7f-bbda-576dc3bc5648_buggy.java
+++ b/tmp/60f2119e-258a-4e88-b2a6-d1fdf818b884_fixed.java
@@ -1,24 +1,30 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+        if (maybeExpr.getType() == Token.EXPR_RESULT
+            && maybeExpr.hasOneChild()
+            && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {
+          return true;
+        }
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+        if (maybeExpr.getType() == Token.EXPR_RESULT
+            && maybeExpr.getFirstChild().getType() == Token.CALL
+            && maybeExpr.getFirstChild().getFirstChild().getType() == Token.GETPROP
+            && maybeExpr.getFirstChild().getFirstChild().getLastChild().getString().equals("onchange")) {
+          return false;
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
-
     return false;
   }
\ No newline at end of file
