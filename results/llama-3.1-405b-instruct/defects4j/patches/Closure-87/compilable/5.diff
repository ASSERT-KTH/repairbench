diff --git a/tmp/1b6672fc-f65e-4f11-be4c-d04335dc2593_buggy.java b/tmp/cfb98e8d-fbd6-4c49-b07a-77af35059737_fixed.java
index 19fd63e..ba94f5a 100644
--- a/tmp/1b6672fc-f65e-4f11-be4c-d04335dc2593_buggy.java
+++ b/tmp/cfb98e8d-fbd6-4c49-b07a-77af35059737_fixed.java
@@ -1,24 +1,14 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+      return NodeUtil.isExpressionNode(maybeExpr) &&!(maybeExpr.getType() == Token.EXPR_RESULT &&
+          NodeUtil.isCall(maybeExpr.getFirstChild()) && NodeUtil.isGetProp(maybeExpr.getFirstChild().getFirstChild()));
     }
   }
-
   return false;
 }
\ No newline at end of file
