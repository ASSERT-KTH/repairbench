diff --git a/tmp/d42f2168-d73a-4a87-9c71-441d6fd5956a_buggy.java b/tmp/a56212a2-f3e1-4de7-a9d1-19c6bdde3966_fixed.java
index 19fd63e..2c96ec0 100644
--- a/tmp/d42f2168-d73a-4a87-9c71-441d6fd5956a_buggy.java
+++ b/tmp/a56212a2-f3e1-4de7-a9d1-19c6bdde3966_fixed.java
@@ -1,24 +1,24 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+      // Check if maybeExpr is an EXPR_RESULT node
+      if (maybeExpr.getType() == Token.EXPR_RESULT) {
+        // Check if the EXPR_RESULT node has a single child that is a CALL node
+        if (maybeExpr.hasOneChild() && maybeExpr.getFirstChild().getType() == Token.CALL) {
+          // Check if the CALL node has a single child that is a PROP_ACCESS node
+          if (maybeExpr.getFirstChild().hasOneChild() && maybeExpr.getFirstChild().getFirstChild().getType() == Token.PROP_ACCESS) {
+            // If all conditions are met, return false to avoid folding the EXPR_RESULT node
+            return false;
+          }
+        }
+      }
       return NodeUtil.isExpressionNode(maybeExpr);
     }
   }
-
   return false;
 }
\ No newline at end of file
