diff --git a/tmp/10af6b89-5665-4078-b20a-bcce644808ff_buggy.java b/tmp/20e73e12-babb-45c3-a9f2-2a55e79272ee_fixed.java
index 1b29465..49b9959 100644
--- a/tmp/10af6b89-5665-4078-b20a-bcce644808ff_buggy.java
+++ b/tmp/20e73e12-babb-45c3-a9f2-2a55e79272ee_fixed.java
@@ -1,50 +1,58 @@
 private void parseStartTag() {
     tq.consume("<");
     String tagName = tq.consumeWord();
 
     if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
         tq.addFirst("&lt;");
         parseTextNode();
         return;
     }
 
     Attributes attributes = new Attributes();
     while (!tq.matchesAny("<", "/>", ">") &&!tq.isEmpty()) {
         Attribute attribute = parseAttribute();
         if (attribute!= null)
             attributes.put(attribute);
     }
 
     Tag tag = Tag.valueOf(tagName);
     Element child = new Element(tag, baseUri, attributes);
 
     boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
     if (tq.matchChomp("/>")) { // close empty element or tag
         isEmptyElement = true;
     } else {
         tq.matchChomp(">");
     }
     addChildToParent(child, isEmptyElement);
 
     // pc data only tags (textarea, script): chomp to end tag, add content as text node
     if (tag.isData()) {
         String data = tq.chompTo("</" + tagName);
-            tq.chompTo(">");
+        String endTag = tq.consume("</" + tagName);
+        tq.matchChomp(">");
         
         Node dataNode;
         if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
             dataNode = TextNode.createFromEncoded(data, baseUri);
         else
             dataNode = new DataNode(data, baseUri); // data not encoded but raw (for " in script)
         child.appendChild(dataNode);   
+        
+        // parse any additional text after the data section
+        if (!isEmptyElement) {
+            tq.addFirst(endTag); // add back the closing tag to the queue for further parsing
+            tq.addFirst("</" + tagName + ">"); // add an extra closing tag to close the element
+            // continue parsing from here will handle the text after the script tag correctly
+        }
     }
 
     // <base href>: update the base uri
     if (child.tagName().equals("base")) {
         String href = child.absUrl("href");
         if (href.length()!= 0) { // ignore <base target> etc
             baseUri = href;
             doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
         }
     }
 }
\ No newline at end of file
