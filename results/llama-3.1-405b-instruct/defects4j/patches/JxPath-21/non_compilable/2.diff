diff --git a/tmp/dc604149-8cc7-4915-b249-919faee8d2cc_buggy.java b/tmp/8e4fb087-05bc-4981-a693-5f4c10bb1682_fixed.java
index 516fad7..e9102a8 100644
--- a/tmp/dc604149-8cc7-4915-b249-919faee8d2cc_buggy.java
+++ b/tmp/8e4fb087-05bc-4981-a693-5f4c10bb1682_fixed.java
@@ -1,8 +1,38 @@
     /**
      * If the property contains a collection, then the length of that
-     * collection, otherwise - 1.
+     * collection, otherwise - 1. In the case of a collection, we consider
+     * the presence of a single element being a collection of one object. In
+     * case the collection can only hold a single null element we also
+     * return a length of one to prevent incorrect indices later in the
+     * resolving of the XPath-expression
      * @return int length
      */
     public int getLength() {
-        return ValueUtils.getLength(getBaseValue());
+        Object obj = getBaseValue();
+        if (obj!= null) {
+            int len = ValueUtils.getLength(obj);
+            if (len == 0) {
+                return 0;
             }
+            // This special handling is necessary so
+            // that indices match XPath indices.
+            // i.e. nothing in "testnull[1]" resolves to length one which then
+            // enables JXPath return that element which is: the element 'null' with 
+            // in arraylist on index = zero and one
+            // Note this also enables following jxpath syntax to work. Namely "test/nothing" also resolves:
+            // with the below if/else code the same thing "null" now we always
+            // match zero/one-length items on root and "path". (note how also other parts of same model "bean" which may also hold "value: zero")
+            else {
+                if (listObjectValue!= null){
+                    // JXPathTestbed model also contains special object where length of its one, it holds values array-list "null nothing etc..." with one nothing to
+                    // indicate length one object not having array, i have this
+                    len = ((List) obj).size();
+                }else {
+                    len++;
+                }
+            }
+        return len;
+    } else {
+        return ValueUtils.getLength(obj);
+        //  this should prevent failing null length
+    }  }
\ No newline at end of file
