diff --git a/tmp/b0b2f6f4-c9c7-4af2-b8ac-4633d741357d_buggy.java b/tmp/d2b99785-a8dd-4de4-9752-7bdc035eb016_fixed.java
index 181b1ac..81385b2 100644
--- a/tmp/b0b2f6f4-c9c7-4af2-b8ac-4633d741357d_buggy.java
+++ b/tmp/d2b99785-a8dd-4de4-9752-7bdc035eb016_fixed.java
@@ -1,23 +1,27 @@
 /**
  * Return the sum of this complex number and the given complex number.
  * <p>
  * Uses the definitional formula
  * <pre>
  * (a + bi) + (c + di) = (a+c) + (b+d)i
  * </pre></p>
  * <p>
  * If either this or <code>rhs</code> has a NaN value in either part,
  * {@link #NaN} is returned; otherwise Infinite and NaN values are
  * returned in the parts of the result according to the rules for
  * {@link java.lang.Double} arithmetic.</p>
  *
  * @param rhs the other complex number
  * @return the complex number sum
  * @throws NullArgumentException if <code>rhs</code> is null
  */
 public Complex add(Complex rhs)
     throws NullArgumentException {
     MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+    double realPart = real + rhs.getReal();
+    double imaginaryPart = imaginary + rhs.getImaginary();
+    if (Double.isNaN(realPart) || Double.isNaN(imaginaryPart)) {
+        return NaN;
+    }
+    return createComplex(realPart, imaginaryPart);
 }
\ No newline at end of file
