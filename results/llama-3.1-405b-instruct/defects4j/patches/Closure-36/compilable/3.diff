diff --git a/tmp/0c3a5f11-4f2f-44f7-953d-fafa563a78eb_buggy.java b/tmp/35950c5f-c41e-4292-908f-32e689c89a92_fixed.java
index 2955e62..15ad23c 100644
--- a/tmp/0c3a5f11-4f2f-44f7-953d-fafa563a78eb_buggy.java
+++ b/tmp/35950c5f-c41e-4292-908f-32e689c89a92_fixed.java
@@ -1,66 +1,79 @@
 /**
  * @return true if the provided reference and declaration can be safely
  *         inlined according to our criteria
  */
 private boolean canInline(
     Reference declaration,
     Reference initialization,
     Reference reference) {
   if (!isValidDeclaration(declaration)
       ||!isValidInitialization(initialization)
       ||!isValidReference(reference)) {
     return false;
   }
 
   // If the value is read more than once, skip it.
   // VAR declarations and EXPR_RESULT don't need the value, but other
   // ASSIGN expressions parents do.
   if (declaration!= initialization &&
      !initialization.getGrandparent().isExprResult()) {
     return false;
   }
 
   // Be very conservative and do no cross control structures or
   // scope boundaries
   if (declaration.getBasicBlock()!= initialization.getBasicBlock()
       || declaration.getBasicBlock()!= reference.getBasicBlock()) {
     return false;
   }
 
   // Do not inline into a call node. This would change
   // the context in which it was being called. For example,
   //   var a = b.c;
   //   a();
   // should not be inlined, because it calls a in the context of b
   // rather than the context of the window.
   //   var a = b.c;
   //   f(a)
   // is ok.
   Node value = initialization.getAssignedValue();
   Preconditions.checkState(value!= null);
   if (value.isGetProp()
       && reference.getParent().isCall()
       && reference.getParent().getFirstChild() == reference.getNode()) {
     return false;
   }
 
   if (value.isFunction()) {
     Node callNode = reference.getParent();
     if (reference.getParent().isCall()) {
       CodingConvention convention = compiler.getCodingConvention();
       // Bug 2388531: Don't inline subclass definitions into class defining
       // calls as this confused class removing logic.
       SubclassRelationship relationship =
           convention.getClassesDefinedByCall(callNode);
       if (relationship!= null) {
         return false;
       }
 
       // issue 668: Don't inline singleton getter methods
       // calls as this confused class removing logic.
+      if (isSingletonGetterMethod(value)) {
+        return false;
+      }
     }
   }
 
   return canMoveAggressively(value) ||
       canMoveModerately(initialization, reference);
 }
+
+// Helper function to check if a method is a singleton getter method
+private boolean isSingletonGetterMethod(Node method) {
+  // A singleton getter method is a method that returns an instance of the class
+  // and has a name that ends with "getInstance"
+  return method.isFunction() && method.getLastChild().isReturn() &&
+      method.getLastChild().getFirstChild().isGetProp() &&
+      method.getLastChild().getFirstChild().getLastChild().isName() &&
+      method.getLastChild().getFirstChild().getLastChild().getString().endsWith("getInstance");
+}
\ No newline at end of file
