diff --git a/tmp/e63ee840-78cc-47d2-8076-2566b2de1ade_buggy.java b/tmp/bb1b3f9f-9a63-4e2f-8496-8be843691a6a_fixed.java
index 2955e62..d86cb93 100644
--- a/tmp/e63ee840-78cc-47d2-8076-2566b2de1ade_buggy.java
+++ b/tmp/bb1b3f9f-9a63-4e2f-8496-8be843691a6a_fixed.java
@@ -1,66 +1,95 @@
 /**
  * @return true if the provided reference and declaration can be safely
  *         inlined according to our criteria
  */
 private boolean canInline(
     Reference declaration,
     Reference initialization,
     Reference reference) {
   if (!isValidDeclaration(declaration)
       ||!isValidInitialization(initialization)
       ||!isValidReference(reference)) {
     return false;
   }
 
   // If the value is read more than once, skip it.
   // VAR declarations and EXPR_RESULT don't need the value, but other
   // ASSIGN expressions parents do.
   if (declaration!= initialization &&
      !initialization.getGrandparent().isExprResult()) {
     return false;
   }
 
   // Be very conservative and do no cross control structures or
   // scope boundaries
   if (declaration.getBasicBlock()!= initialization.getBasicBlock()
       || declaration.getBasicBlock()!= reference.getBasicBlock()) {
     return false;
   }
 
   // Do not inline into a call node. This would change
   // the context in which it was being called. For example,
   //   var a = b.c;
   //   a();
   // should not be inlined, because it calls a in the context of b
   // rather than the context of the window.
   //   var a = b.c;
   //   f(a)
   // is ok.
   Node value = initialization.getAssignedValue();
   Preconditions.checkState(value!= null);
   if (value.isGetProp()
       && reference.getParent().isCall()
       && reference.getParent().getFirstChild() == reference.getNode()) {
     return false;
   }
 
   if (value.isFunction()) {
     Node callNode = reference.getParent();
     if (reference.getParent().isCall()) {
       CodingConvention convention = compiler.getCodingConvention();
       // Bug 2388531: Don't inline subclass definitions into class defining
       // calls as this confused class removing logic.
       SubclassRelationship relationship =
           convention.getClassesDefinedByCall(callNode);
       if (relationship!= null) {
         return false;
       }
 
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
+      // issue 668: Don't inline singleton getter methods calls
+      // unless proving the singleton getter methods always returns the same value
+      if (value.isUserDefinedFunction() &&
+             !value.getUserDefinedBody().getDeclaredVariables().isEmpty() &&
+              isGlobalObjectProperty(value.getFirstDeclaredVariable())) {
+        if (hasSideEffectMethodCall(callNode.getLastFirstChild()) ||
+                value.getChildAtIndex(1).getLastDescendant().isConstantArrayLiteral()) {
+          return canMoveAggressively(callNode) || canMoveModerately(initialization, reference);
         }
       }
 
-      return canMoveAggressively(value) ||
-          canMoveModerately(initialization, reference);
+      // inline anonymous methods only if proven we're calling a
+      // defined property on the base variable. For example
+      // var a = []; a.sort(function sort()); must be inlined first,
+      // the properties "sort" added; the property sort proven called only once.
+      if (!provenCallOnlyAssignedUserProperty(reference.getParent(),
+           convention.getBaseValueUserDeclared(reference.getParent()),reference)) {
+        return false;
+      }
+    }
+    if (!provenGlobalConstantValue(value.getUserDeclaredName())) {
+      var initBlock = getEarliestDeclarationBlock(compilationContext.getScopeReference declaringVar, compilationContext.getRootBasicBlock());
+      ValueReplacer replacerVar =
+        new VarWithComplexConstantValueFunctionAndDeclarationsReplacer(information,
+          initBlock.valueForValueReference(
+                    function.getReference(getLHSRootFunctionDeclaration(
+                    root)),
+          value.getUserDefinedVariableReferences(),
+          root.getUserDefinedConstantUserFunctions(), initBlock );
+    }
+  }
+}
+
+private boolean isGlobalObjectProperty(Node node) {
+    // logic to determine global object property
+    }
 }
\ No newline at end of file
