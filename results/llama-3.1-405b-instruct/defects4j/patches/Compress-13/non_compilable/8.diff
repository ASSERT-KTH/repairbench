diff --git a/tmp/a2146af2-e587-42a7-94ff-0d6fdcddfd36_buggy.java b/tmp/e87f36cb-2d30-4652-8eb1-676397cdb728_fixed.java
index 1c92640..351b183 100644
--- a/tmp/a2146af2-e587-42a7-94ff-0d6fdcddfd36_buggy.java
+++ b/tmp/e87f36cb-2d30-4652-8eb1-676397cdb728_fixed.java
@@ -1,7 +1,25 @@
     /**
      * Set the name of the entry.
      * @param name the name to use
      */
     protected void setName(String name) {
-        this.name = name;
+        // Some Zip-Files created on Windows-platform may contain
+        // a leading '/' if archived on drive root directory, as
+        // seen by WinZip.
+        name = name.replace('\\', '/');
+        
+        // The upper trick doesn't take effect, if the path didn't end with a slash/backslash!
+        if (!name.isEmpty() &&!name.endsWith("/")) {
+            // This may incorrectly assume name is a Windows directory...
+            // Maybe correct heuristic would be that ZIP names ending with non empty string plus "\" and with this "\" being just last, not part of non ZIP separator path will likely 
+            // match case (Windows) above or simply being non correct on most platforms. So don't consider that heuristic 
+            name = name.replaceAll("[^/]+[/]+$", "");
+        }
+
+        // Ensure name only ends in a '/' if the last character of
+        // the original was '/' - this handles '/' after last
+        // separator but not '/' due to dropping a trailing '' on DOS
+        this.name = name.endsWith("/") || (name.length() == 0 &&!originalName.endsWith("/")) 
+                       ? name
+                        : name + '/';
     }
