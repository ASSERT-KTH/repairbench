diff --git a/tmp/6ff9d03d-8a4f-4865-818f-dc6ce4fee30b_buggy.java b/tmp/93001e08-0d1b-4709-9928-8d0f307f090a_fixed.java
index c9da1b7..616495f 100644
--- a/tmp/6ff9d03d-8a4f-4865-818f-dc6ce4fee30b_buggy.java
+++ b/tmp/93001e08-0d1b-4709-9928-8d0f307f090a_fixed.java
@@ -1,33 +1,23 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne!= null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if ((_explicitCreators & mask)!= 0) { 
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            // Allow override if new one is more specific (sub-class)
+            if (oldOne.getClass()!= newOne.getClass() && oldOne.getClass().isAssignableFrom(newOne.getClass())) {
+                return;
+            }
         }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
         throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                 +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
-            }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
