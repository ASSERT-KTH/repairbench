diff --git a/tmp/f95fff23-e784-4816-a26a-9115c61842b7_buggy.java b/tmp/6cd101bd-f629-4265-9e5e-58e81b09eddc_fixed.java
index c9da1b7..d9385c7 100644
--- a/tmp/f95fff23-e784-4816-a26a-9115c61842b7_buggy.java
+++ b/tmp/6cd101bd-f629-4265-9e5e-58e81b09eddc_fixed.java
@@ -1,33 +1,25 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne!= null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if ((_explicitCreators & mask)!= 0) { 
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
         }
 
-            // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            if (oldOne.getRawParameterTypes().length == newOne.getRawParameterTypes().length 
+                    && explicit) {
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            }
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
