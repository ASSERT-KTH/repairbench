diff --git a/tmp/0583a555-ecdd-4035-be85-9bc1cbbf08c3_buggy.java b/tmp/453e0655-3e76-4310-a109-305f3723c8fe_fixed.java
index c9da1b7..c4d2ce0 100644
--- a/tmp/0583a555-ecdd-4035-be85-9bc1cbbf08c3_buggy.java
+++ b/tmp/453e0655-3e76-4310-a109-305f3723c8fe_fixed.java
@@ -1,33 +1,31 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne!= null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if ((_explicitCreators & mask)!= 0) { 
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
         }
         
-            // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // Check if the parameters match before throwing an exception
+            if (!oldOne.getParameterTypes().equals(newOne.getParameterTypes())) {
+                // Use the more specific one
+                _creators[typeIndex] = _fixAccess(newOne);
+                if (explicit) {
+                    _explicitCreators |= mask;
+                }
+                return;
+            }
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
