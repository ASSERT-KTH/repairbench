diff --git a/tmp/84469711-4171-444e-97d9-7205944c575a_buggy.java b/tmp/8a7815a8-2da3-4a0d-911d-2023ff07da63_fixed.java
index 5abdeb5..efae03b 100644
--- a/tmp/84469711-4171-444e-97d9-7205944c575a_buggy.java
+++ b/tmp/8a7815a8-2da3-4a0d-911d-2023ff07da63_fixed.java
@@ -1,29 +1,32 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
           // We make a special exception when the entire cfgNode is a chain
           // of assignments, since in that case the assignment statements
           // will happen after the inlining of the right hand side.
           // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
           //   and remove this special case.
          !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+               (parent.getFirstChild() == n)) &&
+          // Check if the parent node is a hook and the variable is assigned
+          // inside the hook. If so, do not count it as a use.
+         !(parent.isHook() && parent.hasChild(n))) {
         // Don't count lhs of top-level assignment chain
         numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
