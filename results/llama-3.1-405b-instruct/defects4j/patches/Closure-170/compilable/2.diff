diff --git a/tmp/8a122c12-b821-4194-8f58-b7dc76b45c32_buggy.java b/tmp/d561e265-cdb5-4d2d-acd1-ecc81911696e_fixed.java
index 5abdeb5..e131d20 100644
--- a/tmp/8a122c12-b821-4194-8f58-b7dc76b45c32_buggy.java
+++ b/tmp/d561e265-cdb5-4d2d-acd1-ecc81911696e_fixed.java
@@ -1,29 +1,27 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+          // Check if the parent is an assignment and the name node is the LHS.
+         !(parent.isAssign() && parent.getFirstChild() == n) &&
+          // Check if the parent is a hook node, which can contain an assignment.
+         !(parent.isHook() && parent.getFirstChild().isAssign() &&
+            parent.getFirstChild().getFirstChild() == n)) {
         // Don't count lhs of top-level assignment chain
         numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
