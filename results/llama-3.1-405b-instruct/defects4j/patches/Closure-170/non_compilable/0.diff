diff --git a/tmp/a946254e-222e-437b-9924-2a375e1c5bd9_buggy.java b/tmp/78911555-a0a8-47b1-8f7a-be046fe219ee_fixed.java
index 5abdeb5..f88ebb0 100644
--- a/tmp/a946254e-222e-437b-9924-2a375e1c5bd9_buggy.java
+++ b/tmp/78911555-a0a8-47b1-8f7a-be046fe219ee_fixed.java
@@ -1,29 +1,27 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        if (!(parent.isAssign() && parent.getFirstChild() == n)) {
+          // Don't count lhs of assignment
           numUsesWithinCfgNode++;
+        } else if (parent.getParent().isHook() || parent.getParent().isConditional()) {
+          // Count lhs of assignment if it's inside a hook or conditional
+          numUsesWithinCfgNode++;
+        }
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
