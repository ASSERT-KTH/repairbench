diff --git a/tmp/668dbd35-b3a4-4927-8628-afe7e3ac4d0c_buggy.java b/tmp/cab3d4b9-9600-4f8a-87b8-16f68d840d71_fixed.java
index bc80637..cf0218b 100644
--- a/tmp/668dbd35-b3a4-4927-8628-afe7e3ac4d0c_buggy.java
+++ b/tmp/cab3d4b9-9600-4f8a-87b8-16f68d840d71_fixed.java
@@ -1,33 +1,35 @@
 @Override
 public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
         JavaType type)
     throws JsonMappingException
 {
     final DeserializationConfig config = ctxt.getConfig();
     KeyDeserializer deser = null;
     if (_factoryConfig.hasKeyDeserializers()) {
         BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
         for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
             deser = d.findKeyDeserializer(type, config, beanDesc);
             if (deser!= null) {
                 break;
             }
         }
     }
-        // the only non-standard thing is this:
     if (deser == null) {
         if (type.isEnumType()) {
             return _createEnumKeyDeserializer(ctxt, type);
-            }
+        } else {
             deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
         }
-        // and then post-processing
-        if (deser != null) {
-            if (_factoryConfig.hasDeserializerModifiers()) {
+    }
+    // Applying post-processing deserializer modifier before considering special enum case
+    if (deser!= null && _factoryConfig.hasDeserializerModifiers()) {
         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
             deser = mod.modifyKeyDeserializer(config, type, deser);
         }
     }
+    // but then may need to drop back to enum handling
+    if (deser instanceof StdKeyDeserializer && ((StdKeyDeserializer) deser).isEnumDeserializer() && type.isEnumType()) {
+        return new EnumKeyDeserializer(config, type);
     }
     return deser;
 }
\ No newline at end of file
