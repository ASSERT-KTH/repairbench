diff --git a/tmp/58aaf4c2-ddeb-4b05-b083-64b25490e699_buggy.java b/tmp/e23fc6a4-bc4b-4482-8d74-3f99dc89b3e0_fixed.java
index 72a422c..1f9bbd8 100644
--- a/tmp/58aaf4c2-ddeb-4b05-b083-64b25490e699_buggy.java
+++ b/tmp/e23fc6a4-bc4b-4482-8d74-3f99dc89b3e0_fixed.java
@@ -1,51 +1,64 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if(start < seqEnd) {
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
                 // Check there's more than just an x after the &#
             }
+        } else {
+            return 0;
+        }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
+        while(end < seqEnd && input.charAt(end)!= ';')
         {
             end++;
         }
 
+        if(end == seqEnd) {
+            // If we've reached the end of the input without finding a ';',
+            // just use the rest of the input as the entity value
+            end = seqEnd;
+        }
+
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
+        if(end < seqEnd && input.charAt(end) == ';') {
             return 2 + (end - start) + (isHex? 1 : 0) + 1;
+        } else {
+            return 2 + (end - start) + (isHex? 1 : 0);
+        }
     }
     return 0;
 }
\ No newline at end of file
