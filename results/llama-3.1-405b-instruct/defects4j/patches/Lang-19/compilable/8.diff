diff --git a/tmp/05d245bc-cd74-4fb1-a23b-3e81a050cfb6_buggy.java b/tmp/f5674107-37ed-46d3-abe3-9aad44b38589_fixed.java
index 72a422c..b8e96c5 100644
--- a/tmp/05d245bc-cd74-4fb1-a23b-3e81a050cfb6_buggy.java
+++ b/tmp/f5674107-37ed-46d3-abe3-9aad44b38589_fixed.java
@@ -1,51 +1,55 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#' && 
+        (index + 2 == seqEnd || Character.isLetterOrDigit(input.charAt(index + 2)) ||
+        (index + 3 < seqEnd && (input.charAt(index + 2) == 'x' || input.charAt(index + 2) == 'X')
+         && Character.isLetterOrDigit(input.charAt(index + 3))))) {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
 
             // Check there's more than just an x after the &#
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < input.length() && input.charAt(end)!= ';'
+               && Character.isLetterOrDigit(input.charAt(end))) {
             end++;
         }
 
+        if (end == seqEnd || input.charAt(end) == ';') { 
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "]" + end + "]");
                 return 0;
             }
 
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
             return 2 + (end - start) + (isHex? 1 : 0) + 1;
         } 
+    }
     return 0;
 }
