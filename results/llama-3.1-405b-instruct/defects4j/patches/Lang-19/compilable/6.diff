diff --git a/tmp/e1fa7779-0a9d-4a12-90dc-d8221fc538a2_buggy.java b/tmp/00d85b70-f100-4179-8731-4b98b2ed9d09_fixed.java
index 72a422c..d45fb68 100644
--- a/tmp/e1fa7779-0a9d-4a12-90dc-d8221fc538a2_buggy.java
+++ b/tmp/00d85b70-f100-4179-8731-4b98b2ed9d09_fixed.java
@@ -1,51 +1,47 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if (index >= seqEnd - 2 || input.charAt(index)!= '&' || input.charAt(index + 1)!= '#') {
+        return 0;
+    }
     int start = index + 2;
     boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+    if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
         start++;
         isHex = true;
-
-                // Check there's more than just an x after the &#
     }
 
     int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+    while (end < seqEnd && input.charAt(end)!= ';') {
         end++;
     }
 
+    if (end == seqEnd) {
+        end = seqEnd - 1; // handle missing semi-colon
+    }
+
     int entityValue;
     try {
         if (isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
     } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
         return 0;
     }
 
     if (entityValue > 0xFFFF) {
         char[] chrs = Character.toChars(entityValue);
         out.write(chrs[0]);
         out.write(chrs[1]);
     } else {
         out.write(entityValue);
     }
 
-
     return 2 + (end - start) + (isHex? 1 : 0) + 1;
 }
\ No newline at end of file
-        return 0;
-    }
