diff --git a/tmp/5fff9497-c5ec-45e2-aafb-0fc5a5ec4568_buggy.java b/tmp/2f1d02ae-b16a-4622-b309-600918760884_fixed.java
index 4bbd561..7c0e2a5 100644
--- a/tmp/5fff9497-c5ec-45e2-aafb-0fc5a5ec4568_buggy.java
+++ b/tmp/2f1d02ae-b16a-4622-b309-600918760884_fixed.java
@@ -1,37 +1,47 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
     if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
         while(input.charAt(end)!= ';') {
             end++;
         }
 
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
+        // Write the character(s) corresponding to the entity value
+        if (entityValue > 0xFFFF) {
+            // Write the high and low surrogates for the supplementary character
+            char highSurrogate = (char) ((entityValue - 0x10000) / 0x400 + 0xD800);
+            char lowSurrogate = (char) ((entityValue - 0x10000) % 0x400 + 0xDC00);
+            out.write(highSurrogate);
+            out.write(lowSurrogate);
+        } else {
             out.write(entityValue);
+        }
+
         return 2 + (end - start) + (isHex? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
