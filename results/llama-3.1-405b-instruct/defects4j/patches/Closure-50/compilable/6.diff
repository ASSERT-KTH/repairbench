diff --git a/tmp/71dfca44-c818-412e-bc59-a80a9c083f21_buggy.java b/tmp/fa0ff1c2-c3ac-4d46-9d81-717d3579c806_fixed.java
index d8b0158..3adce8b 100644
--- a/tmp/71dfca44-c818-412e-bc59-a80a9c083f21_buggy.java
+++ b/tmp/fa0ff1c2-c3ac-4d46-9d81-717d3579c806_fixed.java
@@ -1,113 +1,120 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
   Node callTarget = n.getFirstChild();
 
   if (callTarget == null ||!NodeUtil.isGetProp(callTarget)) {
     return n;
   }
 
   Node right = callTarget.getNext();
   if (right!= null) {
     if (!NodeUtil.isImmutableValue(right)) {
       return n;
     }
   }
 
   Node arrayNode = callTarget.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType()!= Token.ARRAYLIT) ||
      !functionName.getString().equals("join")) {
     return n;
   }
 
-      // "," is the default, it doesn't need to be explicit
+  if (arrayNode.getChildCount() == 0) {
+    // Always return an empty string if the array is empty
+    Node emptyStringNode = Node.newString("");
+    n.getParent().replaceChild(n, emptyStringNode);
+    reportCodeChange();
+    return emptyStringNode;
+  }
+
+  if (right == null && arrayNode.getChildCount() == 1) {
+    // Always return the single element as a string if there's no separator
+    Node singleElement = arrayNode.getFirstChild();
+    Node singleElementAsString = singleElement.getType() == Token.STRING
+       ? singleElement
+        : new Node(Token.ADD, Node.newString("").copyInformationFrom(n), singleElement);
+    n.getParent().replaceChild(n, singleElementAsString);
+    reportCodeChange();
+    return singleElementAsString;
+  }
 
   String joinString = (right == null)? "," : NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = null;
   int foldedSize = 0;
   Node prev = null;
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
   while (elem!= null) {
     if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
       if (sb == null) {
         sb = new StringBuilder();
       } else {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getArrayElementStringValue(elem));
     } else {
       if (sb!= null) {
         Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+        foldedSize += sb.length() + 2; // + 2 for the quotes
         arrayFoldedChildren.add(
             Node.newString(sb.toString()).copyInformationFrom(prev));
         sb = null;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     prev = elem;
     elem = elem.getNext();
   }
 
   if (sb!= null) {
     Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+    foldedSize += sb.length() + 2; // + 2 for the quotes
     arrayFoldedChildren.add(
         Node.newString(sb.toString()).copyInformationFrom(prev));
   }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
-      case 1:
+
+  if (arrayFoldedChildren.size() == 1) {
     Node foldedStringNode = arrayFoldedChildren.remove(0);
     if (foldedSize > originalSize) {
       return n;
     }
     arrayNode.detachChildren();
     if (foldedStringNode.getType()!= Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
+      // If the Node is not a string literal, ensure that it is coerced to a string
       Node replacement = new Node(Token.ADD,
           Node.newString("").copyInformationFrom(n),
           foldedStringNode);
       foldedStringNode = replacement;
     }
     n.getParent().replaceChild(n, foldedStringNode);
     reportCodeChange();
     return foldedStringNode;
-      default:
-        // No folding could actually be performed.
+  }
+
   if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+    // No folding could actually be performed
     return n;
   }
+
   int kJoinOverhead = "[].join()".length();
   foldedSize += kJoinOverhead;
   foldedSize += (right!= null)? InlineCostEstimator.getCost(right) : 0;
   if (foldedSize > originalSize) {
     return n;
   }
+
   arrayNode.detachChildren();
   for (Node node : arrayFoldedChildren) {
     arrayNode.addChildToBack(node);
   }
   reportCodeChange();
-        break;
-    }
-
   return n;
 }
\ No newline at end of file
