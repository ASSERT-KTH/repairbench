diff --git a/tmp/f8e7f9eb-1e22-47a2-8bfc-b3ed23deaea5_buggy.java b/tmp/3813ec96-de64-47e7-8416-26d5975d7aed_fixed.java
index d8b0158..9e74d2a 100644
--- a/tmp/f8e7f9eb-1e22-47a2-8bfc-b3ed23deaea5_buggy.java
+++ b/tmp/3813ec96-de64-47e7-8416-26d5975d7aed_fixed.java
@@ -1,113 +1,63 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
   Node callTarget = n.getFirstChild();
 
   if (callTarget == null ||!NodeUtil.isGetProp(callTarget)) {
     return n;
   }
 
   Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+  if (right!= null &&!NodeUtil.isImmutableValue(right)) {
     return n;
   }
-    }
 
   Node arrayNode = callTarget.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType()!= Token.ARRAYLIT) ||
      !functionName.getString().equals("join")) {
     return n;
   }
 
-      // "," is the default, it doesn't need to be explicit
-
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
-    int foldedSize = 0;
-    Node prev = null;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
-        } else {
-          sb.append(joinString);
-        }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
-      } else {
-        if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
-        }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
-      }
-      prev = elem;
-      elem = elem.getNext();
-    }
-
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
-    }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
-
-    int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
+  if (arrayNode.getChildCount() == 0) {
+    // If the array is empty, return an empty string
     Node emptyStringNode = Node.newString("");
     n.getParent().replaceChild(n, emptyStringNode);
     reportCodeChange();
     return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
   }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
+
+  if (arrayNode.getChildCount() == 1) {
+    // If the array has one element, return that element as a string
+    Node singleElement = arrayNode.getFirstChild();
+    Node stringifiedElement;
+    if (singleElement.getType() == Token.STRING) {
+      stringifiedElement = singleElement;
+    } else {
+      stringifiedElement = Node.newString(singleElement.toString());
     }
-        n.getParent().replaceChild(n, foldedStringNode);
+    n.getParent().replaceChild(n, stringifiedElement);
     reportCodeChange();
-        return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
+    return stringifiedElement;
   }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
+
+  // Check if we can fold the array join into a single string
+  String joinString = (right == null)? "," : NodeUtil.getStringValue(right);
+  StringBuilder sb = new StringBuilder();
+  for (Node child = arrayNode.getFirstChild(); child!= null; child = child.getNext()) {
+    if (child.getType() == Token.EMPTY) {
+      continue;
     }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+    if (sb.length() > 0) {
+      sb.append(joinString);
     }
-        reportCodeChange();
-        break;
+    sb.append(NodeUtil.getArrayElementStringValue(child));
   }
 
-    return n;
+  Node result = Node.newString(sb.toString());
+  n.getParent().replaceChild(n, result);
+  reportCodeChange();
+  return result;
 }
\ No newline at end of file
