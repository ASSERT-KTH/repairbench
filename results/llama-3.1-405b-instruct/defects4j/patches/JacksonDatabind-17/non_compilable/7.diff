diff --git a/tmp/7be98ced-7746-4080-9aa7-22d40ab1051a_buggy.java b/tmp/e44f36f2-7f8e-4c81-b5b2-59c3a8b6100d_fixed.java
index 01967cc..107e8cc 100644
--- a/tmp/7be98ced-7746-4080-9aa7-22d40ab1051a_buggy.java
+++ b/tmp/e44f36f2-7f8e-4c81-b5b2-59c3a8b6100d_fixed.java
@@ -1,35 +1,39 @@
 /**
  * Method called to check if the default type handler should be
  * used for given type.
  * Note: "natural types" (String, Boolean, Integer, Double) will never
  * use typing; that is both due to them being concrete and final,
  * and since actual serializers and deserializers will also ignore any
  * attempts to enforce typing.
  */
 public boolean useForType(JavaType t)
 {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // fall through
     case OBJECT_AND_NON_CONCRETE:
         // return t.isJavaLangObject() || 
         return (t.getRawClass() == Object.class)
                 || (!t.isConcrete()
                         // [databind#88] Should not apply to JSON tree models:
                 || TreeNode.class.isAssignableFrom(t.getRawClass()));
 
     case NON_FINAL:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // [Issue#88] Should not apply to JSON tree models:
         return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass());
     default:
     //case JAVA_LANG_OBJECT:
         // return t.isJavaLangObject();
         return (t.getRawClass() == Object.class);
     }
+    // Add an additional check to exclude JsonNode and its subtypes
+    if (JsonNode.class.isAssignableFrom(t.getRawClass())) {
+        return false;
+    }
 }
\ No newline at end of file
