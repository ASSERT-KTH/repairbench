diff --git a/tmp/6f84487d-79d5-441c-aecf-dbec0729873e_buggy.java b/tmp/80f50535-58aa-4e33-ab05-604f3d760167_fixed.java
index b98f0a7..ef46095 100644
--- a/tmp/6f84487d-79d5-441c-aecf-dbec0729873e_buggy.java
+++ b/tmp/80f50535-58aa-4e33-ab05-604f3d760167_fixed.java
@@ -1,29 +1,34 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+
+          // Apply backwards type inference to constructor arguments.
+          ObjectType objectType = ObjectType.cast(type);
+          Node arg = constructor.getNext();
+          if (objectType!= null && arg!= null) {
+            arg.setJSType(objectType);
+            scope = traverse(arg, scope);
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
