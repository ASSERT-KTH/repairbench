diff --git a/tmp/4e15d79f-b3e4-4aee-b9be-48015a9a0172_buggy.java b/tmp/65762985-2c38-461f-b4c1-afc9c495562f_fixed.java
index b98f0a7..9763581 100644
--- a/tmp/4e15d79f-b3e4-4aee-b9be-48015a9a0172_buggy.java
+++ b/tmp/65762985-2c38-461f-b4c1-afc9c495562f_fixed.java
@@ -1,29 +1,44 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Infer the type of the new expression based on the instance type
+          if (type!= null &&!type.isEmptyType()) {
+            n.setJSType(type);
+          } else {
+            // Otherwise, infer the type from the constructor's parameter
+            Node arg = constructor.getNext();
+            if (arg!= null) {
+              JSType argType = arg.getJSType();
+              if (argType!= null) {
+                type = argType;
+              }
+            }
           }
         }
       }
+    }
+    if (type!= null) {
       n.setJSType(type);
+    }
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
