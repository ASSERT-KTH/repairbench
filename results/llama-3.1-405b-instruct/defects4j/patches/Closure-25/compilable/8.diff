diff --git a/tmp/6216ebe3-e258-4e8a-9279-f64d946f45d6_buggy.java b/tmp/2fd4e3ae-12f4-41cb-bab8-9fcc17f3b9ee_fixed.java
index b98f0a7..3b82269 100644
--- a/tmp/6216ebe3-e258-4e8a-9279-f64d946f45d6_buggy.java
+++ b/tmp/2fd4e3ae-12f4-41cb-bab8-9fcc17f3b9ee_fixed.java
@@ -1,29 +1,33 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType!= null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct!= null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // Backward inference for new expression
+        JSType argumentType = ct.getParameterType();
+        if (argumentType!= null) {
+          for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
+            arg.setJSType(argumentType);
+          }
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
