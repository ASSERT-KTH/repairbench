diff --git a/tmp/221dcf0c-8c16-4768-8481-0bdec4363444_buggy.java b/tmp/7221b717-b65f-4a18-9f78-da4481802ef3_fixed.java
index b98f0a7..a83f3a7 100644
--- a/tmp/221dcf0c-8c16-4768-8481-0bdec4363444_buggy.java
+++ b/tmp/7221b717-b65f-4a18-9f78-da4481802ef3_fixed.java
@@ -1,29 +1,36 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+
+          // Update the type of the argument based on the constructor's parameter type.
+          Node arg = constructor.getNext();
+          if (arg!= null) {
+            JSType argType = ct.getParameters().get(0).getType();
+            arg.setJSType(argType);
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
