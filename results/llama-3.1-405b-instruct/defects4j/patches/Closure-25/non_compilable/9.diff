diff --git a/tmp/59b4569a-0244-42f3-a1f4-0c9d7903df17_buggy.java b/tmp/48a72c90-61e4-4e59-9fcc-062ab3aaaa8b_fixed.java
index b98f0a7..1bee370 100644
--- a/tmp/59b4569a-0244-42f3-a1f4-0c9d7903df17_buggy.java
+++ b/tmp/48a72c90-61e4-4e59-9fcc-062ab3aaaa8b_fixed.java
@@ -1,29 +1,39 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType!= null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct!= null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // If there are no constructor parameters (i.e. instanceType is empty record type), 
+        // assume no backwards inference on function calls.
+        if (!ct.getInstanceType().toObjectType().hasPropertyDefs() && n.hasChildAtIndex(1)) {
+          JSType propChainObj = n.getChildAtIndex(1).getJSType();
+          FunctionParamList parameters = ct.getParameterList();
+          Preconditions.checkState(parameters.getHeadCount() == 1,
+              "Invalid assumptions around constructor function instance creation type being empty");
+          Object obj = parameters.getParamNode(parameters.getHead()).getChildAtIndex(0).getUserAgentJSLiteral();
+          type = propChainObj.getObjectChain(obj);
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
