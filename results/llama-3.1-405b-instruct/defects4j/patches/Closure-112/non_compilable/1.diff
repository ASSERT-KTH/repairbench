diff --git a/tmp/7064bd3f-b738-4b45-9b30-436c4816b06f_buggy.java b/tmp/8340593b-452f-4b43-93af-63e9855a215d_fixed.java
index 63641d0..3754176 100644
--- a/tmp/7064bd3f-b738-4b45-9b30-436c4816b06f_buggy.java
+++ b/tmp/8340593b-452f-4b43-93af-63e9855a215d_fixed.java
@@ -1,33 +1,38 @@
   /**
    * For functions with function(this: T,...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
        .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
        .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // Preserve the original return type of the function if it is not a template type
+    JSType returnType = fnType.getReturnType();
+    if (!keys.contains(returnType)) {
+      replacementFnType = replacementFnType.withReturnType(returnType);
+    }
+
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
