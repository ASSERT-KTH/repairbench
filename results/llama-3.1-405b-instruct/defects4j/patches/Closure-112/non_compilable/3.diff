diff --git a/tmp/a0140354-6d88-4786-960f-b703f879a9f8_buggy.java b/tmp/c76ca062-8c93-42ea-9951-4b49ab57a250_fixed.java
index 63641d0..98753b4 100644
--- a/tmp/a0140354-6d88-4786-960f-b703f879a9f8_buggy.java
+++ b/tmp/c76ca062-8c93-42ea-9951-4b49ab57a250_fixed.java
@@ -1,33 +1,40 @@
 /**
  * For functions with function(this: T,...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
      .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Make sure all template types have a substitution.
+  // We want to infer at most the number of free variables in the original function type.
+  for (TemplateType templateKey : keys) {
+    if (!inferred.containsKey(templateKey)) {
+      inferred.put(templateKey, getRegistry().getUnknownType());
+    }
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
      .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
