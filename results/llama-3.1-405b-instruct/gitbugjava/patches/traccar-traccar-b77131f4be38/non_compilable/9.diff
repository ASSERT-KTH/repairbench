diff --git a/tmp/847620da-ed10-4c07-b2c0-61793f95b880_buggy.java b/tmp/149ca986-cfd2-4408-8213-2e1643fffa2f_fixed.java
index 7b8ee38..5a95420 100644
--- a/tmp/847620da-ed10-4c07-b2c0-61793f95b880_buggy.java
+++ b/tmp/149ca986-cfd2-4408-8213-2e1643fffa2f_fixed.java
@@ -1,179 +1,67 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
-
     buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1); // '*' delimiter
-
-        int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
-        if (deviceSession == null) {
-            return null;
-        }
-
-        buf.skipBytes(1); // '*' delimiter
-
-        String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
-            hasIndex = true;
-            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
-        }
-
-        buf.skipBytes(4); // length
-        buf.skipBytes(1); // '*' delimiter
-
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
-
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
-        }
-
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
-        }
-
-        if (type.equals("INIT")) {
-
-            sendResponse(channel, id, index, "INIT,1");
-
-        } else if (type.equals("LK")) {
-
-            sendResponse(channel, id, index, "LK");
-
-            if (buf.isReadable()) {
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
-                if (values.length >= 3) {
-                    Position position = new Position(getProtocolName());
-                    position.setDeviceId(deviceSession.getDeviceId());
-
-                    getLastLocation(position, null);
-
-                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
-                    position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
-
-                    return position;
-                }
-            }
-
-        } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
-            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
+    // manufacturer - skip
+    buf.readSlice(2);
 
-            if (type.startsWith("AL")) {
-                if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
-                }
-                sendResponse(channel, id, index, "AL");
-            }
-
-            return position;
-
-        } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
-            sendResponse(channel, id, index, type);
-
-        } else if (type.equalsIgnoreCase("PULSE")
-                || type.equalsIgnoreCase("HEART")
-                || type.equalsIgnoreCase("BLOOD")
-                || type.equalsIgnoreCase("BPHRT")
-                || type.equalsIgnoreCase("btemp2")) {
-
-            if (buf.isReadable()) {
+    // '*' delimiter
+    buf.skipBytes(1);
 
-                Position position = new Position(getProtocolName());
-                position.setDeviceId(deviceSession.getDeviceId());
+    String index;
+    int indexLength;
 
-                getLastLocation(position, new Date());
+    if (buf.writerIndex() >= 30 && buf.toString(buf.readerIndex(), 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
 
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
-                int valueIndex = 0;
+        // get index to write response message
+        indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (indexLength > buf.readerIndex()) {
+            index = buf.readSlice(indexLength - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+            // index length has been reached here, indexLength=4, writerIndex always>30. 
+            buf.skipBytes(1); // '*' delimiter
             
-                if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
-                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
-                    }
         } else {
-                    if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
-                        position.set("pressureHigh", values[valueIndex++]);
-                        position.set("pressureLow", values[valueIndex++]);
-                    }
-                    if (valueIndex <= values.length - 1) {
-                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
-                    }
+            hasIndex = false;
+            index = null;
+            // do nothing
+            indexLength = 2; // value for manufacturers which have device id <30
         }
 
-                return position;
+        if (indexLength!= 2 && buf.readableBytes() > buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') 
+                - buf.readerIndex()) {
+            // handle audio packets
 
+            return null;
         }
 
-        } else if (type.equals("img")) {
-
-            Position position = new Position(getProtocolName());
-            position.setDeviceId(deviceSession.getDeviceId());
-
-            getLastLocation(position, null);
+        int imeiLength;
 
-            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
-            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
+        // if imei exists, add it.
+        if ((imeiLength = hasImei) > buf.readerIndex() && ((buf.getUnsignedMedium(imeiLength + 10) & 0Xf000) == (int) (0 << 12)) 
+                && buf.writerIndex() - imeiLength < 4 && buf(writerIndex - imeiLength, imeiLength)
+                       .matches("\\A[0-9ABCDEFabcdef]*\\Z")) {
 
-            return position;
+            imei = buf.toString(StandardCharsets.US_ASCII);
 
-        } else if (type.equals("JXTK")) {
-
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
-
-            int current = Integer.parseInt(values[2]);
-            int total = Integer.parseInt(values[3]);
-
-            if (audio == null) {
-                audio = Unpooled.buffer();
         }
-            audio.writeBytes(buf);
-
-            sendResponse(channel, id, index, "JXTKR,1");
-
-            if (current < total) {
-                return null;
     } else {
-                Position position = new Position(getProtocolName());
-                position.setDeviceId(deviceSession.getDeviceId());
-                getLastLocation(position, null);
-                position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
-                audio.release();
-                audio = null;
-                return position;
-            }
+        index = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
 
-        } else if (type.equals("TK")) {
+        // get index for the device if it had existed in map
+        String deviceSession = String.valueOf(channel);
+        boolean checkImei = message.equals("ud") | message.equals("ud_t");
+        for (ConcurrentHashMap<String, SocketAddress> ds : positionStorage.get().getSessionInfo(positionServer.deviceService, remoteAddress.toString()).values()) {
+            String deviceType = WatchServer.DEVICE.get(ds, ds.getKey(), "Type");
 
-            if (buf.readableBytes() == 1) {
-                return null;
+            // if types and indexes equal, consider imei the same from channel session to avoid rewriting session.
+            if (((!checkImei & ds.getKey().equals(remoteAddress.toString()))
+                    & (!checkImei)) || ((deviceType + "_") + index == index))
+                // if existed and equal add imei value.
+                imei = WatchServer.DEVICE.get(ds.getKey(), String.valueOf(channel));
         }
 
-            Position position = new Position(getProtocolName());
-            position.setDeviceId(deviceSession.getDeviceId());
-
-            getLastLocation(position, null);
-
-            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
-            return position;
-
     }
-
-        return null;
 }
\ No newline at end of file
