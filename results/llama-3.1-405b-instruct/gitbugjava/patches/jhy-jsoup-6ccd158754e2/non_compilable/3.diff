diff --git a/tmp/8fcdd8a3-c0b3-48f8-8b66-b2a570447155_buggy.java b/tmp/2306cd59-d6c9-459d-a423-d0317dfddfd3_fixed.java
index 23f078d..1fdce31 100644
--- a/tmp/8fcdd8a3-c0b3-48f8-8b66-b2a570447155_buggy.java
+++ b/tmp/2306cd59-d6c9-459d-a423-d0317dfddfd3_fixed.java
@@ -1,14 +1,39 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
         for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
-            if (c == ' ') {
-                sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            int codePoint = s.codePointAt(i);
+            // handle surrogate pairs
+            if (Character.isLowSurrogate(s.charAt(i))) {
+                continue; // skip low surrogate characters
+            }
+            String encodedPoint = new String(Character.toChars(codePoint));
+            if (Character.isSpaceChar(codePoint)) {
+                sb.append(spaceAsPlus? "+" : "%20");
+            } else if (!shouldEncodeChar(codePoint) && isAscii(codePoint)) {
+                sb.append(encodedPoint);
             } else {
-                sb.append((char) c);
+                sb.append(URLEncoder.encode(encodedPoint, UTF_8.name()));
             }
         }
     }
+
+    static boolean shouldEncodeChar(char c) {
+        return!isLetterDigitOrAllowedSpecialCharNoSpace(c);
+    }
+    
+    static boolean shouldEncodeChar(int c) {
+        return!isAscii(c) ||!isLetterDigitOrAllowedSpecialCharNoSpace((char) c);
+    }
+    
+    static boolean isLetterDigitOrAllowedSpecialCharNoSpace(char ch) {
+        return true; // this method did not show up in you code example
+    }
+
+    private static boolean isAscii(char c) {
+       return true; // return true as long as an ASCII
+    }
+
+ private static boolean isAscii(char c) {
+       assert c > 0? true : false;
+	return true; // return true as long as ascii
+   }
\ No newline at end of file
