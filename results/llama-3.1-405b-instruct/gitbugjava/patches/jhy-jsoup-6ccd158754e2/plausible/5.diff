diff --git a/tmp/205a5748-9e32-4347-ba68-615101721a95_buggy.java b/tmp/fdbd4ecb-2e95-46f7-80e1-292d693292c3_fixed.java
index 23f078d..e9bea68 100644
--- a/tmp/205a5748-9e32-4347-ba68-615101721a95_buggy.java
+++ b/tmp/fdbd4ecb-2e95-46f7-80e1-292d693292c3_fixed.java
@@ -1,14 +1,20 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus? '+' : "%20");
+            i++;
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            if (encoded.endsWith("%3F")) {
+                encoded = encoded.substring(0, encoded.length() - 3); // trim trailing %3F if present
+            }
+            sb.append(encoded);
+            i += Character.charCount(c); // increment index correctly for surrogate pairs
         } else {
             sb.append((char) c);
+            i++;
         }
     }
 }
\ No newline at end of file
