diff --git a/tmp/67bbff6a-9a0f-4e5a-a251-dcfe7a4828f7_buggy.java b/tmp/ec4c2653-cfd7-47a9-96b9-b87905640834_fixed.java
index 23f078d..ef53cfe 100644
--- a/tmp/67bbff6a-9a0f-4e5a-a251-dcfe7a4828f7_buggy.java
+++ b/tmp/ec4c2653-cfd7-47a9-96b9-b87905640834_fixed.java
@@ -1,14 +1,19 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // remove trailing %3F added by URLEncoder for supplementary characters
+            if (encoded.endsWith("%3F")) {
+                encoded = encoded.substring(0, encoded.length() - 3);
+            }
+            sb.append(encoded);
         } else {
             sb.append((char) c);
         }
+        i += Character.charCount(c);
     }
 }
\ No newline at end of file
