diff --git a/tmp/539d033d-0a34-40a1-b099-40fe0776c944_buggy.java b/tmp/65df098b-4fe2-4098-8762-47360c97e2cf_fixed.java
index 23f078d..bbc7d68 100644
--- a/tmp/539d033d-0a34-40a1-b099-40fe0776c944_buggy.java
+++ b/tmp/65df098b-4fe2-4098-8762-47360c97e2cf_fixed.java
@@ -1,14 +1,23 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
+        if (Character.isHighSurrogate(s.charAt(i))) {
+            i++; // Advance index for supplementary characters
+        }
         if (c == ' ') {
             sb.append(spaceAsPlus? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            if (encoded.endsWith("?")) {
+                encoded = "%" + String.format("%02x", (int)c >> 10) +
+                               "%" + String.format("%02x", ((int)c >> 0x10 & 0x3F) + 0x80) +
+                               "%" + String.format("%02x", (int)c & 0x3F | 0x80);
+            }
+            sb.append(encoded);
             // ^^ is a bit heavy-handed - if perf critical, we could optimize
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
