diff --git a/tmp/23086dc6-1c5d-4939-9ebf-cc190c90bbb9_buggy.java b/tmp/43dfdefd-fc06-4cf2-b9cb-30e6dc102332_fixed.java
index acd5eb5..9f4aaff 100644
--- a/tmp/23086dc6-1c5d-4939-9ebf-cc190c90bbb9_buggy.java
+++ b/tmp/43dfdefd-fc06-4cf2-b9cb-30e6dc102332_fixed.java
@@ -1,32 +1,32 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint &&!Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent!= null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                     || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
-                ;
-            if (couldSkip && isBlank) return;
+                    || (prev instanceof Element && ((Element) prev).isBlock());
+            if (couldSkip && isBlank && (!isNode(prev, "br") || hasNextNotWhitespace())) return; // Don't skip previous block <br> indent's whitespace.
 
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
-                indent(accum, depth, out);
-        }
+            // Consider the 'prev -> newline -> text' wrap (i.e., when appending instead of re-parent re-rending).
+            Node prevv = ((!wasReParentedAsWhitespace)? previouParentSibling : prevs[0]);
+            long skipWhitespaceMask = Document.wasWhitespacePresuping | Document.isMarkedlyPrepending | Normal.Preserve | TextNodes.previousMaskPreservesSaid;
+            boolean couldSweep = wasReflowOrPreparent
+                    && preserveAmount(previouParentDepth)[0]!= siblingsAtDepthAmount
+                            +(wasNewParent : doc.out.parent().element()
+                    || isChildNext(prevv)    ... || out.hasWrappedLeaves
+                    '!' && parent.parentElementOf(prevv);
+         ```
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
-    }
+Let me redo
