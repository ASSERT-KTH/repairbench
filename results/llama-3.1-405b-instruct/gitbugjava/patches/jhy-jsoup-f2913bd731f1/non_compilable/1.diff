diff --git a/tmp/86b394bb-4ad2-44c6-a49c-bf8d6ccface0_buggy.java b/tmp/8b692546-2d6b-4b1f-992c-99c0e913601e_fixed.java
index 016a7f6..331670c 100644
--- a/tmp/86b394bb-4ad2-44c6-a49c-bf8d6ccface0_buggy.java
+++ b/tmp/8b692546-2d6b-4b1f-992c-99c0e913601e_fixed.java
@@ -1,29 +1,36 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint &&!Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent!= null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent!= null && parent.tag().formatAsBlock() &&!isBlank) ||
             (out.outline() && siblingNodes().size() > 0 &&!isBlank) ||
             (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        ) {
             indent(accum, depth, out);
+        } else if (prev instanceof TextNode && ((TextNode) prev).isBlank() && parent!= null &&!parent.tag().isBlock()) {
+            // Do not indent if previous node was a blank text node, unless parent is a block node
+        } else if (parent!= null && parent.tag().formatAsBlock() && (siblingIndex > 0 || next!= null)) {
+            // Do not add additional whitespace if parent is block level and there are multiple nodes
+        } else {
+            accum.append(' '); // Add a single whitespace character
+        }
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
