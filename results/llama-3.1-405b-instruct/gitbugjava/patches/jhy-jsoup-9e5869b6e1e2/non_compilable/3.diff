diff --git a/tmp/16af796d-162c-4edc-98a4-e042307c417b_buggy.java b/tmp/035586a7-da41-425b-8963-0331515e4db3_fixed.java
index 0583946..2e6b1bc 100644
--- a/tmp/16af796d-162c-4edc-98a4-e042307c417b_buggy.java
+++ b/tmp/035586a7-da41-425b-8963-0331515e4db3_fixed.java
@@ -1,30 +1,43 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint &&!Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent!= null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent!= null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent!= null && parent.tag().formatAsBlock() &&!isBlank) ||
             (out.outline() && siblingNodes().size() > 0 &&!isBlank) ||
             (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        ) {
+            // Don't add an extra space if we're inside a custom tag
+            if (!parent.tagName().matches("[a-z]+")) {
                 indent(accum, depth, out);
+            } else {
+                indentWithoutExtraSpace(accum, depth, out);
+            }
+        }
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
+
+// New method to avoid adding an extra space in the indent
+private void indentWithoutExtraSpace(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
+    for (int i = 0; i < depth; i++) {
+        accum.append("\t");
+    }
+}
\ No newline at end of file
