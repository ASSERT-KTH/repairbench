diff --git a/tmp/a8156075-a78d-4ed1-9a3f-bebb70c3c971_buggy.java b/tmp/ab3d186a-5e76-4eb3-845e-5fb7d393382a_fixed.java
index 0583946..9dd9a21 100644
--- a/tmp/a8156075-a78d-4ed1-9a3f-bebb70c3c971_buggy.java
+++ b/tmp/ab3d186a-5e76-4eb3-845e-5fb7d393382a_fixed.java
@@ -1,30 +1,31 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint &&!Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent!= null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent!= null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent!= null && parent.tag().formatAsBlock() &&!isBlank) ||
             (out.outline() && siblingNodes().size() > 0 &&!isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) || // special case wrap on inline <br> - doesn't make sense as a block tag
+            (parent!= null &&!parent.tagName().equals(parent.normalName())) // also check for custom elements (with a colon in their tag name)
         )
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
