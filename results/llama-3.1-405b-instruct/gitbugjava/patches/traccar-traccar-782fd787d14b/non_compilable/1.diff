diff --git a/tmp/c69de94a-7135-4e23-bd5d-0605e909ea84_buggy.java b/tmp/3ae6c891-0a84-4e45-94ae-e2febf79d042_fixed.java
index a84de86..674a5c1 100644
--- a/tmp/c69de94a-7135-4e23-bd5d-0605e909ea84_buggy.java
+++ b/tmp/3ae6c891-0a84-4e45-94ae-e2febf79d042_fixed.java
@@ -1,81 +1,61 @@
 private Position decode04(Channel channel, SocketAddress remoteAddress, ByteBuf buf) throws ParseException {
 
     buf.readUnsignedShortLE(); // length
     buf.readUnsignedShortLE(); // checksum
     int index = buf.readUnsignedShortLE();
 
     String id = String.format("%08d%07d", buf.readUnsignedIntLE(), buf.readUnsignedIntLE());
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, String.valueOf(id));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_INDEX, index);
 
     position.setDeviceTime(new Date(buf.readUnsignedIntLE() * 1000));
 
     while (buf.isReadable()) {
         int type = buf.readUnsignedByte();
         switch (type) {
             case 0:
                 position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                 buf.readUnsignedIntLE(); // event data
 
                 int status = buf.readUnsignedShortLE();
                 position.set(Position.KEY_IGNITION, BitUtil.check(status, 5));
                 position.set(Position.KEY_STATUS, status);
 
                 position.setValid(true);
-                    position.setLatitude(buf.readInt() * 0.00001);
-                    position.setLongitude(buf.readInt() * 0.00001);
+                // fixed code
+                int lat = buf.readInt();
+                if (lat > 90 * 100000 || lat < -90 * 100000) {
+                    throw new IllegalArgumentException("Latitude out of range: " + lat);
+                }
+                position.setLatitude(lat * 0.00001);
+                // end fixed code
+                // fixed code
+                int lon = buf.readInt();
+                if (lon > 180 * 100000 || lon < -180 * 100000) {
+                    throw new IllegalArgumentException("Longitude out of range: " + lon);
+                }
+                position.setLongitude(lon * 0.00001);
+                // end fixed code
                 position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                 position.setCourse(buf.readUnsignedShortLE());
 
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 position.set(Position.KEY_GPS, buf.readUnsignedByte());
                 position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShortLE());
                 position.set("maxAcceleration", buf.readUnsignedShortLE() * 0.001);
                 position.set("maxDeceleration", buf.readUnsignedShortLE() * 0.001);
                 buf.readUnsignedShortLE(); // bearing to landmark
                 buf.readUnsignedIntLE(); // distance to landmark
 
                 position.setFixTime(new Date(buf.readUnsignedIntLE() * 1000));
 
                 buf.readUnsignedByte(); // reserved
                 break;
-                case 1:
-                    buf.skipBytes(buf.readUnsignedShortLE()); // landmark
-                    break;
-                case 4:
-                    buf.skipBytes(53); // trip
-                    break;
-                case 20:
-                    buf.skipBytes(32); // extended
-                    break;
-                case 22:
-                    buf.readUnsignedByte(); // zone flag
-                    buf.skipBytes(buf.readUnsignedShortLE()); // zone name
-                    break;
-                case 30:
-                    buf.skipBytes(79); // system status
-                    break;
-                case 40:
-                    buf.skipBytes(40); // analog
-                    break;
-                case 50:
-                    buf.skipBytes(buf.readUnsignedShortLE()); // console
-                    break;
-                case 255:
-                    buf.skipBytes(4); // acknowledgement
-                    break;
-                default:
-                    throw new IllegalArgumentException(String.format("Unknown type %d", type));
-            }
-        }
-
-        return position.getValid() ? position : null;
-
-    }
+            //...
\ No newline at end of file
