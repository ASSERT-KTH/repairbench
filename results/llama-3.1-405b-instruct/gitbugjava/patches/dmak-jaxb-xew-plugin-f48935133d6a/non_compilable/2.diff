diff --git a/tmp/2315eb11-0b67-490e-bb3c-9be25d887668_buggy.java b/tmp/97602bc4-4b45-43e9-8b57-60377d8ac4b2_fixed.java
index 47a8941..cd5c019 100644
--- a/tmp/2315eb11-0b67-490e-bb3c-9be25d887668_buggy.java
+++ b/tmp/97602bc4-4b45-43e9-8b57-60377d8ac4b2_fixed.java
@@ -1,53 +1,63 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
-		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    JClassContainer parent = clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+    // Check if grandParent is Class or Package
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
+
+        // Check for a possible duplicate name conflict for the given class name against the container classes:
+        if (classes.containsKey(clazz.name())) {
+            writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
+            // Rename class in this namespace to have the fully distinguished name, by taking full outer scope into consideration as well.
+            String updatedName = parent.name();
+            while (parent.isClass() && ((JDefinedClass) parent).outer() instanceof JClassContainer) {
+                updatedName = ((JDefinedClass) parent).outer().name() + updatedName;
+            }
+            setPrivateField(clazz, "name", updatedName + clazz.name());
+        }
     }
     else {
+        // Element class should be assigned to a package instead to a parent class, meaning it must not have Static modifier applied to be accepted valid by XJC. Furthermore, for each schema 
+        // element definition whose type equals the element defined class - remove 'declare local anonymous type' so that global types definition was used for XSD generated classes generation instead.
+
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
-
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
+                // Ensure that only a global schema symbol is considered in further post-processing to produce corresponding mapping class to a type represented by global XSD. 
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                // Remove flag of locally- defined element for an applicable XSD component that follows the definition for class scope.
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                // Exit immediately upon matching criteria for Class Outline has passed.
                 break;
             }
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
-		}
-
+    if (!classes.containsKey(clazz.name())) {
+        // Check potential duplicate entry.
+        throw new Exception("Element conflict: a class already " + clazz.fullName() + "exists.");
+    } else {
         classes.put(clazz.name(), clazz);
-
-		// Finally modify the class so that it refers back the container:
+        // Re-set reference onto the applicable parent, e.g., Package/Wrapper class container for element which is no longer locally accessible.
         setPrivateField(clazz, "outer", grandParent);
     }
+
+}
\ No newline at end of file
