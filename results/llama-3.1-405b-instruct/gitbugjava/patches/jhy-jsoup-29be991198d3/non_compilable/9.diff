diff --git a/tmp/48b354fe-2a12-464b-943f-d07349e11133_buggy.java b/tmp/2aaf030d-8b71-49c0-93b3-5d50e7b1c53b_fixed.java
index 862c60c..a415863 100644
--- a/tmp/48b354fe-2a12-464b-943f-d07349e11133_buggy.java
+++ b/tmp/2aaf030d-8b71-49c0-93b3-5d50e7b1c53b_fixed.java
@@ -1,25 +1,26 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint &&!Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent!= null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent!= null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = this.nextSibling();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+        boolean prevIsBr = siblingIndex > 0 && previousSibling() instanceof Element && ((Element)previousSibling()).tagName().equals("br");
+        if (couldSkip && isBlank() &&!prevIsBr) return; // do not skip newline after br
 
         if ((siblingIndex == 0 && parent!= null && parent.tag().formatAsBlock() &&!isBlank()) ||
                 (out.outline() && siblingNodes().size() > 0 &&!isBlank()))
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
