diff --git a/tmp/64a2feb5-1cc3-468c-bf51-1685ec6e5736_buggy.java b/tmp/97f5a501-849f-4617-994c-0a0293b1cb33_fixed.java
index 862c60c..7ed7b05 100644
--- a/tmp/64a2feb5-1cc3-468c-bf51-1685ec6e5736_buggy.java
+++ b/tmp/97f5a501-849f-4617-994c-0a0293b1cb33_fixed.java
@@ -1,25 +1,31 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint &&!Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent!= null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent!= null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = this.nextSibling();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank()) return;
 
+        if (prevSibling() instanceof Element && ((Element) prevSibling()).tag().getName().equals("br")) {
+            if (siblingIndex > 0 && parent!= null && parent.tag().formatAsBlock() &&!isBlank()) {
+                indent(accum, depth, out);
+            }
+        } else {
             if ((siblingIndex == 0 && parent!= null && parent.tag().formatAsBlock() &&!isBlank()) ||
                 (out.outline() && siblingNodes().size() > 0 &&!isBlank()))
                 indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
