diff --git a/tmp/f6288004-87b6-49ff-a653-e564c655ecf2_buggy.java b/tmp/d197ece3-0c42-43b6-bbef-36ee90a0ba06_fixed.java
index 27f2719..dca28c2 100644
--- a/tmp/f6288004-87b6-49ff-a653-e564c655ecf2_buggy.java
+++ b/tmp/d197ece3-0c42-43b6-bbef-36ee90a0ba06_fixed.java
@@ -1,90 +1,119 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+    if (deviceSession == null ||!sentence.matches("![1-5A-D],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RESULT, sentence.substring(3));
 
         return position;
 
     } else if (type.equals("5")) {
 
         String[] values = sentence.split(",");
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
         if (values.length >= 4) {
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
 
+    } else if (type.equals("4")) {
+        String[] values = sentence.split(",");
+        getLastLocation(position, null);
+
+        if (values.length > 1) {
+            position.set("phone1", values[1]);
+        }
+
+        if (values.length > 7 && position.isInteger(Position.KEY_SATELLITES)) {
+            double satellites = Double.parseDouble(values[7]);
+            satellites += position.getDouble(Position.KEY_SATELLITES);
+
+            position.set(Position.KEY_SATELLITES, (int) satellites);
+
+            double speed = parser.nextDouble(0);
+            speed += position.getDouble(Position.KEY_SPEED);
+
+            position.set(Position.KEY_SPEED, speed);
+        }
+
+        return position;
+    } else if (type.equals("1")) {
+        int index = sentence.indexOf(',', 3);
+        if (index < 0) {
+            index = sentence.length();
+        }
+
+        position.setDeviceId(sentence.substring(3, index));
+        return null;
     }
 
     return null;
 }
\ No newline at end of file
