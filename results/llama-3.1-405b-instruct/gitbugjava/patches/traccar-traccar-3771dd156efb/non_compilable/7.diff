diff --git a/tmp/3d315b23-6efb-4067-9aee-97ca6dc901fc_buggy.java b/tmp/b075ca16-0345-4154-b8fd-045308b56b5f_fixed.java
index 3da904d..7bea0b1 100644
--- a/tmp/3d315b23-6efb-4067-9aee-97ca6dc901fc_buggy.java
+++ b/tmp/b075ca16-0345-4154-b8fd-045308b56b5f_fixed.java
@@ -1,73 +1,30 @@
-    private Position decodePosition(DeviceSession deviceSession, String data) {
+private List<WifiAccessPoint> readWifiAccessPoints(Tokenizer tokenizer) {
+    List<WifiAccessPoint> wifiAccessPoints = new ArrayList<>();
 
-        Parser parser = new Parser(PATTERN_POSITION, data);
-        if (!parser.matches()) {
-            return null;
-        }
-
-        Position position = new Position(getProtocolName());
-        position.setDeviceId(deviceSession.getDeviceId());
-
-        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
-
-        position.setValid(parser.next().equals("A"));
-        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
-        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
-        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
-        position.setCourse(parser.nextDouble(0));
-        position.setAltitude(parser.nextDouble(0));
-
-        position.set(Position.KEY_SATELLITES, parser.nextInt(0));
-        position.set(Position.KEY_RSSI, parser.nextInt(0));
-        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
-
-        position.set(Position.KEY_STEPS, parser.nextInt(0));
-
-        int status = parser.nextHexInt(0);
-        position.set(Position.KEY_ALARM, decodeAlarm(status));
-        if (BitUtil.check(status, 4)) {
-            position.set(Position.KEY_MOTION, true);
-        }
-
-        String[] values = parser.next().split(",");
-        int index = 0;
+    try {
+        int count = Integer.parseInt(tokenizer.nextToken());
+        for (int i = 0; i < count; i++) {
+            tokenizer.next(); // wifi name
 
-        Network network = new Network();
+            String macAddress = tokenizer.nextToken();
+            macAddress = macAddress.length() == 12? fromHex(macAddress) : macAddress;
 
-        int cellCount = Integer.parseInt(values[index++]);
-        if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            short signalStrength = Short.parseShort(tokenizer.nextToken()); // changed to Short
 
-            for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
-                } else {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+            wifiAccessPoints.add(WifiAccessPoint.from(macAddress, signalStrength));
         }
+    } catch (NumberFormatException e) {
+        // Handle exception accordingly
     }
-        }
-
-        if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
 
-            for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
-                }
-            }
+    return wifiAccessPoints;
 }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
-            position.setNetwork(network);
+// Helper function to parse a hex string into MAC address format
+private static String fromHex(String hex) {
+    StringBuilder result = new StringBuilder();
+    for (int i = 0; i < 12; i += 2) {
+        result.append(hex.substring(i, i + 2)).append(":");
     }
-
-        return position;
+    return result.toString().substring(0, result.length() - 1);
 }
\ No newline at end of file
