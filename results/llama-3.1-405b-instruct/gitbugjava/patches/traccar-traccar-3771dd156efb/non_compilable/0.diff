diff --git a/tmp/84a74a2b-8ead-450b-81d7-49aa5b2857e3_buggy.java b/tmp/152f4794-ba07-468e-826d-4df3296d90b9_fixed.java
index 3da904d..5998d5d 100644
--- a/tmp/84a74a2b-8ead-450b-81d7-49aa5b2857e3_buggy.java
+++ b/tmp/152f4794-ba07-468e-826d-4df3296d90b9_fixed.java
@@ -1,73 +1,29 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
-        Parser parser = new Parser(PATTERN_POSITION, data);
-        if (!parser.matches()) {
-            return null;
-        }
-
-        Position position = new Position(getProtocolName());
-        position.setDeviceId(deviceSession.getDeviceId());
-
-        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
-
-        position.setValid(parser.next().equals("A"));
-        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
-        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
-        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
-        position.setCourse(parser.nextDouble(0));
-        position.setAltitude(parser.nextDouble(0));
-
-        position.set(Position.KEY_SATELLITES, parser.nextInt(0));
-        position.set(Position.KEY_RSSI, parser.nextInt(0));
-        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
-
-        position.set(Position.KEY_STEPS, parser.nextInt(0));
-
-        int status = parser.nextHexInt(0);
-        position.set(Position.KEY_ALARM, decodeAlarm(status));
-        if (BitUtil.check(status, 4)) {
-            position.set(Position.KEY_MOTION, true);
-        }
-
-        String[] values = parser.next().split(",");
-        int index = 0;
-
-        Network network = new Network();
+    //... existing code...
 
     int cellCount = Integer.parseInt(values[index++]);
     if (cellCount > 0) {
         index += 1; // timing advance
         int mcc =!values[index].isEmpty()? Integer.parseInt(values[index++]) : 0;
         int mnc =!values[index].isEmpty()? Integer.parseInt(values[index++]) : 0;
 
         for (int i = 0; i < cellCount; i++) {
             int lac = Integer.parseInt(values[index++]);
             int cid = Integer.parseInt(values[index++]);
             String rssi = values[index++];
             if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                try {
+                    int rssiValue = Integer.parseInt(rssi);
+                    position.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiValue));
+                } catch (NumberFormatException e) {
+                    // Ignore invalid RSSI value
+                }
             } else {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                position.addCellTower(CellTower.from(mcc, mnc, lac, cid));
             }
         }
     }
 
-        if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
-
-            for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
-                }
-            }
-        }
-
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
-            position.setNetwork(network);
-        }
-
-        return position;
+    //... existing code...
 }
\ No newline at end of file
