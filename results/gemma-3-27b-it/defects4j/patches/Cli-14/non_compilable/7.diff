diff --git a/tmp/8e203b91-d3e6-4082-973c-5d0972760915_buggy.java b/tmp/521432fb-8b4d-40f6-9d9b-07001f6e9d22_fixed.java
index 71189c3..73602e7 100644
--- a/tmp/8e203b91-d3e6-4082-973c-5d0972760915_buggy.java
+++ b/tmp/521432fb-8b4d-40f6-9d9b-07001f6e9d22_fixed.java
@@ -1,46 +1,61 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
 
                     break;
                 }
 
+                Object optionValue = option.getValue(commandLine);
+                if (optionValue != null) {
+                    if (option.getType() == String.class) {
                         option.validate(commandLine);
+                    } else if (option.getType() == File.class) {
+                        // Handle File type specifically
+                        if (!(optionValue instanceof File)) {
+                            throw new OptionException(this, ResourceConstants.INVALID_VALUE, option.getPreferredName());
+                        }
+                        option.validate(commandLine); // Let the validator handle the File object
+                    }else {
+                        option.validate(commandLine);
+                    }
+                } else {
+                    option.validate(commandLine);
+                }
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
