diff --git a/tmp/af1886b0-dc00-41a4-9163-19bdeb34283e_buggy.java b/tmp/b4a5f6d9-b815-4fc6-989c-5d42aafb6c46_fixed.java
index b36c3f0..74f8c45 100644
--- a/tmp/af1886b0-dc00-41a4-9163-19bdeb34283e_buggy.java
+++ b/tmp/b4a5f6d9-b815-4fc6-989c-5d42aafb6c46_fixed.java
@@ -1,58 +1,81 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
       if (callNode.hasOneChild()
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
               nameNode.getLastChild().getString())) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
       // Functions in the "Math" namespace have no side effects.
 
+      if (compiler != null && nameNode.getFirstChild().getType() == Token.NAME && "Math".equals(nameNode.getFirstChild().getString())) {
+        Node fnName = nameNode.getLastChild();
+        if (fnName.getType() == Token.NAME && REGEXP_METHODS.contains(fnName.getString())) {
+          return false;
+        }
+        if (fnName.getType() == Token.NAME && (
+            "sin".equals(fnName.getString()) ||
+            "cos".equals(fnName.getString()) ||
+            "tan".equals(fnName.getString()) ||
+            "asin".equals(fnName.getString()) ||
+            "acos".equals(fnName.getString()) ||
+            "atan".equals(fnName.getString()) ||
+            "log".equals(fnName.getString()) ||
+            "sqrt".equals(fnName.getString()) ||
+            "abs".equals(fnName.getString()) ||
+            "ceil".equals(fnName.getString()) ||
+            "floor".equals(fnName.getString()) ||
+            "round".equals(fnName.getString()) ||
+            "random".equals(fnName.getString())
+        )) {
+            return false;
+        }
+      }
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
