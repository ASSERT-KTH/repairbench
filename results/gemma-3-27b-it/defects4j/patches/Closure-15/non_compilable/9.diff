diff --git a/tmp/4c2564fa-271a-44db-8856-10a7c82b1fa4_buggy.java b/tmp/ee18d7ce-7e21-458d-8483-f698830dc787_fixed.java
index b56897c..49052c5 100644
--- a/tmp/4c2564fa-271a-44db-8856-10a7c82b1fa4_buggy.java
+++ b/tmp/ee18d7ce-7e21-458d-8483-f698830dc787_fixed.java
@@ -1,27 +1,35 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
+        // For the 'for...in' case, we need to check if the expression being iterated over
+        // has side effects.  If it does, we should not inline.
+        if (n.isForIn()) {
+          Node iterable = n.getFirstChild();
+          if (iterable != null && NodeUtil.hasSideEffects(iterable)) {
+            return true;
+          }
+        }
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
