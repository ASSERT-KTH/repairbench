diff --git a/tmp/969197e6-e763-45dc-8509-e811d512b69e_buggy.java b/tmp/e6d651c8-eaba-4770-abd4-255a5cc64184_fixed.java
index 19fd63e..9ac5c84 100644
--- a/tmp/969197e6-e763-45dc-8509-e811d512b69e_buggy.java
+++ b/tmp/e6d651c8-eaba-4770-abd4-255a5cc64184_fixed.java
@@ -1,24 +1,36 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
           // We only have to worry about methods with an implicit 'this'
           // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+          return !isEventHandlers(maybeExpr);
+        }
       }
     }
 
     return false;
   }
+
+  private boolean isEventHandlers(Node n) {
+    if (n.getType() == Token.CALL) {
+      Node parent = n.getParent();
+      if (parent != null && parent.getType() == Token.ASSIGN) {
+        return false;
+      }
+      return true;
+    }
+    return false;
+  }
\ No newline at end of file
