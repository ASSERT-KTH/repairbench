diff --git a/tmp/2c5ae107-d890-4db6-a079-87d83c62621f_buggy.java b/tmp/09dfc9b8-2ff0-491a-9290-c574db03a7af_fixed.java
index 602226b..7665364 100644
--- a/tmp/2c5ae107-d890-4db6-a079-87d83c62621f_buggy.java
+++ b/tmp/09dfc9b8-2ff0-491a-9290-c574db03a7af_fixed.java
@@ -1,26 +1,26 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
 
             String qualifiedName =
                 aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
             // Bleeding functions already get a BAD_PARAMETERS error, so just
             // do nothing.
             // Parameters of the scope function also get a BAD_PARAMETERS
             // error.
           } else {
             // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+            // report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
