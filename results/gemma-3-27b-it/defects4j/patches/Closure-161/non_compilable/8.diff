diff --git a/tmp/7142d589-82cc-4bfe-b58d-d32f9bccf3eb_buggy.java b/tmp/4edcc761-3260-49b1-8af6-d4e6be8d9e1b_fixed.java
index 1303a19..f9bc76a 100644
--- a/tmp/7142d589-82cc-4bfe-b58d-d32f9bccf3eb_buggy.java
+++ b/tmp/4edcc761-3260-49b1-8af6-d4e6be8d9e1b_fixed.java
@@ -1,45 +1,55 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
+      // Check if the array has enough elements.
+      Node array = left;
+      if (array.getType() == Token.ARRAY_LITERAL) {
+        int arraySize = array.getChildCount();
+        if (intIndex >= arraySize) {
           error(INDEX_OUT_OF_BOUNDS_ERROR, right);
           return n;
         }
+      } else {
+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+        return n;
+      }
+    }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
