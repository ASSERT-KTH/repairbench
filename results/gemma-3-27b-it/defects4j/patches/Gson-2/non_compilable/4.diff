diff --git a/tmp/b6757f8b-f228-45eb-b2e3-187e3eb2951c_buggy.java b/tmp/79670416-2f9c-4b4c-9f0a-d6a8d5a1934e_fixed.java
index 6e45f80..f7a6cfa 100644
--- a/tmp/b6757f8b-f228-45eb-b2e3-187e3eb2951c_buggy.java
+++ b/tmp/79670416-2f9c-4b4c-9f0a-d6a8d5a1934e_fixed.java
@@ -1,21 +1,49 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        // Create a new instance of the type adapter to avoid potential casting issues.
+        return (TypeAdapter<T2>) new TypeAdapterRuntimeTypeImposing(typeAdapter, clazz, requestedType);
 
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
+
+  // Helper class to impose runtime type check during deserialization
+  private static class TypeAdapterRuntimeTypeImposing<T> extends TypeAdapter<T> {
+    private final TypeAdapter<T> delegate;
+    private final Class<T> baseClass;
+    private final Class<? super T> requestedType;
+
+    public TypeAdapterRuntimeTypeImposing(TypeAdapter<T> delegate, Class<T> baseClass, Class<? super T> requestedType) {
+      this.delegate = delegate;
+      this.baseClass = baseClass;
+      this.requestedType = requestedType;
+    }
+
+    @Override
+    public T read(JsonReader in) throws IOException {
+      T result = delegate.read(in);
+      if (result != null && !requestedType.isInstance(result)) {
+        throw new JsonParseException("Expected type " + requestedType.getName() + " but was " + result.getClass().getName());
+      }
+      return result;
+    }
+
+    @Override
+    public void write(JsonWriter out, T value) throws IOException {
+      delegate.write(out, value);
+    }
+  }
\ No newline at end of file
