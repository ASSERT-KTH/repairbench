diff --git a/tmp/bcffbf68-3b7e-49a4-b8e1-41def434b9e9_buggy.java b/tmp/4f3feae6-ff6e-42d6-8e1a-01b5e4a26076_fixed.java
index 3127f85..9409e3a 100644
--- a/tmp/bcffbf68-3b7e-49a4-b8e1-41def434b9e9_buggy.java
+++ b/tmp/4f3feae6-ff6e-42d6-8e1a-01b5e4a26076_fixed.java
@@ -1,24 +1,33 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
         try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
             if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
             } else {
                 throw ex;
             }
+        } catch (ConvergenceException ex) {
+            if (Double.isInfinite(x)) {
+                if (x > mean) {
+                    return 1.0;
+                } else {
+                    return 0.0;
+                }
+            }
+            throw ex;
         }
     }
\ No newline at end of file
