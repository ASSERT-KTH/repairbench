diff --git a/tmp/711ac07e-96a8-43d3-9c5f-7cb53d5f1c57_buggy.java b/tmp/b296b06e-53e0-4106-8450-6851f7ff222e_fixed.java
index f47d784..c6994be 100644
--- a/tmp/711ac07e-96a8-43d3-9c5f-7cb53d5f1c57_buggy.java
+++ b/tmp/b296b06e-53e0-4106-8450-6851f7ff222e_fixed.java
@@ -1,12 +1,27 @@
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
     removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
+    //After propagate constant annotations, arguments variable can be shadowed if it's a parameter.
+    //We need to prevent this by explicitly marking the arguments variable as not renameable.
+    Node argumentsNode = null;
+    if (root != null && root.hasChildren()) {
+        for (Node child : root.children()) {
+             if (child.getType() == Token.NAME && child.getString().equals("arguments")) {
+                argumentsNode = child;
+                break;
+            }
+        }
+    }
+
+    if (argumentsNode != null){
+        argumentsNode.putBooleanProp(Node.DONT_RENAME, true);
+    }
   }
\ No newline at end of file
