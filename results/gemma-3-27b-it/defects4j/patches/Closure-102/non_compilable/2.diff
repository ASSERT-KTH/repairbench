diff --git a/tmp/90c2cd46-257e-493a-99a0-678644533274_buggy.java b/tmp/ea3f79a0-b223-4ccd-8374-e139bbbd3d89_fixed.java
index f47d784..249b247 100644
--- a/tmp/90c2cd46-257e-493a-99a0-678644533274_buggy.java
+++ b/tmp/ea3f79a0-b223-4ccd-8374-e139bbbd3d89_fixed.java
@@ -1,12 +1,50 @@
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
     removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
+    // Avoid shadowing the 'arguments' variable.
+    root.replaceNode(
+        matchArgNames(root),
+        createArgNames(root));
+  }
+
+  private Node matchArgNames(Node root) {
+    if (root == null) {
+      return null;
+    }
+
+    for (Node c = root.getFirstChild(); c != null; c = c.getNextSibling()) {
+      if (c.isFunction()) {
+        if (c.getFirstChild().isName() &&
+            c.getFirstChild().getString().equals("arguments")) {
+          return c;
+        }
+      }
+    }
+    return null;
+  }
+
+  private Node createArgNames(Node root) {
+    if (root == null) {
+      return null;
+    }
+
+    for (Node c = root.getFirstChild(); c != null; c = c.getNextSibling()) {
+      if (c.isFunction()) {
+        Node nameNode = c.getFirstChild();
+        if (nameNode.isName() &&
+            nameNode.getString().equals("arguments")) {
+          nameNode.setString("arguments_");
+          break;
+        }
+      }
+    }
+    return root;
   }
\ No newline at end of file
