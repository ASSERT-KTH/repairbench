diff --git a/tmp/806fd2fc-687f-4604-91bf-5f70f34800ae_buggy.java b/tmp/3ace5e3b-03da-4547-963a-0016bda87cc1_fixed.java
index f47d784..6422ab1 100644
--- a/tmp/806fd2fc-687f-4604-91bf-5f70f34800ae_buggy.java
+++ b/tmp/3ace5e3b-03da-4547-963a-0016bda87cc1_fixed.java
@@ -1,12 +1,31 @@
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
     removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
+    // Mark the 'arguments' variable as not shadowed by a local variable.
+    // This is needed because the standard compilation pipeline might not
+    // recognize that a variable named 'arguments' is a formal parameter
+    // and treat it as a regular variable.
+    markArgumentsAsNotShadowed(root);
+  }
+
+  private void markArgumentsAsNotShadowed(Node root) {
+    for (Node n : root.children()) {
+      if (n.isVar()) {
+        for (Node child : n.children()) {
+          if (child.getString().equals("arguments")) {
+            child.putBooleanProp(Node.IS_ARGUMENT, true);
+          }
+        }
+      } else {
+        markArgumentsAsNotShadowed(n);
+      }
+    }
   }
\ No newline at end of file
