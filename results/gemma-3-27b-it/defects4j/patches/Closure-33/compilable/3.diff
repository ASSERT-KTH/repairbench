diff --git a/tmp/3722cd3a-da76-4555-8fde-41136a3e8090_buggy.java b/tmp/6955fa73-c75b-4bf0-aedb-bbb9ad7d1870_fixed.java
index fb2b020..6f4fd20 100644
--- a/tmp/3722cd3a-da76-4555-8fde-41136a3e8090_buggy.java
+++ b/tmp/6955fa73-c75b-4bf0-aedb-bbb9ad7d1870_fixed.java
@@ -1,27 +1,29 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+            // If the property doesn't exist, we can't infer its type
+            // based on the constraint.  Instead, we should set it to
+            // 'unknown' or 'any'.  Using VOID_TYPE leads to errors.
+            typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
