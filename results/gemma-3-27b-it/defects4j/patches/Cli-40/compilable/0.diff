diff --git a/tmp/1cf6fcfc-5983-4297-b733-caf57b5bc36d_buggy.java b/tmp/62df409b-2553-4ca9-b0bf-9a568f1fb8c5_fixed.java
index a7d0787..1951234 100644
--- a/tmp/1cf6fcfc-5983-4297-b733-caf57b5bc36d_buggy.java
+++ b/tmp/62df409b-2553-4ca9-b0bf-9a568f1fb8c5_fixed.java
@@ -1,54 +1,61 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
+        if (String.class == clazz)
         {
             return (T) str;
         }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
+        else if (Object.class == clazz)
         {
             return (T) createObject(str);
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+        else if (Number.class == clazz)
         {
             return (T) createNumber(str);
         }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
+        else if (java.util.Date.class == clazz)
         {
             return (T) createDate(str);
         }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
+        else if (Class.class == clazz)
         {
             return (T) createClass(str);
         }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
+        else if (java.io.File.class == clazz)
         {
             return (T) createFile(str);
         }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
+        else if (java.io.File.class == clazz)
         {
             return (T) openFile(str);
         }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
+        else if (java.util.List.class == clazz)
         {
             return (T) createFiles(str);
         }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
+        else if (java.net.URL.class == clazz)
         {
             return (T) createURL(str);
         }
+        else if (Integer.class == clazz) {
+            try {
+                return (T) Integer.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Cannot parse '" + str + "' as an integer.");
+            }
+        }
         else
         {
-            return null;
+            throw new ParseException("Unsupported type: " + clazz);
         }
     }
\ No newline at end of file
