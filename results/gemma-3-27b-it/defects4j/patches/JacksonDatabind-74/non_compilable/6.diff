diff --git a/tmp/a5bd31fe-4291-4663-9b43-ee2bbb2425f1_buggy.java b/tmp/c8c3b284-cae4-4d98-8a4f-6e92a4fd5d8c_fixed.java
index 658036e..6f012c8 100644
--- a/tmp/a5bd31fe-4291-4663-9b43-ee2bbb2425f1_buggy.java
+++ b/tmp/c8c3b284-cae4-4d98-8a4f-6e92a4fd5d8c_fixed.java
@@ -1,29 +1,46 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+
+        // Handle the case where the type property is missing
+        if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+            if (p.nextToken() == JsonToken.END_OBJECT) {
+                // Empty object, treat as null if the feature is enabled
+                if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                    return null;
+                }
+
+            } else {
              ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                     "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
              return null;
             }
+
+        } else {
+            ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
+                    "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
+            return null;
+        }
+    }
\ No newline at end of file
