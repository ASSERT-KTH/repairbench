diff --git a/tmp/5ed704c3-7a93-490e-bc96-38c4a425cecd_buggy.java b/tmp/ed9be47b-5cf1-45e8-932b-c48f8330c330_fixed.java
index 658036e..300beaf 100644
--- a/tmp/5ed704c3-7a93-490e-bc96-38c4a425cecd_buggy.java
+++ b/tmp/ed9be47b-5cf1-45e8-932b-c48f8330c330_fixed.java
@@ -1,29 +1,41 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+        // Handle the case where the type property is missing.
+        if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+            // Check if the next token is the type property.  If not, report an error.
+            p.nextToken();
+            if (p.getCurrentToken() != JsonToken.FIELD_NAME || !_typePropertyName.equals(p.getCurrentName())) {
+                ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
+                        "missing property '" + _typePropertyName + "' that is to contain type id  (for class " + baseTypeName() + ")");
+                return null;
+            }
+            return super.deserializeTypedFromAny(p, ctxt);
+        }
+
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '" + _typePropertyName + "' that is to contain type id  (for class " + baseTypeName() + ")");
         return null;
     }
\ No newline at end of file
