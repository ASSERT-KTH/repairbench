diff --git a/tmp/6ef7a648-b86e-4513-a2a6-26d2600b893d_buggy.java b/tmp/30e09c7d-ebbf-4618-b8b3-43314789f6ac_fixed.java
index 3effef5..f7c4018 100644
--- a/tmp/6ef7a648-b86e-4513-a2a6-26d2600b893d_buggy.java
+++ b/tmp/30e09c7d-ebbf-4618-b8b3-43314789f6ac_fixed.java
@@ -1,73 +1,72 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
-        TokenBuffer tokens = new TokenBuffer(p, ctxt);
-        tokens.writeStartObject();
-
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
                     t = p.nextToken();
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         continue;
                     }
+                    // Handle remaining properties after creator invocation
                     while (t == JsonToken.FIELD_NAME) {
+                        String remainingPropName = p.getCurrentName();
                         p.nextToken();
-                        tokens.copyCurrentStructure(p);
+                        SettableBeanProperty prop = _beanProperties.find(remainingPropName);
+                        if (prop != null) {
+                            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+                        } else if (_ignorableProps != null && _ignorableProps.contains(remainingPropName)) {
+                            handleIgnoredProperty(p, ctxt, handledType(), remainingPropName);
+                        } else if (_anySetter != null) {
+                             buffer.bufferAnyProperty(_anySetter, remainingPropName, _anySetter.deserialize(p, ctxt));
+                        }
                         t = p.nextToken();
                     }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+
+                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, buffer.finish());
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
+
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
         // We hit END_OBJECT, so:
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
-        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, buffer.finish());
     }
\ No newline at end of file
