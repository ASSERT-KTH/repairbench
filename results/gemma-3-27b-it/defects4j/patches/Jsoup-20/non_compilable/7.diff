diff --git a/tmp/d9639da4-7e0a-46d8-952c-8701637add5a_buggy.java b/tmp/13214830-39dc-47a4-a2fc-8dc43eb60d08_fixed.java
index db19f52..5839430 100644
--- a/tmp/d9639da4-7e0a-46d8-952c-8701637add5a_buggy.java
+++ b/tmp/13214830-39dc-47a4-a2fc-8dc43eb60d08_fixed.java
@@ -1,32 +1,43 @@
     // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     charsetName = foundCharset;
                     byteData.rewind();
+                    try {
                         docData = Charset.forName(foundCharset).decode(byteData).toString();
+                    } catch (UnsupportedCharsetException e) {
+                        // Handle unsupported charset - fall back to UTF-8 or throw an exception
+                        System.err.println("Unsupported charset: " + foundCharset + ". Falling back to UTF-8.");
+                        docData = Charset.forName("UTF-8").decode(byteData).toString();
+                    }
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            try {
                 docData = Charset.forName(charsetName).decode(byteData).toString();
+            } catch (UnsupportedCharsetException e) {
+                // Handle unsupported charset - fall back to UTF-8 or throw an exception
+                System.err.println("Unsupported charset: " + charsetName + ". Falling back to UTF-8.");
+                docData = Charset.forName("UTF-8").decode(byteData).toString();
+            }
         }
         if (doc == null) {
             // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
             // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
             // into head mode
-
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
