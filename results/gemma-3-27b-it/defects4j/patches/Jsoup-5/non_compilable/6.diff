diff --git a/tmp/0d26648e-fa23-4e0c-b97a-31e7b6ae3649_buggy.java b/tmp/50f7d0b3-86af-455f-948b-5d1182794743_fixed.java
index 39dd8e7..45eaea4 100644
--- a/tmp/0d26648e-fa23-4e0c-b97a-31e7b6ae3649_buggy.java
+++ b/tmp/50f7d0b3-86af-455f-948b-5d1182794743_fixed.java
@@ -1,30 +1,37 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
         }
         if (key.length() != 0)
             return Attribute.createFromEncoded(key, value);
         else {
-            tq.consume();
+            // Previously: tq.consume();
+            // Handle cases like "<p =a>" where key is empty after consuming attribute key.
+            // This prevents StringIndexOutOfBoundsException
+            if (tq.remainingLength() > 0) {
+                tq.consume(); // Consume the invalid character
+            } else {
+                return null;
+            }
 
             return null;
         }
     }
\ No newline at end of file
