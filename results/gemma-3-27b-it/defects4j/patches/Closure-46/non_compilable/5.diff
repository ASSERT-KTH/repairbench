diff --git a/tmp/438aee32-766e-49f0-bbf8-47f3d501fccc_buggy.java b/tmp/e4cf784f-a52d-4190-af22-c394f792615e_fixed.java
index 46817a7..eacd12c 100644
--- a/tmp/438aee32-766e-49f0-bbf8-47f3d501fccc_buggy.java
+++ b/tmp/e4cf784f-a52d-4190-af22-c394f792615e_fixed.java
@@ -1,16 +1,29 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+      if (that.toMaybeRecordType().hasProperty(property)) {
+        JSType thatPropType = that.toMaybeRecordType().getPropertyType(property);
+        JSType thisPropType = getPropertyType(property);
+
+        if (thisPropType.isEquivalentTo(thatPropType)) {
+          builder.addProperty(property, thisPropType, getPropertyNode(property));
+        } else {
+          // If the types are not equivalent, add the union of the two types.
+          JSType unionType = registry.createUnionType(thisPropType, thatPropType);
+          builder.addProperty(property, unionType, getPropertyNode(property));
+        }
+      }
+    }
+
+    // Add properties from 'that' that are not present in 'this'
+    for (String property : that.toMaybeRecordType().getProperties()) {
+      if (!properties.containsKey(property)) {
+        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);
       }
     }
     return builder.build();
   }
\ No newline at end of file
