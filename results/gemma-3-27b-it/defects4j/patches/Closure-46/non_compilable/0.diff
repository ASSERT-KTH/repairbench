diff --git a/tmp/ed0fed2c-6ddc-474c-b6d2-1bca9ff45028_buggy.java b/tmp/f730c09c-fca9-4d77-a55d-98cc7c021316_fixed.java
index 46817a7..c6c902e 100644
--- a/tmp/ed0fed2c-6ddc-474c-b6d2-1bca9ff45028_buggy.java
+++ b/tmp/f730c09c-fca9-4d77-a55d-98cc7c021316_fixed.java
@@ -1,16 +1,33 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType thatRecord = that.toMaybeRecordType();
+
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+      if (thatRecord.hasProperty(property)) {
+        JSType thatPropertyType = thatRecord.getPropertyType(property);
+        JSType thisPropertyType = getPropertyType(property);
+
+        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {
+          builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+        } else {
+          // If the property exists but has different types, return the union type of the two types
+          JSType unionType = registry.createUnionType(thisPropertyType, thatPropertyType);
+          builder.addProperty(property, unionType, getPropertyNode(property));
         }
+      } else {
+        builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
       }
+    }
+
+    for (String property : thatRecord.getProperties().keySet()) {
+      if (!properties.containsKey(property)) {
+        builder.addProperty(property, thatRecord.getPropertyType(property), null);
+      }
+    }
+
     return builder.build();
   }
\ No newline at end of file
