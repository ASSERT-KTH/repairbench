diff --git a/tmp/b4ee6869-d8f6-4e0e-a1c1-95cce51f3b20_buggy.java b/tmp/18ac1414-2463-48ea-bd0f-3c021e016bb3_fixed.java
index 46817a7..0e88d2c 100644
--- a/tmp/b4ee6869-d8f6-4e0e-a1c1-95cce51f3b20_buggy.java
+++ b/tmp/18ac1414-2463-48ea-bd0f-3c021e016bb3_fixed.java
@@ -1,16 +1,28 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>();
+    allProperties.addAll(properties.keySet());
+    if (that.isRecordType()) {
+      allProperties.addAll(that.toMaybeRecordType().properties().keySet());
+    }
+
+    for (String property : allProperties) {
+      JSType type1 = getPropertyType(property);
+      JSType type2 = null;
+      if (that.isRecordType() && that.toMaybeRecordType().hasProperty(property)) {
+        type2 = that.toMaybeRecordType().getPropertyType(property);
+      }
+
+      if (type1 != null && type2 != null) {
+        JSType leastSupertype = type1.getLeastSupertype(type2);
+        if (leastSupertype != null) {
+          builder.addProperty(property, leastSupertype, null);
+        }
       }
     }
     return builder.build();
   }
\ No newline at end of file
