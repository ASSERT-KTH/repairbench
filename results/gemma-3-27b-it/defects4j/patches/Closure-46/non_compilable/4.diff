diff --git a/tmp/b1e3fe0a-dba5-4b88-998d-02eefc71950f_buggy.java b/tmp/aa8ed5eb-00ad-473c-ad46-def037a75ec6_fixed.java
index 46817a7..c6cd850 100644
--- a/tmp/b1e3fe0a-dba5-4b88-998d-02eefc71950f_buggy.java
+++ b/tmp/aa8ed5eb-00ad-473c-ad46-def037a75ec6_fixed.java
@@ -1,16 +1,27 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+      if (that.toMaybeRecordType().hasProperty(property)) {
+        JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+        JSType thisPropertyType = getPropertyType(property);
+
+        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {
+          builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+        } else {
+          // If the property exists in both but the types are not equivalent,
+          // then the least supertype is the union of the two types.
+          builder.addProperty(property, registry.createUnionType(thisPropertyType, thatPropertyType), getPropertyNode(property));
+        }
+      }
+    }
+    for (String property : that.toMaybeRecordType().getProperties()) {
+      if (!properties.containsKey(property)) {
+        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);
       }
     }
     return builder.build();
   }
\ No newline at end of file
