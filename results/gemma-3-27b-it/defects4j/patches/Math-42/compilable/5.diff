diff --git a/tmp/3ced688c-0a6d-45e2-a007-e09339142a82_buggy.java b/tmp/e8ece4f3-9ee7-424f-b777-46f0cfe9f7e0_fixed.java
index efa499e..18541aa 100644
--- a/tmp/3ced688c-0a6d-45e2-a007-e09339142a82_buggy.java
+++ b/tmp/e8ece4f3-9ee7-424f-b777-46f0cfe9f7e0_fixed.java
@@ -1,35 +1,35 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
               // if the basic row is found to be the objective function row
               // set the coefficient to 0 -> this case handles unconstrained 
               // variables that are still part of the objective function
+          if (basicRow == null) {
+              coefficients[i] = 0;
+          } else {
               if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+                  coefficients[i] = 0;
               } else {
                   basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+                  coefficients[i] = getEntry(basicRow, getRhsOffset());
+              }
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
