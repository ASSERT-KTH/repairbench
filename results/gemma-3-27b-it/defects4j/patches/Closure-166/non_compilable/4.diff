diff --git a/tmp/a0a5754e-90b9-43bc-b576-946803d0e8b5_buggy.java b/tmp/b4633c6c-5d05-4fd4-adb9-6cdf8704e0fc_fixed.java
index 5f96616..f95238c 100644
--- a/tmp/a0a5754e-90b9-43bc-b576-946803d0e8b5_buggy.java
+++ b/tmp/b4633c6c-5d05-4fd4-adb9-6cdf8704e0fc_fixed.java
@@ -1,20 +1,35 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isObjectType()) {
+      matchObjectTypeConstraint(constraint);
+    }
+  }
+
+  private void matchObjectTypeConstraint(JSType constraint) {
+    if (!(constraint instanceof JSType)) {
+      return;
+    }
+
+    for (String prop : constraint.getPropertyNames()) {
+      JSType propertyType = constraint.getPropertyType(prop);
+      if (propertyType != null) {
+        defineProperty(prop, propertyType, null);
+      }
     }
   }
\ No newline at end of file
