diff --git a/tmp/5c68d554-d84c-4154-8f52-7e119d532e4a_buggy.java b/tmp/91325ab1-0819-48ff-8063-99ee8da41346_fixed.java
index 5f96616..aa79f2e 100644
--- a/tmp/5c68d554-d84c-4154-8f52-7e119d532e4a_buggy.java
+++ b/tmp/91325ab1-0819-48ff-8063-99ee8da41346_fixed.java
@@ -1,20 +1,36 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isObjectType()) {
+        matchObjectTypeConstraint(constraint);
+    }
+  }
+
+  private void matchObjectTypeConstraint(JSType constraint) {
+    if (!(constraint instanceof ObjectType)) {
+      return;
+    }
+
+    ObjectType objectType = (ObjectType) constraint;
+    for (String propertyName : objectType.getPropertyNames()) {
+      JSType propertyType = objectType.getPropertyType(propertyName);
+      if (propertyType != null) {
+        addProperty(propertyName, propertyType);
+      }
     }
   }
\ No newline at end of file
