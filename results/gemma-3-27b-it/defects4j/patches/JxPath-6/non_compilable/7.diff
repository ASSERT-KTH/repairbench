diff --git a/tmp/77f42b30-b027-4ae5-a866-9a9622ae46b3_buggy.java b/tmp/319d3ac1-e226-4592-a264-a2579f52bff3_fixed.java
index f650982..313266c 100644
--- a/tmp/77f42b30-b027-4ae5-a866-9a9622ae46b3_buggy.java
+++ b/tmp/319d3ac1-e226-4592-a264-a2579f52bff3_fixed.java
@@ -1,42 +1,42 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
-        return equal(l, r);
+        return Objects.equals(l, r);
     }
\ No newline at end of file
