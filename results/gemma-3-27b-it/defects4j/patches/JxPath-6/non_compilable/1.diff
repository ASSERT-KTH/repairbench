diff --git a/tmp/8ba22511-1934-427b-8904-f81cef8d9546_buggy.java b/tmp/56354e7e-7f62-46be-a1c7-34f9d8f59152_fixed.java
index f650982..7dcedda 100644
--- a/tmp/8ba22511-1934-427b-8904-f81cef8d9546_buggy.java
+++ b/tmp/56354e7e-7f62-46be-a1c7-34f9d8f59152_fixed.java
@@ -1,42 +1,73 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
+
+    private boolean contains(Iterator iterator, Object obj) {
+        while (iterator.hasNext()) {
+            Object next = iterator.next();
+            if (equal(null, new SimpleNode(next), new SimpleNode(obj))) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean findMatch(Iterator l, Iterator r) {
+        while (l.hasNext() && r.hasNext()) {
+            Object left = l.next();
+            Object right = r.next();
+            if (equal(null, new SimpleNode(left), new SimpleNode(right))) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean equal(Object l, Object r) {
+        if (l == null && r == null) {
+            return true;
+        }
+        if (l == null || r == null) {
+            return false;
+        }
+        return l.equals(r);
+    }
\ No newline at end of file
