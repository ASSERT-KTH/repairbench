diff --git a/tmp/c1198f16-0902-46be-9c1e-67013d1c3b0b_buggy.java b/tmp/71b8e252-a76d-47ba-84c6-04bd450aa729_fixed.java
index 800e6e1..1bd2bf3 100644
--- a/tmp/c1198f16-0902-46be-9c1e-67013d1c3b0b_buggy.java
+++ b/tmp/71b8e252-a76d-47ba-84c6-04bd450aa729_fixed.java
@@ -1,32 +1,51 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.OBJECTLIT:
+          // Handle object literals to define properties.
+          defineObjectProperties(n, parent);
+          break;
+      }
+    }
+
+    private void defineObjectProperties(Node n, Node parent) {
+      for (Node child : n.children()) {
+        if (child.getType() == Token.STRING) {
+          String propertyName = child.getString();
+          Node value = child.getNext();
+          if (value != null) {
+            JSType propertyType = getType(value);
+            if (propertyType != null) {
+              scope.declare(propertyName, propertyType, null);
+            }
+          }
+        }
       }
     }
\ No newline at end of file
