diff --git a/tmp/9d2f6a85-5c77-4614-a26d-ff9e13e0fde1_buggy.java b/tmp/06d111ad-2793-4f6c-8c13-bd8bdd6f036d_fixed.java
index 5f1dcf2..a341341 100644
--- a/tmp/9d2f6a85-5c77-4614-a26d-ff9e13e0fde1_buggy.java
+++ b/tmp/06d111ad-2793-4f6c-8c13-bd8bdd6f036d_fixed.java
@@ -1,41 +1,58 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    simplex = new RealPointValuePair[]{expanded};
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[]{contracted};
 
                 // check convergence
                 return;
+            } else {
+                //compute the shrink simplex
+                final RealPointValuePair[] shrinkedSimplex = shrinkSimplex(original, best) ;
+                simplex = shrinkedSimplex;
+                return;
+
+            }
+
         }
 
     }
 
+    private RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] original, final RealPointValuePair best) throws FunctionEvaluationException {
+        RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];
+        for(int i = 0; i < original.length; i++){
+            shrinkedSimplex[i] = new RealPointValuePair(best.getPoint(), best.getValue());
+        }
+        return shrinkedSimplex;
     }
\ No newline at end of file
