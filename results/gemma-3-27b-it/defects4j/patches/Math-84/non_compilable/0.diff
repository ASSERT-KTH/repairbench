diff --git a/tmp/bc6c4ce4-7285-437b-8b08-872dc470a534_buggy.java b/tmp/cca9dc2a-f660-45dc-851a-79372d46a788_fixed.java
index 5f1dcf2..f5ec6a5 100644
--- a/tmp/bc6c4ce4-7285-437b-8b08-872dc470a534_buggy.java
+++ b/tmp/cca9dc2a-f660-45dc-851a-79372d46a788_fixed.java
@@ -1,41 +1,58 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (!isConvergenceReached()) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    simplex = new RealPointValuePair[] { expanded };
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] { contracted };
 
                 // check convergence
                 return;
+            } else {
+                //compute the reduced simplex
+                final RealPointValuePair reduced = evaluateNewSimplex(original, rho, comparator);
+                if (comparator.compare(reduced, best) < 0) {
+                    simplex = new RealPointValuePair[] { reduced };
+                    return;
+                } else {
+                    //shrink the simplex
+                    for(int i = 1; i < simplex.length; ++i) {
+                        simplex[i] = new RealPointValuePair(best.getPoint()[0] + (simplex[i].getPoint()[0] - best.getPoint()[0]) * sigma,
+                                best.getPoint()[1] + (simplex[i].getPoint()[1] - best.getPoint()[1]) * sigma);
                     }
+                }
+            }
+
 
         }
 
     }
\ No newline at end of file
