diff --git a/tmp/d0d0e612-2e36-4cfc-937b-4ed34215f7a8_buggy.java b/tmp/9acd808e-31e0-4ff9-9d23-df505cec76cd_fixed.java
index 5f1dcf2..b744566 100644
--- a/tmp/d0d0e612-2e36-4cfc-937b-4ed34215f7a8_buggy.java
+++ b/tmp/9acd808e-31e0-4ff9-9d23-df505cec76cd_fixed.java
@@ -1,41 +1,59 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    simplex = new RealPointValuePair[] {best, reflected, expanded};
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] {best, contracted};
 
                 // check convergence
                 return;
             }
+            if (comparator.compare(contracted, reflected) < 0) {
+                simplex = new RealPointValuePair[] {best, contracted};
+            } else {
+                // shrink the simplex towards the best point
+                for (int i = 1; i < simplex.length; i++) {
+                    simplex[i] = new RealPointValuePair(
+                            best.getPoint()[0] + 0.5 * (simplex[i].getPoint()[0] - best.getPoint()[0]),
+                            best.getPoint()[1] + 0.5 * (simplex[i].getPoint()[1] - best.getPoint()[1])
+                    );
+                }
+            }
+
+            if (getIterations() >= getMaxIterations()) {
+                throw new OptimizationException("Maximal number of iterations exceeded");
+            }
 
         }
 
     }
\ No newline at end of file
