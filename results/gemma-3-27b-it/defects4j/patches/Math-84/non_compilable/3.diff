diff --git a/tmp/1a80cdcd-c345-4c6e-99b1-751ee6801e8a_buggy.java b/tmp/d202b980-6a53-4f75-a9d0-495067564792_fixed.java
index 5f1dcf2..74301f7 100644
--- a/tmp/1a80cdcd-c345-4c6e-99b1-751ee6801e8a_buggy.java
+++ b/tmp/d202b980-6a53-4f75-a9d0-495067564792_fixed.java
@@ -1,41 +1,59 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    simplex = new RealPointValuePair[]{expanded};
                 }
 
+                if (isConvergenceReached(best, simplex[0], comparator)) {
                     return;
+                }
+                continue;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[]{contracted};
+                if (isConvergenceReached(best, simplex[0], comparator)) {
+                    return;
+                }
+            } else {
+                // compute the shrunk simplex
+                final RealPointValuePair shrunk = evaluateNewSimplex(original, rho, comparator);
+                simplex = new RealPointValuePair[]{shrunk};
 
-            // check convergence
+                if (isConvergenceReached(best, simplex[0], comparator)) {
                     return;
                 }
+            }
+
+            if (getIterations() >= getMaxIterations()) {
+                throw new org.apache.commons.math.optimization.OptimizationException("Maximal number of iterations (" + getMaxIterations() + ") exceeded");
+            }
 
         }
 
     }
\ No newline at end of file
