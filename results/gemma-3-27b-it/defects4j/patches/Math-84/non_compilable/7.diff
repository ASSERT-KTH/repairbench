diff --git a/tmp/3cbcdf2d-0e7d-4f69-a29e-90b8ff005634_buggy.java b/tmp/8d1fd74c-03ef-45f6-918d-8f3a06f6cd13_fixed.java
index 5f1dcf2..dce1359 100644
--- a/tmp/3cbcdf2d-0e7d-4f69-a29e-90b8ff005634_buggy.java
+++ b/tmp/8d1fd74c-03ef-45f6-918d-8f3a06f6cd13_fixed.java
@@ -1,41 +1,53 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    simplex = new RealPointValuePair[] {expanded};
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
+                simplex = new RealPointValuePair[] {contracted};
                 // check convergence
                 return;
             }
-
+            if (comparator.compare(contracted, reflected) < 0) {
+                simplex = new RealPointValuePair[] {contracted};
+                return;
+            }
+            // shrink the simplex
+            for (int i = 1; i < simplex.length; i++) {
+                simplex[i] = new RealPointValuePair(
+                    0.5 * (simplex[0].getPoint()[0] + simplex[i].getPoint()[0]),
+                    0.5 * (simplex[0].getPoint()[1] + simplex[i].getPoint()[1])
+                );
+            }
         }
 
     }
\ No newline at end of file
