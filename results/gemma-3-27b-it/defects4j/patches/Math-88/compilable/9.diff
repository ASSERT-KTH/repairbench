diff --git a/tmp/7d6f0b04-ccd2-4f47-b769-3864a5be7609_buggy.java b/tmp/17510bc0-577a-48a3-b8f5-a16e084b2244_fixed.java
index 544303b..37329fd 100644
--- a/tmp/7d6f0b04-ccd2-4f47-b769-3864a5be7609_buggy.java
+++ b/tmp/17510bc0-577a-48a3-b8f5-a16e084b2244_fixed.java
@@ -1,29 +1,15 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
