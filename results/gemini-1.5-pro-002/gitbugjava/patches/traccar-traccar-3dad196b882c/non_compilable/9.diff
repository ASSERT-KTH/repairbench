diff --git a/tmp/2c258a71-a39c-4329-9ef6-53143ed3b76a_buggy.java b/tmp/5452fb9b-1d8f-4b09-ad91-255c11b8be8c_fixed.java
index c6164f1..c0b98cb 100644
--- a/tmp/2c258a71-a39c-4329-9ef6-53143ed3b76a_buggy.java
+++ b/tmp/5452fb9b-1d8f-4b09-ad91-255c11b8be8c_fixed.java
@@ -1,116 +1,156 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
-                .setYear(Integer.parseInt(time.substring(0, 2)))
+                .setYear(Integer.parseInt(time.substring(0, 2)) + 2000)
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() >= 4) {
             int subtype = buf.readUnsignedShort();
             int length = buf.readUnsignedShort() - 4;
+            if (length > buf.readableBytes()) {
+                length = buf.readableBytes();
+            }
             switch (subtype) {
                 case 0x0001:
+                    if (buf.readableBytes() >= 1) {
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
+                    }
+                    if (buf.readableBytes() >= 2) {
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
+                    }
+                    if (buf.readableBytes() >= 1) {
                         position.set("averageSpeed", buf.readUnsignedByte());
+                    }
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // interval fuel consumption
+                    }
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                    }
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
+                    }
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                    }
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
+                    }
+                    if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // trip id
+                    }
                     break;
                 case 0x0005:
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
+                    }
+                    if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // run time
+                    }
                     break;
                 case 0x0009:
-                    position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                    position.set(Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                     break;
                 case 0x0011:
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    }
                     break;
                 case 0x0014:
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
+                    }
+                    if (buf.readableBytes() >= 1) {
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
+                    }
+                    if (buf.readableBytes() >= 1) {
                         position.set("airTemp", buf.readUnsignedByte() - 40);
+                    }
+                    if (buf.readableBytes() >= 2) {
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
+                    }
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    }
                     break;
                 case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    String[] cells = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String cell : cells) {
                         String[] values = cell.split("@");
+                        if (values.length == 4) {
                             network.addCellTower(CellTower.from(
                                     Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                     Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                         }
+                    }
                     break;
                 case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    String[] points = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String point : points) {
                         String[] values = point.split("@");
+                        if (values.length == 2) {
                             network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                         }
+                    }
                     break;
                 default:
                     buf.skipBytes(length);
                     break;
             }
         }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+        if (!network.getCellTowers().isEmpty() || !network.getWifiAccessPoints().isEmpty()) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
