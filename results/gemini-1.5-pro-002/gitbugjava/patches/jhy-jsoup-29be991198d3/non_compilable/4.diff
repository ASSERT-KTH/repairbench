diff --git a/tmp/820bf3de-eb4d-42d1-834e-b80fddd24a43_buggy.java b/tmp/62a2e8a3-e8b6-4809-8153-ac234c074924_fixed.java
index 862c60c..52dbd20 100644
--- a/tmp/820bf3de-eb4d-42d1-834e-b80fddd24a43_buggy.java
+++ b/tmp/62a2e8a3-e8b6-4809-8153-ac234c074924_fixed.java
@@ -1,25 +1,29 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            if (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) {
                 indent(accum, depth, out);
+            } else if (out.outline() && siblingNodes().size() > 0 && !isBlank()) {
+                // changed from && to ||
+                if (!(parent != null && parent.tag().isInline()))
+                    indent(accum, depth, out);
+            }
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
