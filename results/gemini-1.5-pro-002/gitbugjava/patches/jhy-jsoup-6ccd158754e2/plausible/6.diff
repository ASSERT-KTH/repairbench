diff --git a/tmp/2229a716-71b4-49e2-afe5-6ea2acbb7278_buggy.java b/tmp/253d9695-e21f-4821-89f0-ab4bedb3bfbf_fixed.java
index 23f078d..8ac0c5e 100644
--- a/tmp/2229a716-71b4-49e2-afe5-6ea2acbb7278_buggy.java
+++ b/tmp/253d9695-e21f-4821-89f0-ab4bedb3bfbf_fixed.java
@@ -1,14 +1,23 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
         for (int i = 0; i < s.length(); i++) {
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+                byte[] bytes = new String(Character.toChars(c)).getBytes(UTF_8.name());
+                for (byte b : bytes) {
+                    char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));
+                    char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));
+                    sb.append('%');
+                    sb.append(hex1);
+                    sb.append(hex2);
+                }
+                if (Character.charCount(c) == 2) {
+                    i++;
+                }
             } else {
                 sb.append((char) c);
             }
         }
     }
