diff --git a/tmp/751a6198-55e1-4e3c-9abe-8b3f87d806ce_buggy.java b/tmp/e7e02719-e028-4f79-a4f4-219a1013c9c5_fixed.java
index 016a7f6..946dfaf 100644
--- a/tmp/751a6198-55e1-4e3c-9abe-8b3f87d806ce_buggy.java
+++ b/tmp/e7e02719-e028-4f79-a4f4-219a1013c9c5_fixed.java
@@ -1,29 +1,34 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
+            else if (prettyPrint && parent != null && siblingIndex > 0 && prev instanceof TextNode && !isBlank) {
+                // for pretty print, where sibling > 0 and previous is text, and current is not blank, add a space
+                accum.append(" ");
+            }
+
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
