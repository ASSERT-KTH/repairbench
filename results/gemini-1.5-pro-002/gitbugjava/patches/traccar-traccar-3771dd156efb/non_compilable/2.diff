diff --git a/tmp/77f8782c-2fe6-4aa5-9474-a28a1188a0e6_buggy.java b/tmp/2339a9eb-08b4-4590-ba19-9789b50356a9_fixed.java
index 3da904d..21c5aff 100644
--- a/tmp/77f8782c-2fe6-4aa5-9474-a28a1188a0e6_buggy.java
+++ b/tmp/2339a9eb-08b4-4590-ba19-9789b50356a9_fixed.java
@@ -1,73 +1,78 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
         String[] values = parser.next().split(",");
         int index = 0;
 
         Network network = new Network();
 
         int cellCount = Integer.parseInt(values[index++]);
         if (cellCount > 0) {
             index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            if (index < values.length) { // Check if there are enough values
+                int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index].replace("FFFF", "0")) : 0; //fix
+                index++;
+                int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index].replace("FFFF", "0")) : 0; //fix
+                index++;
+
 
                 for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                    int lac = Integer.parseInt(values[index++].replace("FFFF", "0")); //fix
+                    int cid = Integer.parseInt(values[index++].replace("FFFE", "0")); //fix
                     String rssi = values[index++];
                     if (!rssi.isEmpty()) {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                     } else {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                     }
                 }
             }
+        }
 
         if (index < values.length && !values[index].isEmpty()) {
             int wifiCount = Integer.parseInt(values[index++]);
 
             for (int i = 0; i < wifiCount; i++) {
                 index += 1; // wifi name
                 String macAddress = values[index++];
                 String rssi = values[index++];
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                 }
             }
         }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+        if (!network.getCellTowers().isEmpty() || !network.getWifiAccessPoints().isEmpty()) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
