diff --git a/tmp/b01d1c39-0312-48ee-adb4-7b8d91a91d5c_buggy.java b/tmp/d23875fa-1c10-44f3-ab75-45aaf734762e_fixed.java
index 3da904d..6cb02b8 100644
--- a/tmp/b01d1c39-0312-48ee-adb4-7b8d91a91d5c_buggy.java
+++ b/tmp/d23875fa-1c10-44f3-ab75-45aaf734762e_fixed.java
@@ -1,73 +1,94 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
         String[] values = parser.next().split(",");
         int index = 0;
 
         Network network = new Network();
 
         int cellCount = Integer.parseInt(values[index++]);
         if (cellCount > 0) {
             index += 1; // timing advance
+            if (index < values.length) { // Check if there are enough values
                 int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
                 int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
 
-            for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                for (int i = 0; i < cellCount && index < values.length; i++) { // check index bound
+                    int lac = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+                    int cid = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+                    if (index < values.length) {
                         String rssi = values[index++];
                         if (!rssi.isEmpty()) {
+                            try {
                                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                            } catch (NumberFormatException e) {
+                                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                            }
                         } else {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                         }
                     }
                 }
+            }
+        }
+
 
         if (index < values.length && !values[index].isEmpty()) {
             int wifiCount = Integer.parseInt(values[index++]);
 
-            for (int i = 0; i < wifiCount; i++) {
+            for (int i = 0; i < wifiCount && index < values.length; i++) {
+                if (index < values.length) {
                     index += 1; // wifi name
+                }
+                if (index < values.length) {
                     String macAddress = values[index++];
+                    if (index < values.length) {
                         String rssi = values[index++];
+
                         if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+                            try {
                                 network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                            } catch (NumberFormatException e) {
+                                // ignore invalid rssi
                             }
                         }
                     }
+                }
+
+            }
+        }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+        if (!network.getCellTowers().isEmpty() || !network.getWifiAccessPoints().isEmpty()) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
