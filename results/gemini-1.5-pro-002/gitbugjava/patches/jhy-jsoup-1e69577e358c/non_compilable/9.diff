diff --git a/tmp/6a0990f9-efda-46cc-a346-631ffe584c13_buggy.java b/tmp/c43ad3ff-68b5-4229-931f-94be837023a8_fixed.java
index c9c77a4..bf82d87 100644
--- a/tmp/6a0990f9-efda-46cc-a346-631ffe584c13_buggy.java
+++ b/tmp/c43ad3ff-68b5-4229-931f-94be837023a8_fixed.java
@@ -1,35 +1,36 @@
     URL build() {
         try {
             // use the URI class to encode non-ascii in path
+            String path = u.getPath();
             URI uri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
                 IDN.toASCII(decodePart(u.getHost())), // puny-code
                 u.getPort(),
-                decodePart(u.getPath()),
+                path == null ? null : decodePart(path), // decode path if it's not null
                 null, null // query and fragment appended later so as not to encode
             );
 
             String normUrl = uri.toASCIIString();
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
             u =  new URL(normUrl);
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
