diff --git a/tmp/28372cfa-179b-4aec-94a8-2abc78e004f3_buggy.java b/tmp/517cd193-b400-4f56-9690-846900e094cc_fixed.java
index c9c77a4..c8f131f 100644
--- a/tmp/28372cfa-179b-4aec-94a8-2abc78e004f3_buggy.java
+++ b/tmp/517cd193-b400-4f56-9690-846900e094cc_fixed.java
@@ -1,35 +1,26 @@
     URL build() {
         try {
             // use the URI class to encode non-ascii in path
-            URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
-            );
+            String protocol = u.getProtocol();
+            String userInfo = u.getUserInfo();
+            String host = IDN.toASCII(decodePart(u.getHost())); // puny-code
+            int port = u.getPort();
+            String path = u.getPath(); // Don't decode the path
+            String query = u.getQuery();
+            String ref = u.getRef();
+
+            URI uri = new URI(protocol, userInfo, host, port, path, query, ref);
 
             String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
-                if (q != null) {
-                    sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
-                }
-                if (u.getRef() != null) {
-                    sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
-                }
-                normUrl = StringUtil.releaseBuilder(sb);
-            }
+
             u = new URL(normUrl);
+
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
\ No newline at end of file
