diff --git a/tmp/a36775c4-05a6-46d6-a542-abbb28f4f321_buggy.java b/tmp/482b1c7b-fdcf-43d9-bc34-2b97fa166175_fixed.java
index 10616db..76c4e57 100644
--- a/tmp/a36775c4-05a6-46d6-a542-abbb28f4f321_buggy.java
+++ b/tmp/482b1c7b-fdcf-43d9-bc34-2b97fa166175_fixed.java
@@ -1,19 +1,32 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
-            return super.add(partial, fieldIndex, values, valueToAdd);
+            int[] newValues = values.clone();
+            newValues[fieldIndex] = partial.getFieldType(fieldIndex).getField(iChronology).add(partial, fieldIndex, values, valueToAdd)[fieldIndex];
+            
+            // Adjust day of month if necessary
+            if (DateTimeUtils.isContiguous(partial)) {
+                return newValues;
+            } else {
+                DateTimeField field = partial.getFieldType(0).getField(iChronology);
+                int max = field.getMaximumValue(partial, newValues);
+                if (newValues[0] > max) {
+                    newValues[0] = max;
+                }
+
+                return newValues;
+             }
         }
     }
