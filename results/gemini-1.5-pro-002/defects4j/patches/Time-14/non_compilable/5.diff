diff --git a/tmp/ad379f5a-b641-4a78-b601-5b64c8d70a96_buggy.java b/tmp/4fe9f31e-61f1-4dda-bf65-3b7bc939cc24_fixed.java
index 10616db..ee1cb01 100644
--- a/tmp/ad379f5a-b641-4a78-b601-5b64c8d70a96_buggy.java
+++ b/tmp/4fe9f31e-61f1-4dda-bf65-3b7bc939cc24_fixed.java
@@ -1,19 +1,28 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
-            return super.add(partial, fieldIndex, values, valueToAdd);
+            int[] newValues = values.clone();
+            for (int i = 0; i < partial.size(); i++) {
+                DateTimeField field = partial.getFieldType(i).getField(iChronology);
+                if (i == fieldIndex) {
+                    newValues[i] = field.add(newValues[i], valueToAdd);
+                }
+            }
+            // may need to adjust smaller fields
+            iChronology.validate(partial, newValues);
+            return newValues;
         }
     }
