diff --git a/tmp/d80c11e1-cee0-457c-a3f6-14d34dc8a506_buggy.java b/tmp/1fe9d04c-414c-4307-aefa-fc548e0af252_fixed.java
index 10616db..90a0348 100644
--- a/tmp/d80c11e1-cee0-457c-a3f6-14d34dc8a506_buggy.java
+++ b/tmp/1fe9d04c-414c-4307-aefa-fc548e0af252_fixed.java
@@ -1,19 +1,34 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
-            return super.add(partial, fieldIndex, values, valueToAdd);
+            int[] newValues = values.clone();
+            for (int i = 0; i < partial.size(); i++) {
+                DateTimeField field = partial.getFieldType(i).getField(iChronology);
+                if (i == fieldIndex) {
+                    newValues[i] = field.add(newValues[i], valueToAdd);
+                }
+            }
+             // may need to adjust smaller fields
+            for (int i = fieldIndex + 1; i < newValues.length; i++) {
+                DateTimeField field = partial.getFieldType(i).getField(iChronology);
+                int max = field.getMaximumValue(partial.getFieldType(0).getField(iChronology).set(0, newValues[0]), newValues);
+                if (newValues[i] > max) {
+                    newValues[i] = max;
+                }
+            }
+            return newValues;
+
         }
     }
