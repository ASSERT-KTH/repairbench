diff --git a/tmp/24d60e13-3441-4b33-9feb-eb58e05d76c1_buggy.java b/tmp/e525f7a5-70a5-46c0-918d-1565191e530a_fixed.java
index 10616db..8e12d62 100644
--- a/tmp/24d60e13-3441-4b33-9feb-eb58e05d76c1_buggy.java
+++ b/tmp/e525f7a5-70a5-46c0-918d-1565191e530a_fixed.java
@@ -1,19 +1,29 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            int[] result = iChronology.get(partial, instant);
+            // may need to adjust day to last valid day of month
+            // to handle 2004-02-29 + 48 months -> 2008-02-29
+            if (fieldIndex == 0 && partial.size() == 2) {
+                int month = result[0];
+                int day = result[1];
+                int maxDay = iChronology.dayOfMonth().getMaximumValue(new LocalDate(iChronology.year().get(instant), month, 1, iChronology).toDateMidnight().getMillis());
+                if (day > maxDay) {
+                    result[1] = maxDay;
+                }
+            }
+            return result;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
