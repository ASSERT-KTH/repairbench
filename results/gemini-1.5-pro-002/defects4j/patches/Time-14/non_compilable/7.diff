diff --git a/tmp/00c36c53-489c-4139-8f3e-cf65eb42986d_buggy.java b/tmp/3fffa210-bcf7-44de-92df-093c2f1aed7a_fixed.java
index 10616db..b9ee4a3 100644
--- a/tmp/00c36c53-489c-4139-8f3e-cf65eb42986d_buggy.java
+++ b/tmp/3fffa210-bcf7-44de-92df-093c2f1aed7a_fixed.java
@@ -1,19 +1,28 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            int[] result = iChronology.get(partial, instant);
+            // may need to adjust day to last valid value if adding to month or year
+            if (fieldIndex == 0 || fieldIndex == 1) {  // month or year
+                DateTimeField field = partial.getFieldType(0).getField(iChronology);
+                int max = field.getMaximumValue(instant, result);
+                if (result[0] > max) {
+                    result[0] = max;
+                }
+            }
+            return result;
+
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
