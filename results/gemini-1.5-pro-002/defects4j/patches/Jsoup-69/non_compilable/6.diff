diff --git a/tmp/2c5b5577-d0b7-4445-8ff0-bfae011c1833_buggy.java b/tmp/b38b64fd-8505-41e4-a589-50395f7a5df7_fixed.java
index e69de29..2962d22 100644
--- a/tmp/2c5b5577-d0b7-4445-8ff0-bfae011c1833_buggy.java
+++ b/tmp/b38b64fd-8505-41e4-a589-50395f7a5df7_fixed.java
@@ -0,0 +1,162 @@
+package org.jsoup.nodes;
+
+import org.jsoup.Connection;
+import org.jsoup.helper.Validate;
+import org.jsoup.parser.Tag;
+import org.jsoup.select.Elements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * A HTML Form Element provides ready access to the form fields/elements.
+ */
+public class FormElement extends Element {
+    private static final String _ENC_TYPE = "enctype";
+    private static final String _ACTION = "action";
+    private static final String _METHOD = "method";
+
+    /**
+     * Create a new, empty form element.
+     * @param tag form tag
+     * @param baseUri base uri
+     * @see org.jsoup.Jsoup#createFormElement(String, String)
+     */
+    public FormElement(Tag tag, String baseUri, Attributes attributes) {
+        super(tag, baseUri, attributes);
+    }
+
+    /**
+     * Get the form's absolute action URI.
+     * @return absolute URI
+     */
+    public String action() {
+        return absUrl(_ACTION);
+    }
+
+    /**
+     * Set the form's absolute action URI.
+     * @param actionURI absolute URI
+     */
+    public void action(String actionURI) {
+        attr(_ACTION, actionURI);
+    }
+
+    /**
+     * Get the form's method.
+     * @return form method
+     */
+    public String method() {
+        return attr(_METHOD);
+    }
+
+    /**
+     * Set the form's method.
+     * @param method form method
+     */
+    public void method(String method) {
+        attr(_METHOD, method);
+    }
+
+    /**
+     * Get the form's encoding type.
+     * @return the form's encoding type
+     */
+    public String encType() {
+        return attr(_ENC_TYPE);
+    }
+
+    /**
+     * Set the form's encoding type.
+     * @param encType the form's encoding type
+     */
+    public void encType(String encType) {
+        attr(_ENC_TYPE, encType);
+    }
+
+    /**
+     * Get all the form's input elements.
+     * @return all the form's input elements.
+     */
+    public Elements elements() {
+        return select("input, textarea, select, button");
+    }
+
+    /**
+     * Get the data that this form submits. This is effectively a map of key=value pairs.
+     * @return a list of key vals
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // iterate the form control elements and accumulate their values
+        for (Element el : elements()) {
+            if (!el.tag().isFormSubmittable()) continue; // contents of submit inputs don't go into data
+            String name = el.attr("name");
+            if (name.length() == 0) continue;
+            String type = el.attr("type");
+
+            if ("select".equals(el.tagName())) {
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element option: options) {
+                    data.add(KeyVal.create(name, option.val()));
+                    set = true;
+                }
+                if (!set) { // fallback to first if none selected
+                    Element option = el.select("option").first();
+                    if (option != null)
+                        data.add(KeyVal.create(name, option.val()));
+                }
+            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                // only add checkbox or radio if they have the checked attribute
+                if (el.hasAttr("checked")) {
+                    data.add(KeyVal.create(name, el.val()));
+                }
+            } else {
+                data.add(KeyVal.create(name, el.val()));
+            }
+        }
+        return data;
+    }
+
+
+    @Override
+    public String toString() {
+        return super.toString();
+    }
+
+    private static class KeyVal implements Connection.KeyVal {
+        private String key;
+        private String value;
+
+        public static KeyVal create(String key, String value) {
+            return new KeyVal().key(key).value(value);
+        }
+
+        public KeyVal key(String key) {
+            Validate.notEmpty(key);
+            this.key = key;
+            return this;
+        }
+
+        public String key() {
+            return key;
+        }
+
+        public KeyVal value(String value) {
+            Validate.notNull(value);
+            this.value = value;
+            return this;
+        }
+
+        public String value() {
+            return value;
+        }
+
+        @Override
+        public String toString() {
+            return key + "=" + value;
+        }
+    }
+}
\ No newline at end of file
