diff --git a/tmp/b91a71fb-958c-46ac-a6bf-c5d6d1c7d4a9_buggy.java b/tmp/d71de8fd-0504-4e18-aa63-f22ba16e2e39_fixed.java
index e69de29..f61103c 100644
--- a/tmp/b91a71fb-958c-46ac-a6bf-c5d6d1c7d4a9_buggy.java
+++ b/tmp/d71de8fd-0504-4e18-aa63-f22ba16e2e39_fixed.java
@@ -0,0 +1,125 @@
+package org.jsoup.nodes;
+
+import org.jsoup.Connection;
+import org.jsoup.helper.Validate;
+import org.jsoup.select.Elements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * A HTML Form Element.
+ */
+public class FormElement extends Element {
+    private static final String _formKey = "___jsoup-key"; // only used for forms without names, to support multiple forms
+
+    /**
+     * Create a new, empty form element.
+     * @param tag form tag
+     * @param baseUri the base URI
+     * @param attributes initial attributes
+     */
+    public FormElement(Tag tag, String baseUri, Attributes attributes) {
+        super(tag, baseUri, attributes);
+    }
+
+    /**
+     * Get the form's absolute action URL.
+     * @return absolute action URL
+     */
+    public String absoluteAction() {
+        return absUrl("action");
+    }
+
+    /**
+     * Get the form's method.
+     * @return form method
+     */
+    public String method() {
+        return hasAttr("method") ? attr("method").toLowerCase() : "get";
+    }
+
+    /**
+     * Get the form's action URL.
+     * @return action URL
+     */
+    public String action() {
+        return attr("action");
+    }
+
+    /**
+     * Set the form's action URL.
+     * @param action action URL to set
+     * @return this form element, for chaining
+     */
+    public FormElement action(String action) {
+        attr("action", action);
+        return this;
+    }
+
+    /**
+     * Get the form data from this form. The data is encoded as a query string.
+     * @return the encoded form data
+     */
+    public String formData() {
+        StringBuilder sb = new StringBuilder();
+
+        // data only contains form element values if they have a name attr
+        for (Element el : elements()) {
+            if (el.tag().isFormSubmittable() && el.hasAttr("name"))
+                sb.append(el.attr("name")).append("=").append(el.val()).append("&");
+        }
+
+        // if there is no name, or value is blank, no keyval is encoded
+        if (sb.length() > 0)
+            return sb.substring(0, sb.length() - 1); // trim trailing &
+        else
+            return "";
+    }
+
+    /**
+     * Get the data from this form. The data is a list of key vals.
+     * @return a list of key value pairs representing the form data
+     */
+    public List<Connection.KeyVal> formDataAsList() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // keyvals only for form elements with a name
+        for (Element el : elements()) {
+            if (el.tag().isFormSubmittable() && el.hasAttr("name")) {
+                String name = el.attr("name");
+                String value = el.val();
+                data.add(HttpConnection.KeyVal.create(name, value));
+            }
+        }
+        return data;
+
+    }
+
+    /**
+     * Add a form key/val pair.
+     * @param key name of the element
+     * @param value value of the element
+     * @return this form element, for chaining
+     */
+    public FormElement addValue(String key, String value) {
+        Elements els = elements();
+
+        Element el = els.selectFirst("[name=" + key + "]");
+
+        if (el != null)
+            el.val(value);
+        else {
+            Element input = new Element(Tag.valueOf("input"), baseUri());
+            input.attr("type", "hidden").attr("name", key).attr("value", value);
+            appendChild(input);
+        }
+
+        return this;
+    }
+
+    @Override
+    public String toString() {
+        return outerHtml();
+    }
+}
