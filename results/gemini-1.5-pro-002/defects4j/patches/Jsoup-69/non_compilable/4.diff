diff --git a/tmp/911d5a82-5e38-4c3d-9558-e27e292e3e13_buggy.java b/tmp/6dcd5370-78e0-49cc-b3f8-15c2ac7edab4_fixed.java
index e69de29..7d8006b 100644
--- a/tmp/911d5a82-5e38-4c3d-9558-e27e292e3e13_buggy.java
+++ b/tmp/6dcd5370-78e0-49cc-b3f8-15c2ac7edab4_fixed.java
@@ -0,0 +1,117 @@
+import org.jsoup.Connection;
+import org.jsoup.helper.Validate;
+import org.jsoup.nodes.Element;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.jsoup.Connection.KeyVal.create;
+
+/**
+ * A HTML Form Element provides ready access to the form's data and source.
+ *
+ * @author Jonathan Hedley
+ */
+public class FormElement extends Element {
+    private static final String _ENC_TYPE = "enctype";
+    private static final String _ACTION = "action";
+    private static final String _METHOD = "method";
+
+    /**
+     * Create a new, empty form element.
+     *
+     * @param tag       form tag
+     * @param baseUri the base URI
+     * @param attributes initial attributes
+     */
+    public FormElement(Tag tag, String baseUri, Attributes attributes) {
+        super(tag, baseUri, attributes);
+    }
+
+    /**
+     * Get the form's absolute action URI.
+     *
+     * @return absolute URI
+     */
+    public String action() {
+        return absUrl(_ACTION);
+    }
+
+    /**
+     * Set the form's absolute action URI.
+     *
+     * @param actionURI absolute URI
+     */
+    public void action(String actionURI) {
+        attr(_ACTION, actionURI);
+    }
+
+    /**
+     * Get the form's method.
+     *
+     * @return form method
+     */
+    public String method() {
+        return hasAttr(_METHOD) ? attr(_METHOD).toLowerCase() : "get";
+    }
+
+    /**
+     * Set the form's method.
+     *
+     * @param method form method
+     */
+    public void method(String method) {
+        attr(_METHOD, method);
+    }
+
+    /**
+     * Get the form's encoding type.
+     *
+     * @return the form's encoding type
+     */
+    public String enctype() {
+        return attr(_ENC_TYPE);
+    }
+
+    /**
+     * Set the form's encoding type.
+     *
+     * @param enctype the encoding type
+     */
+    public void enctype(String enctype) {
+        attr(_ENC_TYPE, enctype);
+    }
+
+    /**
+     * Get the list of data fields associated with this form. Use {@link #formData()} to get the data as a list of key vals.
+     *
+     * @return a list of input elements that contribute to form data.
+     */
+    public List<Element> elements() {
+        return select("input[type!=submit], textarea, select");
+    }
+
+    /**
+     * Get the data associated with this form as a list of {@link Connection.KeyVal} instances.
+     *
+     * @return a list of key value pairs representing the form's data.
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // named elements first, then unnamed
+        for (Element el : elements()) {
+            if (el.tag().isFormSubmittable()) { // since they may be removed from form.
+                String name = el.attr("name");
+                if (name.length() > 0)
+                    data.addAll(el.formData());
+            }
+        }
+        return data;
+    }
+
+    @Override
+    public String toString() {
+        return String.format("<form action=\"%s\" method=\"%s\">%s</form>", action(), method(), super.toString());
+    }
+}
