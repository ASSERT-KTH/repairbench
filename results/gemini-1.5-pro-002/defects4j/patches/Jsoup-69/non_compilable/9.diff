diff --git a/tmp/4f644881-2b72-405e-98a4-f2616041a249_buggy.java b/tmp/9f0ea314-410a-4d78-8205-e30356ee6a7d_fixed.java
index e69de29..c6632aa 100644
--- a/tmp/4f644881-2b72-405e-98a4-f2616041a249_buggy.java
+++ b/tmp/9f0ea314-410a-4d78-8205-e30356ee6a7d_fixed.java
@@ -0,0 +1,210 @@
+import org.jsoup.Connection;
+import org.jsoup.helper.Validate;
+import org.jsoup.nodes.Element;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * A HTML Form Element provides ready access to the form's data and source.
+ * <p>
+ * You can add or remove key-vals, and easily fire the form submission.
+ */
+public class FormElement extends Element {
+    private static final String _ENC_TYPE = "enctype";
+    private static final String _ACTION = "action";
+    private static final String _METHOD = "method";
+
+    /**
+     * Create a new, empty form element.
+     * @param tag form tag
+     * @param baseUri the base uri
+     * @see org.jsoup.Jsoup#createFormElement(String, String, String)
+     */
+    public FormElement(Tag tag, String baseUri) {
+        super(tag, baseUri);
+    }
+
+    /**
+     * Get the form's absolute action URL, with the base URI of the page.
+     * @return absolute URL, or empty string if none set.
+     */
+    public String absoluteAction() {
+        return absUrl(_ACTION);
+    }
+
+    /**
+     * Get the form's action attribute. The action attribute specifies where to send the form-data
+     * when a form is submitted.
+     * @return action attribute, or empty string if none set.
+     */
+    public String action() {
+        return attr(_ACTION);
+    }
+
+    /**
+     * Set the form's action attribute.
+     * @param action attribute value
+     */
+    public FormElement action(String action) {
+        attr(_ACTION, action);
+        return this;
+    }
+
+
+    /**
+     * Get the form's method attribute. The method attribute specifies the HTTP method to use when sending form-data; most
+     * commonly POST or GET.
+     * @return method attribute, or empty string if none set.
+     */
+    public String method() {
+        return attr(_METHOD);
+    }
+
+    /**
+     * Set the form's method attribute.
+     * @param method method, typically "POST" or "GET"
+     */
+    public FormElement method(String method) {
+        attr(_METHOD, method);
+        return this;
+    }
+
+    /**
+     * Get the form's encoding type, the type of content that is used to transmit the form to the server. Possible values
+     * are "application/x-www-form-urlencoded" (default), "multipart/form-data", and "text/plain".
+     * @return the encoding type
+     */
+    public String encType() {
+        return attr(_ENC_TYPE);
+    }
+
+    /**
+     * Set the form's encoding type.
+     * @param encType encoding type
+     */
+    public FormElement encType(String encType) {
+        attr(_ENC_TYPE, encType);
+        return this;
+    }
+
+    /**
+     * Get the list of key-value pairs that are associated with this form.
+     * @return key-value list of form data.
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // iterate the form control elements and accumulate their values
+        for (Element element : select("input[type!=submit], textarea, select")) {
+            String name = element.attr("name");
+            if (name == null || name.length() == 0)
+                continue;
+
+            String type = element.attr("type");
+
+            if ("select".equals(element.tagName())) {
+                Elements options = element.select("option[selected]");
+                boolean set = false;
+                for (Element option: options) {
+                    data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    set = true;
+                }
+                if (!set) { // not set, use the first
+                    Element option = element.select("option").first();
+                    if (option != null)
+                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                }
+            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                // only add checkbox or radio if they have the checked attribute explicit set, or if it's a radio and no other radio by the same name is checked
+                if (element.hasAttr("checked")) {
+                    final String val = element.val().length() >  0 ? element.val() : "on";
+                    data.add(HttpConnection.KeyVal.create(name, val));
+                } else if ("radio".equalsIgnoreCase(type)) {
+                    if(select("input[type=radio][name="+name.replaceAll("\\s", "")+"]:checked").isEmpty()) {
+                        String val = element.val().length() > 0 ? element.val() : "on";
+                        data.add(HttpConnection.KeyVal.create(name, val));
+                    }
+                }
+            } else {
+                data.add(HttpConnection.KeyVal.create(name, element.val()));
+            }
+        }
+        return data;
+    }
+
+
+    /**
+     * Add a key-value pair to this form.
+     * @param key key
+     * @param value value
+     * @return this form, so you can chain operations.
+     */
+    public FormElement addData(String key, String value) {
+        Validate.notNull(key, "Key must not be null");
+        Validate.notNull(value, "Value must not be null");
+
+        Element input = select("input[name=" + key + "]").first(); // value replaces current, if there's one with this key
+        if (input == null) { // doesn't have this key, add a hidden input
+            input = new Element(Tag.valueOf("input"), baseUri());
+            input.attr("type", "hidden");
+            input.attr("name", key);
+            appendChild(input); // appended at end of form, not very elegant but forms generally do this
+        }
+        input.val(value);
+        return this;
+    }
+
+    @Override
+    public Elements submit() {
+        String action = hasAttr(_ACTION) ? absUrl(_ACTION) : baseUri();
+        Validate.notEmpty(action, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
+        return submit(action);
+    }
+
+    /**
+     * Submits the form. This creates a GET or POST request based on the form's method setting, and posts the form to the
+     * action URL. All control elements with a name are sent in the request.
+     * <p>
+     * This url must be absolute, only the protocol and host can be omitted. E.g: action="/search", action="http://example.com/search"
+     * are good, action="search" is bad.
+     * @param actionURL URL to submit the form to. If this is a full URL, it will be used as is. If it is a relative URL,
+     *                  it will be resolved against the base URL. In either case, the form's input values will be sent as query parameters.
+     * @return the connection (with associated data). Once data has been sent, the connection can be closed, or the response examined.
+     * @throws IllegalArgumentException if the action URL is not absolute (starts with / or protocol)
+     * @throws UnsupportedOperationException if the form's enctype is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>
+     *
+     * @see #submit()
+     */
+    public Elements submit(String actionURL) {
+        Validate.notEmpty(actionURL, "Action URL must not be empty.");
+
+        String actionUri =  actionURL;
+        String method = attr("method").toUpperCase();
+        String encType = attr("enctype");
+
+        if (method.equals(""))
+            method = "GET";
+        method = method.toUpperCase();
+
+        if (!"GET".equals(method) && !"POST".equals(method))
+            throw new UnsupportedOperationException("Method must be GET or POST (and not " + method + ")");
+
+        Connection con = Jsoup.connect(actionUri);
+        con.method(Connection.Method.valueOf(method));
+
+
+        if ("application/x-www-form-urlencoded".equals(encType)) {
+            con.data(formData());
+        } else if ("multipart/form-data".equals(encType)) {
+            List<Connection.KeyVal> entries = formData();
+            for (Connection.KeyVal entry: entries) {
+                con.data(entry.key(), entry.value());
+            }
+        } else if (!"".equals(encType)) {
+            throw new UnsupportedOperationException("Only application/x-www-form-urlencoded or multipart/form-data enctypes are currently supported, not " + encType);
+        }
+        con.header("Content-Type", encType); // set but only relevant for POSTs
+        return con.get(); // fire the request
+    }
+}
\ No newline at end of file
