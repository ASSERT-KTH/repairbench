diff --git a/tmp/f8c9ad65-12ae-4be0-ae3c-d6924e627372_buggy.java b/tmp/2efd65bc-f7aa-47b5-9335-bc05aa10c915_fixed.java
index 602226b..bc9dd38 100644
--- a/tmp/f8c9ad65-12ae-4be0-ae3c-d6924e627372_buggy.java
+++ b/tmp/2efd65bc-f7aa-47b5-9335-bc05aa10c915_fixed.java
@@ -1,26 +1,26 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
+        if (parent.isVar() || parent.isLet() || parent.isConst()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            Node initialValue = aliasVar.getInitialValue();
+            if (initialValue != null) {
+              String qualifiedName = initialValue.getQualifiedName();
+              if (qualifiedName != null) {
                 transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+              }
+            }
           } else {
             // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
