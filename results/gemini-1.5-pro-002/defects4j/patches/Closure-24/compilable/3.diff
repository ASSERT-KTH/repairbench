diff --git a/tmp/52973140-2165-44a3-8cf3-ca9b515ad584_buggy.java b/tmp/0126d0b8-d935-4fad-a7a4-f2ebbe6b5121_fixed.java
index 602226b..6849596 100644
--- a/tmp/52973140-2165-44a3-8cf3-ca9b515ad584_buggy.java
+++ b/tmp/0126d0b8-d935-4fad-a7a4-f2ebbe6b5121_fixed.java
@@ -1,26 +1,26 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
+        if (parent.isVar() || parent.isFunction()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
 
             String qualifiedName =
                 aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
             // Bleeding functions already get a BAD_PARAMETERS error, so just
             // do nothing.
             // Parameters of the scope function also get a BAD_PARAMETERS
             // error.
-        } else {
+          } else if (parent.isVar()) {
             // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
