You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    /**
     * Creates a printer that will print values to the given stream following the CSVFormat.
     * <p>
     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation
     * and escaping with a different character) are not supported.
     * </p>
     * 
     * @param out
     *        stream to which to print. Must not be null.
     * @param format
     *        the CSV format. Must not be null.
     * @throws IOException
     *         thrown if the optional header cannot be printed.
     * @throws IllegalArgumentException
     *         thrown if the parameters of the format are inconsistent or if either out or format are null.
     */
    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {
        Assertions.notNull(out, "out");
        Assertions.notNull(format, "format");

        this.out = out;
        this.format = format;
        this.format.validate();
        // TODO: Is it a good idea to do this here instead of on the first call to a print method?
        // It seems a pain to have to track whether the header has already been printed or not.
    }

```

The code fails the following tests.

Test `org.apache.commons.csv.CSVPrinterTest::testHeader`:
```java
    @Test
    public void testHeader() throws IOException {
        final StringWriter sw = new StringWriter();
        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null)
                .withHeader("C1", "C2", "C3"));
        printer.printRecord("a", "b", "c");
        printer.printRecord("x", "y", "z");
        assertEquals("C1,C2,C3\r\na,b,c\r\nx,y,z\r\n", sw.toString());
        printer.close();
    }

```
Test `org.apache.commons.csv.CSVPrinterTest::testHeader` error:
```
junit.framework.AssertionFailedError: expected:<[C1,C2,C3
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
