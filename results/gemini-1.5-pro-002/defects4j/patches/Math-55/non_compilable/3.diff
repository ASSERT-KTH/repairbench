diff --git a/tmp/a3041fa0-3b83-4d5e-9a65-41e7ef7a61d6_buggy.java b/tmp/c239c919-8a59-43f9-ba8b-880b1b34d96f_fixed.java
index 1478ee1..708c8ef 100644
--- a/tmp/a3041fa0-3b83-4d5e-9a65-41e7ef7a61d6_buggy.java
+++ b/tmp/c239c919-8a59-43f9-ba8b-880b1b34d96f_fixed.java
@@ -1,24 +1,25 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
 
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
 
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+      double rho = FastMath.rint(v1.dotProduct(v2) / v2.getNormSq());
 
       // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      Vector3D v3 = new Vector3D(1, v1, -rho, v2);
+      return new Vector3D(v3.y * v2.z - v3.z * v2.y, v3.z * v2.x - v3.x * v2.z, v3.x * v2.y - v3.y * v2.x);
 
   }
