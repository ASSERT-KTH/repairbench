diff --git a/tmp/18410dd4-9736-4350-a0cd-95b469b77d8f_buggy.java b/tmp/21cafef3-a42d-410b-9756-9b74079fd386_fixed.java
index 00914da..c8e7c88 100644
--- a/tmp/18410dd4-9736-4350-a0cd-95b469b77d8f_buggy.java
+++ b/tmp/21cafef3-a42d-410b-9756-9b74079fd386_fixed.java
@@ -1,17 +1,28 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
-        for (Node node: element.childNodes) {
+        for (int i = 0; i < element.childNodes.size(); i++) {
+            Node node = element.childNode(i);
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
-                if (!tn.isBlank())
+                if (!tn.isBlank()) {
                     toMove.add(tn);
+                } else {
+                    element.removeChild(node);
+                    i--;
+                }
             }
         }
 
+        if (element.parent() != null && (element.parent().tag().getName().equals("body") || element.parent().tag().getName().equals("html")) && toMove.size() > 0) {
+            // not elegant. todo: make sure we're not recursing through the body here... can't append to body otherwise. and would form a loop.
+            Node firstNonBlank = toMove.remove(0);
             for (Node node : toMove) {
                 element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
                 body().appendChild(node);
             }
+            element.prependChild(firstNonBlank);
+        }
+
+        
     }
