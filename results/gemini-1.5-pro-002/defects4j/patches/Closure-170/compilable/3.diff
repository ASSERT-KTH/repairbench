diff --git a/tmp/bf6dcc69-1714-4497-8d68-6bdfe1da8e8f_buggy.java b/tmp/ed6fc01c-b55c-4544-9af1-49d67447eb46_fixed.java
index 5abdeb5..7bab98a 100644
--- a/tmp/bf6dcc69-1714-4497-8d68-6bdfe1da8e8f_buggy.java
+++ b/tmp/ed6fc01c-b55c-4544-9af1-49d67447eb46_fixed.java
@@ -1,29 +1,33 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+
+            if (parent.isAssign() && parent.getFirstChild() == n) {
+              if (!cfgNode.isAssign() || cfgNode.getFirstChild() != n) {
                  numUsesWithinCfgNode++;
               }
+            } else {
+              numUsesWithinCfgNode++;
+            }
+          }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
