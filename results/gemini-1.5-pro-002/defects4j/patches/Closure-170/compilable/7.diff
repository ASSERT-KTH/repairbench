diff --git a/tmp/4d66e181-4f18-452f-910f-a806ccba97f7_buggy.java b/tmp/07c40435-0b6d-473c-ac39-3b4fa5622774_fixed.java
index 5abdeb5..7b1ce0a 100644
--- a/tmp/4d66e181-4f18-452f-910f-a806ccba97f7_buggy.java
+++ b/tmp/07c40435-0b6d-473c-ac39-3b4fa5622774_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
               !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+               (parent.getFirstChild() == n) &&
+               cfgNode.isBlock() && cfgNode.hasOneChild())) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
