diff --git a/tmp/bb47b962-7a51-4e4d-86c1-377668e943b4_buggy.java b/tmp/8c72b577-abf9-4881-844d-8e784605b7d6_fixed.java
index 4be01ab..ab7a6cd 100644
--- a/tmp/bb47b962-7a51-4e4d-86c1-377668e943b4_buggy.java
+++ b/tmp/8c72b577-abf9-4881-844d-8e784605b7d6_fixed.java
@@ -1,115 +1,118 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
     // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
     if (option != WhitespaceOption.PRESERVE) {
       line = line.trim();
     }
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
     state = State.SEARCHING_ANNOTATION;
     token = next();
 
     boolean ignoreStar = false;
 
     // Track the start of the line to count whitespace that
     // the tokenizer skipped. Because this case is rare, it's easier
     // to do this here than in the tokenizer.
 
     do {
       switch (token) {
         case STAR:
           if (ignoreStar) {
             // Mark the position after the star as the new start of the line.
+            stream.update();
+            int currentCharno = stream.getCharno();
+            int starCharno = currentCharno - 1; // charno of *
+            // if whitespace exists between * and previous text, preserve it
+            String afterStar = stream.getRemainingJSDocLine().substring(0, currentCharno - starCharno -1);
+            builder.append(afterStar);
+
           } else {
             // The star is part of the comment.
             if (builder.length() > 0) {
               builder.append(' ');
             }
 
             builder.append('*');
           }
 
           token = next();
           continue;
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
 
           ignoreStar = true;
           token = next();
           continue;
 
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
+          if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1))) {
+            builder.append(' ');
+          }
           
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+              (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
               multilineText = multilineText.trim();
             }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
-            builder.append(' ');
-          }
           builder.append(toString(token));
 
           line = stream.getRemainingJSDocLine();
 
           if (option != WhitespaceOption.PRESERVE) {
             line = trimEnd(line);
           }
 
           builder.append(line);
           token = next();
       }
     } while (true);
   }
