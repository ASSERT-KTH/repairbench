diff --git a/tmp/4168ce06-487e-4d79-9409-75a8c03c94db_buggy.java b/tmp/692430f0-404d-4d46-aa64-f1926a3ee9af_fixed.java
index 7c0ebae..6135ecb 100644
--- a/tmp/4168ce06-487e-4d79-9409-75a8c03c94db_buggy.java
+++ b/tmp/692430f0-404d-4d46-aa64-f1926a3ee9af_fixed.java
@@ -1,229 +1,193 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
         // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
         //    conditionals; and it seems odd to return `null` but NOT considering input
         //    as closed... would love a rewrite to simplify/clear up logic here.
         
         // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
         // check for no buffered context _exposedContext - null
         // If all the conditions matches then check for scalar / non-scalar property
         if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
             //if not scalar and ended successfully, and !includePath, then return null
                 if (_currToken.isStructEnd()) {
                     if (_headContext.isStartHandled()) {
-                        return (_currToken = null);
+                        _currToken = null;
+                        return null;
                     }
                 } else if (_currToken.isScalarValue()) {
                     //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
                     // then return null 
                     if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
-                        return (_currToken = null);
+                        _currToken = null;
+                        return null;
                     }
             }
         }
         // Anything buffered?
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
                 // all done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
-                        t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
+                        // We need next token, not current one
+                        t = delegate.nextToken();
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
                     break;
                 }
                 // If not, traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
                 if (ctxt == null) { // should never occur
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
         // If not, need to read more. If we got any:
         JsonToken t = delegate.nextToken();
         if (t == null) {
             // no strict need to close, since we have no state here
             _currToken = t;
             return t;
         }
 
         // otherwise... to include or not?
         TokenFilter f;
         
         switch (t.id()) {
         case ID_START_ARRAY:
-            f = _itemFilter;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
-            }
-            if (f == null) { // does this occur?
-                delegate.skipChildren();
-                break;
-            }
-            // Otherwise still iffy, need to check
-            f = _headContext.checkValue(f);
-            if (f == null) {
-                delegate.skipChildren();
-                break;
-            }
-            if (f != TokenFilter.INCLUDE_ALL) {
-                f = f.filterStartArray();
-            }
-            _itemFilter = f;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
-            }
-            _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
-            if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
-                }
-            }
-            break;
-
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildObjectContext(f, true);
+                _headContext = _headContext.createChild(t, f, true);
                 return (_currToken = t);
             }
             if (f == null) { // does this occur?
                 delegate.skipChildren();
                 break;
             }
             // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
-                f = f.filterStartObject();
+                f = f.filterStartArrayOrObject(t);
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildObjectContext(f, true);
+                _headContext = _headContext.createChild(t, f, true);
                 return (_currToken = t);
             }
-            _headContext = _headContext.createChildObjectContext(f, false);
+            _headContext = _headContext.createChild(t, f, false);
+            
             // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
             {
                 boolean returnEnd = _headContext.isStartHandled();
                 f = _headContext.getFilter();
                 if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                    f.filterFinishArray();
+                    f.filterFinishArrayOrObject(t);
                 }
                 _headContext = _headContext.getParent();
                 _itemFilter = _headContext.getFilter();
                 if (returnEnd) {
                     return (_currToken = t);
                 }
             }
             break;
 
         case ID_FIELD_NAME:
             {
                 final String name = delegate.getCurrentName();
                 // note: this will also set 'needToHandleName'
                 f = _headContext.setFieldName(name);
                 if (f == TokenFilter.INCLUDE_ALL) {
                     _itemFilter = f;
                     if (!_includePath) {
                         // Minor twist here: if parent NOT included, may need to induce output of
                         // surrounding START_OBJECT/END_OBJECT
                         if (_includeImmediateParent && !_headContext.isStartHandled()) {
                             t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                             _exposedContext = _headContext;
                         }
                     }
                     return (_currToken = t);
                 }
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 f = f.includeProperty(name);
                 if (f == null) {
                     delegate.nextToken();
                     delegate.skipChildren();
                     break;
                 }
                 _itemFilter = f;
                 if (f == TokenFilter.INCLUDE_ALL) {
                     if (_includePath) {
                         return (_currToken = t);
                     }
+                    // Minor optimization, but important: if parent is NOT included,
+                    // and we are to include value, we better peek ahead to see if
+                    // START_OBJECT/END_OBJECT is needed for parent
+                    if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                        _exposedContext = _headContext;
+                        return (_currToken = t);
+                    }
+
                 }
                 if (_includePath) {
                     t = _nextTokenWithBuffering(_headContext);
                     if (t != null) {
                         _currToken = t;
                         return t;
                     }
                 }
                 break;
             }
 
         default: // scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 return (_currToken = t);
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
                         || ((f != null) && f.includeValue(delegate))) {
                     return (_currToken = t);
                 }
             }
             // Otherwise not included (leaves must be explicitly included)
             break;
         }
 
         // We get here if token was not yet found; offlined handling
         return _nextToken2();
     }
\ No newline at end of file
