diff --git a/tmp/56a63e3c-f274-4544-8b1c-53a5b3e6590b_buggy.java b/tmp/df79fa4d-406d-466d-82f6-ca2eac1c2e30_fixed.java
index 658036e..593982a 100644
--- a/tmp/56a63e3c-f274-4544-8b1c-53a5b3e6590b_buggy.java
+++ b/tmp/df79fa4d-406d-466d-82f6-ca2eac1c2e30_fixed.java
@@ -1,29 +1,34 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
-        if (p.getCurrentToken() == JsonToken.START_ARRAY) {
+        JsonToken t = p.getCurrentToken();
+        if (t == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+        if (t == JsonToken.VALUE_STRING && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)
+                && p.getText().isEmpty()) {
+            return null;
+        }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
