diff --git a/tmp/0f276551-7fda-445c-a0c3-0b0313e993ee_buggy.java b/tmp/4e8e4eab-0405-4641-86b3-1b4954e2bdcf_fixed.java
index e5ad041..01ac172 100644
--- a/tmp/0f276551-7fda-445c-a0c3-0b0313e993ee_buggy.java
+++ b/tmp/4e8e4eab-0405-4641-86b3-1b4954e2bdcf_fixed.java
@@ -1,19 +1,20 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
+        //    placeholder values, so no. But ensure sharing of other properties
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
         return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
                 _valueHandler, _typeHandler, _asStatic);
+        // 15-Jan-2015, tatu: Not correct; should really re-resolve... but above works for now
+//        return TypeFactory.defaultInstance().constructSpecializedType(this, subclass);
     }
