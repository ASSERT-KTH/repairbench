diff --git a/tmp/84722d39-88f0-4efa-a0c6-1bffcd4af1b3_buggy.java b/tmp/38c3f9ba-9f74-4a09-9647-1d78e9059888_fixed.java
index e5ad041..e07de10 100644
--- a/tmp/84722d39-88f0-4efa-a0c6-1bffcd4af1b3_buggy.java
+++ b/tmp/38c3f9ba-9f74-4a09-9647-1d78e9059888_fixed.java
@@ -1,19 +1,23 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+        // 01-May-2023, tatu: ... which we now do! (for [databind#1083])
+        TypeFactory tf = _typeFactory;
+        if (tf == null) { // when would this ever happen?
+            tf = TypeFactory.defaultInstance();
+        }
+        return tf.constructSpecializedType(this, subclass);
     }
