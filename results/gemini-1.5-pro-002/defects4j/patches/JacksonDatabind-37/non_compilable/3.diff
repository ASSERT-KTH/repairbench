diff --git a/tmp/e79a63d9-4986-41ba-a08f-7f3a4d6f6ef6_buggy.java b/tmp/e3a95117-60c4-4c93-86ec-6869abeecbbc_fixed.java
index e5ad041..67335b3 100644
--- a/tmp/e79a63d9-4986-41ba-a08f-7f3a4d6f6ef6_buggy.java
+++ b/tmp/e3a95117-60c4-4c93-86ec-6869abeecbbc_fixed.java
@@ -1,19 +1,17 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        // 02-Jun-2016, tatu: Related to above, MUST actually re-resolve to avoid
+        //    problems with Type Erasure (see [databind#1083] for details)
+        TypeFactory tf = _typeFactory;
+        if (tf == null) { // should never happen, but...
+            tf = TypeFactory.defaultInstance();
         }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+        return tf.constructSpecializedType(this, subclass);
     }
