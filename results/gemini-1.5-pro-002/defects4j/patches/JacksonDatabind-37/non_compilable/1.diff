diff --git a/tmp/1e349d7a-0471-4211-a61b-71b356d5c3ce_buggy.java b/tmp/2b91bced-b274-47df-a0c2-2e35c774a959_fixed.java
index e5ad041..3817cfa 100644
--- a/tmp/1e349d7a-0471-4211-a61b-71b356d5c3ce_buggy.java
+++ b/tmp/2b91bced-b274-47df-a0c2-2e35c774a959_fixed.java
@@ -1,19 +1,20 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+
+        // 26-Mar-2019, tatu: As per [databind#1083], MUST retain existing
+        //    type bindings. Related to fixing that, MUST actually re-resolve
+        //    bindings if subclass is abstract (due to refinement limitations)
+        TypeFactory tf = _typeFactory;
+        if (tf == null) { // shouldn't happen, but just in case
+            tf = TypeFactory.defaultTypeFactory();
         }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+        JavaType newType = tf.constructSpecializedType(this, subclass);
+        return newType;
     }
