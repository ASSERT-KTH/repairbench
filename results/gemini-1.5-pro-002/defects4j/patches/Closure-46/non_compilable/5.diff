diff --git a/tmp/8a1b30b3-e704-480e-94f6-4040895fb330_buggy.java b/tmp/f620aad1-b205-4e0e-8f28-472533466166_fixed.java
index 46817a7..87fbc8c 100644
--- a/tmp/8a1b30b3-e704-480e-94f6-4040895fb330_buggy.java
+++ b/tmp/f620aad1-b205-4e0e-8f28-472533466166_fixed.java
@@ -1,16 +1,41 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+
+    RecordType thatRecord = that.toMaybeRecordType();
+    if (isEmpty() || thatRecord.isEmpty()) {
+      return getTopMostAncestorOfType(JSTypeNative.OBJECT_TYPE);
+    }
+
+    // The least supertype of two record types is a record type
+    // with the following properties:
+    // 1. The keys are the union of the keys of the two record types.
+    // 2. For each key k:
+    //    a. If k is in both record types, the property type is the
+    //       least super type of the two property types.
+    //    b. Otherwise, the property type is the property type in the
+    //       record type that has the key.
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
+      JSType thisPropertyType = getPropertyType(property);
+      JSType thatPropertyType = thatRecord.hasProperty(property) ?
+          thatRecord.getPropertyType(property) : null;
+
+      if (thatPropertyType != null) {
+        builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType),
             getPropertyNode(property));
+      } else {
+         builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+      }
+    }
+    for (String property : thatRecord.getProperties()) {
+        if (!properties.containsKey(property)) {
+          builder.addProperty(property, thatRecord.getPropertyType(property),
+              thatRecord.getPropertyNode(property));
         }
     }
     return builder.build();
+
   }
