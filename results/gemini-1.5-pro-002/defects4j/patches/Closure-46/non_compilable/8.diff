diff --git a/tmp/19e17e39-a2bd-4ed8-b14c-c339662ed4d2_buggy.java b/tmp/1b8b182c-3823-45de-8e08-558112dd1e31_fixed.java
index 46817a7..b59304f 100644
--- a/tmp/19e17e39-a2bd-4ed8-b14c-c339662ed4d2_buggy.java
+++ b/tmp/1b8b182c-3823-45de-8e08-558112dd1e31_fixed.java
@@ -1,16 +1,27 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+    RecordType thatRecord = that.toMaybeRecordType();
+    if (isEmpty() || thatRecord.isEmptyType()) {
+        return registry.createUnionType(this, that);
+    }
+
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
+      if (thatRecord.hasProperty(property)) {
+          JSType thisPropertyType = getPropertyType(property);
+          JSType thatPropertyType = thatRecord.getPropertyType(property);
+          builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType),
               getPropertyNode(property));
       }
     }
+    for (String property : thatRecord.getProperties()) {
+        if (!hasProperty(property)) {
+            return registry.createUnionType(this, that);
+        }
+    }
+
     return builder.build();
   }
