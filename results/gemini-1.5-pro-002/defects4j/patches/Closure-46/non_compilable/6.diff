diff --git a/tmp/aa0ced65-d84d-4096-9fc8-b9616b090ad9_buggy.java b/tmp/4b8c52a6-e381-46ca-8f0c-1612bbf77858_fixed.java
index 46817a7..2060f90 100644
--- a/tmp/aa0ced65-d84d-4096-9fc8-b9616b090ad9_buggy.java
+++ b/tmp/4b8c52a6-e381-46ca-8f0c-1612bbf77858_fixed.java
@@ -1,16 +1,33 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+    RecordType thatRecord = that.toMaybeRecordType();
+    if (isEmpty() || thatRecord.isEmpty()) {
+      return getTopMostAncestorOfType(JSTypeNative.OBJECT_TYPE);
+    }
+
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
+      if (thatRecord.hasProperty(property)) {
+        JSType thisPropertyType = getPropertyType(property);
+        JSType thatPropertyType = thatRecord.getPropertyType(property);
+        builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType),
             getPropertyNode(property));
       }
     }
-    return builder.build();
+    for (String property : thatRecord.getProperties()) {
+      if (!hasProperty(property)) {
+        builder.addProperty(property, thatRecord.getPropertyType(property),
+            thatRecord.getPropertyNode(property));
+      }
+    }
+
+    JSType result = builder.build();
+    if (result == null) {
+       return getTopMostAncestorOfType(JSTypeNative.OBJECT_TYPE);
+    }
+    return result;
+
   }
