diff --git a/tmp/f4570780-8109-4540-9f8e-3a9122481b71_buggy.java b/tmp/e891f357-98f2-4e4e-a9ed-c2cad3800eef_fixed.java
index b529d33..30b5631 100644
--- a/tmp/f4570780-8109-4540-9f8e-3a9122481b71_buggy.java
+++ b/tmp/e891f357-98f2-4e4e-a9ed-c2cad3800eef_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
         if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+            for (int i=index-1 ; i>=0 ; i--) {
+                final char prevChar = str.charAt(i);
+                if (this.map(prevChar)==mappedChar) {
                     return 0;
                 }
+                if ('H'!=prevChar && 'W'!=prevChar) {
+                    break;
+                }
             }
         }
         return mappedChar;
     }
