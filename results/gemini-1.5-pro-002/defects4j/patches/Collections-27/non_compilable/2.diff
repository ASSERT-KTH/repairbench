diff --git a/tmp/fbc9ed36-d668-4a00-83d5-f4747ebb9fee_buggy.java b/tmp/fd48f496-ddb0-423e-b52b-d4bec35ee907_fixed.java
index e69de29..2c8e21c 100644
--- a/tmp/fbc9ed36-d668-4a00-83d5-f4747ebb9fee_buggy.java
+++ b/tmp/fd48f496-ddb0-423e-b52b-d4bec35ee907_fixed.java
@@ -0,0 +1,157 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.MultiMap;
+import org.apache.commons.collections4.Transformer;
+import org.apache.commons.collections4.collection.AbstractCollectionDecorator;
+import org.apache.commons.collections4.functors.ConstantFactory;
+import org.apache.commons.collections4.functors.FactoryTransformer;
+import org.apache.commons.collections4.map.AbstractMapDecorator;
+
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object>
+        implements MultiMap<K, V>, Serializable {
+
+    /** Serialization version */
+    private static final long serialVersionUID = -2214190729123697560L;
+
+    /** The factory to use to create new collections */
+    private final Factory<? extends Collection<V>> collectionFactory;
+
+    /** The map to decorate */
+    private transient Map<K, Collection<V>> map;
+
+    /**
+     * Factory method to create a MultiValueMap using the supplied map and a
+     * default collection factory.
+     *
+     * @param <K> the key type
+     * @param <V> the value type
+     * @param map the map to decorate, must not be null
+     * @return a new multi-value map
+     * @throws NullPointerException if map is null
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map) {
+        return multiValueMap(map, ArrayList.class);
+    }
+
+
+    /**
+     * Factory method to create a MultiValueMap using the supplied map and
+     * collection factory.
+     * <p>
+     *  This factory method checks if the collection factory is a safe implementation
+     *  in order to prevent possible serialization exploits. If the collection
+     *  factory is considered unsafe, then a {@link UnsupportedOperationException} is
+     *  raised.
+     * </p>
+     *
+     * @param <K> the key type
+     * @param <V> the value type
+     * @param map the map to decorate, must not be null
+     * @param collectionFactory the collection factory to use, must not be null, not be unsafe
+     * @return a new multi-value map
+     * @throws NullPointerException if collectionClass is null
+     * @throws UnsupportedOperationException if collectionClass is unsafe
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,
+                                                               final Class<?> collectionFactory) {
+        return multiValueMap(map, new ReflectionFactory<>(collectionFactory));
+    }
+
+    /**
+     * Factory method to create a MultiValueMap using the supplied map and
+     * collection factory.
+     *
+     * @param <K> the key type
+     * @param <V> the value type
+     * @param map the map to decorate, must not be null
+     * @param collectionFactory the collection factory to use, must not be null
+     * @return a new multi-value map
+     * @throws NullPointerException if map or collectionFactory is null
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,
+                                                               final Factory<? extends Collection<V>> collectionFactory) {
+        if (collectionFactory instanceof ReflectionFactory) {
+            final Class<?> clazz = ((ReflectionFactory<?>) collectionFactory).clazz;
+            if (clazz != null && !Collection.class.isAssignableFrom(clazz)) {
+                throw new UnsupportedOperationException();
+            }
+        }
+
+        return new MultiValueMap<>(map, collectionFactory);
+    }
+
+    // -----------------------------------------------------------------------
+    /**
+     * Constructor.
+     */
+    protected MultiValueMap() {
+        this(new HashMap<>(), new ReflectionFactory<>(ArrayList.class));
+    }
+
+    /**
+     * Constructor that wraps (not copies).
+     *
+     * @param map  the map to decorate, must not be null
+     * @param collectionFactory  the collection factory to use, must not be null
+     * @throws NullPointerException if map or collectionFactory is null
+     * @since 4.1
+     */
+    protected MultiValueMap(final Map<K, ? super Collection<V>> map, final Factory<? extends Collection<V>> collectionFactory) {
+        super(map);
+        if (collectionFactory == null) {
+            throw new NullPointerException("CollectionFactory must not be null.");
+        }
+        this.map = (Map<K, Collection<V>>) map;
+        this.collectionFactory = collectionFactory;
+    }
+
+    // -----------------------------------------------------------------------
+    private void readObject(final ObjectInputStream ois) throws IOException, ClassNotFoundException {
+        ois.defaultReadObject();
+        map = new HashMap<>();
+    }
+
+    // -----------------------------------------------------------------------
+
+    private static class ReflectionFactory<T extends Collection<?>> implements Factory<T>, Serializable {
+
+        /** Serialization version */
+        private static final long serialVersionUID = 2986118688429373750L;
+
+        private final Class<?> clazz;
+
+        public ReflectionFactory(final Class<?> clazz) {
+            this.clazz = clazz;
+        }
+
+        @Override
+        @SuppressWarnings("unchecked")
+        public T create() {
+            try {
+                return (T) clazz.newInstance();
+            } catch (final InstantiationException | IllegalAccessException ex) {
+                throw new UnsupportedOperationException();
+            }
+        }
+
+        private Object readResolve() {
+            if (clazz != null && !Collection.class.isAssignableFrom(clazz)) {
+                return new ConstantFactory<>(new UnsupportedOperationException());
+            }
+            return this;
+        }
+
+    }
+}
