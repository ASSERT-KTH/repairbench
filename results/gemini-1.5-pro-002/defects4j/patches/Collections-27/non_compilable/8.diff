diff --git a/tmp/23a97711-72ba-4263-a7f4-384a7a0877c7_buggy.java b/tmp/a888b602-eb7f-4b46-83c3-186d784a94ac_fixed.java
index e69de29..6f5a994 100644
--- a/tmp/23a97711-72ba-4263-a7f4-384a7a0877c7_buggy.java
+++ b/tmp/a888b602-eb7f-4b46-83c3-186d784a94ac_fixed.java
@@ -0,0 +1,55 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.commons.collections4.MultiMap;
+import org.apache.commons.collections4.collection.AbstractCollectionDecorator;
+
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Collection<V>>
+        implements MultiMap<K, V>, Serializable {
+
+    /** Serialization version */
+    private static final long serialVersionUID = -2214190649069900679L;
+
+    /** The collection class to use */
+    private final Class<? extends Collection<V>> collectionClass;
+
+    /**
+     * Constructor.
+     */
+    protected MultiValueMap(Map<K, Collection<V>> map, Class<? extends Collection<V>> collectionClass) {
+        super(map);
+        if (collectionClass == null) {
+            throw new NullPointerException("Collection class is missing.");
+        }
+        this.collectionClass = collectionClass;
+    }
+
+
+    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
+        ois.defaultReadObject();
+        // the collectionClass needs to be validated here, as the default deserialization
+        // from AbstractMapDecorator is potentially unsafe. Specifically, an attacker
+        // could create a stream that would deserialize a MultiValueMap with String.class as
+        // collectionClass. The implementation of decorateValues() would then essentially
+        // cast the backing HashMap into a Map<K,String>, which would allow the attacker
+        // to bypass the type system. By validating the class here, we ensure no unsafe
+        // classes can be used
+        if (!Collection.class.isAssignableFrom(collectionClass)) {
+            throw new UnsupportedOperationException();
+        }
+       
+        Map<K, Collection<V>> map = new HashMap<>();
+        map = (Map<K, Collection<V>>) ois.readObject();
+        this.decorated = map;
+    }
+
+    private void writeObject(ObjectOutputStream oos) throws IOException {
+        oos.defaultWriteObject();
+        oos.writeObject(this.decorated());
+    }
+}
