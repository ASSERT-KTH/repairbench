diff --git a/tmp/ae5d7696-0095-440a-abc1-a783d475d7d4_buggy.java b/tmp/03f0d975-8b00-4858-ae6d-74334b4125b5_fixed.java
index e69de29..d66b79e 100644
--- a/tmp/ae5d7696-0095-440a-abc1-a783d475d7d4_buggy.java
+++ b/tmp/03f0d975-8b00-4858-ae6d-74334b4125b5_fixed.java
@@ -0,0 +1,78 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.MultiMap;
+import org.apache.commons.collections4.Transformer;
+import org.apache.commons.collections4.collection.AbstractCollectionDecorator;
+import org.apache.commons.collections4.factory.ConstantFactory;
+import org.apache.commons.collections4.functors.ExceptionTransformer;
+import org.apache.commons.collections4.iterators.AbstractIteratorDecorator;
+import org.apache.commons.collections4.iterators.TransformIterator;
+import org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator;
+
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object>
+        implements MultiMap<K, V>, Serializable {
+
+    /** Serialisation version */
+    private static final long serialVersionUID = -2210757355570036024L;
+
+    /** The factory to use to create the values collections */
+    private final Factory<? extends Collection<V>> collectionFactory;
+
+    /** The value transformer to use */
+    private final Transformer<? super Collection<V>, ? extends Collection<V>> valueTransformer;
+
+
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+    }
+
+
+    @SuppressWarnings("unchecked")
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        if (collectionFactory.getClass() != ArrayListValuedHashMap.class) {
+             throw new UnsupportedOperationException();
+        }
+
+    }
+
+
+    //-----------------------------------------------------------------------
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,
+                                                         final Class<?> collectionClass) {
+
+        return multiValueMap(map, (Factory<Collection<V>>) new TypedFactory<Collection<V>>(collectionClass));
+    }
+
+
+    private static class TypedFactory<C extends Collection<?>> implements Factory<C>, Serializable {
+
+        private static final long serialVersionUID = -7195887835664526730L;
+
+        private final Class<?> collectionClass;
+
+        public TypedFactory(final Class<?> collectionClass) {
+            this.collectionClass = collectionClass;
+        }
+
+        @Override
+        @SuppressWarnings("unchecked")
+        public C create() {
+            try {
+                return (C) collectionClass.newInstance();
+            } catch (final Exception ex) {
+                throw new IllegalArgumentException("Failed to instantiate collection class: " + ex.getMessage(), ex);
+            }
+        }
+
+    }
+}
