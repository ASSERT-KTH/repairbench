diff --git a/tmp/25c8fb27-59e5-43d1-b126-4944094edc4d_buggy.java b/tmp/cb38cbf3-2581-497d-83a8-265612e9b2e7_fixed.java
index e69de29..80b1241 100644
--- a/tmp/25c8fb27-59e5-43d1-b126-4944094edc4d_buggy.java
+++ b/tmp/cb38cbf3-2581-497d-83a8-265612e9b2e7_fixed.java
@@ -0,0 +1,484 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.MultiMap;
+import org.apache.commons.collections4.Transformer;
+import org.apache.commons.collections4.functors.ConstantFactory;
+import org.apache.commons.collections4.functors.FactoryTransformer;
+
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object>
+        implements MultiMap<K, V>, Serializable {
+
+    /** Serialization version */
+    private static final long serialVersionUID = -2214169818218989337L;
+
+    /** The factory to use to create the value collections */
+    private final Factory<? extends Collection<V>> collectionFactory;
+
+    /**
+     * Factory method to create a MultiValueMap using the supplied map and a default collection factory.
+     * <p>
+     *  The default factory creates an {@link ArrayList} if no value collection is present.
+     * </p>
+     * @param <K> the key type
+     * @param <V> the value type
+     * @param map  the map to decorate, must not be null
+     * @return a new MultiValueMap
+     * @throws NullPointerException if map is null
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map) {
+        return multiValueMap(map, ArrayList.class);
+    }
+
+    /**
+     * Factory method to create a MultiValueMap using the supplied map and collection factory.
+     * @param <K> the key type
+     * @param <V> the value type
+     * @param map  the map to decorate, must not be null
+     * @param collectionFactory  the factory to use to create value collections, must not be null
+     * @return a new MultiValueMap
+     * @throws NullPointerException if map or collectionFactory is null
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,
+                                                          final Factory<? extends Collection<V>> collectionFactory) {
+        if (map == null) {
+            throw new NullPointerException("Map must not be null.");
+        }
+        if (collectionFactory == null) {
+            throw new NullPointerException("CollectionFactory must not be null.");
+        }
+        return new MultiValueMap<>(map, collectionFactory);
+    }
+
+    /**
+     * Factory method to create a MultiValueMap using the supplied map and collection class.
+     * @param <K> the key type
+     * @param <V> the value type
+     * @param map  the map to decorate, must not be null
+     * @param collectionClass  the class to use to create value collections, must not be null
+     * @return a new MultiValueMap
+     * @throws NullPointerException if map or collectionClass is null
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,
+                                                          final Class<? extends Collection<V>> collectionClass) {
+        if (collectionClass == null) {
+            throw new NullPointerException("CollectionClass must not be null.");
+        }
+        return multiValueMap(map, new ReflectionCollectionFactory<>(collectionClass));
+    }
+
+    // -----------------------------------------------------------------------
+    /**
+     * Creates a new MultiValueMap based on a decorated map and a default collection factory.
+     * <p>
+     *  The default factory creates an {@link ArrayList} if no value collection is present.
+     * </p>
+     * @param map  the map to decorate, must not be null
+     * @throws NullPointerException if map is null
+     */
+    protected MultiValueMap(final Map<K, ? super Collection<V>> map) {
+        this(map, new ReflectionCollectionFactory<>(ArrayList.class));
+    }
+
+    /**
+     * Creates a new MultiValueMap based on a decorated map and a supplied collection factory.
+     * @param map  the map to decorate, must not be null
+     * @param collectionFactory  the factory to use to create value collections, must not be null
+     * @throws NullPointerException if map or collectionFactory is null
+     */
+    protected MultiValueMap(final Map<K, ? super Collection<V>> map, final Factory<? extends Collection<V>> collectionFactory) {
+        super(map);
+        if (collectionFactory == null) {
+            throw new NullPointerException("CollectionFactory must not be null.");
+        }
+        this.collectionFactory = collectionFactory;
+    }
+
+    // -----------------------------------------------------------------------
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeObject(map);
+    }
+
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        map = (Map<K, Object>) in.readObject();
+    }
+
+    // -----------------------------------------------------------------------
+    @Override
+    public boolean containsValue(final Object value) {
+        return values().contains(value);
+    }
+
+    @Override
+    public Collection<V> get(final K key) {
+        return wrappedCollection(key);
+    }
+
+    /**
+     * Gets a wrapped collection of values for the given key.
+     * @param key the key in question
+     * @return the wrapped collection of values
+     */
+    Collection<V> wrappedCollection(final Object key) {
+        return new WrappedCollection(key);
+    }
+
+    @Override
+    public int size() {
+        int size = 0;
+        for (final Object value : decorated().values()) {
+            size += CollectionUtils.size(value);
+        }
+        return size;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return size() == 0;
+    }
+
+
+    @Override
+    public Collection<V> remove(final Object key) {
+        return (Collection<V>) decorated().remove(key);
+    }
+
+
+    @Override
+    public void clear() {
+        decorated().clear();
+    }
+
+
+    @Override
+    public Collection<V> values() {
+        final Collection<Collection<V>> values = (Collection<Collection<V>>) decorated().values();
+        return new FlattenedValues(values);
+    }
+
+    @Override
+    public Collection<Map.Entry<K, V>> entries() {
+        // Although not strictly incorrect, the use of a MultiMap may not be the best choice
+        // for this implementation since it does not comply with the Map.Entry contract
+        // (equals doesn't take into account the collection). Is there a better way?
+        final List<Map.Entry<K, V>> entries = new java.util.ArrayList<>();
+
+        for (final Map.Entry<K, Object> entry : decorated().entrySet()) {
+            final K key = entry.getKey();
+            for (final V value : (Collection<V>) entry.getValue()) {
+                entries.add(new Map.Entry<K, V>() {
+                    @Override
+                    public K getKey() {
+                        return key;
+                    }
+
+                    @Override
+                    public V getValue() {
+                        return value;
+                    }
+
+                    @Override
+                    public V setValue(final V value) {
+                        throw new UnsupportedOperationException();
+                    }
+
+                    @Override
+                    public int hashCode() {
+                        return (getKey() == null ? 0 : getKey().hashCode()) ^
+                               (getValue() == null ? 0 : getValue().hashCode());
+                    }
+
+                    @Override
+                    public boolean equals(final Object obj) {
+                        if (this == obj) {
+                            return true;
+                        }
+                        if (obj == null || !(obj instanceof Map.Entry)) {
+                            return false;
+                        }
+
+                        final Map.Entry other = (Map.Entry) obj;
+                        return (
+                                (getKey() == null ? other.getKey() == null : getKey().equals(other.getKey())) &&
+                                        (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue())));
+                    }
+                });
+            }
+        }
+        return entries;
+    }
+
+    @Override
+    public void putAll(final Map<? extends K, ? extends V> map) {
+        for (final Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {
+            put(entry.getKey(), entry.getValue());
+        }
+    }
+
+
+    // -----------------------------------------------------------------------
+    @Override
+    public boolean put(final K key, final V value) {
+        Collection<V> coll = get(key);
+
+        if (coll == null) {
+            coll = createCollection(1);
+            decorated().put(key, coll);
+        }
+
+        return coll.add(value);
+    }
+
+
+    /**
+     * Creates a new instance of the value collection, as returned by the {@link #collectionFactory}
+     * if no value collection exists for the given key.
+     * @param size the anticipated size of the collection
+     * @return a new collection instance
+     */
+    protected Collection<V> createCollection(final int size) {
+        return collectionFactory.create();
+    }
+
+    /**
+     * The collection wrapper class.
+     */
+    class WrappedCollection implements Collection<V>, Serializable {
+        /** Serialization version */
+        private static final long serialVersionUID = 5126599380359097760L;
+
+        /** The key to get the values from */
+        protected final Object key;
+
+        /**
+         * Constructor.
+         * @param key  the key
+         */
+        WrappedCollection(final Object key) {
+            this.key = key;
+        }
+
+        //-----------------------------------------------------------------------
+        @Override
+        public boolean add(final V value) {
+            Collection<V> coll = (Collection<V>) decorated().get(key);
+            if (coll == null) {
+                coll = createCollection(1);
+                decorated().put(key, coll);
+            }
+            return coll.add(value);
+        }
+
+        @Override
+        public boolean addAll(final Collection<? extends V> values) {
+            Collection<V> coll = (Collection<V>) decorated().get(key);
+            if (coll == null) {
+                coll = createCollection(values.size());
+                decorated().put(key, coll);
+            }
+            return coll.addAll(values);
+        }
+
+        @Override
+        public void clear() {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            if (coll != null) {
+                coll.clear();
+            }
+        }
+
+        @Override
+        public boolean contains(final Object o) {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            return coll == null ? false : coll.contains(o);
+        }
+
+        @Override
+        public boolean containsAll(final Collection<?> c) {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            return coll == null ? false : coll.containsAll(c);
+        }
+
+        @Override
+        public boolean isEmpty() {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            return coll == null ? true : coll.isEmpty();
+        }
+
+        @Override
+        public Iterator<V> iterator() {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            if (coll == null) {
+                return IteratorUtils.emptyIterator();
+            }
+            return coll.iterator();
+        }
+
+        @Override
+        public boolean remove(final Object o) {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            return coll == null ? false : coll.remove(o);
+        }
+
+        @Override
+        public boolean removeAll(final Collection<?> c) {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            return coll == null ? false : coll.removeAll(c);
+        }
+
+        @Override
+        public boolean retainAll(final Collection<?> c) {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            return coll == null ? false : coll.retainAll(c);
+        }
+
+        @Override
+        public int size() {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            return coll == null ? 0 : coll.size();
+        }
+
+        @Override
+        public Object[] toArray() {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            return coll == null ? new Object[0] : coll.toArray();
+        }
+
+        @Override
+        public <T> T[] toArray(final T[] a) {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            return coll == null ? a : coll.toArray(a);
+        }
+
+        @Override
+        public String toString() {
+            final Collection<V> coll = (Collection<V>) decorated().get(key);
+            return coll == null ? "[null]" : coll.toString();
+        }
+    }
+
+    /**
+     * The value collection returned by {@code values()}.
+     */
+    class FlattenedValues extends AbstractCollection<V> implements Serializable {
+        /** Serialization version */
+        private static final long serialVersionUID = -3756982536071129669L;
+
+        /** The values */
+        private final Collection<Collection<V>> values;
+
+
+        /**
+         * Constructor.
+         */
+        FlattenedValues(final Collection<Collection<V>> values) {
+            this.values = values;
+        }
+
+        @Override
+        public Iterator<V> iterator() {
+            final Transformer<Collection<V>, Iterator<V>> transformer =
+                    input -> input == null ? null : input.iterator();
+            return IteratorUtils.chainedIterator(
+                CollectionUtils.collect(values, transformer).iterator());
+        }
+
+
+        @Override
+        public int size() {
+            int size = 0;
+            for (final Collection<V> element : values) {
+                size += CollectionUtils.size(element);
+            }
+            return size;
+        }
+
+        @Override
+        public void clear() {
+            // As per clear contract, only remove if not null.
+            for (final Collection<V> value : values) {
+                if(value != null) {
+                    value.clear();
+                }
+            }
+        }
+    }
+
+    /**
+     * Inner class to create collection using reflection.
+     *
+     * @since 4.1
+     */
+    private static class ReflectionCollectionFactory<T extends Collection<?>> implements Factory<T>, Serializable {
+
+        /** Serialization version */
+        private static final long serialVersionUID = 2998173130757875740L;
+
+        /** Collection class */
+        private final Class<T> collectionClass;
+
+        /**
+         * Constructor that performs checks against supplied class.
+         * @param collectionClass  the class to create using reflection, must not be null
+         * @throws NullPointerException if collectionClass is null
+         * @throws IllegalArgumentException if collectionClass is abstract or doesn't implement Collection or Serializable
+         */
+        ReflectionCollectionFactory(final Class<T> collectionClass) {
+            if (collectionClass == null) {
+                throw new NullPointerException("Collection class must not be null.");
+            }
+            if (collectionClass.isInterface() || collectionClass.isMemberClass() && !java.lang.reflect.Modifier.isStatic(collectionClass.getModifiers())) {
+                throw new IllegalArgumentException("Collection class must not be an interface or non-static inner class.");
+            }
+            if (!Collection.class.isAssignableFrom(collectionClass)) {
+                throw new IllegalArgumentException("Collection class must implement Collection.");
+            }
+            if (!Serializable.class.isAssignableFrom(collectionClass)) {
+                throw new IllegalArgumentException("Collection class must implement Serializable.");
+            }
+            this.collectionClass = collectionClass;
+        }
+
+        @Override
+        public T create() {
+            try {
+                return collectionClass.newInstance();
+            } catch (final InstantiationException e) {
+                throw new IllegalArgumentException("Collection class must have a public no-arg constructor.", e);
+            } catch (final IllegalAccessException e) {
+                throw new IllegalArgumentException("Collection class constructor must be public.", e);
+            }
+        }
+
+        private void readObject(final ObjectInputStream is) throws IOException, ClassNotFoundException {
+            is.defaultReadObject();
+
+            // perform checks again when deserializing the factory
+            if (collectionClass == null) {
+                throw new NullPointerException("Collection class must not be null.");
+            }
+            if (collectionClass.isInterface() || collectionClass.isMemberClass() && !java.lang.reflect.Modifier.isStatic(collectionClass.getModifiers())) {
+                throw new IllegalArgumentException("Collection class must not be an interface or non-static inner class.");
+            }
+            if (!Collection.class.isAssignableFrom(collectionClass)) {
+                throw new IllegalArgumentException("Collection class must implement Collection.");
+            }
+            if (!Serializable.class.isAssignableFrom(collectionClass)) {
+                throw new IllegalArgumentException("Collection class must implement Serializable.");
+            }
+        }
+    }
+}
