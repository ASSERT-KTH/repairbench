diff --git a/tmp/d4b5cdd8-874f-4ae3-b05b-92006c795b2f_buggy.java b/tmp/396f0ff2-3e5c-4ab8-a0fd-d1505f3d2dcc_fixed.java
index e69de29..58cddfd 100644
--- a/tmp/d4b5cdd8-874f-4ae3-b05b-92006c795b2f_buggy.java
+++ b/tmp/396f0ff2-3e5c-4ab8-a0fd-d1505f3d2dcc_fixed.java
@@ -0,0 +1,193 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.commons.collections4.CollectionUtils;
+
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object>
+        implements MultiValuedMap<K, V>, Serializable {
+
+    /** Serialization version */
+    private static final long serialVersionUID = -2214199823759701872L;
+
+    /** The collection class */
+    private final Class<? extends Collection> collectionClass;
+
+
+    /**
+     * Factory method to create a MultiValueMap using the supplied map and Collection class.
+     * <p>
+     * The returned MultiValueMap uses the {@code HashMap} class for the map and {@code ArrayList} for the collection.
+     * It allows null keys and values.
+     *
+     * @param <K>  the key type
+     * @param <V>  the value type
+     * @return a new MultiValueMap
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap() {
+        return multiValueMap(new HashMap<K, Object>(), ArrayList.class);
+    }
+
+    /**
+     * Factory method to create a MultiValueMap using the supplied map and Collection class.
+     *
+     * @param <K>             the key type
+     * @param <V>             the value type
+     * @param map             the map to decorate, must not be null
+     * @param collectionClass the collection class, must not be null
+     * @return a new MultiValueMap
+     * @throws NullPointerException if map or collectionClass is null
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, Object> map,
+                                                         final Class<? extends Collection> collectionClass) {
+        if (collectionClass == null) {
+            throw new NullPointerException("Collection class must not be null");
+        }
+
+        if (collectionClass.equals(String.class) || collectionClass.equals(Integer.class) ||
+                collectionClass.equals(Character.class) || collectionClass.equals(Long.class) ||
+                collectionClass.equals(Short.class) || collectionClass.equals(Byte.class) ||
+                collectionClass.equals(Float.class) || collectionClass.equals(Double.class) ||
+                collectionClass.equals(Boolean.class) ) {
+            throw new UnsupportedOperationException("Cannot use primitive value or wrapper value as a collection");
+        }
+        return new MultiValueMap<>(map, collectionClass);
+    }
+
+
+    /**
+     * Constructor.
+     *
+     * @param map the map to decorate
+     * @param collectionClass the collection class
+     * @since 4.1
+     */
+    protected MultiValueMap(final Map<K, Object> map, final Class<? extends Collection> collectionClass) {
+        super(map);
+        this.collectionClass = collectionClass;
+    }
+
+    //-----------------------------------------------------------------------
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+    }
+
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        if (collectionClass.equals(String.class) || collectionClass.equals(Integer.class) ||
+                collectionClass.equals(Character.class) || collectionClass.equals(Long.class) ||
+                collectionClass.equals(Short.class) || collectionClass.equals(Byte.class) ||
+                collectionClass.equals(Float.class) || collectionClass.equals(Double.class) ||
+                collectionClass.equals(Boolean.class) ) {
+            throw new UnsupportedOperationException("Cannot use primitive value or wrapper value as a collection");
+        }
+    }
+
+
+    //-----------------------------------------------------------------------
+
+    @Override
+    public boolean containsValue(final Object value) {
+        return super.containsValue(value);
+    }
+
+    @Override
+    public Object put(final K key, final Object value) {
+        Collection<V> coll = getCollection(key);
+        final Object previous = coll == null ? null : coll.size();
+        coll.add((V) value); // unsafe cast to V
+        return previous;
+    }
+
+
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public Collection<V> get(final Object key) {
+        return (Collection<V>) decorated().get(key); // unsafe cast to Collection<V>
+    }
+
+
+    @Override
+    public Collection<V> remove(final Object key) {
+        return (Collection<V>) decorated().remove(key); // unsafe cast to Collection<V>
+    }
+
+
+    /**
+     * Gets a collection containing all the values in the map.
+     * <p>
+     * The returned collection is not backed by the MultiValueMap, changes in
+     * the returned list will not affect the MultiValueMap.
+     *
+     * @return a collection view of the values contained in this map
+     */
+    @Override
+    public Collection<V> values() {
+        final Collection<V> vs = CollectionUtils.createCollection(null, size());
+        for (final Object coll : decorated().values()) {
+            vs.addAll((Collection<V>) coll); // unsafe cast
+        }
+        return vs;
+    }
+
+
+    /**
+     * Gets the collection mapped to the specified key. This method is a convenience
+     * method to avoid creating the collection if it doesn't exist.
+     *
+     * @param key  the key to get
+     * @return the collection at the key, or empty collection if not found
+     */
+    @SuppressWarnings("unchecked")
+    private Collection<V> getCollection(final Object key) {
+        Collection<V> coll = (Collection<V>) decorated().get(key); // unsafe cast
+        if (coll == null) {
+            try {
+                coll = collectionClass.newInstance();
+            } catch (final InstantiationException | IllegalAccessException ex) {
+                // we couldn't create a new instance, probably a class with parameters.
+                // create something that will work but warn
+                coll = new ArrayList<>();
+            }
+            decorated().put(key, coll);
+        }
+        return coll;
+    }
+
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public int size() {
+        int size = 0;
+        for (final Object coll : decorated().values()) {
+            size += ((Collection<V>) coll).size(); // unsafe cast
+        }
+        return size;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        boolean empty = true;
+        for (final Collection<?> coll : (Collection<Collection<?>>) decorated().values()) { // unsafe cast
+            if (!coll.isEmpty()) {
+                empty = false;
+                break;
+            }
+        }
+        return empty;
+    }
+
+
+    @Override
+    public void clear() {
+        decorated().clear();
+    }
+
+}
