diff --git a/tmp/8fbfa165-fe4d-46b6-a544-8a2f122243a7_buggy.java b/tmp/976fa79f-a468-4ec6-9e14-a8e24b27c25f_fixed.java
index e69de29..fcf08a4 100644
--- a/tmp/8fbfa165-fe4d-46b6-a544-8a2f122243a7_buggy.java
+++ b/tmp/976fa79f-a468-4ec6-9e14-a8e24b27c25f_fixed.java
@@ -0,0 +1,207 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.commons.collections4.MultiMap;
+import org.apache.commons.collections4.collection.AbstractCollectionDecorator;
+
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object>
+        implements MultiMap<K, V>, Serializable {
+
+    /** Serialization version */
+    private static final long serialVersionUID = -2214199726790381732L;
+
+    /** The factory to create the collection to store values */
+    private final Factory<? extends Collection<V>> collectionFactory;
+
+    /**
+     * Creates a MultiValueMap using the supplied map and a default collection factory.
+     * <p>
+     * The default factory creates an {@code ArrayList} for each key.
+     *
+     * @param map  the map to decorate, must not be null
+     * @throws NullPointerException if map is null
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map) {
+        return multiValueMap(map, ArrayList.class);
+    }
+
+    /**
+     * Creates a MultiValueMap using the supplied map and collection factory.
+     *
+     * @param map  the map to decorate, must not be null
+     * @param collectionFactory  the factory to create collections to store values, must not be null
+     * @throws NullPointerException if map or collectionFactory is null
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,
+                                                           final Factory<? extends Collection<V>> collectionFactory) {
+        if (collectionFactory == null) {
+            throw new NullPointerException("CollectionFactory must not be null.");
+        }
+        return new MultiValueMap<>(map, collectionFactory);
+    }
+
+    /**
+     * Creates a MultiValueMap using the supplied map and a default collection factory.
+     * <p>
+     * The default factory creates an {@code ArrayList} for each key.
+     *
+     * @param <K> the key type
+     * @param <V> the value type
+     * @param map  the map to decorate, must not be null
+     * @param collectionClass the collection class to use, must not be null, must have a public constructor
+     * @throws NullPointerException if map or collectionClass is null
+     * @throws IllegalArgumentException if {@code collectionClass} does not have a public no-args constructor.
+     */
+    public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map, final Class<C> collectionClass) {
+        if (collectionClass == null) {
+            throw new NullPointerException("CollectionClass must not be null.");
+        }
+        return multiValueMap(map, new ClassCollectionFactory<>(collectionClass));
+    }
+
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructor that wraps (not copies).
+     *
+     * @param map  the map to decorate, must not be null
+     * @param collectionFactory  the factory to create value collections, must not be null
+     * @throws NullPointerException if map or collectionFactory is null
+     */
+    protected MultiValueMap(final Map<K, ? super Collection<V>> map, final Factory<? extends Collection<V>> collectionFactory) {
+        super(map);
+        if (collectionFactory == null) {
+            throw new NullPointerException("CollectionFactory must not be null.");
+        }
+        this.collectionFactory = collectionFactory;
+    }
+
+    private void readObject(final ObjectInputStream ois) throws IOException, ClassNotFoundException {
+        ois.defaultReadObject();
+        final Map<K, Collection<V>> map = new HashMap<>();
+        decorated(); // empty method, added to remove warning
+        this.map = map; // from AbstractMapDecorator
+    }
+
+
+    //-----------------------------------------------------------------------
+    @Override
+    public boolean put(final K key, final V value) {
+        Collection<V> coll = get(key);
+        if (coll == null) {
+            coll = createCollection(1);
+            put(key, coll);
+        }
+        return coll.add(value);
+    }
+
+
+
+    @Override
+    public void putAll(final Map<? extends K, ? extends V> map) {
+        for (final Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {
+            put(entry.getKey(), entry.getValue());
+        }
+    }
+
+
+
+    @Override
+    public void putAll(final MultiMap<? extends K, ? extends V> map) {
+        for (final K key : map.keySet()) {
+            putAll(key, map.get(key));
+        }
+    }
+
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public Collection<V> get(final Object key) {
+        return (Collection<V>) decorated().get(key);
+    }
+
+
+    //-----------------------------------------------------------------------
+
+    /**
+     * Creates a new instance of the value collection associated with this multi-value map.
+     * <p>
+     * The collection is created using the factory specified at construction.
+     *
+     * @param size  the anticipated size of the collection (passed to the factory)
+     * @return a new, empty collection
+     */
+    protected Collection<V> createCollection(final int size) {
+        return collectionFactory.create(size);
+    }
+
+    /**
+     * Inner class to allow String constructors.
+     */
+    static class ClassCollectionFactory<V> implements Factory<Collection<V>>, Serializable {
+
+        /** Serialization version */
+        private static final long serialVersionUID = -7753217701674564658L;
+
+        /** The class to create */
+        private final Class<? extends Collection<V>> clazz;
+
+        /**
+         * Constructor that performs no validation.
+         * Use {@code ClassCollectionFactory.classCollectionFactory(Class)} instead.
+         *
+         * @param cls  the class to create, must not be null
+         */
+        ClassCollectionFactory(final Class<? extends Collection<V>> cls) { // package protected
+            this.clazz = cls;
+        }
+        
+        public static <V, C extends Collection<V>> ClassCollectionFactory<V> classCollectionFactory(final Class<C> cls) {
+            if (cls == null) {
+                throw new IllegalArgumentException("Collection class must not be null");
+            }
+            return new ClassCollectionFactory<>(cls);
+        }
+
+        @Override
+        public Collection<V> create(final int size) {
+            try {
+                return clazz.getDeclaredConstructor().newInstance();
+            } catch (final ReflectiveOperationException ex) {
+                throw new IllegalArgumentException("Collection class must have a public no-args constructor", ex);
+            }
+        }
+
+        private Object readResolve() {
+            if (List.class.equals(clazz) || ArrayList.class.equals(clazz)) {
+                return MultiValueMap.arrayListFactory();
+            }
+            // String is unsafe, so check that first
+            if (String.class.equals(clazz)) {
+                throw new UnsupportedOperationException("Unsafe collection class requested, String is not allowed");
+            }
+            return this;
+        }
+
+    }
+
+    private static final Factory<List<Object>> ARRAY_LIST_FACTORY = new Factory<List<Object>>() {
+        @Override
+        public List<Object> create(int size) {
+            return new ArrayList<>(size);
+        }
+    };
+
+    @SuppressWarnings("unchecked")
+    static <E> Factory<List<E>> arrayListFactory() {
+        return (Factory<List<E>>) ARRAY_LIST_FACTORY;
+    }
+
+}
\ No newline at end of file
