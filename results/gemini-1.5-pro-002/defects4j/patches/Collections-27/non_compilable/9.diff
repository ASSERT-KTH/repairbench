diff --git a/tmp/ffce538b-1e37-4136-bb60-0ebf2c49aaa8_buggy.java b/tmp/c29ffa04-193d-4968-b8af-7a9747789a1e_fixed.java
index e69de29..712b17b 100644
--- a/tmp/ffce538b-1e37-4136-bb60-0ebf2c49aaa8_buggy.java
+++ b/tmp/c29ffa04-193d-4968-b8af-7a9747789a1e_fixed.java
@@ -0,0 +1,256 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.commons.collections4.MultiMap;
+import org.apache.commons.collections4.Transformer;
+import org.apache.commons.collections4.collection.AbstractCollectionDecorator;
+import org.apache.commons.collections4.iterators.AbstractIteratorDecorator;
+import org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator;
+import org.apache.commons.collections4.map.AbstractMapDecorator;
+
+/**
+ * Implementation of {@link MultiMap} using a {@link Map} and a {@link Collection}.
+ * <p>
+ * Internally this map uses a standard {@link HashMap} and for the values
+ * it uses a {@link ArrayList}.
+ * </p>
+ * @param <K> the type of the keys in this map
+ * @param <V> the type of the values in this map
+ * @since 4.1
+ */
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Collection<V>>
+        implements MultiMap<K, V>, Serializable {
+
+    /** Serialisation version */
+    private static final long serialVersionUID = -2214190725972373922L;
+
+    /** The collection class to use. */
+    private final Class<? extends Collection<V>> collectionClass;
+
+    /** The factory to use to create value collections. */
+    private transient Transformer<? super K, ? extends Collection<V>> collectionFactory;
+
+
+    /**
+     * Factory method to create a MultiValueMap using the default collection class.
+     * <p>
+     * The returned map uses {@link ArrayList} as the collection type.
+     *
+     * @param <K>  the key type
+     * @param <V>  the value type
+     * @return a new MultiValueMap
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap() {
+        return multiValueMap(new HashMap<K, Collection<V>>(), ArrayList.class);
+    }
+
+    /**
+     * Factory method to create a MultiValueMap.
+     *
+     * @param <K>  the key type
+     * @param <V>  the value type
+     * @param map  the map to decorate, must not be null
+     * @param collectionClass  the collection class, must not be null
+     * @return a new MultiValueMap
+     * @throws NullPointerException if map or collectionClass is null
+     * @since 4.2
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,
+                                                         final Class<? extends Collection<V>> collectionClass) {
+        if (collectionClass == null) {
+            throw new NullPointerException("Collection class must not be null.");
+        }
+        if (map == null) {
+            throw new NullPointerException("Map must not be null.");
+        }
+        return new MultiValueMap<>(map, collectionClass);
+    }
+
+    /**
+     * Factory method to create a MultiValueMap using a custom collection factory.
+     *
+     * @param <K>  the key type
+     * @param <V>  the value type
+     * @param map  the map to decorate, must not be null
+     * @param collectionFactory  the factory to use, must not be null
+     * @return a new MultiValueMap
+     * @throws NullPointerException if map or collectionClass is null
+     * @since 4.2
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,
+                                                         final Transformer<? super K, ? extends Collection<V>> collectionFactory) {
+        if (collectionFactory == null) {
+            throw new NullPointerException("Collection factory must not be null.");
+        }
+        if (map == null) {
+            throw new NullPointerException("Map must not be null.");
+        }
+        return new MultiValueMap<>(map, collectionFactory);
+    }
+
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructor that wraps (not copies) another Map.
+     * <p>
+     * The collectionClass must implement the {@link java.util.Collection}
+     * interface or a runtime exception will be thrown when the map is used.
+     * Unknown unchecked exceptions from the underlying map may also be thrown
+     * when the map is used.
+     *
+     * @param map  the map to decorate, must not be null
+     * @param collectionClass  the collection class, must not be null
+     * @throws NullPointerException if map is null
+     */
+    protected MultiValueMap(final Map<K, ? super Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        super(map);
+        if (collectionClass == null) {
+            throw new NullPointerException("Collection class must not be null.");
+        }
+        this.collectionClass = collectionClass;
+        this.collectionFactory = null;
+    }
+
+    /**
+     * Constructor that wraps (not copies) another Map and provides a
+     * custom collection factory.
+     *
+     * @param map  the map to decorate, must not be null
+     * @param collectionFactory  the factory to use, must not be null
+     * @throws NullPointerException if map is null
+     * @since 4.2
+     */
+    protected MultiValueMap(final Map<K, ? super Collection<V>> map,
+                           final Transformer<? super K, ? extends Collection<V>> collectionFactory) {
+        super(map);
+        if (collectionFactory == null) {
+            throw new NullPointerException("Collection factory must not be null.");
+        }
+        this.collectionClass = null;
+        this.collectionFactory = collectionFactory;
+    }
+
+    private void readObject(final ObjectInputStream ois) throws IOException, ClassNotFoundException {
+        ois.defaultReadObject();
+        final String className = ois.readUTF();
+        if (className != null) {
+            try {
+                this.collectionClass = Class.forName(className).asSubclass(Collection.class);
+            } catch (final ClassNotFoundException ex) { // NOPMD
+                // ignore
+            }
+        }
+
+    }
+
+    private void writeObject(final ObjectOutputStream oos) throws IOException {
+        oos.defaultWriteObject();
+        // serialize the collection class
+        String className = null;
+        if (this.collectionClass != null) {
+            className = this.collectionClass.getName();
+        }
+        oos.writeUTF(className);
+    }
+
+
+    //-----------------------------------------------------------------------
+    @Override
+    public void putAll(final Map<? extends K, ? extends V> map) {
+       map.forEach(this::put);
+    }
+
+    @Override
+    public boolean containsValue(final Object value) {
+        return values().stream().anyMatch(c -> c.contains(value));
+    }
+
+    @Override
+    public Collection<V> get(final Object key) {
+        return wrappedMap().computeIfAbsent((K) key, this::createCollection);
+    }
+
+    @Override
+    public Collection<V> remove(final Object key) {
+        return wrappedMap().remove(key);
+    }
+
+    @Override
+    public boolean removeMapping(final Object key, final Object value) {
+        Collection<V> coll = wrappedMap().get(key);
+        if (coll == null) {
+            return false;
+        }
+
+        boolean changed = coll.remove(value);
+        if (coll.isEmpty()) {
+            wrappedMap().remove(key);
+        }
+
+        return changed;
+    }
+
+    //-----------------------------------------------------------------------
+    @Override
+    protected Collection<V> decorate(final Collection<V> coll) {
+        if (coll == null) {
+            return null;
+        }
+        return new AbstractCollectionDecorator<V>(coll) {
+            @Override
+            public boolean add(final V object) {
+                return decorated().add(object);
+            }
+        };
+    }
+
+    private Collection<V> createCollection(final K key) {
+        if (collectionFactory != null) {
+            return collectionFactory.transform(key);
+        }
+        if (collectionClass == null) {
+            return new ArrayList<>();
+        }
+
+        try {
+            return collectionClass.newInstance();
+        } catch (final Exception e) {
+            throw new UnsupportedOperationException("Cannot instantiate collection class: " + collectionClass.getName());
+        }
+
+    }
+
+
+    //-----------------------------------------------------------------------
+    @Override
+    public Collection<Collection<V>> values() {
+        return new AbstractCollectionDecorator<Collection<V>>(super.values()) {
+            @Override
+            public boolean add(final Collection<V> collection) {
+                for (final V v : collection) {
+                    add(v);
+                }
+                return true;
+            }
+
+            @Override
+            public boolean remove(final Object o) {
+                for (final Map.Entry<K, Collection<V>> entry : wrappedMap().entrySet()) {
+                    final Collection<V> c = entry.getValue();
+                    if (c == o || (c != null && c.equals(o))) {
+                        wrappedMap().remove(entry.getKey());
+                        return true;
+                    }
+                }
+
+                return false;
+            }
+        };
+    }
+}
