diff --git a/tmp/67d07618-f45c-4888-85f2-358330e4b757_buggy.java b/tmp/a17b4565-a8c5-4500-bcb6-795963dae07c_fixed.java
index e69de29..2a8f1e1 100644
--- a/tmp/67d07618-f45c-4888-85f2-358330e4b757_buggy.java
+++ b/tmp/a17b4565-a8c5-4500-bcb6-795963dae07c_fixed.java
@@ -0,0 +1,245 @@
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.commons.collections4.MultiMap;
+import org.apache.commons.collections4.collection.UnmodifiableCollection;
+
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object>
+        implements MultiMap<K, V>, Serializable {
+
+    /** Serialization version */
+    private static final long serialVersionUID = -221605611225708919L;
+
+    /** The collection class to use */
+    private final Class<? extends Collection> collectionClass;
+
+    /**
+     * Creates a new MultiValueMap using the supplied Map and the specified
+     * Collection class to create collections.
+     * <p>
+     * This constructor exists to allow the collection class to be controlled.
+     * If the map contains any entries at construction time, the supplied map must
+     * use collections created by the specified collection class.
+     *
+     * @param map  the map to decorate, must not be null
+     * @param collectionClass  the collection class to use, must not be null
+     * @throws NullPointerException if map or collectionClass is null
+     * @throws ClassCastException if the map contains any entries using non-compliant collections
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, Object> map,
+                                                        final Class<? extends Collection<V>> collectionClass) {
+        return new MultiValueMap<>(map, collectionClass);
+    }
+
+    /**
+     * Factory method to create a MultiValueMap using an ArrayList as the
+     * default collection.
+     *
+     * @param map  the map to decorate, must not be null
+     * @throws NullPointerException if map is null
+     * @return a new multi value map
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, Object> map) {
+        return new MultiValueMap<>(map);
+    }
+
+    /**
+     * Factory method to create an empty MultiValueMap.
+     *
+     * @return a new multi value map
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap() {
+        return new MultiValueMap<>();
+    }
+
+    // -----------------------------------------------------------------------
+    /**
+     * Constructor.
+     *
+     * @param map  the map to decorate, must not be null
+     * @param collectionClass  the collection class to use, must not be null
+     * @throws NullPointerException if map or collectionClass is null
+     * @throws ClassCastException if the map contains any entries using non-compliant collections
+     */
+    protected MultiValueMap(final Map<K, Object> map, final Class<? extends Collection<V>> collectionClass) {
+        super(map);
+        if (collectionClass == null) {
+            throw new NullPointerException("Collection class must not be null");
+        }
+        this.collectionClass = collectionClass;
+        checkValue(map);
+    }
+
+    /**
+     * Constructor that uses an ArrayList as the default collection.
+     *
+     * @param map  the map to decorate, must not be null
+     * @throws NullPointerException if map is null
+     */
+    protected MultiValueMap(final Map<K, Object> map) {
+        this(map, ArrayList.class);
+    }
+
+    /**
+     * Default constructor.
+     */
+    protected MultiValueMap() {
+        this(new HashMap<>(), ArrayList.class);
+    }
+
+    // -----------------------------------------------------------------------
+    /**
+     * Checks that the map contains only allowed value types.
+     * @param map  the map to check
+     * @throws ClassCastException if the map contains any entries using non-compliant collections
+     */
+    private void checkValue(final Map<?, ?> map) {
+        for (final Map.Entry<?, ?> entry : map.entrySet()) {
+            if (!(collectionClass.isInstance(entry.getValue()))) {
+                throw new ClassCastException("Map contains value that is not a " + collectionClass.getName());
+            }
+        }
+    }
+
+
+    // -----------------------------------------------------------------------
+    @Override
+    public void clear() {
+        decorated().clear();
+    }
+
+    @Override
+    public boolean containsKey(final Object key) {
+        return decorated().containsKey(key);
+    }
+
+    @Override
+    public boolean containsValue(final Object value) {
+        for (final Collection<V> collection : getCollections()) {
+            if (collection.contains(value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public Collection<Map.Entry<K, Object>> entrySet() {
+        return decorated().entrySet();
+    }
+
+
+    @Override
+    public Object get(final Object key) {
+        return decorated().get(key);
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return decorated().isEmpty();
+    }
+
+    @Override
+    public Collection<K> keySet() {
+        return decorated().keySet();
+    }
+
+    @Override
+    public Object put(final K key, final Object value) {
+        return decorated().put(key, value);
+    }
+
+    @Override
+    public void putAll(final Map<? extends K, ?> map) {
+        for (final Map.Entry<? extends K, ?> entry : map.entrySet()) {
+            put(entry.getKey(), entry.getValue());
+        }
+    }
+
+
+    @Override
+    public Object remove(final Object key) {
+        return decorated().remove(key);
+    }
+
+    @Override
+    public int size() {
+        int total = 0;
+        for (final Object element : decorated().values()) {
+            total += ((Collection<?>) element).size();
+        }
+        return total;
+    }
+
+    @Override
+    public Collection<Object> values() {
+        final Collection<Object> allValues = new ArrayList<>();
+        for (final Object element : decorated().values()) {
+            allValues.addAll((Collection<?>) element);
+        }
+        return allValues;
+    }
+
+    // -----------------------------------------------------------------------
+    @Override
+    public Collection<V> getCollection(final Object key) {
+        return (Collection<V>) decorated().get(key);
+    }
+
+    @Override
+    public Collection<V> remove(final Object key, final Object item) {
+        final Collection<V> values = getCollection(key);
+        if (values == null) {
+            return null;
+        }
+        values.remove(item);
+        if (values.isEmpty()) {
+            remove(key);
+            return null;
+        }
+        return values;
+    }
+
+    @Override
+    public boolean removeMapping(final Object key, final Object item) {
+        final Collection<V> values = getCollection(key);
+        if (values == null) {
+            return false;
+        }
+        final boolean removed = values.remove(item);
+        if (values.isEmpty()) {
+            remove(key);
+        }
+        return removed;
+    }
+
+    // -----------------------------------------------------------------------
+    private Collection<Collection<V>> getCollections() {
+        return (Collection<Collection<V>>) decorated().values();
+    }
+
+
+    private void writeObject(final ObjectOutputStream oos) throws Exception {
+        oos.defaultWriteObject();
+        oos.writeObject(decorated());
+    }
+
+    private void readObject(final ObjectInputStream ois) throws Exception {
+        ois.defaultReadObject();
+        final Map<K, Object> map = (Map<K, Object>) ois.readObject();
+        if (!collectionClass.isAssignableFrom(ArrayList.class) && !collectionClass.equals(ArrayList.class)) { // ArrayList is allowed for deserialization
+            throw new UnsupportedOperationException("Unsafe collection class requested for deserialization");
+        }
+        setMap(map);
+        checkValue(map);
+    }
+
+
+}
