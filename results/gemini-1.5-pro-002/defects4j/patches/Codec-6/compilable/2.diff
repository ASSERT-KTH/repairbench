diff --git a/tmp/c7b2dc11-ff7b-4923-8802-bb23ca52f201_buggy.java b/tmp/780c6e33-4abb-4c9a-8062-e6ced857a7da_fixed.java
index d3b3ebf..455206b 100644
--- a/tmp/c7b2dc11-ff7b-4923-8802-bb23ca52f201_buggy.java
+++ b/tmp/780c6e33-4abb-4c9a-8062-e6ced857a7da_fixed.java
@@ -1,62 +1,54 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      * 
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      * 
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
             throw new IndexOutOfBoundsException();
         } else if (offset > b.length || offset + len > b.length) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
-            /*
-             Rationale for while-loop on (readLen == 0):
-             -----
-             Base64.readResults() usually returns > 0 or EOF (-1).  In the
-             rare case where it returns 0, we just keep trying.
-
-             This is essentially an undocumented contract for InputStream
-             implementors that want their code to work properly with
-             java.io.InputStreamReader, since the latter hates it when
-             InputStream.read(byte[]) returns a zero.  Unfortunately our
-             readResults() call must return 0 if a large amount of the data
-             being decoded was non-base64, so this while-loop enables proper
-             interop with InputStreamReader for that scenario.
-             -----
-             This is a fix for CODEC-101
-            */
+            int readLen = 0;
+            while (readLen == 0) {
                 if (!base64.hasData()) {
                     byte[] buf = new byte[doEncode ? 4096 : 8192];
                     int c = in.read(buf);
                     // A little optimization to avoid System.arraycopy()
                     // when possible.
                     if (c > 0 && b.length == len) {
                         base64.setInitialBuffer(b, offset, len);
                     }
+                    if (c > 0) {
                         if (doEncode) {
                             base64.encode(buf, 0, c);
                         } else {
                             base64.decode(buf, 0, c);
                         }
+                    } else if (c == -1) {
+                        return -1;
                     }
-            return base64.readResults(b, offset, len);
+                }
+                readLen = base64.readResults(b, offset, len);
+            }
+            return readLen;
         }
     }
