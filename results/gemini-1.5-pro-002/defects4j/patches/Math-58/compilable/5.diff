diff --git a/tmp/3c0c044d-8f4d-44cd-94e5-c42b0e337c53_buggy.java b/tmp/de79131d-7073-48d5-8b56-730e759178be_fixed.java
index 3002587..f4591a1 100644
--- a/tmp/3c0c044d-8f4d-44cd-94e5-c42b0e337c53_buggy.java
+++ b/tmp/de79131d-7073-48d5-8b56-730e759178be_fixed.java
@@ -1,10 +1,48 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        double[] parameters = fit(new Gaussian.Parametric(), guess);
+        if (Double.isNaN(parameters[0]) || Double.isNaN(parameters[1]) || Double.isNaN(parameters[2])) {
+            // try to fit a gaussian with reversed x values
+            final WeightedObservedPoint[] points = getObservations();
+            final WeightedObservedPoint[] revPoints = new WeightedObservedPoint[points.length];
+            for (int i = 0; i < points.length; ++i) {
+                revPoints[i] = new WeightedObservedPoint(points[i].getWeight(),
+                        -points[i].getX(), points[i].getY());
+            }
+            final ParameterGuesser guesser = new ParameterGuesser(revPoints);
+            final double[] revParams = fit(new Gaussian.Parametric(), guesser.guess());
+
+            // check if the reversed model is valid
+            double[] modPoints = new double[points.length];
+            for (int i = 0; i < points.length; i++) {
+                modPoints[i] = new Gaussian.Parametric().value(-points[i].getX(), revParams);
+            }
+            double[] modPointsOriginal = new double[points.length];
+            for (int i = 0; i < points.length; i++) {
+                modPointsOriginal[i] = new Gaussian.Parametric().value(points[i].getX(), parameters);
+            }
+            
+            double errorOrig = 0;
+            for (int i = 0; i < points.length; i++) {
+                errorOrig += Math.abs(points[i].getY() - modPointsOriginal[i]);
+            }
+            double errorRev = 0;
+            for (int i = 0; i < points.length; i++) {
+                errorRev += Math.abs(points[i].getY() - modPoints[i]);
+            }
+
+            if (!Double.isNaN(revParams[0]) && !Double.isNaN(revParams[1]) && !Double.isNaN(revParams[2]) && (errorRev < errorOrig)) {
+                // the reversed model is better than the original one
+                // return the reversed parameters after correcting the norm and mean
+                parameters = new double[] {revParams[0], -revParams[1], revParams[2]};
+            }
+
+        }
+        return parameters;
     }
