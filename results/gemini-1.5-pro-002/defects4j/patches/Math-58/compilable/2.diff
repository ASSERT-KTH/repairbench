diff --git a/tmp/3b0b41bf-c24f-4391-a04a-fc594ed3b4b8_buggy.java b/tmp/fc711675-7764-447d-8ca9-8e96de89b33e_fixed.java
index 3002587..aad2def 100644
--- a/tmp/3b0b41bf-c24f-4391-a04a-fc594ed3b4b8_buggy.java
+++ b/tmp/fc711675-7764-447d-8ca9-8e96de89b33e_fixed.java
@@ -1,10 +1,36 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        double[] parameters = fit(new Gaussian.Parametric(), guess);
+        if (Double.isNaN(parameters[0]) || Double.isNaN(parameters[1]) || Double.isNaN(parameters[2])) {
+            // try to fit a gaussian with reversed x values
+            int len = getObservations().length;
+            WeightedObservedPoint[] reversed = new WeightedObservedPoint[len];
+            for (int i = 0; i < len; i++) {
+                reversed[i] = new WeightedObservedPoint(
+                        getObservations()[i].getWeight(),
+                        -getObservations()[i].getX(),
+                        getObservations()[i].getY()
+                );
+            }
+
+            ParameterGuesser guesser = new ParameterGuesser(reversed);
+            double[] reversedGuess = guesser.guess();
+
+            // reverse back the parameters
+            double[] reversedParameters = fit(new Gaussian.Parametric(), reversedGuess);
+            if (!Double.isNaN(reversedParameters[0]) &&
+                !Double.isNaN(reversedParameters[1]) &&
+                !Double.isNaN(reversedParameters[2])) {
+                parameters[0] = reversedParameters[0];
+                parameters[1] = -reversedParameters[1];
+                parameters[2] = reversedParameters[2];
+            }
+        }
+        return parameters;
     }
