diff --git a/tmp/78c727ac-605f-4b4e-ab0f-629ffcc1d823_buggy.java b/tmp/a8e8766c-46c5-4b81-8882-3149fde94488_fixed.java
index 3002587..8bd6d33 100644
--- a/tmp/78c727ac-605f-4b4e-ab0f-629ffcc1d823_buggy.java
+++ b/tmp/a8e8766c-46c5-4b81-8882-3149fde94488_fixed.java
@@ -1,10 +1,45 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        double[] parameters = fit(new Gaussian.Parametric(), guess);
+        if (Double.isNaN(parameters[0]) || Double.isNaN(parameters[1]) || Double.isNaN(parameters[2])) {
+            // try again using a different starting point
+            double[] newGuess = new double[3];
+            if (guess[2] <= 0) {
+                newGuess[2] = 1;
+            } else {
+                newGuess[2] = guess[2];
+            }
+            if (guess[1] <= 0) {
+                newGuess[1] = 1;
+            } else {
+                newGuess[1] = guess[1];
+            }
+            
+            double maxY = Double.NEGATIVE_INFINITY;
+            double maxX = Double.NaN;
+            
+             for(WeightedObservedPoint observedPoint: getObservations()){
+                 if(observedPoint.getY() > maxY){
+                     maxY = observedPoint.getY();
+                     maxX = observedPoint.getX();
+                 }
+             }
+            newGuess[0] = maxY;
+            if(Double.isNaN(maxX)){
+                newGuess[1] = 1; // if no valid observed points, use a default value
+            } else {
+                newGuess[1] = maxX; 
+            }
+           
+             parameters = fit(new Gaussian.Parametric(), newGuess);
+
+        }
+
+         return parameters;
     }
