diff --git a/tmp/70034091-ef8e-43eb-a529-85f44c42296c_buggy.java b/tmp/f0206f97-dc52-420a-b9c7-5793971ff18e_fixed.java
index 3002587..a9fd566 100644
--- a/tmp/70034091-ef8e-43eb-a529-85f44c42296c_buggy.java
+++ b/tmp/f0206f97-dc52-420a-b9c7-5793971ff18e_fixed.java
@@ -1,10 +1,25 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        double[] parameters = fit(new Gaussian.Parametric(), guess);
+        if (Double.isNaN(parameters[0]) || Double.isNaN(parameters[1]) || Double.isNaN(parameters[2])) {
+            // try to fit a gaussian near zero
+            final WeightedObservedPoint[] obs = getObservations();
+            final ParameterGuesser guesser = new ParameterGuesser(obs);
+            double[] guessNearZero = guesser.guess();
+            
+            // ensure the guess is near zero
+            guessNearZero[0] = 0;
+            guessNearZero[1] = obs[obs.length/2].getX();
+            guessNearZero[2] = 1;
+            
+            return fit(new Gaussian.Parametric(), guessNearZero);
+        } else {
+            return parameters;
+        }
     }
