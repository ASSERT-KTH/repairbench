diff --git a/tmp/0a270500-2044-448f-8e5e-b530b3872bc7_buggy.java b/tmp/be5c6743-5f49-44bf-83f0-1523028ff3da_fixed.java
index 3002587..3a5a150 100644
--- a/tmp/0a270500-2044-448f-8e5e-b530b3872bc7_buggy.java
+++ b/tmp/be5c6743-5f49-44bf-83f0-1523028ff3da_fixed.java
@@ -1,10 +1,27 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        double[] parameters = fit(new Gaussian.Parametric(), guess);
+        if (Double.isNaN(parameters[0]) || Double.isNaN(parameters[1]) || Double.isNaN(parameters[2])) {
+            // try to fit a gaussian with reversed x values
+            final WeightedObservedPoint[] points = getObservations();
+            final WeightedObservedPoint[] revPoints = new WeightedObservedPoint[points.length];
+
+            for(int i = 0; i < points.length; i++){
+                revPoints[i] = new WeightedObservedPoint(points[i].getWeight(),
+                                                       -points[i].getX(),
+                                                       points[i].getY());
+            }
+            final ParameterGuesser guesser = new ParameterGuesser(revPoints);
+            parameters = fit(new Gaussian.Parametric(), guesser.guess());
+                
+            parameters[1] = -parameters[1]; // correct the normalization
+
+        }
+        return parameters;
     }
