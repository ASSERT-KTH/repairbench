diff --git a/tmp/eaf2a6f9-a265-4983-b20c-03568f2448ad_buggy.java b/tmp/a311752c-8c34-4d46-923c-cb0926f7ff73_fixed.java
index e69de29..72f48b7 100644
--- a/tmp/eaf2a6f9-a265-4983-b20c-03568f2448ad_buggy.java
+++ b/tmp/a311752c-8c34-4d46-923c-cb0926f7ff73_fixed.java
@@ -0,0 +1,40 @@
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.type.TypeFactory;
+
+import java.io.IOException;
+
+public class TestTypeFactoryWithRecursiveTypes {
+
+    static class Base {
+        @JsonProperty("base")
+        public int base = 1;
+    }
+
+    static class Sub extends Base {
+        @JsonProperty("sub")
+        public int sub = 2;
+    }
+
+
+    protected ObjectMapper objectMapper() {
+        return new ObjectMapper();
+    }
+
+    public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {
+        TypeFactory tf = TypeFactory.defaultInstance();
+        tf.constructType(Base.class);
+        tf.constructType(Sub.class);
+        Sub sub = new Sub();
+        String serialized = objectMapper().writeValueAsString(sub);
+        assertEquals("{\"base\":1,\"sub\":2}", serialized);
+    }
+
+    protected void assertEquals(String expected, String actual) {
+        if (!expected.equals(actual)) {
+            throw new AssertionError("Expected: " + expected + ", Actual: " + actual);
+
+        }
+    }
+
+}
\ No newline at end of file
