diff --git a/tmp/943a89c0-2c7a-4374-8db6-93266a8c24fc_buggy.java b/tmp/fd461efc-7ce4-490f-9a6a-bb08b119750d_fixed.java
index 1303a19..262ba7a 100644
--- a/tmp/943a89c0-2c7a-4374-8db6-93266a8c24fc_buggy.java
+++ b/tmp/fd461efc-7ce4-490f-9a6a-bb08b119750d_fixed.java
@@ -1,45 +1,62 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
+    if (n.getParent().getType() == Token.ASSIGN ||
+        n.getParent().getType() == Token.ASSIGN_ADD ||
+        n.getParent().getType() == Token.ASSIGN_BITAND ||
+        n.getParent().getType() == Token.ASSIGN_BITOR ||
+        n.getParent().getType() == Token.ASSIGN_BITXOR ||
+        n.getParent().getType() == Token.ASSIGN_DIV ||
+        n.getParent().getType() == Token.ASSIGN_LSH ||
+        n.getParent().getType() == Token.ASSIGN_MOD ||
+        n.getParent().getType() == Token.ASSIGN_MUL ||
+        n.getParent().getType() == Token.ASSIGN_RSH ||
+        n.getParent().getType() == Token.ASSIGN_SUB ||
+        n.getParent().getType() == Token.ASSIGN_URSH ||
+        n.getParent().getType() == Token.INC ||
+        n.getParent().getType() == Token.DEC) {
+      return n;
+    }
+
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
