diff --git a/tmp/7d164e13-b76d-42cd-934d-6ab922f11f6a_buggy.java b/tmp/7bf14e70-492e-4ec2-8c4f-1b55ca8bd6a9_fixed.java
index d4e6d48..437f34d 100644
--- a/tmp/7d164e13-b76d-42cd-934d-6ab922f11f6a_buggy.java
+++ b/tmp/7bf14e70-492e-4ec2-8c4f-1b55ca8bd6a9_fixed.java
@@ -1,23 +1,23 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value != null && value.getNext() == null) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
