diff --git a/tmp/9b0b4703-1868-4084-8fbb-14d93b3c6b1f_buggy.java b/tmp/ff9bf7db-1a7f-4448-9055-d78eea2c056b_fixed.java
index 5f96616..44d8b9c 100644
--- a/tmp/9b0b4703-1868-4084-8fbb-14d93b3c6b1f_buggy.java
+++ b/tmp/ff9bf7db-1a7f-4448-9055-d78eea2c056b_fixed.java
@@ -1,20 +1,23 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    if (constraint.isRecordType() || constraint.isUnionType()) {
+      ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+      if (constraintObj != null && constraintObj.isRecordType()) {
+        matchRecordTypeConstraint(constraintObj);
+      }
     }
   }
