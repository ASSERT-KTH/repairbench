diff --git a/tmp/9f909dcb-10ac-4905-b2f5-f8624e440c05_buggy.java b/tmp/5d4ae43d-afdf-4185-a9e4-7dcf1d21f73b_fixed.java
index 5f96616..dc90289 100644
--- a/tmp/9f909dcb-10ac-4905-b2f5-f8624e440c05_buggy.java
+++ b/tmp/5d4ae43d-afdf-4185-a9e4-7dcf1d21f73b_fixed.java
@@ -1,20 +1,28 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
+    if (constraint.isUnionType()) {
+      for (JSType alternative : constraint.toMaybeUnionType().getAlternates()) {
+        matchConstraint(alternative);
+      }
+      return;
+    }
+
+
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
