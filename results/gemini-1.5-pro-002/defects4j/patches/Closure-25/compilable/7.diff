diff --git a/tmp/cee6a326-c219-4658-9c3d-e0a993693de2_buggy.java b/tmp/085bd3ce-ff04-47bd-97f1-1a499fef65bd_fixed.java
index b98f0a7..a184ca0 100644
--- a/tmp/cee6a326-c219-4658-9c3d-e0a993693de2_buggy.java
+++ b/tmp/085bd3ce-ff04-47bd-97f1-1a499fef65bd_fixed.java
@@ -1,29 +1,37 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          if (type != null) {
+            n.setJSType(type);
+            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+              scope = traverse(arg, scope);
             }
           }
         }
+      }
+    }
+    if (type == null) {
         n.setJSType(type);
         for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
           scope = traverse(arg, scope);
         }
+    }
     return scope;
   }
