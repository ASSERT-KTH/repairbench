diff --git a/tmp/0acda0cb-ea82-4242-b8b0-e9cdf24b9140_buggy.java b/tmp/4dcefbcf-2c34-4d50-af41-95890ece1f3c_fixed.java
index b98f0a7..ef85d86 100644
--- a/tmp/0acda0cb-ea82-4242-b8b0-e9cdf24b9140_buggy.java
+++ b/tmp/4dcefbcf-2c34-4d50-af41-95890ece1f3c_fixed.java
@@ -1,29 +1,50 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          if (constructor.getNext() != null && constructorType.isFunctionType()) {
+            FunctionType functionType = constructorType.toMaybeFunctionType();
+            if (functionType != null) {
+              for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+                int i = arg.getIndex();
+                if (functionType.hasParameterAt(i)) {
+                   JSType paramType = functionType.getParameterType(i);
+                   JSType argType = arg.getJSType();
+                   if (argType != null) {
+                      arg.setJSType(paramType);
+                   }
+                 }
+
+
+              }
+
+            }
+
+          }
+
+
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
