diff --git a/tmp/57965a1d-c96e-412a-b023-e878fef0f482_buggy.java b/tmp/a68611dc-a62f-4cb3-b3e7-b41172af027a_fixed.java
index b98f0a7..46ef4cb 100644
--- a/tmp/57965a1d-c96e-412a-b023-e878fef0f482_buggy.java
+++ b/tmp/a68611dc-a62f-4cb3-b3e7-b41172af027a_fixed.java
@@ -1,29 +1,55 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          if (n.getParent().isName()) {
+            n.getParent().setJSType(type);
+          }
+
+          // Propagate the declared type to the new'ed constructor.
+          Node arg = constructor.getNext();
+          if (arg != null) {
+             // Check for arguments that are not passed
+             if (ct.getParameterCount() == 0 ) {
+               for (; arg != null; arg = arg.getNext()) {
+                 scope = traverse(arg, scope);
+               }             
+               return scope;
+             }
+            for (int i = 0; i < ct.getParameterCount() && arg != null;
+                 i++, arg = arg.getNext()) {
+
+              JSType declaredParamType = ct.getParameterType(i);
+              scope = traverse(arg, scope.withDeclaredType(declaredParamType));
+              
+            }            
+            for (; arg != null; arg = arg.getNext()) {
+              scope = traverse(arg, scope);
+            }
+          }
+          return scope;
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
