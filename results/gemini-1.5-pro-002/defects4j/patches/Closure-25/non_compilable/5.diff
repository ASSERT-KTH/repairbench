diff --git a/tmp/67efd80c-be90-48ad-88cb-12cf58cfcb0a_buggy.java b/tmp/ee599957-0c7f-4b84-ba7f-c18c4d63b044_fixed.java
index b98f0a7..91c0b54 100644
--- a/tmp/67efd80c-be90-48ad-88cb-12cf58cfcb0a_buggy.java
+++ b/tmp/ee599957-0c7f-4b84-ba7f-c18c4d63b044_fixed.java
@@ -1,29 +1,38 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          if (constructor.getNext() != null) {
+            JSType[] argTypes = ct.getParameterTypes();
+            Node arg = constructor.getNext();
+            for (int i = 0; arg != null && i < argTypes.length; i++, arg = arg.getNext()) {
+              JSType expectedType = argTypes[i];
+              inferPropertyTypes(arg, expectedType);
+            }
+          }
+
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
