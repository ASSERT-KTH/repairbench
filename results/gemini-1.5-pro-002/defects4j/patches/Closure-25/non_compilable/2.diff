diff --git a/tmp/9fba1ee1-b54f-44b3-9b5d-8e690878cbec_buggy.java b/tmp/6c31406a-ee16-4075-8a76-c0cc826e719f_fixed.java
index b98f0a7..9d86275 100644
--- a/tmp/9fba1ee1-b54f-44b3-9b5d-8e690878cbec_buggy.java
+++ b/tmp/6c31406a-ee16-4075-8a76-c0cc826e719f_fixed.java
@@ -1,29 +1,39 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+          if (type != null) {
             for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
               scope = traverse(arg, scope);
             }
+            JSType expectedType = ct.getParameterType(0);
+            if (expectedType != null) {
+              JSType argType = constructor.getNext().getJSType();
+              if (argType != null) {
+                inferPropertyTypes(expectedType, argType);
+              }
+            }
+
+          }
+        }
+      }
+    }
+    n.setJSType(type);
     return scope;
   }
