diff --git a/tmp/e58db5a8-5aae-4a96-b695-eef39aad4870_buggy.java b/tmp/f106b0aa-50b0-4117-a40c-9de96deb9754_fixed.java
index e69de29..1175c15 100644
--- a/tmp/e58db5a8-5aae-4a96-b695-eef39aad4870_buggy.java
+++ b/tmp/f106b0aa-50b0-4117-a40c-9de96deb9754_fixed.java
@@ -0,0 +1,60 @@
+package com.fasterxml.jackson.core.json;
+
+import java.io.IOException;
+
+import com.fasterxml.jackson.core.*;
+
+public class TestJsonGeneratorFeatures
+    extends com.fasterxml.jackson.core.BaseTest
+{
+    private final JsonFactory JSON_F = new JsonFactory();
+
+    // for [core#246]
+    public void testFieldNameQuotingEnabled() throws IOException
+    {
+        // // First, test with default factory, with quoting enabled by default
+        
+        // First, default, with quotes
+        _testFieldNameQuotingEnabled(JSON_F, true, true, "{\"foo\":1}");
+        _testFieldNameQuotingEnabled(JSON_F, false, true, "{\"foo\":1}");
+
+        // then without quotes
+        _testFieldNameQuotingEnabled(JSON_F, true, false, "{foo:1}");
+        _testFieldNameQuotingEnabled(JSON_F, false, false, "{foo:1}");
+
+        // // Then with alternatively configured factory
+
+        JsonFactory JF2 = new JsonFactory();
+        JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+
+        _testFieldNameQuotingEnabled(JF2, true, true, "{foo:1}");
+        _testFieldNameQuotingEnabled(JF2, false, true, "{foo:1}");
+
+        // then without quotes
+        _testFieldNameQuotingEnabled(JF2, true, false, "{foo:1}");
+        _testFieldNameQuotingEnabled(JF2, false, false, "{foo:1}");
+    }
+
+    protected void _testFieldNameQuotingEnabled(JsonFactory f, boolean useBytes,
+            boolean quoting, String expected)
+        throws IOException
+    {
+        JsonGenerator jg = useBytes ? f.createGenerator(new ByteArrayBuilder())
+            : f.createGenerator(new StringWriter());
+        if (quoting) {
+            jg.enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+        } else {
+            jg.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+        }
+        jg.writeStartObject();
+        jg.writeFieldName("foo");
+        jg.writeNumber(1);
+        jg.writeEndObject();
+        jg.close();
+
+        String actual = useBytes ? new String(((ByteArrayBuilder) jg.getOutputTarget()).toByteArray())
+            : jg.getOutputTarget().toString();
+
+        assertEquals(expected, actual);        
+    }
+}
\ No newline at end of file
