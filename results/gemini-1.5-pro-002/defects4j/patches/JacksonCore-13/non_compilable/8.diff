diff --git a/tmp/fbc826bc-5a60-405b-a918-2db657912dc7_buggy.java b/tmp/0d47a9ca-d289-44f5-be4f-baf6c9b41445_fixed.java
index e69de29..514849c 100644
--- a/tmp/fbc826bc-5a60-405b-a918-2db657912dc7_buggy.java
+++ b/tmp/0d47a9ca-d289-44f5-be4f-baf6c9b41445_fixed.java
@@ -0,0 +1,61 @@
+package com.fasterxml.jackson.core.json;
+
+import java.io.*;
+
+import com.fasterxml.jackson.core.*;
+
+public class TestJsonGeneratorFeatures
+    extends com.fasterxml.jackson.core.BaseTest
+{
+    private final JsonFactory JSON_F = new JsonFactory();
+
+    public void testFieldNameQuotingEnabled() throws IOException
+    {
+        // // First, test with default factory, with quoting enabled by default
+        
+        // First, default, with quotes
+        _testFieldNameQuotingEnabled(JSON_F, true, true, "{\"foo\":1}");
+        _testFieldNameQuotingEnabled(JSON_F, false, true, "{\"foo\":1}");
+
+        // then without quotes
+        _testFieldNameQuotingEnabled(JSON_F, true, false, "{foo:1}");
+        _testFieldNameQuotingEnabled(JSON_F, false, false, "{foo:1}");
+
+        // // Then with alternatively configured factory
+
+        JsonFactory JF2 = new JsonFactory();
+        JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+
+        _testFieldNameQuotingEnabled(JF2, true, true, "{foo:1}");
+        _testFieldNameQuotingEnabled(JF2, false, true, "{foo:1}");
+
+        // then without quotes
+        _testFieldNameQuotingEnabled(JF2, true, false, "{foo:1}");
+        _testFieldNameQuotingEnabled(JF2, false, false, "{foo:1}");
+    }
+
+    private void _testFieldNameQuotingEnabled(JsonFactory f, boolean useBytes,
+            boolean quoted, String exp)
+        throws IOException
+    {
+        JsonGenerator jg;
+
+        ByteArrayOutputStream bytes = useBytes ? new ByteArrayOutputStream() : null;
+        StringWriter sw = useBytes ? null : new StringWriter();
+
+        if (useBytes) {
+            jg = f.createGenerator(bytes);
+        } else {
+            jg = f.createGenerator(sw);
+        }
+
+        jg.writeStartObject();
+        jg.writeFieldName("foo");
+        jg.writeNumber(1);
+        jg.writeEndObject();
+        jg.close();
+
+        String act = useBytes ? new String(bytes.toByteArray(), "UTF-8") : sw.toString();
+        assertEquals(exp, act);
+    }
+}
\ No newline at end of file
