diff --git a/tmp/99b7aa6f-097f-4e0b-afbb-98b291a5ac70_buggy.java b/tmp/e5875a27-0e64-496a-8690-81d795fb4f05_fixed.java
index e69de29..69c5259 100644
--- a/tmp/99b7aa6f-097f-4e0b-afbb-98b291a5ac70_buggy.java
+++ b/tmp/e5875a27-0e64-496a-8690-81d795fb4f05_fixed.java
@@ -0,0 +1,42 @@
+import java.io.*;
+import com.fasterxml.jackson.core.*;
+import com.fasterxml.jackson.core.json.*;
+
+public class TestJsonGeneratorFeatures
+    extends com.fasterxml.jackson.core.BaseTest
+{
+    private final JsonFactory JSON_F = new JsonFactory();
+
+    // // // Helper methods
+
+    private void _testFieldNameQuotingEnabled(JsonFactory f, boolean useBytes,
+            boolean quote, String expected)
+        throws IOException
+    {
+        String DOC = quote ? "{\"foo\":1}" : "{foo:1}";
+
+        StringWriter sw = new StringWriter();
+        JsonGenerator jg;
+
+        if (useBytes) {
+            jg = f.createGenerator(new ByteArrayOutputStream());
+            jg.writeStartObject();
+            jg.writeFieldName("foo");
+            jg.writeNumber(1);
+            jg.writeEndObject();
+            jg.close();
+        } else {
+            jg = f.createGenerator(sw);
+            jg.writeStartObject();
+            jg.writeFieldName("foo");
+            jg.writeNumber(1);
+            jg.writeEndObject();
+            jg.close();
+    
+            String generated = sw.toString();
+            if (!generated.equals(expected)) {
+                fail("Expected '"+expected+"', generated '"+generated+"'");
+            }
+        }
+    }
+}
\ No newline at end of file
