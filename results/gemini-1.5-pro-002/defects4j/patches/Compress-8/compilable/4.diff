diff --git a/tmp/e60a4d94-2934-4db3-bd99-2dde63a7c1e6_buggy.java b/tmp/805e615d-b721-485c-8e76-11bb81e64511_fixed.java
index e087f95..a56e0ad 100644
--- a/tmp/e60a4d94-2934-4db3-bd99-2dde63a7c1e6_buggy.java
+++ b/tmp/805e615d-b721-485c-8e76-11bb81e64511_fixed.java
@@ -1,53 +1,66 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2");
+        }
+
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
 
         for (int i = start; i < end; i++){
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
+                if (currentByte == (byte) ' ' || currentByte == 0) {
                     continue;
                 }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+            if (currentByte == 0 || currentByte == (byte) ' ') {
+                break;
+            }
 
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); 
+        }
+
+         if (stillPadding) {
+            return 0;
+        }
+
+        int i = 0;
+        for (i = 1; i < length; i++) {
+           if(buffer[offset+length -i] != 0 && buffer[offset+length -i] != ' ') {
+             break;   
+           }
+        }
+        if(i==1)
+        {
+            throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, offset + length-1, buffer[offset + length-1]));
         }
 
         return result;
     }
