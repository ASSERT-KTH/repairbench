diff --git a/tmp/475a0df5-6abb-403b-83b7-092ba8e69e14_buggy.java b/tmp/a9d7425b-a5e2-4fe3-afc5-0cbd20ad4ae1_fixed.java
index 0b7c52e..219c187 100644
--- a/tmp/475a0df5-6abb-403b-83b7-092ba8e69e14_buggy.java
+++ b/tmp/a9d7425b-a5e2-4fe3-afc5-0cbd20ad4ae1_fixed.java
@@ -1,27 +1,46 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
+        if (child.isQuotedString()) {
           String name = child.getString();
           T type = typeSystem.getType(getScope(), n, name);
 
           Property prop = getProperty(name);
           if (!prop.scheduleRenaming(child,
                                      processProperty(t, prop, type, null))) {
             // TODO(user): It doesn't look like the user can do much in this
             // case right now.
             if (propertiesToErrorFor.containsKey(name)) {
               compiler.report(JSError.make(
                   t.getSourceName(), child, propertiesToErrorFor.get(name),
                   Warnings.INVALIDATION, name,
                   (type == null ? "null" : type.toString()), n.toString(), ""));
             }
           }
+        } else {
+          // GET or SET
+          Node key = child.getFirstChild();
+          String name = key.getString();
+          T type = typeSystem.getType(getScope(), n, name);
+          Property prop = getProperty(name);
+
+          if (!prop.scheduleRenaming(key,
+               processProperty(t, prop, type, null))) {
+            if (propertiesToErrorFor.containsKey(name)) {
+              compiler.report(JSError.make(
+                  t.getSourceName(), key, propertiesToErrorFor.get(name),
+                  Warnings.INVALIDATION, name,
+                  (type == null ? "null" : type.toString()), n.toString(), ""));
+             }
+           }
+
+        }
       }
     }
