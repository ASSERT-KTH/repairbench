diff --git a/tmp/0b5bf394-e76b-4c04-b140-72b987b80fc1_buggy.java b/tmp/6b6d955e-34d6-483c-bc87-19ded3057fa4_fixed.java
index 0b7c52e..9ce2e96 100644
--- a/tmp/0b5bf394-e76b-4c04-b140-72b987b80fc1_buggy.java
+++ b/tmp/6b6d955e-34d6-483c-bc87-19ded3057fa4_fixed.java
@@ -1,27 +1,37 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
+        if (child.isQuotedString()) {
           String name = child.getString();
           T type = typeSystem.getType(getScope(), n, name);
 
           Property prop = getProperty(name);
           if (!prop.scheduleRenaming(child,
                                      processProperty(t, prop, type, null))) {
             // TODO(user): It doesn't look like the user can do much in this
             // case right now.
             if (propertiesToErrorFor.containsKey(name)) {
               compiler.report(JSError.make(
                   t.getSourceName(), child, propertiesToErrorFor.get(name),
                   Warnings.INVALIDATION, name,
                   (type == null ? "null" : type.toString()), n.toString(), ""));
             }
           }
+        } else {
+          // GET or SET
+          Node key = child.getFirstChild();
+          String name = key.getString();
+          T type = typeSystem.getType(getScope(), key, name);
+          Property prop = getProperty(name);
+
+          processProperty(t, prop, type, child);
+        }
       }
     }
