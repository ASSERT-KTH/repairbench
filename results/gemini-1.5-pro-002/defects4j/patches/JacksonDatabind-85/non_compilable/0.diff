diff --git a/tmp/5c0e8223-cfda-4ec3-88f7-c2c680c6b08c_buggy.java b/tmp/e596da42-4cff-4330-bf7b-0081f098f357_fixed.java
index d926eea..5a65ad0 100644
--- a/tmp/5c0e8223-cfda-4ec3-88f7-c2c680c6b08c_buggy.java
+++ b/tmp/e596da42-4cff-4330-bf7b-0081f098f357_fixed.java
@@ -1,48 +1,69 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
                 if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                                 || format.hasLocale() || format.hasTimeZone()) {
                     TimeZone tz = format.getTimeZone();
                     final String pattern = format.hasPattern()
                                     ? format.getPattern()
                                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
                     SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                     if (tz == null) {
                         tz = serializers.getTimeZone();
                     }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
         // Otherwise, need one of these changes:
 
-
+        DateFormat df = serializers.getConfig().getDateFormat();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
-
+        if (df instanceof StdDateFormat) {
+            StdDateFormat std = (StdDateFormat) df;
+            // 20-Apr-2016, tatu: With 2.8, must prevent use of default ISO8601 format
+            //    as it can be modified (and is often, via `DateFormat.getDateInstance()`)
+            //    but cannot be reliably cloned. Instead, create vanilla instance if it
+            //    looks like default one: better for date/time values also.
+            if (std.isDefault()) {
+                return withFormat(Boolean.FALSE, (DateFormat) std.clone());
+            }
+            return withFormat(Boolean.FALSE, (DateFormat) std.clone());
+        }
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
+        if (!(df instanceof SimpleDateFormat)) {
+            serializers.reportBadDefinition(handledType(), String.format(
+"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
+                    df.getClass().getName()));
+        }
+        SimpleDateFormat sdf = (SimpleDateFormat) df;
         // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+        sdf = new SimpleDateFormat(sdf.toPattern(), format.hasLocale() ? format.getLocale() : sdf.getLocale());
+        TimeZone newTz = format.getTimeZone();
+        if (newTz == null) {
+            newTz = serializers.getTimeZone();
+        }
+        sdf.setTimeZone(newTz);
+        return withFormat(Boolean.FALSE, sdf);
     }
