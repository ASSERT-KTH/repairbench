diff --git a/tmp/407888e7-5aaa-4a43-8363-ce7925dfad8d_buggy.java b/tmp/28b37dd6-349d-423a-b0fc-bac002e7bac6_fixed.java
index e69de29..6a5aad1 100644
--- a/tmp/407888e7-5aaa-4a43-8363-ce7925dfad8d_buggy.java
+++ b/tmp/28b37dd6-349d-423a-b0fc-bac002e7bac6_fixed.java
@@ -0,0 +1,130 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.TypeVariable;
+import java.util.*;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+/**
+ * Base class for type implementations, which must implement
+ * {@link JavaType} as well as {@link Type}.
+ */
+public abstract class TypeBase
+    extends JavaType
+    implements Type
+{
+    private static final long serialVersionUID = 2;
+
+    protected final TypeFactory _typeFactory;
+
+    protected final JavaType _superClass;
+
+    protected final JavaType[] _superInterfaces;
+
+    /**
+     * Main constructor to use by extending classes.
+     */
+    protected TypeBase(Class<?> raw, int hash, TypeFactory tf,
+            JavaType superClass, JavaType[] superInts)
+    {
+        super(raw, hash);
+        _typeFactory = tf;
+        _superClass = superClass;
+        _superInterfaces = superInts;
+    }
+
+    @Override
+    public abstract JavaType refine(Class<?> rawType, TypeBindings bindings,
+            JavaType superClass, JavaType[] superInterfaces);
+
+    @Override
+    protected JavaType _narrow(Class<?> subclass) {
+        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+                _valueHandler, _typeHandler, _asStatic);
+    }
+
+    @Override
+    public TypeBindings getBindings() {
+        return _bindings;
+    }
+
+    @Override
+    public int containedTypeCount() { return 0; }
+
+    @Override
+    public JavaType containedType(int index) { return null; }
+
+    @Override
+    @Deprecated // since 2.7
+    public String containedTypeName(int index) { return null; }
+    
+    @Override
+    public JavaType getSuperClass() { return _superClass; }
+
+    @Override
+    public List<JavaType> getInterfaces() {
+        if (_superInterfaces == null) {
+            return Collections.emptyList();
+        }
+        switch (_superInterfaces.length) {
+        case 0:
+            return Collections.emptyList();
+        case 1:
+            return Collections.singletonList(_superInterfaces[0]);
+        }
+        return Arrays.asList(_superInterfaces);
+    }
+
+    @Override
+    public final JavaType findSuperType(Class<?> rawTarget) {
+        if (rawTarget == _class) {
+            return this;
+        }
+        // Check super interfaces first:
+        if (rawTarget.isInterface()) {
+            if (_superInterfaces != null) {
+                for (JavaType it : _superInterfaces) {
+                    JavaType type = it.findSuperType(rawTarget);
+                    if (type != null) {
+                        return type;
+                    }
+                }
+            }
+        }
+        // and if not found, super class and its supertypes
+        if (_superClass != null) {
+            JavaType type = _superClass.findSuperType(rawTarget);
+            if (type != null) {
+                return type;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder(40).append("[type ");
+        sb.append(buildCanonicalName());
+        sb.append(']');
+        return sb.toString();
+    }
+
+    protected String buildCanonicalName() {
+        StringBuilder sb = new StringBuilder();
+        sb.append(_class.getName());
+        if (_bindings != null && !_bindings.isEmpty()) {
+            sb.append('<');
+            int i = 0;
+            for (JavaType var : _bindings.getTypeParameters()) {
+                if (i > 0) {
+                    sb.append(',');
+                }
+                sb.append(var.getGenericSignature());
+                ++i;
+            }
+            sb.append('>');
+        }
+        return sb.toString();
+    }    
+}
\ No newline at end of file
