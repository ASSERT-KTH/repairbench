diff --git a/tmp/e567a28a-1f55-4e6f-9d2b-5dfb2083c138_buggy.java b/tmp/ff2172e9-9eba-4029-b90e-2188473befcd_fixed.java
index e69de29..0a4acee 100644
--- a/tmp/e567a28a-1f55-4e6f-9d2b-5dfb2083c138_buggy.java
+++ b/tmp/ff2172e9-9eba-4029-b90e-2188473befcd_fixed.java
@@ -0,0 +1,214 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.TypeVariable;
+import java.util.Arrays;
+import java.util.Collections;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+public class RecursiveType extends TypeBase
+{
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * Type-erased version of the full type.
+     */
+    protected final JavaType _erasedType;
+
+    protected JavaType _referencedType;
+
+    public RecursiveType(JavaType erasedType, TypeVariable<?>[] typeVars) {
+        super(erasedType.getRawClass(), erasedType.hashCode(), erasedType._valueHandler,
+                erasedType._typeHandler, erasedType.isContainerType(), erasedType.isEnumType());
+        _erasedType = erasedType;
+        _typeParameters = typeVars;
+    }
+
+    @Override
+    public JavaType withContentType(JavaType contentType) {
+        throw new IllegalArgumentException("Illegal to call withContentType() on "+getClass().getName());
+    }
+
+    @Override
+    public JavaType withTypeHandler(Object h) {
+        if (h == _typeHandler) {
+            return this;
+        }
+        return new RecursiveType(_erasedType, _typeParameters).withContentTypeHandler(h);
+    }
+
+    @Override
+    public JavaType withContentTypeHandler(Object h) {
+        if (h == _contentTypeHandler) {
+            return this;
+        }
+        return new RecursiveType(_erasedType, _typeParameters).withTypeHandler(_typeHandler)
+                .withValueHandler(_valueHandler).withContentTypeHandler(h);
+    }
+
+    @Override
+    public JavaType withValueHandler(Object h) {
+        if (h == _valueHandler) {
+            return this;
+        }
+        return new RecursiveType(_erasedType, _typeParameters).with(h, _typeHandler, _contentTypeHandler);
+    }
+
+    @Override
+    public JavaType withStaticTyping() {
+        if (_asStatic) {
+            return this;
+        }
+        return new RecursiveType(_erasedType.withStaticTyping(), _typeParameters).with(this);
+    }
+
+    public RecursiveType with(Object valueHandler, Object typeHandler, Object contentTypeHandler) {
+        RecursiveType rt = new RecursiveType(_erasedType, _typeParameters);
+        rt._valueHandler = valueHandler;
+        rt._typeHandler = typeHandler;
+        rt._contentTypeHandler = contentTypeHandler;
+        rt._asStatic = _asStatic;
+        return rt;
+    }
+
+    public void setReferencedType(JavaType t) {
+        if (_referencedType != null) {
+            throw new IllegalStateException("Trying to re-set self reference; old value = "+_referencedType+", new = "+t);
+        }
+        _referencedType = t;
+    }
+
+    @Override
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder(40 + _erasedType.getRawClass().getName().length());
+        sb.append("[recursive type; ");
+        sb.append(_erasedType.getRawClass().getName());
+        if (_referencedType != null) {
+            sb.append(" -> ").append(_referencedType.toCanonical());
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) return true;
+        if (o == null) return false;
+        if (o.getClass() != getClass()) return false;
+
+        RecursiveType other = (RecursiveType) o;
+
+        if (_erasedType != other._erasedType && !_erasedType.equals(other._erasedType)) {
+            return false;
+        }
+        if (_referencedType == null) {
+            return (other._referencedType == null);
+        }
+        return _referencedType.equals(other._referencedType);
+    }
+
+    @Override
+    protected JavaType _narrow(Class<?> subclass) {
+        /* 02-Nov-2015, tatu: Not 100% sure if right, but assuming that inheritance
+         *    of generic types is never resolved recursively; meaning that possible
+         *    type variables from subclass won't resolve to same instance in this
+         *    type.
+         */
+        if (_erasedType.getRawClass() == subclass) { // right?
+            return this;
+        }
+        return new SimpleType(subclass, _typeParameters,
+                _erasedType.getSuperClass(), // won't matter usually, may be important with recursive ref
+                ObjectArrays.copyOf(_bindings, _bindings.length), _asStatic);
+    }
+
+
+    @Override
+    public JavaType getSuperClass() {
+        if (_referencedType != null) {
+            return _referencedType.getSuperClass();
+        }
+        return _erasedType.getSuperClass();
+    }
+
+    @Override
+    public JavaType findSuperType(Class<?> rawTarget)
+    {
+        if (rawTarget == _erasedType.getRawClass()) {
+            return this;
+        }
+        if (_referencedType != null) {
+            return _referencedType.findSuperType(rawTarget);
+        }
+        return null;
+    }
+
+    @Override
+    public JavaType getContentType() {
+        return null;
+    }
+
+    @Override
+    public JavaType getKeyType() {
+        return null;
+    }
+
+
+    @Override
+    public JavaType refine(Class<?> rawType, TypeBindings bindings,
+            JavaType superClass, JavaType[] superInterfaces)
+    {
+        if (rawType != _erasedType.getRawClass()) {
+            return null; // does not match, can not refine
+        }
+        if (bindings.isEmpty() && (superClass == _superClass) && Arrays.equals(superInterfaces, _interfaces)) {
+            return this; // already resolved, nothing more
+        }
+        if (_referencedType != null) { // or, if fully resolved
+            return _referencedType.refine(rawType, bindings, superClass, superInterfaces);
+        }
+        // if not yet resolved, must create new instance to avoid infinite loop
+        JavaType newSuper = (superClass == null) ? this : superClass;
+        return new RecursiveType(_erasedType, _typeParameters)
+                        .with(this)
+                        .refine(bindings, newSuper, superInterfaces);
+    }
+
+    @Override
+    protected String buildCanonicalName() {
+        return _erasedType.getRawClass().getName();
+    }
+    
+    protected JavaType refine(TypeBindings bindings,
+            JavaType superClass, JavaType[] superInterfaces)
+    {
+        TypeBindings newBindings;
+        if (bindings.isEmpty()) {
+            newBindings = _bindings;
+        } else {
+            if (_bindings.isEmpty()) {
+                newBindings = bindings;
+            } else {
+                newBindings = _bindings.childInstance();
+                for (int i = 0, len = bindings.size(); i < len; ++i) {
+                    newBindings = newBindings.withAdditionalBinding(bindings.getBoundName(i), bindings.getBoundType(i));
+                }
+            }
+        }
+        JavaType[] newInterfaces = _interfaces;
+        if (superInterfaces.length > 0) { // allow overriding...
+            if (_interfaces == null || _interfaces.length == 0) {
+                newInterfaces = superInterfaces;
+            } else { // but merge if we have existing interfaces already
+                newInterfaces = Arrays.copyOf(_interfaces, _interfaces.length + superInterfaces.length);
+                System.arraycopy(superInterfaces, 0, newInterfaces, _interfaces.length, superInterfaces.length);
+                // 24-Feb-2019, tatu: Need to consider dedups/re-sorting?
+                Collections.sort(Arrays.asList(newInterfaces));
+            }
+        }
+        return new ResolvedRecursiveType(_erasedType.getRawClass(), newBindings,
+                superClass, newInterfaces);
+    }
+}
\ No newline at end of file
