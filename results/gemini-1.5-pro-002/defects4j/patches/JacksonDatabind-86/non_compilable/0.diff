diff --git a/tmp/c4d604b7-d23c-48fd-80f9-d7cc02f537d7_buggy.java b/tmp/14a69414-f342-4f0e-a0f5-09f1a32cefd4_fixed.java
index e69de29..678f836 100644
--- a/tmp/c4d604b7-d23c-48fd-80f9-d7cc02f537d7_buggy.java
+++ b/tmp/14a69414-f342-4f0e-a0f5-09f1a32cefd4_fixed.java
@@ -0,0 +1,160 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.*;
+import java.util.*;
+
+import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.type.TypeBase;
+
+/**
+ * Base class for type implementations, other than the "raw" types
+ * (instances of {@link SimpleType}).
+ */
+public abstract class TypeBase
+    extends JavaType
+    implements Serializable
+{
+    private static final long serialVersionUID = 1L;
+
+    protected final TypeBindings _bindings;
+
+    protected final JavaType _superClass;
+
+    /**
+     * Lazily constructed hash code value of this type; assigned when
+     * first needed.
+     */
+    protected transient int _hashCode;
+
+    protected TypeBase(Class<?> raw, TypeBindings bindings, JavaType superClass,
+            JavaType[] superInts, int hash, Object valueHandler, Object typeHandler,
+            boolean asStatic)
+    {
+        super(raw, hash, valueHandler, typeHandler, asStatic);
+        _bindings = (bindings == null) ? TypeBindings.emptyBindings() : bindings;
+        _superClass = superClass;
+        // 17-Dec-2014, tatu: Related to [databind#558], may need to link to resolved
+        //   super-interfaces. This is handled by improving caching aspects, so that
+        //   we only do it if necessary...
+        if (superInts == null) {
+             _superInterfaces =  _noSuperInterfaces;
+        } else {
+            if (superInts.length == 0) {
+                _superInterfaces = _noSuperInterfaces;
+            } else {
+                _superInterfaces = superInts;
+            }
+        }
+    }
+
+    protected TypeBase(TypeBase base) {
+        super(base);
+        _bindings = base._bindings;
+        _superClass = base._superClass;
+        _superInterfaces = base._superInterfaces;
+        _hashCode = base._hashCode;
+    }
+    
+    @Override
+    public String toCanonical() {
+        StringBuilder sb = new StringBuilder();
+        sb.append(buildCanonicalName());
+        if (_bindings.size() > 0) {
+            sb.append('<');
+            sb.append(_bindings.toCanonical());
+            sb.append('>');
+        }
+        return sb.toString();
+    }
+    
+    protected String buildCanonicalName() {
+        String name = _class.getName();
+        if (name.startsWith("java.")) {
+            // 17-Dec-2014, tatu: As per [databind#558], need to canonicalize.
+            //   But, only core JDK types for now, as there are potential
+            //   complications wrt shading and custom things, to consider later
+            //   on.
+            // 12-Jan-2017, tatu: and just in case someone renames `java.util.List`
+            //   or something, let's just check explicitly to make sure it all works.
+            Class<?> cls = _class;
+            if (cls == Map.class) {
+                return "java.util.Map";
+            }
+            if (cls == List.class) {
+                return "java.util.List";
+            }
+            if (cls == Set.class) {
+                return "java.util.Set";
+            }
+            if (cls == Collection.class) {
+                return "java.util.Collection";
+            }            
+        }
+        return name;
+    }
+    
+    @Override
+    public abstract StringBuilder getGenericSignature(StringBuilder sb);
+
+    @Override
+    public abstract StringBuilder getErasedSignature(StringBuilder sb);
+
+    @Override
+    public TypeBindings getBindings() {
+        return _bindings;
+    }
+
+    @Override
+    public int containedTypeCount() { return _bindings.size(); }
+
+    @Override
+    public JavaType containedType(int index) {
+        return _bindings.getBoundType(index);
+    }
+    
+    @Override
+    @Deprecated
+    public String containedTypeName(int index) {
+        return _bindings.getBoundName(index);
+    }
+    
+    @Override
+    public JavaType getSuperClass() {
+        return _superClass;
+    }
+
+    @Override
+    protected void _reportContainedType(int index) {
+        if (index < 0 || index >= _bindings.size()) {
+            throw new IllegalArgumentException("Illegal type index: "+index+", array size "+_bindings.size());
+        }
+        _bindings.getBoundType(index)._report();
+    }
+    
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) return true;
+        if (o == null) return false;
+        if (o.getClass() != getClass()) return false;
+
+        TypeBase other = (TypeBase) o;
+
+        if (_class != other._class) return false;
+
+        // 14-May-2017, tatu: To pass equality after canonicalization, must
+        //   ensure that same canonical name used:
+        if (!buildCanonicalName().equals(other.buildCanonicalName())) return false;
+
+        return _bindings.equals(other._bindings);
+    }
+
+    @Override public int hashCode() {
+        int h = _hashCode;
+        if (h == 0) {
+            h = (_class.getName().hashCode() + _bindings.hashCode());
+            _hashCode = h;
+        }
+        return h;
+    }
+}
