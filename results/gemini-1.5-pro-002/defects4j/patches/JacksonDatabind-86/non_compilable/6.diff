diff --git a/tmp/a7f8f9ec-7812-4999-be18-9388966e0fe2_buggy.java b/tmp/d560b5ad-c6d6-4c1b-940a-2b1e15792f29_fixed.java
index e69de29..ec860da 100644
--- a/tmp/a7f8f9ec-7812-4999-be18-9388966e0fe2_buggy.java
+++ b/tmp/d560b5ad-c6d6-4c1b-940a-2b1e15792f29_fixed.java
@@ -0,0 +1,114 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.Type;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+/**
+ * Base class for type implementations, used by {@link TypeFactory}.
+ *
+ * @since 2.7
+ */
+public abstract class TypeBase extends JavaType
+{
+    private static final long serialVersionUID = 1L;
+
+    protected final TypeBindings _bindings;
+
+    protected final JavaType _superClass;
+
+    protected final JavaType[] _superInterfaces;
+
+    protected int _hashCode;
+
+    protected TypeBase(TypeBindings bindings, JavaType superClass, JavaType[] superInts,
+            int hashCode) {
+        super();
+        _bindings = (bindings == null) ? TypeBindings.emptyBindings() : bindings;
+        _superClass = superClass;
+        _superInterfaces = superInts;
+        _hashCode = hashCode;
+    }
+
+    @Override
+    public abstract JavaType withContentType(JavaType contentType);
+
+    @Override
+    public abstract JavaType withTypeHandler(Object h);
+
+    @Override
+    public abstract JavaType withContentTypeHandler(Object h);
+
+    @Override
+    public abstract JavaType withValueHandler(Object h);
+    
+    @Override
+    public abstract JavaType withContentValueHandler(Object h);
+
+    @Override
+    public abstract JavaType withStaticTyping();
+
+    @Override
+    protected abstract String buildCanonicalName();
+
+    @Override
+    public TypeBindings getBindings() {
+        return _bindings;
+    }
+
+    @Override
+    public int containedTypeCount() { return _bindings.size(); }
+
+    @Override
+    public JavaType containedType(int index) {
+        return _bindings.getBoundType(index);
+    }
+    
+    @Override
+    @Deprecated
+    public String containedTypeName(int index) {
+        return _bindings.getBoundName(index);
+    }
+
+    @Override
+    public JavaType getSuperClass() { return _superClass; }
+
+    @Override
+    public final int hashCode() { return _hashCode; }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) return true;
+        if (o == null) return false;
+        if (o.getClass() != getClass()) return false;
+
+        TypeBase other = (TypeBase) o;
+
+        if (_hashCode != other._hashCode) return false;
+        return _bindings.equals(other._bindings)
+                && _superClass == other._superClass // ok, as TypeBase has no generics
+                && java.util.Arrays.equals(_superInterfaces, other._superInterfaces);
+    }
+
+
+    protected JavaType _narrow(Class<?> subclass) {
+        // If already of type, return self:
+        if (getRawClass() == subclass) {
+            return this;
+        }
+        // Otherwise, must be a subtype by definition, so:
+        return _widen(subclass);
+    }
+
+    protected JavaType _widen(Class<?> superclass)
+    {
+        // If already of type, return self:
+        if (getRawClass() == superclass) {
+            return this;
+        }
+        // Otherwise, must be a super-type, so just construct resolved:
+        return new ResolvedRecursiveType(superclass, _bindings).setReference(this, _superClass);
+        // NOTE: sub-classes MUST merge _superInterfaces, _superClass info
+    }
+}
\ No newline at end of file
