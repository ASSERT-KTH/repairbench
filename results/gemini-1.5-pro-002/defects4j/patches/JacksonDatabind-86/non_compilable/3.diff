diff --git a/tmp/88adbd1d-093d-421a-bc89-74738eec3a90_buggy.java b/tmp/10d86a02-89b3-4536-baf5-96bc9dcc4d08_fixed.java
index e69de29..4976518 100644
--- a/tmp/88adbd1d-093d-421a-bc89-74738eec3a90_buggy.java
+++ b/tmp/10d86a02-89b3-4536-baf5-96bc9dcc4d08_fixed.java
@@ -0,0 +1,150 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.TypeVariable;
+import java.util.*;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+/**
+ * Implementation of {@link JavaType} for recursive type definitions (recursive via
+ * type parameters).
+ * Specifically, values are:
+ *<ul>
+ * <li>Values that can be resolved are {@link #_referencedType} (link back to the
+ *    type definition itself, which is a placeholder for recursive definition).
+ *  </li>
+ * <li>For fully resolved types, {@link #_superClass} has full type information
+ *  </li>
+ * </ul>
+ * In addition to that, full resolution adds information on various Collections,
+ * Maps, Arrays.
+ */
+public class RecursiveType extends TypeBase
+{
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * Placeholder for recursive definition of what the actual type is.
+     *<p>
+     * Note that this is initially set as <code>null</code>, and only during
+     * resolution process filled in (once recursion is detected)
+     */
+    protected JavaType _referencedType;
+
+    protected RecursiveType(Class<?> erasedType, TypeBindings bindings) {
+        super(erasedType, bindings, null, null, 0, null, null, false);
+    }
+
+    public static RecursiveType construct(Class<?> erasedType, TypeBindings bindings) {
+        return new RecursiveType(erasedType, bindings);
+    }
+
+    @Override
+    public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {
+        throw new IllegalArgumentException("Cannot refine a RecursiveType; not a resolved type");
+    }
+    
+    @Override
+    protected JavaType _narrow(Class<?> subclass) {
+        if (_erasedType == subclass) { // is this even legal?
+            return this;
+        }
+        // Should we create subtype?
+        RecursiveType newType = new RecursiveType(subclass, _bindings);
+        newType._referencedType = _referencedType; // could this work?
+        return newType;
+    }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) return true;
+        if (o == null) return false;
+        if (o.getClass() != getClass()) return false;
+        RecursiveType other = (RecursiveType) o;
+
+        if (_erasedType != other._erasedType) return false;
+
+        if (_referencedType == null) {
+            return (other._referencedType == null);
+        }
+        return _referencedType.equals(other._referencedType);
+    }
+
+    @Override
+    public JavaType getSuperClass() {
+        if (_referencedType != null) {
+            return _referencedType.getSuperClass();
+        }
+        return _superClass;
+    }
+
+    @Override
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder(200);
+        sb.append("[recursive type; ");
+        if (_referencedType != null) {
+            sb.append("resolved to:").append(_referencedType.toString());
+        } else {
+            sb.append("unresolved");
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+
+    /**
+     * Method that is called to find actual type this placeholder refers
+     * to, if any; and may be called recursively.
+     */
+    public JavaType getReferencedType() { return _referencedType; }
+
+    public void setReference(JavaType t)
+    {
+        // sanity check (should never happen)
+        if (_referencedType != null) {
+            throw new IllegalStateException("Trying to re-set self reference; old value = "+_referencedType+", new = "+t);
+        }
+        _referencedType = t;
+    }
+
+    @Override
+    public JavaType withContentType(JavaType contentType) {
+        return _referencedType.withContentType(contentType);
+    }
+
+    @Override
+    public JavaType withTypeHandler(Object h) {
+        return _referencedType.withTypeHandler(h);
+    }
+
+    @Override
+    public JavaType withContentTypeHandler(Object h) {
+        return _referencedType.withContentTypeHandler(h);
+    }
+
+    @Override
+    public JavaType withValueHandler(Object h) {
+        return _referencedType.withValueHandler(h);
+    }
+
+    @Override
+    public JavaType withContentValueHandler(Object h) {
+        return _referencedType.withContentValueHandler(h);
+    }
+
+    @Override
+    public JavaType withStaticTyping() {
+        return _referencedType.withStaticTyping();
+    }
+    
+    @Override
+    public JavaType withKeyType(JavaType keyType) {
+        return _referencedType.withKeyType(keyType);
+    }
+    
+    @Override
+    public JavaType withContentValueType(JavaType contentType) {
+        return _referencedType.withContentValueType(contentType);
+    }
+}
\ No newline at end of file
