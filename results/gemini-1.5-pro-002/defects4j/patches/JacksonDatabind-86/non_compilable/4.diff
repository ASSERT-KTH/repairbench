diff --git a/tmp/ad1083a8-f715-4d0e-bec0-09a0503fe82a_buggy.java b/tmp/e4bc533c-89c8-419c-b547-bd0786fe3bb3_fixed.java
index e69de29..fbef119 100644
--- a/tmp/ad1083a8-f715-4d0e-bec0-09a0503fe82a_buggy.java
+++ b/tmp/e4bc533c-89c8-419c-b547-bd0786fe3bb3_fixed.java
@@ -0,0 +1,89 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.TypeVariable;
+import java.util.*;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+/**
+ * Base class for type implementations, used by {@link TypeFactory}.
+ * Contains shared functionality such as type parameter resolution.
+ */
+public abstract class TypeBase extends JavaType
+{
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * This is the nominal enclosing type, otherwise referred to as "parent".
+     */
+    protected final JavaType _superClass;
+
+    /**
+     * Array of type parameters for this type, if any.
+     */
+    protected final JavaType[] _typeParameters;
+
+    /**
+     * Reference to resolved generic signature, if any.
+     * May need this if raw type is parameterized: this has full
+     * generic type information which can not necessarily be reliably
+     * constructed from raw type and declared parameters.
+     */
+    protected final JavaType _superInterface;
+
+
+    protected TypeBase(Class<?> raw, int hash, JavaType superClass, JavaType superInterface,
+            JavaType[] typeParams) {
+        super(raw, hash);
+        _superClass = superClass;
+        _superInterface = superInterface;
+        _typeParameters = typeParams;
+    }
+
+    @Override
+    public JavaType getSuperClass() {
+        // 16-Jun-2016, tatu: For some odd reason, we occasionally seem to "lose" cached
+        //   version, so let's double-check from contents. Not absolutely certain this won't
+        //   mask actual problem, but...
+        if (_superClass == null && _erasedType.getGenericSuperclass() != null) {
+           _reportMissingSupertypes(_erasedType);
+        }
+        return _superClass;
+    }
+
+    @Override
+    public JavaType getSuperInterface() {
+        return _superInterface;
+    }
+
+    @Override
+    public boolean isTypeOrSubTypeOf(Class<?> clz) {
+        if (_erasedType == clz) return true;
+        // interfaces are bit trickier; need to fully resolve to see...
+        for (JavaType intCls : getInterfaces()) {
+            if (intCls.isTypeOrSubTypeOf(clz)) return true;
+        }
+        // and finally, may need to check super class...
+        return (_superClass != null) && _superClass.isTypeOrSubTypeOf(clz);
+    }
+
+    @Override
+    public final JavaType[] getTypeParameters() {
+        return _typeParameters;
+    }
+
+    protected void _reportMissingSupertypes(Class<?> erased) {
+        throw new IllegalArgumentException("Internal error: unable to locate supertype for "+erased.getName());
+    }
+
+    /**
+     * @since 2.7
+     */
+    protected JavaType _narrow(Class<?> subclass) {
+        // For our purposes, we will allow some overlap, as it is mostly for collection
+        // (List/ArrayList/etc) types anyway. So let's assume "narrowing" means sub-classing,
+        // not necessarily sub-typing.
+        return new SimpleType(subclass, _hash, _superClass, _superInterface,
+                _typeParameters, /*addBindings*/null, /*valueHandler*/ null, /*typeHandler*/ null);
+    }
+}
\ No newline at end of file
