diff --git a/tmp/8ebe2c4a-c7ab-4dde-9543-7fee67e0eb82_buggy.java b/tmp/d1540d50-bfc9-4c4b-856a-00a3c47f78e1_fixed.java
index e69de29..f3886d1 100644
--- a/tmp/8ebe2c4a-c7ab-4dde-9543-7fee67e0eb82_buggy.java
+++ b/tmp/d1540d50-bfc9-4c4b-856a-00a3c47f78e1_fixed.java
@@ -0,0 +1,291 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.TypeVariable;
+import java.util.*;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+/**
+ * Base class for type implementations, which must implement
+ * {@link JavaType} as well as {@link Type}.
+ */
+public abstract class TypeBase
+    extends JavaType
+    implements Type
+{
+    private static final long serialVersionUID = 2;
+
+    protected final TypeFactory _typeFactory;
+
+    protected final JavaType _superClass;
+
+    protected final JavaType[] _superInterfaces;
+
+    protected final JavaType[] _typeParameters;
+
+    /**
+     * Cached hash code, since it is sometimes needed for comparison.
+     */
+    protected int _hashCode;
+
+    protected TypeBase(Class<?> raw, int hash, TypeFactory tf,
+            JavaType superClass, JavaType[] superInts, JavaType[] typeParams)
+    {
+        super(raw, hash);
+        _typeFactory = tf;
+        _superClass = superClass;
+        _superInterfaces = superInts;
+        _typeParameters = typeParams;
+    }
+
+    @Override
+    public abstract StringBuilder getGenericSignature(StringBuilder sb);
+
+    @Override
+    public abstract StringBuilder getErasedSignature(StringBuilder sb);
+
+    @Override
+    public String getGenericSignature() {
+        StringBuilder sb = new StringBuilder(40);
+        getGenericSignature(sb);
+        return sb.toString();            
+    }
+    
+    @Override
+    public String getErasedSignature() {
+        StringBuilder sb = new StringBuilder(40);
+        getErasedSignature(sb);
+        return sb.toString();
+    }
+    
+    @Override
+    public JavaType getSuperClass() { return _superClass; }
+
+    @Override
+    public List<JavaType> getInterfaces() {
+        if (_superInterfaces == null) {
+            return Collections.emptyList();
+        }
+        switch (_superInterfaces.length) {
+        case 0:
+            return Collections.emptyList();
+        case 1:
+            return Collections.singletonList(_superInterfaces[0]);
+        }
+        return Arrays.asList(_superInterfaces);
+    }
+
+    @Override
+    public final List<JavaType> getBindings() {
+        if (_typeParameters == null || _typeParameters.length == 0) {
+            return Collections.emptyList();
+        }
+        return Arrays.asList(_typeParameters);
+    }
+
+    @Override
+    public JavaType findSuperType(Class<?> rawTarget) {
+        if (rawTarget == _class) {
+            return this;
+        }
+        if (rawTarget.isInterface()) {
+            if (_superInterfaces != null) {
+                for (JavaType it : _superInterfaces) {
+                    JavaType type = it.findSuperType(rawTarget);
+                    if (type != null) {
+                        return type;
+                    }
+                }
+            }
+        } else if (_superClass != null) {
+            JavaType type = _superClass.findSuperType(rawTarget);
+            if (type != null) {
+                return type;
+            }
+        }
+        return null;
+    }
+    
+    @Override
+    public <T> T getBindingsAsArray() {
+        return (T) _typeParameters;
+    }
+
+    @Override
+    public final JavaType findTypeParameters(Class<?> expType)
+    {
+        JavaType match = findSuperType(expType);
+        if (match != null) {
+            return match.getBindingsAsArray();
+        }
+        return null;
+    }
+
+    @Override
+    @Deprecated // since 2.7
+    public JavaType[] findTypeParameters(Class<?> expType, TypeBindings context) {
+        return findTypeParameters(expType);
+    }
+
+    /**
+     * Method for accessing simple type parameters, in cases where the number
+     * of parameters is known to be fixed and non-zero.
+     * This should work for most cases, although ideally we'd improve
+     * type resolution mechanism to be able to handle other cases as well.
+     *<p>
+     * Note that starting with version 1.6, this method returns the
+     * first type parameter for Collection- and Map- types, regardless of
+     * actual declared type parameters. This is done as a kind of "hack"
+     * to compensate for common use case where type is accessed and explicit
+     * cast is done (often to Object or String), and thereby masking the
+     * underlying problem that Jackson won't necessarily have type information
+     * about contents
+     *
+     * @deprecated Since 2.7 call {@link #getBinding(int)} instead, using the type's contained type
+     */
+    @Deprecated
+    public final JavaType containedType(int index) {
+        if (index < 0 || _typeParameters == null || index >= _typeParameters.length) {
+            return null;
+        }
+        return _typeParameters[index];
+    }
+
+    /**
+     * Alias for {@link #containedType(int)}, for backwards compatibility
+     *
+     * @deprecated Since 2.7 call {@link #getBinding(int)} instead, using the type's contained type
+     */
+    @Deprecated
+    public final JavaType getContentType() {
+        if (_typeParameters == null || _typeParameters.length == 0) {
+            return null;
+        }
+        return _typeParameters[0];
+    }
+
+    /**
+     * Alias for {@link #containedType(int)}, for backwards compatibility
+     *
+     * @deprecated Since 2.7 call {@link #getBinding(int)} instead, using the type's contained type
+     */
+    @Deprecated
+    public final JavaType getKeyType() {
+        if (_typeParameters == null || _typeParameters.length < 1) {
+            return null;
+        }
+        // Quite a few oddities wrt Map/Collection: ideally we'd check declaration...
+        return _typeParameters[0];
+    }
+
+    @Override
+    public TypeFactory getTypeFactory() {
+        return _typeFactory;
+    }
+
+    @Override
+    public JavaType getReferencedType() { return null; }
+
+    @Override
+    public int containedTypeCount() {
+        return (_typeParameters == null) ? 0 : _typeParameters.length;
+    }
+
+    @Override
+    public JavaType containedType(int index) {
+        if (index < 0 || _typeParameters == null || index >= _typeParameters.length) {
+            return null;
+        }
+        return _typeParameters[index];
+    }
+    
+    @Override
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder(40).append("[type: ");
+        sb.append(buildCanonicalName());
+        if (_typeParameters != null && _typeParameters.length > 0) {
+            sb.append('<');
+            boolean first = true;
+            for (JavaType param : _typeParameters) {
+                if (first) {
+                    first = false;
+                } else {
+                    sb.append(',');
+                }
+                sb.append(param.getGenericSignature());
+            }
+            sb.append('>');
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+
+    protected String buildCanonicalName() {
+        String name = _class.getName();
+        if (_typeParameters != null && _typeParameters.length > 0) {
+            StringBuilder sb = new StringBuilder(name);
+            sb.append('<');
+            for (int i = 0, len = _typeParameters.length; i < len; ++i) {
+                JavaType t = _typeParameters[i];
+                if (i > 0) {
+                    sb.append(',');
+                }
+                sb.append(t.toCanonical());
+            }
+            sb.append('>');
+            name = sb.toString();
+        }
+        return name;
+    }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) return true;
+        if (o == null) return false;
+        if (o.getClass() != getClass()) return false;
+
+        TypeBase other = (TypeBase) o;
+
+        if (_class != other._class) { return false; }
+        // Might want to improve efficiency here in future, but for now,
+        // simplest to use "naive" approach
+        if (_hashCode != other._hashCode) {
+            return false;
+        }
+
+        // but let's avoid recomputing if possible
+        int len = _typeParameters.length;
+        if (len != other._typeParameters.length) {
+            return false;
+        }
+
+        JavaType sup1 = getSuperClass();
+        JavaType sup2 = other.getSuperClass();
+        if (sup1 == null) {
+            if (sup2 != null) return false;
+        } else if (sup2 == null || !sup1.equals(sup2)) {
+            return false;
+        }
+
+        // and finally, ensure type parameters are compatible
+        for (int i = 0; i < len; ++i) {
+            if (!(_typeParameters[i].equals(other._typeParameters[i]))) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public int hashCode() { return _hashCode; }
+
+    protected JavaType _narrow(Class<?> subclass)
+    {
+        // Might need to change this behavior in future -- but for now assumed that
+        // type parameters should remain as is
+        return new SimpleType(subclass, _typeParameters, _superClass, _superInterfaces,
+                _hashCode, _typeFactory, null);
+    }    
+}
\ No newline at end of file
