diff --git a/tmp/27502126-5ee7-4a21-92f5-c2b887c57cf6_buggy.java b/tmp/8de817d7-7214-49e6-9803-aef60e1f194d_fixed.java
index e69de29..913b838 100644
--- a/tmp/27502126-5ee7-4a21-92f5-c2b887c57cf6_buggy.java
+++ b/tmp/8de817d7-7214-49e6-9803-aef60e1f194d_fixed.java
@@ -0,0 +1,129 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.TypeVariable;
+import java.util.*;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+/**
+ * Base class for type implementations, other than the built-in
+ * Java types.
+ */
+public abstract class TypeBase
+    extends JavaType
+    implements Type
+{
+    private static final long serialVersionUID = 1L;
+
+    protected final JavaType _superClass;
+
+    protected final JavaType[] _superInterfaces;
+
+    /**
+     * Lazily constructed hash code value of this type; assigned on
+     * first access (instead of in constructor, since the hash codes
+     * of contained types may not be available at that point)
+     */
+    protected int _hashCode;
+    
+    protected TypeBase(Class<?> raw, int hash, JavaType superClass, JavaType[] superInts,
+            Object valueHandler, Object typeHandler, boolean asStatic)
+    {
+        super(raw, hash, valueHandler, typeHandler, asStatic);
+        _superClass = superClass;
+        _superInterfaces = superInts;
+    }
+
+    @Override
+    public JavaType getSuperClass() { return _superClass; }
+
+    @Override
+    public List<JavaType> getInterfaces() {
+        if (_superInterfaces == null) {
+            return Collections.emptyList();
+        }
+        switch (_superInterfaces.length) {
+        case 0:
+            return Collections.emptyList();
+        case 1:
+            return Collections.singletonList(_superInterfaces[0]);
+        }
+        return Arrays.asList(_superInterfaces);
+    }
+
+    @Override
+    public final int hashCode()
+    {
+        int h = _hashCode;
+        if (h == 0) {
+            h = (getRawClass().getName().hashCode() + 31) * 31 + _superClass.hashCode();
+            if (_superInterfaces != null) {
+                for (JavaType intType : _superInterfaces) {
+                    h = (h * 31) + intType.hashCode();
+                }
+            }
+            _hashCode = h;
+        }
+        return h;
+    }
+
+    @Override
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder(40);
+        sb.append("[type: ").append(getRawClass().getName());
+        if (_superClass != null) {
+            sb.append(" extends ").append(_superClass.toString());
+        }
+        if (_superInterfaces != null && _superInterfaces.length > 0) {
+            sb.append(" implements ");
+            for (int i = 0, len = _superInterfaces.length; i < len; ++i) {
+                if (i > 0) {
+                    sb.append(",");
+                }
+                sb.append(_superInterfaces[i].toString());
+            }
+        }
+        sb.append("]");
+        return sb.toString();
+    }
+
+    @Override protected JavaType _narrow(Class<?> subclass) {
+        return new SimpleType(subclass, _hash, _superClass, _superInterfaces,
+                _valueHandler, _typeHandler, _asStatic);
+    }
+    
+    @Override
+    public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {
+        if (rawType != _class) {
+            return null;
+        }
+        // 24-May-2016, tatu: Not sure why, but looks like super types can change
+        //    (with super type being resolved to recursive type during resolution)
+        if ((superClass == _superClass) && Arrays.equals(superInterfaces, _superInterfaces)) {
+            return this;
+        }
+        return new SimpleType(_class, _hash, superClass, superInterfaces,
+                _valueHandler, _typeHandler, _asStatic);
+    }
+
+    protected static JavaType _bogusSuperClass(Class<?> cls) {
+        Class<?> parent = cls.getSuperclass();
+        // If there is no parent, Object is resolved to null, must find non-null
+        while (parent != null && parent == Object.class) {
+            parent = parent.getSuperclass();
+        }
+        // shouldn't happen, but
+        if (parent == null) {
+            return null;
+        }
+        // shouldn't happen either, unless we have truly broken hierarchy
+        JavaType sup = new SimpleType(parent);
+        TypeBindings b = new TypeBindings().withHandlers(sup);
+        TypeVariable<?>[] vars = parent.getTypeParameters();
+        for (TypeVariable<?> var : vars) {
+            b.addBinding(var.getName(), sup); // won't work, but avoids exception
+        }
+        return new SimpleType(parent, -1, sup, null, null, null, false);
+    }
+}
\ No newline at end of file
