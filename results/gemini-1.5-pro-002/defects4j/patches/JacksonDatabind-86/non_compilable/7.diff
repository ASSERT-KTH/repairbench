diff --git a/tmp/0b7999ef-8903-4e48-a7fd-882232e51ba0_buggy.java b/tmp/d763f772-f087-4dd1-9ec8-ac3a80498203_fixed.java
index e69de29..746a887 100644
--- a/tmp/0b7999ef-8903-4e48-a7fd-882232e51ba0_buggy.java
+++ b/tmp/d763f772-f087-4dd1-9ec8-ac3a80498203_fixed.java
@@ -0,0 +1,41 @@
+import java.util.concurrent.ConcurrentHashMap;
+
+import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.type.*;
+
+public class RecursiveTypeTest extends com.fasterxml.jackson.databind.BaseMapTest
+{
+    class Base {
+        public int base = 1;
+    }
+
+    class Sub extends Base {
+        public int sub = 2;
+    }
+
+    static class FieldWrapperBean {
+        public FieldWrapper<String> value;
+    }
+
+    static class FieldWrapper<T> {
+        public T wrapped;
+    }    
+
+    interface MapInterface extends java.util.Map<Long, Sub> { }
+
+    @Override
+    protected ConcurrentHashMap<JavaType, Boolean> _seenTypes = new ConcurrentHashMap<>();
+
+    // [databind#2370]
+    public void testSuperClassWithReferencedJavaType() {
+        TypeFactory tf = objectMapper().getTypeFactory();
+        JavaType baseType = tf.constructType(Base.class);
+        tf.constructType(Sub.class);
+        // baseTypeFromSub should be a ResolvedRecursiveType in this test
+        JavaType baseTypeFromSub = tf.constructType(Sub.class).getSuperClass();
+
+        assertEquals(baseType, baseTypeFromSub);
+
+        assertNotNull(baseTypeFromSub.getSuperClass());
+    }
+}
