diff --git a/tmp/74e118ff-86e9-4d39-a9e3-da940bb53bf9_buggy.java b/tmp/9ce35382-194b-4d48-b624-49c62b5d13e8_fixed.java
index 181b1ac..73eacaa 100644
--- a/tmp/74e118ff-86e9-4d39-a9e3-da940bb53bf9_buggy.java
+++ b/tmp/9ce35382-194b-4d48-b624-49c62b5d13e8_fixed.java
@@ -1,23 +1,26 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
      * If either this or <code>rhs</code> has a NaN value in either part,
      * {@link #NaN} is returned; otherwise Infinite and NaN values are
      * returned in the parts of the result according to the rules for
      * {@link java.lang.Double} arithmetic.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
+        if (isNaN() || rhs.isNaN()) {
+            return NaN;
+        }
         return createComplex(real + rhs.getReal(),
             imaginary + rhs.getImaginary());
     }
