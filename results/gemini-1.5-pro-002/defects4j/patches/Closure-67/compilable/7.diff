diff --git a/tmp/5e9372ca-d645-424b-b935-4b673dab10fe_buggy.java b/tmp/613acaa7-d2fe-499a-abef-6bbddf72aa29_fixed.java
index 939f49b..2f4a034 100644
--- a/tmp/5e9372ca-d645-424b-b935-4b673dab10fe_buggy.java
+++ b/tmp/613acaa7-d2fe-499a-abef-6bbddf72aa29_fixed.java
@@ -1,21 +1,34 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
         // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+          Node child = n.getFirstChild();
+          while (child.getType() == Token.GETPROP) {
+            child = child.getFirstChild().getNext();
+            if (child != null && child.getType() == Token.STRING &&
+                child.getString().equals("prototype")) {
+              return true;
+            }
+            if (child == null || child.getNext() == null) {
+              break;
+            }
+            child = child.getNext();
 
-          if (child.getType() == Token.STRING &&
+          }
+        } else {
+          Node child = n.getFirstChild().getNext();
+          if (child != null && child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
