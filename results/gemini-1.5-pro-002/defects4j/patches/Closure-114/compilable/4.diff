diff --git a/tmp/f9bcdaa9-c60d-42a9-aafd-118c827f9bf6_buggy.java b/tmp/bc17b7e6-ac0d-4316-a7e5-513adf285c7d_fixed.java
index c51c8b1..f266429 100644
--- a/tmp/f9bcdaa9-c60d-42a9-aafd-118c827f9bf6_buggy.java
+++ b/tmp/bc17b7e6-ac0d-4316-a7e5-513adf285c7d_fixed.java
@@ -1,31 +1,30 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
-        } else {
+        } else if (n.getParent().isCall() && n.getParent().getFirstChild() == n) {
             // The rhs of the assignment is the caller, so it's used by the
             // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
             recordDepScope(recordNode, ns);
         }
+         else {
+          recordDepScope(nameNode, ns);
+        }
       }
     }
