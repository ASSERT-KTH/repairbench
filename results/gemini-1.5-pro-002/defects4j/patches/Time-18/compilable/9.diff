diff --git a/tmp/c8ac6406-5f5c-4a1d-8400-3c68c722f6f1_buggy.java b/tmp/79715867-5f97-433d-ac47-4f4f74630e2c_fixed.java
index be2af16..da9325f 100644
--- a/tmp/c8ac6406-5f5c-4a1d-8400-3c68c722f6f1_buggy.java
+++ b/tmp/79715867-5f97-433d-ac47-4f4f74630e2c_fixed.java
@@ -1,29 +1,35 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
         // Assume date is Gregorian.
         long instant;
+        try {
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
+        } catch (IllegalArgumentException e) {
             // Maybe it's Julian.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
         }
+        if (instant < iCutoverMillis) {
+            instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        }
+
+
         return instant;
     }
