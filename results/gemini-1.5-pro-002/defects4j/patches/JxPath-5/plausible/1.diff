diff --git a/tmp/8bf75bc4-a469-4aad-85f9-cfbc894c7047_buggy.java b/tmp/4dfa6781-a477-476e-9843-6750e346d3fb_fixed.java
index 5f8ac1a..627cb6a 100644
--- a/tmp/8bf75bc4-a469-4aad-85f9-cfbc894c7047_buggy.java
+++ b/tmp/4dfa6781-a477-476e-9843-6750e346d3fb_fixed.java
@@ -1,34 +1,42 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
-        if (p1 != null && p1.equals(p2)) {
+        if (p1 != null && p2 != null && p1.equals(p2)) {
             return 0;
         }
 
+        if (p1 == null || p2 == null) {
+            return p1 == null ? -1 : 1;
+        }
+
         if (depth1 == 1) {
+            if (p1.getRootNode() != p2.getRootNode()) {
+                return (p1.hashCode() < p2.hashCode()) ? -1 : 1;
+            } else {
                 throw new JXPathException(
                         "Cannot compare pointers that do not belong to the same tree: '"
                                 + p1 + "' and '" + p2 + "'");
             }
+        }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
