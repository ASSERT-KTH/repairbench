diff --git a/tmp/7edc4ae0-2fb8-44c1-bffc-99aef93b16c1_buggy.java b/tmp/c440e2fb-8cfd-4dc2-985c-ce2640e81014_fixed.java
index 25ca093..c7ae3fd 100644
--- a/tmp/7edc4ae0-2fb8-44c1-bffc-99aef93b16c1_buggy.java
+++ b/tmp/c440e2fb-8cfd-4dc2-985c-ce2640e81014_fixed.java
@@ -1,52 +1,67 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
         // look for BOM - overrides any other header or input
+        if (byteData.hasArray()) {
+            byte[] dataBytes = byteData.array();
+            if (dataBytes.length > 3) {
+                if (dataBytes[0] == (byte) 0xEF && dataBytes[1] == (byte) 0xBB && dataBytes[2] == (byte) 0xBF) {
+                    charsetName = defaultCharset;
+                    byteData = ByteBuffer.wrap(dataBytes, 3, dataBytes.length-3);
+                } else if (dataBytes.length > 4 && dataBytes[0] == 0 && dataBytes[1] == 0 && dataBytes[2] == (byte) 0xFE && dataBytes[3] == (byte) 0xFF) {
+                    charsetName = "UTF-32BE";
+                    byteData = ByteBuffer.wrap(dataBytes, 4, dataBytes.length-4);
+                } else if (dataBytes.length > 4 && dataBytes[0] == (byte) 0xFF && dataBytes[1] == (byte) 0xFE && dataBytes[2] == 0 && dataBytes[3] == 0) {
+                    charsetName = "UTF-32LE";
+                    byteData = ByteBuffer.wrap(dataBytes, 4, dataBytes.length-4);
+                } else if (dataBytes[0] == (byte) 0xFE && dataBytes[1] == (byte) 0xFF) {
+                    charsetName = "UTF-16BE";
+                    byteData = ByteBuffer.wrap(dataBytes, 2, dataBytes.length-2);
+                } else if (dataBytes[0] == (byte) 0xFF && dataBytes[1] == (byte) 0xFE) {
+                    charsetName = "UTF-16LE";
+                    byteData = ByteBuffer.wrap(dataBytes, 2, dataBytes.length-2);
+                }
+            }
+
+        }
+
 
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            docData = Charset.forName(defaultCharset).decode(byteData.slice()).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
