diff --git a/tmp/663ab191-a341-4943-b69d-8eb4da09f5d1_buggy.java b/tmp/c8540e4e-938a-4af6-80cc-075a20146d56_fixed.java
index 63641d0..a658819 100644
--- a/tmp/663ab191-a341-4943-b69d-8eb4da09f5d1_buggy.java
+++ b/tmp/c8540e4e-938a-4af6-80cc-075a20146d56_fixed.java
@@ -1,33 +1,38 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
-    callTarget.setJSType(replacementFnType);
+    // Propagate the type change down to the children.
     n.setJSType(replacementFnType.getReturnType());
+    callTarget.setJSType(replacementFnType);
+    for (Node param : n.getSecondChild().children()) {
+      param.setJSType(param.getJSType().visit(replacer));
+    }
+
 
     return replacer.madeChanges;
   }
