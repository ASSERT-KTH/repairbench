diff --git a/tmp/976214a8-c3fa-4ab8-be75-5750daad4687_buggy.java b/tmp/f559fd77-ce0d-46f6-a516-4be2d4f705e6_fixed.java
index 63641d0..e6a4671 100644
--- a/tmp/976214a8-c3fa-4ab8-be75-5750daad4687_buggy.java
+++ b/tmp/f559fd77-ce0d-46f6-a516-4be2d4f705e6_fixed.java
@@ -1,33 +1,46 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // If the call target is a function literal, propagate the template types
+    // to the function literal.
+    if (callTarget.isFunction()) {
+      Node function = callTarget.getFirstChild();
+      if (function.isFunction()) {
+        FunctionType functionType = function.getJSType().toMaybeFunctionType();
+        if (functionType != null) {
+          FunctionType newFunctionType = functionType.visit(replacer).toMaybeFunctionType();
+          function.setJSType(newFunctionType);
+        }
+      }
+    }
+
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
