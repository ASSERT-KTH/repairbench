diff --git a/tmp/5c9e6097-96bb-4e97-bcc2-5fa21f74f2f0_buggy.java b/tmp/a7cfd724-5ab2-4f92-81f4-c132a0e3d8dd_fixed.java
index 63641d0..820de29 100644
--- a/tmp/5c9e6097-96bb-4e97-bcc2-5fa21f74f2f0_buggy.java
+++ b/tmp/a7cfd724-5ab2-4f92-81f4-c132a0e3d8dd_fixed.java
@@ -1,33 +1,40 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // Use the original function type to get the return type,
+    // as visiting the function type removes the template types.
+    JSType returnType = fnType.getReturnType();
+    if (returnType != null && returnType.isFunctionType()) {
+        returnType = returnType.visit(replacer);
+    }
+
     callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    n.setJSType(returnType);
 
     return replacer.madeChanges;
   }
