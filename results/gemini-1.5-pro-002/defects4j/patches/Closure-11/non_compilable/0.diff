diff --git a/tmp/b900c4f9-4e4c-4593-982b-5f8bd5f96227_buggy.java b/tmp/26f51b66-1183-4f22-b9b4-e1291e6fe21b_fixed.java
index 57c40b2..fb45571 100644
--- a/tmp/b900c4f9-4e4c-4593-982b-5f8bd5f96227_buggy.java
+++ b/tmp/26f51b66-1183-4f22-b9b4-e1291e6fe21b_fixed.java
@@ -1,27 +1,30 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
+    } else if (childType.isNullOrVoid()) {
+      validator.expectNotNullOrUndefined(t, n, childType,
+          "No properties on this expression", getNativeType(OBJECT_TYPE));
     } else if (n.getJSType() != null && parent.isAssign()) {
       return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
