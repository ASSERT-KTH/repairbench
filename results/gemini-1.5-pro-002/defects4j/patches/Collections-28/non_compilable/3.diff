diff --git a/tmp/7d43a36e-ae1a-42ad-b903-4cb3cfd8b09c_buggy.java b/tmp/a7aff817-90e2-4a60-b6e5-d00f013d72d5_fixed.java
index e69de29..3b72c4e 100644
--- a/tmp/7d43a36e-ae1a-42ad-b903-4cb3cfd8b09c_buggy.java
+++ b/tmp/a7aff817-90e2-4a60-b6e5-d00f013d72d5_fixed.java
@@ -0,0 +1,97 @@
+package org.apache.commons.collections4.trie;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedMap;
+
+
+public class PatriciaTrie<E> extends AbstractPatriciaTrie<String, E> {
+
+
+    public PatriciaTrie(KeyAnalyzer<? super String> keyAnalyzer) {
+        super(keyAnalyzer);
+    }
+
+
+    public PatriciaTrie() {
+        super(new StringKeyAnalyzer());
+    }
+
+
+    public PatriciaTrie(Map<? extends String, ? extends E> map) {
+        super(new StringKeyAnalyzer(), map);
+    }
+
+    @Override
+    public SortedMap<String, E> prefixMap(String key) {
+        return new PrefixRangeMap(key, null, true);
+    }
+
+    private class PrefixRangeMap extends RangeMap {
+
+        private final String prefix;
+        private transient volatile Set<Map.Entry<String, E>> entrySet;
+
+        protected PrefixRangeMap(String fromKey, String toKey, boolean toInclusive)
+        {
+            super(fromKey, toKey, toInclusive);
+            this.prefix = fromKey;
+        }
+
+
+
+        @Override
+        public void clear() {
+            PatriciaTrie.this.keySet(prefix, null).clear(); // Fix: using keySet instead of prefixMap
+        }
+
+
+        @Override
+        public Set<Map.Entry<String, E>> entrySet()
+        {
+            if (entrySet == null) {
+                entrySet = Collections.unmodifiableSet(new EntrySet());
+            }
+            return entrySet;
+        }
+
+        private final class EntrySet extends AbstractPatriciaTrie<String, E>.RangeEntrySet {
+
+
+            @Override
+            public boolean contains(final Object o) {
+
+                if (!(o instanceof Map.Entry)) {
+                    return false;
+                }
+                final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;
+                final Object entryKey = entry.getKey();
+                if (! (entryKey instanceof String)) {
+                    return false;
+                }
+
+                String key = (String) entryKey;
+                if (!prefix.startsWith(key) && !key.startsWith(prefix)) {
+                   return false;
+                }
+
+
+                final E value = PatriciaTrie.this.get(key);
+                if (value == null) {
+                    return false;
+                }
+                final Object entryValue = entry.getValue();
+
+                return  value.equals(entryValue);
+            }
+
+
+        }
+
+
+    }
+}
