diff --git a/tmp/fad17e19-06db-4622-96ea-c3eaabd52ef7_buggy.java b/tmp/7b9ed47d-1b00-492e-a3ea-46546e8ce610_fixed.java
index e69de29..26da10f 100644
--- a/tmp/fad17e19-06db-4622-96ea-c3eaabd52ef7_buggy.java
+++ b/tmp/7b9ed47d-1b00-492e-a3ea-46546e8ce610_fixed.java
@@ -0,0 +1,76 @@
+package org.apache.commons.collections4.trie;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.NoSuchElementException;
+import java.util.Set;
+import java.util.SortedMap;
+
+public abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
+
+    protected AbstractPatriciaTrie(final KeyAnalyzer<? super K> analyzer) {
+        super(analyzer);
+    }
+
+    protected AbstractPatriciaTrie(final KeyAnalyzer<? super K> analyzer, final Map<? extends K, ? extends V> map) {
+        super(analyzer, map);
+    }
+    
+    @Override
+    public SortedMap<K, V> prefixMap(final K prefix) {
+        return new PrefixRangeMap(prefix, null);
+    }
+
+
+    private class PrefixRangeMap extends RangeMap {
+
+        public PrefixRangeMap(final K fromKey, final K toKey) {
+            super(fromKey, toKey);
+        }
+
+
+        @Override
+        public void clear() {
+            final TrieEntry<K, V> entry = AbstractPatriciaTrie.this.getEntry(fromKey);
+            if (entry == null) {
+                return;
+            }
+
+            if(toKey == null) {
+                final TrieEntry<K, V> firstEntry = AbstractPatriciaTrie.this.firstEntry(entry);
+                if(firstEntry != null){
+                    AbstractPatriciaTrie.this.delete(firstEntry);
+                }
+            } else {
+                // the trie may contain multiple mappings which match the prefix, so we must iterate and remove all
+                Iterator<Map.Entry<K,V>> iterator = entrySet().iterator();
+
+                while(iterator.hasNext()) {
+                    AbstractPatriciaTrie.this.remove(iterator.next().getKey());
+                }
+            }
+        }
+
+
+        @Override
+        public Set<Map.Entry<K, V>> entrySet() {
+            if (fromKey == null) {
+                return AbstractPatriciaTrie.this.entrySet();
+            }
+
+            return new EntrySet(fromKey, toKey) {
+
+                @Override
+                public Iterator<Map.Entry<K, V>> iterator() {
+
+                    return new TrieMapIterator(fromKey, toKey);
+                }
+            };
+        }
+
+    }
+}
