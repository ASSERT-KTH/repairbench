diff --git a/tmp/50c484e6-d5a8-448f-ad71-4bea5766a68c_buggy.java b/tmp/890b21f2-cc9f-4c38-a33d-1d97b48dc546_fixed.java
index e69de29..1ea17b4 100644
--- a/tmp/50c484e6-d5a8-448f-ad71-4bea5766a68c_buggy.java
+++ b/tmp/890b21f2-cc9f-4c38-a33d-1d97b48dc546_fixed.java
@@ -0,0 +1,72 @@
+package org.apache.commons.collections4.trie;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedMap;
+
+public class PatriciaTrie<V> extends AbstractPatriciaTrie<V> {
+
+    private static final long serialVersionUID = 5072873775569727102L;
+
+    public PatriciaTrie() {
+        super();
+    }
+
+    public PatriciaTrie(final Comparator<? super String> comparator) {
+        super(comparator);
+    }
+
+    public PatriciaTrie(final Map<? extends String, ? extends V> map) {
+        super(map);
+    }
+
+
+    @Override
+    public SortedMap<String, V> prefixMap(final String prefix) {
+        return new PrefixRangeMap(prefix, null);
+    }
+
+
+    private class PrefixRangeMap extends RangeMap {
+
+        /**
+         * Constructs a new instance.
+         *
+         * @param fromKey
+         *            low endpoint of the range (inclusive)
+         * @param toKey
+         *            high endpoint of the range (noninclusive)
+         */
+        protected PrefixRangeMap(final String fromKey, final String toKey) {
+            super(fromKey == null ? null : fromKey + '\0', toKey);
+        }
+
+
+        @Override
+        public void clear() {
+            final String fromKey = this.fromKey == null ? null : this.fromKey.substring(0, this.fromKey.length() - 1);
+            final PatriciaTrie<V>.PrefixRangeMap map = new PrefixRangeMap(fromKey, this.toKey);
+
+            final Set<Map.Entry<String, V>> entries = map.entrySet();
+
+            for (final Map.Entry<String, V> entry : entries) {
+                 PatriciaTrie.this.remove(entry.getKey());
+            }
+        }
+
+
+        @Override
+        protected boolean inRange(final String key) {
+            if (fromKey == null) {
+                return key.compareTo(toKey) < 0;
+            }
+            return key.compareTo(fromKey.substring(0, fromKey.length() - 1)) >= 0 && key.compareTo(toKey) < 0;
+        }
+    }
+
+}
