diff --git a/tmp/afa1c1aa-323e-4f45-9ec2-c295f8fae846_buggy.java b/tmp/20e669c3-cf1a-45a9-91a7-62989cbf8cd5_fixed.java
index e69de29..9d3ea90 100644
--- a/tmp/afa1c1aa-323e-4f45-9ec2-c295f8fae846_buggy.java
+++ b/tmp/20e669c3-cf1a-45a9-91a7-62989cbf8cd5_fixed.java
@@ -0,0 +1,51 @@
+import com.fasterxml.jackson.annotation.JsonSetter;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
+
+import java.io.IOException;
+
+public class TestSimpleTypes {
+
+    static class Wrapper<T>
+    {
+        public T value;
+
+        public Wrapper() { }
+        public Wrapper(T v) { value = v; }
+
+        @JsonDeserialize(using = MyDeserializer.class)
+        public void setValue(T v) {
+            value = v;
+        }
+    }
+
+    static class MyDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<Object>
+    {
+        public MyDeserializer() { super(Object.class); }
+
+        @Override
+        public Object deserialize(com.fasterxml.jackson.core.JsonParser jp,
+                                  com.fasterxml.jackson.databind.DeserializationContext ctxt)
+                throws IOException, com.fasterxml.jackson.core.JsonProcessingException
+        {
+            if (jp.getCurrentToken() == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {
+                if (jp.getText().trim().isEmpty()) {
+                    return null; //Deserialize empty String to null, instead of failing or returning an empty String
+                }
+            }
+            return jp.readValueAs(getValueClass());
+            // or for more robust handling of different types:
+//            JavaType type = getValueType();
+//            return jp.readValueAs(type);
+        }
+        
+    }
+    
+    public void _testEmptyToNullCoercion(Class<?> primType, Object emptyValue) throws Exception
+    {
+        ObjectMapper m = new ObjectMapper();
+        m.enable(com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
+        Wrapper w = m.readValue("{\"value\":\"\"}", Wrapper.class);
+        assertNull("Should not have passed", w.value);
+    }
+}
\ No newline at end of file
