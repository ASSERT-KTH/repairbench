diff --git a/tmp/808f08de-182b-4462-a45c-02669fb81a84_buggy.java b/tmp/2bd0f77c-8964-4acf-ae0e-b2db245520fc_fixed.java
index e69de29..10fceb3 100644
--- a/tmp/808f08de-182b-4462-a45c-02669fb81a84_buggy.java
+++ b/tmp/2bd0f77c-8964-4acf-ae0e-b2db245520fc_fixed.java
@@ -0,0 +1,38 @@
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.deser.std.StringDeserializer;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
+
+import java.io.IOException;
+
+public class EmptyStringDeserializer extends StringDeserializer {
+
+    @Override
+    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+        String text = p.getText();
+        if (text != null && text.trim().isEmpty()) {
+            // Check if we are to coerce to null, or throw exception
+            boolean isPrimitive = ctxt.getParser().currentToken() == null; // Primitive value
+
+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                return null;
+            }
+             if (!isPrimitive && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                 return getNullValue(ctxt);
+             }
+
+            // if so, throw exception
+            if (isPrimitive ) {
+                return getEmptyValue(ctxt);
+            } else {
+                return super.deserialize(p, ctxt);
+            }
+        }
+        return super.deserialize(p, ctxt);
+    }
+
+    @Override
+    public Object getEmptyValue(DeserializationContext ctxt) {
+        return "";
+    }
+}
\ No newline at end of file
