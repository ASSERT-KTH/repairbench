diff --git a/tmp/bcc07177-d825-442d-b4a6-cadeda78d65d_buggy.java b/tmp/4537995d-db89-455c-81a5-1dbba3b14950_fixed.java
index e69de29..e2302f5 100644
--- a/tmp/bcc07177-d825-442d-b4a6-cadeda78d65d_buggy.java
+++ b/tmp/4537995d-db89-455c-81a5-1dbba3b14950_fixed.java
@@ -0,0 +1,74 @@
+import com.fasterxml.jackson.annotation.JsonSetter;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
+
+import java.io.IOException;
+
+public class TestSimpleTypes {
+
+    static class CoercePrimitives {
+        @JsonDeserialize(using = EmptyToNullDeserializer.class)
+        public int i;
+
+        @JsonDeserialize(using = EmptyToNullDeserializer.class)
+        public long l;
+
+        @JsonDeserialize(using = EmptyToNullDeserializer.class)
+        public double d;
+
+        @JsonDeserialize(using = EmptyToNullDeserializer.class)
+        public float f;
+
+        @JsonSetter(contentNulls = JsonSetter.Nulls.AS_EMPTY)
+        public String str;
+
+        public CoercePrimitives() {}
+        public CoercePrimitives(int i, long l, double d, float f, String str) {
+            this.i = i;
+            this.l = l;
+            this.d = d;
+            this.f = f;
+            this.str = str;
+        }
+
+    }    
+    
+    public void testEmptyToNullCoercionForPrimitives() throws Exception {
+        _testEmptyToNullCoercion(int.class, Integer.valueOf(0));
+        _testEmptyToNullCoercion(long.class, Long.valueOf(0));
+        _testEmptyToNullCoercion(double.class, Double.valueOf(0.0));
+        _testEmptyToNullCoercion(float.class, Float.valueOf(0.0f));
+    }
+
+    private void _testEmptyToNullCoercion(Class<?> primType, Object defaultValue) throws IOException
+    {
+        ObjectMapper m = new ObjectMapper();
+        m.enable(JsonSetter.Value.THROW_ON_EMPTY_STRING);
+
+        CoercePrimitives input = new CoercePrimitives(123, 456l, 789.01, 1234.56f, "foo");
+        String json = m.writeValueAsString(input);
+
+        // but if we try to read as primitive, should fail
+        try {
+            m.readValue("{}", primType);
+            fail("Should not have passed");
+        } catch (IOException e) {
+            verifyException(e, "Cannot coerce empty String (\"\") to "+primType.getSimpleName());
+        }
+
+        CoercePrimitives result = m.readValue(json, CoercePrimitives.class);
+
+        assertEquals(123, result.i);
+        assertEquals(456l, result.l);
+        assertEquals(789.01, result.d);
+        assertEquals(1234.56f, result.f);
+
+        result = m.readerForUpdating(result).readValue("{\"i\":\"\",\"l\":\"\",\"d\":\"\",\"f\":\"\",\"str\":\"\"}", CoercePrimitives.class);
+
+        assertEquals(0, result.i);
+        assertEquals(0L, result.l);
+        assertEquals(0.0, result.d);
+        assertEquals(0.0f, result.f);
+        assertEquals("", result.str);
+    }
+}
