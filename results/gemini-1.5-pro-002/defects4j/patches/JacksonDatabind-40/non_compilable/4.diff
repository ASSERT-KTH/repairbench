diff --git a/tmp/1676803d-b0af-4266-b72b-5ca3d4c6ad23_buggy.java b/tmp/11c0ceb7-2ca3-4f1a-9277-3e3e3fa3975d_fixed.java
index e69de29..17b9076 100644
--- a/tmp/1676803d-b0af-4266-b72b-5ca3d4c6ad23_buggy.java
+++ b/tmp/11c0ceb7-2ca3-4f1a-9277-3e3e3fa3975d_fixed.java
@@ -0,0 +1,44 @@
+import com.fasterxml.jackson.annotation.JsonSetter;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
+
+import java.io.IOException;
+
+public class TestSimpleTypes_testEmptyToNullCoercionForPrimitives {
+
+    private void _testEmptyToNullCoercion(Class<?> primType, Object emptyValue) throws IOException
+    {
+        ObjectMapper m = new ObjectMapper();
+        m.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
+        Wrapper w = m.readValue("{\"value\":\"\"}", Wrapper.class);
+        if (w.value != null && w.value.getClass() == primType) {
+            fail("Should not have passed");
+        }
+        assertNull(w.value);
+
+
+        // Also: let's verify that non-empty String works ok as well...
+        w = m.readValue("{\"value\":\"1\"}", Wrapper.class);
+        assertNotNull(w.value);
+        assertEquals(1, ((Number)w.value).intValue());
+    }
+
+
+    static class Wrapper {
+        @JsonDeserialize(as=ValueClass.class)
+        public Object value;
+
+        public Wrapper() { }
+        public Wrapper(Object v) { value = v; }
+    }
+
+    @JsonDeserialize(using = ValueDeserializer.class)
+    static class ValueClass {
+        public Object value;
+
+        public ValueClass() { }
+        public ValueClass(Object v) { value = v; }
+    }
+
+
+}
\ No newline at end of file
