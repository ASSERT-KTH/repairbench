diff --git a/tmp/080f4552-3a9d-4e07-9e6f-e261cb995b93_buggy.java b/tmp/9fdfd1cc-798f-4289-b42f-b03821dc243a_fixed.java
index 1a63a66..92f7972 100644
--- a/tmp/080f4552-3a9d-4e07-9e6f-e261cb995b93_buggy.java
+++ b/tmp/9fdfd1cc-798f-4289-b42f-b03821dc243a_fixed.java
@@ -1,21 +1,19 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+        // 01-May-2020, tatu: ... and now we can
+        if (!_class.isAssignableFrom(subclass)) {
+            throw new IllegalArgumentException("Class "+subclass.getName()+" not subtype of "+_class.getName());
+        }
+        // MUST check type erasure as well...
+        JavaType narrowed = constructSpecializedType(this, subclass);
+        // otherwise, ok to just construct new instance with different type arguments:
+        return narrowed;
     }
