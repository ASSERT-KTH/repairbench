diff --git a/tmp/290abb4b-4f74-4c21-a551-8082428286d6_buggy.java b/tmp/e536a001-aca5-463c-8231-4f9c7d1fcf9f_fixed.java
index 6f24eb6..b2e1d50 100644
--- a/tmp/290abb4b-4f74-4c21-a551-8082428286d6_buggy.java
+++ b/tmp/e536a001-aca5-463c-8231-4f9c7d1fcf9f_fixed.java
@@ -1,99 +1,113 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType != null) {
       // Is this a normal property access, or are we trying to override
       // an existing property?
       boolean isOverride = t.inGlobalScope() &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
 
       // Find the lowest property defined on a class with visibility
       // information.
-      if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
-      }
       JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
+      ObjectType ownerType = null;
+
+      if (isOverride) {
+        for (ObjectType current = objectType;
+             current != null;
+             current = current.getImplicitPrototype()) {
+          docInfo = current.getOwnPropertyJSDocInfo(propertyName);
           if (docInfo != null &&
               docInfo.getVisibility() != Visibility.INHERITED) {
+            ownerType = current;
             break;
           }
         }
+      } else {
+        for (ObjectType current = objectType;
+             current != null;
+             current = current.getImplicitPrototype()) {
+          docInfo = current.getOwnPropertyJSDocInfo(propertyName);
+            if (docInfo != null) {
+              ownerType = current;
+              break;
+            }
+        }
+      }
+
 
-      if (objectType == null) {
+      if (docInfo == null) {
         // We couldn't find a visibility modifier; assume it's public.
         return;
       }
 
       boolean sameInput =
           t.getInput().getName().equals(docInfo.getSourceName());
       Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
+      ownerType = normalizeClassType(ownerType);
       if (isOverride) {
         // Check an ASSIGN statement that's trying to override a property
         // on a superclass.
         JSDocInfo overridingInfo = parent.getJSDocInfo();
         Visibility overridingVisibility = overridingInfo == null ?
             Visibility.INHERITED : overridingInfo.getVisibility();
 
         // Check that (a) the property *can* be overridden, and
         // (b) that the visibility of the override is the same as the
         // visibility of the original property.
         if (visibility == Visibility.PRIVATE && !sameInput) {
           compiler.report(
               t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
+                  ownerType.toString()));
         } else if (overridingVisibility != Visibility.INHERITED &&
             overridingVisibility != visibility) {
           compiler.report(
               t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
+                  visibility.name(), ownerType.toString(),
                   overridingVisibility.name()));
         }
       } else {
         if (sameInput) {
           // private access is always allowed in the same file.
           return;
         } else if (visibility == Visibility.PRIVATE &&
             (currentClass == null || ownerType.differsFrom(currentClass))) {
           if (docInfo.isConstructor() &&
               isValidPrivateConstructorAccess(parent)) {
             return;
           }
 
           // private access is not allowed outside the file from a different
           // enclosing class.
           compiler.report(
               t.makeError(getprop,
                   BAD_PRIVATE_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         } else if (visibility == Visibility.PROTECTED) {
           // There are 3 types of legal accesses of a protected property:
           // 1) Accesses in the same file
           // 2) Overriding the property in a subclass
           // 3) Accessing the property from inside a subclass
           // The first two have already been checked for.
           if (currentClass == null || !currentClass.isSubtype(ownerType)) {
             compiler.report(
                 t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
                     propertyName,
                     validator.getReadableJSTypeName(
                         getprop.getFirstChild(), true)));
           }
         }
       }
     }
   }
