diff --git a/tmp/df591660-5a76-4be8-9f66-f1516ff2b13e_buggy.java b/tmp/43fdf584-1dec-4a78-b66b-1f70d6344657_fixed.java
index 227a4ef..da2e60f 100644
--- a/tmp/df591660-5a76-4be8-9f66-f1516ff2b13e_buggy.java
+++ b/tmp/43fdf584-1dec-4a78-b66b-1f70d6344657_fixed.java
@@ -1,48 +1,106 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        int pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             int lastPos = pos;
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            pos = findWrapPos(text, width, nextLineTabStop);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             } else
             if (pos == lastPos)
             {
                 throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
+
+    private int findWrapPos(String text, int width, int startPos)
+    {
+        if (text == null || text.length() <= startPos)
+        {
+            return -1;
+        }
+
+        int length = text.length();
+        int pos = startPos + width;
+
+        if (pos >= length)
+        {
+            return length;
+        }
+
+        // find the last whitespace character before the width limit
+        for (int i = pos; i > startPos; i--)
+        {
+            if (Character.isWhitespace(text.charAt(i)))
+            {
+                return i;
+            }
+        }
+
+        // if no whitespace character is found, return the width limit
+        return pos;
+    }
+
+    private String rtrim(String text)
+    {
+        if (text == null)
+        {
+            return null;
+        }
+
+        int length = text.length();
+        int lastIndex = length - 1;
+
+        while (lastIndex >= 0 && Character.isWhitespace(text.charAt(lastIndex)))
+        {
+            lastIndex--;
+        }
+
+        return text.substring(0, lastIndex + 1);
+    }
+
+    private String createPadding(int nextLineTabStop)
+    {
+        StringBuilder padding = new StringBuilder();
+        for (int i = 0; i < nextLineTabStop; i++)
+        {
+            padding.append(' ');
+        }
+        return padding.toString();
+    }
+
+    private static final String defaultNewLine = System.lineSeparator();
\ No newline at end of file
