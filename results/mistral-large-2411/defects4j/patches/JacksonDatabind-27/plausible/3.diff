diff --git a/tmp/15bf54d8-2fe5-4bae-901c-c206550748a0_buggy.java b/tmp/fb42b073-51cd-4bd3-b5e6-cc4725e85b6f_fixed.java
index 5bc9804..d83e761 100644
--- a/tmp/15bf54d8-2fe5-4bae-901c-c206550748a0_buggy.java
+++ b/tmp/fb42b073-51cd-4bd3-b5e6-cc4725e85b6f_fixed.java
@@ -1,85 +1,85 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         final ExternalTypeHandler ext = _externalTypeIdHandler.start();
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+        while (t == JsonToken.FIELD_NAME) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 // first: let's check to see if this might be part of value with external type id:
                 // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
                 //   since it is not the bean
-                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
+                if (ext.handlePropertyValue(p, ctxt, propName, null)) {
                     ;
                 } else {
                     // Last creator property to set?
                     if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
                         t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                         Object bean;
                         try {
                             bean = creator.build(ctxt, buffer);
                         } catch (Exception e) {
                             wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                            continue; // never gets here
+                            break; // exit the loop instead of continue
                         }
                         // if so, need to copy all remaining tokens into buffer
                         while (t == JsonToken.FIELD_NAME) {
                             p.nextToken(); // to skip name
                             tokens.copyCurrentStructure(p);
                             t = p.nextToken();
                         }
                         if (bean.getClass() != _beanType.getRawClass()) {
                             // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
                             //   it's too complicated, so bail out
                             throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
                         }
                         return ext.complete(p, ctxt, bean);
                     }
                 }
-                continue;
             }
             // Object Id property?
-            if (buffer.readIdProperty(propName)) {
-                continue;
+            else if (buffer.readIdProperty(propName)) {
+                ;
             }
             // regular property? needs buffering
+            else {
                 SettableBeanProperty prop = _beanProperties.find(propName);
                 if (prop != null) {
                     buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
                 }
                 // external type id (or property that depends on it)?
-            if (ext.handlePropertyValue(p, ctxt, propName, null)) {
-                continue;
+                else if (ext.handlePropertyValue(p, ctxt, propName, null)) {
+                    ;
                 }
                 /* As per [JACKSON-313], things marked as ignorable should not be
                  * passed to any setter
                  */
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                else if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                     handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
                 }
                 // "any property"?
-            if (_anySetter != null) {
+                else if (_anySetter != null) {
                     buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
                 }
             }
+            t = p.nextToken();
+        }
 
         // We hit END_OBJECT; resolve the pieces:
         try {
             return ext.complete(p, ctxt, buffer, creator);
         } catch (Exception e) {
             wrapInstantiationProblem(e, ctxt);
             return null; // never gets here
         }
     }
\ No newline at end of file
