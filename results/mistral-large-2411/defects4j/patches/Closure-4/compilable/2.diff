diff --git a/tmp/d67120c8-78b3-48c7-b00e-f37a863dd8be_buggy.java b/tmp/b6c3e88f-af90-466c-ad45-9c5a26dd62f1_fixed.java
index d6a560a..52e7f39 100644
--- a/tmp/d67120c8-78b3-48c7-b00e-f37a863dd8be_buggy.java
+++ b/tmp/b6c3e88f-af90-466c-ad45-9c5a26dd62f1_fixed.java
@@ -1,33 +1,38 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
+      if (!isResolved()) {
         super.resolveInternal(t, enclosing);
+      }
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
+    // Check if the type has been resolved to avoid redundant calls
+    if (!isResolved()) {
       super.resolveInternal(t, enclosing);
+    }
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
