diff --git a/tmp/39d56179-147d-4300-afe8-6f4dcc6741db_buggy.java b/tmp/155c0b19-cf04-4bf4-a05b-dfcfdbf70b14_fixed.java
index d6a560a..20b076e 100644
--- a/tmp/39d56179-147d-4300-afe8-6f4dcc6741db_buggy.java
+++ b/tmp/155c0b19-cf04-4bf4-a05b-dfcfdbf70b14_fixed.java
@@ -1,33 +1,26 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     if (resolved) {
-      super.resolveInternal(t, enclosing);
+        super.resolveInternal(t, enclosing);  // Call super before checking isResolved()
+        if (isResolved()) {  // Check if the type is resolved
             finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        }
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
-    super.resolveInternal(t, enclosing);
+    super.resolveInternal(t, enclosing);  // Call super before checking isResolved()
     if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
