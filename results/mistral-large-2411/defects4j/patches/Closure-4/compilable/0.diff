diff --git a/tmp/0d77a52b-6b96-485e-83d1-01739e028a3e_buggy.java b/tmp/f2b3d0b4-d858-42cb-9c32-dcec2a84a292_fixed.java
index d6a560a..ab98819 100644
--- a/tmp/0d77a52b-6b96-485e-83d1-01739e028a3e_buggy.java
+++ b/tmp/f2b3d0b4-d858-42cb-9c32-dcec2a84a292_fixed.java
@@ -1,33 +1,43 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
-      super.resolveInternal(t, enclosing);
+      if (super.resolveInternal(t, enclosing) != null) {
+          finishPropertyContinuations();
+          return registry.isLastGeneration() ?
+              getReferencedType() : this;
+      }
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
-    super.resolveInternal(t, enclosing);
+    if (super.resolveInternal(t, enclosing) != null) {
+      if (isResolved()) {
+        finishPropertyContinuations();
+      }
+      return registry.isLastGeneration() ?
+          getReferencedType() : this;
+    }
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
