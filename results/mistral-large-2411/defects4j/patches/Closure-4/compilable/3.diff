diff --git a/tmp/050bf746-1dd8-4159-8fff-41b570e0e841_buggy.java b/tmp/bc7b23ef-5619-49db-a9a3-2dec7e26bd5f_fixed.java
index d6a560a..99d73e4 100644
--- a/tmp/050bf746-1dd8-4159-8fff-41b570e0e841_buggy.java
+++ b/tmp/bc7b23ef-5619-49db-a9a3-2dec7e26bd5f_fixed.java
@@ -1,33 +1,37 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
+      if (!isResolved()) {
         super.resolveInternal(t, enclosing);
+        if (isResolved()) {
           finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        }
+      }
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
+    if (!isResolved()) {
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    }
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
