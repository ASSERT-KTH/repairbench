diff --git a/tmp/4ed0e6ce-5d35-4268-9475-8baf6028024a_buggy.java b/tmp/f05478f0-1f6b-47c1-8080-9b4dbb6a6e51_fixed.java
index 5f1dcf2..7d9d0e9 100644
--- a/tmp/4ed0e6ce-5d35-4268-9475-8baf6028024a_buggy.java
+++ b/tmp/f05478f0-1f6b-47c1-8080-9b4dbb6a6e51_fixed.java
@@ -1,41 +1,47 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                    simplex = reflectedSimplex;
+                } else {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = simplex; // redundant, but for clarity
+                return;
+            }
 
             // check convergence
-                return;
+            if (getEvaluations() >= getMaxEvaluations() || getIterations() >= getMaxIterations()) {
+                throw new MaxIterationsExceededException(getMaxIterations());
             }
-
         }
 
     }
\ No newline at end of file
