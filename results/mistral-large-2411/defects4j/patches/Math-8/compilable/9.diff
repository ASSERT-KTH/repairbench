diff --git a/tmp/5f181430-fc7a-4cfd-aa3e-4c95ff56e493_buggy.java b/tmp/8114ea9e-1bb9-4819-b473-ed7fa0ffff15_fixed.java
index bfa2423..0cecaa6 100644
--- a/tmp/5f181430-fc7a-4cfd-aa3e-4c95ff56e493_buggy.java
+++ b/tmp/8114ea9e-1bb9-4819-b473-ed7fa0ffff15_fixed.java
@@ -1,23 +1,30 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
         final T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
+            Object obj = sample();
+
+            // Ensure the sampled object is cast correctly
+            if (obj != null && obj.getClass().isInstance(out[i])) {
+                out[i] = (T) obj;
+            } else {
+                // Incompatible object types, handle accordingly
+                throw new ArrayStoreException("Incompatible types for sample array");
+            }
         }
 
         return out;
-
     }
\ No newline at end of file
