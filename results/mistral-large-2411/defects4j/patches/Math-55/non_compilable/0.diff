diff --git a/tmp/e92b6cec-dcab-4288-9b14-fd0450275fa6_buggy.java b/tmp/a3cf1a74-33be-4ab3-af5f-43b0a9adf599_fixed.java
index 1478ee1..a2bb6a1 100644
--- a/tmp/e92b6cec-dcab-4288-9b14-fd0450275fa6_buggy.java
+++ b/tmp/a3cf1a74-33be-4ab3-af5f-43b0a9adf599_fixed.java
@@ -1,24 +1,19 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Rescale both vectors to ensure their norms are of the same order of magnitude
+    final double mx = FastMath.max(FastMath.abs(v1.getX()), FastMath.max(FastMath.abs(v1.getY()), FastMath.max(FastMath.abs(v1.getZ()), FastMath.max(FastMath.abs(v2.getX()), FastMath.max(FastMath.abs(v2.getY()), FastMath.abs(v2.getZ()))))));
+    final Vector3D sv1 = new Vector3D(v1.getX() / mx, v1.getY() / mx, v1.getZ() / mx);
+    final Vector3D sv2 = new Vector3D(v2.getX() / mx, v2.getY() / mx, v2.getZ() / mx);
 
+    // Compute rho as an 8-bit approximation of sv1 . sv2 / sv2 . sv2
+    final double rho = ((int) (sv1.dotProduct(sv2) / sv2.dotProduct(sv2) * 256)) / 256.0;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute v3 = sv1 - rho * sv2
+    final Vector3D v3 = new Vector3D(sv1.getX() - rho * sv2.getX(), sv1.getY() - rho * sv2.getY(), sv1.getZ() - rho * sv2.getZ());
 
+    // Compute cross product from v3 and sv2 instead of v1 and v2
+    return new Vector3D(
+        v3.getY() * sv2.getZ() - v3.getZ() * sv2.getY(),
+        v3.getZ() * sv2.getX() - v3.getX() * sv2.getZ(),
+        v3.getX() * sv2.getY() - v3.getY() * sv2.getX()
+    );
 }
\ No newline at end of file
