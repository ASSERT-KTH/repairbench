diff --git a/tmp/dfe39a24-db9c-440a-8a5c-b50010549343_buggy.java b/tmp/8421779a-a91e-4e74-83a8-76041a1cac88_fixed.java
index 1478ee1..5eacde9 100644
--- a/tmp/dfe39a24-db9c-440a-8a5c-b50010549343_buggy.java
+++ b/tmp/8421779a-a91e-4e74-83a8-76041a1cac88_fixed.java
@@ -1,24 +1,21 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+      // Compute the scalars for rescaling
+      final double scale1 = FastMath.max(FastMath.abs(v1.getX()),
+                                         FastMath.abs(v1.getY()),
+                                         FastMath.abs(v1.getZ()));
+      final double scale2 = FastMath.max(FastMath.abs(v2.getX()),
+                                         FastMath.abs(v2.getY()),
+                                         FastMath.abs(v2.getZ()));
 
+      // Rescale vectors
+      final Vector3D v1Scaled = new Vector3D(v1.getX() / scale1, v1.getY() / scale1, v1.getZ() / scale1);
+      final Vector3D v2Scaled = new Vector3D(v2.getX() / scale2, v2.getY() / scale2, v2.getZ() / scale2);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute cross product
+      final double crossX = v1Scaled.getY() * v2Scaled.getZ() - v1Scaled.getZ() * v2Scaled.getY();
+      final double crossY = v1Scaled.getZ() * v2Scaled.getX() - v1Scaled.getX() * v2Scaled.getZ();
+      final double crossZ = v1Scaled.getX() * v2Scaled.getY() - v1Scaled.getY() * v2Scaled.getX();
 
+      // Rescale back to original magnitudes
+      return new Vector3D(crossX * scale1 * scale2, crossY * scale1 * scale2, crossZ * scale1 * scale2);
   }
\ No newline at end of file
