diff --git a/tmp/3aa50535-c5ef-406a-81ce-1fdf5c3ad5fe_buggy.java b/tmp/c6c9cd36-03db-4500-80d3-217d469409af_fixed.java
index 1478ee1..d15d467 100644
--- a/tmp/3aa50535-c5ef-406a-81ce-1fdf5c3ad5fe_buggy.java
+++ b/tmp/c6c9cd36-03db-4500-80d3-217d469409af_fixed.java
@@ -1,24 +1,15 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    Vector3D v3 = v1.scalarMultiply(1.0); // Make a copy of v1
+    if (v1.getNorm() < v2.getNorm()) {
+        // Ensure that v1 has larger or equal norm compared to v2
+        Vector3D temp = v1;
+        v1 = v2;
+        v2 = temp;
+    }
 
+    double rho = v1.dot(v2) / v2.dot(v2);
+    v3 = v3.subtract(v2.scalarMultiply(rho));
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    // Compute cross product from v3 and v2 instead of v1 and v2
+    return new Vector3D(v3.y * v2.z - v3.z * v2.y, v3.z * v2.x - v3.x * v2.z, v3.x * v2.y - v3.y * v2.x);
 }
\ No newline at end of file
