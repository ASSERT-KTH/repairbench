diff --git a/tmp/05f95dab-ffff-4114-9930-b8fa92354f4d_buggy.java b/tmp/f2c94329-568f-4b20-bc4c-60bf010507a1_fixed.java
index 1478ee1..67075bf 100644
--- a/tmp/05f95dab-ffff-4114-9930-b8fa92354f4d_buggy.java
+++ b/tmp/f2c94329-568f-4b20-bc4c-60bf010507a1_fixed.java
@@ -1,24 +1,17 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+      // Compute the cross product with cancellation error handling
+      double rescale = v1.getNorm() / v2.getNorm();
+      double rho = v1.dotProduct(v2) / v2.dotProduct(v2);
+
+      // Precondition v1 to minimize cancellation errors
+      double x1 = v1.getX() - rho * v2.getX();
+      double y1 = v1.getY() - rho * v2.getY();
+      double z1 = v1.getZ() - rho * v2.getZ();
+
+      // Compute the cross product using v1' instead of v1
+      return new Vector3D(
+          y1 * v2.getZ() - z1 * v2.getY(),
+          z1 * v2.getX() - x1 * v2.getZ(),
+          x1 * v2.getY() - y1 * v2.getX()
+      );
   }
\ No newline at end of file
