diff --git a/tmp/145c00ce-860d-4f42-b4d5-866e90bef6da_buggy.java b/tmp/577c4fe3-8a75-417f-9f33-13600237d894_fixed.java
index 25ca093..3283a04 100644
--- a/tmp/145c00ce-860d-4f42-b4d5-866e90bef6da_buggy.java
+++ b/tmp/577c4fe3-8a75-417f-9f33-13600237d894_fixed.java
@@ -1,52 +1,92 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
+    String docData = null;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    byte[] bom = checkBom(byteData, charsetName);
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (bom != null) {
+        byteData.position(bom.length);
+        docData = new String(bom, getCharsetForBom(bom));
+    } else if (charsetName == null) {
+        // If charsetName is null, determine charset from meta
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
-                if (foundCharset == null && meta.hasAttr("charset")) {
+            } else if (meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
+                        foundCharset = meta.attr("charset").trim().replaceAll("[\"']", "");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (foundCharset != null && !foundCharset.equals(defaultCharset)) {
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+        if (charsetName == null) {
+            charsetName = defaultCharset;
+        }
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static byte[] checkBom(ByteBuffer byteData, String charsetName) {
+    if (byteData.remaining() >= 4) {
+        byte[] bom = new byte[4];
+        byteData.mark();
+        byteData.get(bom);
+        byteData.reset();
+
+        if (Arrays.equals(bom, UTF_32LE_BOM)) { // UTF-32LE BOM
+            return Arrays.copyOfRange(bom, 0, 4);
+        } else if (Arrays.equals(Arrays.copyOfRange(bom, 0, 2), UTF_16LE_BOM)) { // UTF-16LE BOM
+            return Arrays.copyOfRange(bom, 0, 2);
+        } else if (Arrays.equals(Arrays.copyOfRange(bom, 0, 3), UTF_8_BOM)) { // UTF-8 BOM
+            return Arrays.copyOfRange(bom, 0, 3);
+        } else if (Arrays.equals(new byte[] { bom[3], bom[2], bom[1], bom[0] }, UTF_32BE_BOM)) { // UTF-32BE BOM
+            return new byte[] { bom[3], bom[2], bom[1], bom[0] };
+        } else if (Arrays.equals(new byte[] { bom[1], bom[0] }, UTF_16BE_BOM)) { // UTF-16BE BOM
+            return new byte[] { bom[1], bom[0] };
+        }
+    }
+    return null;
+}
+
+private static Charset getCharsetForBom(byte[] bom) {
+    if (bom.length == 4 && Arrays.equals(bom, UTF_32LE_BOM)) {
+        return Charset.forName("UTF-32LE");
+    } else if (bom.length == 2 && Arrays.equals(bom, UTF_16LE_BOM)) {
+        return Charset.forName("UTF-16LE");
+    } else if (bom.length == 3 && Arrays.equals(bom, UTF_8_BOM)) {
+        return Charset.forName("UTF-8");
+    } else if (bom.length == 4 && Arrays.equals(bom, UTF_32BE_BOM)) {
+        return Charset.forName("UTF-32BE");
+    } else if (bom.length == 2 && Arrays.equals(bom, UTF_16BE_BOM)) {
+        return Charset.forName("UTF-16BE");
+    }
+    return Charset.forName("UTF-8");
+}
+
+private static final char UNICODE_BOM = '\uFEFF';
+private static final byte[] UTF_32LE_BOM = new byte[] { (byte) 0xFF, (byte) 0xFE, 0x00, 0x00 };
+private static final byte[] UTF_16LE_BOM = new byte[] { (byte) 0xFF, (byte) 0xFE, 0x00 };
+private static final byte[] UTF_8_BOM = new byte[] { (byte) 0xEF, (byte) 0xBB, (byte) 0xBF };
+private static final byte[] UTF_32BE_BOM = new byte[] { 0x00, 0x00, (byte) 0xFE, (byte) 0xFF };
+private static final byte[] UTF_16BE_BOM = new byte[] { (byte) 0xFE, (byte) 0xFF, 0x00 };
+private static final String defaultCharset = "UTF-8";
\ No newline at end of file
