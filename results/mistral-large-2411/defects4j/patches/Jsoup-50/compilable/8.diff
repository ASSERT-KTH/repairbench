diff --git a/tmp/34288d63-9cdc-4518-89a0-d70a4b550f2f_buggy.java b/tmp/33dd0106-6972-4593-941c-4c15fa65630b_fixed.java
index 25ca093..14e1a0e 100644
--- a/tmp/34288d63-9cdc-4518-89a0-d70a4b550f2f_buggy.java
+++ b/tmp/33dd0106-6972-4593-941c-4c15fa65630b_fixed.java
@@ -1,52 +1,64 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
         // look for BOM - overrides any other header or input
+        byteData.mark();
+        byteData.position(0);
+        byte[] bom = new byte[4];
+        byteData.get(bom);
+        byteData.reset();
+        String detectedCharset = detectBOMcharset(bom);
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        if (detectedCharset != null) {
+            charsetName = detectedCharset;
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+        } else if (charsetName == null) {
+            // determine from meta. safe parse as UTF-8
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && !foundCharset.trim().isEmpty() && !foundCharset.equals(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
+        } else {
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
+
         return doc;
     }
+
+    private static String detectBOMcharset(byte[] bom) {
+        if (bom.length >= 2 && bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) return "UTF-16BE";
+        if (bom.length >= 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) return "UTF-16LE";
+        if (bom.length >= 3 && bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) return "UTF-8";
+        if (bom.length >= 4 && bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) return "UTF-32BE";
+        if (bom.length >= 4 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) return "UTF-32LE";
+        return null;
+    }
\ No newline at end of file
