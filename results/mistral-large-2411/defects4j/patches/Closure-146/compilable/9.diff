diff --git a/tmp/2d5ef134-30c1-400b-93f7-bc2f0480c6ba_buggy.java b/tmp/1282c931-b289-415b-907c-dd002787c9b4_fixed.java
index 210695a..cf2de78 100644
--- a/tmp/2d5ef134-30c1-400b-93f7-bc2f0480c6ba_buggy.java
+++ b/tmp/1282c931-b289-415b-907c-dd002787c9b4_fixed.java
@@ -1,32 +1,41 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+    // union types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
+        // When types are equal, return null to indicate no restriction.
         return new TypePair(null, null);
 
       case FALSE:
       case UNKNOWN:
+        // Handling cases where types are not equal or unknown.
+        if (this.isVoidType() && that.isVoidType()) {
+          return new TypePair(null, null);
+        } else if (this.isVoidType() || that.isVoidType()) {
+          // Handle case where one or both types can be VOID/undefined
+          return new TypePair(this.isVoidType() ? null : this, that.isVoidType() ? null : that);
+        } else {
           return new TypePair(this, that);
         }
+    }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
