diff --git a/tmp/fb03e90e-6d7a-44c7-b265-ea8e84bb7aa6_buggy.java b/tmp/18fcf7da-1cbf-417b-8ed5-0b3197d01f98_fixed.java
index 210695a..4d8dea1 100644
--- a/tmp/fb03e90e-6d7a-44c7-b265-ea8e84bb7aa6_buggy.java
+++ b/tmp/18fcf7da-1cbf-417b-8ed5-0b3197d01f98_fixed.java
@@ -1,32 +1,26 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
   // unions types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
   // other types
   switch (this.testForEquality(that)) {
     case TRUE:
       return new TypePair(null, null);
 
     case FALSE:
     case UNKNOWN:
+      // Ensure that the types are not simply returning this and that
+      // but rather restricted to their subset where inequality is observed.
+      if (this.isNullable() && that.isNullable()) {
+        // If both types are nullable, restrict to non-nullable types
+        return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());
+      }
       return new TypePair(this, that);
   }
 
   // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
