diff --git a/tmp/ee2aacb2-282d-4924-aad7-1d9cbf026028_buggy.java b/tmp/07e430b4-2da7-4e12-ae0d-64fdfe1c27c4_fixed.java
index 602226b..4c0b5ff 100644
--- a/tmp/ee2aacb2-282d-4924-aad7-1d9cbf026028_buggy.java
+++ b/tmp/07e430b4-2da7-4e12-ae0d-64fdfe1c27c4_fixed.java
@@ -1,26 +1,23 @@
     private void findAliases(NodeTraversal t) {
         Scope scope = t.getScope();
         for (Var v : scope.getVarIterable()) {
             Node n = v.getNode();
             int type = n.getType();
             Node parent = n.getParent();
-        if (parent.isVar()) {
+            if (parent != null && parent.isVar()) {
                 if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                     String name = n.getString();
                     Var aliasVar = scope.getVar(name);
+                    if (aliasVar != null) {
                         aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+                    }
                 } else {
                     // TODO(robbyw): Support using locals for private variables.
                     report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
                 }
             }
         }
     }
\ No newline at end of file
