diff --git a/tmp/92ac3c67-67ac-458e-8fde-c193ede0e2f7_buggy.java b/tmp/0e750959-a5cc-4c5c-a770-f61871a7b4d6_fixed.java
index 602226b..db1b1ff 100644
--- a/tmp/92ac3c67-67ac-458e-8fde-c193ede0e2f7_buggy.java
+++ b/tmp/0e750959-a5cc-4c5c-a770-f61871a7b4d6_fixed.java
@@ -1,26 +1,22 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
+        if (parent != null && parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
           } else {
-          // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
+        } else {
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
