diff --git a/tmp/5cb76dbb-3028-4af2-8275-0ac377e9daa4_buggy.java b/tmp/1d08ef46-5e74-4c90-a23e-5361f76336f7_fixed.java
index b81eeca..e4f99e9 100644
--- a/tmp/5cb76dbb-3028-4af2-8275-0ac377e9daa4_buggy.java
+++ b/tmp/1d08ef46-5e74-4c90-a23e-5361f76336f7_fixed.java
@@ -1,78 +1,81 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2) {
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
-        boolean allNUL = true;
+        boolean allNulls = true;
         for (int i = start; i < end; i++) {
             if (buffer[i] != 0) {
-                allNUL = false;
+                allNulls = false;
                 break;
             }
         }
-        if (allNUL) {
+        if (allNulls) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end) {
-            if (buffer[start] == ' '){
+            if (buffer[start] == ' ' || buffer[start] == 0) {
                 start++;
             } else {
                 break;
             }
         }
 
+        if (start >= end || buffer[start] == 0) {
+            return 0L;
+        }
+
         // Must have trailing NUL or space
         byte trailer;
         trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
+        if (trailer != 0 && trailer != ' ') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end - 1, trailer));
         }
+
         // May have additional NUL or space
         trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
             end--;
         }
 
         for ( ; start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
