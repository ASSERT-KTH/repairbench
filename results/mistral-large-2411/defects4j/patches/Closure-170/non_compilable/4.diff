diff --git a/tmp/23201a0a-d209-4f2f-9b8f-8edf468fa510_buggy.java b/tmp/003aef64-d51e-478e-a899-b122ce415054_fixed.java
index 5abdeb5..bd40041 100644
--- a/tmp/23201a0a-d209-4f2f-9b8f-8edf468fa510_buggy.java
+++ b/tmp/003aef64-d51e-478e-a899-b122ce415054_fixed.java
@@ -1,29 +1,22 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
         numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
 
+        AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
             @Override
             public void visit(NodeTraversal t, Node n, Node parent) {
                 if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+                    !(parent.isAssign() && parent.getFirstChild() == n) &&
+                    !(parent.isHook() && isVarAssignedInsideHook(parent, varName))) {
                     numUsesWithinCfgNode++;
                 }
             }
-
         };
 
         NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
+
+    private boolean isVarAssignedInsideHook(Node hookNode, String varName) {
+        return NodeUtil.isNameReference(hookNode.getLastChild(), varName) &&
+               hookNode.getChildCount() > 1 &&
+               NodeUtil.isAssignmentOp(hookNode.getFirstChild());
+    }
\ No newline at end of file
