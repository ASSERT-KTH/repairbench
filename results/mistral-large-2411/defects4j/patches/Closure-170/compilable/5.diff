diff --git a/tmp/7965884d-20ce-49b1-84a3-79062ddf4c3f_buggy.java b/tmp/e5bd85f6-1dc2-4602-aa9d-bca9e36b237c_fixed.java
index 5abdeb5..ac63cdc 100644
--- a/tmp/7965884d-20ce-49b1-84a3-79062ddf4c3f_buggy.java
+++ b/tmp/e5bd85f6-1dc2-4602-aa9d-bca9e36b237c_fixed.java
@@ -1,29 +1,32 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
+              // Adjust the condition for avoiding counting LHS in top-level assignment chain
+              !(isTopLevelAssignment(cfgNode, parent) &&
                (parent.getFirstChild() == n))) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
+        private boolean isTopLevelAssignment(Node cfgNode, Node parent) {
+          // Check if the parent is part of a top-level assignment chain in cfgNode
+          while (parent != cfgNode) {
+            if (!parent.isAssign()) {
+              return false;
+            }
+            parent = parent.getParent();
+          }
+          return cfgNode.isAssign();
+        }
+
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
