diff --git a/tmp/2d5a1b8b-89c8-465f-a530-f7fd69160127_buggy.java b/tmp/9b556acb-18f9-4388-b91c-09c7f2525058_fixed.java
index 5abdeb5..5be3c28 100644
--- a/tmp/2d5a1b8b-89c8-465f-a530-f7fd69160127_buggy.java
+++ b/tmp/9b556acb-18f9-4388-b91c-09c7f2525058_fixed.java
@@ -1,29 +1,43 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+              !(isAssignmentChain(cfgNode, n))) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
+        private boolean isAssignmentChain(Node cfgNode, Node n) {
+          // Check if the node is part of an assignment chain
+          if (cfgNode.isAssign() && cfgNode.getFirstChild() == n) {
+            return true;
+          }
+          Node parent = n.getParent();
+          while (parent != null) {
+            if (parent.isAssign() && parent.getFirstChild() != n) {
+              return false;
+            }
+            parent = parent.getParent();
+          }
+          return false;
+        }
+
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
