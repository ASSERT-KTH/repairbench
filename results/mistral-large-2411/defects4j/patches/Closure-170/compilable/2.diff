diff --git a/tmp/e255c683-9546-47de-b23c-ec7308517637_buggy.java b/tmp/be268d97-b746-46fb-bcfe-a5628e906c04_fixed.java
index 5abdeb5..148cb8b 100644
--- a/tmp/e255c683-9546-47de-b23c-ec7308517637_buggy.java
+++ b/tmp/be268d97-b746-46fb-bcfe-a5628e906c04_fixed.java
@@ -1,29 +1,19 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
         numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
+        AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
             @Override
             public void visit(NodeTraversal t, Node n, Node parent) {
                 if (n.isName() && n.getString().equals(varName) &&
                     // We make a special exception when the entire cfgNode is a chain
                     // of assignments, since in that case the assignment statements
                     // will happen after the inlining of the right hand side.
                     // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
                     //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+                    !(parent.isAssign() && parent.getFirstChild() == n)) {
                     // Don't count lhs of top-level assignment chain
                     numUsesWithinCfgNode++;
                 }
             }
-
         };
-
         NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
