diff --git a/tmp/9710fcdb-81e1-4694-ada0-21379c4486be_buggy.java b/tmp/b8525acc-b457-461d-a7a1-113e686ea54d_fixed.java
index 57d43b9..bfa5ca8 100644
--- a/tmp/9710fcdb-81e1-4694-ada0-21379c4486be_buggy.java
+++ b/tmp/b8525acc-b457-461d-a7a1-113e686ea54d_fixed.java
@@ -1,102 +1,97 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
      * @throws ConvergenceException if the algorithm fails to converge.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
         final double small = 1e-50;
         double hPrev = getA(0, x);
 
         // use the value of small as epsilon criteria for zero checks
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
         }
 
         int n = 1;
         double dPrev = 0.0;
         double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
+        double q1 = getB(1, x);
+        if (Precision.equals(q1, 0.0, Precision.SAFE_MIN)) {
+            q1 = small;
+        }
+        double cPrev = hPrev / q1;
         double hN = hPrev;
 
         while (n < maxIterations) {
             final double a = getA(n, x);
             final double b = getB(n, x);
 
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
+            double cN = hPrev * a + b * p0;
+            double q2 = q1 * a + b * dPrev;
             if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+                double scaleFactor = FastMath.max(FastMath.abs(a), FastMath.abs(b));
+                if (scaleFactor == 0) {
                     throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                 }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                    }
+                final int maxPower = 5;
+                for (int i = 1; i <= maxPower; i++) {
+                    cN /= scaleFactor;
+                    q2 /= scaleFactor;
                     if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                         break;
                     }
                 }
             }
 
             final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
+            hN = hPrev * deltaN;
 
             if (Double.isInfinite(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                x);
             }
             if (Double.isNaN(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                x);
             }
 
             if (FastMath.abs(deltaN - 1.0) < epsilon) {
                 break;
             }
 
-            dPrev = q1;
+            dPrev = q1 / cN;
             cPrev = cN / q2;
             p0 = hPrev;
             hPrev = cN;
             q1 = q2;
             n++;
         }
 
         if (n >= maxIterations) {
-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
+            throw new org.apache.commons.math3.exception.MaxCountExceededException(
+                    LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                     maxIterations, x);
         }
 
         return hN;
     }
\ No newline at end of file
