diff --git a/tmp/e26f1c2e-f1bb-4bfd-949f-2dcb791ed6d2_buggy.java b/tmp/0ab81e9f-9df9-448e-b2f4-d761e71c107a_fixed.java
index c51c8b1..b495c80 100644
--- a/tmp/e26f1c2e-f1bb-4bfd-949f-2dcb791ed6d2_buggy.java
+++ b/tmp/0ab81e9f-9df9-448e-b2f4-d761e71c107a_fixed.java
@@ -1,31 +1,43 @@
   private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
     Node nameNode = n.getFirstChild();
     Node parent = n.getParent();
     NameInformation ns = createNameInformation(t, nameNode);
     if (ns != null) {
       if (parent.isFor() && !NodeUtil.isForIn(parent)) {
         // Patch for assignments that appear in the init,
         // condition or iteration part of a FOR loop.  Without
         // this change, all 3 of those parts try to claim the for
         // loop as their dependency scope.  The last assignment in
         // those three fields wins, which can result in incorrect
         // reference edges between referenced and assigned variables.
         //
         // TODO(user) revisit the dependency scope calculation
         // logic.
         if (parent.getFirstChild().getNext() != n) {
           recordDepScope(recordNode, ns);
         } else {
           recordDepScope(nameNode, ns);
         }
       } else {
         // The rhs of the assignment is the caller, so it's used by the
         // context. Don't associate it w/ the lhs.
         // FYI: this fixes only the specific case where the assignment is the
         // caller expression, but it could be nested deeper in the caller and
         // we would still get a bug.
         // See testAssignWithCall2 for an example of this.
+        if (t.inGlobalScope() && !isInCallExpression(n)) {
           recordDepScope(recordNode, ns);
         }
       }
     }
+  }
+
+  private boolean isInCallExpression(Node n) {
+    while (n != null) {
+      if (n.isCall()) {
+        return true;
+      }
+      n = n.getParent();
+    }
+    return false;
+  }
\ No newline at end of file
