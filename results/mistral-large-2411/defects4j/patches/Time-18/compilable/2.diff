diff --git a/tmp/41df1092-67fc-4a3c-9851-713fa1edfece_buggy.java b/tmp/fc9a7d7b-a1b6-441d-93ce-35d3083dd3a4_fixed.java
index be2af16..5de33ab 100644
--- a/tmp/41df1092-67fc-4a3c-9851-713fa1edfece_buggy.java
+++ b/tmp/fc9a7d7b-a1b6-441d-93ce-35d3083dd3a4_fixed.java
@@ -1,29 +1,31 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
-        throws IllegalArgumentException
-    {
+        throws IllegalArgumentException {
         Chronology base;
         if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
         // Assume date is Gregorian.
         long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
             // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+            try {
+                instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
                 if (instant >= iCutoverMillis) {
                     // Okay, it's in the illegal cutover gap.
                     throw new IllegalArgumentException("Specified date does not exist");
                 }
+            } catch (IllegalArgumentException e) {
+                // If Julian calculation fails, fallback to Gregorian date
+                instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            }
         }
         return instant;
     }
\ No newline at end of file
