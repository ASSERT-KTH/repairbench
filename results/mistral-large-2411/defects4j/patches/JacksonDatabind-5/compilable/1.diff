diff --git a/tmp/bd4a38b0-d242-46f3-ad58-2b0dab6acd80_buggy.java b/tmp/2fea933a-06b0-4945-85a2-af6d97723fed_fixed.java
index b2db1d6..d587b50 100644
--- a/tmp/bd4a38b0-d242-46f3-ad58-2b0dab6acd80_buggy.java
+++ b/tmp/2fea933a-06b0-4945-85a2-af6d97723fed_fixed.java
@@ -1,29 +1,32 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
-                AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
+                AnnotatedMethod am = mixIns.find(m);
+
+                /* Multi-level merging in mixins: if there is a method in mixIns that matches m, we need to add it to methods as well */
+                if (am == null) {
+                    am = methods.find(m);
+                }
+
                 if (am != null) {
                     _addMixUnders(m, am);
                     /* Otherwise will have precedence, but must wait
                      * until we find the real method (mixIn methods are
                      * just placeholder, can't be called)
                      */
                 } else {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
                     mixIns.add(_constructMethod(m));
+                    methods.add(_constructMethod(m));
                 }
             }
         }
     }
\ No newline at end of file
