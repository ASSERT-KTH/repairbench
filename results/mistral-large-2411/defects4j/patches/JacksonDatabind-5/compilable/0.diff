diff --git a/tmp/05ee1846-7134-4978-a80a-cb07c8c15a72_buggy.java b/tmp/072876b5-696b-40d2-b890-55e9322ce36b_fixed.java
index b2db1d6..ba19b8b 100644
--- a/tmp/05ee1846-7134-4978-a80a-cb07c8c15a72_buggy.java
+++ b/tmp/072876b5-696b-40d2-b890-55e9322ce36b_fixed.java
@@ -1,29 +1,34 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
                     /* Otherwise will have precedence, but must wait
                      * until we find the real method (mixIn methods are
                      * just placeholder, can't be called)
                      */
                 } else {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
                     mixIns.add(_constructMethod(m));
                 }
             }
+            for (Class<?> parent : ClassUtil.findSuperTypes(mixin, null)) {
+                if (!parents.contains(parent)) {
+                    parents.add(parent);
+                }
+            }
         }
     }
