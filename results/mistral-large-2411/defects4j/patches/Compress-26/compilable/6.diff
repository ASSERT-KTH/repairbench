diff --git a/tmp/d1c1ce3f-50f4-4878-9719-531f9064df9f_buggy.java b/tmp/9bd7f5a1-e431-44c3-9aef-7c1a9bcf3f37_fixed.java
index 4b163f6..a79f48d 100644
--- a/tmp/d1c1ce3f-50f4-4878-9719-531f9064df9f_buggy.java
+++ b/tmp/9bd7f5a1-e431-44c3-9aef-7c1a9bcf3f37_fixed.java
@@ -1,28 +1,20 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
                 break;
             }
             numToSkip -= skipped;
         }
 
+        if (numToSkip > 0) {
+            byte[] buffer = new byte[2048];
+            int read;
+            while (numToSkip > 0 && (read = input.read(buffer, 0, (int) Math.min(buffer.length, numToSkip))) != -1) {
+                numToSkip -= read;
+            }
+        }
+
         return available - numToSkip;
     }
\ No newline at end of file
