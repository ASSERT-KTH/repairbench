You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    /**
     * Skips the given number of bytes by repeatedly invoking skip on
     * the given input stream if necessary.
     *
     * <p>In a case where the stream's skip() method returns 0 before
     * the requested number of bytes has been skip this implementation
     * will fall back to using the read() method.</p>
     *
     * <p>This method will only skip less than the requested number of
     * bytes if the end of the input stream has been reached.</p>
     *
     * @param input stream to skip bytes in
     * @param numToSkip the number of bytes to skip
     * @return the number of bytes actually skipped
     * @throws IOException
     */
    public static long skip(InputStream input, long numToSkip) throws IOException {
        long available = numToSkip;
        while (numToSkip > 0) {
            long skipped = input.skip(numToSkip);
            if (skipped == 0) {
                break;
            }
            numToSkip -= skipped;
        }
            
        return available - numToSkip;
    }

```

The code fails the following tests.

Test `org.apache.commons.compress.utils.IOUtilsTest::skipUsingRead`:
```java
    @Test
    public void skipUsingRead() throws Exception {
        skip(new StreamWrapper() {
                public InputStream wrap(InputStream toWrap) {
                    return new FilterInputStream(toWrap) {
                        public long skip(long s) {
                            return 0;
                        }
                    };
                }
            });
    }

```
Test `org.apache.commons.compress.utils.IOUtilsTest::skipUsingRead` error:
```
junit.framework.AssertionFailedError: expected:<10> but was:<5>
```

Test `org.apache.commons.compress.utils.IOUtilsTest::skipUsingSkipAndRead`:
```java
    @Test
    public void skipUsingSkipAndRead() throws Exception {
        skip(new StreamWrapper() {
                public InputStream wrap(final InputStream toWrap) {
                    return new FilterInputStream(toWrap) {
                        boolean skipped;
                        public long skip(long s) throws IOException {
                            if (!skipped) {
                                toWrap.skip(5);
                                skipped = true;
                                return 5;
                            }
                            return 0;
                        }
                    };
                }
            });
    }

```
Test `org.apache.commons.compress.utils.IOUtilsTest::skipUsingSkipAndRead` error:
```
junit.framework.AssertionFailedError: expected:<10> but was:<5>
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
