diff --git a/tmp/0df6e0d7-e6da-44d7-863e-d9f07c3d2092_buggy.java b/tmp/a6741d0e-f894-4ee2-b536-d2b0f64e7d62_fixed.java
index bf9c086..fd936bf 100644
--- a/tmp/0df6e0d7-e6da-44d7-863e-d9f07c3d2092_buggy.java
+++ b/tmp/a6741d0e-f894-4ee2-b536-d2b0f64e7d62_fixed.java
@@ -1,54 +1,60 @@
 /**
  * Visits a CALL node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  */
 private void visitCall(NodeTraversal t, Node n) {
   Node child = n.getFirstChild();
   JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
   if (!childType.canBeCalled()) {
     report(t, n, NOT_CALLABLE, childType.toString());
     ensureTyped(t, n);
     return;
   }
 
   // A couple of types can be called as if they were functions.
   // If it is a function type, then validate parameters.
   if (childType instanceof FunctionType) {
     FunctionType functionType = (FunctionType) childType;
 
     boolean isExtern = false;
     JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
     if(functionJSDocInfo != null) {
       String sourceName = functionJSDocInfo.getSourceName();
       CompilerInput functionSource = compiler.getInput(sourceName);
       isExtern = functionSource.isExtern();
     }
 
     // Non-native constructors should not be called directly
     // unless they specify a return type and are defined
     // in an extern.
     if (functionType.isConstructor() &&
         !functionType.isNativeObjectType() &&
         (functionType.getReturnType().isUnknownType() ||
          functionType.getReturnType().isVoidType() ||
          !isExtern)) {
       report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
     }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
+    // Functions with explicit 'this' types must be called in a GETPROP
     // or GETELEM.
+    if (functionType.hasplicitThisType()) {
+      Node parent = n.getParent();
+      if (!(parent.isGetElem() || parent.isGetProp())) {
+        report(t, n, MUST_HAVE_THIS_TYPE, childType.toString());
+      }
+    }
 
     visitParameterList(t, n, functionType);
     ensureTyped(t, n, functionType.getReturnType());
   } else {
     ensureTyped(t, n);
   }
 
   // TODO: Add something to check for calls of RegExp objects, which is not
   // supported by IE.  Either say something about the return type or warn
   // about the non-portability of the call or both.
 }
\ No newline at end of file
