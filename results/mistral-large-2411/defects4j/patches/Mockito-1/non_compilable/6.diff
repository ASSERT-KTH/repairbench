diff --git a/tmp/ba8a5676-84f9-443c-87b3-03db792e7f36_buggy.java b/tmp/bae2ecbb-52f7-46a9-8c6d-879addf094f0_fixed.java
index 1c875ad..8ecf21e 100644
--- a/tmp/ba8a5676-84f9-443c-87b3-03db792e7f36_buggy.java
+++ b/tmp/bae2ecbb-52f7-46a9-8c6d-879addf094f0_fixed.java
@@ -1,31 +1,42 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
+        Matcher varargMatcher = null;
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    varargMatcher = m;
+                    Object array = invocation.getRawArguments()[position];
+                    for (int i = 0; i < Array.getLength(array); i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                    }
+                    // Since we've captured all varargs already, it does not make sense to process other matchers.
+                    return;
+                } else {
+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                }
+            }
+        }
+        if (varargMatcher == null) {
             throw new UnsupportedOperationException();
-
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
+}
+
+private boolean isVariableArgument(Invocation invocation, int position) {
+    return position == invocation.getRawArguments().length - 1 && invocation.getMethod().isVarArgs();
+}
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+private boolean isVarargMatcher(Matcher matcher) {
+    // Implement a check to determine if the matcher is a vararg matcher
+    // This can be based on the type or some other property of the matcher
+    return matcher instanceof AnyVararg; // Example assumption, adjust as needed
 }
\ No newline at end of file
