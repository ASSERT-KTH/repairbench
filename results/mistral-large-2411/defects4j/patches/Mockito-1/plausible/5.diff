diff --git a/tmp/00a6b501-009d-41f6-8b48-ff20d4810f8f_buggy.java b/tmp/ee0caa17-ebdf-49d9-898c-1fea87ca72e8_fixed.java
index 1c875ad..5211076 100644
--- a/tmp/00a6b501-009d-41f6-8b48-ff20d4810f8f_buggy.java
+++ b/tmp/ee0caa17-ebdf-49d9-898c-1fea87ca72e8_fixed.java
@@ -1,31 +1,29 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+        int length = invocation.getRawArguments().length;
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
+            if (position < length) {
                 if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
-            }
-        }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+                    if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                        Object array = invocation.getRawArguments()[position];
+                        for (int i = 0; i < Array.getLength(array); i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                        }
+                        //since we've captured all varargs already, it does not make sense to process other matchers.
+                        return;
+                    } else {
+                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+                    }
+                }
+            } else if (invocation.getMethod().isVarArgs() && position == length - 1) {
+                if(m instanceof CapturesArguments) {
+                    // Capture from the vararg part
+                    Object array = invocation.getRawArguments()[length - 1];
+                    for (int i = 0; i < Array.getLength(array); i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                    }
+                    return;
+                }
+            }
+        }
     }
\ No newline at end of file
