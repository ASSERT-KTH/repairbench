diff --git a/tmp/bff22c46-872f-499d-b6ed-3f0c1a64a9a4_buggy.java b/tmp/6ab99513-da55-4533-9a2a-a7cbb60f8d83_fixed.java
index 3127f85..06693fd 100644
--- a/tmp/bff22c46-872f-499d-b6ed-3f0c1a64a9a4_buggy.java
+++ b/tmp/6ab99513-da55-4533-9a2a-a7cbb60f8d83_fixed.java
@@ -1,24 +1,26 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+
+        // Handle extreme values explicitly before performing the computation
+        if (x < (mean - 20 * standardDeviation)) {
             return 0;
         } else if (x > (mean + 20 * standardDeviation)) {
             return 1;
         } else {
+            try {
+                return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
+            } catch (MaxIterationsExceededException ex) {
+                // This block is now redundant since extreme values are handled above
                 throw ex;
             }
         }
     }
\ No newline at end of file
