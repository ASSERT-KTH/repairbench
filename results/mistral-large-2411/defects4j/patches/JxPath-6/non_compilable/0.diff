diff --git a/tmp/808f05ce-573c-4fed-89e1-363d5269bfe4_buggy.java b/tmp/7aa3093b-c11d-4b19-9679-95f220a61d0e_fixed.java
index f650982..ef9d1ba 100644
--- a/tmp/808f05ce-573c-4fed-89e1-363d5269bfe4_buggy.java
+++ b/tmp/7aa3093b-c11d-4b19-9679-95f220a61d0e_fixed.java
@@ -1,42 +1,85 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+            Iterator it = (Iterator) l;
+            while (it.hasNext()) {
+                if (equal(it.next(), r)) {
+                    return true;
+                }
+            }
+            return false;
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+            Iterator it = (Iterator) r;
+            while (it.hasNext()) {
+                if (equal(l, it.next())) {
+                    return true;
+                }
+            }
+            return false;
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
+
+    private boolean equal(Object a, Object b) {
+        if (a == null && b == null) {
+            return true;
+        }
+        if (a == null || b == null) {
+            return false;
+        }
+        return a.equals(b);
+    }
+
+    private boolean findMatch(Iterator a, Iterator b) {
+        while (a.hasNext()) {
+            Object aNext = a.next();
+            while (b.hasNext()) {
+                if (equal(aNext, b.next())) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    private boolean contains(Iterator it, Object obj) {
+        while (it.hasNext()) {
+            if (equal(it.next(), obj)) {
+                return true;
+            }
+        }
+        return false;
+    }
\ No newline at end of file
