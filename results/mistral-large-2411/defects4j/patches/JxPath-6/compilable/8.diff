diff --git a/tmp/056054a7-2c8e-4e45-86cc-b90316996d32_buggy.java b/tmp/8420c99c-a057-4749-8934-261b24e0fa6f_fixed.java
index f650982..c592b12 100644
--- a/tmp/056054a7-2c8e-4e45-86cc-b90316996d32_buggy.java
+++ b/tmp/8420c99c-a057-4749-8934-261b24e0fa6f_fixed.java
@@ -1,42 +1,55 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        if (l instanceof Iterator && !(r instanceof Iterator)) {
+            while (((Iterator) l).hasNext()) {
+                if (equal(((Iterator) l).next(), r)) {
+                    return true;
                 }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
             }
+            return false;
+        }
+
+        if (!(l instanceof Iterator) && r instanceof Iterator) {
+            while (((Iterator) r).hasNext()) {
+                if (equal(l, ((Iterator) r).next())) {
+                    return true;
+                }
+            }
+            return false;
+        }
+
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
+
         return equal(l, r);
     }
\ No newline at end of file
