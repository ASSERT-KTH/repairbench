diff --git a/tmp/a7803dae-588c-47a5-b087-ee0b70a6d51a_buggy.java b/tmp/660bcf64-ae35-4b79-9c37-0e92540b7a67_fixed.java
index f650982..82c80c7 100644
--- a/tmp/a7803dae-588c-47a5-b087-ee0b70a6d51a_buggy.java
+++ b/tmp/660bcf64-ae35-4b79-9c37-0e92540b7a67_fixed.java
@@ -1,42 +1,39 @@
-    /**
-     * Compares two values
-     */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
+        // If one value is an Iterator and the other is not, check if the iterator contains the other value.
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
+        // If both are Iterators, check if both iterators contain the same elements.
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
+
+        // If neither is an Iterator, compare the values directly using the `equal` function.
         return equal(l, r);
     }
