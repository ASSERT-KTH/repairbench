diff --git a/tmp/1e56a48e-3947-425b-997f-16b2225dd44e_buggy.java b/tmp/27a8e0ad-3b83-4da6-93af-330cc1495a87_fixed.java
index f650982..821e53a 100644
--- a/tmp/1e56a48e-3947-425b-997f-16b2225dd44e_buggy.java
+++ b/tmp/27a8e0ad-3b83-4da6-93af-330cc1495a87_fixed.java
@@ -1,42 +1,53 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            return iteratorEquals((Iterator) l, (Iterator) r);
         }
-        return equal(l, r);
+        return l != null && l.equals(r);
+    }
+
+    private boolean iteratorEquals(Iterator a, Iterator b) {
+        while (a.hasNext() && b.hasNext()) {
+            Object o1 = a.next();
+            Object o2 = b.next();
+            if (!(o1 == null ? o2 == null : o1.equals(o2))) {
+                return false;
+            }
+        }
+        return !(a.hasNext() || b.hasNext());
     }
\ No newline at end of file
