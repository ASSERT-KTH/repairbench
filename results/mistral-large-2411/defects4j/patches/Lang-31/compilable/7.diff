diff --git a/tmp/d13fd1d1-26b0-495a-a106-2fec79597754_buggy.java b/tmp/7f9acc7a-4280-460f-bcb9-5033aa9b897f_fixed.java
index eea9e73..f4ce65a 100644
--- a/tmp/d13fd1d1-26b0-495a-a106-2fec79597754_buggy.java
+++ b/tmp/7f9acc7a-4280-460f-bcb9-5033aa9b897f_fixed.java
@@ -1,41 +1,29 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
         char ch = cs.charAt(i);
+        if (Character.isHighSurrogate(ch) && i + 1 < csLength) {
+            char low = cs.charAt(i + 1);
+            if (Character.isLowSurrogate(low)) {
+                int codePoint = Character.toCodePoint(ch, low);
+                for (int j = 0; j < searchLength; j++) {
+                    if (searchChars[j] == ch || (j + 1 < searchLength && Character.toCodePoint(searchChars[j], searchChars[j + 1]) == codePoint)) {
+                        return true;
+                    }
+                }
+                i++; // skip the next character as it's part of the surrogate pair
+            }
+        } else {
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
                     return true;
                 }
             }
         }
+    }
     return false;
 }
\ No newline at end of file
