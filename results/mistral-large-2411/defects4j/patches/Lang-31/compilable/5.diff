diff --git a/tmp/25d9542b-0836-4d7f-9425-4107f00a66d2_buggy.java b/tmp/f5b1b706-baab-4c4e-9850-ba821d5bafb9_fixed.java
index eea9e73..303d7ad 100644
--- a/tmp/25d9542b-0836-4d7f-9425-4107f00a66d2_buggy.java
+++ b/tmp/f5b1b706-baab-4c4e-9850-ba821d5bafb9_fixed.java
@@ -1,41 +1,28 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+        int i = 0, j = 0;
+		while (i < csLength) {
+			if (Character.isHighSurrogate(cs.charAt(i)) && i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {
+				char[] testChars = Character.toChars(Character.toCodePoint(cs.charAt(i), cs.charAt(i + 1)));
+				for (j = 0; j < searchLength; j++) {
+					char[] pair = Character.toChars(Character.toCodePoint(searchChars[j], searchChars[j]));
+					if (testChars[0] == pair[0] && testChars[1] == pair[1]) {
 						return true;
 					}
 				}
+				i += 2;
+			} else {
+				for (j = 0; j < searchLength; j++) {
+					if (searchChars[j] == cs.charAt(i)) {
+						return true;
+					}
+				}
+				i++;
+			}
 		}
 		return false;
 	}
\ No newline at end of file
