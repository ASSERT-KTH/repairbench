diff --git a/tmp/723b3030-20b8-4d58-8cfb-99d7deeb0e14_buggy.java b/tmp/ff536924-b55b-4b4f-a6da-18e49223560d_fixed.java
index eea9e73..29ec261 100644
--- a/tmp/723b3030-20b8-4d58-8cfb-99d7deeb0e14_buggy.java
+++ b/tmp/ff536924-b55b-4b4f-a6da-18e49223560d_fixed.java
@@ -1,41 +1,68 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                   = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+		if (cs == null || searchChars == null || cs.length() == 0 || searchChars.length == 0) {
 			return false;
         }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
+        for (int i = 0; i < cs.length(); i++) {
             char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+            if (charIndexInArray(ch, searchChars, 0, searchChars.length) >= 0) {
+                return true;  // high and low should mirror each other
+            }
+            if (i + 1 < cs.length()) {
+                char high = cs.charAt(i);
+                char low = cs.charAt(i + 1);
+                if (Character.isSurrogatePair(high, low) && charIndexInArray(Character.toCodePoint(high, low), searchChars, 0, searchChars.length) >= 0) {
                     return true;
                 }
             }
         }
+
         return false;
 	}
+
+    private static int charIndexInArray(int ch, char[] chArr, int startPos, int endPos) {
+        if (isSupplementary(ch)) {
+            int codePoint = ch;
+            for (int i = startPos; i < endPos - 1; i++) {
+                char high = chArr[i];
+                char low = chArr[i + 1];
+                if (Character.isSurrogatePair(high, low) && Character.toCodePoint(high, low) == codePoint) {
+                    return i;
+                }
+            }
+        } else {
+            for (int i = startPos; i < endPos; i++) {
+                if (chArr[i] == ch) {
+                    return i;
+                }
+            }
+        }
+        return -1;
+    }
+
+    private static boolean isSupplementary(int ch) {
+        return ch >= Character.MIN_SUPPLEMENTARY_CODE_POINT
+            && ch < Character.MAX_CODE_POINT;
+    }
