diff --git a/tmp/d13037d8-0c3d-4bbd-acf9-d370278ada24_buggy.java b/tmp/2050a4ea-e6e4-434a-a40f-af5c8e1eb9ab_fixed.java
index 351a97a..92f1389 100644
--- a/tmp/d13037d8-0c3d-4bbd-acf9-d370278ada24_buggy.java
+++ b/tmp/2050a4ea-e6e4-434a-a40f-af5c8e1eb9ab_fixed.java
@@ -1,18 +1,36 @@
     /**
      * Tests the list for equality with another object (typically also a list).
      *
      * @param obj  the other object (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public boolean equals(Object obj) {
 
-        if (obj == this) {
+        if (this == obj) {
             return true;
         }
-        if (!(obj instanceof ShapeList)) {
+        if (obj == null || getClass() != obj.getClass()) {
             return false;
         }
-        return super.equals(obj);
+        ShapeList that = (ShapeList) obj;
 
+        // Assuming ShapeList contains a list of shapes, compare the lists.
+        // This assumes ShapeList has a getShapes() method returning a List<Shape>.
+        List<Shape> shapes = getShapes();
+        List<Shape> thatShapes = that.getShapes();
+
+        if (shapes.size() != thatShapes.size()) {
+            return false;
+        }
+
+        for (int i = 0; i < shapes.size(); i++) {
+            Shape shape1 = shapes.get(i);
+            Shape shape2 = thatShapes.get(i);
+            if (shape1 == null ? shape2 != null : !shape1.equals(shape2)) {
+                return false;
+            }
+        }
+
+        return true;
     }
\ No newline at end of file
