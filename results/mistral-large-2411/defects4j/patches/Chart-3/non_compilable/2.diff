diff --git a/tmp/7f2ed2a3-c542-44f2-bed1-3a2543a8f6fe_buggy.java b/tmp/b5b983df-b05d-408d-8917-b2fad096cf76_fixed.java
index 388771b..89bb0e1 100644
--- a/tmp/7f2ed2a3-c542-44f2-bed1-3a2543a8f6fe_buggy.java
+++ b/tmp/b5b983df-b05d-408d-8917-b2fad096cf76_fixed.java
@@ -1,37 +1,51 @@
 /**
  * Creates a new timeseries by copying a subset of the data in this time
  * series.
  *
  * @param start  the index of the first time period to copy.
  * @param end  the index of the last time period to copy.
  *
  * @return A series containing a copy of this times series from start until
  *         end.
  *
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
+    // Ensure the 'end' index does not exceed the size of the data list
+    end = Math.min(end, this.data.size() - 1);
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
             }
             catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
+    // Turning off the recalculation since it is handled after initialization
+    copy.setMaximumItemCount(Integer.MAX_VALUE);
+    copy.setMaximumItemAge(Long.MAX_VALUE);
+
+    // Reset min and max values based on the copied data
+    if (!copy.data.isEmpty()) {
+        for (int i = 0; i < copy.data.size(); i++) {
+            TimeSeriesDataItem item = copy.data.get(i);
+            copy.updateBoundsForAddedValue(item.getValue().doubleValue());
+        }
+    }
+
     return copy;
 }
\ No newline at end of file
