diff --git a/tmp/6a5f954d-199e-4010-97fb-8db85c2a4cc0_buggy.java b/tmp/3f0640b9-1f13-450b-99fa-5671e4e5cc9d_fixed.java
index 71189c3..f9bf647 100644
--- a/tmp/6a5f954d-199e-4010-97fb-8db85c2a4cc0_buggy.java
+++ b/tmp/3f0640b9-1f13-450b-99fa-5671e4e5cc9d_fixed.java
@@ -1,46 +1,54 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
 
                     break;
                 }
 
+                // Check if the argument has been set in this option
+                if (option.hasArgument()) {
+                    Object value = commandLine.getValue(option);
+                    if (value != null && option.getArgument() != null) {
+                        option.getArgument().validate(value);
+                    }
+                }
+
                 option.validate(commandLine);
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
