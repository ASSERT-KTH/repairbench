diff --git a/tmp/bfa6654d-d835-4c63-befe-3393a15e2893_buggy.java b/tmp/a366a91f-dd52-4a1d-b130-1a21e6aff280_fixed.java
index 21f64c6..c5c45d3 100644
--- a/tmp/bfa6654d-d835-4c63-befe-3393a15e2893_buggy.java
+++ b/tmp/a366a91f-dd52-4a1d-b130-1a21e6aff280_fixed.java
@@ -1,23 +1,35 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length();
+        if (seqLen == 1) {
             for (int offset = pos; offset < length; offset++) {
+                if (startChar == input[offset]) {
+                    return offset - pos;
+                }
+            }
+        } else {
+            next_seq: for (int offset = pos; offset <= length - seqLen; offset++) {
                 // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+                if (startChar != input[offset]) {
+                    while (++offset <= length - seqLen && startChar != input[offset]) ;
+                }
+
                 int i = offset + 1;
-            int last = i + seq.length()-1;
+                int last = offset + seqLen;
                 if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+                    for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) {
+                        if (i == last) {
                             return offset - pos;
                         }
                     }
+                }
+            }
+        }
         return -1;
     }
\ No newline at end of file
