diff --git a/tmp/c24e5c72-c51a-4fb6-be2d-ec2e86ee6e49_buggy.java b/tmp/3ec0fdbf-6ee4-4835-bd51-802729b7778f_fixed.java
index 2ce28b5..3738143 100644
--- a/tmp/c24e5c72-c51a-4fb6-be2d-ec2e86ee6e49_buggy.java
+++ b/tmp/3ec0fdbf-6ee4-4835-bd51-802729b7778f_fixed.java
@@ -1,72 +1,76 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
             int signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
             signatureLength = in.read(dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+            int tarHeaderLength = in.read(tarheader);
             in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+            if (TarArchiveInputStream.matches(tarheader, tarHeaderLength)) {
                 return new TarArchiveInputStream(in);
             }
             // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
+            if (tarHeaderLength >= 512) {
                 try {
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                     // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+                    TarArchiveEntry entry = tais.getNextEntry();
+                    if (entry != null && entry.getGeneralHeaderDevMajor() != 0) { // Check that it is not just binary data
                         return new TarArchiveInputStream(in);
+                    } else {
+                        throw new ArchiveException("Invalid Tar entry detected.");
+                    }
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well
                     // as IOException
                     // autodetection, simply not a TAR
                     // ignored
                 }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
