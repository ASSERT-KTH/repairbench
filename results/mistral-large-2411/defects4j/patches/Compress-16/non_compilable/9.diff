diff --git a/tmp/541195bf-8e15-404d-aa31-9e10436bb26c_buggy.java b/tmp/ef2c24d3-21f5-40d0-8aa0-5515d6ac3f3d_fixed.java
index 2ce28b5..7035e86 100644
--- a/tmp/541195bf-8e15-404d-aa31-9e10436bb26c_buggy.java
+++ b/tmp/ef2c24d3-21f5-40d0-8aa0-5515d6ac3f3d_fixed.java
@@ -1,72 +1,84 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
-            int signatureLength = in.read(signature);
+            int signatureLength = readFully(in, signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
+            signatureLength = readFully(in, dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+            signatureLength = readFully(in, tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
             // COMPRESS-117 - improve auto-recognition
             if (signatureLength >= 512) {
                 try {
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                     // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+                    TarArchiveEntry entry = tais.getNextEntry();
+                    if (entry == null || !isValidTarHeader(entry)) {
+                        throw new ArchiveException("No Archiver found for the stream signature");
+                    }
                     return new TarArchiveInputStream(in);
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well
                     // as IOException
                     // autodetection, simply not a TAR
                     // ignored
                 }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
+
+    private int readFully(InputStream in, byte[] buffer) throws IOException {
+        int bytesRead = 0;
+        int bytesToRead = buffer.length;
+        while (bytesToRead > 0) {
+            int read = in.read(buffer, bytesRead, bytesToRead);
+            if (read < 0) {
+                break;
+            }
+            bytesRead += read;
+            bytesToRead -= read;
+        }
+        return bytesRead;
+    }
+
+    private boolean isValidTarHeader(TarArchiveEntry entry) {
+        // Add validation logic for Tar header if necessary
+        return entry != null;
+    }
\ No newline at end of file
