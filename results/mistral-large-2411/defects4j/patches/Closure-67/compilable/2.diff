diff --git a/tmp/fcd38e7d-16b3-4626-bc76-14a27df3a487_buggy.java b/tmp/7359ed4e-3e56-4750-b724-2219d4a72fef_fixed.java
index 939f49b..e03991e 100644
--- a/tmp/fcd38e7d-16b3-4626-bc76-14a27df3a487_buggy.java
+++ b/tmp/7359ed4e-3e56-4750-b724-2219d4a72fef_fixed.java
@@ -1,21 +1,25 @@
     private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      Node lhs = assign.getFirstChild();
+      if (lhs != null && NodeUtil.isVarOrSimpleAssignLhs(lhs, assign)
+          && lhs.getType() == Token.GETPROP) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        boolean isChainedProperty = lhs.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+          Node child = lhs.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+          if (child.getType() == Token.STRING
+              && child.getString().equals("prototype")) {
+            return true;
+          }
+        }
+        else{
+          String property = lhs.getString();
+          if (property != null && property.contains("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
