diff --git a/tmp/57a82d0c-07a3-4d2e-86f3-465331b8fad5_buggy.java b/tmp/f42798ed-ec55-421f-94a9-ca3a4e53181f_fixed.java
index 939f49b..f17ed96 100644
--- a/tmp/57a82d0c-07a3-4d2e-86f3-465331b8fad5_buggy.java
+++ b/tmp/f42798ed-ec55-421f-94a9-ca3a4e53181f_fixed.java
@@ -1,21 +1,21 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+          && n.getType() == Token.GETPROP) {
+        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
           Node child = n.getFirstChild().getFirstChild().getNext();
+          Node root = n.getFirstChild();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+          if ((child.getType() == Token.STRING &&
+              child.getString().equals("prototype")) ||
+              (root.getFirstChild().getType() == Token.STRING &&
+              root.getFirstChild().getString().equals("prototype"))) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
