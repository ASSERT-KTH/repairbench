diff --git a/tmp/405f2628-c36b-4c3f-a379-779305371f52_buggy.java b/tmp/79f5bc2c-3d9e-4f77-b2d1-2c33601c17c0_fixed.java
index 939f49b..e9a0166 100644
--- a/tmp/405f2628-c36b-4c3f-a379-779305371f52_buggy.java
+++ b/tmp/79f5bc2c-3d9e-4f77-b2d1-2c33601c17c0_fixed.java
@@ -1,21 +1,28 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
       Node child = n.getFirstChild().getFirstChild().getNext();
 
       if (child.getType() == Token.STRING &&
           child.getString().equals("prototype")) {
+        Node ancestor = n.getFirstChild();
+
+        // Check for alias chain
+        while (ancestor.getType() == Token.GETPROP) {
+          if (ancestor.getFirstChild().getNext().getType() == Token.STRING &&
+              ancestor.getFirstChild().getNext().getString().equals("prototype")) {
             return true;
           }
+          ancestor = ancestor.getFirstChild();
+        }
+      }
     }
   }
 
   return false;
 }
\ No newline at end of file
