diff --git a/tmp/e0b7a4e6-6e4b-4209-8986-42f64a76bf9b_buggy.java b/tmp/39eb4e23-45d7-429f-9951-c677d548e12a_fixed.java
index 72a422c..ee9c65e 100644
--- a/tmp/e0b7a4e6-6e4b-4209-8986-42f64a76bf9b_buggy.java
+++ b/tmp/39eb4e23-45d7-429f-9951-c677d548e12a_fixed.java
@@ -1,51 +1,54 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
+
+    if (index >= seqEnd) {
+        return 0;
+    }
+
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < seqEnd) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+            }
 
             // Check there's more than just an x after the &#
-            }
-
+            if (start < seqEnd) {
                 int end = start;
                 // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+                while (end < seqEnd && input.charAt(end) != ';') {
                     end++;
                 }
 
                 int entityValue;
                 try {
                     if (isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
                 } catch (NumberFormatException nfe) {
                     System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                     return 0;
                 }
 
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);
+            }
+        }
     }
     return 0;
 }
\ No newline at end of file
