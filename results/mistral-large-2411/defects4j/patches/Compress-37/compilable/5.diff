diff --git a/tmp/05e79445-85ea-4b0b-b10e-42fccfeb938e_buggy.java b/tmp/d02fc2be-ce5e-4e65-b7c2-234d4a54fae3_fixed.java
index 4b7e1e4..c9c2d1b 100644
--- a/tmp/05e79445-85ea-4b0b-b10e-42fccfeb938e_buggy.java
+++ b/tmp/d02fc2be-ce5e-4e65-b7c2-234d4a54fae3_fixed.java
@@ -1,52 +1,46 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while((ch = i.read()) != -1) {
                         read++;
                         if (ch == '='){ // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
                             // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
+                            final byte[] rest = new byte[len - read];
                             final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
+                            if (got != (len - read)) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
-                                                          + restLen
+                                                      + (len - read)
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                                          rest.length - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
-                            }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
                 len *= 10;
                 len += ch - '0';
             }
             if (ch == -1){ // EOF
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
