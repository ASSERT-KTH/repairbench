diff --git a/tmp/5db4e1cd-f385-4f7f-a51b-b8cb0cb73513_buggy.java b/tmp/0b8eba1c-3509-4b3c-b4b6-8ea250ce11b6_fixed.java
index b98f0a7..64e7aad 100644
--- a/tmp/5db4e1cd-f385-4f7f-a51b-b8cb0cb73513_buggy.java
+++ b/tmp/0b8eba1c-3509-4b3c-b4b6-8ea250ce11b6_fixed.java
@@ -1,29 +1,33 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+          // Ensure the constructor arguments are inferred correctly
           for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
             scope = traverse(arg, scope);
+            JSType argType = arg.getJSType();
+            if (argType != null) {
+              JSType paramType = ct.getParameterType(arg.getIndex() - 1);
+              if (paramType != null) {
+                arg.setJSType(paramType);
               }
+            }
+          }
+        }
+      }
+    }
+    n.setJSType(type);
     return scope;
   }
\ No newline at end of file
