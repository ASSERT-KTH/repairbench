diff --git a/tmp/5dfd814f-c708-42d3-93fc-cd81d681f3af_buggy.java b/tmp/d4442827-e93f-45c8-8411-7e5e233d1ae3_fixed.java
index b12de99..48affdf 100644
--- a/tmp/5dfd814f-c708-42d3-93fc-cd81d681f3af_buggy.java
+++ b/tmp/d4442827-e93f-45c8-8411-7e5e233d1ae3_fixed.java
@@ -1,52 +1,81 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
     if (t.inGlobalScope()) {
         return;
     }
 
     if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
     }
 
     if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
     }
 
     if (n.isName() && NodeUtil.isLValue(n) &&
         // Be careful of bleeding functions, which create variables
         // in the inner scope, not the scope where the name appears.
         !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordAssignedName(name);
             }
 
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
             }
         }
     } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
         NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode())
                     .recordEscapedQualifiedName(n.getQualifiedName());
             }
         }
+    } else if (n.isVar()) {
+        Node lhs = n.getFirstChild();
+        String name = lhs.getString();
+        Scope scope = t.getScope();
+        Var var = scope.getVar(name);
+        if (var != null) {
+            Scope ownerScope = var.getScope();
+            if (ownerScope.isLocal()) {
+                data.get(ownerScope.getRootNode()).recordAssignedName(name);
+            }
+
+            if (scope != ownerScope && ownerScope.isLocal()) {
+                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+            }
+        }
+    } else if (n.isAssign() && n.getFirstChild().isName()) {
+        String name = n.getFirstChild().getString();
+        Scope scope = t.getScope();
+        Var var = scope.getVar(name);
+        if (var != null) {
+            Scope ownerScope = var.getScope();
+            if (ownerScope.isLocal()) {
+                data.get(ownerScope.getRootNode()).recordAssignedName(name);
+            }
+
+            if (scope != ownerScope && ownerScope.isLocal()) {
+                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+            }
+        }
     }
 }
\ No newline at end of file
