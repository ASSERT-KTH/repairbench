diff --git a/tmp/ef6ef0e6-fd22-4f69-8782-54590ef5350d_buggy.java b/tmp/cffc698c-ee16-4ed6-97ca-4292714ba5c9_fixed.java
index fb2b020..26d0851 100644
--- a/tmp/ef6ef0e6-fd22-4f69-8782-54590ef5350d_buggy.java
+++ b/tmp/cffc698c-ee16-4ed6-97ca-4292714ba5c9_fixed.java
@@ -1,27 +1,25 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
+      // Get the list of own property names of the constraint object.
       for (String prop : constraintObj.getOwnPropertyNames()) {
+        // Get the property type from the constraint object.
         JSType propType = constraintObj.getPropertyType(prop);
+        // Check if the property type is declared on this object.
         if (!isPropertyTypeDeclared(prop)) {
+          // Determine the type to infer.
           JSType typeToInfer = propType;
+          // If this object does not have the property, infer its type.
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+            // Combine the type from the constraint with VOID type.
+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
           }
+          // Define the inferred property on this object.
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
