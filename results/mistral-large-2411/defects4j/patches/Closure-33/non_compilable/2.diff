diff --git a/tmp/1bc33468-82bd-4d30-aa60-092ae87d3072_buggy.java b/tmp/8b989d1e-9650-4bf4-9409-b02e36cf91e2_fixed.java
index fb2b020..cbcd6a1 100644
--- a/tmp/1bc33468-82bd-4d30-aa60-092ae87d3072_buggy.java
+++ b/tmp/8b989d1e-9650-4bf4-9409-b02e36cf91e2_fixed.java
@@ -1,27 +1,30 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
+            ObjectType thisType = this.toMaybeObjectType();
+            if (thisType == null || !thisType.hasProperty(prop)) {
               typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                               .getLeastSupertype(propType);
             }
+          }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
