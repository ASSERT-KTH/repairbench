diff --git a/tmp/4f5d2e2c-4e43-4f05-8716-f0f149e288ff_buggy.java b/tmp/e356a395-9c8b-4cc7-94d4-d4986492c8e1_fixed.java
index 3002587..a67ee54 100644
--- a/tmp/4f5d2e2c-4e43-4f05-8716-f0f149e288ff_buggy.java
+++ b/tmp/e356a395-9c8b-4cc7-94d4-d4986492c8e1_fixed.java
@@ -1,10 +1,43 @@
-    /**
-     * Fits a Gaussian function to the observed points.
-     *
-     * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
-     */
-    public double[] fit() {
-        final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+public double[] fit(final Gaussian.Parametric params) {
+    // Parameter bounds to ensure sigma stays positive.
+    GoalFunction goal = new GaussianCurveFitter.Problem(params, getObservations());
+    SimpleValueChecker checker = new SimpleValueChecker(1e-6, 1e-6, 30);
+
+    PointVectorValuePair optimum = null;
+    try {
+        double[] startPoint = this.getParameters();
+        boolean[] fix = new boolean[startPoint.length];
+        double[] weight = new double[startPoint.length];
+        double[] min = new double[startPoint.length];
+        double[] max = new double[startPoint.length];
+
+        for (int i = 0; i < startPoint.length; ++i) {
+            fix[i] = false;
+            weight[i] = 1.0;
+            min[i] = -Double.MAX_VALUE;
+            max[i] = Double.MAX_VALUE;
+        }
+
+        // Ensuring sigma is strictly positive
+        min[2] = 1e-6;
+
+        PointVectorValuePair opt = optimizer.optimize(new MaxEval(Integer.MAX_VALUE),
+                goal, goal, GoalType.MINIMIZE, new InitialGuess(startPoint), SimpleBounds.unbounded(startPoint.length));
+
+        optimum = optimizer.optimize(new MaxEval(Integer.MAX_VALUE),
+                new MaxIter(1000),
+                goal, goal, GoalType.MINIMIZE,
+                new InitialGuess(startPoint),
+                new SimpleBounds(min, max),
+                fix, weight, checker);
+
+    } catch (Exception e) {
+        e.printStackTrace();
+    }
+
+    if (optimum == null) {
+        throw new MathIllegalArgumentException(LocalizedFormats.NO_DATA);
+    }
+
+    return optimum.getPoint();
 }
\ No newline at end of file
