diff --git a/tmp/2bdaf551-120d-4d4c-9446-effe1eb1623b_buggy.java b/tmp/f1422dd3-a731-4c59-9596-e224ebe6c570_fixed.java
index 7e64f1d..c26572b 100644
--- a/tmp/2bdaf551-120d-4d4c-9446-effe1eb1623b_buggy.java
+++ b/tmp/f1422dd3-a731-4c59-9596-e224ebe6c570_fixed.java
@@ -1,78 +1,80 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
-        List tokens = new ArrayList();
+        List<String> tokens = new ArrayList<>();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
-                String opt = Util.stripLeadingHyphens(arg);
+                String opt = arg.startsWith("--") ? arg.substring(2) : arg.substring(1);
 
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    if (arg.startsWith("--"))
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        int eqIdx = arg.indexOf('=');
+                        if (eqIdx != -1 && options.hasOption(arg.substring(2, eqIdx)))
+                        {
+                            tokens.add(arg.substring(0, eqIdx + 1));
+                            tokens.add(arg.substring(eqIdx + 1));
+                        }
+                        else
+                        {
+                            eatTheRest = stopAtNonOption;
+                            tokens.add(arg);
+                        }
+                    }
+                    else if (arg.startsWith("-"))
+                    {
+                        int eqIdx = arg.indexOf('=');
+                        if (eqIdx != -1 && options.hasOption(arg.substring(1, 2)))
+                        {
+                            tokens.add(arg.substring(0, 2));
+                            tokens.add(arg.substring(2));
+                        }
+                        else
+                        {
+                            eatTheRest = stopAtNonOption;
+                            tokens.add(arg);
+                        }
                     }
                     else
                     {
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
             else
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        return tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
