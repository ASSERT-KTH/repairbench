diff --git a/tmp/fd8b4ade-b8c4-4b96-b877-1b774a3c3043_buggy.java b/tmp/60634f73-17a0-419c-8871-cf90095ce80b_fixed.java
index 7e64f1d..372a248 100644
--- a/tmp/fd8b4ade-b8c4-4b96-b877-1b774a3c3043_buggy.java
+++ b/tmp/60634f73-17a0-419c-8871-cf90095ce80b_fixed.java
@@ -1,78 +1,77 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
                 String opt = Util.stripLeadingHyphens(arg);
 
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
                 else
+                {
+                    boolean handled = false;
+                    int idx = arg.indexOf('=');
+                    if (idx > 0)
+                    {
+                        // if the argument has the format -foo=value or --foo=value
+                        String key = arg.substring(0, idx);
+                        String value = arg.substring(idx + 1);
+
+                        if (options.hasOption(key))
+                        {
+                            tokens.add(key);
+                            tokens.add(value);
+                            handled = true;
+                        }
+                    }
+
+                    if (!handled)
                     {
                         if (options.hasOption(arg.substring(0, 2)))
                         {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
+                            // the format is -Dproperty=value
                             tokens.add(arg.substring(0, 2)); // -D
                             tokens.add(arg.substring(2)); // property=value
                         }
                         else
                         {
                             eatTheRest = stopAtNonOption;
                             tokens.add(arg);
                         }
                     }
                 }
+            }
             else
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
