diff --git a/tmp/b3f6e458-d859-4eb2-a2f7-66c350b54e46_buggy.java b/tmp/9dc07bda-6f75-4442-b857-467707850fd7_fixed.java
index 5f8ac1a..21cd5a7 100644
--- a/tmp/b3f6e458-d859-4eb2-a2f7-66c350b54e46_buggy.java
+++ b/tmp/9dc07bda-6f75-4442-b857-467707850fd7_fixed.java
@@ -1,34 +1,67 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
 
+        // Ensure both pointers are part of the same tree structure
+        if (p1 != null && p2 != null) {
+            if (!ancestorCheck(p1, p2)) {
+                throw new JXPathException(
+                        "Cannot compare pointers that do not belong to the same tree: '"
+                        + p1 + "' and '" + p2 + "'");
+            }
+        }
+
         if (depth1 == 1) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
+
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
+        if (p1.parent == null || p2.parent == null) {
+            throw new JXPathException(
+                    "Cannot compare pointers that do not belong to the same tree: '"
+                            + p1 + "' and '" + p2 + "'");
+        }
+
         return p1.parent.compareChildNodePointers(p1, p2);
     }
+
+    private boolean ancestorCheck(NodePointer p1, NodePointer p2) {
+        NodePointer p1Ancestor = p1.parent;
+        NodePointer p2Ancestor = p2.parent;
+        while (p1Ancestor != null || p2Ancestor != null) {
+            if (p1Ancestor != null && p2Ancestor != null && p1Ancestor.equals(p2Ancestor)) {
+                return true;
+            }
+            if (p1Ancestor != null) {
+                p1Ancestor = p1Ancestor.parent;
+            }
+            if (p2Ancestor != null) {
+                p2Ancestor = p2Ancestor.parent;
+            }
+        }
+        return false;
+    }
\ No newline at end of file
