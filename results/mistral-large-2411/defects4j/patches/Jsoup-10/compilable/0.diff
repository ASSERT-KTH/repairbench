diff --git a/tmp/ba7c6147-e172-445c-9b81-b96ed672772c_buggy.java b/tmp/2c68bc83-4824-41db-bf5b-d6478ac7d8bf_fixed.java
index b4e6f03..6f74a84 100644
--- a/tmp/ba7c6147-e172-445c-9b81-b96ed672772c_buggy.java
+++ b/tmp/2c68bc83-4824-41db-bf5b-d6478ac7d8bf_fixed.java
@@ -1,44 +1,34 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
             URL base;
             try {
                 try {
                     base = new URL(baseUri);
                 } catch (MalformedURLException e) {
                     // the base is unsuitable, but the attribute may be abs on its own, so try that
                     URL abs = new URL(relUrl);
                     return abs.toExternalForm();
                 }
                 // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
+                URL abs = fixRelativeQuery(base, relUrl);
                 return abs.toExternalForm();
             } catch (MalformedURLException e) {
                 return "";
             }
         }
     }
+
+    private URL fixRelativeQuery(URL base, String relUrl) throws MalformedURLException {
+        if (relUrl.startsWith("?")) {
+            String basePath = base.getPath();
+            int queryIndex = base.getQuery() != null ? base.getPath().lastIndexOf(base.getQuery()) : basePath.length();
+            basePath = basePath.substring(0, queryIndex);
+            return new URL(base, basePath + relUrl);
+        }
+        return new URL(base, relUrl);
+    }
\ No newline at end of file
