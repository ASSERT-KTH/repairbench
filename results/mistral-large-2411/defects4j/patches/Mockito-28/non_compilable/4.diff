diff --git a/tmp/fc9a1518-89c5-4692-b670-cd9300cceff8_buggy.java b/tmp/1a280a07-4665-493d-be99-e77e559ed780_fixed.java
index fa6828a..7727315 100644
--- a/tmp/fc9a1518-89c5-4692-b670-cd9300cceff8_buggy.java
+++ b/tmp/1a280a07-4665-493d-be99-e77e559ed780_fixed.java
@@ -1,5 +1,40 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+        // Use a map to track the best matching mock for each field
+        Map<Field, Injectable> bestMatches = new HashMap<>();
+
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            Injectable bestCandidate = null;
+            for (Object mock : mocks) {
+                if (field.getType().isInstance(mock)) {
+                    if (bestCandidate == null || isBetterMatch(bestCandidate, mock, field)) {
+                        bestCandidate = new Injectable(mock, field);
                     }
                 }
+            }
+            if (bestCandidate != null) {
+                bestMatches.put(field, bestCandidate);
+            }
+        }
+
+        for (Injectable injectable : bestMatches.values()) {
+            injectable.inject();
+        }
+    }
+
+    private class Injectable {
+        private final Object mock;
+        private final Field field;
+
+        public Injectable(Object mock, Field field) {
+            this.mock = mock;
+            this.field = field;
+        }
+
+        public void inject() {
+            mockCandidateFilter.filterCandidate(Collections.singleton(mock), field, fieldInstance).thenInject();
+        }
+    }
+
+    private boolean isBetterMatch(Injectable currentBest, Object newCandidate, Field field) {
+        return field.getType().equals(newCandidate.getClass());
+    }
\ No newline at end of file
