diff --git a/tmp/f78f353f-74de-406a-9c9a-9a9afd7da2ba_buggy.java b/tmp/f96308d2-5c0c-4743-bbd4-3275f769f144_fixed.java
index db19f52..befe48a 100644
--- a/tmp/f78f353f-74de-406a-9c9a-9a9afd7da2ba_buggy.java
+++ b/tmp/f96308d2-5c0c-4743-bbd4-3275f769f144_fixed.java
@@ -1,32 +1,34 @@
-    // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            docData = Charset.forName("UTF-8").decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                String foundCharset = meta.hasAttr("http-equiv")
+                        ? getCharsetFromContentType(meta.attr("content"))
+                        : meta.attr("charset");
+                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals("UTF-8")) {
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
+
         if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
-
+            // Remove BOM if present after decoding
+            if (docData.startsWith("\uFEFF")) {
+                docData = docData.substring(1);
+            }
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
+
         return doc;
     }
\ No newline at end of file
