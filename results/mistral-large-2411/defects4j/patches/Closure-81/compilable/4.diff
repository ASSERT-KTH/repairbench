diff --git a/tmp/c74fd6d8-0a20-4353-9e7c-3cfacb9c597f_buggy.java b/tmp/c423a306-70cd-4b5f-96a1-856faaae4e55_fixed.java
index 6e05e4b..e1c5a2c 100644
--- a/tmp/c74fd6d8-0a20-4353-9e7c-3cfacb9c597f_buggy.java
+++ b/tmp/c423a306-70cd-4b5f-96a1-856faaae4e55_fixed.java
@@ -1,51 +1,48 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
       }
       Node node = new Node(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+        // Old Rhino tagged the empty name node with the line number of the declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+        // Same problem as below - the left paren might not be on the same line as the function keyword.
+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
       Node lp = new Node(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
+      // The left paren's complicated because it's not represented by an AstNode,
+      // so there's nothing that has the actual line number that it appeared on.
+      // We know the paren has to appear on the same line as the function name
+      // (or else a semicolon will be inserted.)
+      // If there's no function name, assume the paren was on the same line as the
+      // function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
\ No newline at end of file
