diff --git a/tmp/72ea000e-3844-402b-a85c-fdfd4854dfb1_buggy.java b/tmp/5d101395-a836-492b-ae2e-b9e07cab2e5c_fixed.java
index dc93be3..9071581 100644
--- a/tmp/72ea000e-3844-402b-a85c-fdfd4854dfb1_buggy.java
+++ b/tmp/5d101395-a836-492b-ae2e-b9e07cab2e5c_fixed.java
@@ -1,14 +1,14 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+        if (Tag.valueOf(startTag.name()).isSelfClosing() || startTag.isSelfClosing()) {
             Element el = insertEmpty(startTag);
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            // No need to emit fake end tag for self-closing tags
             return el;
         }
 
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
