diff --git a/tmp/15a8a0f2-c1c8-406c-881f-516a7f33e2d3_buggy.java b/tmp/8ff7c6a8-393a-48f2-90f7-d93fc5dd5ea6_fixed.java
index 61ffdbf..5814a7d 100644
--- a/tmp/15a8a0f2-c1c8-406c-881f-516a7f33e2d3_buggy.java
+++ b/tmp/8ff7c6a8-393a-48f2-90f7-d93fc5dd5ea6_fixed.java
@@ -1,44 +1,43 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
         // The parameters object literal setters can not be removed.
         return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
             && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
+
+    // Check compilation level and avoid stripping unreferenced args for SIMPLE_OPTIMIZATIONS
+    boolean isSimpleOptimization = compiler.getOptions().getCompilationLevel().equals(CompilationLevel.SIMPLE_OPTIMIZATIONS);
+    if (isSimpleOptimization || !modifyCallers) {
+        // Only strip unreferenced args off the end of the function declaration in advanced mode.
+        if (!isSimpleOptimization) {
             Node lastArg;
             while ((lastArg = argList.getLastChild()) != null) {
                 Var var = fnScope.getVar(lastArg.getString());
                 if (!referenced.contains(var)) {
                     argList.removeChild(lastArg);
                     compiler.reportCodeChange();
                 } else {
                     break;
                 }
             }
+        }
     } else {
         callSiteOptimizer.optimize(fnScope, referenced);
     }
 }
\ No newline at end of file
