diff --git a/tmp/10d181a1-1dcc-434c-973e-e1f9feb4aa8f_buggy.java b/tmp/a5c58a01-783e-4d6f-846b-5d2662c01d4e_fixed.java
index b36c3f0..2032417 100644
--- a/tmp/10d181a1-1dcc-434c-973e-e1f9feb4aa8f_buggy.java
+++ b/tmp/a5c58a01-783e-4d6f-846b-5d2662c01d4e_fixed.java
@@ -1,58 +1,60 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+      Node firstChild = nameNode.getFirstChild();
+      Node lastChild = nameNode.getLastChild();
+
+      if (callNode.hasOneChild() && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(lastChild.getString())) {
         return false;
       }
 
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+      if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(firstChild)) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+        if (firstChild.getType() == Token.REGEXP && REGEXP_METHODS.contains(lastChild.getString())) {
           return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+        } else if (firstChild.getType() == Token.STRING
+            && STRING_REGEXP_METHODS.contains(lastChild.getString())) {
           Node param = nameNode.getNext();
           if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+              (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {
             return false;
           }
         }
       }
 
+      // Functions in the "Math" namespace have no side effects.
+      if (firstChild.getType() == Token.NAME && "Math".equals(firstChild.getString()) &&
+          MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(lastChild.getString())) {
+        return false;
+      }
+    }
+
     return true;
   }
\ No newline at end of file
