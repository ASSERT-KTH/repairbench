diff --git a/tmp/36413efe-b7c6-431b-9a02-4c2ce8d38a9a_buggy.java b/tmp/8abffd57-41d9-40b8-93ff-1c841aea2098_fixed.java
index b6b11b6..35f66b6 100644
--- a/tmp/36413efe-b7c6-431b-9a02-4c2ce8d38a9a_buggy.java
+++ b/tmp/8abffd57-41d9-40b8-93ff-1c841aea2098_fixed.java
@@ -1,38 +1,27 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
         if (escapingOn && c[start] == QUOTE) {
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
         int lastHold = start;
         for (int i = pos.getIndex(); i < pattern.length(); i++) {
             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
+                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
                 pos.setIndex(i + ESCAPED_QUOTE.length());
                 lastHold = pos.getIndex();
                 continue;
             }
-            switch (c[pos.getIndex()]) {
+            switch (c[i]) {
             case QUOTE:
-                next(pos);
+                pos.setIndex(i + 1);
                 return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
+                        i - lastHold);
             default:
-                next(pos);
+                break;
             }
         }
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
