diff --git a/tmp/717d51b9-9deb-4662-af71-2091fd0e43bb_buggy.java b/tmp/cf1878e1-6077-4be1-aef4-11257e8fd1e0_fixed.java
index e087f95..65f6af5 100644
--- a/tmp/717d51b9-9deb-4662-af71-2091fd0e43bb_buggy.java
+++ b/tmp/cf1878e1-6077-4be1-aef4-11257e8fd1e0_fixed.java
@@ -1,53 +1,48 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("The length must be at least 2 bytes.");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+        for (int i = offset; i < end; i++) {
             final byte currentByte = buffer[i];
+
             if (currentByte == 0) {
-                break;
+                // Trailing NUL found
+                if (!stillPadding) {
+                    return result;
+                }
+                continue;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
             if (currentByte == (byte) ' ') {
-                break;
+                if (stillPadding) {
+                    continue;
+                } else {
+                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset, currentByte));
                 }
             }
 
             // Must have trailing NUL or space
-        // May have additional NUL or space
+            if (i == end - 1 && (currentByte == (byte) ' ' || currentByte == 0)) {
+                return result;
+            }
 
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+            // Check for valid octal digits
             if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset, currentByte));
             }
+
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
         }
 
-        return result;
+        // If we reach the end without finding a trailing NUL or space
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, offset, buffer[end - 1]));
     }
\ No newline at end of file
