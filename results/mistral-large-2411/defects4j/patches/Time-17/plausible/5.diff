diff --git a/tmp/227c7fcb-91e6-423a-b5d2-e456f8191297_buggy.java b/tmp/d60b305a-426e-46b1-ba8f-8f16b662df55_fixed.java
index 03b03d7..79eed00 100644
--- a/tmp/227c7fcb-91e6-423a-b5d2-e456f8191297_buggy.java
+++ b/tmp/d60b305a-426e-46b1-ba8f-8f16b662df55_fixed.java
@@ -1,25 +1,23 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      *
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long instantBefore = convertLocalToUTC(convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR), false);
+        long instantAfter = convertLocalToUTC(convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR), true);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
 
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long after = convertLocalToUTC(local, false, instantAfter);
+        long before = convertLocalToUTC(local, false, instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // return the appropriate instant
+        return earlierOrLater ? after : before;
     }
\ No newline at end of file
