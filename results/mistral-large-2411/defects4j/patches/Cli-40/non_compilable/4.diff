diff --git a/tmp/5ad2579d-747e-4f44-ae55-44996e594fee_buggy.java b/tmp/5ed91ebc-ef9e-4b3b-ae9a-096043e87f88_fixed.java
index a7d0787..1c67636 100644
--- a/tmp/5ad2579d-747e-4f44-ae55-44996e594fee_buggy.java
+++ b/tmp/5ed91ebc-ef9e-4b3b-ae9a-096043e87f88_fixed.java
@@ -1,54 +1,35 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+    if (clazz == String.class) {
         return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    } else if (clazz == Object.class) {
         return (T) createObject(str);
+    } else if (Number.class.isAssignableFrom(clazz)) {
+        try {
+            // Assume createNumber method returns a Number
+            Number number = createNumber(str);
+            if (clazz.isInstance(number)) {
+                return (T) number;
+            } else {
+                throw new ParseException("Cannot parse value: " + str);
             }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
-            return (T) createNumber(str);
+        } catch (Exception e) {
+            throw new ParseException("Cannot parse value: " + str, e);
         }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    } else if (clazz == Date.class) {
         return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    } else if (clazz == Class.class) {
         return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    } else if (clazz == File.class) {
         return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    } else if (ExistingFileValueChecker.class.equals(clazz)) { // Assume an ExistingFileValueChecker class exists
         return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    } else if (clazz == List.class) {
         return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    } else if (clazz == URL.class) {
         return (T) createURL(str);
-        }
-        else
-        {
-            return null;
+    } else {
+        throw new ParseException("Unsupported class: " + clazz.getName());
     }
 }
\ No newline at end of file
