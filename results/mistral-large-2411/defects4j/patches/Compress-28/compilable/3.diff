diff --git a/tmp/8a6bd681-b678-463d-8491-f659de721e5b_buggy.java b/tmp/7b27ba12-4b44-42b5-b15a-35707c42b406_fixed.java
index 0f439b3..68c69fb 100644
--- a/tmp/8a6bd681-b678-463d-8491-f659de721e5b_buggy.java
+++ b/tmp/7b27ba12-4b44-42b5-b15a-35707c42b406_fixed.java
@@ -1,38 +1,48 @@
 /**
  * Reads bytes from the current tar archive entry.
  *
  * This method is aware of the boundaries of the current
  * entry in the archive and will deal with them as if they
  * were this stream's start and EOF.
  *
  * @param buf The buffer into which to place bytes read.
  * @param offset The offset at which to place bytes read.
  * @param numToRead The number of bytes to read.
  * @return The number of bytes read, or -1 at EOF.
  * @throws IOException on error
  */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
     int totalRead = 0;
 
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
     numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
+    while (totalRead < numToRead) {
+        int read = is.read(buf, offset + totalRead, numToRead - totalRead);
+        if (read == -1) {
+            if (totalRead == 0) {
+                totalRead = read;
+            }
+            break;
+        }
+        totalRead += read;
+    }
+
     count(totalRead);
 
     if (totalRead == -1) {
         hasHitEOF = true;
     } else {
         entryOffset += totalRead;
     }
 
     return totalRead;
 }
\ No newline at end of file
