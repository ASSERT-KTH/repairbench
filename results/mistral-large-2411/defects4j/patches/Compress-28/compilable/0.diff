diff --git a/tmp/7cf980ec-7aae-451b-8ae2-556f145b31e4_buggy.java b/tmp/c13e63db-a0cf-488e-9b66-95e15116ab57_fixed.java
index 0f439b3..7dbc687 100644
--- a/tmp/7cf980ec-7aae-451b-8ae2-556f145b31e4_buggy.java
+++ b/tmp/c13e63db-a0cf-488e-9b66-95e15116ab57_fixed.java
@@ -1,38 +1,44 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
         int totalRead = 0;
 
-        if (hasHitEOF || entryOffset >= entrySize) {
-            return -1;
-        }
-
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
-        numToRead = Math.min(numToRead, available());
+        if (hasHitEOF || entryOffset >= entrySize) {
+            long skipped = is.skip(entrySize - entryOffset);
+            if (skipped != entrySize - entryOffset) {
+                throw new IOException("Failed to skip to the end of truncated entry");
+            }
+            entryOffset = entrySize;
+            return -1;
+        }
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
-        if (totalRead == -1) {
+        numToRead = Math.min(numToRead, (int)(entrySize - entryOffset));
+        int bytesRead;
+        while (totalRead < numToRead) {
+            bytesRead = is.read(buf, offset + totalRead, numToRead - totalRead);
+            if (bytesRead == -1) {
                 hasHitEOF = true;
-        } else {
-            entryOffset += totalRead;
+                break;
+            }
+            totalRead += bytesRead;
+            entryOffset += bytesRead;
         }
 
-        return totalRead;
+        return totalRead == 0 ? -1 : totalRead;
     }
\ No newline at end of file
