diff --git a/tmp/2203b536-5327-40fd-bd75-f6ccfbc3b139_buggy.java b/tmp/60121e83-a606-42cc-935f-5328f093cfeb_fixed.java
index 0f439b3..aabf99a 100644
--- a/tmp/2203b536-5327-40fd-bd75-f6ccfbc3b139_buggy.java
+++ b/tmp/60121e83-a606-42cc-935f-5328f093cfeb_fixed.java
@@ -1,38 +1,47 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
         int totalRead = 0;
 
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
-        numToRead = Math.min(numToRead, available());
+        long remaining = entrySize - entryOffset;
+        if (remaining == 0) {
+            return -1;
+        }
+
+        numToRead = Math.min(numToRead, (int) Math.min(numToRead, remaining));
 
         totalRead = is.read(buf, offset, numToRead);
         count(totalRead);
 
         if (totalRead == -1) {
             hasHitEOF = true;
         } else {
             entryOffset += totalRead;
         }
 
+        if (entryOffset > entrySize) {
+            throw new IOException("Entry is truncated (entry ends at " + entrySize + " but reached offset " + entryOffset + ")");
+        }
+
         return totalRead;
     }
\ No newline at end of file
