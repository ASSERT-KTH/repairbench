diff --git a/tmp/f5d41d66-0841-4921-bb35-29f43affd422_buggy.java b/tmp/82c6009d-e042-4b74-9e65-0c786f8a4891_fixed.java
index 229b3e7..f6cc5e5 100644
--- a/tmp/f5d41d66-0841-4921-bb35-29f43affd422_buggy.java
+++ b/tmp/82c6009d-e042-4b74-9e65-0c786f8a4891_fixed.java
@@ -1,55 +1,37 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        // Check if there is enough space for the description after indentation
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
             throw new IllegalStateException("Total width is less than the width of the argument and indent " +
                                             "- no room for the description");
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // all following lines must be padded with nextLineTabStop space characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            text = text.substring(pos).trim();
+            pos = findWrapPos(text, width - nextLineTabStop, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                sb.append(padding).append(text);
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
