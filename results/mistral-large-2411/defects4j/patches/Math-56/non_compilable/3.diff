diff --git a/tmp/82bc1589-d63f-468b-8cbe-b73ebb5a5ad1_buggy.java b/tmp/d6c1db99-5523-4a9f-9e8f-761c2c82fda3_fixed.java
index 2608424..0a483ac 100644
--- a/tmp/82bc1589-d63f-468b-8cbe-b73ebb5a5ad1_buggy.java
+++ b/tmp/d6c1db99-5523-4a9f-9e8f-761c2c82fda3_fixed.java
@@ -1,39 +1,29 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+        int count = index;
+        for (int i = 0; i < dimension; i++) {
+            indices[i] = count;
+            count /= ranges[i];
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
+        for (int i = dimension - 1; i >= 0; i--) {
+            indices[i] = count % ranges[i];
+            count /= ranges[i];
         }
-        --idx;
-        indices[last] = idx;
 
         return indices;
     }
\ No newline at end of file
