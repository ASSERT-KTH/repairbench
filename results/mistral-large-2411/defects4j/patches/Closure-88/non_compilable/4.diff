diff --git a/tmp/08e1a35c-1ceb-4dc4-afad-d0ba21a3aa17_buggy.java b/tmp/faeb7e8e-d7ff-4e75-91dd-fcabc6599c22_fixed.java
index 9353941..1c0a2e6 100644
--- a/tmp/08e1a35c-1ceb-4dc4-afad-d0ba21a3aa17_buggy.java
+++ b/tmp/faeb7e8e-d7ff-4e75-91dd-fcabc6599c22_fixed.java
@@ -1,30 +1,38 @@
   /**
-   * Give an expression and a variable. It returns READ, if the first
+   * Given an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
+    if (NodeUtil.isAssignment(n.getParent())) {
+      // Special handling for assignment expressions
+      VariableLiveness state = isVariableReadBeforeKill(n.getParent().getFirstChild(), variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state;
+      }
+    }
+
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
