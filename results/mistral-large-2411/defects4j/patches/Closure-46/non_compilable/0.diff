diff --git a/tmp/eabc1722-18e8-4b70-8fa0-59ce867152f3_buggy.java b/tmp/bdee73b8-faac-4f41-82c2-ef45c11cf8ac_fixed.java
index 46817a7..9557f9c 100644
--- a/tmp/eabc1722-18e8-4b70-8fa0-59ce867152f3_buggy.java
+++ b/tmp/bdee73b8-faac-4f41-82c2-ef45c11cf8ac_fixed.java
@@ -1,16 +1,23 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> unionProperties = new HashSet<>(this.getProperties());
+    unionProperties.addAll(that.toMaybeRecordType().getProperties());
+    for (String property : unionProperties) {
+      JSType thisPropertyType = this.getPropertyType(property);
+      JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+      if (thisPropertyType != null && thatPropertyType != null) {
+        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {
+          builder.addProperty(property, thisPropertyType, this.getPropertyNode(property));
         }
+      } else if (thisPropertyType != null) {
+        builder.addProperty(property, thisPropertyType, this.getPropertyNode(property));
+      } else if (thatPropertyType != null) {
+        builder.addProperty(property, thatPropertyType, that.toMaybeRecordType().getPropertyNode(property));
       }
-    return builder.build();
+    }
+    return registry.createUnionType(this, builder.build());
   }
\ No newline at end of file
