diff --git a/tmp/a4a8a1c5-995b-4b28-96fc-7edcee1e7371_buggy.java b/tmp/5af680d6-d6bc-4c23-9fc9-3b117eab76e8_fixed.java
index 46817a7..53dc038 100644
--- a/tmp/a4a8a1c5-995b-4b28-96fc-7edcee1e7371_buggy.java
+++ b/tmp/5af680d6-d6bc-4c23-9fc9-3b117eab76e8_fixed.java
@@ -1,16 +1,33 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> commonProperties = new HashSet<>(properties.keySet());
+    commonProperties.retainAll(that.toMaybeRecordType().getProperties().keySet());
+
+    for (String property : commonProperties) {
+      JSType propertyType = getPropertyType(property);
+      JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+      if (propertyType.isEquivalentTo(thatPropertyType)) {
+        builder.addProperty(property, propertyType, getPropertyNode(property));
+      } else {
+        builder.addProperty(property, propertyType.getLeastSupertype(thatPropertyType), getPropertyNode(property));
       }
     }
+
+    Set<String> remainingProperties = new HashSet<>(properties.keySet());
+    remainingProperties.removeAll(commonProperties);
+    for (String property : remainingProperties) {
+      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
+    }
+
+    remainingProperties = new HashSet<>(that.toMaybeRecordType().getProperties().keySet());
+    remainingProperties.removeAll(commonProperties);
+    for (String property : remainingProperties) {
+      builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyNode(property));
+    }
+
     return builder.build();
   }
\ No newline at end of file
