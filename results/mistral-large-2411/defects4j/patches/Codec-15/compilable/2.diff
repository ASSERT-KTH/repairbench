diff --git a/tmp/4439d304-4b56-4b9e-8a0c-e6ee201f40e8_buggy.java b/tmp/852ec7bc-b6ce-4d9a-9515-d24563e8ae09_fixed.java
index b529d33..0aeebfc 100644
--- a/tmp/4439d304-4b56-4b9e-8a0c-e6ee201f40e8_buggy.java
+++ b/tmp/852ec7bc-b6ce-4d9a-9515-d24563e8ae09_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Used internally by the Soundex algorithm.
      *
      * Consonants from the same code group separated by W or H are treated as one.
      *
      * @param str
      *                  the cleaned working string to encode (in upper case).
      * @param index
      *                  the character position to encode
      * @return Mapping code for a particular character
      * @throws IllegalArgumentException
      *                  if the character is not mapped
      */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
         if (index > 1 && mappedChar != '0') {
             final char hwChar = str.charAt(index - 1);
             if ('H' == hwChar || 'W' == hwChar) {
                 final char preHWChar = str.charAt(index - 2);
                 final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+                // Corrected condition to avoid wrongly returning 0 for valid cases
+                if (firstCode == mappedChar && preHWChar != 'H' && preHWChar != 'W') {
                     return 0;
                 }
             }
         }
         return mappedChar;
     }
\ No newline at end of file
