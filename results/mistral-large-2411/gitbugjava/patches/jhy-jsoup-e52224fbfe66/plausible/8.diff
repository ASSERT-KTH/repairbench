diff --git a/tmp/1b6f344c-22c1-4469-bced-08b19adde5de_buggy.java b/tmp/c7d39a4a-e7a7-4655-aec4-036339570bb1_fixed.java
index acd5eb5..66c6374 100644
--- a/tmp/1b6f344c-22c1-4469-bced-08b19adde5de_buggy.java
+++ b/tmp/c7d39a4a-e7a7-4655-aec4-036339570bb1_fixed.java
@@ -1,32 +1,34 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
                 || (prev instanceof Element && ((Element) prev).isBlock())
                 ;
             if (couldSkip && isBlank) return;
 
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            boolean shouldIndent =
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock())
+                    || (siblingIndex == 0 && isNode(parentNode, "br")) // special case to wrap <br> inside block tags
+                    || (out.outline() && siblingNodes().size() > 0)
+                    || (siblingIndex > 0 && isNode(prev, "br")); // special case wrap on inline <br> - doesn't make sense as a block tag
+
+            if (shouldIndent && !isBlank)
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
