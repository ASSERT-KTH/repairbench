diff --git a/tmp/45d2da08-4281-444c-8748-2fe2459b502b_buggy.java b/tmp/1e85f86f-e3c0-4856-98f0-faa745ad8884_fixed.java
index 855afa5..7a01bb9 100644
--- a/tmp/45d2da08-4281-444c-8748-2fe2459b502b_buggy.java
+++ b/tmp/1e85f86f-e3c0-4856-98f0-faa745ad8884_fixed.java
@@ -1,13 +1,46 @@
 static URL encodeUrl(URL u) {
     u = punyUrl(u);
     try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
+        // Need to encode the query part separately to handle spaces within the query parameter values
+        String urlS = u.toExternalForm();
         urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
+
+        URI uri = new URI(urlS);
+        String query = uri.getQuery();
+
+        if (query != null) {
+            StringBuilder sb = new StringBuilder();
+            String[] queryParams = query.split("&");
+            for (String param : queryParams) {
+                String[] keyValue = param.split("=");
+                if (keyValue.length == 2) {
+                    sb.append(keyValue[0]).append("=").append(encodeValue(keyValue[1])).append("&");
+                } else {
+                    sb.append(encodeValue(keyValue[0])).append("&");
+                }
+            }
+            // Remove the trailing '&' if present
+            if (sb.length() > 0 && sb.charAt(sb.length() - 1) == '&') {
+                sb.setLength(sb.length() - 1);
+            }
+            query = sb.toString();
+
+            // Reconstruct the URI with the encoded query
+            uri = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), query, uri.getFragment());
+        }
+
         return new URL(uri.toASCIIString());
     } catch (URISyntaxException | MalformedURLException e) {
         // give up and return the original input
         return u;
     }
 }
+
+private static String encodeValue(String value) {
+    try {
+        return URLEncoder.encode(value, "UTF-8").replace("+", "%20");
+    } catch (UnsupportedEncodingException e) {
+        // This should never happen since UTF-8 is guaranteed to be supported
+        throw new RuntimeException(e);
+    }
+}
\ No newline at end of file
