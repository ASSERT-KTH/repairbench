diff --git a/tmp/e1aed20b-c4d7-4d77-9667-d0e3d2f63a2c_buggy.java b/tmp/256839dc-f62f-4f61-87dc-67d3915f0b69_fixed.java
index 9739964..c181411 100644
--- a/tmp/e1aed20b-c4d7-4d77-9667-d0e3d2f63a2c_buggy.java
+++ b/tmp/256839dc-f62f-4f61-87dc-67d3915f0b69_fixed.java
@@ -1,27 +1,36 @@
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
       while (!indexStack.isEmpty()
           && prices[indexStack.peek()] <= prices[i])
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
+      // is greater than or equal to all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
-        spans[i] = i - indexStack.peek();
+        spans[i] = i - indexStack.peek(); // This will get the span length from the current value to the previous value in the stack
 
       indexStack.push(i);
     }
 
+    // Manually adjust the span calculation to avoid overcounting
+    for (int i = 1; i < prices.length; i++) {
+      if (prices[i] < prices[i - 1]) {
+        spans[i] = 1;
+      } else if (prices[i] == prices[i - 1]) {
+        spans[i] = spans[i - 1];
+      }
+    }
+
     return spans;
   }
\ No newline at end of file
