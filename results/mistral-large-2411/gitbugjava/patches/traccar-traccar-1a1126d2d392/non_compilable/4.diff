diff --git a/tmp/939eaec6-6e80-4e4e-b1a1-31a42ed785de_buggy.java b/tmp/ce3c2674-0a77-440b-9ebb-33c32f0eb2d8_fixed.java
index 2a0dceb..3cad09d 100644
--- a/tmp/939eaec6-6e80-4e4e-b1a1-31a42ed785de_buggy.java
+++ b/tmp/ce3c2674-0a77-440b-9ebb-33c32f0eb2d8_fixed.java
@@ -1,68 +1,63 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
     String type = values[index++].substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
-            int lac, rssi;
-            if (i == 0) {
-                rssi = Integer.parseInt(values[index++]);
-                lac = Integer.parseInt(values[index++]);
-            } else {
-                lac = Integer.parseInt(values[index++]);
-                rssi = Integer.parseInt(values[index++]);
-            }
-            index += 1; // timing advance
+        int lac = Integer.parseInt(values[index++]);
+        int rssi = Integer.parseInt(values[index++]);
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
     if (values[index].length() == 3) {
         index += 1; // collaborative network
     }
 
+    // Handle date parsing correctly
+    String dateValue = values[index++] + values[index++];
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+    position.setTime(dateFormat.parse(dateValue));
 
     position.setLatitude(Double.parseDouble(values[index++]));
     position.setLongitude(Double.parseDouble(values[index++]));
     position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
     position.setCourse(Double.parseDouble(values[index++]));
 
     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
     position.setValid(values[index++].equals("1"));
 
     return position;
 }
\ No newline at end of file
