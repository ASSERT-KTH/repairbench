diff --git a/tmp/b3381559-1e5f-4722-9edd-faff283331db_buggy.java b/tmp/4dc1494e-933a-4f94-8b62-32d568a9349b_fixed.java
index 3da904d..920b8b6 100644
--- a/tmp/b3381559-1e5f-4722-9edd-faff283331db_buggy.java
+++ b/tmp/4dc1494e-933a-4f94-8b62-32d568a9349b_fixed.java
@@ -1,73 +1,124 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
         String[] values = parser.next().split(",");
         int index = 0;
 
         Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+        int cellCount = 0;
+        try {
+            cellCount = Integer.parseInt(values[index++]);
+        } catch (NumberFormatException e) {
+            // Handle the invalid number format by setting cellCount to 0
+            cellCount = 0;
+        }
+
         if (cellCount > 0) {
             index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            int mcc = 0;
+            int mnc = 0;
+
+            try {
+                if (!values[index].isEmpty()) {
+                    mcc = Integer.parseInt(values[index]);
+                    index++;
+                }
+
+                if (!values[index].isEmpty()) {
+                    mnc = Integer.parseInt(values[index]);
+                    index++;
+                }
+            } catch (NumberFormatException e) {
+                // Handle the invalid number format by setting mcc and mnc to 0
+                mcc = 0;
+                mnc = 0;
+            }
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
+                int lac = 0;
+                int cid = 0;
+                String rssi = "";
+
+                try {
+                    lac = Integer.parseInt(values[index++]);
+                    cid = Integer.parseInt(values[index++]);
+                    rssi = values[index++];
+                } catch (NumberFormatException e) {
+                    // Handle the invalid number format by setting lac, cid, and rssi to default values
+                    lac = 0;
+                    cid = 0;
+                    rssi = "";
+                }
+
                 if (!rssi.isEmpty()) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
 
         if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+            int wifiCount = 0;
+            try {
+                wifiCount = Integer.parseInt(values[index++]);
+            } catch (NumberFormatException e) {
+                // Handle the invalid number format by setting wifiCount to 0
+                wifiCount = 0;
+            }
 
             for (int i = 0; i < wifiCount; i++) {
                 index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
+                String macAddress = "";
+                String rssi = "";
+
+                try {
+                    macAddress = values[index++];
+                    rssi = values[index++];
+                } catch (ArrayIndexOutOfBoundsException e) {
+                    // Handle the invalid array index by setting macAddress and rssi to default values
+                    macAddress = "";
+                    rssi = "";
+                }
+
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                 }
             }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
