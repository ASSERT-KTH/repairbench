diff --git a/tmp/74c0149a-4dce-4656-a11f-14ddcec1a9c9_buggy.java b/tmp/a00414f1-b51d-4e20-aac3-811b223bd621_fixed.java
index 47a8941..6322121 100644
--- a/tmp/74c0149a-4dce-4656-a11f-14ddcec1a9c9_buggy.java
+++ b/tmp/a00414f1-b51d-4e20-aac3-811b223bd621_fixed.java
@@ -1,53 +1,43 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
 	JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 	JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
 	Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 	if (grandParent.isClass()) {
-			// Element class should be added as its container child:
 		JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 		writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 		classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+	} else {
 		JPackage grandParentPackage = (JPackage) grandParent;
 
 		writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 		classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
 		setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 		for (ClassOutline classOutline : outline.getClasses()) {
 			if (classOutline.implClass == clazz) {
 				XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
 				assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
 				setPrivateField(sc, "anonymous", Boolean.FALSE);
 
 				break;
 			}
 		}
 	}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+	String originalName = clazz.name();
+	if (classes.containsKey(originalName)) {
+		writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + originalName);
+		setPrivateField(clazz, "name", parent.name() + originalName);
 	}
 
 	classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
 	setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
