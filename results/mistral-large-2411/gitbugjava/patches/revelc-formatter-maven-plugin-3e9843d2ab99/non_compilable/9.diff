diff --git a/tmp/b60747fb-3901-480c-9cb9-8fbbbdf370be_buggy.java b/tmp/b5cdca88-b2fd-473c-bdeb-b3e65bdbc59c_fixed.java
index 1098336..6729432 100644
--- a/tmp/b60747fb-3901-480c-9cb9-8fbbbdf370be_buggy.java
+++ b/tmp/b5cdca88-b2fd-473c-bdeb-b3e65bdbc59c_fixed.java
@@ -1,16 +1,30 @@
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
 
         final var source = new InputSource(new StringReader(code));
         final var parser = new CSSOMParser(new SACParserCSS3());
-        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
+        // Adjusted for increasing robustness and correctness
+        final StringReader adjustedReader = new StringReader(adjustLineEndings(code, ending));
+        final InputSource adjustedSource = new InputSource(adjustedReader);
+        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(adjustedSource, null, null);
         var formattedCode = sheet.getCssText(this.formatter);
 
         // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
         formattedCode = formattedCode.replace("\t;", "\\9;");
 
         if (code.equals(formattedCode)) {
             return null;
         }
         return formattedCode;
     }
+
+    // Helper method to adjust line endings based on the provided LineEnding enum
+    private String adjustLineEndings(String code, LineEnding ending) {
+        if (ending == LineEnding.LF) {
+            return code.replace("\r\n", "\n").replace("\r", "\n");
+        } else if (ending == LineEnding.CRLF) {
+            return code.replace("\n", "\r\n").replace("\r\r\n", "\r\n");
+        }
+        // Default to LF if the ending is unknown
+        return code.replace("\r\n", "\n").replace("\r", "\n");
+    }
\ No newline at end of file
