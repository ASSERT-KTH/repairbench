diff --git a/tmp/48aeb97b-2593-4e08-a0f5-5bb4fe5fd305_buggy.java b/tmp/b04f3b92-3e6f-4902-8df4-ef1f884a5291_fixed.java
index d27c40c..1ac1b27 100644
--- a/tmp/48aeb97b-2593-4e08-a0f5-5bb4fe5fd305_buggy.java
+++ b/tmp/b04f3b92-3e6f-4902-8df4-ef1f884a5291_fixed.java
@@ -1,49 +1,73 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    // Check for special case where both x and y are zero
+    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {
+        double signumX = Double.signum(x[xOffset]);
+        double signumY = Double.signum(y[yOffset]);
+
+        if (signumX > 0) {
+            if (signumY > 0) {
+                // Both are positive zero
+                result[resultOffset] = 0.0;
+            } else {
+                // x is positive zero, y is negative zero
+                result[resultOffset] = FastMath.PI;
+            }
+        } else {
+            if (signumY > 0) {
+                // x is negative zero, y is positive zero
+                result[resultOffset] = -FastMath.PI;
+            } else {
+                // Both are negative zero
+                result[resultOffset] = -FastMath.PI;
+            }
+        }
+
+        // Propagate the same result to all elements in the result array
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = result[resultOffset];
+        }
+        return;
+    }
+
     // compute r = sqrt(x^2 + y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
     if (x[xOffset] >= 0) {
 
-            // compute atan2(y, x) = 2 atan(y / (r + x))
+        // compute atan2(y, x) = 2 * atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r + x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
 
     } else {
 
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
+        // compute atan2(y, x) = +/- pi - 2 * atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
         result[resultOffset] =
                 ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
             result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
         }
 
     }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+    // Propagate the sign correctly for special cases
+    for (int i = 0; i < getSize(); ++i) {
+        if (result[resultOffset + i] == 0.0) {
+            result[resultOffset + i] = Double.signum(result[resultOffset + i]) * 0.0;
+        }
+    }
 }
\ No newline at end of file
