diff --git a/tmp/d4972aea-c06f-41f7-afe3-8b753d89dcde_buggy.java b/tmp/77d26efb-8420-4505-866e-19e00c2f7e08_fixed.java
index d27c40c..6f508e0 100644
--- a/tmp/d4972aea-c06f-41f7-afe3-8b753d89dcde_buggy.java
+++ b/tmp/77d26efb-8420-4505-866e-19e00c2f7e08_fixed.java
@@ -1,49 +1,49 @@
     /** Compute two arguments arc tangent of a derivative structure.
      * @param y array holding the first operand
      * @param yOffset offset of the first operand in its array
      * @param x array holding the second operand
      * @param xOffset offset of the second operand in its array
      * @param result array where result must be stored (for
      * two arguments arc tangent the result array <em>cannot</em>
      * be the input array)
      * @param resultOffset offset of the result in its array
      */
     public void atan2(final double[] y, final int yOffset,
                       final double[] x, final int xOffset,
                       final double[] result, final int resultOffset) {
 
         // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
         double[] tmp2 = new double[getSize()];
         multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
+        for (int i = 0; i < getSize(); i++) {
+            double xi = x[xOffset + i];
+            double yi = y[yOffset + i];
+            double ri = tmp1[i];
 
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+            if (xi == 0.0 && yi == 0.0) {
+                // Handle special cases where both x and y are zero
+                if (xi < 0.0) {
+                    result[resultOffset + i] = (yi > 0.0) ? FastMath.PI : -FastMath.PI;
+                } else {
+                    result[resultOffset + i] = 0.0;
                 }
-
+            } else if (xi >= 0.0) {
+                // compute atan2(y, x) = 2 * atan(y / (r + x))
+                double rPlusX = ri + xi;
+                double yOverRPlusX = yi / rPlusX;
+                double atanVal = FastMath.atan(yOverRPlusX);
+                result[resultOffset + i] = 2 * atanVal;
             } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+                // compute atan2(y, x) = +/- pi - 2 * atan(y / (r - x))
+                double rMinusX = ri - xi;
+                double yOverRMinusX = yi / rMinusX;
+                double atanVal = FastMath.atan(yOverRMinusX);
+                result[resultOffset + i] = (yi < 0.0) ? -FastMath.PI - 2 * atanVal : FastMath.PI - 2 * atanVal;
             }
-
         }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
     }
\ No newline at end of file
