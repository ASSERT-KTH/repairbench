diff --git a/tmp/d7fcdf8c-621e-4f06-8a73-0dd6457309a0_buggy.java b/tmp/a99658be-1db0-4eb1-9a07-ce37a1ca1de3_fixed.java
index d27c40c..8f65cd6 100644
--- a/tmp/d7fcdf8c-621e-4f06-8a73-0dd6457309a0_buggy.java
+++ b/tmp/a99658be-1db0-4eb1-9a07-ce37a1ca1de3_fixed.java
@@ -1,49 +1,33 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
-        // compute r = sqrt(x^2+y^2)
-        double[] tmp1 = new double[getSize()];
-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
-        double[] tmp2 = new double[getSize()];
-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
+    final int n = getSize();
 
-        if (x[xOffset] >= 0) {
+    for (int i = 0; i < n; i++) {
+        double xi = x[xOffset + i];
+        double yi = y[yOffset + i];
+        double r = Math.hypot(xi, yi);
 
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+        if (r == 0.0) {
+            result[resultOffset + i] = 0.0;
+            continue;
         }
 
+        if (xi >= 0) {
+            double denominator = r + xi;
+            double ratio = yi / denominator;
+            result[resultOffset + i] = 2 * Math.atan(ratio);
         } else {
+            double denominator = r - xi;
+            double ratio = yi / denominator;
+            double atanResult = Math.atan(ratio);
 
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            if (ratio <= 0) {
+                result[resultOffset + i] = -Math.PI - 2 * atanResult;
+            } else {
+                result[resultOffset + i] = Math.PI - 2 * atanResult;
+            }
         }
-
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
