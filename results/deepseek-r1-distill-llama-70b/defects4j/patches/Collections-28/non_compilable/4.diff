diff --git a/tmp/871ade7a-2dfb-4a3f-a9c7-bc46f99cf37f_buggy.java b/tmp/ab1c5f95-f1ed-4b9c-bec9-1d10729f5e19_fixed.java
index e69de29..0bdd0ec 100644
--- a/tmp/871ade7a-2dfb-4a3f-a9c7-bc46f99cf37f_buggy.java
+++ b/tmp/ab1c5f95-f1ed-4b9c-bec9-1d10729f5e19_fixed.java
@@ -0,0 +1,42 @@
+protected class PrefixSortedMap<K extends String, V> extends AbstractSortedMapDecorator<K, V> {
+    private final String prefix;
+
+    public PrefixSortedMap(final String prefix) {
+        this.prefix = prefix;
+    }
+
+    @Override
+    protected Iterator<Entry<K, V>> entrySetIterator() {
+        return new PatriciaTrie.this.EntrySetIterator(getPrefixNode(prefix));
+    }
+
+    @Override
+    public V remove(final Object key) {
+        final String stringKey = (String) key;
+        if (stringKey.startsWith(prefix)) {
+            return PatriciaTrie.this.remove(stringKey);
+        }
+        return null;
+    }
+
+    @Override
+    public void clear() {
+        final Iterator<Entry<K, V>> iterator = iterator();
+        while (iterator.hasNext()) {
+            final Entry<K, V> entry = iterator.next();
+            PatriciaTrie.this.remove(entry.getKey());
+        }
+    }
+
+    private Node<K, V> getPrefixNode(final String prefix) {
+        Node<K, V> node = root;
+        final Iterator<String> iterator = SplittingIterator.onPredicate(node, (node1) -> !node1.isEndOfWord());
+        for (final String part : iterator) {
+            if (!prefix.startsWith(part, node.getAvailableStr())) {
+                return null;
+            }
+            node = (Node<K, V>) node.getChild(part);
+        }
+        return node;
+    }
+}
\ No newline at end of file
