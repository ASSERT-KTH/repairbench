diff --git a/tmp/655d0619-e1b9-4f17-93c5-3abd82da3319_buggy.java b/tmp/f3abbd07-f108-4c38-9d2d-7facd1a614b2_fixed.java
index e69de29..194967f 100644
--- a/tmp/655d0619-e1b9-4f17-93c5-3abd82da3319_buggy.java
+++ b/tmp/f3abbd07-f108-4c38-9d2d-7facd1a614b2_fixed.java
@@ -0,0 +1,190 @@
+    public SortedMap<K, V> prefixMap(K prefix) {
+        return new PREFIXMAP(prefix);
+    }
+
+    private final class PREFIXMAP extends AbstractSortedMap<K, V> implements Serializable {
+
+        private final K prefix;
+
+        private PREFIXMAP(final K prefix) {
+            this.prefix = prefix;
+        }
+
+        @Override
+        public boolean containsKey(final Object key) {
+            return PatriciaTrie.this.containsKey(key);
+        }
+
+        @Override
+        public V get(final Object key) {
+            return PatriciaTrie.this.get(key);
+        }
+
+        @Override
+        public V remove(final Object key) {
+            return PatriciaTrie.this.remove(key);
+        }
+
+        @Override
+        public int size() {
+            return PatriciaTrie.this.size();
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return PatriciaTrie.this.isEmpty();
+        }
+
+        @Override
+        public void clear() {
+            PatriciaTrie.this.clear();
+        }
+
+        @Override
+        public SortedMap<K, V> headMap(final K toKey) {
+            return PatriciaTrie.this.prefixMap(prefix).headMap(toKey);
+        }
+
+        @Override
+        public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
+            return PatriciaTrie.this.prefixMap(prefix).subMap(fromKey, toKey);
+        }
+
+        @Override
+        public SortedMap<K, V> tailMap(final K fromKey) {
+            return PatriciaTrie.this.prefixMap(prefix).tailMap(fromKey);
+        }
+
+        @Override
+        public Comparator<? super K> comparator() {
+            return PatriciaTrie.this.comparator();
+        }
+
+        @Override
+        public Set<K> keySet() {
+            return new KeySet(this);
+        }
+
+        @Override
+        public Collection<V> values() {
+            return new Values(this);
+        }
+
+        @Override
+        public Set<Map.Entry<K, V>> entrySet() {
+            return new EntrySet(this);
+        }
+
+        private final class EntrySet extends AbstractSet<Map.Entry<K, V>> {
+
+            private final SortedMap<K, V> map;
+
+            private EntrySet(SortedMap<K, V> map) {
+                this.map = map;
+            }
+
+            public Iterator<Map.Entry<K, V>> iterator() {
+                return new EntryIterator(map.entrySet().iterator());
+            }
+
+            public boolean contains(final Object o) {
+                if (!(o instanceof Map.Entry)) {
+                    return false;
+                }
+                final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;
+                return map.containsKey(entry.getKey());
+            }
+
+            public boolean remove(final Object o) {
+                if (!(o instanceof Map.Entry)) {
+                    return false;
+                }
+                final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;
+                return map.remove(entry.getKey()) != null;
+            }
+
+            public int size() {
+                return map.size();
+            }
+
+            public boolean isEmpty() {
+                return map.isEmpty();
+            }
+
+            public boolean equals(final Object o) {
+                if (o == this) {
+                    return true;
+                }
+                if (o instanceof Set) {
+                    return map.entrySet().equals(o);
+                }
+                return false;
+            }
+
+            public int hashCode() {
+                return map.hashCode();
+            }
+        }
+
+        private final class KeySet extends AbstractSet<K> implements Serializable {
+
+            private final SortedMap<K, V> map;
+
+            private KeySet(SortedMap<K, V> map) {
+                this.map = map;
+            }
+
+            public Iterator<K> iterator() {
+                return new KeyIterator(map.keySet().iterator());
+            }
+
+            public boolean contains(final Object o) {
+                return map.containsKey(o);
+            }
+
+            public boolean remove(final Object o) {
+                return map.remove(o) != null;
+            }
+
+            public int size() {
+                return map.size();
+            }
+
+            public boolean isEmpty() {
+                return map.isEmpty();
+            }
+
+            public void clear() {
+                map.clear();
+            }
+        }
+
+        private final class Values extends AbstractCollection<V> {
+
+            private final SortedMap<K, V> map;
+
+            private Values(SortedMap<K, V> map) {
+                this.map = map;
+            }
+
+            public Iterator<V> iterator() {
+                return new ValueIterator(map.keySet().iterator());
+            }
+
+            public boolean contains(final Object o) {
+                return map.containsValue(o);
+            }
+
+            public int size() {
+                return map.size();
+            }
+
+            public boolean isEmpty() {
+                return map.isEmpty();
+            }
+
+            public void clear() {
+                map.clear();
+            }
+        }
+    }
\ No newline at end of file
