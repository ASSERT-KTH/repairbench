diff --git a/tmp/4a9fda37-475f-4065-bfa6-0a7deb183a66_buggy.java b/tmp/d46ad75b-2881-4464-8e94-ac9396ea992a_fixed.java
index 851ffc2..59bf2d2 100644
--- a/tmp/4a9fda37-475f-4065-bfa6-0a7deb183a66_buggy.java
+++ b/tmp/d46ad75b-2881-4464-8e94-ac9396ea992a_fixed.java
@@ -1,70 +1,75 @@
-    /**
-     * Replace the provide statement.
-     *
-     * If we're providing a name with no definition, then create one.
-     * If we're providing a name with a duplicate definition, then make sure
-     * that definition becomes a declaration.
-     */
 void replace() {
   if (firstNode == null) {
-        // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
-      // Handle the case where there is a duplicate definition for an explicitly
-      // provided symbol.
   if (candidateDefinition != null && explicitNode != null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
-        // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
-          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
-            // Need to convert this assign to a var declaration.
+        candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
-            candidateDefinition.getParent().replaceChild(
-                candidateDefinition, varNode);
+        candidateDefinition.getParent().replaceChild(candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
-        // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
+
+    String[] parts = namespace.split("\\.");
+    Node current = replacementNode;
+    for (int i = 1; i < parts.length; i++) {
+      Node child = current.getFirstChild();
+      if (child == null || child.getType() != Token.OBJECT_PATTERN) {
+        Node newObj = new Node(Token.OBJECT_PATTERN);
+        newObj.addChildToFront(new Node(Token STRING, "'" + parts[i] + "]', parts[i]));
+        newObj.addChildToFront(new Node(Token.NAME, parts[i]));
+        current.addChildToBack(newObj);
+        current = newObj;
+      } else {
+        String currentPart = child.getLastChild().getString();
+        if (!currentPart.equals(parts[i])) {
+          Node newObj = new Node(Token.OBJECT_PATTERN);
+          newObj.addChildToFront(new Node(Token.NAME, parts[i]));
+          current.addChildToBack(newObj);
+          current = newObj;
+        } else {
+          current = child;
+        }
+      }
+    }
+
     if (firstModule == minimumModule) {
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
       int indexOfDot = namespace.indexOf('.');
       if (indexOfDot == -1) {
-            // Any old place is fine.
-            compiler.getNodeForCodeInsertion(minimumModule)
-                .addChildToBack(replacementNode);
+        compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
       } else {
-            // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
+        String parentNamespace = namespace.substring(0, indexOfDot);
+        ProvidedName parentName = providedNames.get(parentNamespace);
         Preconditions.checkNotNull(parentName);
         Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
+        parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);
       }
     }
+
     if (explicitNode != null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
 }
\ No newline at end of file
