diff --git a/tmp/04d0c090-0203-4c88-a2ce-f10b59689eb2_buggy.java b/tmp/aa286c3c-a48b-4190-8da9-7a23c9f81eb6_fixed.java
index f650982..a7a1621 100644
--- a/tmp/04d0c090-0203-4c88-a2ce-f10b59689eb2_buggy.java
+++ b/tmp/aa286c3c-a48b-4190-8da9-7a23c9f81eb6_fixed.java
@@ -1,42 +1,53 @@
-    /**
-     * Compares two values
-     */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
-        }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
-        }
         if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            Iterator<?> itL = (Iterator<?>) l;
+            Iterator<?> itR = (Iterator<?>) r;
+            boolean matchFound = false;
+            while (itL.hasNext()) {
+                Object elemL = itL.next();
+                while (itR.hasNext()) {
+                    Object elemR = itR.next();
+                    if (equal(context, wrapAsExpression(elemL), wrapAsExpression(elemR))) {
+                        matchFound = true;
+                        break;
+                    }
+                }
+                if (matchFound) {
+                    break;
+                }
+                // Reset r iterator for next element in l
+                r = ((Collection) right.compute(context)).iterator();
+                itR = (Iterator<?>) r;
+            }
+            return matchFound && !itR.hasNext();
+        } else if (l instanceof Iterator) {
+            return contains((Iterator<?>) l, r);
+        } else if (r instanceof Iterator) {
+            return contains((Iterator<?>) r, l);
+        } else {
+            return Objects.equals(l, r);
         }
-        return equal(l, r);
     }
\ No newline at end of file
