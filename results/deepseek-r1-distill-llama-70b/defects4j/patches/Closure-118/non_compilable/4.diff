diff --git a/tmp/2cb5a59b-0f0b-474f-bd32-41e2419fb3f7_buggy.java b/tmp/9d9c6b6c-a14b-4302-a17b-dac65bbe5229_fixed.java
index 0b7c52e..8dbb3c2 100644
--- a/tmp/2cb5a59b-0f0b-474f-bd32-41e2419fb3f7_buggy.java
+++ b/tmp/9d9c6b6c-a14b-4302-a17b-dac65bbe5229_fixed.java
@@ -1,27 +1,33 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
 
-        // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
-        Property prop = getProperty(name);
+        Property prop;
+        if (type != null && type.isObjectType()) {
+          // If the type is an object type, get the property from it.
+          prop = type.getOwnProperty(name);
+        } else {
+          // Otherwise, get the property as before.
+          prop = getProperty(name);
+        }
+
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
