diff --git a/tmp/e548f76a-e243-42cc-8708-57ec80b68b3f_buggy.java b/tmp/68f653ed-3889-4c70-bb8a-d8b7ef97318c_fixed.java
index 6c9090f..d9f0671 100644
--- a/tmp/e548f76a-e243-42cc-8708-57ec80b68b3f_buggy.java
+++ b/tmp/68f653ed-3889-4c70-bb8a-d8b7ef97318c_fixed.java
@@ -1,45 +1,84 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                         +": value instantiator ("+_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
     }
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     
     // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
     // and finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+    CollectionDeserializer deserializer = withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+    
+    // Fix: Check if the collection type is unmodifiable and set the appropriate creator
+    if (isUnmodifiableCollection(_collectionType)) {
+        deserializer = deserializer.withValueInstantiator(new UnmodifiableCollectionInstantiator(deserializer.getValueInstantiator()));
+    }
+    
+    return deserializer;
+}
+
+private boolean isUnmodifiableCollection(JavaType type) {
+    Class<?> rawType = type.getRawClass();
+    return rawType != null && (Collections.class.isAssignableFrom(rawType.getSuperclass()) 
+            && (rawType.getName().startsWith("java.util.Collections$") 
+                && rawType.getName().endsWith("Set") || rawType.getName().endsWith("List") || rawType.getName().endsWith("Collection")));
+}
+
+private class UnmodifiableCollectionInstantiator extends ValueInstantiator {
+    private final ValueInstantiator delegate;
+
+    UnmodifiableCollectionInstantiator(ValueInstantiator delegate) {
+        super(delegate.getValueType());
+        this.delegate = delegate;
+    }
+
+    @Override
+    public Object createUsingDelegate(Object delegate) throws JsonMappingException {
+        Object collection = delegate;
+        if (collection == null) {
+            collection = Collections.emptySet();
+        }
+        return collectionsMap(collection);
+    }
+
+    private Object collectionsMap(Object collection) {
+        if (collection instanceof Set) {
+            return Collections.unmodifiableSet((Set<?>) collection);
+        } else if (collection instanceof List) {
+            return Collections.unmodifiableList((List<?>) collection);
+        } else {
+            return Collections.unmodifiableCollection((Collection<?>) collection);
+        }
+    }
+
+    // Implement other necessary methods from ValueInstantiator if needed
 }
\ No newline at end of file
