diff --git a/tmp/330d2834-c8b8-4af7-abf1-bfd22c5e3998_buggy.java b/tmp/f32b51ad-9e31-4b51-8456-2fa1c8093e48_fixed.java
index 6c9090f..eb36ee6 100644
--- a/tmp/330d2834-c8b8-4af7-abf1-bfd22c5e3998_buggy.java
+++ b/tmp/f32b51ad-9e31-4b51-8456-2fa1c8093e48_fixed.java
@@ -1,45 +1,48 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                         +": value instantiator ("+_valueInstantiator.getClass().getName()
-                            +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
+                        +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'"
+                );
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
     }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
 
-        // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else { 
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
-        // and finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+
+    Class<?> collType = _collectionType.getRawClass();
+    boolean isUnmodifiable = (collType != null)
+        && ( Collins.UnmodifiableCollection.class.isAssignableFrom(collType) || 
+            collType == Collections.UnmodifiableSet.class ||
+            collType == Collections.UnmodifiableList.class);
+
+    if (isUnmodifiable) {
+        // Use the delegate deserializer to create the unmodifiable collection
+        delegateDeser = valueDeser;
+        valueDeser = null;
+        valueTypeDeser = null;
+    }
+
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
