diff --git a/tmp/6104384c-e2a0-41f4-bde2-091456ca1314_buggy.java b/tmp/34f4b341-f801-4a10-947e-dc788ce21425_fixed.java
index 6c9090f..ca35b62 100644
--- a/tmp/6104384c-e2a0-41f4-bde2-091456ca1314_buggy.java
+++ b/tmp/34f4b341-f801-4a10-947e-dc788ce21425_fixed.java
@@ -1,45 +1,51 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                         +": value instantiator ("+_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
     }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+
     JsonDeserializer<?> valueDeser = _valueDeserializer;
-        
-        // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
+
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
-        // and finally, type deserializer needs context as well
+
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+
+    // Additional fix for handling unmodifiable collections
+    if (isUnmodifiableCollection(_collectionType)) {
+        valueDeser = ctxt.findContextualValueDeserializer(vt, property);
+        delegateDeser = ctxt.findInjectableValueDeserializer(ctxt.constructType(Object.class), property, null);
+        valueTypeDeser = TypeDeserializer.arrayTypeDeserializer(ctxt, vt);
+    }
+
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
+
+private boolean isUnmodifiableCollection(JavaType type) {
+    Class<?> rawType = type.getRawClass();
+    return rawType != null && (rawType == Collections.UnmodifiableSet.class 
+            || rawType == Collections.UnmodifiableList.class 
+            || rawType == Collections.UnmodifiableCollection.class);
+}
\ No newline at end of file
