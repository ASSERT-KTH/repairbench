diff --git a/tmp/7ac51c2f-4804-4d95-9d81-b20112d82fdd_buggy.java b/tmp/81c51dd5-654a-4df6-b337-acf4b59d832a_fixed.java
index 6c9090f..618427b 100644
--- a/tmp/7ac51c2f-4804-4d95-9d81-b20112d82fdd_buggy.java
+++ b/tmp/81c51dd5-654a-4df6-b337-acf4b59d832a_fixed.java
@@ -1,45 +1,52 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
+    if (_valueInstantiator != null && _valueInstantiator.canCreateUsingDelegate()) {
         JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
         if (delegateType == null) {
             throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                     +": value instantiator ("+_valueInstantiator.getClass().getName()
                     +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
         }
         delegateDeser = findDeserializer(ctxt, delegateType, property);
+        // Check if the type is unmodifiable and adjust delegate accordingly
+        JavaType actualContentType = delegateType.getContentType();
+        if (actualContentType != null && _collectionType.getContentType().equals(actualContentType)) {
+            JavaType modifiableType = ctxt.getTypeFactory().constructCollectionType(
+                    getCorrespondingModifiableCollectionType(delegateType), actualContentType);
+            delegateDeser = findDeserializer(ctxt, modifiableType, property);
         }
     }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     
-        // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
-        // and finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
+
+private Class<? extends Collection<?>> getCorrespondingModifiableCollectionType(JavaType type) {
+    if (type.isCollectionLikeType()) {
+        Class<? extends Collection<?>> rawType = type.getRawClass();
+        if (rawType.equals(Collections.UnmodifiableSet.class)) {
+            return Set.class;
+        } else if (rawType.equals(Collections.UnmodifiableList.class)) {
+            return List.class;
+        } else if (rawType.equals(Collections.UnmodifiableCollection.class)) {
+            return Collection.class;
+        }
+    }
+    return type.getRawClass();
+}
\ No newline at end of file
