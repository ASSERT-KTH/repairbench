diff --git a/tmp/95833dca-39e8-46f3-8745-c41201f65cab_buggy.java b/tmp/ddf37370-6eb8-49a4-9906-cad3565d572e_fixed.java
index e5ad041..757c27f 100644
--- a/tmp/95833dca-39e8-46f3-8745-c41201f65cab_buggy.java
+++ b/tmp/ddf37370-6eb8-49a4-9906-cad3565d572e_fixed.java
@@ -1,19 +1,18 @@
     @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+    protected JavaType _narrow(Class<?> subclass) {
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        // Compute superclass and super interfaces for the subclass
+        Class<?> superClass = subclass.getSuperclass();
+        JavaType superClassType = (superClass == null) ? null : _typeFactory.constructType(superClass);
+        List<JavaType> superInterfaceTypes = new ArrayList<>();
+        for (Class<?> iface : subclass.getInterfaces()) {
+            superInterfaceTypes.add(_typeFactory.constructType(iface));
         }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+        // Create new bindings, perhaps empty or resolved
+        TypeBindings newBindings = _typeFactory.emptyBindings();
+        // Alternatively, maybe create bindings from the subclass's type parameters
+        return new SimpleType(subclass, newBindings, superClassType, superInterfaceTypes,
                 _valueHandler, _typeHandler, _asStatic);
     }
\ No newline at end of file
