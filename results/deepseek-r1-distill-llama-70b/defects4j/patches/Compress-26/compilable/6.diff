diff --git a/tmp/a8182b95-0aea-4319-96a5-54ffe0e580a8_buggy.java b/tmp/f7e63187-136f-42e5-9b19-7c7e588dabb5_fixed.java
index 4b163f6..54629c1 100644
--- a/tmp/a8182b95-0aea-4319-96a5-54ffe0e580a8_buggy.java
+++ b/tmp/f7e63187-136f-42e5-9b19-7c7e588dabb5_fixed.java
@@ -1,28 +1,48 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+        long totalSkipped = 0;
+        long toSkip = numToSkip;
+
+        // First, try to skip using the stream's skip method
+        while (toSkip > 0) {
+            long skipped = input.skip(toSkip);
+            if (skipped < 0) {
+                throw new IOException("Stream skip returned negative value: " + skipped);
+            }
             if (skipped == 0) {
-                break;
+                break; // Skip method can't proceed, fallback to read()
             }
-            numToSkip -= skipped;
+            totalSkipped += skipped;
+            toSkip -= skipped;
         }
 
-        return available - numToSkip;
+        // If we still have bytes to skip, fallback to read() method
+        if (toSkip > 0) {
+            byte[] buffer = new byte[1024];
+            while (toSkip > 0) {
+                int read = input.read(buffer, 0, (int) Math.min(buffer.length, toSkip));
+                if (read == -1) {
+                    break; // End of stream reached
+                }
+                totalSkipped += read;
+                toSkip -= read;
+            }
+        }
+
+        return totalSkipped;
     }
\ No newline at end of file
