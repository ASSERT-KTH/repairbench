diff --git a/tmp/dcc53bb0-f6b9-479e-9f50-4a5b5581c8c2_buggy.java b/tmp/72badf4e-5647-42e8-9f38-9a3f1d90ea71_fixed.java
index 4b163f6..04f4844 100644
--- a/tmp/dcc53bb0-f6b9-479e-9f50-4a5b5581c8c2_buggy.java
+++ b/tmp/72badf4e-5647-42e8-9f38-9a3f1d90ea71_fixed.java
@@ -1,28 +1,23 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+        long skipCount = 0;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
                 break;
             }
             numToSkip -= skipped;
+            skipCount += skipped;
         }
-            
-        return available - numToSkip;
+        if (numToSkip > 0) {
+            byte[] buffer = new byte[1024];
+            while (numToSkip > 0) {
+                int read = input.read(buffer, 0, (int) Math.min(buffer.length, numToSkip));
+                if (read < 0) {
+                    break;
+                }
+                skipCount += read;
+                numToSkip -= read;
+            }
+        }
+        return skipCount;
     }
\ No newline at end of file
