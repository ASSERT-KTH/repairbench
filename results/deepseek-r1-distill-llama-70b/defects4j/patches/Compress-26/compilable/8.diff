diff --git a/tmp/c2598363-ea19-43ca-ba21-ec6f6c773a04_buggy.java b/tmp/34fe15b1-eb71-49d3-ba32-51c917626a5e_fixed.java
index 4b163f6..d85060e 100644
--- a/tmp/c2598363-ea19-43ca-ba21-ec6f6c773a04_buggy.java
+++ b/tmp/34fe15b1-eb71-49d3-ba32-51c917626a5e_fixed.java
@@ -1,28 +1,20 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
+                // If skip returns 0, we have to read the bytes to make progress
+                byte[] buffer = new byte[1024];
+                while (numToSkip > 0) {
+                    int read = input.read(buffer, 0, (int) Math.min(numToSkip, buffer.length));
+                    if (read == -1) {
+                        break;
+                    }
+                    numToSkip -= read;
+                }
                 break;
             }
             numToSkip -= skipped;
         }
-            
         return available - numToSkip;
     }
\ No newline at end of file
