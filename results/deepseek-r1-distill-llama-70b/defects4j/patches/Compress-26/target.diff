diff --git a/tmp/85fe7bb7-6380-47bf-994b-6fa0aa1b8ba8_buggy.java b/tmp/72dc3d2a-797d-4ca9-ae50-8d25ee7a85c8_fixed.java
index 4b163f6..26a494a 100644
--- a/tmp/85fe7bb7-6380-47bf-994b-6fa0aa1b8ba8_buggy.java
+++ b/tmp/72dc3d2a-797d-4ca9-ae50-8d25ee7a85c8_fixed.java
@@ -1,28 +1,39 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
                 break;
             }
             numToSkip -= skipped;
         }
             
+        if (numToSkip > 0) {
+            byte[] skipBuf = new byte[SKIP_BUF_SIZE];
+            while (numToSkip > 0) {
+                int read = readFully(input, skipBuf, 0,
+                                     (int) Math.min(numToSkip, SKIP_BUF_SIZE));
+                if (read < 1) {
+                    break;
+                }
+                numToSkip -= read;
+            }
+        }
         return available - numToSkip;
     }
