diff --git a/tmp/f1e4f143-56f0-4d07-85bd-f99f5eba8fda_buggy.java b/tmp/dcb5914f-0d9b-431d-86e8-10215bb891b1_fixed.java
index d926eea..9e84f5b 100644
--- a/tmp/f1e4f143-56f0-4d07-85bd-f99f5eba8fda_buggy.java
+++ b/tmp/dcb5914f-0d9b-431d-86e8-10215bb891b1_fixed.java
@@ -1,48 +1,43 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
                                          BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
+    // Determine the appropriate pattern and time zone to use
+    TimeZone timeZone = serializers.getTimeZone();
+    String pattern;
+    if (format.hasPattern()) {
+        pattern = format.getPattern();
+    } else {
+        // Use default pattern from the serializer
+        DateFormat df = serializers.getDateFormat();
+        if (df instanceof SimpleDateFormat) {
+            pattern = ((SimpleDateFormat) df).toPattern();
+        } else {
+            // Fallback to ISO8601 if the default isn't a SimpleDateFormat
+            pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
         }
-            df.setTimeZone(tz);
+    }
+
+    // Determine locale and time zone
+    Locale locale = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();
+    if (!format.hasTimeZone()) {
+        timeZone = serializers.getTimeZone();
+    }
+
+    SimpleDateFormat df = new SimpleDateFormat(pattern, locale);
+    df.setTimeZone(timeZone);
     return withFormat(Boolean.FALSE, df);
 }
\ No newline at end of file
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
-    }
