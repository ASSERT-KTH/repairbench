diff --git a/tmp/1b434f80-d0e3-4dd4-8bf8-08bf0db8b247_buggy.java b/tmp/54129ed6-2350-4604-9c4b-3ff1debf3d6c_fixed.java
index 4be01ab..c3a66f2 100644
--- a/tmp/1b434f80-d0e3-4dd4-8bf8-08bf0db8b247_buggy.java
+++ b/tmp/54129ed6-2350-4604-9c4b-3ff1debf3d6c_fixed.java
@@ -1,115 +1,114 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
-  @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
+    // Read the content from the first line, including leading whitespace
     String line = stream.getRemainingJSDocLine();
+    // Instead of trimming, extract leading whitespace and content
+    int leadingSpaces = line.indexOfFirstNonWhitespace();
+    String leading = leadingSpaces > 0 ? line.substring(0, leadingSpaces) : "";
+    String content = line.substring(leadingSpaces);
     if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
+      content = content.trim();
     }
+    line = leading + content;
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
     state = State.SEARCHING_ANNOTATION;
     token = next();
 
     boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+    int lastLineLeadingSpaces = -1;
 
     do {
       switch (token) {
         case STAR:
           if (ignoreStar) {
             // Mark the position after the star as the new start of the line.
           } else {
             // The star is part of the comment.
             if (builder.length() > 0) {
               builder.append(' ');
             }
 
             builder.append('*');
           }
 
           token = next();
           continue;
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
+            // Get the remaining line to calculate leading whitespace
+            String remaining = stream.getRemainingJSDocLine();
+            int currentLeadingSpaces = remaining.indexOfFirstNonWhitespace();
+            String currentLeading = currentLeadingSpaces > 0 ? remaining.substring(0, currentLeadingSpaces) : "";
+            // If the line after EOL has leading spaces, append them
+            if (!currentLeading.isEmpty()) {
+              builder.append("\n").append(currentLeading);
+              lastLineLeadingSpaces = currentLeadingSpaces;
+            } else {
               builder.append("\n");
+              lastLineLeadingSpaces = 0;
+            }
           }
 
           ignoreStar = true;
           token = next();
           continue;
 
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
 
           // All tokens must be separated by a space.
 
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
               // When we're capturing a license block, annotations
               // in the block are ok.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
               multilineText = multilineText.trim();
             }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
           if (builder.length() > 0) {
             builder.append(' ');
           }
           builder.append(toString(token));
 
           line = stream.getRemainingJSDocLine();
 
           if (option != WhitespaceOption.PRESERVE) {
             line = trimEnd(line);
           }
 
           builder.append(line);
           token = next();
       }
     } while (true);
   }
\ No newline at end of file
