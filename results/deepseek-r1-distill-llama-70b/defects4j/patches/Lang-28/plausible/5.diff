diff --git a/tmp/0ce13149-e958-44de-bd66-00d8fda1a0df_buggy.java b/tmp/e13bf427-3779-42ad-9063-ea556c6cece9_fixed.java
index 4bbd561..d359999 100644
--- a/tmp/0ce13149-e958-44de-bd66-00d8fda1a0df_buggy.java
+++ b/tmp/e13bf427-3779-42ad-9063-ea556c6cece9_fixed.java
@@ -1,37 +1,53 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Check for the start of a numeric entity
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        if (end >= input.length()) {
+            return 0; // No terminating ';', invalid entity
+        }
 
+        String entityStr = input.subSequence(start, end).toString();
         int entityValue;
         try {
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(entityStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(entityStr, 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Check if the entity value is a valid Unicode code point
+        if (entityValue < 0 || entityValue > 0x10FFFF) {
+            return 0;
+        }
+
+        // Write the Unicode character(s) to the Writer
+        if (entityValue > 0xFFFF) {
+            // Supplementary character, split into surrogate pair
+            char[] surrogatePair = Character.toChars(entityValue);
+            out.write(surrogatePair);
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+
+        // Calculate the consumed length
+        int consumed = 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
