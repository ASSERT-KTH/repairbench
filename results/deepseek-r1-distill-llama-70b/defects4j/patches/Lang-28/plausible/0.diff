diff --git a/tmp/4f5a14ef-1542-4d07-8882-b0b8a93121fe_buggy.java b/tmp/6889a5fb-4cac-415b-90f7-0dd87829b449_fixed.java
index 4bbd561..1e18b06 100644
--- a/tmp/4f5a14ef-1542-4d07-8882-b0b8a93121fe_buggy.java
+++ b/tmp/6889a5fb-4cac-415b-90f7-0dd87829b449_fixed.java
@@ -1,37 +1,49 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end >= input.length()) {
+            return 0;
+        }
+
         int entityValue;
         try {
+            String entityStr = input.subSequence(start, end).toString();
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(entityStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(entityStr, 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
+        // Check if the entity value is a valid Unicode code point
+        if (entityValue < 0 || entityValue > 0x10FFFF) {
+            return 0;
+        }
+
+        // Convert the code point to char array, handling supplementary characters
+        char[] chars = Character.toChars(entityValue);
+        for (char c : chars) {
+            out.write(c);
+        }
+
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
