diff --git a/tmp/e8bae755-9787-4dd5-b194-dadee56f8a76_buggy.java b/tmp/3a08c58f-168d-4a8f-9e21-e8e2a9ddce2e_fixed.java
index 4bbd561..d9bb85d 100644
--- a/tmp/e8bae755-9787-4dd5-b194-dadee56f8a76_buggy.java
+++ b/tmp/3a08c58f-168d-4a8f-9e21-e8e2a9ddce2e_fixed.java
@@ -1,37 +1,44 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            if (end >= input.length()) {
+                return 0;
+            }
+
+            String entityStr = input.subSequence(start, end).toString();
+            long entityValue;
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+                entityValue = isHex ? Long.parseLong(entityStr, 16) : Long.parseLong(entityStr, 10);
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
-                out.write(entityValue);
+            if (entityValue < 0x10000) {
+                out.write((int) entityValue);
+            } else if (entityValue <= 0x10FFFF) {
+                int high = (int) (entityValue - 0x10000) / 0x400 + 0xD800;
+                int low = (int) (entityValue - 0x10000) % 0x400 + 0xDC00;
+                out.write(high);
+                out.write(low);
+            } else {
+                return 0;
+            }
+
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
