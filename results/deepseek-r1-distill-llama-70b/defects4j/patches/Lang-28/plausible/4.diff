diff --git a/tmp/5ab40087-3be2-462c-97ff-61d318db220b_buggy.java b/tmp/56d952eb-80b9-4060-93cd-2f6d8fdf4ef1_fixed.java
index 4bbd561..f1a73b9 100644
--- a/tmp/5ab40087-3be2-462c-97ff-61d318db220b_buggy.java
+++ b/tmp/56d952eb-80b9-4060-93cd-2f6d8fdf4ef1_fixed.java
@@ -1,37 +1,43 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Check for '&' followed by '#' at the current index
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Determine if the entity is hexadecimal
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
+            // Find the end of the entity value before the ';'
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // Parse the entity value either as hex or decimal
             int entityValue;
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+                String entityStr = input.subSequence(start, end).toString();
+                entityValue = isHex ? Integer.parseInt(entityStr, 16) : Integer.parseInt(entityStr, 10);
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
+            // Handle supplementary characters by splitting into surrogates
+            if (entityValue >= 0x10000) {
+                char[] surrogates = Character.toChars(entityValue);
+                out.write(surrogates[0]);
+                out.write(surrogates[1]);
+            } else {
                 out.write(entityValue);
+            }
+
+            // Return the number of characters processed in the input
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
