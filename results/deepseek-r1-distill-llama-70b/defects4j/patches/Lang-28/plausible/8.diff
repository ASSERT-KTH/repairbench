diff --git a/tmp/807dde8e-6b33-4d5c-aba7-1272a9a82d91_buggy.java b/tmp/47b749d8-1d31-426c-bf57-b81a39d5f751_fixed.java
index 4bbd561..e9eaf2f 100644
--- a/tmp/807dde8e-6b33-4d5c-aba7-1272a9a82d91_buggy.java
+++ b/tmp/47b749d8-1d31-426c-bf57-b81a39d5f751_fixed.java
@@ -1,37 +1,43 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
             int entityValue;
             try {
+                String numStr = input.subSequence(start, end).toString();
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numStr, 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
-                out.write(entityValue);
+            String entityStr;
+            if (entityValue >= 0x10000) {
+                int offset = entityValue - 0x10000;
+                char high = (char) (0xD800 + (offset >> 10));
+                char low = (char) (0xDC00 + (offset & 0x3FF));
+                entityStr = new StringBuilder().append(high).append(low).toString();
+            } else {
+                entityStr = Character.toString((char) entityValue);
+            }
+            out.write(entityStr);
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
