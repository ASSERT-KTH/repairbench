diff --git a/tmp/0d2ea40d-4d67-4860-9839-4286d1f349cc_buggy.java b/tmp/f5659e47-3d32-4898-a567-1cb11e043fc3_fixed.java
index 5bc9804..a2c27b0 100644
--- a/tmp/0d2ea40d-4d67-4860-9839-4286d1f349cc_buggy.java
+++ b/tmp/f5659e47-3d32-4898-a567-1cb11e043fc3_fixed.java
@@ -1,85 +1,137 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         final ExternalTypeHandler ext = _externalTypeIdHandler.start();
         final PropertyBasedCreator creator = _propertyBasedCreator;
-        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
+        PropertyValueBuffer buffer = null;
 
         TokenBuffer tokens = new TokenBuffer(p);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
+
+        // We need to allow processing both 'class' and payload properties in any order
+        // So, first check if it's the creator property or the external type id
+        // and handle accordingly, while buffering others
+
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
-            // creator property?
+
+            if (creator != null) {
                 SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
                 if (creatorProp != null) {
-                // first: let's check to see if this might be part of value with external type id:
-                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
-                //   since it is not the bean
-                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
-                    ;
-                } else {
-                    // Last creator property to set?
+                    // Check if it's the external type id; prioritized handling
+                    if (ext.handlePropertyValue(p, ctxt, propName, null)) {
+                        // External type id handled, but may not have used 'buffer' yet
+                        continue;
+                    }
+                    // Otherwise, handle as creator property
+                    if (buffer == null) {
+                        buffer = creator.startBuilding(p, ctxt, _objectIdReader);
+                        // Now that buffer is created, copy initial tokens and reset
+                        tokens = new TokenBuffer(p);
+                        tokens.writeStartObject();
+                    }
+                    // Assign the creator property
                     if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                        t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
-                        Object bean;
                         try {
-                            bean = creator.build(ctxt, buffer);
-                        } catch (Exception e) {
-                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                            continue; // never gets here
-                        }
-                        // if so, need to copy all remaining tokens into buffer
-                        while (t == JsonToken.FIELD_NAME) {
-                            p.nextToken(); // to skip name
-                            tokens.copyCurrentStructure(p);
-                            t = p.nextToken();
-                        }
+                            Object bean = creator.build(ctxt, buffer);
+                            // Ensure bean type matches expected
                             if (bean.getClass() != _beanType.getRawClass()) {
-                            // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
-                            //   it's too complicated, so bail out
                                 throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
                             }
+                            // Now, collect remaining properties into tokens
+                            for (t = p.nextToken(); t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+                                String remainingProp = p.getCurrentName();
+                                p.nextToken(); // Move to value
+                                tokens.copyCurrentStructure(p);
+                            }
                             return ext.complete(p, ctxt, bean);
+                        } catch (Exception e) {
+                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         }
+                        continue;
+                    }
+                }
+            }
+
+            // Handle external type id first
+            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
+                continue;
             }
+
+            // If buffer hasn't been created yet, create it now
+            if (buffer == null) {
+                buffer = creator != null ? creator.startBuilding(p, ctxt, _objectIdReader) : null;
+            }
+
+            if (buffer == null) {
+                // Perhaps it's a property that doesn't require a buffer
+                // Handle other properties as needed
+                if (_beanProperties != null) {
+                    SettableBeanProperty prop = _beanProperties.find(propName);
+                    if (prop != null) {
+                        Object value = prop.deserialize(p, ctxt);
+                        // Since buffer is null, assign directly (if possible)
+                        // Note: This might require additional handling depending on the setup
+                        // For simplicity, assume we can set it here
+                        prop.set(value);
                         continue;
                     }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
+                }
+                if (_anySetter != null) {
+                    _anySetter.deserializeAndSet(p, ctxt, propName);
                     continue;
                 }
-            // regular property? needs buffering
+                if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                    handleIgnoredProperty(p, ctxt, handledType(), propName);
+                    continue;
+                }
+                // If none of the above, perhaps it's an error
+                throw ctxt.mappingException("Unexpected property: " + propName);
+            }
+
+            // For properties that need buffering, add to buffer
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
-            // external type id (or property that depends on it)?
-            if (ext.handlePropertyValue(p, ctxt, propName, null)) {
-                continue;
-            }
-            /* As per [JACKSON-313], things marked as ignorable should not be
-             * passed to any setter
-             */
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
-            }
-            // "any property"?
+
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                continue;
+            }
+
+            // Handle any other cases, like ignorable properties
+            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                handleIgnoredProperty(p, ctxt, handledType(), propName);
+                continue;
             }
         }
 
-        // We hit END_OBJECT; resolve the pieces:
+        // After processing all properties, complete the deserialization
+        if (buffer != null) {
             try {
                 return ext.complete(p, ctxt, buffer, creator);
             } catch (Exception e) {
                 wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+                return null; // Handling exception as per original code
             }
         }
+
+        // If no buffer was created, check if creator can build without it
+        if (creator != null) {
+            try {
+                return creator.build(ctxt, null);
+            } catch (Exception e) {
+                wrapInstantiationProblem(e, ctxt);
+                return null;
+            }
+        }
+
+        // If all else fails, return null or throw an appropriate exception
+        return null;
+    }
\ No newline at end of file
