diff --git a/tmp/063d405b-1a32-413e-9d24-623ebdb9aba6_buggy.java b/tmp/158b57a7-fb1f-44f5-a4d7-43c767ee07c3_fixed.java
index 5bc9804..f90f8e3 100644
--- a/tmp/063d405b-1a32-413e-9d24-623ebdb9aba6_buggy.java
+++ b/tmp/158b57a7-fb1f-44f5-a4d7-43c767ee07c3_fixed.java
@@ -1,85 +1,87 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         final ExternalTypeHandler ext = _externalTypeIdHandler.start();
         final PropertyBasedCreator creator = _propertyBasedCreator;
-        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
+        PropertyValueBuffer buffer = creator != null ? creator.startBuilding(p, ctxt, _objectIdReader) : null;
 
         TokenBuffer tokens = new TokenBuffer(p);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+            p.nextToken();
+
+            // Check for external type id first
+            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
+                // If external type id is handled, process buffered properties if available
+                if (creator != null) {
+                    Object bean = creator.build(ctxt, buffer);
+                    return ext.complete(p, ctxt, bean);
+                }
+                continue;
+            }
+
+            // Creator property
+            if (creator != null) {
                 SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
                 if (creatorProp != null) {
-                // first: let's check to see if this might be part of value with external type id:
-                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
-                //   since it is not the bean
-                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
-                    ;
-                } else {
-                    // Last creator property to set?
                     if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                        t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
-                        Object bean;
-                        try {
-                            bean = creator.build(ctxt, buffer);
-                        } catch (Exception e) {
-                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                            continue; // never gets here
-                        }
-                        // if so, need to copy all remaining tokens into buffer
+                        t = p.nextToken();
                         while (t == JsonToken.FIELD_NAME) {
-                            p.nextToken(); // to skip name
+                            p.nextToken();
                             tokens.copyCurrentStructure(p);
                             t = p.nextToken();
                         }
+                        Object bean = creator.build(ctxt, buffer);
                         if (bean.getClass() != _beanType.getRawClass()) {
-                            // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
-                            //   it's too complicated, so bail out
                             throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
                         }
                         return ext.complete(p, ctxt, bean);
                     }
-                }
                     continue;
                 }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
+            }
+
+            // Object Id property
+            if (buffer != null && buffer.readIdProperty(propName)) {
                 continue;
             }
-            // regular property? needs buffering
+
+            // Regular property or external type id dependent
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
+                if (buffer != null) {
                     buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
+                } else {
+                    tokens.copyCurrentStructure(p);
                 }
-            // external type id (or property that depends on it)?
-            if (ext.handlePropertyValue(p, ctxt, propName, null)) {
                 continue;
             }
-            /* As per [JACKSON-313], things marked as ignorable should not be
-             * passed to any setter
-             */
+
+            // Handle ignorable properties
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
-            // "any property"?
+
+            // Any property handler
             if (_anySetter != null) {
+                if (buffer != null) {
                     buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                } else {
+                    tokens.copyCurrentStructure(p);
+                }
             }
         }
 
-        // We hit END_OBJECT; resolve the pieces:
-        try {
-            return ext.complete(p, ctxt, buffer, creator);
-        } catch (Exception e) {
-            wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+        // Handle the case where all properties were buffered and external type id was not processed
+        if (creator != null) {
+            Object bean = creator.build(ctxt, buffer);
+            return ext.complete(p, ctxt, bean);
         }
+
+        throw ctxt.mappingException("Unexpected end of JSON input");
     }
\ No newline at end of file
