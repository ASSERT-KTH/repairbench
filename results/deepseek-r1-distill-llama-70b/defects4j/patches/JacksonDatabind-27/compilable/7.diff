diff --git a/tmp/5a0d23b6-d802-43eb-a025-fcf511d9c195_buggy.java b/tmp/127379b0-5b35-4421-bd3d-57bdf8a83abd_fixed.java
index 5bc9804..9d1dcc7 100644
--- a/tmp/5a0d23b6-d802-43eb-a025-fcf511d9c195_buggy.java
+++ b/tmp/127379b0-5b35-4421-bd3d-57bdf8a83abd_fixed.java
@@ -1,85 +1,92 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         final ExternalTypeHandler ext = _externalTypeIdHandler.start();
         final PropertyBasedCreator creator = _propertyBasedCreator;
-        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
+        PropertyValueBuffer buffer = creator == null ? null : creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
-            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
+            SettableBeanProperty creatorProp = (creator != null) ? creator.findCreatorProperty(propName) : null;
             if (creatorProp != null) {
                 // first: let's check to see if this might be part of value with external type id:
-                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
+                // Important: do NOT pass buffer as last arg, but null,
                 // since it is not the bean
                 if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
-                    ;
+                    continue;
                 } else {
-                    // Last creator property to set?
-                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                        t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
+                    // Try to set the parameter and possibly complete the creator
+                    if (buffer != null) {
+                        Object value = _deserializeWithErrorWrapping(p, ctxt, creatorProp);
+                        if (buffer.assignParameter(creatorProp, value)) {
+                            t = p.nextToken();
                             Object bean;
                             try {
                                 bean = creator.build(ctxt, buffer);
                             } catch (Exception e) {
                                 wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                            continue; // never gets here
-                        }
-                        // if so, need to copy all remaining tokens into buffer
-                        while (t == JsonToken.FIELD_NAME) {
-                            p.nextToken(); // to skip name
-                            tokens.copyCurrentStructure(p);
-                            t = p.nextToken();
+                                continue;
                             }
+                            // Check if the bean is of expected type
                             if (bean.getClass() != _beanType.getRawClass()) {
-                            // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
-                            //   it's too complicated, so bail out
+                                // Bail out if not the expected type
                                 throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
                             }
+                            // Complete and return the deserialized object
                             return ext.complete(p, ctxt, bean);
                         }
                     }
+                }
                 continue;
             }
             // Object Id property?
-            if (buffer.readIdProperty(propName)) {
+            if ((buffer != null) && buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
+            if (buffer != null) {
                 SettableBeanProperty prop = _beanProperties.find(propName);
                 if (prop != null) {
                     buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                     continue;
                 }
+            }
             // external type id (or property that depends on it)?
             if (ext.handlePropertyValue(p, ctxt, propName, null)) {
                 continue;
             }
-            /* As per [JACKSON-313], things marked as ignorable should not be
-             * passed to any setter
-             */
+            // Check for ignorable properties
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
-            // "any property"?
+            // Handle "any property"
             if (_anySetter != null) {
+                if (buffer != null) {
                     buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                } else {
+                    // If buffer is null, read the value but don't buffer it
+                    p.skipChildren();
+                }
+                continue;
             }
         }
 
-        // We hit END_OBJECT; resolve the pieces:
+        // Hit END_OBJECT; resolve the pieces:
         try {
+            if (buffer == null) {
+                return ext.complete(p, ctxt, null, null);
+            }
             return ext.complete(p, ctxt, buffer, creator);
         } catch (Exception e) {
             wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+            return null;
         }
     }
\ No newline at end of file
