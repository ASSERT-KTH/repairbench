diff --git a/tmp/f468bec2-7e7a-45da-bd73-ec0a1c2a4620_buggy.java b/tmp/996af4b5-b426-47e0-bb78-3512ef6967fe_fixed.java
index 5f96616..4a74ff2 100644
--- a/tmp/f468bec2-7e7a-45da-bd73-ec0a1c2a4620_buggy.java
+++ b/tmp/996af4b5-b426-47e0-bb78-3512ef6967fe_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // Handle the case where the constraint is a record type.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     } 
+    // Also handle the case where the constraint is a union containing record types.
+    else if (constraint.isUnionType()) {
+        for (JSType type : constraint.getTypes()) {
+            if (type.isRecordType()) {
+                matchRecordTypeConstraint(type.toObjectType());
+            }
+        }
+    }
 }
\ No newline at end of file
