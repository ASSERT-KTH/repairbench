diff --git a/tmp/55b5420a-e17d-4554-8a3d-c8ad7e69a49c_buggy.java b/tmp/ef2280b4-2898-4db8-9717-c0ba9e0750b1_fixed.java
index 5f96616..60225cf 100644
--- a/tmp/55b5420a-e17d-4554-8a3d-c8ad7e69a49c_buggy.java
+++ b/tmp/ef2280b4-2898-4db8-9717-c0ba9e0750b1_fixed.java
@@ -1,20 +1,17 @@
   @Override
   public void matchConstraint(JSType constraint) {
-    // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Check if the constraint is a union type and process each record type within it.
+    if (constraint.isUnionType()) {
+      for (JSType unionMember : constraint.toUnionType().getComponents()) {
+        if (unionMember.isRecordType()) {
+          matchRecordTypeConstraint(unionMember.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
