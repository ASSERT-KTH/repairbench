diff --git a/tmp/36b17330-bf1c-495a-947e-89b86b6ee337_buggy.java b/tmp/273e3136-357c-4f43-9588-0dc1bafc96dc_fixed.java
index 5f96616..9d94a60 100644
--- a/tmp/36b17330-bf1c-495a-947e-89b86b6ee337_buggy.java
+++ b/tmp/273e3136-357c-4f43-9588-0dc1bafc96dc_fixed.java
@@ -1,20 +1,19 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    if (constraint.isUnionType()) {
+        // Handle union types, extract and process each record type constraint.
+        for (JSType type : constraint.toUnionType().getComponents()) {
+            if (type.isRecordType()) {
+                matchRecordTypeConstraint(type.toObjectType());
+            }
+        }
+    } else if (constraint.isRecordType()) {
+        // Handle single record type constraint.
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
