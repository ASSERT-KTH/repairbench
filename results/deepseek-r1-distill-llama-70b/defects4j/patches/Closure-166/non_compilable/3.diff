diff --git a/tmp/f3f8487b-5bb4-4f9e-9e57-653c063d1710_buggy.java b/tmp/d6b55292-ff8c-4e04-b6ac-ebc6df34d4b8_fixed.java
index 5f96616..915add2 100644
--- a/tmp/f3f8487b-5bb4-4f9e-9e57-653c063d1710_buggy.java
+++ b/tmp/d6b55292-ff8c-4e04-b6ac-ebc6df34d4b8_fixed.java
@@ -1,20 +1,19 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Handle the case where the constraint is a union type containing record types.
+    if (constraint.isUnionType()) {
+      for (JSType constituent : constraint.getConstituents()) {
+        if (constituent.isRecordType()) {
+          matchRecordTypeConstraint(constituent.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
+      // Handle the case where the constraint is a single record type.
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
