diff --git a/tmp/3bc0e4a6-ffba-444b-9e9b-c5983e0e7809_buggy.java b/tmp/6e70d0ec-b4b3-4a3e-a1fc-c8c94708009b_fixed.java
index 5f96616..003517b 100644
--- a/tmp/3bc0e4a6-ffba-444b-9e9b-c5983e0e7809_buggy.java
+++ b/tmp/6e70d0ec-b4b3-4a3e-a1fc-c8c94708009b_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // Handle the case where the constraint is a record type.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     } 
+    // Also handle the case where the constraint is a union that includes record types.
+    else if (constraint.isUnionType()) {
+        for (JSType unionType : constraint.getUnionTypes()) {
+            if (unionType.isRecordType()) {
+                matchRecordTypeConstraint(unionType.toObjectType());
+            }
+        }
+    }
 }
\ No newline at end of file
