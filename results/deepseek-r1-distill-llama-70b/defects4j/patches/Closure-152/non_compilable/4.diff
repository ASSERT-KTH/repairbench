diff --git a/tmp/7693f9d3-0cb6-49ea-867f-24551079f794_buggy.java b/tmp/606b138b-b7f0-42de-a85d-401642fa9ec3_fixed.java
index 58a1651..e1e0322 100644
--- a/tmp/7693f9d3-0cb6-49ea-867f-24551079f794_buggy.java
+++ b/tmp/606b138b-b7f0-42de-a85d-401642fa9ec3_fixed.java
@@ -1,32 +1,50 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis before checking its type
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+
+    // Check if typeOfThis is an ObjectType
+    if (typeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) typeOfThis;
+    } else if (typeOfThis instanceof UnionType) {
+        // If it's a UnionType, see if it contains an ObjectType
+        for (JSType type : (UnionType) typeOfThis) {
+            if (type instanceof ObjectType) {
+                typeOfThis = (ObjectType) type;
+                break;
+            }
+        }
+        if (!(typeOfThis instanceof ObjectType)) {
+            // If no ObjectType found, set to null
+            typeOfThis = null;
+        }
+    } else {
+        // If it's neither, set to null
+        typeOfThis = null;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
