diff --git a/tmp/2bb48005-f294-4d0e-b1f4-377053981725_buggy.java b/tmp/f38c0ae9-4989-4ad8-be33-d6a75209d40f_fixed.java
index 58a1651..71e77c1 100644
--- a/tmp/2bb48005-f294-4d0e-b1f4-377053981725_buggy.java
+++ b/tmp/f38c0ae9-4989-4ad8-be33-d6a75209d40f_fixed.java
@@ -1,32 +1,44 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Resolve typeOfThis and check if it needs to be extracted from a UnionType
+  typeOfThis = safeResolve(typeOfThis, t, scope);
+  if (typeOfThis instanceof UnionType) {
+    UnionType unionType = (UnionType) typeOfThis;
+    if (unionType.getTypes().size() == 1 && unionType.getTypes().get(0) instanceof ObjectType) {
+      typeOfThis = unionType.getTypes().get(0);
+    } else {
+      // Handle the case where UnionType contains multiple types or non-ObjectType
+      // For this fix, we assume only one type is relevant, but a more comprehensive approach may be needed
+      typeOfThis = null;
+    }
+  }
+  if (typeOfThis != null && !(typeOfThis instanceof ObjectType)) {
+    throw new ErrorReporter.Error(
+        "@this type must be an object type, but got " + typeOfThis);
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
