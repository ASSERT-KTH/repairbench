diff --git a/tmp/5d95c624-2fbe-4d48-9533-2192039db9eb_buggy.java b/tmp/4379e7f2-6765-45bb-8b46-b83f61de72f8_fixed.java
index 7d8d756..9e6820f 100644
--- a/tmp/5d95c624-2fbe-4d48-9533-2192039db9eb_buggy.java
+++ b/tmp/4379e7f2-6765-45bb-8b46-b83f61de72f8_fixed.java
@@ -1,48 +1,49 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
-        // 02-Aug-2013, tatu: May need to use native type ids
+        // Check for native type id first
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
+
+        // Check if _typeId is visible and current token is START_OBJECT
+        if (_typeIdVisible) {
             if (p.getCurrentToken() != JsonToken.START_OBJECT) {
                 throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                         "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
             }
-            // should always get field name, but just in case...
+        } else {
+            // Skip checking for START_OBJECT if _typeId is not visible
+            p.nextToken();
+        }
+
+        if (_typeIdVisible) {
+            // Ensure next token is FIELD_NAME
             if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+                        "need JSON String containing type id for subtype of " + baseTypeName());
             }
             final String typeId = p.getText();
             JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
             p.nextToken();
 
-        // Minor complication: we may need to merge type id in?
+            // Process type information if necessary
             if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
                 TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+                tb.writeStartObject();
                 tb.writeFieldName(_typePropertyName);
                 tb.writeString(typeId);
                 p = JsonParserSequence.createFlattened(tb.asParser(p), p);
                 p.nextToken();
             }
+            return deser.deserialize(p, ctxt);
+        }
 
-        Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
-                    "expected closing END_OBJECT after type information and deserialized value");
-        }
-        return value;
+        // Handle case where no type information is expected
+        final String typeId = p.getValueAsString();
+        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+        return deser.deserialize(p, ctxt);
     }
\ No newline at end of file
