diff --git a/tmp/73096f09-0cba-4a23-8409-7a4bd4ce38c9_buggy.java b/tmp/d70c6705-a808-49bf-80e0-2835840ea1fd_fixed.java
index 7d8d756..bbd8a0b 100644
--- a/tmp/73096f09-0cba-4a23-8409-7a4bd4ce38c9_buggy.java
+++ b/tmp/d70c6705-a808-49bf-80e0-2835840ea1fd_fixed.java
@@ -1,48 +1,54 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
         // first, sanity checks
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
             // should always get field name, but just in case...
             if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         p.nextToken();
 
+        // Handle possible cases for the next token
+        if (p.getCurrentToken() == JsonToken.VALUE_STRING || p.getCurrentToken() == JsonToken.VALUE_NUMBER_INT) {
+            // It's an inline type id; read the value and proceed
+            String actualTypeId = p.getValueAsString();
+            deser = _findDeserializer(ctxt, actualTypeId);
+            p.nextToken();
+        } else if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                    "Expected START_OBJECT after type id for class " + baseTypeName());
+        }
+
         // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+        if (_typeIdVisible) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
