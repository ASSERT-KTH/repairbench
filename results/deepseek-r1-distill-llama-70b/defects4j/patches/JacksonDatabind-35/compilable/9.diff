diff --git a/tmp/eb9fcec7-f66a-4bc6-8f73-f4858c75b56d_buggy.java b/tmp/0c879839-d3ee-4783-8970-38647a262e9c_fixed.java
index 7d8d756..f05081e 100644
--- a/tmp/eb9fcec7-f66a-4bc6-8f73-f4858c75b56d_buggy.java
+++ b/tmp/0c879839-d3ee-4783-8970-38647a262e9c_fixed.java
@@ -1,48 +1,61 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
-        // 02-Aug-2013, tatu: May need to use native type ids
+        // Try to use native type id if available
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
+        
+        // Check for START_OBJECT token for type information
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+            // If no START_OBJECT, attempt to read type from next token
+            if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                         "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
             }
-            // should always get field name, but just in case...
+            String typeId = p.getText();
+            JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+            p.nextToken();
+            
+            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+                deser = _findDeserializer(ctxt, typeId);
+                p.nextToken();
+            }
+            
+            return deser.deserialize(p, ctxt);
+        }
+        
+        // Original logic for when START_OBJECT is present
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         p.nextToken();
         
-        // Minor complication: we may need to merge type id in?
+        // Check if type id should be visible and handle accordingly
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+            tb.writeStartObject();
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
