diff --git a/tmp/03c1d052-735a-4bf3-bddd-08011c4694fc_buggy.java b/tmp/6a661cf5-0e37-44c5-990a-3b61a1306705_fixed.java
index 7d8d756..4393946 100644
--- a/tmp/03c1d052-735a-4bf3-bddd-08011c4694fc_buggy.java
+++ b/tmp/6a661cf5-0e37-44c5-990a-3b61a1306705_fixed.java
@@ -1,48 +1,58 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
-    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
-    {
-        // 02-Aug-2013, tatu: May need to use native type ids
+private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+        // Check for native type ID
+        Object typeId = null;
         if (p.canReadTypeId()) {
-            Object typeId = p.getTypeId();
+            typeId = p.getTypeId();
+        }
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
-        }
-        // first, sanity checks
+
+        // Assume we need to look for wrapper type info
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+            // Attempt to see if the next token is FIELD_NAME
+            if (p.nextToken() == JsonToken.FIELD_NAME) {
+                String fieldName = p.getText();
+                if (_typePropertyName.equals(fieldName)) {
+                    p.nextToken();
+                    typeId = p.getText();
+                    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+                    p.nextToken();
+                    Object value = deser.deserialize(p, ctxt);
+                    if (p.nextToken() != JsonToken.END_OBJECT) {
+                        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
+                                "expected closing END_OBJECT after type information and deserialized value");
+                    }
+                    return value;
+                }
+            }
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
         }
-            // should always get field name, but just in case...
+
+        // Existing logic for when START_OBJECT is present
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
         }
-        final String typeId = p.getText();
-        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+        final String extractedTypeId = p.getText();
+        JsonDeserializer<Object> deser = _findDeserializer(ctxt, extractedTypeId);
         p.nextToken();
 
-        // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+            tb.writeStartObject();
             tb.writeFieldName(_typePropertyName);
-            tb.writeString(typeId);
+            tb.writeString(extractedTypeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
 
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
 }
\ No newline at end of file
