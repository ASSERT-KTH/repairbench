diff --git a/tmp/3f86a8fd-bffa-4650-a12c-41ef84a9dfb1_buggy.java b/tmp/43434369-a8d4-4863-bf58-23045d7c8b97_fixed.java
index 6cfa79b..f4670d1 100644
--- a/tmp/3f86a8fd-bffa-4650-a12c-41ef84a9dfb1_buggy.java
+++ b/tmp/43434369-a8d4-4863-bf58-23045d7c8b97_fixed.java
@@ -1,12 +1,20 @@
-    /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
-     * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
-     * @throws MathException if the algorithm fails to converge; unless
-     * x is more than 20 standard deviations from the mean, in which case the
-     * convergence exception is caught and 0 or 1 is returned.
-     */
-    public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+public double cumulativeProbability(double x) {
+    double deviance = x - mean;
+    if (deviance == 0) {
+        return 0.5;
+    }
+    double scaledDeviance = deviance / (standardDeviation * Math.sqrt(2.0));
+    if (Math.abs(scaledDeviance) > 8 * Math.sqrt(Math.log(2))) { // Avoid double precision issues
+        // Use asymptotic expansion for extreme values
+        double sign = scaledDeviance < 0 ? -1.0 : 1.0;
+        double t = 1.0 / (1.0 + 0.2316419 * Math.abs(scaledDeviance));
+        double b1 = 3.543889;
+        double b2 = 1.637067;
+        double polynomial = 1.0 +
+                b1 * t +
+                b2 * t * t;
+        double inverse = 1.0 - sign * 0.5 * Math.pow(Math.PI, -0.5) * Math.exp(-scaledDeviance * scaledDeviance * 0.5) * polynomial * t;
+        return sign >= 0 ? inverse : 1.0 - inverse;
+    }
+    return 0.5 * (1.0 + Erf.erf(scaledDeviance));
 }
\ No newline at end of file
