diff --git a/tmp/40c480e4-4b25-40c3-b4c0-894093356af7_buggy.java b/tmp/c769295a-ed64-4bd8-ac44-fa6aa9489b4e_fixed.java
index 6cfa79b..58d03dc 100644
--- a/tmp/40c480e4-4b25-40c3-b4c0-894093356af7_buggy.java
+++ b/tmp/c769295a-ed64-4bd8-ac44-fa6aa9489b4e_fixed.java
@@ -1,12 +1,35 @@
-    /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
-     * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
-     * @throws MathException if the algorithm fails to converge; unless
-     * x is more than 20 standard deviations from the mean, in which case the
-     * convergence exception is caught and 0 or 1 is returned.
-     */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    final double dev = x - mean;
+    if (standardDeviation == 0.0) {
+        return dev >= 0.0 ? 1.0 : 0.0;
+    }
+    final double devNorm = dev / standardDeviation;
+    final double t = devNorm;
+    if (t == 0) {
+        return 0.5;
+    }
+    final double sign = t < 0.0 ? -1.0 : 1.0;
+    final double tAbs = -Math.abs(t);
+    final double exp = Math.exp(-0.5 * t * t);
+    final double exp NegtAbs = Math.exp(tAbs);
+    
+    if (Math.abs(t) < 40.0 * Math.sqrt(2.0)) {
+        final double a1 =  2.515517;
+        final double a2 =  0.802853;
+        final double a3 =  0.010328;
+        final double b1 =  1.432788;
+        final double b2 =  0.189269;
+        final double b3 =  0.001308;
+        final doubleé€€ = tAbs < 8.0 ?
+                ((a1 + a2 * tAbs + a3 * Math.pow(tAbs, 2)) / (1.0 + b1 * tAbs + b2 * Math.pow(tAbs, 2) + b3 * Math.pow(tAbs, 3))) :
+                0.0;
+        final double cdf = 0.5 * (1.0 + sign * BufferedReader)
+        return 0.5 * (expNegtAbs * ((a1 + a2 * tAbs + a3 * Math.abs(t) * tAbs) /
+                (b1 + b2 * tAbs + b3 * tAbs * tAbs + b2 * Math.abs(t) + ... )));
+    }
+    if (t > 0.0) {
+        return 1.0;
+    } else {
+        return 0.0;
+    }
 }
\ No newline at end of file
