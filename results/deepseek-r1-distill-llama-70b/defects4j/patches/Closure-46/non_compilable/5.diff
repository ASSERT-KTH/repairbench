diff --git a/tmp/9baa4955-e2c9-483d-baf8-651474846769_buggy.java b/tmp/ba89d1f2-89cd-4bdc-bd43-8aa2f36d5d99_fixed.java
index 46817a7..3ef885a 100644
--- a/tmp/9baa4955-e2c9-483d-baf8-651474846769_buggy.java
+++ b/tmp/ba89d1f2-89cd-4bdc-bd43-8aa2f36d5d99_fixed.java
@@ -1,16 +1,44 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Combine properties from both types
+    RecordType thisType = this.toMaybeRecordType().orElseThrow();
+    RecordType otherType = that.toMaybeRecordType().orElseThrow();
+
+    // Add properties from this type
+    for (String prop : thisType.getProperties()) {
+        JSType thisTypeProp = thisType.getPropertyType(prop);
+        if (otherType.hasProperty(prop)) {
+            JSType otherPropType = otherType.getPropertyType(prop);
+            if (!thisTypeProp.isEquivalentTo(otherPropType)) {
+                builder.addProperty(prop, registry.createUnionType(thisTypeProp, otherPropType), null);
+            } else {
+                builder.addProperty(prop, thisTypeProp, null);
             }
+        } else {
+            builder.addProperty(prop, thisTypeProp, null);
         }
-    return builder.build();
+    }
+
+    // Add properties from other type not present in this type
+    for (String prop : otherType.getProperties()) {
+        if (!thisType.hasProperty(prop)) {
+            builder.addProperty(prop, otherType.getPropertyType(prop), null);
+        }
+    }
+
+    JSType superType = builder.build();
+
+    // If the built type is equivalent to this or that, return the other as supertype
+    if (superType.isEquivalentTo(this)) {
+        return that;
+    } else if (superType.isEquivalentTo(that)) {
+        return this;
+    }
+
+    return superType;
 }
\ No newline at end of file
