diff --git a/tmp/ab8681de-5193-4bfe-8685-7c486372f82d_buggy.java b/tmp/100afe47-267b-4658-865b-cf60a9e04d01_fixed.java
index 46817a7..5cbaa72 100644
--- a/tmp/ab8681de-5193-4bfe-8685-7c486372f82d_buggy.java
+++ b/tmp/100afe47-267b-4658-865b-cf60a9e04d01_fixed.java
@@ -1,16 +1,34 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  
+  RecordType thisRecord = toMaybeRecordType().orElseThrow();
+  RecordType thatRecord = that.toMaybeRecordType().orElseThrow();
+  
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
+  
+  // Collect all unique property names from both records
+  Set<String> allProperties = new HashSet<>();
+  allProperties.addAll(thisRecord.getProperties());
+  allProperties.addAll(thatRecord.getProperties());
+  
+  for (String property : allProperties) {
+    JSType thisType = thisRecord.hasProperty(property) 
+        ? thisRecord.getPropertyType(property) 
+        : registry.getUnknownType();
+    JSType thatType = thatRecord.hasProperty(property)
+        ? thatRecord.getPropertyType(property)
+        : registry.getUnknownType();
+    
+    // Combine the types into a union if necessary
+    JSType mergedType = thisType.isUnknownType() ? thatType :
+                        (thatType.isUnknownType() ? thisType :
+                         registry.createUnionType(thisType, thatType));
+    
+    builder.addProperty(property, mergedType, null);
   }
+  
   return builder.build();
 }
\ No newline at end of file
