diff --git a/tmp/8428ee39-c5f8-41a5-b13a-b6115aec2ea1_buggy.java b/tmp/ea17d4f1-2fe7-4785-89e6-33da8b180ba2_fixed.java
index 46817a7..aeccd90 100644
--- a/tmp/8428ee39-c5f8-41a5-b13a-b6115aec2ea1_buggy.java
+++ b/tmp/ea17d4f1-2fe7-4785-89e6-33da8b180ba2_fixed.java
@@ -1,16 +1,31 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
+    RecordType thisRec = this.toMaybeRecordType();
+    RecordType thatRec = that.toMaybeRecordType();
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    
+    // Collect all unique property names from both records
+    Set<String> allProperties = new HashSet<>(thisRec.getPropertyNames());
+    allProperties.addAll(thatRec.getPropertyNames());
+    
+    for (String property : allProperties) {
+        if (thisRec.hasProperty(property) && thatRec.hasProperty(property)) {
+            // Property exists in both, compute the least supertype
+            PropertyType thisType = thisRec.getPropertyType(property);
+            PropertyType thatType = thatRec.getPropertyType(property);
+            // Note: The order might matter here for commutativity
+            JSType supertype = thisType.getLeastSupertype(thatType);
+            builder.addProperty(property, supertype, thisRec.getPropertyNode(property));
+        } else if (thisRec.hasProperty(property)) {
+            // Property only exists in this record
+            builder.addProperty(property, thisRec.getPropertyType(property), thisRec.getPropertyNode(property));
+        } else {
+            // Property only exists in that record
+            builder.addProperty(property, thatRec.getPropertyType(property), thatRec.getPropertyNode(property));
         }
     }
     return builder.build();
 }
\ No newline at end of file
