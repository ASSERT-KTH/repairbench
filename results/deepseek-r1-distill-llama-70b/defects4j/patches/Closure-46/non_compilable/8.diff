diff --git a/tmp/21647be0-efa8-46c0-8fbd-0bf430c64210_buggy.java b/tmp/f413595c-b969-4ca8-8402-f895ef1888e4_fixed.java
index 46817a7..af7f40b 100644
--- a/tmp/21647be0-efa8-46c0-8fbd-0bf430c64210_buggy.java
+++ b/tmp/f413595c-b969-4ca8-8402-f895ef1888e4_fixed.java
@@ -1,16 +1,30 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
+
+    RecordType thisRecord = this.toMaybeRecordType().orElseThrow();
+    RecordType thatRecord = that.toMaybeRecordType().orElseThrow();
+
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Add all properties from both records where types are equivalent
+    for (String property : thisRecord.getProperties().keySet()) {
+        JSType thisType = thisRecord.getPropertyType(property);
+        JSType thatType = thatRecord.getPropertyType(property);
+        if (thatType != null && thisType.isEquivalentTo(thatType)) {
+            builder.addProperty(property, thisType, thisRecord.getPropertyNode(property));
         }
     }
+
+    // Add properties from 'that' not present in 'this'
+    for (String property : thatRecord.getProperties().keySet()) {
+        if (!thisRecord.hasProperty(property)) {
+            JSType thatType = thatRecord.getPropertyType(property);
+            builder.addProperty(property, thatType, thatRecord.getPropertyNode(property));
+        }
+    }
+
     return builder.build();
 }
\ No newline at end of file
