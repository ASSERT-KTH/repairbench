diff --git a/tmp/2cbf1370-003f-4184-86e7-1ec00bf7bcbd_buggy.java b/tmp/43092d07-9f91-4bb5-a869-be3dc68bb8ce_fixed.java
index 46817a7..e429f27 100644
--- a/tmp/2cbf1370-003f-4184-86e7-1ec00bf7bcbd_buggy.java
+++ b/tmp/43092d07-9f91-4bb5-a869-be3dc68bb8ce_fixed.java
@@ -1,16 +1,21 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+  
+  // Collect all unique properties from both the current and 'that' record types
+  Set<String> allProperties = new HashSet<>(properties.keySet());
+  allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());
+  
+  for (String property : allProperties) {
+    JSType thisType = getPropertyType(property);
+    JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+    
+    if (thisType != null && thatType != null && thisType.isEquivalentTo(thatType)) {
+      builder.addProperty(property, thisType, getPropertyNode(property));
     }
   }
   return builder.build();
 }
\ No newline at end of file
