diff --git a/tmp/3c07b8e8-853a-46c9-b6fe-16f61bca1d60_buggy.java b/tmp/48733d00-620e-4750-b3ff-351237dbc145_fixed.java
index 71189c3..e546cf5 100644
--- a/tmp/3c07b8e8-853a-46c9-b6fe-16f61bca1d60_buggy.java
+++ b/tmp/48733d00-620e-4750-b3ff-351237dbc145_fixed.java
@@ -1,46 +1,68 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
 
+            // Check if the option has an argument
+            if (option.getArgument() != null) {
+                Object value = commandLine.getOptionValue(option.getPreferredName());
+                if (value != null) {
+                    if (value.getClass().isArray()) {
+                        Object[] values = (Object[]) value;
+                        option.validateArgument(values[0]);
+                    } else {
+                        option.validateArgument(value);
+                    }
+                }
+            } else {
                 option.validate(commandLine);
             }
         }
+    }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
+        Object value = commandLine.getOptionValue(option.getPreferredName());
+        if (value != null) {
+            if (value.getClass().isArray()) {
+                Object[] values = (Object[]) value;
+                option.validateArgument(values[0]);
+            } else {
+                option.validateArgument(value);
+            }
+        } else {
             option.validate(commandLine);
         }
     }
+}
\ No newline at end of file
