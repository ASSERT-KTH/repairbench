diff --git a/tmp/7a3ef61a-70ac-467f-a39e-a22c4488be0a_buggy.java b/tmp/ce5b11c2-0cce-4066-8073-df33dde3d593_fixed.java
index 71189c3..015b2b8 100644
--- a/tmp/7a3ef61a-70ac-467f-a39e-a22c4488be0a_buggy.java
+++ b/tmp/ce5b11c2-0cce-4066-8073-df33dde3d593_fixed.java
@@ -1,46 +1,44 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+        // validate groupable options first, like Groups and required options
+        if (option.isRequired() || option instanceof Group) {
             option.validate(commandLine);
         }
 
-            // if the child option is present then validate it
+        // separate check for each option's presence
         if (commandLine.hasOption(option)) {
+            // check if max count exceeded
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
 
+            // validate each individual option based on its type
             option.validate(commandLine);
         }
     }
 
-        // too many options
+    // handle errors for too many or too few options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
-
-        // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
-        // validate each anonymous argument
+    // validate anonymous arguments based on their specific types
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
