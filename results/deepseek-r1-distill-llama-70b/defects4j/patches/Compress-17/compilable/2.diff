diff --git a/tmp/890f12dc-773b-43c3-a598-8a9be2fd3ce9_buggy.java b/tmp/830787d1-78cb-4c10-a24a-7c85ec8296f1_fixed.java
index 3b9a3c0..07c6cb2 100644
--- a/tmp/890f12dc-773b-43c3-a598-8a9be2fd3ce9_buggy.java
+++ b/tmp/830787d1-78cb-4c10-a24a-7c85ec8296f1_fixed.java
@@ -1,71 +1,50 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long result = 0;
         int end = offset + length;
-        int     start = offset;
 
         if (length < 2) {
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
+        int start = offset;
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end && buffer[start] == ' ') {
             start++;
-            } else {
-                break;
         }
+
+        if (start >= end) {
+            return 0L;
+        }
+
+        if (buffer[start] == 0) {
+            return 0L;
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+        // Determine the actual end, considering trailing space or NUL and an additional one
+        int trailingIndex = end - 1;
+        while (trailingIndex >= start && (buffer[trailingIndex] == 0 || buffer[trailingIndex] == ' ')) {
+            trailingIndex--;
         }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+        int newEnd = trailingIndex + 1;
+
+        int digits = newEnd - start;
+        if (digits == 0) {
+            return 0L;
+        }
+
+        if (digits > 12) { // Since 2^40 is larger than Long.MAX_VALUE, limit to 12 digits for octal
+            throw new IllegalArgumentException("Octal string too long: " + digits + " digits");
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+        for (int i = start; i < newEnd; i++) {
+            byte currentByte = buffer[i];
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0');
         }
 
         return result;
     }
\ No newline at end of file
