diff --git a/tmp/37def8fb-1a80-41db-897e-6aa83571e633_buggy.java b/tmp/cfeb1044-270b-4fcf-babd-c9c686a5e805_fixed.java
index b91f7de..7a7ff82 100644
--- a/tmp/37def8fb-1a80-41db-897e-6aa83571e633_buggy.java
+++ b/tmp/cfeb1044-270b-4fcf-babd-c9c686a5e805_fixed.java
@@ -1,69 +1,50 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2");
+        }
+        
         int end = offset + length;
         int start = offset;
 
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
+        // Check if all bytes are NUL
+        boolean allNull = true;
+        for (int i = offset; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNull = false;
+                break;
             }
-
-        if (buffer[start] == 0) {
+        }
+        if (allNull) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end && buffer[start] == ' ') {
             start++;
-            } else {
-                break;
         }
+
+        // Check for leading NUL
+        if (start < end && buffer[start] == 0) {
+            return 0L;
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+        // Trim trailing spaces and NULs
+        end = offset + length;
+        while (end > start && (buffer[end - 1] == ' ' || buffer[end - 1] == 0)) {
             end--;
-            trailer = buffer[end - 1];
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
+        for (int i = start; i < end; i++) {
+            byte currentByte = buffer[i];
             if (currentByte == 0) {
-                break;
+                throw new IllegalArgumentException("Embedded NUL at position " + i);
             }
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    "Invalid octal character: " + currentByte + " at position " + i);
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) | (currentByte - '0');
         }
 
         return result;
     }
\ No newline at end of file
