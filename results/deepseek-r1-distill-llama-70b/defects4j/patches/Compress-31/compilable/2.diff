diff --git a/tmp/c92313e4-d17a-4b04-8328-b04bab9bd8ad_buggy.java b/tmp/55677732-b7c7-4ccd-b688-dc34ad23a77e_fixed.java
index b91f7de..0870b47 100644
--- a/tmp/c92313e4-d17a-4b04-8328-b04bab9bd8ad_buggy.java
+++ b/tmp/55677732-b7c7-4ccd-b688-dc34ad23a77e_fixed.java
@@ -1,69 +1,40 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
         if (length < 2) {
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
+        int start = offset;
+        int end = offset + length;
 
         // Skip leading spaces
         while (start < end) {
             if (buffer[start] == ' ') {
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+        // Check for leading NUL after spaces
+        if (start >= end || buffer[start] == 0) {
+            return 0L;
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
+        // Check each byte in the buffer for invalid characters
+        for (int i = start; i < end; i++) {
+            final byte current = buffer[i];
+            if (current == 0 || current == ' ') {
+                throw new IllegalArgumentException("Embedded space or NUL");
             }
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            if (current < '0' || current > '7') {
+                throw new IllegalArgumentException("Invalid character in octal string: " + current);
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
         }
 
+        // Now parse the octal digits
+        long result = 0;
+        for (int i = start; i < end; i++) {
+            result = (result << 3) + (buffer[i] - '0');
+        }
         return result;
     }
\ No newline at end of file
