diff --git a/tmp/2fed344f-3feb-416f-bd97-4edcd8b40e01_buggy.java b/tmp/a20b5511-1bf0-4011-bd22-2d8f41bbadbd_fixed.java
index 2d9cf24..c7b699b 100644
--- a/tmp/2fed344f-3feb-416f-bd97-4edcd8b40e01_buggy.java
+++ b/tmp/a20b5511-1bf0-4011-bd22-2d8f41bbadbd_fixed.java
@@ -1,33 +1,38 @@
 public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
 {
-        // There are certain nasty classes that could cause problems, mostly
-        // via default typing -- catch them here.
+    // Check for illegal class names that are explicitly configured
     final Class<?> raw = type.getRawClass();
     String full = raw.getName();
 
+    if (_cfgIllegalClassNames.contains(full)) {
+        throw JsonMappingException.from(ctxt,
+                String.format("Illegal type (%s) to deserialize: explicitly prohibited", full));
+    }
+
     main_check:
     do {
-            if (_cfgIllegalClassNames.contains(full)) {
-                break;
-            }
-
-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
-            //    for some Spring framework types
-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
+        // Additional checks for classes from specific packages
         if (full.startsWith(PREFIX_STRING)) {
+            boolean foundAllowedSuperclass = false;
             for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
                 String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
+                // Check if any superclass is one of the allowed names
                 if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                         || "AbstractApplicationContext".equals(name)) {
+                    foundAllowedSuperclass = true;
+                    break;
+                }
+            }
+            if (foundAllowedSuperclass) {
+                return;
+            } else {
                 break main_check;
             }
-                }
-            }
+        } else {
             return;
+        }
     } while (false);
 
     throw JsonMappingException.from(ctxt,
-                String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
+            String.format("Illegal type (%s) to deserialize: prohibited by security configuration", full));
 }
\ No newline at end of file
