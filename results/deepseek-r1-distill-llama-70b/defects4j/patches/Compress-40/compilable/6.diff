diff --git a/tmp/d1a83efa-3fa8-49f0-b114-dec74d6f9ab8_buggy.java b/tmp/62c025f5-d9c7-421b-8412-ce28831363b2_fixed.java
index 7116384..56adf78 100644
--- a/tmp/d1a83efa-3fa8-49f0-b114-dec74d6f9ab8_buggy.java
+++ b/tmp/62c025f5-d9c7-421b-8412-ce28831363b2_fixed.java
@@ -1,39 +1,28 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+                bitsCached |= nextByte << bitsCachedSize;
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize +=8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
         } else {
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
         }
+        bitsCached >>= count;
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
