diff --git a/tmp/9513ebf3-f84d-4f8b-a40d-a6b1d4b7f107_buggy.java b/tmp/de79c987-5b32-431c-a767-75d92c2504da_fixed.java
index b12de99..5e4dd25 100644
--- a/tmp/9513ebf3-f84d-4f8b-a40d-a6b1d4b7f107_buggy.java
+++ b/tmp/de79c987-5b32-431c-a767-75d92c2504da_fixed.java
@@ -1,52 +1,38 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
     if (t.inGlobalScope()) {
         return;
     }
 
     if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
     }
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
-        return;
-      }
-
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+    // Only process variables in function scopes
+    if (t.getScopeDepth() > 2) {
+        if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
             String name = n.getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+            Scope currentScope = t.getScope();
+            Var var = currentScope.getVar(name);
             if (var != null) {
                 Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
+                if (ownerScope != currentScope && ownerScope.isLocal()) {
                     data.get(ownerScope.getRootNode()).recordAssignedName(name);
                 }
-
-          if (scope != ownerScope && ownerScope.isLocal()) {
+                // Check if the variable is used in a closure, indicating it's escaped
+                if (currentScope.getOwnerFunction() != null) {
                     data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
                 }
             }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+        } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
             String name = NodeUtil.getRootOfQualifiedName(n).getString();
             Scope scope = t.getScope();
             Var var = scope.getVar(name);
             if (var != null) {
                 Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+                if (scope != ownerScope && ownerScope.isLocal() && scope.getOwnerFunction() != null) {
+                    data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());
+                }
             }
         }
     }
 }
\ No newline at end of file
