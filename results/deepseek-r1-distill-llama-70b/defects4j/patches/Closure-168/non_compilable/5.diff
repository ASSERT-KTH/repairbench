diff --git a/tmp/0be187e4-9e7f-48ed-80ea-f3c181256468_buggy.java b/tmp/35df9f1a-ba87-4263-a175-b0b9cbd6e17f_fixed.java
index b12de99..0d98286 100644
--- a/tmp/0be187e4-9e7f-48ed-80ea-f3c181256468_buggy.java
+++ b/tmp/35df9f1a-ba87-4263-a175-b0b9cbd6e17f_fixed.java
@@ -1,52 +1,59 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
       if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
         return;
       }
 
       if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+        Scope currentScope = t.getScope();
+        Var var = null;
+        Scope searchScope = currentScope;
+        // Traverse up the scope hierarchy to find the variable
+        while (searchScope != null) {
+          var = searchScope.getVar(name);
+          if (var != null) {
+            break;
+          }
+          searchScope = searchScope.getParent();
+        }
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
-          }
-
-          if (scope != ownerScope && ownerScope.isLocal()) {
+            if (currentScope != ownerScope) {
               data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
             }
           }
+        }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+        Scope currentScope = t.getScope();
+        Var var = null;
+        Scope searchScope = currentScope;
+        // Traverse up the scope hierarchy to find the variable
+        while (searchScope != null) {
+          var = searchScope.getVar(name);
+          if (var != null) {
+            break;
+          }
+          searchScope = searchScope.getParent();
+        }
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
       }
     }
\ No newline at end of file
