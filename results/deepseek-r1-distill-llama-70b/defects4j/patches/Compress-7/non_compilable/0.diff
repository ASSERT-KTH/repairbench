diff --git a/tmp/86a7d716-84fb-40ef-b822-65d6c58fff8e_buggy.java b/tmp/9f2e1fe5-ad37-4d85-9137-fc0b1f061179_fixed.java
index d6662c7..e20caca 100644
--- a/tmp/86a7d716-84fb-40ef-b822-65d6c58fff8e_buggy.java
+++ b/tmp/9f2e1fe5-ad37-4d85-9137-fc0b1f061179_fixed.java
@@ -1,23 +1,26 @@
-    /**
-     * Parse an entry name from a buffer.
-     * Parsing stops when a NUL is found
-     * or the buffer length is reached.
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse.
-     * @return The entry name.
-     */
 public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
-        int          end = offset + length;
+    CharsetDecoder decoder = Charset.forName("UTF-8").newDecoder();
+    decoder.onMalformedInput(CodingErrorAction.REPLACE);
+    decoder.onUnmappableCharacter(CodingErrorAction.REPLACE);
     
-        for (int i = offset; i < end; ++i) {
-            if (buffer[i] == 0) {
+    ByteBuffer byteBuffer = ByteBuffer.wrap(buffer, offset, length);
+    CharBuffer charBuffer = CharBuffer.allocate(length);
+    
+    try {
+        decoder.decode(byteBuffer, charBuffer, false);
+    } catch (CharacterCodingException e) {
+        // Handle decoding exception if necessary
+    }
+    
+    charBuffer.rewind();
+    StringBuffer result = new StringBuffer();
+    for (int i = 0; i < charBuffer.limit(); ++i) {
+        char c = charBuffer.get();
+        if (c == 0) { // Stop at NUL byte
             break;
         }
-            result.append((char) buffer[i]);
+        result.append(c);
     }
     
     return result.toString();
 }
\ No newline at end of file
