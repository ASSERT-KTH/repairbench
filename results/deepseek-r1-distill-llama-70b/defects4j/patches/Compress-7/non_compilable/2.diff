diff --git a/tmp/77d56e33-63b9-4fda-90a3-ea7b5d3a49c7_buggy.java b/tmp/f0111a22-5fc2-4834-8ba0-23ac1a83e71c_fixed.java
index d6662c7..a7f333d 100644
--- a/tmp/77d56e33-63b9-4fda-90a3-ea7b5d3a49c7_buggy.java
+++ b/tmp/f0111a22-5fc2-4834-8ba0-23ac1a83e71c_fixed.java
@@ -1,23 +1,18 @@
-    /**
-     * Parse an entry name from a buffer.
-     * Parsing stops when a NUL is found
-     * or the buffer length is reached.
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse.
-     * @return The entry name.
-     */
 public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
     int end = offset + length;
+    int nullIndex = -1;
 
+    // Find the first NUL byte within the range
     for (int i = offset; i < end; ++i) {
         if (buffer[i] == 0) {
+            nullIndex = i;
             break;
         }
-            result.append((char) buffer[i]);
     }
 
-        return result.toString();
+    // If NUL found within the range, adjust end to nullIndex, else use original end
+    int endIndex = (nullIndex != -1 && nullIndex < end) ? nullIndex : end;
+
+    // Create a subarray up to the endIndex and decode it using ISO-8859-1
+    return new String(Arrays.copyOfRange(buffer, offset, endIndex), StandardCharsets.ISO_8859_1);
 }
\ No newline at end of file
