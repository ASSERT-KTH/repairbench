diff --git a/tmp/9ae8b754-ee8e-4abb-a688-b8b5675bf924_buggy.java b/tmp/52361dc7-7411-46e4-a9fd-ae37b34c6c7e_fixed.java
index 730ab7d..3204afe 100644
--- a/tmp/9ae8b754-ee8e-4abb-a688-b8b5675bf924_buggy.java
+++ b/tmp/52361dc7-7411-46e4-a9fd-ae37b34c6c7e_fixed.java
@@ -1,48 +1,44 @@
     /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
+     * Parses the raw bytes read from the central directory extra field with knowledge of which fields are expected.
      *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
+     * <p>All four fields inside the zip64 extended information extra field are optional and must only be present
+     * if their corresponding entry inside the central directory contains the correct magic value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
+            int expectedLength = (hasUncompressedSize ? 8 : 0)
+                + (hasCompressedSize ? 8 : 0)
+                + (hasRelativeHeaderOffset ? 8 : 0)
+                + (hasDiskStart ? 4 : 0);
             if (rawCentralDirectoryData.length != expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
                                        + " data.  Expected length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += 8;
             }
             if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
-                offset += DWORD;
+                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                offset += 8;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += 8;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                offset += 4;
             }
         }
     }
\ No newline at end of file
