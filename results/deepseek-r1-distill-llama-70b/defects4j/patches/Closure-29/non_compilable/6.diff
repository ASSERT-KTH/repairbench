diff --git a/tmp/34e73ac3-9f2e-4098-bf7b-12b6d3060eaa_buggy.java b/tmp/77ca9c3b-c304-4da7-a7fb-21ef231c2edc_fixed.java
index be9c8a3..54c1306 100644
--- a/tmp/34e73ac3-9f2e-4098-bf7b-12b6d3060eaa_buggy.java
+++ b/tmp/77ca9c3b-c304-4da7-a7fb-21ef231c2edc_fixed.java
@@ -1,94 +1,82 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
+      List<Node> vals = new ArrayList<>();
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
             return false;
           }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
-          continue;
+          // Cannot inline if the property reference is indirect.
+          return false;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
+        vals.add(val);
+      }
+
+      // All assignments must be object literals
+      if (vals.isEmpty()) {
+        return false;
+      }
+
+      // Make sure that the value is not self-referenceable.
+      for (Node val : vals) {
+        // Check each child of the object literal
         for (Node child = val.getFirstChild(); child != null;
             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+          if (child.isGetterDef() || child.isSetterDef()) {
+            // ES5 getter/setters are not supported.
             return false;
           }
 
-
           Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
-          for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
+          if (childVal != null && !childVal.isQmark()) {
+            // Check if any of childVal's parents match any reference's parent
+            for (Reference ref : refs) {
+              Node refParent = ref.getParent().getParent();
+              if (isAncestor(childVal, refParent)) {
+                // Self-referential assignment
                 return false;
               }
-              refNode = refNode.getParent();
+            }
           }
         }
       }
 
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
       ret = true;
-      }
       return ret;
     }
\ No newline at end of file
