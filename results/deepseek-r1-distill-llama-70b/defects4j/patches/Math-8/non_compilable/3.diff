diff --git a/tmp/3e8a786f-2127-4a8f-babf-0a6b07b85ae9_buggy.java b/tmp/c15e5375-a922-4e17-87de-d85320bc4657_fixed.java
index bfa2423..b684e5e 100644
--- a/tmp/3e8a786f-2127-4a8f-babf-0a6b07b85ae9_buggy.java
+++ b/tmp/c15e5375-a922-4e17-87de-d85320bc4657_fixed.java
@@ -1,23 +1,57 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    if (distribution.isEmpty()) {
+        throw new NotStrictlyPositiveException(LocalizedFormats.EMPTY_DISTRIBUTION);
+    }
+
+    final double[] probabilities = distribution.getProbabilities();
+    final double sum = probabilitiesSum(probabilities);
+    final double[] cumulative = probabilitiesCumulative(sum);
+
+    final TypeInformation<?> typeInfo = distribution.getTypeInformation();
+    final Class<T> type = (Class<T>) typeInfo.getType();
+
+    final T[] out = NewArrayContainer.newArray(type, sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
+        final double r = randomData.nextUniform(0, 1);
+        for (int j = 0; j < distribution.size(); j++) {
+            if (r <= cumulative[j]) {
+                out[i] = distribution.get(j);
+                break;
+            }
+        }
     }
 
     return out;
+}
+
+private double probabilitiesSum(final double[] probabilities) {
+    double ret = 0;
+    for (double p : probabilities) {
+        ret += p;
+    }
+    return ret;
+}
 
+private double[] probabilitiesCumulative(final double sum) {
+    final int length = distribution.size();
+    final double[] cumulative = new double[length];
+    double sumProbabilities = 0;
+    for (int i = 0; i < length; i++) {
+        final double probability = distribution.getProbability(i);
+        if (probability < 0) {
+            throw new IllegalStateException(LocalizedMathBase.INSTANCE().negativeProbability());
+        }
+        sumProbabilities += probability;
+        cumulative[i] = sumProbabilities / sum;
+    }
+    if (sumProbabilities > 0 && Math.abs(sumProbabilities - sum) > 1e-15) {
+        throw new IllegalStateException(LocalizedMathBase.INSTANCE().sumNotEqual(probabilitiesSum(distribution.getProbabilities()), sum));
+    }
+    return cumulative;
 }
\ No newline at end of file
