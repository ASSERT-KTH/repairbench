diff --git a/tmp/76087bfb-8324-494f-a07a-5b67f040a943_buggy.java b/tmp/c484c1a9-d88d-47f1-a319-04e8b70a42e2_fixed.java
index 6f24eb6..cef6e67 100644
--- a/tmp/76087bfb-8324-494f-a07a-5b67f040a943_buggy.java
+++ b/tmp/c484c1a9-d88d-47f1-a319-04e8b70a42e2_fixed.java
@@ -1,99 +1,99 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
+   * @param parent The parent of the getprop node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
+      // Determine if this access is an override attempt in a different file
       boolean isOverride = t.inGlobalScope() &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
+      String currentInput = t.getInput().getName();
 
-      // Find the lowest property defined on a class with visibility
-      // information.
+      // Traverse to the lowest relevant class with visibility info
       if (isOverride) {
+        // Move up the prototype chain
         objectType = objectType.getImplicitPrototype();
       }
+
       JSDocInfo docInfo = null;
       for (; objectType != null;
            objectType = objectType.getImplicitPrototype()) {
         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
         if (docInfo != null &&
             docInfo.getVisibility() != Visibility.INHERITED) {
           break;
         }
       }
 
       if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+        // No visibility found; default to public
         return;
       }
 
-      boolean sameInput =
-          t.getInput().getName().equals(docInfo.getSourceName());
+      boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());
       Visibility visibility = docInfo.getVisibility();
       JSType ownerType = normalizeClassType(objectType);
-      if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
-        JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+      if (isOverride) {
+        // Check for overriding visibility rules
         if (visibility == Visibility.PRIVATE && !sameInput) {
           compiler.report(
               t.makeError(getprop, PRIVATE_OVERRIDE,
                   objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
+        } else {
+          JSDocInfo overridingInfo = parent.getJSDocInfo();
+          Visibility overridingVisibility = overridingInfo == null
+              ? Visibility.INHERITED
+              : overridingInfo.getVisibility();
+
+          if (overridingVisibility != Visibility.INHERITED &&
               overridingVisibility != visibility) {
             compiler.report(
                 t.makeError(getprop, VISIBILITY_MISMATCH,
                     visibility.name(), objectType.toString(),
                     overridingVisibility.name()));
           }
+        }
       } else {
         if (sameInput) {
-          // private access is always allowed in the same file.
+          // Same input allows private access
           return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
+        } else if (visibility == Visibility.PRIVATE) {
           if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
+              isValidPrivateConstructorAccess(parent, currentInput)) {
             return;
           }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
+          if (!isOverride && currentClass != null &&
+              !currentClass.isSubtype(ownerType)) {
             compiler.report(
-              t.makeError(getprop,
-                  BAD_PRIVATE_PROPERTY_ACCESS,
+                t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
                     propertyName,
-                  validator.getReadableJSTypeName(
-                      getprop.getFirstChild(), true)));
+                    validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
+          }
         } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
+          // Ensure protected access is within the same class hierarchy
           if (currentClass == null || !currentClass.isSubtype(ownerType)) {
             compiler.report(
                 t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                     propertyName,
-                    validator.getReadableJSTypeName(
-                        getprop.getFirstChild(), true)));
+                    validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
           }
         }
       }
     }
   }
+
+  private boolean isValidPrivateConstructorAccess(Node parent, String currentInput) {
+    // Check if we're accessing a private constructor within the same file
+    JSDocInfo parentDoc = parent.getJSDocInfo();
+    return parentDoc != null && parentDoc.getVisibility() == Visibility.PRIVATE &&
+           currentInput.equals(parentDoc.getSourceName());
+  }
\ No newline at end of file
