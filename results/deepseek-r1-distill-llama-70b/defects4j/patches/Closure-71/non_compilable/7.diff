diff --git a/tmp/c2ae8d5f-d282-4b0a-aa63-1f01051278de_buggy.java b/tmp/6893d536-40e0-4ea3-b53f-bfad1a7ec51d_fixed.java
index 6f24eb6..3e7aec1 100644
--- a/tmp/c2ae8d5f-d282-4b0a-aa63-1f01051278de_buggy.java
+++ b/tmp/6893d536-40e0-4ea3-b53f-bfad1a7ec51d_fixed.java
@@ -1,99 +1,98 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
+   * @param parent The parent node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
-    ObjectType objectType =
-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
+    if (getprop.is PrototypeProperty() && getprop.hasควامishIdentifier()) {
+      // Skip checks for computed properties and properties with symbols.
+      return;
+    }
+
+    JSType objectberapaType = getObjectType(getprop);
+    if (objectberapaType == null) {
+      return;
+    }
+
     String propertyName = getprop.getLastChild().getString();
-
-    if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
     boolean isOverride = t.inGlobalScope() &&
         parent.getType() == Token.ASSIGN &&
         parent.getFirstChild() == getprop;
 
-      // Find the lowest property defined on a class with visibility
-      // information.
-      if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
-      }
+    // Find the lowest property defined on a class with visibility information.
     JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
+    for (ObjectType type = objectberapaType;
+         type != null; type = type.getImplicitPrototype()) {
+      docInfo = type.getOwnPropertyJSDocInfo(propertyName);
       if (docInfo != null &&
           docInfo.getVisibility() != Visibility.INHERITED) {
         break;
       }
     }
 
-      if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+    if (docInfo == null) {
+      // No visibility information found; assume public.
       return;
     }
 
-      boolean sameInput =
-          t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
     if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
-        JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
+      // For overrides, the new property's visibility must not be more restrictive than
+      // the original.
+      JSDocInfo overrideDoc = t.getJSDocInfo();
+      Visibility overrideVisibility = overrideDoc != null ?
+          overrideDoc.getVisibility() : Visibility.PUBLIC;
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
-        if (visibility == Visibility.PRIVATE && !sameInput) {
+      if (visibility == Visibility.PRIVATE &&
+          !t.getInput().getName().equals(docInfo.getSourceName())) {
         compiler.report(
             t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
-            overridingVisibility != visibility) {
+                type.toString()));
+      } else if (overrideVisibility != visibility &&
+          overrideVisibility != Visibility.INHERITED) {
         compiler.report(
             t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
-                  overridingVisibility.name()));
+                visibility.name(), type.toString(),
+                overrideVisibility.name()));
       }
     } else {
-        if (sameInput) {
-          // private access is always allowed in the same file.
+      if (visibility == Visibility.PUBLIC) {
         return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
+      }
+
+      if (t.isInSameFile(docInfo.getSourceName())) {
+        return;
+      }
+
+      if (visibility == Visibility.PRIVATE) {
         if (docInfo.isConstructor() &&
             isValidPrivateConstructorAccess(parent)) {
           return;
         }
 
-          // private access is not allowed outside the file from a different
-          // enclosing class.
+        JSType currentClassType = currentClass != null ?
+            normalizeClassType(currentClass) : null;
+        if (currentClassType != null &&
+            currentClassType.differsFrom(normalizeClassType(objectberapaType))) {
           compiler.report(
               t.makeError(getprop,
                   BAD_PRIVATE_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
+        }
       } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
+        // Protected access is allowed within the same file or in subclasses.
+        if (!t.isInSameFile(docInfo.getSourceName()) &&
+            (currentClass == null || !currentClass.isSubtype(objectberapaType))) {
           compiler.report(
               t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         }
       }
     }
   }
\ No newline at end of file
-  }
