diff --git a/tmp/d50868fe-98cc-487d-900c-72fe45a8c50d_buggy.java b/tmp/aa19450c-68e5-4633-bd6a-f4e4c2844b5f_fixed.java
index 6f24eb6..39e19c3 100644
--- a/tmp/d50868fe-98cc-487d-900c-72fe45a8c50d_buggy.java
+++ b/tmp/aa19450c-68e5-4633-bd6a-f4e4c2844b5f_fixed.java
@@ -1,99 +1,91 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
+   * @param parent The parent node of the getprop.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
+      // Determine if this is an override scenario.
       boolean isOverride = t.inGlobalScope() &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
 
-      // Find the lowest property defined on a class with visibility
-      // information.
+      // Find the property's visibility, considering implicit prototypes.
       if (isOverride) {
         objectType = objectType.getImplicitPrototype();
       }
       JSDocInfo docInfo = null;
       for (; objectType != null;
            objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
+       (docInfo = objectType.getOwnPropertyJSDocInfo(propertyName));
         if (docInfo != null &&
             docInfo.getVisibility() != Visibility.INHERITED) {
           break;
         }
       }
 
-      if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+      if (objectType == null || docInfo == null) {
         return;
       }
 
-      boolean sameInput =
-          t.getInput().getName().equals(docInfo.getSourceName());
+      // Determine if the access is within the same input and the visibility.
+      boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());
       Visibility visibility = docInfo.getVisibility();
       JSType ownerType = normalizeClassType(objectType);
-      if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
-        JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
-        if (visibility == Visibility.PRIVATE && !sameInput) {
+      if (isOverride) {
+        // When overriding a property, ensure visibility rules are followed.
+        if (visibility == Visibility.PRIVATE) {
+          // Cannot override a private property.
           compiler.report(
               t.makeError(getprop, PRIVATE_OVERRIDE,
                   objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
+        }
+        JSDocInfo overridingInfo = parent.getJSDocInfo();
+        Visibility overridingVisibility = overridingInfo == null
+            ? Visibility.INHERITED : overridingInfo.getVisibility();
+
+        if (overridingVisibility != Visibility.INHERITED &&
             overridingVisibility != visibility) {
           compiler.report(
               t.makeError(getprop, VISIBILITY_MISMATCH,
                   visibility.name(), objectType.toString(),
                   overridingVisibility.name()));
         }
       } else {
         if (sameInput) {
-          // private access is always allowed in the same file.
+          // Access within the same file is always allowed.
           return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
+        } else if (visibility == Visibility.PRIVATE) {
+          // Check if accessing a private property outside its declaring file.
+          if (currentClass == null || ownerType.differsFrom(currentClass)) {
             if (docInfo.isConstructor() &&
                 isValidPrivateConstructorAccess(parent)) {
               return;
             }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
             compiler.report(
                 t.makeError(getprop,
                     BAD_PRIVATE_PROPERTY_ACCESS,
                     propertyName,
                     validator.getReadableJSTypeName(
                         getprop.getFirstChild(), true)));
+          }
         } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
+          // Ensure protected access is within allowed contexts.
           if (currentClass == null || !currentClass.isSubtype(ownerType)) {
             compiler.report(
                 t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                     propertyName,
                     validator.getReadableJSTypeName(
                         getprop.getFirstChild(), true)));
           }
         }
       }
     }
   }
\ No newline at end of file
