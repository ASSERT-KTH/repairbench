diff --git a/tmp/ee4a42ac-5d8b-4e51-9974-398bb41a29c3_buggy.java b/tmp/36be2f00-e4ad-4a5a-b5a2-2b68cdd907fd_fixed.java
index 5481b94..dfeea58 100644
--- a/tmp/ee4a42ac-5d8b-4e51-9974-398bb41a29c3_buggy.java
+++ b/tmp/36be2f00-e4ad-4a5a-b5a2-2b68cdd907fd_fixed.java
@@ -1,49 +1,40 @@
 public Object handle(Invocation invocation) throws Throwable {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
-            // stubbing voids with stubVoid() or doAnswer() style
-            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
-                            .getArgumentMatcherStorage(), invocation);
+        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
     VerificationMode verificationMode = mockingProgress.pullVerificationMode();
+    VerificationMode currentVerificationMode = verificationMode;
 
-        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
-                        invocation);
+    InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);
 
     mockingProgress.validateState();
 
-        //if verificationMode is not null then someone is doing verify()        
-        if (verificationMode != null) {
-            //We need to check if verification was started on the correct mock 
-            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+    if (currentVerificationMode != null) {
+        if (currentVerificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) currentVerificationMode).getMock() == invocation.getMock()) {
             VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
-                verificationMode.verify(data);
+            currentVerificationMode.verify(data);
+            mockingProgress.pushVerificationMode(currentVerificationMode); // Re-push the verification mode
             return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+        } else {
+            // Re-push the verification mode if it's not applicable for the current mock
+            mockingProgress.pushVerificationMode(currentVerificationMode); 
         }
     }
     
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
     OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
     mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
     StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
     if (stubbedInvocation != null) {
         stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
         Object ret = mockSettings.getDefaultAnswer().answer(invocation);
-
-            // redo setting invocation for potential stubbing in case of partial
-            // mocks / spies.
-            // Without it, the real method inside 'when' might have delegated
-            // to other self method and overwrite the intended stubbed method
-            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
         return ret;
     }
 }
\ No newline at end of file
