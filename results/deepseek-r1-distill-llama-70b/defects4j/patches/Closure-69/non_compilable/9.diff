diff --git a/tmp/6fb47e70-f51b-44ae-a32a-be863cb1efec_buggy.java b/tmp/bcf63dfd-ffdc-4553-a203-dd048d348d6e_fixed.java
index bf9c086..ab30232 100644
--- a/tmp/6fb47e70-f51b-44ae-a32a-be863cb1efec_buggy.java
+++ b/tmp/bcf63dfd-ffdc-4553-a203-dd048d348d6e_fixed.java
@@ -1,54 +1,52 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
-    // A couple of types can be called as if they were functions.
-    // If it is a function type, then validate parameters.
+    // Check if the function expects a specific 'this' type and is not called appropriately.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
+      // If the function type has a 'this' type specified.
+      if (functionType_THIS_TYPE != null && functionType_THIS_TYPE != getGlobalJSType()) {
+        // Verify that the function is being called in a GETPROP or GETELEM context.
+        Node parent = n.getParent();
+        if (!(parent instanceof GetProp || parent instanceof GetElem)) {
+          report(t, n, TYPE_ERROR, "Function with 'this' type must be called in a method call context");
+        }
+      }
+
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
