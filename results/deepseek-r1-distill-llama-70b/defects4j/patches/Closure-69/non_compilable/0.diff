diff --git a/tmp/5d391378-65a3-47ae-809f-f54c124e981a_buggy.java b/tmp/e8356c76-0549-48ae-927b-5b573381ab24_fixed.java
index bf9c086..f47f37c 100644
--- a/tmp/5d391378-65a3-47ae-809f-f54c124e981a_buggy.java
+++ b/tmp/e8356c76-0549-48ae-927b-5b573381ab24_fixed.java
@@ -1,54 +1,79 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
+    // Check if the function requires a specific 'this' type and ensure it's called correctly
+    if (childType instanceof FunctionType) {
+      FunctionType functionType = (FunctionType) childType;
+      JSType thisType = functionType.getThisType();
+
+      if (thisType != null && !isCalledInPropertyContext(n)) {
+        report(t, n, "calling function with explicit 'this' type "
+            + thisType.toString() + " requires it to be called as a method");
+      }
+    }
+
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
+      // Functions with explicit 'this' types must be called in a GETPROP
       // or GETELEM.
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
+
+  private boolean isCalledInPropertyContext(Node callNode) {
+    Node parent = callNode.getParent();
+    if (parent != null) {
+      switch (parent.getToken()) {
+        case GETPROP:
+        case GETELEM:
+          return true;
+        default:
+          return false;
+      }
+    }
+    return false;
+  }
\ No newline at end of file
