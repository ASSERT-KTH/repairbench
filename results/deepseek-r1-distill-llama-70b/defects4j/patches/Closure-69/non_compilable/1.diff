diff --git a/tmp/63ba1a46-1dcc-4e82-af69-0ad21783ac2c_buggy.java b/tmp/1e6f19cc-da21-48e5-b9a0-081b84508427_fixed.java
index bf9c086..54e446b 100644
--- a/tmp/63ba1a46-1dcc-4e82-af69-0ad21783ac2c_buggy.java
+++ b/tmp/1e6f19cc-da21-48e5-b9a0-081b84508427_fixed.java
@@ -1,54 +1,55 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
+      // Ensure functions with explicit 'this' types are called in GETPROP or GETELEM.
+      JSType thisType = functionType.getThisType();
+      if (thisType != null) {
+        Node parent = n.getParent();
+        if (!(parent instanceof GetProp || parent instanceof GetElem)) {
+          report(t, n, THIS_TYPE_WRONG_CALL, thisType.toString());
+        }
+      }
+
+      // Functions with explicit 'this' types must be called in a GETPROP
       // or GETELEM.
-
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
