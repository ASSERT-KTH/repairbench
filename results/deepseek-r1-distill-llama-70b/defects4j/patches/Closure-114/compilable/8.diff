diff --git a/tmp/41c1763f-889f-41e8-9b3e-861dfb6193a1_buggy.java b/tmp/7808fc80-7295-4232-a2db-0895d7b251db_fixed.java
index c51c8b1..f343545 100644
--- a/tmp/41c1763f-889f-41e8-9b3e-861dfb6193a1_buggy.java
+++ b/tmp/7808fc80-7295-4232-a2db-0895d7b251db_fixed.java
@@ -1,31 +1,26 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns != null) {
     if (parent.isFor() && !NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
       if (parent.getFirstChild().getNext() != n) {
         recordDepScope(recordNode, ns);
       } else {
         recordDepScope(nameNode, ns);
       }
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+      // Handle assignments that are part of function calls or expressions
+      // by ensuring both sides of the assignment are recorded
+      if (parent.isAssign()) {
+        Node rhs = parent.getLastChild();
+        // Create NameInformation for the RHS if applicable
+        NameInformation rhsNs = createNameInformation(t, rhs);
+        if (rhsNs != null) {
+          recordDepScope(rhs, rhsNs);
+        }
+      }
       recordDepScope(recordNode, ns);
     }
   }
 }
\ No newline at end of file
