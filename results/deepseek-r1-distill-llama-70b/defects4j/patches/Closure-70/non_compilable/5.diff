diff --git a/tmp/693a095f-3a8a-442d-86a3-dd5ba452be58_buggy.java b/tmp/01b89ab1-761b-4bca-a8cf-0576221d6f4e_fixed.java
index 1530b34..d9ebfd1 100644
--- a/tmp/693a095f-3a8a-442d-86a3-dd5ba452be58_buggy.java
+++ b/tmp/01b89ab1-761b-4bca-a8cf-0576221d6f4e_fixed.java
@@ -1,23 +1,39 @@
-    /**
-     * Declares all of a function's arguments.
-     */
 private void declareArguments(Node functionNode) {
-      Node astParameters = functionNode.getFirstChild().getNext();
-      Node body = astParameters.getNext();
+  // Starts by declaring all parameters from the AST.
+  Node parameters = functionNode.getFirstChild().getNext();
+  Node body = parameters.getNext();
   FunctionType functionType = (FunctionType) functionNode.getJSType();
   if (functionType != null) {
     Node jsDocParameters = functionType.getParametersNode();
     if (jsDocParameters != null) {
-          Node jsDocParameter = jsDocParameters.getFirstChild();
-          for (Node astParameter : astParameters.children()) {
-            if (jsDocParameter != null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
-              jsDocParameter = jsDocParameter.getNext();
-            } else {
-              defineSlot(astParameter, functionNode, null, true);
+      // Create a list of all JSDoc parameters, their names and types.
+      List<Node> jsDocParameterList = new ArrayList<>();
+      for (Node jsDocParam : jsDocParameters.children()) {
+        jsDocParameterList.add(jsDocParam.getJSType());
+      }
+
+      // Iterate over each parameter from the AST.
+      for (Node param : parameters.children()) {
+        boolean found = false;
+        String paramName = param.getFirstChild().getNext().getString();
+
+        // Check if there is a corresponding JSDoc parameter.
+        for (int i = 0; i < jsDocParameterList.size(); i++) {
+          Node jsDocParamType = jsDocParameterList.get(i);
+          if (jsDocParamType != null) {
+            found = true;
+            defineSlot(param, functionNode, jsDocParamType, true);
+            // Remove the parameter from the list to avoid reuse.
+            jsDocParameterList.set(i, null);
+            break;
+          }
+        }
+
+        // If no corresponding JSDoc parameter was found, declare without type.
+        if (!found) {
+          defineSlot(param, functionNode, null, true);
+        }
       }
     }
   }
 }
\ No newline at end of file
-    } // end declareArguments
