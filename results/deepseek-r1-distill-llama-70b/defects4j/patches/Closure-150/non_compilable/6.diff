diff --git a/tmp/1b33beb3-e9c4-488b-99b1-ee6377d194fa_buggy.java b/tmp/998ed163-2b91-4680-b596-7e32e4f63402_fixed.java
index 800e6e1..7bd0b28 100644
--- a/tmp/1b33beb3-e9c4-488b-99b1-ee6377d194fa_buggy.java
+++ b/tmp/998ed163-2b91-4680-b596-7e32e4f63402_fixed.java
@@ -1,32 +1,36 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
+      if (parent.getType() == Token.ASSIGN) {
+        Node target = parent.getFirstChild();
+        if (target.getType() == Token.GETPROP) {
+          Node left = target.getFirstChild();
+          String propName = target.getToken().getLiteral();
+          Variable var = scope.getVar(left.getString());
+          if (var != null) {
+            FunctionType funcType = extractFunctionType(n);
+            var.getType().addProperty(propName, funcType);
+          }
+        }
+      } else if (parent.getType() == Token.NAME) {
         return;
-          }
+      } else {
         defineDeclaredFunction(n, parent);
+      }
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
