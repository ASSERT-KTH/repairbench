diff --git a/tmp/d29ffcda-cb7e-4499-b9af-a9b7df41fa20_buggy.java b/tmp/275d6f6d-c572-4ef7-a586-35ebc2d1a7be_fixed.java
index b4e6f03..4585b06 100644
--- a/tmp/d29ffcda-cb7e-4499-b9af-a9b7df41fa20_buggy.java
+++ b/tmp/275d6f6d-c572-4ef7-a586-35ebc2d1a7be_fixed.java
@@ -1,44 +1,26 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
-            return ""; // nothing to make absolute with
+        return "";
     } else {
-            URL base;
+        URI base;
         try {
+            base = new URI(baseUri);
+        } catch (URISyntaxException e) {
+            // try to make relUrl absolute on its own
             try {
-                    base = new URL(baseUri);
-                } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+                return new URL(relUrl).toExternalForm();
+            } catch (MalformedURLException e1) {
+                return "";
+            }
         }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
-            } catch (MalformedURLException e) {
+        try {
+            URI abs = base.resolve(relUrl);
+            return abs.toURL().toExternalForm();
+        } catch (URISyntaxException | MalformedURLException e) {
             return "";
         }
     }
 }
\ No newline at end of file
