diff --git a/tmp/adbca05a-a322-4dbe-8769-079bf0341fb2_buggy.java b/tmp/f2224d01-7dc2-4a6a-a819-6d770df83709_fixed.java
index b4e6f03..fb46aca 100644
--- a/tmp/adbca05a-a322-4dbe-8769-079bf0341fb2_buggy.java
+++ b/tmp/f2224d01-7dc2-4a6a-a819-6d770df83709_fixed.java
@@ -1,44 +1,35 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
-            return ""; // nothing to make absolute with
+        return ""; // attribute was missing
     } else {
-            URL base;
+        if (relUrl.isEmpty()) {
+            return "";
+        }
+
         try {
-                try {
-                    base = new URL(baseUri);
+            URL absUrl = new URL(relUrl);
+            if (absUrl.getProtocol() != null) {
+                // Already absolute
+                return absUrl.toExternalForm();
+            }
         } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+            // Not a valid absolute URL, proceed to join with base
+        }
+
+        try {
+            URL base = new URL(baseUri);
+            String path = base.getPath();
+            if (relUrl.startsWith("?") && !path.endsWith("/")) {
+                // If relative URL is just query, and base path doesn't end with slash, append index file
+                relUrl = path.substring(0, path.lastIndexOf('/') + 1) + "?" + relUrl.substring(1);
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
             URL abs = new URL(base, relUrl);
             return abs.toExternalForm();
         } catch (MalformedURLException e) {
             return "";
         }
     }
 }
\ No newline at end of file
