diff --git a/tmp/86204a01-ade9-431a-b0e8-6956c9648f0d_buggy.java b/tmp/4f4733a2-8536-4924-a201-eb08fd894e86_fixed.java
index 2ce28b5..2c5ad7f 100644
--- a/tmp/86204a01-ade9-431a-b0e8-6956c9648f0d_buggy.java
+++ b/tmp/4f4733a2-8536-4924-a201-eb08fd894e86_fixed.java
@@ -1,72 +1,44 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
-        in.mark(signature.length);
+    final int tarHeaderSize = 512;
+    byte[] signature = new byte[tarHeaderSize];
+    in.mark(tarHeaderSize);
     try {
-            int signatureLength = in.read(signature);
+        int bytesRead = in.read(signature);
         in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
+
+        if (ZipArchiveInputStream.matches(signature, bytesRead)) {
             return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (JarArchiveInputStream.matches(signature, bytesRead)) {
             return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (ArArchiveInputStream.matches(signature, bytesRead)) {
             return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (CpioArchiveInputStream.matches(signature, bytesRead)) {
             return new CpioArchiveInputStream(in);
         }
 
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+        if (bytesRead >= 32 && DumpArchiveInputStream.matches(signature, bytesRead)) {
             return new DumpArchiveInputStream(in);
         }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+        if (bytesRead >= tarHeaderSize) {
+            // Check for Tar file with proper header validation
+            if (TarArchiveInputStream.matches(signature, bytesRead)) {
                 return new TarArchiveInputStream(in);
             }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
-                        return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
-                }
+            // Additional checks for specific Tar variations if necessary
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
