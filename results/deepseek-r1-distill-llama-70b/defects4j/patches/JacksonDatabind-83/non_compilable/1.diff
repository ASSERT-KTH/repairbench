diff --git a/tmp/97f2f0f2-5f6f-46c8-a202-814de3b73bdf_buggy.java b/tmp/9076d403-922e-4011-b1d6-785065814493_fixed.java
index abe09ae..d78c305 100644
--- a/tmp/97f2f0f2-5f6f-46c8-a202-814de3b73bdf_buggy.java
+++ b/tmp/9076d403-922e-4011-b1d6-785065814493_fixed.java
@@ -1,57 +1,83 @@
     @SuppressWarnings("unchecked")
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
         String text = p.getValueAsString();
         if (text != null) { // has String representation
             if (text.length() == 0 || (text = text.trim()).length() == 0) {
                 // 04-Feb-2013, tatu: Usually should become null; but not always
                 return _deserializeFromEmptyString();
             }
             Exception cause = null;
             try {
                 // 19-May-2017, tatu: Used to require non-null result (assuming `null`
                 //    indicated error; but that seems wrong. Should be able to return
                 //    `null` as value.
                 if (_deserialize(text, ctxt) != null) {
                     return _deserialize(text, ctxt);
                 }
             } catch (IllegalArgumentException iae) {
                 cause = iae;
             } catch (MalformedURLException me) {
                 cause = me;
             }
             String msg = "not a valid textual representation";
             if (cause != null) {
                 String m2 = cause.getMessage();
                 if (m2 != null) {
                     msg = msg + ", problem: "+m2;
                 }
             }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
+
+            // 05-May-2016, tatu: Check if there's a problem handler
+            Object handledValue = _handleWeirdValue(ctxt, text, msg, cause);
+            if (handledValue != null) {
+                return (T) handledValue;
+            }
+
+            // No handler, proceed to throw exception
             JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
             if (cause != null) {
                 e.initCause(cause);
             }
             throw e;
-            // nothing to do here, yet? We'll fail anyway
         }
         JsonToken t = p.getCurrentToken();
         // [databind#381]
         if (t == JsonToken.START_ARRAY) {
             return _deserializeFromArray(p, ctxt);
         }
         if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is
             Object ob = p.getEmbeddedObject();
             if (ob == null) {
                 return null;
             }
             if (_valueClass.isAssignableFrom(ob.getClass())) {
                 return (T) ob;
             }
             return _deserializeEmbedded(ob, ctxt);
         }
         return (T) ctxt.handleUnexpectedToken(_valueClass, p);
     }
+
+    protected Object _handleWeirdValue(DeserializationContext ctxt, String value, String msg, Exception cause) throws IOException {
+        if (ctxt == null) {
+            return null;
+        }
+        ProblemHandler problemHandler = ctxt.problemHandler();
+        if (problemHandler == null) {
+            return null;
+        }
+        // Attempt to handle weird string value
+        try {
+            return problemHandler.handleWeirdStringValue(ctxt, _valueClass, value, msg, cause);
+        } catch (IOException e) {
+            throw e;
+        } catch (Exception e) {
+            ctxt._handleException(e);
+            return null;
+        }
+        return null;
+    }
\ No newline at end of file
