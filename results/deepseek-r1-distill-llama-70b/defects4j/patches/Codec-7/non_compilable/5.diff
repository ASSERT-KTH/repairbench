diff --git a/tmp/0f6f8574-6b42-4fbf-a569-43bea3c2e931_buggy.java b/tmp/1a67fc62-674c-497d-8e4c-6d3de57cc684_fixed.java
index 31c6a4b..16bb2bb 100644
--- a/tmp/0f6f8574-6b42-4fbf-a569-43bea3c2e931_buggy.java
+++ b/tmp/1a67fc62-674c-497d-8e4c-6d3de57cc684_fixed.java
@@ -1,11 +1,53 @@
-    /**
-     * Encodes binary data using the base64 algorithm into 76 character blocks separated by CRLF.
-     *
-     * @param binaryData
-     *            binary data to encode
-     * @return String containing Base64 characters.
-     * @since 1.4
-     */    
-    public static String encodeBase64String(byte[] binaryData) {
-        return StringUtils.newStringUtf8(encodeBase64(binaryData, true));
+private static byte[] encodeBase64(byte[] binaryData, boolean breakLines)
+{
+    int    i;
+    int    x;
+    int    len;
+    int    j;
+    byte[] buffer;
+    byte[] output;
+
+   (len = (binaryData == null) ? 0 : binaryData.length);
+    (buffer = new byte[ (len + 2) / 3 * 4 ]);
+    (i = 0);
+    (j = 0);
+    while (i < len)
+    {
+        // get the next 3 bytes
+        x = (binaryData[i++] & 0xff) << 16 | (binaryData[i++] & 0xff) << 8 | (binaryData[i++] & 0xff);
+        // encode them
+        buffer[j++] = (byte) (x >> 18 & 0x3f);
+        buffer[j++] = (byte) (x >> 12 & 0x3f);
+        buffer[j++] = (byte) (x >> 6  & 0x3f);
+        buffer[j++] = (byte) (x       & 0x3f);
+    }
+    // pad accordingly
+    while (j % 4 != 0)
+    {
+        buffer[j++] = (byte) '=';
+    }
+
+    if (breakLines)
+    {
+        StringBuilder sb = new StringBuilder();
+        for (x=0; x < buffer.length; x++)
+        {
+            if (x % 76 ==0)
+            {
+                sb.append("\r\n");
+            }
+            sb.append((char) buffer[x]);
+        }
+        String encoded = sb.toString();
+
+        // Remove the trailing CRLF if present
+        if (encoded.endsWith("\r\n") && encoded.length() >= 2) {
+            encoded = encoded.substring(0, encoded.length() - 2);
+        }
+        output = sb.toString().getBytes("ISO-8859-1");
+    } else {
+        output = buffer;
+    }
+
+    return output;
 }
\ No newline at end of file
