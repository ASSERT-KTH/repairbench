diff --git a/tmp/9a1ad02f-7f67-43d3-9038-f28e64bdf8ef_buggy.java b/tmp/ffcfba40-4ea1-4ad2-a88f-3dcf36d1fdce_fixed.java
index 3075782..62344b3 100644
--- a/tmp/9a1ad02f-7f67-43d3-9038-f28e64bdf8ef_buggy.java
+++ b/tmp/ffcfba40-4ea1-4ad2-a88f-3dcf36d1fdce_fixed.java
@@ -1,82 +1,88 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
+    boolean hasReturnWithSideEffects = false;
     if (block.hasChildren()) {
       Preconditions.checkState(block.hasOneChild());
       Node stmt = block.getFirstChild();
       if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+        hasReturnWithSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
       }
     }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+
+    // Function parameters
+    Node fnParams = NodeUtil.getFunctionParameters(fnNode);
+    int paramCount = fnParams.getChildCount();
     Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
-    if (!callNode.getFirstChild().isName()) {
-      if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
-        if (cArg == null || !cArg.isThis()) {
+    // Check special cases like apply and call
+    if (!callNode.getFirstChild().isName() &&
+        NodeUtil.isFunctionObjectCall(callNode)) {
+      if (!cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
-      } else {
-        // ".apply" call should be filtered before this.
-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
-      }
     }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+    int argIndex = 0;
+    for (int paramIndex = 0; paramIndex < paramCount; paramIndex++) {
+      Node fnParam = fnParams.getChild(paramIndex);
+      String paramName = fnParam.getString();
+
+      // Check if this parameter can be inlined
+      if (!canParameterBeInlined(block, paramName)) {
         return CanInlineResult.NO;
       }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
+
+      // Move to next argument
+      while (cArg != null && cArg.isArgList()) {
+        cArg = cArg.getFirstChild();
       }
+      if (argIndex >= cArg.getChildCount()) {
+        return CanInlineResult.NO;
       }
+      Node arg = cArg.getChild(argIndex);
+      argIndex++;
 
-        // Move to the next name.
-        fnParam = fnParam.getNext();
+      // Check argument side effects
+      if (NodeUtil.mayHaveSideEffects(arg, compiler)) {
+        return CanInlineResult.NO;
       }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+      // Additional checks for argument effects
+      if (NodeUtil.mayEffectMutableState(arg, compiler) &&
+          NodeUtil.getNameReferenceCount(block, paramName) > 1) {
         return CanInlineResult.NO;
       }
-        cArg = cArg.getNext();
-      }
     }
 
     return CanInlineResult.YES;
   }
+
+  private boolean canParameterBeInlined(Node block, String paramName) {
+    if (block == null) {
+      return false;
+    }
+
+    for (Node node = block.getFirstChild(); node != null; node = node.getNext()) {
+      if (node.isName() && node.getString().equals(paramName)) {
+        // Check if the parameter is on the left-hand side of an assignment
+        if (node.getParent().isAssign()) {
+          return false;
+        }
+        // Within a function call as an argument that can cause side effects
+        // (like params of a function that is called where the param may be modified)
+        if (node.getParent().isCall() &&
+            NodeUtil.mayEffectMutableState(node.getParent(), compiler)) {
+          return false;
+        }
+      }
+    }
+
+    return true;
+  }
\ No newline at end of file
