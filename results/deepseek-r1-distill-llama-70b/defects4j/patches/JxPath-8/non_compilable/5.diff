diff --git a/tmp/68c850ca-8c0e-4d3f-9cb6-b6d89171bc9f_buggy.java b/tmp/53cf5fb4-afdf-4fc6-abf4-67138c2668c8_fixed.java
index 98d89dc..5e6132d 100644
--- a/tmp/68c850ca-8c0e-4d3f-9cb6-b6d89171bc9f_buggy.java
+++ b/tmp/53cf5fb4-afdf-4fc6-abf4-67138c2668c8_fixed.java
@@ -1,23 +1,41 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
+
+    // Check for NaN cases
+    if (left instanceof Double && ((Double) left).isNaN()) {
+        return handleNanComparison(left, right);
+    }
+    if (right instanceof Double && ((Double) right).isNaN()) {
+        return handleNanComparison(right, left);
+    }
+
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
+
+private boolean handleNanComparison(Object left, Object right) {
+    double rightValue = InfoSetUtil.doubleValue(right);
+    if (rightValue == Double.NaN) {
+        return this.reverseParameters = true; // assuming reverseParameters is appropriately handled
+    }
+    return false;
+}
\ No newline at end of file
