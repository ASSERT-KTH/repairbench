diff --git a/tmp/ccd5100b-798e-4c73-898a-2505a411e8ea_buggy.java b/tmp/13baaf64-5522-4af3-9e69-94133a50fbb5_fixed.java
index 98d89dc..30236da 100644
--- a/tmp/ccd5100b-798e-4c73-898a-2505a411e8ea_buggy.java
+++ b/tmp/13baaf64-5522-4af3-9e69-94133a50fbb5_fixed.java
@@ -1,23 +1,48 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
+
+    boolean leftIsNaN = isNaN(left);
+    boolean rightIsNaN = isNaN(right);
+
+    if (leftIsNaN || rightIsNaN) {
+        // For non-equality comparisons, return false if either is NaN
+        if (operator != EQUAL) {
+            return false;
+        }
+        // Return true only if both are NaN for equality
+        return leftIsNaN && rightIsNaN;
+    }
+
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
+
+private boolean isNaN(Object value) {
+    if (value instanceof Double) {
+        return ((Double) value).isNaN();
+    } else if (value instanceof Number) {
+        double d = InfoSetUtil.doubleValue(value);
+        return Double.isNaN(d);
+    }
+    return false;
+}
\ No newline at end of file
