diff --git a/tmp/ddff7606-efb9-4ae7-9ec6-c13705a6c1a7_buggy.java b/tmp/1d96b201-9cf9-4d0b-babe-aae1f453575c_fixed.java
index 98d89dc..bf1cea6 100644
--- a/tmp/ddff7606-efb9-4ae7-9ec6-c13705a6c1a7_buggy.java
+++ b/tmp/1d96b201-9cf9-4d0b-babe-aae1f453575c_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+    
+    // Check for NaN cases
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        // Both are NaN: equality is true, others return false based on evaluateCompare
+        return evaluateCompare(0);
+    } else if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // Only one is NaN: comparisons except equality should return false
+        return evaluateCompare(-1);
+    } else {
+        int cmp = ld == rd ? 0 : ld < rd ? -1 : 1;
+        return evaluateCompare(cmp);
+    }
 }
\ No newline at end of file
