diff --git a/tmp/d7dc1c2c-1499-4857-8fa1-b893cafce9ad_buggy.java b/tmp/e46da1fc-4ce0-43dc-baba-9dfa1def7087_fixed.java
index 98d89dc..361600b 100644
--- a/tmp/d7dc1c2c-1499-4857-8fa1-b893cafce9ad_buggy.java
+++ b/tmp/e46da1fc-4ce0-43dc-baba-9dfa1def7087_fixed.java
@@ -1,23 +1,43 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
+
+    // Handle cases where either operand is NaN
+    if (left instanceof Double && (left == Double.NaN || ((Double) left).isNaN())) {
+        return handleNaN(right, left);
+    }
+    if (right instanceof Double && (right == Double.NaN || ((Double) right).isNaN())) {
+        return handleNaN(left, right);
+    }
+
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
+
+private boolean handleNaN(Object left, Object right) {
+    if (left == right) {
+        return true;
+    }
+    if (left instanceof Number && right instanceof Number) {
+        return ((Number) left).doubleValue() == ((Number) right).doubleValue();
+    }
+    return false;
+}
\ No newline at end of file
