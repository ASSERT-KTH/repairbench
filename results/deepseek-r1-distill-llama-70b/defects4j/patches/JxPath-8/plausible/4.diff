diff --git a/tmp/1dae44c9-1b7f-490f-aa31-44cb753c2001_buggy.java b/tmp/670992d4-6962-4139-a9c5-e40820d78ec8_fixed.java
index 98d89dc..4d9fb7e 100644
--- a/tmp/1dae44c9-1b7f-490f-aa31-44cb753c2001_buggy.java
+++ b/tmp/670992d4-6962-4139-a9c5-e40820d78ec8_fixed.java
@@ -1,23 +1,35 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    boolean isLeftNaN = Double.isNaN(ld);
+    boolean isRightNaN = Double.isNaN(rd);
+    
+    if (isLeftNaN || isRightNaN) {
+        // If both are NaN, equality is true; otherwise, false.
+        if (isLeftNaN && isRightNaN) {
+            return evaluateCompare(0);
+        } else {
+            return false;
+        }
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
