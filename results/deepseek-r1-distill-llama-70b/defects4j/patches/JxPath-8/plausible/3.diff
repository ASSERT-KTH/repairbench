diff --git a/tmp/2a22fe41-3fc4-4711-97b6-51fcb6fc7643_buggy.java b/tmp/6e3fefd7-5cba-43e9-a88b-96fd9134f100_fixed.java
index 98d89dc..b8f297e 100644
--- a/tmp/2a22fe41-3fc4-4711-97b6-51fcb6fc7643_buggy.java
+++ b/tmp/6e3fefd7-5cba-43e9-a88b-96fd9134f100_fixed.java
@@ -1,23 +1,37 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+    // Handle cases where either value is NaN
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            // Both are NaN, so check if the operation is equality
+            return evaluateCompare(0);
+        } else {
+            // Only one is NaN, result is false for any comparison
+            return false;
+        }
+    } else {
+        // Normal comparison without NaN
+        int comparison = (ld == rd) ? 0 : (ld < rd) ? -1 : 1;
+        return evaluateCompare(comparison);
+    }
 }
\ No newline at end of file
