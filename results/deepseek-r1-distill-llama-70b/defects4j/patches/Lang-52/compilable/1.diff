diff --git a/tmp/6ad4613a-923b-4eaa-809a-de9d2e3f5ec0_buggy.java b/tmp/836ec08d-885f-4385-a05f-91aa21bf1dc6_fixed.java
index a6dab52..efd5e3d 100644
--- a/tmp/6ad4613a-923b-4eaa-809a-de9d2e3f5ec0_buggy.java
+++ b/tmp/836ec08d-885f-4385-a05f-91aa21bf1dc6_fixed.java
@@ -1,80 +1,71 @@
-    /**
-     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>
-     * 
-     * @param out write to receieve the escaped string
-     * @param str String to escape values in, may be null
-     * @param escapeSingleQuote escapes single quotes if <code>true</code>
-     * @throws IOException if an IOException occurs
-     */
     private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (str == null) {
             return;
         }
-        int sz;
-        sz = str.length();
+        int sz = str.length();
         for (int i = 0; i < sz; i++) {
             char ch = str.charAt(i);
 
-            // handle unicode
             if (ch > 0xfff) {
                 out.write("\\u" + hex(ch));
             } else if (ch > 0xff) {
                 out.write("\\u0" + hex(ch));
             } else if (ch > 0x7f) {
                 out.write("\\u00" + hex(ch));
             } else if (ch < 32) {
                 switch (ch) {
                     case '\b':
                         out.write('\\');
                         out.write('b');
                         break;
                     case '\n':
                         out.write('\\');
                         out.write('n');
                         break;
                     case '\t':
                         out.write('\\');
                         out.write('t');
                         break;
                     case '\f':
                         out.write('\\');
                         out.write('f');
                         break;
                     case '\r':
                         out.write('\\');
                         out.write('r');
                         break;
                     default:
                         if (ch > 0xf) {
                             out.write("\\u00" + hex(ch));
                         } else {
                             out.write("\\u000" + hex(ch));
                         }
                         break;
                 }
             } else {
                 switch (ch) {
                     case '\'':
-                        if (escapeSingleQuote) {
                         out.write('\\');
-                        }
                         out.write('\'');
                         break;
                     case '"':
                         out.write('\\');
                         out.write('"');
                         break;
                     case '\\':
                         out.write('\\');
                         out.write('\\');
                         break;
                     default:
+                        if (escapeSingleQuote && ch == '\'') {
+                            out.write('\\');
+                        }
                         out.write(ch);
                         break;
                 }
             }
         }
     }
\ No newline at end of file
