diff --git a/tmp/e8312157-64c1-43b6-808b-ecd7cb6468d5_buggy.java b/tmp/03211130-a4af-4aad-bb0e-5dcb9ef69389_fixed.java
index f9a9b5b..f938cff 100644
--- a/tmp/e8312157-64c1-43b6-808b-ecd7cb6468d5_buggy.java
+++ b/tmp/03211130-a4af-4aad-bb0e-5dcb9ef69389_fixed.java
@@ -1,30 +1,87 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
-                settings.getTypeToMock(),
-                settings.getExtraInterfaces()
-        );
+    
+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());
     T mockInstance = null;
-        try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+    try {
+        mockInstance = createInstance(settings, mockedProxyType);
+        setMockitoInterceptor(mockInstance, handler, settings);
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (MockitoException me) {
+        throw me;
+    } catch (RuntimeException e) {
+        String message = "Unable to create mock instance of type '" + describeClass(settings.getTypeToMock()) + "'";
+        if (e.getCause() instanceof InstantiationException || e.getCause() instanceof IllegalAccessException) {
+            message += ", cause: " + e.getCause().getMessage();
         }
+        throw new MockitoException(message, e);
+    }
+}
+
+private T createInstance(MockCreationSettings<T> settings, Class<? extends T> mockedProxyType) throws Exception {
+    if (settings.isUseConstructor()) {
+        try {
+            return instantiateUsingConstructor(settings, mockedProxyType);
+        } catch (NoSuchMethodException e) {
+            throw new MockitoException("Unable to create mock instance of type '" + describeClass(mockedProxyType) + "' with constructor", e);
+        }
+    }
+    return classInstantiator.instantiate(mockedProxyType);
+}
+
+private T instantiateUsingConstructor(MockCreationSettings<T> settings, Class<? extends T> mockedProxyType) throws Exception {
+    Object outerInstance = settings.getOuterInstance();
+    Constructor<? extends T> constructor;
+
+    if (outerInstance == null) {
+        constructor = mockedProxyType.getDeclaredConstructor();
+    } else {
+        if (!mockedProxyType.getEnclosingClass().isInstance(outerInstance)) {
+            String message = String.format(
+                    "Outer instance must be an instance of %s but got %s",
+                    mockedProxyType.getEnclosingClass().getSimpleName(),
+                    outerInstance.getClass().getSimpleName()
+            );
+            throw new MockitoException(message);
+        }
+        constructor = mockedProxyType.getDeclaredConstructor(mockedProxyType.getEnclosingClass());
+    }
+
+    if (constructor == null) {
+        throw new NoSuchMethodException("No suitable constructor found");
+    }
+
+    constructor.setAccessible(true);
+    return constructor.newInstance(outerInstance);
+}
+
+private void setMockitoInterceptor(T mockInstance, MockHandler handler, MockHandler settingsHandler) throws ClassCastException {
+    if (mockInstance instanceof MockMethodInterceptor.MockAccess) {
+        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settingsHandler));
+    } else {
+        throw new IllegalArgumentException("Unexpected instance type: " + describeType(mockInstance.getClass()));
+    }
+}
+
+private String describeClass(Class<?> clazz) {
+    return clazz != null ? clazz.getName() : "null";
+}
+
+private String describeType(Class<?> type) {
+    return type != null ? type.getName() : "null";
 }
\ No newline at end of file
