diff --git a/tmp/d09c06a0-4710-4359-b884-00d79078e8aa_buggy.java b/tmp/277e44d5-4186-4395-8a24-4fdd642d5302_fixed.java
index f9a9b5b..97ebc10 100644
--- a/tmp/d09c06a0-4710-4359-b884-00d79078e8aa_buggy.java
+++ b/tmp/277e44d5-4186-4395-8a24-4fdd642d5302_fixed.java
@@ -1,30 +1,62 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
-                settings.getTypeToMock(),
-                settings.getExtraInterfaces()
-        );
+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());
     T mockInstance = null;
     try {
         mockInstance = classInstantiator.instantiate(mockedProxyType);
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        if (e.getCause() instanceof java.lang.InstantiationException) {
+            java.lang.InstantiationException cause = (java.lang.InstantiationException) e.getCause();
+            if (cause.getCause() != null && cause.getCause() instanceof java.lang.NoSuchMethodError) {
+                throw new MockitoException("Unable to create mock instance of type '" 
+                        + mockedProxyType.getSuperclass().getSimpleName() 
+                        + "'", e);
             }
         }
+        Constructor<?> constructor = findSingleArgConstructor(mockedProxyType);
+        if (constructor != null) {
+            if (constructor.getParameterCount() == 1 && constructor.getParameters()[0].getType().equals(settings.getEnclosingClass())) {
+                try {
+                    return constructor.newInstance(settings.getOuterInstance());
+                } catch (Exception e1) {
+                    throw new MockitoException("Unable to create mock instance of type '" 
+                            + mockedProxyType.getSimpleName() 
+                            + "'", e1);
+                }
+            } else {
+                throw new MockitoException("Unable to create mock instance of type '"
+                        + mockedProxyType.getSimpleName()
+                        + "'. Please ensure that the target class has a zero-arg constructor.",
+                        e);
+            }
+        }
+        throw new MockitoException("Unable to create mock instance of type '" 
+                + mockedProxyType.getSuperclass().getSimpleName() 
+                + "'", e);
+    }
+}
+
+private Constructor<?> findSingleArgConstructor(Class<?> type) {
+    for (Constructor<?> constructor : type.declaredConstructors) {
+        if (constructor.getParameterCount() == 1) {
+            return constructor;
+        }
+    }
+    return null;
+}
\ No newline at end of file
