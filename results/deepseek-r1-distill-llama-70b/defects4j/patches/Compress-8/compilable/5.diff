diff --git a/tmp/1249e5a5-c6e2-4a3d-81a7-831eeb542e9a_buggy.java b/tmp/230c340a-c276-4ccd-bd3f-76a43c9ae53b_fixed.java
index e087f95..5d34754 100644
--- a/tmp/1249e5a5-c6e2-4a3d-81a7-831eeb542e9a_buggy.java
+++ b/tmp/230c340a-c276-4ccd-bd3f-76a43c9ae53b_fixed.java
@@ -1,53 +1,80 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
+        // Check for minimum length requirement
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes");
+        }
+
+        // Check if all bytes are NUL
+        boolean allNul = true;
+        for (int i = start; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNul = false;
+                break;
+            }
+        }
+        if (allNul) {
+            return 0L;
+        }
+
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+            if (currentByte == 0 || currentByte == (byte) ' ') {
+                if (!stillPadding) {
+                    // Ensure at least one octal digit is present before trailing space/NUL
+                    if (i == start) {
+                        throw new IllegalArgumentException("Trailing space/NUL without preceding octal digit");
+                    }
                     break;
+                } else {
+                    continue;
+                }
             }
 
             // Skip leading spaces
             if (currentByte == (byte) ' ' || currentByte == '0') {
                 if (stillPadding) {
                     continue;
+                } else {
+                    throw new IllegalArgumentException("Space found after octal digits");
                 }
-                if (currentByte == (byte) ' ') {
-                break;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+            // Check for valid octal digit
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+            stillPadding = false;
+            result = (result << 3) + (currentByte - '0');
+        }
+
+        // Validate that we have a valid trailing character
+        if (result == 0 && !stillPadding) {
+            throw new IllegalArgumentException("No trailing space/NUL");
         }
 
         return result;
     }
\ No newline at end of file
