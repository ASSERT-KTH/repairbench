diff --git a/tmp/a3b244d0-fcf8-481a-af7c-53bf3b57789b_buggy.java b/tmp/c4b4ae27-88a0-4640-84f5-6c916ebb4025_fixed.java
index e087f95..fdc3d9b 100644
--- a/tmp/a3b244d0-fcf8-481a-af7c-53bf3b57789b_buggy.java
+++ b/tmp/c4b4ae27-88a0-4640-84f5-6c916ebb4025_fixed.java
@@ -1,53 +1,35 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Buffer length must be at least 2 bytes");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+        for (int i = offset; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
+                // Found the terminator; stop processing
                 break;
             }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+            if (currentByte == (byte) ' ') {
                 if (stillPadding) {
                     continue;
-            }
-                if (currentByte == (byte) ' ') {
+                } else {
                     break;
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+            stillPadding = false;
+            result = (result << 3) + (currentByte - '0');
         }
 
         return result;
     }
\ No newline at end of file
