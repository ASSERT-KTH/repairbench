diff --git a/tmp/4dce7407-c7ac-4d92-82c0-d5a8edfdc20f_buggy.java b/tmp/a94dd5b8-7fb9-4c34-8e07-2778fbec5618_fixed.java
index e087f95..2376f43 100644
--- a/tmp/4dce7407-c7ac-4d92-82c0-d5a8edfdc20f_buggy.java
+++ b/tmp/a94dd5b8-7fb9-4c34-8e07-2778fbec5618_fixed.java
@@ -1,53 +1,68 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // Check that the buffer is long enough
+        if (length < 2) {
+            throw new IllegalArgumentException("Buffer length must be at least 2");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
+        for (int i = offset; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
+                // Found a terminator
                 break;
             }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
+                if (currentByte == (byte) ' ') {
+                    // Skip leading spaces
                     continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+                } else {
                     stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+                }
+            }
+
+            // Now we are processing the number, any space is invalid except as terminator
+            if (currentByte == (byte) ' ') {
+                throw new IllegalArgumentException(
+                        "Invalid space in octal number");
+            }
+
+            // Check if the current byte is a valid octal digit
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
+
+            // Check for overflow before shifting
+            if (result > (Long.MAX_VALUE / 8)) {
+                throw new IllegalArgumentException("Octal number too large");
+            }
+
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+
+        // Check that the last byte is a terminator
+        if (end > buffer.length || buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {
+            throw new IllegalArgumentException("Missing trailing space or NUL");
         }
 
         return result;
     }
\ No newline at end of file
