diff --git a/tmp/4ca4fe41-8f02-4c5e-9ef3-4652142e8372_buggy.java b/tmp/f3484314-33b4-439b-b854-f647765344f8_fixed.java
index e087f95..fe958e8 100644
--- a/tmp/4ca4fe41-8f02-4c5e-9ef3-4652142e8372_buggy.java
+++ b/tmp/f3484314-33b4-439b-b854-f647765344f8_fixed.java
@@ -1,53 +1,39 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (buffer == null) {
+        throw new IllegalArgumentException("buffer must not be null");
+    }
+    if (length < 2) {
+        throw new IllegalArgumentException("length must be at least 2");
+    }
     long result = 0;
     boolean stillPadding = true;
+    boolean foundNonPadding = false;
     int end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
+    for (int i = offset; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == (byte) ' ') {
             if (stillPadding) {
                 continue;
-            }
-                if (currentByte == (byte) ' ') {
+            } else {
                 break;
             }
         }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        stillPadding = false;
+        foundNonPadding = true;
+        result = (result << 3) + (currentByte - '0');
+    }
+    if (!foundNonPadding) {
+        return 0L;
+    }
+    if (end > offset + 1 && buffer[offset + length - 1] != 0 && buffer[offset + length - 1] != (byte) ' ') {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
     }
-
     return result;
 }
\ No newline at end of file
