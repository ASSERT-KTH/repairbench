diff --git a/tmp/fb2a00f5-9d06-4071-9076-87c1c6afca60_buggy.java b/tmp/7d2b91f6-f35d-4a57-a558-2923e12e0ac7_fixed.java
index e087f95..829488e 100644
--- a/tmp/fb2a00f5-9d06-4071-9076-87c1c6afca60_buggy.java
+++ b/tmp/7d2b91f6-f35d-4a57-a558-2923e12e0ac7_fixed.java
@@ -1,53 +1,31 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Buffer length must be at least 2");
+        }
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
+        for (int i = offset; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
                 break;
             }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+            if (currentByte == (byte) ' ' || currentByte == (byte) '0') {
                 if (stillPadding) {
                     continue;
-            }
-                if (currentByte == (byte) ' ') {
+                } else if (currentByte == (byte) ' ') {
                     break;
                 }
             }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+            if (currentByte < (byte) '0' || currentByte > (byte) '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - (byte) '0');
+        }
+        if (stillPadding) {
+            return 0;
         }
-
         return result;
     }
\ No newline at end of file
