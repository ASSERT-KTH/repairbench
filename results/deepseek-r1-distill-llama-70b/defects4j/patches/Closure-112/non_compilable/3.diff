diff --git a/tmp/568878f9-f0aa-4106-9d6c-74261e08dad5_buggy.java b/tmp/8c503b94-8c6a-4248-bcf4-e1bb136d4245_fixed.java
index 63641d0..0bbd0df 100644
--- a/tmp/568878f9-f0aa-4106-9d6c-74261e08dad5_buggy.java
+++ b/tmp/8c503b94-8c6a-4248-bcf4-e1bb136d4245_fixed.java
@@ -1,33 +1,41 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  if (callTarget.hasJSType()) {
+    FunctionType originalType = callTarget.getJSType().toMaybeFunctionType();
+    if (originalType != null) {
+      FunctionType replacedType = originalType.visit(replacer).toMaybeFunctionType();
+      if (replacedType != originalType) {
+        callTarget.setJSType(replacedType);
+      }
+    }
+  }
 
-    callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+  n.setJSType(callTarget.getJSType());
+
+  // Now process the function type to replace template types in the return type
+  FunctionType replacedFnType = fnType.visit(replacer).toMaybeFunctionType();
+  Preconditions.checkNotNull(replacedFnType);
+
+  // Ensure the return type is set only if it was changed
+  if (!replacedFnType.equals(fnType)) {
+    n.setJSType(replacedFnType.getReturnType());
+  }
 
   return replacer.madeChanges;
 }
\ No newline at end of file
