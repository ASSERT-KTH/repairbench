diff --git a/tmp/efddcc28-e3b1-462f-8ce3-6171c3a75b63_buggy.java b/tmp/67697e53-8e71-49ab-88cc-da7d20846d99_fixed.java
index 63641d0..bfdbc54 100644
--- a/tmp/efddcc28-e3b1-462f-8ce3-6171c3a75b63_buggy.java
+++ b/tmp/67697e53-8e71-49ab-88cc-da7d20846d99_fixed.java
@@ -1,33 +1,31 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+  // Step 1: Infer the template types from parameters
+  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
+  // Step 2: Replace each template type individually
+  boolean madeChanges = false;
+  for (TemplateType template : keys) {
+    JSType inferredType = inferred.get(template);
+    if (inferredType != null) {
+      // Replace template with inferred type in the function type
+      FunctionType newFnType = replaceTemplateType(fnType, template, inferredType);
+      if (newFnType != fnType) {
+        madeChanges = true;
+        fnType = newFnType;
+      }
+    }
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
-    Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
-
-    callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+  // Update the types for the call target and the node
+  callTarget.setJSType(fnType);
+  n.setJSType(fnType.getReturnType());
 
-    return replacer.madeChanges;
+  return madeChanges;
 }
\ No newline at end of file
