diff --git a/tmp/6dc51000-5171-46d0-b5b8-81930457d5f7_buggy.java b/tmp/cdf2ac9b-caa2-43f3-99f6-3b3ef8ffe75e_fixed.java
index 63641d0..9ec0868 100644
--- a/tmp/6dc51000-5171-46d0-b5b8-81930457d5f7_buggy.java
+++ b/tmp/cdf2ac9b-caa2-43f3-99f6-3b3ef8ffe75e_fixed.java
@@ -1,33 +1,38 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+    // Infer template types based on the node and the function type
+    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
+    if (inferred == null) {
+      return false;
+    }
 
+    // Ensure all template keys are accounted for, possibly inferring missing ones
+    for (TemplateType key : keys) {
+      if (!inferred.containsKey(key)) {
+        inferred.put(key, TemplateType.INFERENCE_TIMEOUT); // or handle appropriately
+      }
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+    // Replace all template types. If a replacement isn't found, set to unknown
+    TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
     Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+    FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
-    return replacer.madeChanges;
+    return replacer.madeChanges || !inferred.isEmpty(); // Check if any inference occurred
   }
\ No newline at end of file
