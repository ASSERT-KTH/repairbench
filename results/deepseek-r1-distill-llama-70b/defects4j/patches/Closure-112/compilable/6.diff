diff --git a/tmp/ddd24d3d-2ff2-413a-a8d5-1a11fc50f6fa_buggy.java b/tmp/079272a3-7384-488d-8fbe-deb5f206ac10_fixed.java
index 63641d0..b2a7b24 100644
--- a/tmp/ddd24d3d-2ff2-413a-a8d5-1a11fc50f6fa_buggy.java
+++ b/tmp/079272a3-7384-488d-8fbe-deb5f206ac10_fixed.java
@@ -1,33 +1,36 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    boolean madeChanges = !inferred.isEmpty();
 
+    if (madeChanges) {
       // Replace all template types. If we couldn't find a replacement, we
       // replace it with UNKNOWN.
       TemplateTypeReplacer replacer = new TemplateTypeReplacer(
           registry, inferred);
       Node callTarget = n.getFirstChild();
 
       FunctionType replacementFnType = fnType.visit(replacer)
           .toMaybeFunctionType();
       Preconditions.checkNotNull(replacementFnType);
 
       callTarget.setJSType(replacementFnType);
       n.setJSType(replacementFnType.getReturnType());
+    }
 
-    return replacer.madeChanges;
+    return madeChanges;
   }
\ No newline at end of file
