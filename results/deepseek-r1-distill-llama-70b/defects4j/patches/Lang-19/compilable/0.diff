diff --git a/tmp/691de9a6-8cd4-4d9b-8e9b-317178917e94_buggy.java b/tmp/50736802-cd4f-481c-8b83-735d375ef49a_fixed.java
index 72a422c..2a2a37f 100644
--- a/tmp/691de9a6-8cd4-4d9b-8e9b-317178917e94_buggy.java
+++ b/tmp/50736802-cd4f-481c-8b83-735d375ef49a_fixed.java
@@ -1,51 +1,37 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+            if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                start++;
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            String entityContent = input.subSequence(start, end).toString();
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
+                int entityValue = isHex ? Integer.parseInt(entityContent, 16) : Integer.parseInt(entityContent, 10);
                 
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
-
+            } catch (NumberFormatException nfe) {
+                System.err.println("FAIL: " + entityContent + "[" + start + "]" + "[" + end + "]");
+                return 0;
+            }
 
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
