diff --git a/tmp/32a2c8a9-f7d1-4b94-9845-23d4869bb9f9_buggy.java b/tmp/b2dcd18c-36c4-43fe-a8dc-f96f09225d61_fixed.java
index 72a422c..da43c8b 100644
--- a/tmp/32a2c8a9-f7d1-4b94-9845-23d4869bb9f9_buggy.java
+++ b/tmp/b2dcd18c-36c4-43fe-a8dc-f96f09225d61_fixed.java
@@ -1,51 +1,59 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < seqEnd) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
-            int entityValue;
+        if (end >= seqEnd) {
+            // No terminating semicolon found
+            if (isHex) {
+                out.write(input.subSequence(index, end).toString());
+            } else {
+                out.write(input.charAt(index));
+                if (start < seqEnd) {
+                    out.write(input.charAt(start));
+                }
+            }
+            return end - index;
+        }
+
+        // Proceed with parsing the entity value
         try {
+            String entityStr = input.subSequence(start, end).toString();
+            int entityValue;
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(entityStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                entityValue = Integer.parseInt(entityStr, 10);
             }
 
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return end - index + 1; // Include the semicolon
+        } catch (NumberFormatException nfe) {
+            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
+            return end - index;
+        }
     }
     return 0;
 }
\ No newline at end of file
