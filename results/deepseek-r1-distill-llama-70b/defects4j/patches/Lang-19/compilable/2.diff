diff --git a/tmp/76a87d47-6ef5-4e3e-9c79-1bd514992f7c_buggy.java b/tmp/f01e3d3d-8a66-4a4b-8ec5-d300d7382d69_fixed.java
index 72a422c..cfc02cc 100644
--- a/tmp/76a87d47-6ef5-4e3e-9c79-1bd514992f7c_buggy.java
+++ b/tmp/f01e3d3d-8a66-4a4b-8ec5-d300d7382d69_fixed.java
@@ -1,51 +1,54 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if (index + 1 >= seqEnd) {
+        return 0;
+    }
+    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) {
+            return 0;
+        }
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
 
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
-
-            int entityValue;
+        if (end > start) {
             try {
+                String entityStr = input.subSequence(start, end).toString();
+                int entityValue;
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                    entityValue = Integer.parseInt(entityStr, 10);
                 }
                 
-            if(entityValue > 0xFFFF) {
+                if (entityValue <= 0xFFFF) {
+                    char ch = (char) entityValue;
+                    out.write(ch);
+                    return end - index + 1;
+                } else {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
-            } else {
-                out.write(entityValue);
+                    return 2 + (end - start) + (isHex ? 1 : 0);
+                }
+            } catch (NumberFormatException nfe) {
+                System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
+            }
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
