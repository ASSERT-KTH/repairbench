diff --git a/tmp/93b368a9-1f92-47f7-aa1a-67cf9e049fb3_buggy.java b/tmp/4a3e1325-3b12-487d-805f-2a8e9162cd84_fixed.java
index 72a422c..615881c 100644
--- a/tmp/93b368a9-1f92-47f7-aa1a-67cf9e049fb3_buggy.java
+++ b/tmp/4a3e1325-3b12-487d-805f-2a8e9162cd84_fixed.java
@@ -1,51 +1,55 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            if (isHex) {
+                while (end < seqEnd && 
+                       (Character.toUpperCase(input.charAt(end)) >= 'A' && Character.toUpperCase(input.charAt(end)) <= 'F' 
+                        || input.charAt(end) >= '0' && input.charAt(end) <= '9')) {
                     end++;
                 }
+            } else {
+                while (end < seqEnd && Character.isDigit(input.charAt(end))) {
+                    end++;
+                }
+            }
+
+            if (start == end) {
+                return 0;
+            }
 
+            String entityStr = input.subSequence(start, end).toString();
             int entityValue;
             try {
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(entityStr, 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                System.err.println("FAIL: " + entityStr + "[" + start +"]["+ end +"]");
                 return 0;
             }
 
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return 2 + (end - (isHex ? (index + 3) : (index + 2))) + 1;
         }
         return 0;
     }
\ No newline at end of file
