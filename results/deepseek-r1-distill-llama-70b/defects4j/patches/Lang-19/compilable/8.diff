diff --git a/tmp/9f050826-f5a0-4007-9c62-519a694ffb59_buggy.java b/tmp/8a2595d2-100f-4632-8086-7ddb06d8b839_fixed.java
index 72a422c..15f8fef 100644
--- a/tmp/9f050826-f5a0-4007-9c62-519a694ffb59_buggy.java
+++ b/tmp/8a2595d2-100f-4632-8086-7ddb06d8b839_fixed.java
@@ -1,51 +1,48 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+        if (index >= seqEnd) {
+            return 0;
+        }
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            if (start >= end) {
+                return 0;
+            }
+
+            String entityStr = input.subSequence(start, end).toString();
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
+                int base = isHex ? 16 : 10;
+                int entityValue = Integer.parseInt(entityStr, base);
                 
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
                 
-
                 return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            } catch (NumberFormatException e) {
+                // Invalid entity, return without processing
+                return 0;
+            }
         }
         return 0;
     }
\ No newline at end of file
