diff --git a/tmp/226707ea-fde2-4c74-be81-73dbd7b30769_buggy.java b/tmp/8c687737-d9dc-47d0-a3f5-727d94698bd5_fixed.java
index 72a422c..c216263 100644
--- a/tmp/226707ea-fde2-4c74-be81-73dbd7b30769_buggy.java
+++ b/tmp/8c687737-d9dc-47d0-a3f5-727d94698bd5_fixed.java
@@ -1,51 +1,47 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
+        if (input.length() - index < 2 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+            return 0;
+        }
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < seqEnd) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
-            int entityValue;
+        if (end > start) {
+            String entity = input.subSequence(start, end).toString();
             try {
+                int entityValue;
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entity, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                    entityValue = Integer.parseInt(entity, 10);
                 }
 
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                return end - index + 1;
+            } catch (NumberFormatException nfe) {
+                // Ignore invalid entities
+            }
         }
         return 0;
     }
\ No newline at end of file
