diff --git a/tmp/87cc6452-a4b1-435b-812a-fe70105d0c2e_buggy.java b/tmp/39095d63-70fb-4e5f-bd68-65e3ee68c8e7_fixed.java
index 72a422c..90692e3 100644
--- a/tmp/87cc6452-a4b1-435b-812a-fe70105d0c2e_buggy.java
+++ b/tmp/39095d63-70fb-4e5f-bd68-65e3ee68c8e7_fixed.java
@@ -1,51 +1,61 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        if (index + 1 >= seqEnd) {
+            return 0;
+        }
+        if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            if (end <= start) {
+                // No characters between start and end, invalid entity
+                return 0;
+            }
+
+            String entityStr = input.subSequence(start, end).toString();
+            if (entityStr.isEmpty()) {
+                return 0;
+            }
+
             try {
+                int entityValue;
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                    entityValue = Integer.parseInt(entityStr, 10);
                 }
 
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
+                    if (chrs.length > 0) {
                         out.write(chrs[0]);
+                        if (chrs.length > 1) {
                             out.write(chrs[1]);
+                        }
+                    }
                 } else {
                     out.write(entityValue);
                 }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                return (end > start ? 1 : 0) + (isHex ? 1 : 0) + (end - start) + 1;
+            } catch (NumberFormatException nfe) {
+                // Log error and return 0 to ignore the entity
+                return 0;
+            }
         }
         return 0;
     }
\ No newline at end of file
