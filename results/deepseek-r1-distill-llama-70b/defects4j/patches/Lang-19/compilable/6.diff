diff --git a/tmp/fc9c8cf7-5159-4f2f-8a5a-b580500b654f_buggy.java b/tmp/3925e4ac-1363-47b3-8c07-10228999a48a_fixed.java
index 72a422c..8bee619 100644
--- a/tmp/fc9c8cf7-5159-4f2f-8a5a-b580500b654f_buggy.java
+++ b/tmp/3925e4ac-1363-47b3-8c07-10228999a48a_fixed.java
@@ -1,51 +1,49 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            boolean foundSemicolon = false;
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
+            if (end < seqEnd) {
+                foundSemicolon = true;
+            }
 
-            int entityValue;
+            if (foundSemicolon) {
                 try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
-
+                    String entityStr = input.subSequence(start, end).toString();
+                    int radix = isHex ? 16 : 10;
+                    int entityValue = Integer.parseInt(entityStr, radix);
                     if (entityValue > 0xFFFF) {
                         char[] chrs = Character.toChars(entityValue);
                         out.write(chrs[0]);
                         out.write(chrs[1]);
                     } else {
                         out.write(entityValue);
                     }
-
-
                     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                } catch (NumberFormatException nfe) {
+                    System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "]" + end);
+                }
+            }
+
+            // If no semicolon found, put it all back and return 0
+            if (!foundSemicolon) {
+                return 0;
+            }
         }
         return 0;
     }
\ No newline at end of file
