diff --git a/tmp/292e8a65-cb9a-49c7-b507-63beb88f265d_buggy.java b/tmp/09ac5827-5f8b-40e8-abd7-6eceeb1d4a00_fixed.java
index 72a422c..7fbf774 100644
--- a/tmp/292e8a65-cb9a-49c7-b507-63beb88f265d_buggy.java
+++ b/tmp/09ac5827-5f8b-40e8-abd7-6eceeb1d4a00_fixed.java
@@ -1,51 +1,50 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if(start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            boolean foundSemicolon = false;
+            while(end < seqEnd) {
+                if(input.charAt(end) == ';') {
+                    foundSemicolon = true;
+                    break;
+                }
                 end++;
             }
 
-            int entityValue;
+            if(!foundSemicolon) {
+                return 0;
+            }
+
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+                String entityStr = input.subSequence(start, end).toString();
+                int base = isHex ? 16 : 10;
+                entityValue = Integer.parseInt(entityStr, base);
             } catch(NumberFormatException nfe) {
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end + "]");
                 return 0;
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
