diff --git a/tmp/f596dc2d-37b5-4c7d-baf0-a8d4d2e8c6d7_buggy.java b/tmp/ec10b16a-72bb-4e9e-a4c6-7c38b74e5850_fixed.java
index 670114d..c3242bc 100644
--- a/tmp/f596dc2d-37b5-4c7d-baf0-a8d4d2e8c6d7_buggy.java
+++ b/tmp/ec10b16a-72bb-4e9e-a4c6-7c38b74e5850_fixed.java
@@ -1,48 +1,63 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
 
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
 
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
       }
     }
   } else if (n.isCall()) {
     Node nameNode = n.getFirstChild();
     NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
+    if (ns != null) {
+      // Handle goog.inherits calls specifically
+      if (nameNode.getString().equals("goog.inherits")) {
+        List<Node> children = n.getChildren();
+        if (children.size() > 2) {
+          Node classArg = children.get(2); // First argument after '(', the child class
+          NameInformation classNs = createNameInformation(t, classArg, n);
+          if (classNs != null) {
+            JsName className = getName(classNs.name, false);
+            if (className != null) {
+              refNodes.add(new ClassDefiningFunctionNode(className, classArg, parent, parent.getParent()));
+            }
+          }
+        }
+      } else if (ns.onlyAffectsClassDef) {
         JsName name = getName(ns.name, false);
         if (name != null) {
           refNodes.add(new ClassDefiningFunctionNode(
               name, n, parent, parent.getParent()));
         }
       }
     }
   }
+}
\ No newline at end of file
