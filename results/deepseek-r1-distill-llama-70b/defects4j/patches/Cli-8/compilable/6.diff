diff --git a/tmp/36c278f4-0ccb-42f6-b30f-199d2b86f3e2_buggy.java b/tmp/611dfb7e-bf39-481f-b412-215e84642de9_fixed.java
index 8e93a5e..62d15ed 100644
--- a/tmp/36c278f4-0ccb-42f6-b30f-199d2b86f3e2_buggy.java
+++ b/tmp/611dfb7e-bf39-481f-b412-215e84642de9_fixed.java
@@ -1,43 +1,34 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+                                         int nextLineTabStop, String text) {
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
+    int currentIndent = nextLineTabStop;
+    while (true) {
+        // Calculate the padding required, considering both the tab stop and any necessary space padding
+        final String padding = createPadding(currentIndent);
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
 
-            if (pos == -1)
-            {
+        pos = findWrapPos(text, width, currentIndent);
+
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // Use both currentIndent and any necessary space padding
+        String wrappedLine = text.substring(0, pos);
+        String extraPadding = "";
+        if (currentIndent + wrappedLine.length() < width) {
+            extraPadding = createPadding(width - (currentIndent + wrappedLine.length()));
+        }
+        sb.append(rtrim(wrappedLine)).append(extraPadding).append(defaultNewLine);
+
+        currentIndent += pos;
     }
 }
\ No newline at end of file
