diff --git a/tmp/1d7d0c1e-e4f4-489a-9a58-a6d76f389091_buggy.java b/tmp/31c0969d-af25-4c40-8cf5-9bfa7c43d227_fixed.java
index 735a993..5252f95 100644
--- a/tmp/1d7d0c1e-e4f4-489a-9a58-a6d76f389091_buggy.java
+++ b/tmp/31c0969d-af25-4c40-8cf5-9bfa7c43d227_fixed.java
@@ -1,29 +1,22 @@
-    /**
-     * Appends an object to the builder padding on the right to a fixed length.
-     * The <code>toString</code> of the object is used.
-     * If the object is larger than the length, the right hand side is lost.
-     * If the object is null, null text value is used.
-     * 
-     * @param obj  the object to append, null uses null text
-     * @param width  the fixed field width, zero or negative has no effect
-     * @param padChar  the pad character to use
-     * @return this, to enable chaining
-     */
 public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
     if (width > 0) {
-            ensureCapacity(size + width);
+        // Calculate the required buffer size
+        int requiredSpace = size + width;
+        // Ensure the buffer has enough capacity
+        if (buffer.length < requiredSpace) {
+            ensureCapacity(requiredSpace);
+        }
         String str = (obj == null ? getNullText() : obj.toString());
         int strLen = str.length();
         if (strLen >= width) {
-                str.getChars(0, strLen, buffer, size);
+            str.getChars(0, width, buffer, size);
         } else {
-                int padLen = width - strLen;
             str.getChars(0, strLen, buffer, size);
-                for (int i = 0; i < padLen; i++) {
+            for (int i = 0; i < width - strLen; i++) {
                 buffer[size + strLen + i] = padChar;
             }
         }
         size += width;
     }
     return this;
 }
\ No newline at end of file
