diff --git a/tmp/9da839df-a0b2-408d-8ebc-53105e7c5616_buggy.java b/tmp/a65b99ac-288c-4f3b-91c3-4acdd98a0268_fixed.java
index f843d29..729b1d2 100644
--- a/tmp/9da839df-a0b2-408d-8ebc-53105e7c5616_buggy.java
+++ b/tmp/a65b99ac-288c-4f3b-91c3-4acdd98a0268_fixed.java
@@ -1,68 +1,55 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(final String str) {
     if (str == null) {
         return null;
     }
     final int len = str.length();
     if (len < 2) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    boolean startsWithUnderscore = str.charAt(0) == '_';
+    if (!startsWithUnderscore) {
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+    }
+    if (startsWithUnderscore) {
+        if (len < 3) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (str.charAt(2) != '_') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+    } else {
         if (len == 2) {
             return new Locale(str);
         }
         if (len < 5) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
     }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+    final char ch3 = str.charAt(startsWithUnderscore ? 3 : 3);
+    if (!Character.isUpperCase(ch3)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+    if (startsWithUnderscore && len == 4) {
+        return new Locale("", str.substring(2, 4), "");
+    }
+    if (str.charAt(startsWithUnderscore ? 4 : 4) == '_') {
+        return new Locale(str.substring(startsWithUnderscore ? 0 : startWithUnderscore ? 2 : 0, startWithUnderscore ? 2 : 2), str.substring(startWithUnderscore ? 3 : 3, startWithUnderscore ? 4 : 5), str.substring(startWithUnderscore ? 6 : 6));
+    }
+    if (startsWithUnderscore && len == 5) {
+        return new Locale("", str.substring(2, 4), "");
     }
     if (len < 7) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            if (str.charAt(5) != '_') {
+    if (str.charAt(startsWithUnderscore ? 5 : 5) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+    return new Locale(str.substring(startsWithUnderscore ? 0 : 2, startWithUnderscore ? 2 : 2), str.substring(3, 5), str.substring(6));
 }
\ No newline at end of file
