diff --git a/tmp/0716492d-05f1-48a5-983e-b31bf0dfe15c_buggy.java b/tmp/52cd28d1-e78e-48d2-98b8-8095043f6604_fixed.java
index 5f1dcf2..42d7584 100644
--- a/tmp/0716492d-05f1-48a5-983e-b31bf0dfe15c_buggy.java
+++ b/tmp/52cd28d1-e78e-48d2-98b8-8095043f6604_fixed.java
@@ -1,41 +1,61 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
+                // Return only if the simplex was improved
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
+                // Return to allow the next iteration to proceed
                 return;
+            } else {
+                // Perform shrink step if both reflection and contraction fail
+                for (int i = 0; i < original.length; i++) {
+                    if (i != 0) { // skip the best point
+                        final double[] newPoint = new double[original[i].getPoint().length];
+                        final double[] bestPoint = best.getPoint();
+                        for (int j = 0; j < newPoint.length; j++) {
+                            newPoint[j] = (original[i].getPoint()[j] + bestPoint[j]) / 2.0;
+                        }
+                        simplex[i] = new RealPointValuePair(newPoint, Double.NaN, false);
+                    }
+                }
             }
 
+            // Check for convergence
+            if (isConverged()) {
+                return;
             }
 
+            // Check if maximum iterations have been reached
+            if (getIterations() >= getMaxIterations()) {
+                throw new MaxIterationsExceededException(getMaxIterations(), getIterations());
+            }
+        }
     }
\ No newline at end of file
