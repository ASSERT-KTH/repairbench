diff --git a/tmp/8cf8b9ba-7a0c-4254-a48c-05548ff4586d_buggy.java b/tmp/ffa76639-3f5b-44fd-8087-42964eb14676_fixed.java
index 5f1dcf2..fd4e08e 100644
--- a/tmp/8cf8b9ba-7a0c-4254-a48c-05548ff4586d_buggy.java
+++ b/tmp/ffa76639-3f5b-44fd-8087-42964eb14676_fixed.java
@@ -1,41 +1,47 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
                 return;
             }
 
+            // Perform shrink step as none of the above steps improved the solution
+            final RealPointValuePair[] shrinkedSimplex = evaluateNewSimplex(original, sigma, comparator);
+            simplex = shrinkedSimplex;
+
+            // Check convergence after shrink step
+            if (getConvergenceChecker().converged(getIteration(), best.getValue(), simplex[0].getValue())) {
+                return;
             }
 
         }
+    }
\ No newline at end of file
