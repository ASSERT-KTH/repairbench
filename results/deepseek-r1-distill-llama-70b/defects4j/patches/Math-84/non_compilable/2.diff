diff --git a/tmp/3d940f0b-1388-4a69-9691-ccef5d8953d1_buggy.java b/tmp/1e71556b-74dd-48af-a83d-75d2dcf388ad_fixed.java
index 5f1dcf2..426c275 100644
--- a/tmp/3d940f0b-1388-4a69-9691-ccef5d8953d1_buggy.java
+++ b/tmp/1e71556b-74dd-48af-a83d-75d2dcf388ad_fixed.java
@@ -1,41 +1,62 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
+        if (isMaxIterationsReached()) {
+            break;
+        }
+
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
+        final RealPointValuePair[] reflectedSimplex = evaluateSimplex(comparator);
 
         // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        final RealPointValuePair reflected = reflectedSimplex[0];
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+            final RealPointValuePair[] expandedSimplex = evaluateSimplex(comparator, khi);
+            final RealPointValuePair expanded = expandedSimplex[0];
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                simplex = expandedSimplex;
             }
 
-                return;
+            continue;
 
         }
 
         // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+        final RealPointValuePair[] contractedSimplex = evaluateSimplex(comparator, gamma);
+        final RealPointValuePair contracted = contractedSimplex[0];
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+            simplex = contractedSimplex;
+        } else {
 
-            // check convergence
-                return;
+            // perform the shrink step
+            simplex = shrinkSimplex(original);
+            continue;
+
+        }
+
+        // Check convergence
+        boolean converged = true;
+        for (int i = 1; i < simplex.length; i++) {
+            if (comparator.compare(simplex[i], best) != 0) {
+                converged = false;
+                break;
+            }
+        }
+        if (converged) {
+            break;
         }
 
     }
 
 }
\ No newline at end of file
