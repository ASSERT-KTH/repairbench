diff --git a/tmp/e91c8493-6073-4def-8a83-511293afe8d0_buggy.java b/tmp/0c1582ee-2e74-4c6e-8c2e-5282a67b7a5b_fixed.java
index 5f1dcf2..79f9da7 100644
--- a/tmp/e91c8493-6073-4def-8a83-511293afe8d0_buggy.java
+++ b/tmp/0c1582ee-2e74-4c6e-8c2e-5282a67b7a5b_fixed.java
@@ -1,41 +1,59 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
+        // Check for convergence
+        if (isConverged()) {
+            return;
+        }
+
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
+            // Check for convergence after reflection/expansion
+            if (isConverged()) {
                 return;
-
             }
 
+        } else {
+
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
+                // Check for convergence after contraction
+                if (isConverged()) {
                     return;
                 }
+            } else {
+                // If neither reflection nor contraction worked, we need to break out
+                break;
+            }
+
+        }
+
+        // Break the loop if we've reached the max iterations
+        if (getIterationsCounter() >= getMaxIterations()) {
+            break;
+        }
 
     }
 
 }
\ No newline at end of file
