diff --git a/tmp/675fe3eb-404e-4f1b-a251-ee845385348c_buggy.java b/tmp/e10e523e-f42b-4c73-ace6-a9d3f9c991c1_fixed.java
index ad4b0d8..7c5b6a7 100644
--- a/tmp/675fe3eb-404e-4f1b-a251-ee845385348c_buggy.java
+++ b/tmp/e10e523e-f42b-4c73-ace6-a9d3f9c991c1_fixed.java
@@ -1,47 +1,39 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
 private static <T extends Clusterable<T>> List<Cluster<T>>
 chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
     while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
+
+        int numPoints = pointSet.size();
+        float[] dx2 = new float[numPoints];
+        float sum = 0.0f;
+
+        // Compute distances and accumulate squared distances
+        for (int i = 0; i < numPoints; i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
+            final double distance = p.distanceFrom(nearest.getCenter());
+            final float d = (float) distance;
             sum += d * d;
             dx2[i] = sum;
         }
 
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
+        // Select a new center based on the computed probabilities
+        final float r = random.nextFloat() * sum;
+        for (int i = 0; i < numPoints; i++) {
             if (dx2[i] >= r) {
                 final T p = pointSet.remove(i);
                 resultSet.add(new Cluster<T>(p));
                 break;
             }
         }
     }
 
     return resultSet;
-
 }
\ No newline at end of file
