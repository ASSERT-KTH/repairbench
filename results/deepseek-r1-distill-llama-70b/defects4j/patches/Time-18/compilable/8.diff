diff --git a/tmp/3fa4c39a-2b58-4084-86a4-d0039ae4da1d_buggy.java b/tmp/3b7dcd3f-12cd-406a-be95-7c5b5be60ed6_fixed.java
index be2af16..f92c8b9 100644
--- a/tmp/3fa4c39a-2b58-4084-86a4-d0039ae4da1d_buggy.java
+++ b/tmp/3b7dcd3f-12cd-406a-be95-7c5b5be60ed6_fixed.java
@@ -1,29 +1,27 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+    // First, assume the date is in the Julian calendar.
+    long instant = iJulianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+    // Check if the date is on or after the cutover date.
     if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
-            }
+        // The date should be interpreted in Gregorian.
+        instant = iGregorianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
+
     return instant;
 }
\ No newline at end of file
