diff --git a/tmp/3ae7e140-f7f6-4019-87f9-e38b789cc771_buggy.java b/tmp/ef17d1cb-381c-40bc-9757-d21e34291b49_fixed.java
index be2af16..dfc417e 100644
--- a/tmp/3ae7e140-f7f6-4019-87f9-e38b789cc771_buggy.java
+++ b/tmp/ef17d1cb-381c-40bc-9757-d21e34291b49_fixed.java
@@ -1,29 +1,53 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
         // Assume date is Gregorian.
         long instant;
+        try {
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        } catch (IllegalFieldValueException e) {
+            // If Gregorian rejects it, try Julian
+            try {
                 instant = iJulianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
                 if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                    // It's in the illegal cutover gap.
                     throw new IllegalArgumentException("Specified date does not exist");
                 }
+            } catch (IllegalFieldValueException ex) {
+                // If Julian also rejects it, fail
+                throw ex;
             }
             return instant;
         }
+
+        if (instant < iCutoverMillis) {
+            // Verify if Julian considers the date valid
+            try {
+                iJulianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            } catch (IllegalFieldValueException ex) {
+                // Julian also rejects it, fail
+                throw ex;
+            }
+            // If Julian accepts it and before cutover, use Julian's calculation
+            instant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        }
+        
+        return instant;
+    }
\ No newline at end of file
