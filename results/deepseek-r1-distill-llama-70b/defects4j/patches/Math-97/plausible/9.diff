diff --git a/tmp/75cf59b4-f32d-40bf-bee5-bb07f00224be_buggy.java b/tmp/85389bc2-a03f-4ac6-83e8-19832871a211_fixed.java
index 88647d1..d56f983 100644
--- a/tmp/75cf59b4-f32d-40bf-bee5-bb07f00224be_buggy.java
+++ b/tmp/85389bc2-a03f-4ac6-83e8-19832871a211_fixed.java
@@ -1,44 +1,39 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
 public double solve(double min, double max) throws MaxIterationsExceededException, 
     FunctionEvaluationException {
     
     clearResult();
     verifyInterval(min, max);
     
     double ret = Double.NaN;
     
     double yMin = f.value(min);
     double yMax = f.value(max);
     
-        // Verify bracketing
     double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+    
+    if (sign < 0) {
+        ret = solve(min, yMin, max, yMax, min, yMin);
+    } else {
+        // Check if min is a root
+        if (Math.abs(yMin) <= getAbsoluteAccuracy()) {
+            ret = min;
+        } 
+        // Check if max is a root
+        else if (Math.abs(yMax) <= getAbsoluteAccuracy()) {
+            ret = max;
+        } 
+        // Check if sign is zero but neither is a root (unlikely) or signs are same without zeros
+        else if (sign > 0) {
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+        }
+        // When sign is zero but above checks didn't handle it (e.g., both yMin and yMax are zero)
+        else {
+            ret = min; // Could choose either endpoint as both are zero
+        }
     }
     
     return ret;
 }
\ No newline at end of file
