diff --git a/tmp/fe79af34-4fc1-4e9f-94ba-03c2d24e3c00_buggy.java b/tmp/ffb310bb-032b-4f69-b5ff-8e78edd19cf6_fixed.java
index 88647d1..1e16fc3 100644
--- a/tmp/fe79af34-4fc1-4e9f-94ba-03c2d24e3c00_buggy.java
+++ b/tmp/ffb310bb-032b-4f69-b5ff-8e78edd19cf6_fixed.java
@@ -1,44 +1,36 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifyInterval(min, max);
 
     double ret = Double.NaN;
 
     double yMin = f.value(min);
     double yMax = f.value(max);
 
+    // Check if the function value is zero at the endpoints
+    double tolerance = getAbsoluteAccuracy();
+
+    if (Math.abs(yMin) <= tolerance) {
+        ret = min;
+        return ret;
+    }
+    if (Math.abs(yMax) <= tolerance) {
+        ret = max;
+        return ret;
+    }
+
     // Verify bracketing
     double sign = yMin * yMax;
     if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+        throw new IllegalArgumentException("Function values at endpoints do not have different signs." +
                 "  Endpoints: [" + min + "," + max + "]" + 
                 "  Values: [" + yMin + "," + yMax + "]");
     } else {
-            // solve using only the first endpoint as initial guess
+        // solve using Brent's method with initial guess as min
         ret = solve(min, yMin, max, yMax, min, yMin);
         // either min or max is a root
     }
 
     return ret;
 }
\ No newline at end of file
