diff --git a/tmp/65713119-57d8-4a17-ac48-3ccb07f7252f_buggy.java b/tmp/574157c6-0999-48f8-b420-36a00b02df8a_fixed.java
index b6b11b6..a36fbe0 100644
--- a/tmp/65713119-57d8-4a17-ac48-3ccb07f7252f_buggy.java
+++ b/tmp/574157c6-0999-48f8-b420-36a00b02df8a_fixed.java
@@ -1,38 +1,31 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
     if (escapingOn && c[start] == QUOTE) {
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
     int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+    int currentPos = pos.getIndex();
+    for (; currentPos < pattern.length(); currentPos++) {
+        if (escapingOn && pattern.substring(currentPos).startsWith(ESCAPED_QUOTE)) {
+            appendTo.append(c, lastHold, currentPos - lastHold).append(QUOTE);
+            currentPos += ESCAPED_QUOTE.length() - 1; // Move past the escape sequence
+            pos.setIndex(currentPos + 1); // Update the position after the quoted string
+            lastHold = currentPos + 1;
             continue;
         }
-            switch (c[pos.getIndex()]) {
+        switch (c[currentPos]) {
             case QUOTE:
-                next(pos);
+                currentPos++; // Move to the position after the closing quote
+                pos.setIndex(currentPos);
                 return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
+                        currentPos - lastHold);
             default:
-                next(pos);
+                // Do nothing, let the loop continue
+                break;
         }
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
