diff --git a/tmp/3511a83f-e89e-46df-81ed-cc56963a6956_buggy.java b/tmp/af69c748-39c8-486a-89c7-dc9adc51044d_fixed.java
index b98f0a7..a537e21 100644
--- a/tmp/3511a83f-e89e-46df-81ed-cc56963a6956_buggy.java
+++ b/tmp/af69c748-39c8-486a-89c7-dc9adc51044d_fixed.java
@@ -1,29 +1,41 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+    
+    List<JSType> params = null;
+    if (ct != null) {
+      params = ct.getParameters();
+    }
+    
+    int paramIndex = 0;
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      if (ct != null && paramIndex < params.size()) {
+        arg.setJSType(params.get(paramIndex));
+      }
+      paramIndex++;
       scope = traverse(arg, scope);
     }
+    
     return scope;
   }
\ No newline at end of file
