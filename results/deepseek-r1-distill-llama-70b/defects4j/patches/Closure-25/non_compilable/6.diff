diff --git a/tmp/6212e720-bf02-40be-ac3a-97caadba89ff_buggy.java b/tmp/af65e272-411c-47f2-9646-b95d26435a1b_fixed.java
index b98f0a7..be2ab9e 100644
--- a/tmp/6212e720-bf02-40be-ac3a-97caadba89ff_buggy.java
+++ b/tmp/af65e272-411c-47f2-9646-b95d26435a1b_fixed.java
@@ -1,29 +1,40 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Get the parameters of the constructor function type
+          final JSType[] params = ct.getParameters();
+          // Assign each parameter type to the corresponding argument
+          int paramIndex = 0;
+          for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+            if (paramIndex < params.length) {
+              arg.setJSType(params[paramIndex]);
+            }
+            paramIndex++;
+          }
         }
       }
     }
     n.setJSType(type);
+    // Traverse each argument
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
