diff --git a/tmp/dc9deff2-2b1a-472f-80d2-9235bd1c87a7_buggy.java b/tmp/6a218500-e4b9-408e-9066-69f5ee4ac7b1_fixed.java
index b98f0a7..e2733a0 100644
--- a/tmp/dc9deff2-2b1a-472f-80d2-9235bd1c87a7_buggy.java
+++ b/tmp/6a218500-e4b9-408e-9066-69f5ee4ac7b1_fixed.java
@@ -1,29 +1,37 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+          // Ensure ct is set even if constructorType is a NoObjectType
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+          // Get the parameter types of the constructor
+          List<JSType> parameterTypes = ct.getParameterTypes();
+          int paramIndex = 0;
+          // Process each argument of the new expression
           for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+              if (paramIndex < parameterTypes.size()) {
+                  // Set the expected type for the argument
+                  JSType expectedType = parameterTypes.get(paramIndex);
+                  arg.setJSType(expectedType);
+              }
               scope = traverse(arg, scope);
+              paramIndex++;
           }
+        }
+      }
+    }
+    n.setJSType(type);
     return scope;
 }
\ No newline at end of file
