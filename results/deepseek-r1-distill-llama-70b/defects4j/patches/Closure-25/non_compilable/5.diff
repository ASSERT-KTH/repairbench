diff --git a/tmp/441c3da8-04c9-465c-839b-2fc75dbfcf26_buggy.java b/tmp/8503b316-0e3d-4147-a9d7-c7e393c64c1f_fixed.java
index b98f0a7..e0429e4 100644
--- a/tmp/441c3da8-04c9-465c-839b-2fc75dbfcf26_buggy.java
+++ b/tmp/8503b316-0e3d-4147-a9d7-c7e393c64c1f_fixed.java
@@ -1,29 +1,37 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+
+          // Assign parameter types to arguments
+          List<JSType> paramTypes = ct.getParameterTypes();
+          int paramIndex = 0;
+          Node arg = constructor.getNext();
+          while (arg != null && paramIndex < paramTypes.size()) {
+            JSType paramType = paramTypes.get(paramIndex);
+            arg.setJSType(paramType);
+            arg = arg.getNext();
+            paramIndex++;
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
