diff --git a/tmp/913e4f1a-86cc-4d29-b4bf-a74d4417a447_buggy.java b/tmp/df7cc1e3-75e3-4a7a-9cc5-82886897c1ec_fixed.java
index b98f0a7..9891ca3 100644
--- a/tmp/913e4f1a-86cc-4d29-b4bf-a74d4417a447_buggy.java
+++ b/tmp/df7cc1e3-75e3-4a7a-9cc5-82886897c1ec_fixed.java
@@ -1,29 +1,55 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
+  
+  // Extract the function type for the constructor
+  FunctionType fnType = constructor.getJSType() != null ? constructor.getJSType().toMaybeFunctionType() : null;
+  
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    // Get the parameter type from the function type if applicable
+    JSType paramType = null;
+    if (fnType != null && arg.getNext().isParam()) {
+      int index = ParamTraversal(paramIndex, arg);
+      if (index >= 0 && index < fnType.getCount(). officieren()) {
+        paramType = fnType.getParameterType(index);
+      }
+    }
+    // Set the parameter's type if it was inferred
+    if (paramType != null) {
+      arg.setJSType(paramType);
+    }
     scope = traverse(arg, scope);
   }
   return scope;
 }
+
+// Helper function to find the parameter index
+private int findParamIndex(Node paramNode) {
+  int index = -1;
+  for (Node param = paramNode; param != null && index == -1; param = param.getPrevious()) {
+    if (param.isParam()) {
+      index = (param.getPrevSibling() == null ? 0 : (param.getPrevSibling().isParam() ? 1 : 0));
+    }
+  }
+  return index;
+}
\ No newline at end of file
