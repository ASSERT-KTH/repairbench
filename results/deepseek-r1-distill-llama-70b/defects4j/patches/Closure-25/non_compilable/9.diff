diff --git a/tmp/9c4ba466-3824-4490-b3a3-687d57c18e0e_buggy.java b/tmp/99f4502f-4e8a-4242-bcd1-2ef0ab16106c_fixed.java
index b98f0a7..c1e7551 100644
--- a/tmp/9c4ba466-3824-4490-b3a3-687d57c18e0e_buggy.java
+++ b/tmp/99f4502f-4e8a-4242-bcd1-2ef0ab16106c_fixed.java
@@ -1,29 +1,29 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
+    if (type == null) {
+        type = getNativeType(UNKNOWN_TYPE);
+    }
+    type = type.restrictProperties(constructor.getJSType());
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
