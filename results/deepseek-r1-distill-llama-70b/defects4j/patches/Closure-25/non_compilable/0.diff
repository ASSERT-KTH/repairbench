diff --git a/tmp/67e95b6c-483d-4857-a36f-61da92c2b765_buggy.java b/tmp/f62833a1-77d8-4c5b-9c3e-2c1e39fef7cc_fixed.java
index b98f0a7..5a582d9 100644
--- a/tmp/67e95b6c-483d-4857-a36f-61da92c2b765_buggy.java
+++ b/tmp/f62833a1-77d8-4c5b-9c3e-2c1e39fef7cc_fixed.java
@@ -1,29 +1,51 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    // Extract the parameter types from the constructor type.
+    List<JSType> paramTypes = null;
+    if (constructorType != null) {
+        FunctionType funcType = constructorType.toMaybeFunctionType();
+        if (funcType == null && constructorType instanceof FunctionType) {
+            funcType = (FunctionType) constructorType;
+        }
+        if (funcType != null) {
+            paramTypes = funcType.getParameters();
+        }
+    }
+
+    int paramIndex = 0;
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (paramTypes != null && paramIndex < paramTypes.size()) {
+            JSType expectedType = paramTypes.get(paramIndex);
+            JSType currentArgType = arg.getJSType();
+            if (currentArgType == null) {
+                arg.setJSType(expectedType);
+            } else {
+                // Intersect the current type with the expected parameter type
+                arg.setJSType(JSType.createIntersection(currentArgType, expectedType));
+            }
+        }
         scope = traverse(arg, scope);
+        paramIndex++;
     }
     return scope;
   }
\ No newline at end of file
