diff --git a/tmp/638ad37f-5c65-4efa-9c6b-82978c91d7ed_buggy.java b/tmp/64e78eb2-b493-4ce7-9d6e-a387062499cd_fixed.java
index b98f0a7..f5eb996 100644
--- a/tmp/638ad37f-5c65-4efa-9c6b-82978c91d7ed_buggy.java
+++ b/tmp/64e78eb2-b493-4ce7-9d6e-a387062499cd_fixed.java
@@ -1,29 +1,33 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+          // Get the function parameters and set expected types on arguments
+          List<JSType> paramTypes = ct.getParameterTypes();
+          int paramCount = 0;
           for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+            if (paramCount < paramTypes.size()) {
+              JSType paramType = paramTypes.get(paramCount);
+              arg.setJSType(paramType);
+            }
             scope = traverse(arg, scope);
+            paramCount++;
           }
+        }
+      }
+    }
+    n.setJSType(type);
     return scope;
   }
\ No newline at end of file
