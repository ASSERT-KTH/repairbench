diff --git a/tmp/e1f1cbec-2674-426a-9c8d-778dd00cb6a4_buggy.java b/tmp/37d6fa44-6844-445c-92f2-5e3bc076c43f_fixed.java
index b98f0a7..e8e06f5 100644
--- a/tmp/e1f1cbec-2674-426a-9c8d-778dd00cb6a4_buggy.java
+++ b/tmp/37d6fa44-6844-445c-92f2-5e3bc076c43f_fixed.java
@@ -1,29 +1,51 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Extract parameter types from the constructor function
+                List<JSType> paramTypes = ct.getParams() == null ? ImmutableList.of() : FluentIterable.from(ct.getParams())
+                        .transform(Parameter::getType)
+                        .toList();
+                
+                // Process each argument with its corresponding parameter type
+                int paramIndex = 0;
+                Node arg = constructor.getNext();
+                while (arg != null) {
+                    if (paramIndex < paramTypes.size()) {
+                        JSType paramType = paramTypes.get(paramIndex);
+                        // Check if the argument is a variable and set its type in scope
+                        if (arg.isName()) {
+                            String varName = arg.getString();
+                            if (scope.lookup(varName) == null || scope.lookup(varName).isUnknownType()) {
+                                scope = scope.add(varName, paramType);
                             }
+                        } else {
+                            // For other types, set JSType directly
+                            arg.setJSType(paramType);
                         }
                     }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
                     scope = traverse(arg, scope);
+                    arg = arg.getNext();
+                    paramIndex++;
                 }
+            }
+        }
+    }
+    n.setJSType(type);
     return scope;
 }
\ No newline at end of file
