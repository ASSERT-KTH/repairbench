diff --git a/tmp/c3f5f3d3-7fe3-486f-886c-376596d3fcfd_buggy.java b/tmp/bd5af3a7-fec7-41f0-b9a7-f3f21b2ff5fb_fixed.java
index 233a867..25d6967 100644
--- a/tmp/c3f5f3d3-7fe3-486f-886c-376596d3fcfd_buggy.java
+++ b/tmp/bd5af3a7-fec7-41f0-b9a7-f3f21b2ff5fb_fixed.java
@@ -1,73 +1,65 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
+        // Check if 'this' is correctly provided and move past it
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+
+    // Traverse both arguments and parameters
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+      // Check if there are any parameters left in either call arguments or function parameters
       if (fnParam != null) {
         if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+          // Check if the current argument has side effects and the parameter is referenced more than once
+          if (NodeUtil.mayHaveSideEffects(cArg, compiler) &&
+              NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
-        }
-
-        // Move to the next name.
+          // Also, check if any argument in the call has side effects without a corresponding parameter
+        } else {
+          // If there are function parameters without corresponding arguments, it's only OK if the parameters are optional
+          if (fnParam.isOptional() || fnParam.hasName()) {
             fnParam = fnParam.getNext();
+          } else {
+            return CanInlineResult.NO;
+          }
+        }
       }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+      // Check each argument for side effects, regardless of parameters
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
-        cArg = cArg.getNext();
       }
+
+      // Move to the next argument and parameter
+      cArg = (cArg != null) ? cArg.getNext() : null;
+      fnParam = (fnParam != null) ? fnParam.getNext() : null;
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
