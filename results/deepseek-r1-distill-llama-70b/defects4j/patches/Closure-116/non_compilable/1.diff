diff --git a/tmp/d605acbf-dbc2-4782-9272-aff1f5ec0945_buggy.java b/tmp/75ff2ec8-25ac-49e2-8213-8c4a09be2d5f_fixed.java
index 233a867..33c2791 100644
--- a/tmp/d605acbf-dbc2-4782-9272-aff1f5ec0945_buggy.java
+++ b/tmp/75ff2ec8-25ac-49e2-8213-8c4a09be2d5f_fixed.java
@@ -1,73 +1,90 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
  * 1) If a call's arguments have side effects,
  * the corresponding argument in the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
-
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+
+  // Check if any parameter is modified in the function body
+  Map<String, Boolean> modified = new HashMap<>();
+  for (Node param : NodeUtil.getFunctionParameters(fnNode).children()) {
+    String paramName = param.getString();
+    if (isParameterModified(block, paramName)) {
+      modified.put(paramName, true);
+    }
+  }
+
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+    // Check for arguments that are evaluated more than once or have side effects
     if (fnParam != null) {
       if (cArg != null) {
+        // If the function's parameter is modified, inlining is not allowed
+        if (modified.containsKey(fnParam.getString())) {
+          return CanInlineResult.NO;
+        }
 
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+        // Check if the argument has side effects and is referenced multiple times
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
       }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+    // For every call argument, check for side-effects even if no matching parameter
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
+
+// Helper method to check if a parameter is modified in the function body
+private boolean isParameterModified(Node block, String paramName) {
+  for (Node node = block.getFirstChild(); node != null; node = node.getNext()) {
+    if (node.isAssign() && node.getFirstChild().isName() && node.getFirstChild().getString().equals(paramName)) {
+      return true;
+    }
+  }
+  return false;
+}
\ No newline at end of file
