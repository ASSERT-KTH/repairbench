diff --git a/tmp/23a8ad79-526a-44b6-af3c-24d20d002ccd_buggy.java b/tmp/f2a89154-8418-4fe8-8a83-8e085720b78e_fixed.java
index 233a867..c5bc604 100644
--- a/tmp/23a8ad79-526a-44b6-af3c-24d20d002ccd_buggy.java
+++ b/tmp/f2a89154-8418-4fe8-8a83-8e085720b78e_fixed.java
@@ -1,73 +1,69 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
         return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
+    // Check if any function parameters are modified within the function.
+    if (NodeUtil.functionParamsModified(fnNode, compiler)) {
+        return CanInlineResult.NO;
+    }
 
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
         if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
+            // Check if 'this' argument is present
             if (cArg == null || !cArg.isThis()) {
                 return CanInlineResult.NO;
             }
             cArg = cArg.getNext();
         } else {
             // ".apply" call should be filtered before this.
             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
         }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+    Node fnParams = NodeUtil.getFunctionParameters(fnNode);
+    Node fnParam = fnParams.getFirstChild();
+    Node cArg_DISABLED = cArg;
+
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+        // For each named parameter check if a mutable argument is referenced more than once.
         if (fnParam != null) {
             if (cArg != null) {
 
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+                // Check if the argument has side effects and is used multiple times
+                if (NodeUtil.mayHaveSideEffects(cArg, compiler) &&
+                        NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+                    return CanInlineResult.NO;
+                }
+
+                // Check if the function parameter is modified within the function
+                if (NodeUtil.parameterModifiedInFunction(fnNode, fnParam, compiler)) {
                     return CanInlineResult.NO;
                 }
             }
 
-        // Move to the next name.
+            // Move to the next parameter
             fnParam = fnParam.getNext();
         }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+        // Check if any call argument has side effects without a matching parameter
         if (cArg != null) {
             if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
                 return CanInlineResult.NO;
             }
             cArg = cArg.getNext();
         }
     }
 
     return CanInlineResult.YES;
 }
\ No newline at end of file
