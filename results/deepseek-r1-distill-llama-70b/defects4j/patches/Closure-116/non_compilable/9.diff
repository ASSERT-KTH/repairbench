diff --git a/tmp/28299da3-d376-40e7-bf32-82bed3314160_buggy.java b/tmp/f78fb82e-72c7-4a0f-ade0-e9c1f2af701e_fixed.java
index 233a867..f1b09a0 100644
--- a/tmp/28299da3-d376-40e7-bf32-82bed3314160_buggy.java
+++ b/tmp/f78fb82e-72c7-4a0f-ade0-e9c1f2af701e_fixed.java
@@ -1,73 +1,121 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
  * 1) If a call's arguments have side effects,
  * the corresponding argument in the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
-
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
     // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
 
         // Check for arguments that are evaluated more than once.
         // Note: Unlike block inlining, there it is not possible that a
         // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
       }
 
       // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
     // For every call argument check for side-effects, even if there
     // isn't a named parameter to match.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
+  // Check if any parameter is assigned to in the function body.
+  List<String> paramNames = NodeUtil.getFunctionParameters(fnNode)
+      .getChildNodes()
+      .stream()
+      .map(Node::getString)
+      .collect(Collectors.toList());
+
+  if (assignsToParam(fnNode, paramNames)) {
+    return CanInlineResult.NO;
+  }
+
   return CanInlineResult.YES;
 }
+
+private boolean assignsToParam(Node fnNode, List<String> paramNames) {
+  final Set<String> paramSet = new HashSet<>(paramNames);
+  Node block = fnNode.getLastChild();
+
+  for (Node node = block.getFirstChild(); node != null; node = node.getNext()) {
+    if (node.isAssign() && node.getFirstChild().isName()) {
+      String name = node.getFirstChild().getString();
+      if (paramSet.contains(name)) {
+        return true;
+      }
+    }
+    if (node.hasChildren()) {
+      if (assignsToParamHelper(node, paramSet)) {
+        return true;
+      }
+    }
+  }
+
+  return false;
+}
+
+private boolean assignsToParamHelper(Node node, Set<String> paramSet) {
+  if (node.isAssign() && node.getFirstChild().isName()) {
+    String name = node.getFirstChild().getString();
+    if (paramSet.contains(name)) {
+      return true;
+    }
+  }
+
+  for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+    if (assignsToParamHelper(child, paramSet)) {
+      return true;
+    }
+  }
+
+  return false;
+}
\ No newline at end of file
