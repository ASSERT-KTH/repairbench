diff --git a/tmp/02672479-3a11-4143-8ce0-4150210a6509_buggy.java b/tmp/4640b5f7-4f95-4e89-b597-62a823a46494_fixed.java
index 233a867..6beb4fc 100644
--- a/tmp/02672479-3a11-4143-8ce0-4150210a6509_buggy.java
+++ b/tmp/4640b5f7-4f95-4e89-b597-62a823a46494_fixed.java
@@ -1,73 +1,58 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
         return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
-
-
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
     if (!callNode.getFirstChild().isName()) {
         if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
             if (cArg == null || !cArg.isThis()) {
                 return CanInlineResult.NO;
             }
             cArg = cArg.getNext();
         } else {
-        // ".apply" call should be filtered before this.
             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
         }
     }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+        MutableBoolean paramMutable = new MutableBoolean(false);
         if (fnParam != null) {
             if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+                if (NodeUtil.mayEffectMutableState(cArg, compiler)) {
+                    paramMutable.setTrue();
+                }
+            }
+            if (paramMutable.value) {
+                if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) != 1) {
                     return CanInlineResult.NO;
                 }
             }
-
-        // Move to the next name.
+            if (cArg != null) {
                 fnParam = fnParam.getNext();
+            } else {
+                break;
+            }
         }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
         if (cArg != null) {
             if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+                if (!cArg.isName()) {
                     return CanInlineResult.NO;
                 }
+            }
             cArg = cArg.getNext();
         }
+
+        fnParam = fnParam != null ? fnParam.getNext() : null;
+    }
+
+    if (cArg != null || fnParam != null) {
+        return CanInlineResult.NO;
     }
 
     return CanInlineResult.YES;
 }
\ No newline at end of file
