diff --git a/tmp/b7bea659-35f7-4ef1-aade-db7f290be0c1_buggy.java b/tmp/a9a38c67-b1f3-4d18-bd1c-d6f0ca00cd3f_fixed.java
index de9af32..b63b15d 100644
--- a/tmp/b7bea659-35f7-4ef1-aade-db7f290be0c1_buggy.java
+++ b/tmp/a9a38c67-b1f3-4d18-bd1c-d6f0ca00cd3f_fixed.java
@@ -1,18 +1,34 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node funcNode = node.getFirstChild();
+      if (funcNode.getType() == Token.NAME) {
+        changed.add(funcNode.getString());
+      } else if (funcNode.getType() == Token.MEMBER) {
+        // Check if the function is called via call() or apply()
+        Node rightChild = funcNode.getNext();
+        if (rightChild != null) {
+          String methodName = rightChild.getString();
+          if (methodName.equals("call") || methodName.equals("apply")) {
+            Node leftPart = funcNode.getFirstChild();
+            // Traverse the left part to get the function name
+            while (leftPart.getType() == Token.MEMBER) {
+              leftPart = leftPart.getFirstChild();
+            }
+            if (leftPart.getType() == Token.NAME) {
+              changed.add(leftPart.getString());
+            }
+          }
+        }
       }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
