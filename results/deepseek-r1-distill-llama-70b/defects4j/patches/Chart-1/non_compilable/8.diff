diff --git a/tmp/579c7c18-9629-4246-9bec-b0e2c8bda6f9_buggy.java b/tmp/f312153b-ce39-497f-b5a0-abfdd4f7c358_fixed.java
index 114ff20..dfbaf44 100644
--- a/tmp/579c7c18-9629-4246-9bec-b0e2c8bda6f9_buggy.java
+++ b/tmp/f312153b-ce39-497f-b5a0-abfdd4f7c358_fixed.java
@@ -1,41 +1,58 @@
     /**
      * Returns a (possibly empty) collection of legend items for the series
      * that this renderer is responsible for drawing.
      *
      * @return The legend item collection (never <code>null</code>).
      *
      * @see #getLegendItem(int, int)
      */
     public LegendItemCollection getLegendItems() {
         LegendItemCollection result = new LegendItemCollection();
-        if (this.plot == null) {
+        if (this.plot == null || this.plot.getDataset() == null) {
             return result;
         }
-        int index = this.plot.getIndexOf(this);
-        CategoryDataset dataset = this.plot.getDataset(index);
-        if (dataset != null) {
+        CategoryDataset dataset = this.plot.getDataset();
+        if (dataset == null) {
             return result;
         }
-        int seriesCount = dataset.getRowCount();
-        if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {
-            for (int i = 0; i < seriesCount; i++) {
-                if (isSeriesVisibleInLegend(i)) {
-                    LegendItem item = getLegendItem(index, i);
+        
+        int seriesCount = dataset.getColumnCount();
+        if (dataset instanceof IntervalCategoryDataset) {
+            seriesCount = ((IntervalCategoryDataset) dataset).getRowCount();
+        }
+        
+        boolean ascending = plot.getRowRenderingOrder().equals(SortOrder.ASCENDING);
+        int[] seriesOrder = ascending ? 
+                rowsInOrder(dataset.getRowCount()) : 
+                reverseRowsInOrder(dataset.getRowCount());
+        
+        for (int series : seriesOrder) {
+            if (isSeriesVisibleInLegend(series)) {
+                LegendItem item = getLegendItem(series);
                 if (item != null) {
                     result.add(item);
                 }
             }
         }
+        return result;
     }
-        else {
-            for (int i = seriesCount - 1; i >= 0; i--) {
-                if (isSeriesVisibleInLegend(i)) {
-                    LegendItem item = getLegendItem(index, i);
-                    if (item != null) {
-                        result.add(item);
+
+    private int[] rowsInOrder(int rowCount) {
+        int[] order = new int[rowCount];
+        for (int i = 0; i < rowCount; i++) {
+            order[i] = i;
         }
+        return order;
     }
+
+    private int[] reverseRowsInOrder(int rowCount) {
+        int[] order = new int[rowCount];
+        for (int i = 0; i < rowCount; i++) {
+            order[i] = rowCount - 1 - i;
         }
+        return order;
     }
-        return result;
+
+    private intExporter getLegendItem(int series) {
+        return getLegendItem(this.plot.getIndexOf(this), series);
     }
\ No newline at end of file
