diff --git a/tmp/c683f9c0-447e-4fcc-990f-f4e45b618e5f_buggy.java b/tmp/ed984e8b-a682-49ec-a6b8-704a6259de29_fixed.java
index 39c4220..bdd4fc1 100644
--- a/tmp/c683f9c0-447e-4fcc-990f-f4e45b618e5f_buggy.java
+++ b/tmp/ed984e8b-a682-49ec-a6b8-704a6259de29_fixed.java
@@ -1,21 +1,46 @@
 private final static int _parseIndex(String str) {
     final int len = str.length();
-        // [Issue#133]: beware of super long indexes; assume we never
-        // have arrays over 2 billion entries so ints are fine.
     if (len == 0 || len > 10) {
         return -1;
     }
-        for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
-            if (c > '9' || c < '0') {
+
+    int i = 0;
+    intParseException: {
+        if (str.indexOf('e') != -1 || str.indexOf('E') != -1) {
+            String[] parts = str.split("[eE]");
+            if (parts.length != 2) {
+                break intParseException;
+            }
+            String base = parts[0];
+            String exponent = parts[1];
+            if (base.isEmpty() || exponent.isEmpty()) {
+                break intParseException;
+            }
+            long baseNum;
+            try {
+                baseNum = NumberInput.parseLong(base);
+            } catch (NumberFormatException e) {
+                break intParseException;
+            }
+            long exponentNum;
+            try {
+                exponentNum = NumberInput.parseLong(exponent);
+            } catch (NumberFormatException e) {
+                break intParseException;
+            }
+            double result = baseNum * Math.pow(10, exponentNum);
+            if (result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {
                 return -1;
             }
+            return (int) result;
         }
-        if (len == 10) {
-            long l = NumberInput.parseLong(str);
-            if (l > Integer.MAX_VALUE) {
+
+        try {
+            return Integer.parseInt(str);
+        } catch (NumberFormatException e) {
             return -1;
         }
     }
-        return NumberInput.parseInt(str);
+    // If any parsing exception occurs, return -1
+    return -1;
 }
\ No newline at end of file
