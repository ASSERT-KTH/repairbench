diff --git a/tmp/0059495f-4de8-4668-83ab-7986775c8d6e_buggy.java b/tmp/9c39a78f-78c2-44c9-8fcb-0488f103aa37_fixed.java
index 90fe130..a982f63 100644
--- a/tmp/0059495f-4de8-4668-83ab-7986775c8d6e_buggy.java
+++ b/tmp/9c39a78f-78c2-44c9-8fcb-0488f103aa37_fixed.java
@@ -1,61 +1,54 @@
     /**
-     * <p>Converts a String to a Locale.</p>
+     * Converts a String to a Locale.
      *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
+     * This method takes the string format of a locale and creates the
+     * locale object from it.
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")
+     *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
      * </pre>
      *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
+     * The input string is validated to ensure it follows the correct format.
+     * The language code must be lowercase, the country code (if present) must be
+     * uppercase, and the parts must be separated by underscores.
      *
      * @param str the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
-        int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        String[] parts = str.split("_", -1); // Split into all parts, including empty strings
+
+        if (parts.length > 3) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        char ch0 = str.charAt(0);
-        char ch1 = str.charAt(1);
-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
+
+        String language = parts[0];
+        if (!language.matches("[a-z]{2}")) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        if (len == 2) {
-            return new Locale(str, "");
+
+        if (parts.length == 1) {
+            return new Locale(language, "", "");
+        } else if (parts.length == 2) {
+            String country = parts[1];
+            if (country.matches("[A-Z]{2}")) {
+                return new Locale(language, country, "");
             } else {
-            if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+        } else { // parts.length == 3
+            String country = parts[1];
+            String variant = parts[2];
+            if (!country.matches("(?:[A-Z]{2}|)")) { // Empty string or 2 uppercase letters
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
-                if (str.charAt(5) != '_') {
-                    throw new IllegalArgumentException("Invalid locale format: " + str);
-                }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
-            }
+            return new Locale(language, country, variant);
         }
     }
\ No newline at end of file
