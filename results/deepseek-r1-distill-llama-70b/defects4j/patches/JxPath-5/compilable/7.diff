diff --git a/tmp/e0dd138c-1e8f-4790-9f1b-9d9de926d698_buggy.java b/tmp/40290576-9c02-441d-a8a0-594f74e2561a_fixed.java
index 5f8ac1a..315ae0c 100644
--- a/tmp/e0dd138c-1e8f-4790-9f1b-9d9de926d698_buggy.java
+++ b/tmp/40290576-9c02-441d-a8a0-594f74e2561a_fixed.java
@@ -1,34 +1,48 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
+    // Handle cases where either parent is null to avoid NPE and incorrect exceptions
+    if (p1.parent == null) {
+        if (p2.parent == null) {
+            // Both are root pointers; compare based on their equality
+            return p1.equals(p2) ? 0 : -1;
+        } else {
+            // p1 is root, p2 is not; treat p1 as less than
+            return -1;
+        }
+    } else if (p2.parent == null) {
+        // p2 is root, treat it as greater
+        return 1;
+    } else {
         return p1.parent.compareChildNodePointers(p1, p2);
     }
+}
\ No newline at end of file
