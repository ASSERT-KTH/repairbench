diff --git a/tmp/463fedcb-1933-4b70-91a3-ea90b35d258f_buggy.java b/tmp/56e9bebe-2140-4932-81b0-d07fd1e6b9ba_fixed.java
index 39981f0..35d0f17 100644
--- a/tmp/463fedcb-1933-4b70-91a3-ea90b35d258f_buggy.java
+++ b/tmp/56e9bebe-2140-4932-81b0-d07fd1e6b9ba_fixed.java
@@ -1,65 +1,35 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
         String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+        JSType recvType = getJSType(n.getFirstChild());
+        ObjectType objType = recvType.toMaybeObjectType();
+        if (objType != null && dereference) {
+            objType = objType.dereference();
         }
+        while (objType != null && !objType.hasOwnProperty(propName)) {
+            objType = objType.getImplicitPrototype();
         }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
+        if (objType != null) {
+            return objType.getConstructor() != null ? objType.getConstructor().getName() + "." + propName : "?" + propName;
         }
     }
 
     JSType type = getJSType(n);
     if (dereference) {
         ObjectType dereferenced = type.dereference();
         if (dereferenced != null) {
             type = dereferenced;
         }
     }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
+    if (type.isFunctionPrototypeType() || (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {
         return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
         return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
         return "function";
     } else {
         return type.toString();
     }
 }
\ No newline at end of file
