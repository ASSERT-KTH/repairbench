diff --git a/tmp/772a384d-7fa5-4889-a641-f3cb26a63816_buggy.java b/tmp/3c5b6f11-a60d-4aac-9452-0e22607050a2_fixed.java
index 39981f0..3b84da2 100644
--- a/tmp/772a384d-7fa5-4889-a641-f3cb26a63816_buggy.java
+++ b/tmp/3c5b6f11-a60d-4aac-9452-0e22607050a2_fixed.java
@@ -1,65 +1,47 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
   if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+    JSType type = getJSType(n.getFirstChild());
+    if (dereference) {
+      type = type.dereference();
+    }
+    ObjectType objectType = type.toObjectType();
     if (objectType != null) {
       String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+      // Look for the property in the object type or its prototypes
+      ObjectType currentType = objectType;
+      while (currentType != null && !currentType.hasOwnProperty(propName)) {
+        currentType = currentType.getImplicitPrototype();
       }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+      if (currentType != null) {
+        // Prefer constructor's name if it's a function
+        String typeName = currentType.getConstructor() != null && 
+                          currentType.getConstructor().isFunction() ?
+                          currentType.getConstructor().toString() :
+                          currentType.toString();
+        return typeName + "." + propName;
       }
     }
   }
 
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
+
   if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
+      (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
+
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
-      // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
