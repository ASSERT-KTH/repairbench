diff --git a/tmp/2ed5c656-6b82-49cc-a3cc-a0d29795cdf1_buggy.java b/tmp/93957e5c-ccbb-47af-ac3e-a93fe5ef8052_fixed.java
index 39981f0..1e51be1 100644
--- a/tmp/2ed5c656-6b82-49cc-a3cc-a0d29795cdf1_buggy.java
+++ b/tmp/93957e5c-ccbb-47af-ac3e-a93fe5ef8052_fixed.java
@@ -1,65 +1,40 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
+        // Get the type of the base object and dereference it if needed
+        JSType baseType = getJSType(n.getFirstChild());
+        if (dereference) {
+            baseType = baseType.dereference();
+        }
+        if (baseType instanceof ObjectType) {
+            ObjectType objectType = (ObjectType) baseType;
             String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
             
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+            if (objectType.getImplicitPrototype() != null) {
+                // Climb the prototype chain to find where the property is originally defined
+                ObjectType currentType = objectType;
+                while (currentType != null && !currentType.hasOwnProperty(propName)) {
+                    currentType = currentType.getImplicitPrototype();
+                }
+                if (currentType != null) {
+                    return currentType.toString() + "." + propName;
+                }
             }
         }
     }
 
     JSType type = getJSType(n);
     if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
+        type = type.dereference();
     }
-    }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
+    if (type.isFunctionPrototypeType() || (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {
         return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
         return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
         return "function";
     } else {
         return type.toString();
     }
 }
\ No newline at end of file
