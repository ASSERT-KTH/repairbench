diff --git a/tmp/e4edb593-6523-4f3b-b794-eeb1cad91f59_buggy.java b/tmp/875c14c9-b484-43d3-8705-1657b4b3010b_fixed.java
index 39981f0..644bf14 100644
--- a/tmp/e4edb593-6523-4f3b-b794-eeb1cad91f59_buggy.java
+++ b/tmp/875c14c9-b484-43d3-8705-1657b4b3010b_fixed.java
@@ -1,65 +1,53 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
+      ObjectType receiverType = getJSType(n.getFirstChild()).dereference();
+      if (receiverType != null) {
         String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+        if (receiverType.getConstructor() != null &&
+            receiverType.getConstructor().isInterface()) {
+          receiverType = FunctionType.getTopDefiningInterface(
+              receiverType, propName);
         } else {
           // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+          while (receiverType != null && !receiverType.hasOwnProperty(propName)) {
+            receiverType = receiverType.getImplicitPrototype();
+          }
+          // After climbing, if receiverType is null, we still want to return the original type.
+          // So we reset if objectType becomes null.
+          if (receiverType == null) {
+            receiverType = getJSType(n.getFirstChild()).dereference();
           }
         }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
+        // Return the readable name
+        return receiverType.toString() + "." + propName;
       }
     }
 
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
\ No newline at end of file
