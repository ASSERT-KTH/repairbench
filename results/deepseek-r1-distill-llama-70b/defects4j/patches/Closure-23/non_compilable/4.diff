diff --git a/tmp/8f920e36-e7f3-42fd-b2a6-7b3467eeddb8_buggy.java b/tmp/99964eda-5b6e-4ba0-bb5a-bce064ad1ab3_fixed.java
index cfdcd9c..af59efa 100644
--- a/tmp/8f920e36-e7f3-42fd-b2a6-7b3467eeddb8_buggy.java
+++ b/tmp/99964eda-5b6e-4ba0-bb5a-bce064ad1ab3_fixed.java
@@ -1,51 +1,58 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
         return n;
     }
 
     if (!right.isNumber()) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
+        // Sometimes people like to use complex expressions to index into arrays.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
+    Node array = left.getFirstChild();
+    if (!array.isArrayLit()) {
+        // The array may be part of a more complex expression, just return.
+        return n;
+    }
 
-      current = current.getNext();
+    // Extract the array elements
+    List<Node> elements = new ArrayList<>();
+    for (Node child = array.getFirstChild(); child != null; child = child.getNext()) {
+        if (child.isEmpty() || child.isNormalBlock()) {
+            elements.add(child);
+        }
     }
 
-    if (elem == null) {
+    if (elements.size() <= intIndex) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
+    Node elem = elements.get(intIndex);
     if (elem.isEmpty()) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
-      left.removeChild(elem);
+        // Detach the element so it can be reused without affecting the original array
+        elem.detach();
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
