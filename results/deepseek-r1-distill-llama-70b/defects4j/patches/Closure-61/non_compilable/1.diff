diff --git a/tmp/d369dd59-5798-4167-a8bf-fb1908b7e339_buggy.java b/tmp/2c967e5b-b63b-4ce2-a13d-c0bced97889e_fixed.java
index b36c3f0..2f4721b 100644
--- a/tmp/d369dd59-5798-4167-a8bf-fb1908b7e339_buggy.java
+++ b/tmp/2c967e5b-b63b-4ce2-a13d-c0bced97889e_fixed.java
@@ -1,58 +1,76 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
       if (callNode.hasOneChild()
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
       // Functions in the "Math" namespace have no side effects.
 
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
+
+      // Check for Math functions without side effects
+      if (nameNode.getFirstChild().getType() == Token.NAME 
+          && "Math".equals(nameNode.getFirstChild().getString())) {
+        String methodName = nameNode.getLastChild().getString();
+        if (MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {
+          return false;
+        }
+      }
     }
 
     return true;
   }
+
+  // Define a new set for Math methods without side effects
+  private static final Set<String> MATH_METHODS_WITHOUT_SIDEEFFECTS = new HashSet<>();
+  static {
+    MATH_METHODS_WITHOUT_SIDEEFFECTS.add("sin");
+    MATH_METHODS_WITHOUT_SIDEEFFECTS.add("cos");
+    MATH_METHODS_WITHOUT_SIDEEFFECTS.add("random");
+    // Add more Math methods as needed
+  }
\ No newline at end of file
