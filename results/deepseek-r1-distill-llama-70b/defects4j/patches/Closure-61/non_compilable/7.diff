diff --git a/tmp/4af9c2f7-3229-456e-934f-197b6ca804fa_buggy.java b/tmp/7ac241ff-6e8e-4e11-919a-68b2caf4a5bd_fixed.java
index b36c3f0..33ab1c2 100644
--- a/tmp/4af9c2f7-3229-456e-934f-197b6ca804fa_buggy.java
+++ b/tmp/7ac241ff-6e8e-4e11-919a-68b2caf4a5bd_fixed.java
@@ -1,58 +1,59 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
-        return false;
-      }
-
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
+      // Check if the function call is to a Math namespace method with no side effects.
+      Node receiver = nameNode.getFirstChild();
+      if (receiver.getType() == Token.NAME && receiver.getString().equals("Math")) {
+        String methodName = nameNode.getLastChild().getString();
+        if (MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {
+          return false;
+        }
+      }
+
+      // Check other cases for functions without side effects.
+      if (callNode.hasOneChild()
+          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
+                nameNode.getLastChild().getString())) {
+        return false;
+      }
 
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
             return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
