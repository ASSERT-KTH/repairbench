diff --git a/tmp/8832b03c-df4c-4df0-baa3-324909de227c_buggy.java b/tmp/91e2f79f-8f12-42a4-852a-d9dd81b0b6a5_fixed.java
index efa499e..716d205 100644
--- a/tmp/8832b03c-df4c-4df0-baa3-324909de227c_buggy.java
+++ b/tmp/91e2f79f-8f12-42a4-852a-d9dd81b0b6a5_fixed.java
@@ -1,35 +1,37 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
         int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+        Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
+        double mostNegative = 0;
+        if (negativeVarBasicRow != null) {
+            mostNegative = getEntry(negativeVarBasicRow, getRhsOffset());
+        }
 
         Set<Integer> basicRows = new HashSet<Integer>();
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         for (int i = 0; i < coefficients.length; i++) {
             int colIndex = columnLabels.indexOf("x" + i);
             if (colIndex < 0) {
                 coefficients[i] = 0;
                 continue;
             }
             Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
             if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+                coefficients[i] = 0;
             } else {
+                if (basicRow != null) {
                     basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+                    double value;
+                    if (restrictToNonNegative) {
+                        value = getEntry(basicRow, getRhsOffset());
+                        coefficients[i] = value;
+                    } else {
+                        value = getEntry(basicRow, getRhsOffset()) - mostNegative;
+                        coefficients[i] = value;
+                    }
+                } else {
+                    coefficients[i] = 0;
+                }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
