diff --git a/tmp/e993f1ab-06c5-4950-9725-c9de003358e4_buggy.java b/tmp/879d0c91-eb09-4cd4-ba86-b03cbde0159b_fixed.java
index efa499e..0b23bb2 100644
--- a/tmp/e993f1ab-06c5-4950-9725-c9de003358e4_buggy.java
+++ b/tmp/879d0c91-eb09-4cd4-ba86-b03cbde0159b_fixed.java
@@ -1,35 +1,36 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+      Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
           // if the basic row is found to be the objective function row
           // set the coefficient to 0 -> this case handles unconstrained 
           // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
+          if (basicRow != null && basicRows.contains(basicRow)) {
               // if multiple variables can take a given value
               // then we choose the first and set the rest equal to 0
               coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
           } else {
+              if (basicRow != null) {
                   basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+              }
+              double value = (basicRow == null) ? 0 : getEntry(basicRow, getRhsOffset());
+              coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
