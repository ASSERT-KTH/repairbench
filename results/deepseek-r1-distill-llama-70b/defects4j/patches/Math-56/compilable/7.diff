diff --git a/tmp/6ee862bf-ab44-4737-a209-02f8b0874d8e_buggy.java b/tmp/4b371ef7-31a6-424f-91df-cc5b8bfbd988_fixed.java
index 2608424..db7ac1c 100644
--- a/tmp/6ee862bf-ab44-4737-a209-02f8b0874d8e_buggy.java
+++ b/tmp/4b371ef7-31a6-424f-91df-cc5b8bfbd988_fixed.java
@@ -1,39 +1,34 @@
-    /**
-     * Convert to multidimensional counter.
-     *
-     * @param index Index in unidimensional counter.
-     * @return the multidimensional counts.
-     * @throws OutOfRangeException if {@code index} is not between
-     * {@code 0} and the value returned by {@link #getSize()} (excluded).
-     */
 public int[] getCounts(int index) {
     if (index < 0 ||
         index >= totalSize) {
         throw new OutOfRangeException(index, 0, totalSize);
     }
 
     final int[] indices = new int[dimension];
 
     int count = 0;
     for (int i = 0; i < last; i++) {
         int idx = 0;
         final int offset = uniCounterOffset[i];
         while (count <= index) {
             count += offset;
-                ++idx;
+            idx++;
         }
-            --idx;
-            count -= offset;
+        idx--;
         indices[i] = idx;
     }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
+    count = 0;
+    for (int i = 0; i < last; i++) {
+        count += indices[i] * uniCounterOffset[i];
     }
-        --idx;
+    int idx = 0;
+    while (count <= index) {
+        count += 1;
+        idx++;
+    }
+    idx--;
     indices[last] = idx;
 
     return indices;
 }
\ No newline at end of file
