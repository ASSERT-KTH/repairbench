diff --git a/tmp/4aae8d85-f3fd-45c8-81b7-16cb19f6f7a3_buggy.java b/tmp/7fbe18ba-fc3c-464c-aae3-b2aad3e653c4_fixed.java
index eea9e73..bfc330b 100644
--- a/tmp/4aae8d85-f3fd-45c8-81b7-16cb19f6f7a3_buggy.java
+++ b/tmp/7fbe18ba-fc3c-464c-aae3-b2aad3e653c4_fixed.java
@@ -1,41 +1,46 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
+    
+    Set<Integer> searchCodePoints = new HashSet<>();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+    int i = 0;
+    
+    while (i < searchLength) {
+        if (i + 1 < searchLength && Character.isHighSurrogate(searchChars[i]) && Character.isLowSurrogate(searchChars[i + 1])) {
+            int codePoint = Character.toCodePoint(searchChars[i], searchChars[i + 1]);
+            searchCodePoints.add(codePoint);
+            i += 2;
+        } else {
+            int codePoint = (int) searchChars[i];
+            searchCodePoints.add(codePoint);
+            i += 1;
+        }
+    }
+    
+    int csLength = cs.length();
+    i = 0;
+    
+    while (i < csLength) {
+        char c1 = cs.charAt(i);
+        if (i + 1 < csLength) {
+            char c2 = cs.charAt(i + 1);
+            if (Character.isHighSurrogate(c1) && Character.isLowSurrogate(c2)) {
+                int codePoint = Character.toCodePoint(c1, c2);
+                if (searchCodePoints.contains(codePoint)) {
                     return true;
                 }
+                i += 2;
+                continue;
+            }
+        }
+        int codePoint = (int) c1;
+        if (searchCodePoints.contains(codePoint)) {
+            return true;
         }
+        i += 1;
     }
+    
     return false;
 }
\ No newline at end of file
