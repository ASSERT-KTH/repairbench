diff --git a/tmp/f558a124-fa25-4e6b-ba87-925d9202f46c_buggy.java b/tmp/4607521b-355e-48e7-9f14-9391b0a729cf_fixed.java
index eea9e73..ed7d5e6 100644
--- a/tmp/f558a124-fa25-4e6b-ba87-925d9202f46c_buggy.java
+++ b/tmp/4607521b-355e-48e7-9f14-9391b0a729cf_fixed.java
@@ -1,41 +1,41 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
+
+    Set<Integer> searchCodePoints = new HashSet<>();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+    int i = 0;
+
+    // Process searchChars into code points
+    while (i < searchLength) {
+        if (i + 1 < searchLength && Character.isHighSurrogate(searchChars[i]) && Character.isLowSurrogate(searchChars[i + 1])) {
+            int codePoint = Character.toCodePoint(searchChars[i], searchChars[i + 1]);
+            searchCodePoints.add(codePoint);
+            i += 2;
+        } else {
+            int codePoint = searchChars[i];
+            searchCodePoints.add(codePoint);
+            i += 1;
+        }
+    }
+
+    int csLength = cs.length();
+    for (i = 0; i < csLength; ) {
+        if (i + 1 < csLength && Character.isHighSurrogate(cs.charAt(i)) && Character.isLowSurrogate(cs.charAt(i + 1))) {
+            int codePoint = Character.toCodePoint(cs.charAt(i), cs.charAt(i + 1));
+            if (searchCodePoints.contains(codePoint)) {
+                return true;
+            }
+            i += 2;
+        } else {
+            int codePoint = cs.charAt(i);
+            if (searchCodePoints.contains(codePoint)) {
                 return true;
             }
+            i += 1;
         }
     }
+
     return false;
 }
\ No newline at end of file
