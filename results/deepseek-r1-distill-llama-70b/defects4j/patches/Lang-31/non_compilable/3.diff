diff --git a/tmp/d88490a1-1343-4494-9f3e-ef042cd770bc_buggy.java b/tmp/8968f277-ada8-46f4-9d56-fe7993d45141_fixed.java
index eea9e73..be17844 100644
--- a/tmp/d88490a1-1343-4494-9f3e-ef042cd770bc_buggy.java
+++ b/tmp/8968f277-ada8-46f4-9d56-fe7993d45141_fixed.java
@@ -1,41 +1,31 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+
+    Set<Integer> searchCodePoints = new HashSet<>();
+    for (int j = 0; j < searchChars.length; ) {
+        if (j < searchChars.length - 1 && Character.isHighSurrogate(searchChars[j])) {
+            char high = searchChars[j];
+            char low = searchChars[j + 1];
+            if (Character.isLowSurrogate(low)) {
+                int codePoint = Character.toCodePoint(high, low);
+                searchCodePoints.add(codePoint);
+                j += 2;
+                continue;
+            }
+        }
+        int codePoint = Character.codePointAt(searchChars, j);
+        searchCodePoints.add(codePoint);
+        j += Character.charCount(codePoint);
+    }
+
+    for (int i = 0; i < cs.length(); ) {
+        int cp = Character.codePointAt(cs, i);
+        if (searchCodePoints.contains(cp)) {
             return true;
         }
-			}
+        i += Character.charCount(cp);
     }
     return false;
 }
\ No newline at end of file
