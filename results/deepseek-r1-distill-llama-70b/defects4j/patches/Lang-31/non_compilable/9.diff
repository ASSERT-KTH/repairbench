diff --git a/tmp/3f2bec5f-fa17-4c52-9693-ee96a51dca7b_buggy.java b/tmp/63446d02-aa69-4f75-8e4a-e3250114d0aa_fixed.java
index eea9e73..fc0569a 100644
--- a/tmp/3f2bec5f-fa17-4c52-9693-ee96a51dca7b_buggy.java
+++ b/tmp/63446d02-aa69-4f75-8e4a-e3250114d0aa_fixed.java
@@ -1,41 +1,68 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+
+    for (char searchChar : searchChars) {
+        if (is2829Supplement(searchChar)) {
+            if (containsSupplementary(cs, searchChar)) {
+                return true;
+            }
+        } else {
+            for (int i = 0; i < cs.length(); i++) {
+                if (cs.charAt(i) == searchChar) {
+                    return true;
+                }
+            }
+        }
+    }
+    return false;
+}
+
+private static boolean is2829Supplement(char ch) {
+    return ch >= Character.MIN_supplementary_CODE_POINT && ch <= Character.MAX_CODE_POINT;
+}
+
+private static boolean containsSupplementary(CharSequence cs, char[] searchChars) {
+    for (int i = 0; i < cs.length(); i++) {
+        if (isSurrogate(cs.charAt(i))) {
+            if (i + 1 < cs.length() && isSurrogatePair(cs.charAt(i), cs.charAt(i + 1))) {
+                char[] s = new char[2];
+                s[0] = cs.charAt(i);
+                s[1] = cs.charAt(i + 1);
+                return contains(searchChars, s);
+            }
+        } else {
+            if (contains(searchChars, cs.charAt(i))) {
                 return true;
             }
         }
     }
     return false;
 }
+
+private static boolean contains(char[] array, char[] s) {
+    for (char[] arr : array) {
+        if (Arrays.equals(arr, s)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private static boolean contains(char[] array, char c) {
+    for (char ch : array) {
+        if (ch == c) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private static boolean isSurrogate(char c) {
+    return Character.isLowSurrogate(c) || Character.isHighSurrogate(c);
+}
+
+private static boolean isSurrogatePair(char c1, char c2) {
+    return Character.isHighSurrogate(c1) && Character.isLowSurrogate(c2);
+}
\ No newline at end of file
