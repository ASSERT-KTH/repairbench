diff --git a/tmp/9e9f9b95-7212-48cb-ba07-b9723013b6e9_buggy.java b/tmp/267c368f-6164-4537-805f-1063262de15e_fixed.java
index eea9e73..cf6503d 100644
--- a/tmp/9e9f9b95-7212-48cb-ba07-b9723013b6e9_buggy.java
+++ b/tmp/267c368f-6164-4537-805f-1063262de15e_fixed.java
@@ -1,41 +1,31 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
+    Set<Character> searchSet = new LinkedHashSet<>();
+    for (char c : searchChars) {
+        searchSet.add(c);
+    }
     int csLength = cs.length();
-		int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
         char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+        if (i < csLength - 1 && Character.isHighSurrogate(ch)) {
+            char nextCh = cs.charAt(i + 1);
+            if (Character.isLowSurrogate(nextCh)) {
+                // Check for the supplementary character
+                String supplementary = new String(new char[]{ch, nextCh});
+                for (char sc : searchChars) {
+                    if (Character.toString(sc).equals(supplementary)) {
                         return true;
                     }
                 }
+                i++; // Skip the next char as it's part of the supplementary
+                continue;
+            }
+        }
+        if (searchSet.contains(ch)) {
+            return true;
+        }
     }
     return false;
 }
\ No newline at end of file
