diff --git a/tmp/7e911fea-2c12-4abd-b448-abaf01fd3220_buggy.java b/tmp/ff9def0a-5c5c-4162-97cc-c69ee29988c5_fixed.java
index eea9e73..d16070d 100644
--- a/tmp/7e911fea-2c12-4abd-b448-abaf01fd3220_buggy.java
+++ b/tmp/ff9def0a-5c5c-4162-97cc-c69ee29988c5_fixed.java
@@ -1,41 +1,80 @@
 	/**
 	 * <p>Checks if the CharSequence contains any character in the given
 	 * set of characters.</p>
 	 *
 	 * <p>A <code>null</code> CharSequence will return <code>false</code>.
 	 * A <code>null</code> or zero length search array will return <code>false</code>.</p>
 	 *
 	 * <pre>
 	 * StringUtils.containsAny(null, *)                = false
 	 * StringUtils.containsAny("", *)                  = false
 	 * StringUtils.containsAny(*, null)                = false
 	 * StringUtils.containsAny(*, [])                  = false
 	 * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
 	 * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
 	 * StringUtils.containsAny("aba", ['z'])           = false
 	 * </pre>
 	 *
 	 * @param cs  the CharSequence to check, may be null
 	 * @param searchChars  the chars to search for, may be null
 	 * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
 	 * @since 2.4
 	 */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+		// Convert CharSequence and searchChars to code point arrays
+		int[] csCodePoints = toCodePoints(cs);
+		int[] searchCodePoints = toCodePoints(searchChars);
+		// Create a set of search code points for quick lookup
+		Set<Integer> searchSet = new HashSet<>();
+		for (int codePoint : searchCodePoints) {
+			searchSet.add(codePoint);
+		}
+		// Check each code point in cs for presence in searchSet
+		for (int codePoint : csCodePoints) {
+			if (searchSet.contains(codePoint)) {
 				return true;
 			}
 		}
-		}
 		return false;
 	}
+	
+	// Helper method to convert a CharSequence to an array of code points
+	private static int[] toCodePoints(CharSequence cs) {
+		int length = cs.length();
+		int[] codePoints = new int[length];
+		for (int i = 0; i < length; i++) {
+			codePoints[i] = cs.charAt(i);
+		}
+		return codePoints;
+	}
+	
+	// Helper method to convert a char array to an array of code points
+	private static int[] toCodePoints(char[] chars) {
+		List<Integer> codePointsList = new ArrayList<>();
+		for (int i = 0; i < chars.length; ) {
+			char c = chars[i];
+			if (Character.isLowSurrogate(c) && i + 1 < chars.length) {
+				char nextC = chars[i + 1];
+				if (Character.isHighSurrogate(nextC)) {
+					// This is a supplementary character, represented by a surrogate pair
+					int codePoint = Character.toCodePoint(c, nextC);
+					codePointsList.add(codePoint);
+					i += 2;
+					continue;
+				}
+			}
+			// BMP character
+			codePointsList.add(Character.codePointAt(chars, i));
+			i++;
+		}
+		// Convert the list to an array
+		int[] codePoints = new int[codePointsList.size()];
+		for (int j = 0; j < codePointsList.size(); j++) {
+			codePoints[j] = codePointsList.get(j);
+		}
+		return codePoints;
+	}
\ No newline at end of file
