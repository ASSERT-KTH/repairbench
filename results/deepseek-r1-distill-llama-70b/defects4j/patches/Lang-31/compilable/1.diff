diff --git a/tmp/3f4fa26e-c195-42f3-abc8-dd82105d96ec_buggy.java b/tmp/4de2fcd4-0cd5-4159-a9cc-17a97f979b2a_fixed.java
index eea9e73..982d4e8 100644
--- a/tmp/3f4fa26e-c195-42f3-abc8-dd82105d96ec_buggy.java
+++ b/tmp/4de2fcd4-0cd5-4159-a9cc-17a97f979b2a_fixed.java
@@ -1,41 +1,38 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
         char ch = cs.charAt(i);
+        // Check for supplementary characters by looking ahead one more character
+        if (i + 1 < csLength) {
+            char nextCh = cs.charAt(i + 1);
+            for (int j = 0; j < searchLength; j++) {
+                if (searchChars[j] == ch || searchChars[j] == nextCh) {
+                    return true;
+                }
+            }
+            // Check if the current and next characters form a supplementary character
+            if (isSupplementary(ch, nextCh)) {
+                for (int j = 0; j < searchLength; j++) {
+                    if (searchChars[j] == ch || searchChars[j] == nextCh) {
+                        return true;
+                    }
+                }
+            }
+        } else {
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
                     return true;
                 }
             }
         }
+    }
     return false;
 }
+
+private static boolean isSupplementary(char ch1, char ch2) {
+    return Character.isLowSurrogate(ch1) && Character.isHighSurrogate(ch2);
+}
\ No newline at end of file
