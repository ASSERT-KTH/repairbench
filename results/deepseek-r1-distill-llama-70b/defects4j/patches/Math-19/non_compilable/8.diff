diff --git a/tmp/df4918c2-5897-48f5-92f1-3619d6aaa863_buggy.java b/tmp/246758c1-96ce-482b-b218-8bb38b9e3e8b_fixed.java
index d80b7d0..eaf7915 100644
--- a/tmp/df4918c2-5897-48f5-92f1-3619d6aaa863_buggy.java
+++ b/tmp/246758c1-96ce-482b-b218-8bb38b9e3e8b_fixed.java
@@ -1,61 +1,71 @@
     /**
      * Checks dimensions and values of boundaries and inputSigma if defined.
      */
     private void checkParameters() {
         final double[] init = getStartPoint();
         final double[] lB = getLowerBound();
         final double[] uB = getUpperBound();
 
         // Checks whether there is at least one finite bound value.
         boolean hasFiniteBounds = false;
         for (int i = 0; i < lB.length; i++) {
             if (!Double.isInfinite(lB[i]) ||
                 !Double.isInfinite(uB[i])) {
                 hasFiniteBounds = true;
                 break;
             }
         }
         // Checks whether there is at least one infinite bound value.
         boolean hasInfiniteBounds = false;
         if (hasFiniteBounds) {
             for (int i = 0; i < lB.length; i++) {
                 if (Double.isInfinite(lB[i]) ||
                     Double.isInfinite(uB[i])) {
                     hasInfiniteBounds = true;
                     break;
                 }
             }
 
             if (hasInfiniteBounds) {
                 // If there is at least one finite bound, none can be infinite,
                 // because mixed cases are not supported by the current code.
                 throw new MathUnsupportedOperationException();
             } else {
                 // Convert API to internal handling of boundaries.
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
 
+                // Check if range is too large
+                for (int i = 0; i < boundaries[0].length; i++) {
+                    double lower = boundaries[0][i];
+                    double upper = boundaries[1][i];
+                    double range = upper - lower;
+                    if (!Double.isFinite(range) || range > Double.MAX_VALUE) {
+                        throw new NumberIsTooLargeException(range, Double.MAX_VALUE);
+                    }
+                }
+
                 // Abort early if the normalization will overflow (cf. "encode" method).
             }
         } else {
             // Convert API to internal handling of boundaries.
             boundaries = null;
         }
 
         if (inputSigma != null) {
             if (inputSigma.length != init.length) {
                 throw new DimensionMismatchException(inputSigma.length, init.length);
             }
             for (int i = 0; i < init.length; i++) {
                 if (inputSigma[i] < 0) {
                     throw new NotPositiveException(inputSigma[i]);
                 }
                 if (boundaries != null) {
                     if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
                         throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
                     }
                 }
             }
         }
     }
\ No newline at end of file
