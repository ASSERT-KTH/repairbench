diff --git a/tmp/1f695197-60aa-4a39-9271-bab87f2fba4d_buggy.java b/tmp/a9afaa37-8d7f-41cc-9d4f-d374dfd32a9b_fixed.java
index 8dfbd84..105c3b2 100644
--- a/tmp/1f695197-60aa-4a39-9271-bab87f2fba4d_buggy.java
+++ b/tmp/a9afaa37-8d7f-41cc-9d4f-d374dfd32a9b_fixed.java
@@ -1,43 +1,44 @@
-    private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
-    {
+private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException {
     _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
     char[] outBuf = _textBuffer.getCurrentSegment();
     int outPtr = _textBuffer.getCurrentSegmentSize();
     final int maxCode = codes.length;
 
     while (true) {
         if (_inputPtr >= _inputEnd) {
             if (!_loadMore()) { // acceptable for now (will error out later)
                 break;
             }
         }
         char c = _inputBuffer[_inputPtr];
-            int i = (int) c;
+        int i = c;
+        if (i <= maxCode) {
+            while (i <= maxCode) {
+                if (codes[i] == 0) {
+                    ++i;
+                } else {
+                    break;
+                }
+            }
             if (i <= maxCode) {
-                if (codes[i] != 0) {
                 break;
             }
         } else if (!Character.isJavaIdentifierPart(c)) {
             break;
         }
         ++_inputPtr;
         hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
-            // Ok, let's add char to output:
         outBuf[outPtr++] = c;
 
-            // Need more room?
         if (outPtr >= outBuf.length) {
             outBuf = _textBuffer.finishCurrentSegment();
             outPtr = 0;
         }
     }
     _textBuffer.setCurrentLength(outPtr);
-        {
     TextBuffer tb = _textBuffer;
     char[] buf = tb.getTextBuffer();
     int start = tb.getTextOffset();
     int len = tb.size();
-
     return _symbols.findSymbol(buf, start, len, hash);
 }
\ No newline at end of file
-    }
