diff --git a/tmp/2ff1723f-8a2e-47cd-94ef-01a9c1ea8946_buggy.java b/tmp/8a616d6e-d099-46eb-b522-f66da107bc11_fixed.java
index 8dfbd84..5b4d5c5 100644
--- a/tmp/2ff1723f-8a2e-47cd-94ef-01a9c1ea8946_buggy.java
+++ b/tmp/8a616d6e-d099-46eb-b522-f66da107bc11_fixed.java
@@ -1,43 +1,41 @@
-    private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
-    {
+private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException {
     _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
     char[] outBuf = _textBuffer.getCurrentSegment();
     int outPtr = _textBuffer.getCurrentSegmentSize();
     final int maxCode = codes.length;
 
     while (true) {
         if (_inputPtr >= _inputEnd) {
             if (!_loadMore()) { // acceptable for now (will error out later)
                 break;
             }
         }
         char c = _inputBuffer[_inputPtr];
         int i = (int) c;
         if (i <= maxCode) {
             if (codes[i] != 0) {
                 break;
             }
-            } else if (!Character.isJavaIdentifierPart(c)) {
-                break;
-            }
-            ++_inputPtr;
-            hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
-            // Ok, let's add char to output:
+        } else if (Character.isJavaIdentifierPart(c) || c < Character.MIN_HIGH_SURROGATE) { 
+            // Allow non-surrogate characters beyond maxCode
             outBuf[outPtr++] = c;
-
-            // Need more room?
             if (outPtr >= outBuf.length) {
                 outBuf = _textBuffer.finishCurrentSegment();
                 outPtr = 0;
             }
+            ++_inputPtr;
+            hash = hash * CharsToNameCanonicalizer.HASH_MULT + i;
+        } else {
+            break;
+        }
     }
     _textBuffer.setCurrentLength(outPtr);
     {
         TextBuffer tb = _textBuffer;
         char[] buf = tb.getTextBuffer();
         int start = tb.getTextOffset();
         int len = tb.size();
 
         return _symbols.findSymbol(buf, start, len, hash);
     }
 }
\ No newline at end of file
