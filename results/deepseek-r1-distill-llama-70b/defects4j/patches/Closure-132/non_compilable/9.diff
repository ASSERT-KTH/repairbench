diff --git a/tmp/15972b7a-c33c-42e3-8559-41350491ce8c_buggy.java b/tmp/27403737-8a35-40ad-b758-8b9ec89002da_fixed.java
index e4fca3c..2a43789 100644
--- a/tmp/15972b7a-c33c-42e3-8559-41350491ce8c_buggy.java
+++ b/tmp/27403737-8a35-40ad-b758-8b9ec89002da_fixed.java
@@ -1,239 +1,199 @@
-  /**
-   * Try turning IF nodes into smaller HOOKs
-   *
-   * Returns the replacement for n or the original if no replacement was
-   * necessary.
-   */
   private Node tryMinimizeIf(Node n) {
-
     Node parent = n.getParent();
 
     Node cond = n.getFirstChild();
 
-    /* If the condition is a literal, we'll let other
-     * optimizations try to remove useless code.
-     */
+    // Check if condition is a literal
     if (NodeUtil.isLiteralValue(cond, true)) {
       return n;
     }
 
     Node thenBranch = cond.getNext();
     Node elseBranch = thenBranch.getNext();
 
     if (elseBranch == null) {
+      // If else is null, handle if statement without else
       if (isFoldableExpressBlock(thenBranch)) {
         Node expr = getBlockExpression(thenBranch);
         if (!late && isPropertyAssignmentInExpression(expr)) {
-          // Keep opportunities for CollapseProperties such as
-          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
-          // until CollapseProperties has been run.
+          // Skip conversion to keep opportunities for CollapseProperties
           return n;
         }
 
         if (cond.isNot()) {
-          // if(!x)bar(); -> x||bar();
+          // Handle if (!cond) expr; conversion to cond || expr
           if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
-              isLowerPrecedenceInExpression(expr.getFirstChild(),
-                  OR_PRECEDENCE)) {
-            // It's not okay to add two sets of parentheses.
+              isLowerPrecedenceInExpression(expr.getFirstChild(), OR_PRECEDENCE)) {
             return n;
           }
-
-          Node or = IR.or(
-              cond.removeFirstChild(),
-              expr.removeFirstChild()).srcref(n);
+          Node or = IR.or(cond.removeFirstChild(), expr.removeFirstChild()).srcref(n);
           Node newExpr = NodeUtil.newExpr(or);
           parent.replaceChild(n, newExpr);
           reportCodeChange();
-
           return newExpr;
         }
 
-        // if(x)foo(); -> x&&foo();
+        // Handle if (cond) expr; conversion to cond && expr
         if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
-            isLowerPrecedenceInExpression(expr.getFirstChild(),
-                AND_PRECEDENCE)) {
-          // One additional set of parentheses is worth the change even if
-          // there is no immediate code size win. However, two extra pair of
-          // {}, we would have to think twice. (unless we know for sure the
-          // we can further optimize its parent.
+            isLowerPrecedenceInExpression(expr.getFirstChild(), AND_PRECEDENCE)) {
+          return n;
+        }
+
+        // Check for side effects in condition or expression
+        if (hasSideEffects(cond) || hasSideEffects(expr.getFirstChild())) {
           return n;
         }
 
         n.removeChild(cond);
         Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
         Node newExpr = NodeUtil.newExpr(and);
         parent.replaceChild(n, newExpr);
         reportCodeChange();
-
         return newExpr;
-      } else {
+      }
 
-        // Try to combine two IF-ELSE
-        if (NodeUtil.isStatementBlock(thenBranch) &&
-            thenBranch.hasOneChild()) {
+      // Try combining two IF-ELSE
+      // Existing logic adjusted to handle side effects
+      if (thenBranch.isBlock() && thenBranch.hasOneChild() && thenBranch.getFirstChild().isIf()) {
         Node innerIf = thenBranch.getFirstChild();
-
-          if (innerIf.isIf()) {
         Node innerCond = innerIf.getFirstChild();
         Node innerThenBranch = innerCond.getNext();
         Node innerElseBranch = innerThenBranch.getNext();
-
         if (innerElseBranch == null && 
             !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
               isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
+          if (!hasSideEffects(cond) && !hasSideEffects(innerCond)) {
             n.detachChildren();
             n.addChildToBack(
-                  IR.and(
-                      cond,
-                      innerCond.detachFromParent())
-                      .srcref(cond));
+                IR.and(cond, innerCond.detachFromParent()).srcref(cond));
             n.addChildrenToBack(innerThenBranch.detachFromParent());
             reportCodeChange();
-              // Not worth trying to fold the current IF-ELSE into && because
-              // the inner IF-ELSE wasn't able to be folded into && anyways.
             return n;
           }
         }
       }
-      }
 
       return n;
-    }
-
-    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
-     * peephole optimization. This should probably get moved to another pass.
-     */
+    } else {
       tryRemoveRepeatedStatements(n);
 
-    // if(!x)foo();else bar(); -> if(x)bar();else foo();
-    // An additional set of curly braces isn't worth it.
+      // Check if condition is a NOT operation
       if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
         n.replaceChild(cond, cond.removeFirstChild());
         n.removeChild(thenBranch);
         n.addChildToBack(thenBranch);
         reportCodeChange();
         return n;
       }
 
-    // if(x)return 1;else return 2; -> return x?1:2;
+      // Handle conversion of if-else to ternary for return statements
       if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
         Node thenExpr = getBlockReturnExpression(thenBranch);
         Node elseExpr = getBlockReturnExpression(elseBranch);
         n.removeChild(cond);
         thenExpr.detachFromParent();
         elseExpr.detachFromParent();
-
-      // note - we ignore any cases with "return;", technically this
-      // can be converted to "return undefined;" or some variant, but
-      // that does not help code size.
+        // Note: Check side effects before conversion
+        if (hasSideEffects(cond) || hasSideEffects(thenExpr) || hasSideEffects(elseExpr)) {
+          return n;
+        }
         Node returnNode = IR.returnNode(
-                            IR.hook(cond, thenExpr, elseExpr)
-                                .srcref(n));
+            IR.hook(cond, thenExpr, elseExpr).srcref(n));
         parent.replaceChild(n, returnNode);
         reportCodeChange();
         return returnNode;
       }
 
-    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
-    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
+      boolean thenIsExpression = isFoldableExpressBlock(thenBranch);
+      boolean elseIsExpression = isFoldableExpressBlock(elseBranch);
 
-    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
+      // Check for assignment operations
+      if (thenIsExpression && elseIsExpression) {
         Node thenOp = getBlockExpression(thenBranch).getFirstChild();
         Node elseOp = getBlockExpression(elseBranch).getFirstChild();
-      if (thenOp.getType() == elseOp.getType()) {
-        // if(x)a=1;else a=2; -> a=x?1:2;
-        if (NodeUtil.isAssignmentOp(thenOp)) {
-          Node lhs = thenOp.getFirstChild();
-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
-              // if LHS has side effects, don't proceed [since the optimization
-              // evaluates LHS before cond]
-              // NOTE - there are some circumstances where we can
-              // proceed even if there are side effects...
-              !mayEffectMutableState(lhs)) {
-
-            n.removeChild(cond);
-            Node assignName = thenOp.removeFirstChild();
-            Node thenExpr = thenOp.removeFirstChild();
-            Node elseExpr = elseOp.getLastChild();
-            elseOp.removeChild(elseExpr);
-
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
-            Node assign = new Node(thenOp.getType(), assignName, hookNode)
+        if (thenOp.getType() == Token.ASSIGN || thenOp.getType() == Token.ASSIGN_ADD ||
+            thenOp.getType() == Token.ASSIGN_SUB) {
+          if (thenOp.getType() != elseOp.getType()) {
+            return n;
+          }
+          // Check if left-hand sides match and no side effects
+          if (areNodesEqualForInlining(thenOp.getFirstChild(), elseOp.getFirstChild()) &&
+              !mayEffectMutableState(thenOp.getFirstChild())) {
+            if (hasSideEffects(cond) || hasSideEffects(thenOp) || hasSideEffects(elseOp)) {
+              return n;
+            }
+            Node hook = IR.hook(cond, thenOp.getLastChild(), elseOp.getLastChild())
+                .srcref(n);
+            Node assign = new Node(thenOp.getType(), thenOp.getFirstChild(), hook)
                 .srcref(thenOp);
             Node expr = NodeUtil.newExpr(assign);
             parent.replaceChild(n, expr);
             reportCodeChange();
-
             return expr;
           }
         }
       }
-      // if(x)foo();else bar(); -> x?foo():bar()
-      n.removeChild(cond);
-      thenOp.detachFromParent();
-      elseOp.detachFromParent();
-      Node expr = IR.exprResult(
-          IR.hook(cond, thenOp, elseOp).srcref(n));
-      parent.replaceChild(n, expr);
-      reportCodeChange();
-      return expr;
-    }
-
-    boolean thenBranchIsVar = isVarBlock(thenBranch);
-    boolean elseBranchIsVar = isVarBlock(elseBranch);
 
-    // if(x)var y=1;else y=2  ->  var y=x?1:2
-    if (thenBranchIsVar && elseBranchIsExpressionBlock &&
+      // Handle var declarations
+      if (thenBranch.isVar() && elseBranch.isExpressionBlock() &&
           getBlockExpression(elseBranch).getFirstChild().isAssign()) {
-
         Node var = getBlockVar(thenBranch);
         Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
-
         Node name1 = var.getFirstChild();
-      Node maybeName2 = elseAssign.getFirstChild();
+        Node name2 = elseAssign.getFirstChild();
 
-      if (name1.hasChildren()
-          && maybeName2.isName()
-          && name1.getString().equals(maybeName2.getString())) {
-        Node thenExpr = name1.removeChildren();
-        Node elseExpr = elseAssign.getLastChild().detachFromParent();
+        if (name1 != null && name2 != null &&
+            name1.getString().equals(name2.getString())) {
+          Node thenExpr = var.getFirstChild().removeChildren();
+          Node elseExpr = elseAssign.getLastChild();
           cond.detachFromParent();
-        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
-                            .srcref(n);
-        var.detachFromParent();
-        name1.addChildrenToBack(hookNode);
+          Node hook = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+          var.replaceChild(name1, hook);
           parent.replaceChild(n, var);
           reportCodeChange();
           return var;
         }
-
-    // if(x)y=1;else var y=2  ->  var y=x?1:2
-    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
+      } else if (elseBranch.isVar() && thenBranch.isExpressionBlock() &&
           getBlockExpression(thenBranch).getFirstChild().isAssign()) {
-
         Node var = getBlockVar(elseBranch);
         Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
-
-      Node maybeName1 = thenAssign.getFirstChild();
+        Node name1 = thenAssign.getFirstChild();
         Node name2 = var.getFirstChild();
 
-      if (name2.hasChildren()
-          && maybeName1.isName()
-          && maybeName1.getString().equals(name2.getString())) {
-        Node thenExpr = thenAssign.getLastChild().detachFromParent();
-        Node elseExpr = name2.removeChildren();
+        if (name1 != null && name2 != null &&
+            name1.getString().equals(name2.getString())) {
+          Node thenExpr = thenAssign.getLastChild();
+          Node elseExpr = var.getFirstChild().removeChildren();
           cond.detachFromParent();
-        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
-                            .srcref(n);
-        var.detachFromParent();
-        name2.addChildrenToBack(hookNode);
+          Node hook = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+          var.replaceChild(name2, hook);
           parent.replaceChild(n, var);
           reportCodeChange();
-
           return var;
         }
       }
 
+      // General case for converting to ternary
+      if (thenIsExpression && elseIsExpression) {
+        if (hasSideEffects(cond) || hasSideEffects(thenBranch) || hasSideEffects(elseBranch)) {
           return n;
         }
+        cond.detachFromParent();
+        Node thenExpr = getBlockExpression(thenBranch).getFirstChild().detachFromParent();
+        Node elseExpr = getBlockExpression(elseBranch).getFirstChild().detachFromParent();
+        Node hook = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+        Node expr = NodeUtil.newExpr(hook);
+        parent.replaceChild(n, expr);
+        reportCodeChange();
+        return expr;
+      }
+    }
+    return n;
+  }
+
+  // Helper method to check for side effects
+  private boolean hasSideEffects(Node node) {
+    return node != null &&
+           (node.isIncOrDec() || node.isAssign() ||
+            node.isFunctionCall() || node.isGetProp() || node.isSetProp());
+  }
\ No newline at end of file
