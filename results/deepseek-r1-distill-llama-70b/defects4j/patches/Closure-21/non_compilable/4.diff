diff --git a/tmp/d833c63a-a99e-44d9-ba68-9a9a6243d621_buggy.java b/tmp/449bb075-3157-4191-ab0d-1c76a70762c4_fixed.java
index 49a5702..4fd4fbe 100644
--- a/tmp/d833c63a-a99e-44d9-ba68-9a9a6243d621_buggy.java
+++ b/tmp/449bb075-3157-4191-ab0d-1c76a70762c4_fixed.java
@@ -1,66 +1,122 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    if (n.isEmpty() || n.isComma()) {
         return;
     }
 
     if (parent == null) {
         return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
         return;
     }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
     if (parent.getType() == Token.COMMA) {
         if (isResultUsed) {
             return;
         }
+
+        NodeephirParentLoop:
+        for (Node an = parent; an != null; an = an.getParent()) {
+            Token anType = an.getType();
+            if (anType == Token.COMMA || anType == Token.EXPR_RESULT || anType == Token.BLOCK) {
+                if (anType == Token.COMMA) {
+                    Node //// = an.getParent();
+                    if (//// == null) continue;
+                    if (////.getType() != Token.FOR || ////.getChildCount() != 4) {
+                        continue;
+                    }
+                }
+                continue;
+            }
+            break;
+        }
+
         if (n == parent.getLastChild()) {
             for (Node an : parent.getAncestors()) {
                 int ancestorType = an.getType();
                 if (ancestorType == Token.COMMA) continue;
                 if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
                 else break;
             }
         }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
         if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
             return;
         }
     }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+    boolean inComma = parent.getType() == Token.COMMA;
+
+    boolean isTuple = parent.getType() == Token.COMMA && NodeUtil.isInParentheses(parent.getParent());
+
+    if (inComma) {
+        // For tuple expressions like (a, b, c), only the last expression needs to have side effects
+        // if it's being used as a value, others can be side-effect-free
+        if (isTuple) {
+            // Find all other comma parents upwards
+            List<Node> tupleCommas = new ArrayList<>();
+            Node current = parent;
+            while (current.getType() == Token.COMMA) {
+                tupleCommas.add(current);
+                current = current.getParent();
+                if (current == null || current.getType() != Token.COMMA) {
+                    break;
+                }
+            }
+            if (tupleCommas.size() == 1) {
+                tupleCommas = null;
+            } else {
+                // If this is the nth comma in a tuple, only the last one needs to have a side effect
+                if (!n.equals(parent.getLastChild())) {
+                    return;
+                }
+            }
+        }
+    }
+
+    boolean canReport = true;
+    if (inComma && !isResultUsed) {
+        // Check if we're inside function call arguments or similar
+        Node parentOfComma = parent.getParent();
+        if (parentOfComma != null) {
+            switch (parentOfComma.getType()) {
+                case Token.CALL:
+                case Token.NEW:
+                case Token.COMMA:
+                    canReport = false;
+                    break;
+            }
+            // Also, if inside a function declaration parameters, which are Token.PARAMS
+            if (parentOfComma.getType() == Token.PARAMS) {
+                canReport = false;
+            }
+        }
+    }
+
+    if (canReport) {
+        if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
             String msg = "This code lacks side-effects. Is there a bug?";
             if (n.isString()) {
                 msg = "Is there a missing '+' on the previous line?";
             } else if (isSimpleOp) {
                 msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
                         "' operator is not being used.";
             }
 
             t.getCompiler().report(
                     t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
             if (!NodeUtil.isStatement(n)) {
                 problemNodes.add(n);
             }
         }
     }
+}
\ No newline at end of file
