diff --git a/tmp/d9319cbe-022c-4cd1-a62f-8ecaa6a01150_buggy.java b/tmp/42b323f3-2e29-4300-9558-3cfc6823d03e_fixed.java
index 49a5702..4d5effc 100644
--- a/tmp/d9319cbe-022c-4cd1-a62f-8ecaa6a01150_buggy.java
+++ b/tmp/42b323f3-2e29-4300-9558-3cfc6823d03e_fixed.java
@@ -1,66 +1,74 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
         return;
     }
 
     if (parent == null) {
         return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
         return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+    
     if (parent.getType() == Token.COMMA) {
         if (isResultUsed) {
             return;
         }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+        // Traverse up the tree to determine if it's in a context that allows side-effects
+        for (Node ancestor = parent; ancestor != null; ancestor = ancestor.getParent()) {
+            if (ancestor.getType() == Token.COMMA) continue;
+            if (ancestor.getType() == Token.EXPR_RESULT || ancestor.getType() == Token.BLOCK ||
+                ancestor.getType() == Token.FUNCTION_CALL) {
+                break;
+            } else {
+                return;
             }
         }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+        if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+              (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
             return;
         }
     }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+    if (isResultUsed) {
+        return;
+    }
+
+    if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
         String msg = "This code lacks side-effects. Is there a bug?";
         if (n.isString()) {
             msg = "Is there a missing '+' on the previous line?";
         } else if (isSimpleOp) {
             msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
                   "' operator is not being used.";
         }
 
         t.getCompiler().report(
             t.makeError(n, level, USELESS_CODE_ERROR, msg));
         // TODO(johnlenz): determine if it is necessary to
         // try to protect side-effect free statements as well.
         if (!NodeUtil.isStatement(n)) {
             problemNodes.add(n);
         }
     }
 }
\ No newline at end of file
