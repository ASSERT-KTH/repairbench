diff --git a/tmp/0c58b827-1f2e-44c7-9a9b-de9c7a81a509_buggy.java b/tmp/f19028ea-de0d-44cc-9947-e6a4c628d490_fixed.java
index 49a5702..f154a3c 100644
--- a/tmp/0c58b827-1f2e-44c7-9a9b-de9c7a81a509_buggy.java
+++ b/tmp/f19028ea-de0d-44cc-9947-e6a4c628d490_fixed.java
@@ -1,66 +1,82 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
         return;
     }
 
     if (parent == null) {
         return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
         return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+    // Fix: Check if the parent is a tuple expression (within parentheses) in a function call
     if (parent.getType() == Token.COMMA) {
+        // Ensure we're inside a function call argument list
+        Node grandparent = parent.getParent();
+        if (grandparent != null && grandparent.getType() == Token.FUNC_CALL) {
+            // If grandparent is FUNC_CALL, then we're in function arguments, check if the node is not the last argument
+            if (n != parent.getLastChild()) {
+                return;
+            }
+        } else {
             if (isResultUsed) {
                 return;
             }
             if (n == parent.getLastChild()) {
                 for (Node an : parent.getAncestors()) {
                     int ancestorType = an.getType();
                     if (ancestorType == Token.COMMA) continue;
                     if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
                     else break;
                 }
             }
+        }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
         if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
             return;
         }
     }
+
+    if (isResultUsed) {
+        return;
+    }
+
     if (
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
         String msg = "This code lacks side-effects. Is there a bug?";
         if (n.isString()) {
             msg = "Is there a missing '+' on the previous line?";
         } else if (isSimpleOp) {
             msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
                 "' operator is not being used.";
         }
 
         t.getCompiler().report(
             t.makeError(n, level, USELESS_CODE_ERROR, msg));
         // TODO(johnlenz): determine if it is necessary to
         // try to protect side-effect free statements as well.
         if (!NodeUtil.isStatement(n)) {
             problemNodes.add(n);
         }
     }
 }
\ No newline at end of file
