diff --git a/tmp/ba36b74a-7bbd-4ed0-a79c-698bc200274f_buggy.java b/tmp/d74f4e05-c6b5-45c7-8f73-259ed89fad76_fixed.java
index 49a5702..0387f6d 100644
--- a/tmp/ba36b74a-7bbd-4ed0-a79c-698bc200274f_buggy.java
+++ b/tmp/d74f4e05-c6b5-45c7-8f73-259ed89fad76_fixed.java
@@ -1,66 +1,90 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    if (n.isEmpty() || n.isComma()) {
         return;
     }
 
     if (parent == null) {
         return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
         return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+    // This condition covers function call arguments and other comma-separated expressions.
     if (parent.getType() == Token.COMMA) {
         if (isResultUsed) {
             return;
         }
+        Node grandParent = parent.getParent();
+        if (grandParent != null) {
+            Token grandParentType = grandParent.getType();
+            if (grandParentType == Token.FUNC || grandParentType == Token.obj) {
+                // Check if the last comma-separated node in the parameter list is unused.
                 if (n == parent.getLastChild()) {
+                    // Traverse up to check if we are in a function call or object literal.
                     for (Node an : parent.getAncestors()) {
                         int ancestorType = an.getType();
                         if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+                        if (ancestorType == Token.FUNC || ancestorType == Token.obj) {
+                            if (isResultUsed || NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+                                return;
+                            }
+                            break;
+                        }
+                        // If we exit the function call or object, then it's part of outer code and should be checked normally.
+                        break;
+                    }
+                }
             }
         }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    }
+
+    // Check for cases in blocks or expressions where the result isn't used.
+    if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
+        if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+                (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
             return;
         }
     }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+    if (isResultUsed) {
+        return;
+    }
+
+    if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+        return;
+    }
+
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
-        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
-            "' operator is not being used.";
+        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used.";
     }
 
     t.getCompiler().report(
             t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
     }
 }
\ No newline at end of file
-  }
