diff --git a/tmp/58768ec6-1a24-4305-a124-7caf84f30aaf_buggy.java b/tmp/639e7d8a-ed1c-4443-9d33-f6ad0f68f60c_fixed.java
index f9fd9ef..dc1389a 100644
--- a/tmp/58768ec6-1a24-4305-a124-7caf84f30aaf_buggy.java
+++ b/tmp/639e7d8a-ed1c-4443-9d33-f6ad0f68f60c_fixed.java
@@ -1,108 +1,86 @@
-    /**
-     * Method called to find out possible type refinements to use
-     * for deserialization.
-     *
-     * @since 2.7
-     */
     public JavaType refineSerializationType(final MapperConfig<?> config,
             final Annotated a, final JavaType baseType) throws JsonMappingException
     {
         JavaType type = baseType;
         final TypeFactory tf = config.getTypeFactory();
         
-        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
-        //    now-deprecated secondary methods; this because while
-        //    direct sub-class not yet retrofitted may only override
-        //    those methods. With 2.8 or later we may consider removal
-        //    of these methods
-
-        
-        // Ok: start by refining the main type itself; common to all types
         Class<?> serClass = findSerializationType(a);
         if (serClass != null) {
             if (type.hasRawClass(serClass)) {
-                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
-                //    static typing this way
                 type = type.withStaticTyping();
             } else {
                 try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
+                    if (serClass.isAssignableFrom(type.getRawClass())) {
                         type = tf.constructGeneralizedType(type, serClass);
+                    } else if (type.getRawClass().isAssignableFrom(serClass)) {
+                        type = tf.constructSpecializedType(type, serClass);
+                    } else {
+                        throw new JsonMappingException(null,
+                                String.format("Failed to widen type %s with annotation (value %s), from '%s': Types not compatible",
+                                        type, serClass.getName(), a.getName()));
+                    }
                 } catch (IllegalArgumentException iae) {
                     throw new JsonMappingException(null,
-                            String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
+                            String.format("Failed to refine serialization type %s with annotation (value %s), from '%s': %s",
                                     type, serClass.getName(), a.getName(), iae.getMessage()),
                                     iae);
                 }
             }
         }
         // Then further processing for container types
-
-        // First, key type (for Maps, Map-like types):
         if (type.isMapLikeType()) {
             JavaType keyType = type.getKeyType();
             Class<?> keyClass = findSerializationKeyType(a, keyType);
             if (keyClass != null) {
                 if (keyType.hasRawClass(keyClass)) {
                     keyType = keyType.withStaticTyping();
                 } else {
-                    Class<?> currRaw = keyType.getRawClass();
                     try {
-                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                        //   specialize (narrow) type sometimes, even if more commonly opposite
-                        //   is needed.
-                        if (keyClass.isAssignableFrom(currRaw)) { // common case
+                        if (keyClass.isAssignableFrom(keyType.getRawClass())) {
                             keyType = tf.constructGeneralizedType(keyType, keyClass);
-                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                        } else if (keyType.getRawClass().isAssignableFrom(keyClass)) {
                             keyType = tf.constructSpecializedType(keyType, keyClass);
                         } else {
                             throw new JsonMappingException(null,
-                                    String.format("Can not refine serialization key type %s into %s; types not related",
+                                    String.format("Can not refine key type %s into %s; types not compatible",
                                             keyType, keyClass.getName()));
                         }
                     } catch (IllegalArgumentException iae) {
                         throw new JsonMappingException(null,
                                 String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
                                         type, keyClass.getName(), a.getName(), iae.getMessage()),
                                         iae);
                     }
                 }
                 type = ((MapLikeType) type).withKeyType(keyType);
             }
         }
-
         JavaType contentType = type.getContentType();
-        if (contentType != null) { // collection[like], map[like], array, reference
-            // And then value types for all containers:
+        if (contentType != null) { 
             Class<?> contentClass = findSerializationContentType(a, contentType);
             if (contentClass != null) {
                 if (contentType.hasRawClass(contentClass)) {
                     contentType = contentType.withStaticTyping();
                 } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
-                   Class<?> currRaw = contentType.getRawClass();
                     try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
+                        if (contentClass.isAssignableFrom(contentType.getRawClass())) {
                             contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                        } else if (contentType.getRawClass().isAssignableFrom(contentClass)) {
                             contentType = tf.constructSpecializedType(contentType, contentClass);
                         } else {
                             throw new JsonMappingException(null,
-                                   String.format("Can not refine serialization content type %s into %s; types not related",
+                                    String.format("Can not refine content type %s into %s; types not compatible",
                                             contentType, contentClass.getName()));
                         }
-                   } catch (IllegalArgumentException iae) { // shouldn't really happen
+                    } catch (IllegalArgumentException iae) {
                         throw new JsonMappingException(null,
                                 String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
                                         type, contentClass.getName(), a.getName(), iae.getMessage()),
                                         iae);
                     }
                 }
                 type = type.withContentType(contentType);
             }
         }
         return type;
     }
\ No newline at end of file
