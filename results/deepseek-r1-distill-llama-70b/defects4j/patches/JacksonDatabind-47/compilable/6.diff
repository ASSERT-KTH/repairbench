diff --git a/tmp/9c66e72a-66c9-4279-814b-b55870f74c79_buggy.java b/tmp/ccf25e74-9603-4271-83bc-79e12e87f076_fixed.java
index f9fd9ef..9b315ca 100644
--- a/tmp/9c66e72a-66c9-4279-814b-b55870f74c79_buggy.java
+++ b/tmp/ccf25e74-9603-4271-83bc-79e12e87f076_fixed.java
@@ -1,108 +1,87 @@
-    /**
-     * Method called to find out possible type refinements to use
-     * for deserialization.
-     *
-     * @since 2.7
-     */
-    public JavaType refineSerializationType(final MapperConfig<?> config,
-            final Annotated a, final JavaType baseType) throws JsonMappingException
-    {
+public JavaType refineSerializationType(MapperConfig<?> config, Annotated a, JavaType baseType) throws JsonMappingException {
     JavaType type = baseType;
     final TypeFactory tf = config.getTypeFactory();
 
-        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
-        //    now-deprecated secondary methods; this because while
-        //    direct sub-class not yet retrofitted may only override
-        //    those methods. With 2.8 or later we may consider removal
-        //    of these methods
-
-        
-        // Ok: start by refining the main type itself; common to all types
     Class<?> serClass = findSerializationType(a);
     if (serClass != null) {
-            if (type.hasRawClass(serClass)) {
-                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
-                //    static typing this way
+        if (type.getRawClass().isAssignableFrom(serClass)) {
             type = type.withStaticTyping();
         } else {
             try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
-                        type = tf.constructGeneralizedType(type, serClass);
+                type = tf.constructSpecializedType(type, serClass);
             } catch (IllegalArgumentException iae) {
-                    throw new JsonMappingException(null,
-                            String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
-                                    type, serClass.getName(), a.getName(), iae.getMessage()),
+                throw new JsonMappingException(
+                        null,
+                        String.format(
+                                "Failed to construct specialized type %s with annotation (value %s): %s",
+                                type, serClass.getName(), iae.getMessage()),
                         iae);
             }
         }
     }
-        // Then further processing for container types
 
-        // First, key type (for Maps, Map-like types):
     if (type.isMapLikeType()) {
         JavaType keyType = type.getKeyType();
         Class<?> keyClass = findSerializationKeyType(a, keyType);
         if (keyClass != null) {
-                if (keyType.hasRawClass(keyClass)) {
+            if (keyType.getRawClass().isAssignableFrom(keyClass)) {
                 keyType = keyType.withStaticTyping();
             } else {
-                    Class<?> currRaw = keyType.getRawClass();
                 try {
-                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                        //   specialize (narrow) type sometimes, even if more commonly opposite
-                        //   is needed.
-                        if (keyClass.isAssignableFrom(currRaw)) { // common case
+                    if (keyClass.isAssignableFrom(keyType.getRawClass())) {
                         keyType = tf.constructGeneralizedType(keyType, keyClass);
-                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                    } else if (keyType.getRawClass().isAssignableFrom(keyClass)) {
                         keyType = tf.constructSpecializedType(keyType, keyClass);
                     } else {
-                            throw new JsonMappingException(null,
-                                    String.format("Can not refine serialization key type %s into %s; types not related",
+                        throw new JsonMappingException(
+                                null,
+                                String.format(
+                                        "Cannot refine key type %s to %s: types are not related",
                                         keyType, keyClass.getName()));
                     }
                 } catch (IllegalArgumentException iae) {
-                        throw new JsonMappingException(null,
-                                String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                        type, keyClass.getName(), a.getName(), iae.getMessage()),
+                    throw new JsonMappingException(
+                            null,
+                            String.format(
+                                    "Failed to widen key type %s with annotation (value %s): %s",
+                                    type, keyClass.getName(), iae.getMessage()),
                             iae);
                 }
             }
             type = ((MapLikeType) type).withKeyType(keyType);
         }
     }
 
     JavaType contentType = type.getContentType();
-        if (contentType != null) { // collection[like], map[like], array, reference
-            // And then value types for all containers:
+    if (contentType != null) {
         Class<?> contentClass = findSerializationContentType(a, contentType);
         if (contentClass != null) {
-               if (contentType.hasRawClass(contentClass)) {
+            if (contentType.getRawClass().isAssignableFrom(contentClass)) {
                 contentType = contentType.withStaticTyping();
             } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
-                   Class<?> currRaw = contentType.getRawClass();
                 try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
+                    if (contentClass.isAssignableFrom(contentType.getRawClass())) {
                         contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                    } else if (contentType.getRawClass().isAssignableFrom(contentClass)) {
                         contentType = tf.constructSpecializedType(contentType, contentClass);
                     } else {
-                           throw new JsonMappingException(null,
-                                   String.format("Can not refine serialization content type %s into %s; types not related",
+                        throw new JsonMappingException(
+                                null,
+                                String.format(
+                                        "Cannot refine content type %s to %s: types are not related",
                                         contentType, contentClass.getName()));
                     }
-                   } catch (IllegalArgumentException iae) { // shouldn't really happen
-                       throw new JsonMappingException(null,
-                               String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                       type, contentClass.getName(), a.getName(), iae.getMessage()),
+                } catch (IllegalArgumentException iae) {
+                    throw new JsonMappingException(
+                            null,
+                            String.format(
+                                    "Failed to widen content type %s with annotation (value %s): %s",
+                                    type, contentClass.getName(), iae.getMessage()),
                             iae);
                 }
             }
             type = type.withContentType(contentType);
         }
     }
     return type;
 }
\ No newline at end of file
