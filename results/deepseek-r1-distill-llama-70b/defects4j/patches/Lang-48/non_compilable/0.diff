diff --git a/tmp/79fa432b-d586-4c7c-ae37-aef3c155d763_buggy.java b/tmp/5ce7bb5a-2576-47df-ab9c-dc46bf8f52be_fixed.java
index 82bdfd4..48e0d9a 100644
--- a/tmp/79fa432b-d586-4c7c-ae37-aef3c155d763_buggy.java
+++ b/tmp/5ce7bb5a-2576-47df-ab9c-dc46bf8f52be_fixed.java
@@ -1,51 +1,57 @@
     /**
      * <p>Test if two <code>Object</code>s are equal using their
      * <code>equals</code> method.</p>
      *
      * @param lhs  the left hand object
      * @param rhs  the right hand object
      * @return EqualsBuilder - used to chain calls.
      */
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
         Class lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
-                // The simple case, not an array, just test the element
-                isEquals = lhs.equals(rhs);
+            // Handle BigDecimal comparison by value
+            if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {
+                BigDecimal lhsBigDecimal = (BigDecimal) lhs;
+                BigDecimal rhsBigDecimal = (BigDecimal) rhs;
+                this.isEquals = lhsBigDecimal.compareTo(rhsBigDecimal) == 0;
+            } else {
+                this.isEquals = lhs.equals(rhs);
+            }
         } else if (lhs.getClass() != rhs.getClass()) {
-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
+            // Different array types, not equal
             this.setEquals(false);
-        }
-        // 'Switch' on type of array, to dispatch to the correct handler
-        // This handles multi dimensional arrays of the same depth
-        else if (lhs instanceof long[]) {
+        } else {
+            // Dispatch to correct handler for array type
+            if (lhs instanceof long[]) {
                 append((long[]) lhs, (long[]) rhs);
             } else if (lhs instanceof int[]) {
                 append((int[]) lhs, (int[]) rhs);
             } else if (lhs instanceof short[]) {
                 append((short[]) lhs, (short[]) rhs);
             } else if (lhs instanceof char[]) {
                 append((char[]) lhs, (char[]) rhs);
             } else if (lhs instanceof byte[]) {
                 append((byte[]) lhs, (byte[]) rhs);
             } else if (lhs instanceof double[]) {
                 append((double[]) lhs, (double[]) rhs);
             } else if (lhs instanceof float[]) {
                 append((float[]) lhs, (float[]) rhs);
             } else if (lhs instanceof boolean[]) {
                 append((boolean[]) lhs, (boolean[]) rhs);
             } else {
-            // Not an array of primitives
+                // Handle Object arrays
                 append((Object[]) lhs, (Object[]) rhs);
             }
+        }
         return this;
     }
\ No newline at end of file
