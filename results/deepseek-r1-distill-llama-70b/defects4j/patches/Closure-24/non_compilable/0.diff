diff --git a/tmp/e148cb5d-fb31-4800-b02b-0a137fe81bed_buggy.java b/tmp/8b9c5479-75dd-489a-acd4-1652f5b289fc_fixed.java
index 602226b..67f60b2 100644
--- a/tmp/e148cb5d-fb31-4800-b02b-0a137fe81bed_buggy.java
+++ b/tmp/8b9c5479-75dd-489a-acd4-1652f5b289fc_fixed.java
@@ -1,26 +1,28 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
+    // Check if the variable is a function parameter or a bleeding function and skip
+    if (v.isParam()) {
+      continue;
+    }
+    // Determine if it's a bleeding function (example logic, may need to adjust)
+    if (v.isFunction() && (v.getScope().isGlobal() || v.isExported())) {
+      continue;
+    }
     if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
       String name = n.getString();
       Var aliasVar = scope.getVar(name);
       aliases.put(name, aliasVar);
 
       String qualifiedName =
           aliasVar.getInitialValue().getQualifiedName();
       transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
     } else {
-          // TODO(robbyw): Support using locals for private variables.
+      // Skip bleeding functions and function parameters already handled above
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
