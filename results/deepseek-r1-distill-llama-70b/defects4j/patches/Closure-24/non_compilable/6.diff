diff --git a/tmp/f17b9884-10ff-4363-b8d9-1d70a34559cf_buggy.java b/tmp/b4f4cc65-ef58-4020-a279-52a2234d784a_fixed.java
index 602226b..5f3239b 100644
--- a/tmp/f17b9884-10ff-4363-b8d9-1d70a34559cf_buggy.java
+++ b/tmp/b4f4cc65-ef58-4020-a279-52a2234d784a_fixed.java
@@ -1,26 +1,15 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        if (n.getInitializer() != null && n.getInitializer().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
     }
 }
\ No newline at end of file
-    }
