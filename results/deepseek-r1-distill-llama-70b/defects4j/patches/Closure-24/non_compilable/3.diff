diff --git a/tmp/0d6e3c7d-d4a9-446c-8815-873151f7799e_buggy.java b/tmp/3cb0eeab-93d5-41b3-8e1d-13036d1a6343_fixed.java
index 602226b..ebe20ba 100644
--- a/tmp/0d6e3c7d-d4a9-446c-8815-873151f7799e_buggy.java
+++ b/tmp/3cb0eeab-93d5-41b3-8e1d-13036d1a6343_fixed.java
@@ -1,26 +1,21 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
+  // Check if we're in the function's parameter list or a bleeding function
+  if (scope.getFunction().isBleeding() || scope.isParameter()) {
+    return;
+  }
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+        if (scope.getVar(name) != null) {
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+        }
       } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+        report(t, n, GOOG_SCOPE NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
