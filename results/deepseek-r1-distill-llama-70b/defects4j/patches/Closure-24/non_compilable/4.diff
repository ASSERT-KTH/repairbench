diff --git a/tmp/9ba131ce-a28e-45b5-88ab-faabd1e2aea0_buggy.java b/tmp/c06e5dad-7712-4c57-8436-317311a142f3_fixed.java
index 602226b..c86f2c6 100644
--- a/tmp/9ba131ce-a28e-45b5-88ab-faabd1e2aea0_buggy.java
+++ b/tmp/c06e5dad-7712-4c57-8436-317311a142f3_fixed.java
@@ -1,26 +1,24 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    if (n.getType() == Token.VAR) {
+      Node initializer = n.getInitializer();
+      if (initializer != null && initializer.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
         // Bleeding functions already get a BAD_PARAMETERS error, so just
         // do nothing.
         // Parameters of the scope function also get a BAD_PARAMETERS
         // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+      } else if (!v.isParameter()) {
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
