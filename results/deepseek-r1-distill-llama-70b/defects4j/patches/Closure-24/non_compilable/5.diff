diff --git a/tmp/b41831d1-9785-488d-b3a1-6567e5df835f_buggy.java b/tmp/ff72b38a-54fa-481a-b3e4-bb0a09091e8f_fixed.java
index 602226b..32f2aff 100644
--- a/tmp/b41831d1-9785-488d-b3a1-6567e5df835f_buggy.java
+++ b/tmp/ff72b38a-54fa-481a-b3e4-bb0a09091e8f_fixed.java
@@ -1,26 +1,24 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
+
+        boolean isAlias = false;
+        // Check if the current node is an alias
         if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
+            if (aliasVar != null) {
                 aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                 transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+                isAlias = true;
+            }
+        }
+
+        // If not an alias, check if it's a local variable that needs reporting
+        if (!isAlias && !v.isParameter() && (n.getType() == Token.VAR || n.getType() == Token.CONST || n.getType() == Token.LET)) {
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
     }
 }
\ No newline at end of file
-    }
