diff --git a/tmp/479ac7d7-0ef0-4fe3-99f6-77fe9d1b0d65_buggy.java b/tmp/0a6eccf5-4421-4a7e-82f8-82d9150c0c44_fixed.java
index 602226b..729951a 100644
--- a/tmp/479ac7d7-0ef0-4fe3-99f6-77fe9d1b0d65_buggy.java
+++ b/tmp/0a6eccf5-4421-4a7e-82f8-82d9150c0c44_fixed.java
@@ -1,26 +1,17 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
         if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
-    }
