diff --git a/tmp/9a8558f4-b628-4084-9b73-8dc5d9f57136_buggy.java b/tmp/b98e333b-8a10-4a7d-89e7-119e3d57c97c_fixed.java
index 602226b..462ff38 100644
--- a/tmp/9a8558f4-b628-4084-9b73-8dc5d9f57136_buggy.java
+++ b/tmp/b98e333b-8a10-4a7d-89e7-119e3d57c97c_fixed.java
@@ -1,26 +1,25 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
+        boolean isAlias = false;
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
+            if (aliasVar != null) {
+              isAlias = true;
               aliases.put(name, aliasVar);
-
               String qualifiedName =
                   aliasVar.getInitialValue().getQualifiedName();
               transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+            }
+          }
+        }
+        if (!isAlias) {
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
-    }
