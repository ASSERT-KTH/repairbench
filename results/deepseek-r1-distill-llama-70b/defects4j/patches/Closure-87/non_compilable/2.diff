diff --git a/tmp/f63f3edc-d116-4fb1-ac51-fb656ab9d657_buggy.java b/tmp/4765eaad-51cc-4b8b-b348-419bcd474e89_fixed.java
index 19fd63e..c4eced6 100644
--- a/tmp/f63f3edc-d116-4fb1-ac51-fb656ab9d657_buggy.java
+++ b/tmp/4765eaad-51cc-4b8b-b348-419bcd474e89_fixed.java
@@ -1,24 +1,22 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and folding is safe.
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+            // Prevent folding if the parent is an event handler to avoid IE issues.
+            Node parent = n.getParent();
+            if (parent != null && 
+                (parent.getType() == Token.EVENT_HANDLER ||
+                 (parent.getType() == Token.EXPR_RESULT && 
+                  parent.getParent() != null &&
+                  parent.getParent().getType() == Token.EVENT_HANDLER))) {
+                return false;
+            }
             return NodeUtil.isExpressionNode(maybeExpr);
         }
     }
-
     return false;
 }
\ No newline at end of file
