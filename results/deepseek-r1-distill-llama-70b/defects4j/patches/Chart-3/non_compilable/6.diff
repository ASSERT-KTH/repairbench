diff --git a/tmp/0818d5b5-0885-434e-b2b4-1efe7216e5b2_buggy.java b/tmp/fb37f952-64ad-4c76-bd1e-13a21832dba9_fixed.java
index 388771b..855616f 100644
--- a/tmp/0818d5b5-0885-434e-b2b4-1efe7216e5b2_buggy.java
+++ b/tmp/fb37f952-64ad-4c76-bd1e-13a21832dba9_fixed.java
@@ -1,37 +1,48 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
             }
             catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
+    // Recalculate min and max for the new TimeSeries
+    if (!copy.data.isEmpty()) {
+        double min = Double.NaN;
+        double max = Double.NaN;
+        for (TimeSeriesDataItem item : copy.data) {
+            double value = item.getValue();
+            if (Double.isNaN(min)) {
+                min = value;
+            } else {
+                min = Math.min(min, value);
+            }
+            if (Double.isNaN(max)) {
+                max = value;
+            } else {
+                max = Math.max(max, value);
+            }
+        }
+        copy.minY = min;
+        copy.maxY = max;
+    } else {
+        copy.minY = null;
+        copy.maxY = null;
+    }
     return copy;
 }
\ No newline at end of file
