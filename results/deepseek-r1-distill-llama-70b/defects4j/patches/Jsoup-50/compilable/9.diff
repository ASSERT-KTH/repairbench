diff --git a/tmp/11786a9c-49f0-4b89-8f85-794526ded17e_buggy.java b/tmp/92c0ee01-b06a-4410-a9c5-958125457b43_fixed.java
index 25ca093..1dcb087 100644
--- a/tmp/11786a9c-49f0-4b89-8f85-794526ded17e_buggy.java
+++ b/tmp/92c0ee01-b06a-4410-a9c5-958125457b43_fixed.java
@@ -1,52 +1,81 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM first
+    boolean hasBOM = false;
+    String bomCharset = null;
+    if (byteData.remaining() >= 2) {
+        byte[] bomBytes = new byte[4];
+        byteData.get(bomBytes, 0, 2);
+        byteData.rewind();
+        if (bomBytes[0] == (byte) 0xFE && bomBytes[1] == (byte) 0xFF) {
+            hasBOM = true;
+            bomCharset = "UTF-16BE";
+        } else if (bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE) {
+            hasBOM = true;
+            bomCharset = "UTF-16LE";
+        } else if (byteData.remaining() >= 4) {
+            byte[] bom4Bytes = new byte[4];
+            byteData.get(bom4Bytes, 0, 4);
+            byteData.rewind();
+            if (bom4Bytes[0] == 0x00 && bom4Bytes[1] == 0x00 && bom4Bytes[2] == (byte) 0xFE && bom4Bytes[3] == (byte) 0xFF) {
+                hasBOM = true;
+                bomCharset = "UTF-32BE";
+            } else if (bom4Bytes[0] == (byte) 0xFF && bom4Bytes[1] == (byte) 0xFE && bom4Bytes[2] == 0x00 && bom4Bytes[3] == 0x00) {
+                hasBOM = true;
+                bomCharset = "UTF-32LE";
+            }
+        }
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (hasBOM) {
+        charsetName = bomCharset;
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+        // Strip BOM from start of content
+        if (docData.length() > 0 && docData.codePointAt(0) == UNICODE_BOM) {
+            docData = docData.substring(1);
+        }
+        doc = parser.parseInput(docData, baseUri);
+        doc.outputSettings().charset(charsetName);
+        return doc;
+    }
+
+    // Original logic for handling without BOM
+    if (charsetName == null) {
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
