diff --git a/tmp/d4bd6b38-1fbc-4d1c-9145-d23dab890e40_buggy.java b/tmp/6badb095-d0b4-4fbf-810c-38c2ccdbff56_fixed.java
index 25ca093..5b0136a 100644
--- a/tmp/d4bd6b38-1fbc-4d1c-9145-d23dab890e40_buggy.java
+++ b/tmp/6badb095-d0b4-4fbf-810c-38c2ccdbff56_fixed.java
@@ -1,52 +1,68 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        if (charsetName == null) { 
+            boolean detectedBom = false;
+            if (byteData.remaining() >= 2) {
+                byte[] bomBytes = new byte[2];
+                byteData.get(bomBytes);
+                if (bomBytes[0] == (byte) 0xFE && bomBytes[1] == (byte) 0xFF) {
+                    charsetName = "UTF-16BE";
+                    detectedBom = true;
+                } else if (bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE) {
+                    charsetName = "UTF-16LE";
+                    detectedBom = true;
+                }
+            }
+            if (!detectedBom && byteData.remaining() >= 4) {
+                byte[] bomBytes = new byte[4];
+                byteData.get(bomBytes);
+                if (bomBytes[0] == 0x00 && bomBytes[1] == 0x00 && bomBytes[2] == 0xFE && bomBytes[3] == 0xFF) {
+                    charsetName = "UTF-32BE";
+                    detectedBom = true;
+                } else if (bomBytes[0] == 0xFF && bomBytes[1] == 0xFE && bomBytes[2] == 0x00 && bomBytes[3] == 0x00) {
+                    charsetName = "UTF-32LE";
+                    detectedBom = true;
+                }
+            }
+            byteData.rewind();
+            if (detectedBom) {
+                docData = Charset.forName(charsetName).decode(byteData);
+            } else {
                 docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 doc = parser.parseInput(docData, baseUri);
                 Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+                if (meta != null) {
                     String foundCharset = null;
                     if (meta.hasAttr("http-equiv")) {
                         foundCharset = getCharsetFromContentType(meta.attr("content"));
                     }
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                    if (foundCharset != null && !foundCharset.equals(charsetName)) {
                         foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                         charsetName = foundCharset;
                         byteData.rewind();
                         docData = Charset.forName(foundCharset).decode(byteData).toString();
                         doc = null;
                     }
                 }
-        } else { // specified by content type header (or by user on file load)
+            }
+        } else {
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
