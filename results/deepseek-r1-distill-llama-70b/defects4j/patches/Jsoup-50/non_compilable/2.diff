diff --git a/tmp/9226bb51-b8b8-4337-8947-77f501429a52_buggy.java b/tmp/6e0657cf-3f4b-493a-b6d5-c1f9597a52d2_fixed.java
index 25ca093..4b8adf3 100644
--- a/tmp/9226bb51-b8b8-4337-8947-77f501429a52_buggy.java
+++ b/tmp/6e0657cf-3f4b-493a-b6d5-c1f9597a52d2_fixed.java
@@ -1,52 +1,73 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Look for BOM - overrides any other header or input
+    if (charsetName == null) {
+        charsetName = defaultCharset;
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    boolean hasBom = false;
+    String bomCharset = null;
+    final byte[] bytes = byteData.array();
+    if (bytes.length >= 2) {
+        if (bytes[0] == (byte) 0xFE && bytes[1] == (byte) 0xFF) {
+            // UTF-16BE BOM
+            hasBom = true;
+            bomCharset = "UTF-16BE";
+        } else if (bytes[0] == (byte) 0xFF && bytes[1] == (byte) 0xFE) {
+            // UTF-16LE BOM
+            hasBom = true;
+            bomCharset = "UTF-16LE";
+        } else if (bytes.length >= 4 && bytes[0] == (byte) 0x00 && bytes[1] == (byte) 0x00 && bytes[2] == (byte) 0xFE && bytes[3] == (byte) 0xFF) {
+            // UTF-32BE BOM
+            hasBom = true;
+            bomCharset = "UTF-32BE";
+        } else if (bytes.length >= 4 && bytes[0] == (byte) 0xFF && bytes[1] == (byte) 0xFE && bytes[2] == (byte) 0x00 && bytes[3] == (byte) 0x00) {
+            // UTF-32LE BOM
+            hasBom = true;
+            bomCharset = "UTF-32LE";
+        }
+    }
+
+    if (hasBom) {
+        byteData.rewind();
+        charsetName = bomCharset;
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+        doc = parser.parseInput(docData, baseUri);
+    } else if (charsetName == null) {
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                    foundCharset = defaultCharset;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (foundCharset != null && !foundCharset.equals(defaultCharset, IgnoreCase)) {
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
