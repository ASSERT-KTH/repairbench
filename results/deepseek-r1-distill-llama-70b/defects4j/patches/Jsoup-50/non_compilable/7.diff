diff --git a/tmp/1cd2a07d-5399-4b08-bfd7-d91211fd3007_buggy.java b/tmp/a589a3b6-1db3-42d6-b34b-cd609ffda83f_fixed.java
index 25ca093..2b878ba 100644
--- a/tmp/1cd2a07d-5399-4b08-bfd7-d91211fd3007_buggy.java
+++ b/tmp/a589a3b6-1db3-42d6-b34b-cd609ffda83f_fixed.java
@@ -1,52 +1,93 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Detect BOM and determine charset
+    if (!byteData.hasRemaining()) {
+        return null;
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // Read ahead for BOM
+    byteData.mark();
+    byte[] bomBytes = new byte[4];
+    int read = byteData.get(bomBytes);
+    byteData.reset();
+
+    if (read >= 3) {
+        if (startsWith(bomBytes, 0, 3, (byte) 0xFE, (byte) 0xFF)) { // UTF-16BE
+            charsetName = "UTF-16BE";
+            byteData.position(2);
+        } else if (startsWith(bomBytes, 0, 3, (byte) 0xFF, (byte) 0xFE)) { // UTF-16LE
+            charsetName = "UTF-16LE";
+            byteData.position(2);
+        }
+    }
+    if (read >= 4) {
+        if (startsWith(bomBytes, 0, 4, (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0xFF)) { // UTF-32BE
+            charsetName = "UTF-32BE";
+            byteData.position(4);
+        } else if (startsWith(bomBytes, 0, 4, (byte) 0xFF, (byte) 0xFE, (byte) 0x00, (byte) 0x00)) { // UTF-32LE
+            charsetName = "UTF-32LE";
+            byteData.position(4);
+        }
+    }
+    if (read >= 3) {
+        if (bomBytes[0] == (byte) 0xEF && bomBytes[1] == (byte) 0xBB && bomBytes[2] == (byte) 0xBF) { // UTF-8
+            charsetName = "UTF-8";
+            byteData.position(3);
+        }
+    }
+
+    // If charsetName is null, determine from meta
+    if (charsetName == null) {
+        charsetName = defaultCharset; // Start with default
+        docData = Charset.forName(charsetName).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (foundCharset != null && !foundCharset.equals(charsetName)) {
+                charsetName = foundCharset.trim().replaceAll("[\"']", "");
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                docData = Charset.forName(charsetName).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
         docData = Charset.forName(charsetName).decode(byteData).toString();
+        doc = parser.parseInput(docData, baseUri);
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
+
+private static boolean startsWith(byte[] array, int offset, int length, byte... values) {
+    if (array.length - offset < values.length) {
+        return false;
+    }
+    for (int i = 0; i < values.length; i++) {
+        if (array[offset + i] != values[i]) {
+            return false;
+        }
+    }
+    return true;
+}
\ No newline at end of file
