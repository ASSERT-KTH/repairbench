diff --git a/tmp/e47e022e-84a7-451b-afe3-7a2e7cc51f68_buggy.java b/tmp/d8c10c43-ae5d-49d4-a3c2-12ff0d1d27ce_fixed.java
index 25ca093..abb3c67 100644
--- a/tmp/e47e022e-84a7-451b-afe3-7a2e7cc51f68_buggy.java
+++ b/tmp/d8c10c43-ae5d-49d4-a3c2-12ff0d1d27ce_fixed.java
@@ -1,52 +1,51 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+    byte[] bomBytes = new byte[4];
+    int bytesRead = byteData.get(bomBytes);
+    String bom = null;
+    if (bytesRead >= 2) {
+        if (bomBytes[0] == (byte) 0xFE && bomBytes[1] == (byte) 0xFF) {
+            bom = "UTF-16BE";
+        } else if (bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE) {
+            bom = "UTF-16LE";
         }
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
     }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+    if (bytesRead >= 4 && bom == null) {
+        int bomInt = ((bomBytes[0] & 0xFF) << 24) | ((bomBytes[1] & 0xFF) << 16) |
+                ((bomBytes[2] & 0xFF) << 8) | (bomBytes[3] & 0xFF);
+        if (bomInt == 0x0000FEFF) {
+            bom = "UTF-32BE";
+        } else if (bomInt == 0xFFFE0000) {
+            bom = "UTF-32LE";
         }
     }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
     byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
+
+    if (bom != null) {
+        charsetName = bom;
+        docData = Charset.forName(charsetName).decode(byteData);
+        docData = docData.toString();
+    } else if (charsetName == null) {
+        docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // ... (rest of the original charset detection logic)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
