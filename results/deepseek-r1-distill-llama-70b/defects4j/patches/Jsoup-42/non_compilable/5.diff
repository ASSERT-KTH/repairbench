diff --git a/tmp/1bf3177b-b03d-4683-b2f5-9620b12abf8e_buggy.java b/tmp/a13dbf9c-e9bd-4bfa-89c8-099a852f9f83_fixed.java
index 442a001..b358197 100644
--- a/tmp/1bf3177b-b03d-4683-b2f5-9620b12abf8e_buggy.java
+++ b/tmp/a13dbf9c-e9bd-4bfa-89c8-099a852f9f83_fixed.java
@@ -1,39 +1,43 @@
-    /**
-     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
-     * list will not be reflected in the DOM.
-     * @return a list of key vals
-     */
 public List<Connection.KeyVal> formData() {
     ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();
 
-        // iterate the form control elements and accumulate their values
     for (Element el : elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
+        if (!el.tag().isFormSubmittable()) continue;
         String name = el.attr("name");
-            if (name.length() == 0) continue;
+        if (name.isEmpty()) continue;
         String type = el.attr("type");
         
+        if (el.attr("disabled") != null) continue;
+
         if ("select".equals(el.tagName())) {
-                Elements options = el.select("option[selected]");
-                boolean set = false;
-                for (Element option: options) {
-                    data.add(HttpConnection.KeyVal.create(name, option.val()));
-                    set = true;
+            Elements selected = el.select("option[selected]");
+            if (selected.isEmpty()) {
+                Element firstOption = el.selectFirst("option");
+                if (firstOption != null) {
+                    data.add(HttpConnection.KeyVal.create(name, firstOption.val()));
                 }
-                if (!set) {
-                    Element option = el.select("option").first();
-                    if (option != null)
+            } else {
+                for (Element option : selected) {
                     data.add(HttpConnection.KeyVal.create(name, option.val()));
                 }
-            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
-                // only add checkbox or radio if they have the checked attribute
+            }
+        } else if ("checkbox".equalsIgnoreCase(type)) {
+            if (el.hasAttr("checked")) {
+                String value = el.attr("value");
+                if (value.isEmpty()) {
+                    value = "on"; // Set default value to "on"
+                }
+                data.add(HttpConnection.KeyVal.create(name, value));
+            }
+        } else if ("radio".equalsIgnoreCase(type)) {
             if (el.hasAttr("checked")) {
-                    final String val = el.val();
-                    data.add(HttpConnection.KeyVal.create(name, val));
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
+        } else if ("textarea".equalsIgnoreCase(type)) {
+            data.add(HttpConnection.KeyVal.create(name, el.text()));
         } else {
             data.add(HttpConnection.KeyVal.create(name, el.val()));
         }
     }
     return data;
 }
\ No newline at end of file
