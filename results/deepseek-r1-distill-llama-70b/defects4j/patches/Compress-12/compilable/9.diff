diff --git a/tmp/9b847e99-f9fc-4b94-a7db-d25191286b0e_buggy.java b/tmp/713f84a5-c67b-45cd-b2f3-c3ce1d69579c_fixed.java
index b5a206b..57fa709 100644
--- a/tmp/9b847e99-f9fc-4b94-a7db-d25191286b0e_buggy.java
+++ b/tmp/713f84a5-c67b-45cd-b2f3-c3ce1d69579c_fixed.java
@@ -1,80 +1,59 @@
-    /**
-     * Get the next entry in this tar archive. This will skip
-     * over any remaining data in the current entry, if there
-     * is one, and place the input stream at the header of the
-     * next entry, and read the header and instantiate a new
-     * TarEntry from the header bytes and return that entry.
-     * If there are no more entries in the archive, null will
-     * be returned to indicate that the end of the archive has
-     * been reached.
-     *
-     * @return The next TarEntry in the archive, or null.
-     * @throws IOException on error
-     */
 public TarArchiveEntry getNextTarEntry() throws IOException {
     if (hasHitEOF) {
         return null;
     }
 
     if (currEntry != null) {
         long numToSkip = entrySize - entryOffset;
 
         while (numToSkip > 0) {
             long skipped = skip(numToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip current tar entry");
             }
             numToSkip -= skipped;
         }
 
         readBuf = null;
     }
 
     byte[] headerBuf = getRecord();
 
     if (hasHitEOF) {
         currEntry = null;
         return null;
     }
 
     currEntry = new TarArchiveEntry(headerBuf);
     entryOffset = 0;
     entrySize = currEntry.getSize();
 
     if (currEntry.isGNULongNameEntry()) {
-            // read in the name
         StringBuffer longName = new StringBuffer();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
+        int length;
         while ((length = read(buf)) >= 0) {
             longName.append(new String(buf, 0, length));
         }
-            getNextEntry();
-            if (currEntry == null) {
-                // Bugzilla: 40334
-                // Malformed tar file - long entry name not followed by entry
-                return null;
+        TarArchiveEntry nextEntry = getNextTarEntry();
+        if (nextEntry == null) {
+            throw new IllegalArgumentException("Malformed tar file - long entry name not followed by entry");
         }
-            // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
+        if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) {
             longName.deleteCharAt(longName.length() - 1);
         }
         currEntry.setName(longName.toString());
+        currEntry = nextEntry;
     }
 
-        if (currEntry.isPaxHeader()){ // Process Pax headers
+    if (currEntry.isPaxHeader()) {
         paxHeaders();
     }
 
-        if (currEntry.isGNUSparse()){ // Process sparse files
+    if (currEntry.isGNUSparse()) {
         readGNUSparse();
     }
 
-        // If the size of the next element in the archive has changed
-        // due to a new size being reported in the posix header
-        // information, we update entrySize here so that it contains
-        // the correct value.
     entrySize = currEntry.getSize();
     return currEntry;
 }
\ No newline at end of file
