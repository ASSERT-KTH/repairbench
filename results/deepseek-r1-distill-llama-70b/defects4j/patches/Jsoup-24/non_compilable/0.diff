diff --git a/tmp/55198ce3-625a-4ff4-aee4-d4ff1fa27b40_buggy.java b/tmp/2e81c0ea-c4b5-4952-a451-c9af991d55b1_fixed.java
index b2d53db..8224977 100644
--- a/tmp/55198ce3-625a-4ff4-aee4-d4ff1fa27b40_buggy.java
+++ b/tmp/2e81c0ea-c4b5-4952-a451-c9af991d55b1_fixed.java
@@ -1,34 +1,106 @@
 void read(Tokeniser t, CharacterReader r) {
+    if (t.la == -1) {
+        t getchar();
+        return;
+    }
+
     if (r.matchesLetter()) {
-                String name = r.consumeLetterSequence();
-                t.tagPending.appendTagName(name.toLowerCase());
-                t.dataBuffer.append(name);
+        t.name = t/dataBuffer.append(r.consumeLetterSequence());
+        if (t.tagPending != 0) {
+            t.tagPending.appendTagName(t.name.toLowerCase());
+        }
         r.advance();
         return;
     }
 
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
+    if (t.isAppropriateEndTagToken()) {
+        if (!r.isEmpty()) {
             char c = r.consume();
+            if (!t.tagPending<Tag>) {
+                t.dataBuffer.append(c);
+                anythingElse(t, r);
+                return;
+            }
             switch (c) {
                 case '\t':
                 case '\n':
                 case '\f':
                 case ' ':
                     t.transition(BeforeAttributeName);
                     break;
                 case '/':
                     t.transition(SelfClosingStartTag);
                     break;
                 case '>':
                     t.emitTagPending();
                     t.transition(Data);
                     break;
+                case '\'':
+                case '"':
+                    t.transition(InAttributeValue);
+                    break;
                 default:
                     t.dataBuffer.append(c);
                     anythingElse(t, r);
                     break;
             }
+        }
+    }
+
+    if (t.current == Data) {
+        if (t.tagPending == 0 && (r.current() == '<' && r.next() == '!' && r.next(1) == '-' && r.next(2) == '-' 
+                || r.current() == ']' && r.next() == '>' && r.next(1) == ')) {
+            t.markolet();
+        }
+    }
+
+    if (t.tagPending == 0) {
+        if (!r.isEmpty()) {
+            char c = r.current();
+            if (c == '<') {
+                t Transition StartTag;
+            } else if (c == '&') {
+                t Transition Entity;
+            } else {
+                t.dataBuffer.append(c);
+                r.advance();
+            }
+        } else {
+            tTransition Data;
+            return;
+        }
+    }
+}
+
+private void anythingElse(Tokeniser t, CharacterReader r) {
+    if (r.isEmpty()) {
+        tTransition Data;
+        return;
+    }
+    char c = r.current();
+
+    if (c == '<') {
+        if (t.current == Data) {
+            t Transition StartTag;
+            return;
+        }
+    } else if (c == '&') {
+        t Transition Entity;
+        return;
+    }
+    t.dataBuffer.append(c);
+    r.advance();
+}
+
+private void anyChar(Tokeniser t, CharacterReader r) {
+    if (!r.isEmpty()) {
+        char c = r.current();
+        if (c == '"') {
+            t.transition(InScriptComment);
+        }
+        t.dataBuffer.append(c);
+        r.advance();
     } else {
-                anythingElse(t, r);
+        tTransition Data;
     }
 }
\ No newline at end of file
