diff --git a/tmp/32988ef9-c54d-48af-bfa1-a099faee784e_buggy.java b/tmp/aa964488-4119-41f4-9014-a9eda6c75e49_fixed.java
index a7d0787..efe01bd 100644
--- a/tmp/32988ef9-c54d-48af-bfa1-a099faee784e_buggy.java
+++ b/tmp/aa964488-4119-41f4-9014-a9eda6c75e49_fixed.java
@@ -1,54 +1,76 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
+        else if (clazz == Integer.class)
+        {
+            try
+            {
+                return (T) Integer.valueOf(str);
+            }
+            catch (NumberFormatException e)
+            {
+                throw new ParseException("Invalid integer value: " + str, 0);
+            }
+        }
+        else if (clazz == Long.class)
+        {
+            try
+            {
+                return (T) Long.valueOf(str);
+            }
+            catch (NumberFormatException e)
+            {
+                throw new ParseException("Invalid long value: " + str, 0);
+            }
+        }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            throw new ParseException("Unsupported type: " + clazz.getName(), 0);
         }
     }
\ No newline at end of file
