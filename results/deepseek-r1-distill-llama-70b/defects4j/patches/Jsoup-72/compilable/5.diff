diff --git a/tmp/87424be3-5378-41cd-91a7-0a74f68750a7_buggy.java b/tmp/6913d7d4-b5cf-4455-a278-12083dd4bcf0_fixed.java
index d666a67..69cb3f3 100644
--- a/tmp/87424be3-5378-41cd-91a7-0a74f68750a7_buggy.java
+++ b/tmp/6913d7d4-b5cf-4455-a278-12083dd4bcf0_fixed.java
@@ -1,36 +1,32 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
     // limit (no cache):
     if (count > maxStringCacheLen)
         return new String(charBuf, start, count);
 
     // calculate hash:
     int hash = 0;
     int offset = start;
     for (int i = 0; i < count; i++) {
         hash = 31 * hash + charBuf[offset++];
     }
 
     // get from cache
     final int index = hash & stringCache.length - 1;
     String cached = stringCache[index];
 
-        if (cached == null) { // miss, add
+    // Ensure we don't exceed the charBuf length when count is negative or start is out of bounds
+    if (count < 0 || start < 0 || (start + count) > charBuf.length) {
+        cached = new String(charBuf, Math.max(start, 0), Math.min(count, charBuf.length - Math.max(start, 0)));
+    } else if (cached == null) { // miss, add
         cached = new String(charBuf, start, count);
         stringCache[index] = cached;
     } else { // hashcode hit, check equality
         if (rangeEquals(charBuf, start, count, cached)) { // hit
             return cached;
         } else { // hashcode conflict
             cached = new String(charBuf, start, count);
             stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
         }
     }
     return cached;
 }
\ No newline at end of file
