diff --git a/tmp/2219d4b1-bf6d-4a76-991e-d3fce377df27_buggy.java b/tmp/49c8793d-5fe1-4d57-9c89-539d80310544_fixed.java
index 6e45f80..2ebfeb4 100644
--- a/tmp/2219d4b1-bf6d-4a76-991e-d3fce377df27_buggy.java
+++ b/tmp/49c8793d-5fe1-4d57-9c89-539d80310544_fixed.java
@@ -1,21 +1,39 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        return new TypeAdapter<T2>() {
+          @Override
+          public T2 read(JsonReader reader) throws IOException {
+            T1 obj = typeAdapter.read(reader);
+            if (!requestedType.isInstance(obj)) {
+              throw new JsonSyntaxException("Expected " + requestedType.getName() + " but was " + obj.getClass().getName());
+            }
+            return (T2) obj;
+          }
 
+          @Override
+          public void write(JsonWriter writer, T2 value) throws IOException {
+            typeAdapter.write(writer, value);
+          }
+
+          @Override
+          public String toString() {
+            return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
