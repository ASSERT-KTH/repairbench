diff --git a/tmp/1d2a42ec-3b58-4489-a23d-5345c96edb01_buggy.java b/tmp/9fd8b825-d1c0-4296-9870-07d9af676891_fixed.java
index 6e45f80..8d7e410 100644
--- a/tmp/1d2a42ec-3b58-4489-a23d-5345c96edb01_buggy.java
+++ b/tmp/9fd8b825-d1c0-4296-9870-07d9af676891_fixed.java
@@ -1,21 +1,33 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
       
+      // Wrap the typeAdapter with a new adapter that checks the deserialized type
+      return new TypeAdapter<T2>() {
+        @Override
+        public T2 fromJson(JsonReader in) throws IOException {
+          T1 obj = typeAdapter.fromJson(in);
+          if (obj != null && !requestedType.isInstance(obj)) {
+            throw new JsonSyntaxException("Expected " + requestedType.getName() + " but was " + obj.getClass().getName());
           }
+          return (T2) obj;
+        }
+
+        @Override
+        public void toJson(JsonWriter out, T2 value) throws IOException {
+          typeAdapter.toJson(out, (T1) value);
+        }
+      };
+    }
+    
     @Override public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
