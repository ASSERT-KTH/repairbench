diff --git a/tmp/e09da93b-c929-4a7e-a5ca-87fe959503fc_buggy.java b/tmp/3bf2a404-f23d-452d-8c85-64ed8b12a7b0_fixed.java
index fb2b020..993095f 100644
--- a/tmp/e09da93b-c929-4a7e-a5ca-87fe959503fc_buggy.java
+++ b/tmp/3bf2a404-f23d-452d-8c85-64ed8b12a7b0_fixed.java
@@ -1,27 +1,26 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
+        JSType nativeType = getNativeType(JSTypeNative.VOID_TYPE);
+        JSType combinedType = hasProperty(prop) 
+            ? nativeType.getLeastSupertype(propType)
+            : nativeType;
+        defineInferredProperty(prop, combinedType, null);
       }
     }
   }
 }
\ No newline at end of file
