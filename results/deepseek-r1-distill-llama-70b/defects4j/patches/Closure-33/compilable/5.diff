diff --git a/tmp/9dd4a9f7-6670-4f71-9b28-febc02df2456_buggy.java b/tmp/617b3e04-1b76-48a4-a41f-3e20057b0820_fixed.java
index fb2b020..37333fd 100644
--- a/tmp/9dd4a9f7-6670-4f71-9b28-febc02df2456_buggy.java
+++ b/tmp/617b3e04-1b76-48a4-a41f-3e20057b0820_fixed.java
@@ -1,27 +1,21 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
+                JSType propType = constraintObj.getPropertyType(prop);
                 JSType typeToInfer = propType;
+
+                // If the property doesn't exist on this object, determine the type to infer.
                 if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
                 }
+
+                // Define the inferred property type.
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
