diff --git a/tmp/51ab2c8c-5769-4c8f-9484-9f798a07cbae_buggy.java b/tmp/8bec0dd3-93df-4455-b179-98d0c9f5f51f_fixed.java
index fb2b020..fb4d82d 100644
--- a/tmp/51ab2c8c-5769-4c8f-9484-9f798a07cbae_buggy.java
+++ b/tmp/8bec0dd3-93df-4455-b179-98d0c9f5f51f_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                 }
+                // Check if the inferred type is compatible with the actual property's type
+                if (typeToInfer != null && isCompatibleWithPropertyType(prop, typeToInfer)) {
                     defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
     }
+}
\ No newline at end of file
