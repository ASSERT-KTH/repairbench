diff --git a/tmp/88353f83-fbf5-4241-8a5f-0e1812f628b7_buggy.java b/tmp/0a77da2c-fb1b-4bde-bb7c-fdd977cf1134_fixed.java
index fb2b020..2a6c8f4 100644
--- a/tmp/88353f83-fbf5-4241-8a5f-0e1812f628b7_buggy.java
+++ b/tmp/0a77da2c-fb1b-4bde-bb7c-fdd977cf1134_fixed.java
@@ -1,27 +1,45 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
+          
+          // Check if the property type is an object or array to handle nested structures
+          if (typeToInfer.isObjectType()) {
+            ObjectType objType = typeToInfer.getObjectType();
+            for (String nestedProp : objType.getOwnPropertyNames()) {
+              JSType nestedPropType = objType.getPropertyType(nestedProp);
+              if (!isPropertyTypeDeclared(prop + "." + nestedProp)) {
+                JSType nestedTypeToInfer = nestedPropType;
+                if (!hasProperty(prop + "." + nestedProp)) {
+                  nestedTypeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+                      .getLeastSupertype(nestedPropType);
+                }
+                defineInferredProperty(prop + "." + nestedProp, nestedTypeToInfer, null);
+              }
+            }
+          } else if (typeToInfer.isArrayType()) {
+            JSType elementType = typeToInfer.getArrayElementType();
+            if (!isPropertyTypeDeclared(prop + "[]")) {
+              JSType arrayTypeToInfer = elementType;
+              if (!hasProperty(prop + "[]")) {
+                arrayTypeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+                    .getLeastSupertype(elementType);
+              }
+              defineInferredProperty(prop + "[]", arrayTypeToInfer, null);
+            }
+          }
         }
       }
     }
   }
\ No newline at end of file
