diff --git a/tmp/02e04521-2713-43ce-9e19-f98eb8f7373e_buggy.java b/tmp/1f91fdaa-8ee6-4e3b-904c-8eacaacf2c8e_fixed.java
index fb2b020..716b1ed 100644
--- a/tmp/02e04521-2713-43ce-9e19-f98eb8f7373e_buggy.java
+++ b/tmp/1f91fdaa-8ee6-4e3b-904c-8eacaacf2c8e_fixed.java
@@ -1,27 +1,17 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraintObj.isRecordType()) {
+    // Check if it's a record type and not null/undefined
+    if (constraintObj.isRecordType() && !constraintObj.isNullOrUndefined()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
