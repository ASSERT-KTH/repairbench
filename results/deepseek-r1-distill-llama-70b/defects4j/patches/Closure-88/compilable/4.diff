diff --git a/tmp/1eca4946-73b9-43d3-9d82-e7cc6df9e25f_buggy.java b/tmp/e8ceb88e-546a-4ce3-bc05-6e7b299e0a6e_fixed.java
index 9353941..1dcc391 100644
--- a/tmp/1eca4946-73b9-43d3-9d82-e7cc6df9e25f_buggy.java
+++ b/tmp/e8ceb88e-546a-4ce3-bc05-6e7b299e0a6e_fixed.java
@@ -1,30 +1,28 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
    */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      // Check if this node is a name and if it's being assigned to (KILL)
+      Node parent = n.getParent();
+      if (NodeUtil.isLhs(n, parent)) {
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+    // Traverse all children, processing in the correct order
+    // Some nodes need to be processed in a specific order, like HINARY which may have left then right
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION NODE
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
