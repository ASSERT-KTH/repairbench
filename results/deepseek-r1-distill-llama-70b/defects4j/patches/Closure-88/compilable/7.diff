diff --git a/tmp/b165d36b-cbf2-4ec9-88a8-86127dd13afb_buggy.java b/tmp/1d37ae8c-56cb-4ab7-962f-35f3f5a529b9_fixed.java
index 9353941..b4dc483 100644
--- a/tmp/b165d36b-cbf2-4ec9-88a8-86127dd13afb_buggy.java
+++ b/tmp/1d37ae8c-56cb-4ab7-962f-35f3f5a529b9_fixed.java
@@ -1,30 +1,18 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
-    }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
