diff --git a/tmp/45a3ba6a-8937-4f6b-9f3e-a4d31d854f19_buggy.java b/tmp/65005c0b-8f91-42de-a133-77858d03f23f_fixed.java
index 9353941..261de1a 100644
--- a/tmp/45a3ba6a-8937-4f6b-9f3e-a4d31d854f19_buggy.java
+++ b/tmp/65005c0b-8f91-42de-a133-77858d03f23f_fixed.java
@@ -1,30 +1,24 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Traverse all children to find the first occurrence
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
+
+    // If not found in this subtree
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
