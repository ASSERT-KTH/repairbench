diff --git a/tmp/b697fd0a-ac35-46c4-a874-6ed117daf912_buggy.java b/tmp/e3d85b04-ab0b-4465-bb01-15b97e59971e_fixed.java
index 9353941..6c4fa84 100644
--- a/tmp/b697fd0a-ac35-46c4-a874-6ed117daf912_buggy.java
+++ b/tmp/e3d85b04-ab0b-4465-bb01-15b97e59971e_fixed.java
@@ -1,30 +1,49 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+  class Finder {
+    // Flag to track if kill has already been seen in the current tree.
+    boolean hasKill = false;
+    // Flag to track if the variable was read before a kill in the same tree.
+    boolean hasReadBeforeKill = false;
+
+    VariableLiveness find(Node n) {
       if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+        if (hasKill) {
+          // If kill has been seen before this read in the current tree, this is a read
+          // after a kill, so it's a possible live read.
+          return VariableLiveness.MAYBE_LIVE;
+        } else if (NodeUtil.isLhs(n, n.getParent())) {
+          // Mark as kill first, then check if a read occurs before in the same tree.
+          hasKill = true;
+          // The first occurrence is a kill, but there could be a read before in the tree
+          return VariableLiveness.MAYBE_LIVE;
+        } else {
+          // This read is before any kill in the current tree.
+          hasReadBeforeKill = true;
+          return VariableLiveness.READ;
+        }
+      }
+
+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+        if (ControlFlowGraph.isEnteringNewCfgNode(child)) {
+          // Don't traverse into new CFG nodes (e.g., functions)
+          continue;
+        }
+        VariableLiveness state = find(child);
+        if (state == VariableLiveness.READ) {
+          return state;
+        } else if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+      if (hasKill && hasReadBeforeKill) {
+        // There's a read before a kill in this subtree
+        return VariableLiveness.MAYBE_LIVE;
+      } else if (hasKill) {
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
-
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
   }
-      }
-    }
-    return VariableLiveness.MAYBE_LIVE;
+  return new Finder().find(n);
 }
\ No newline at end of file
