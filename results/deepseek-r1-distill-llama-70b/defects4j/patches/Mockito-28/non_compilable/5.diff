diff --git a/tmp/59595b57-5d4a-4b67-97ce-01161c889d99_buggy.java b/tmp/22384188-c029-4cf0-aa3c-d7f92d0ede02_fixed.java
index fa6828a..1a373cc 100644
--- a/tmp/59595b57-5d4a-4b67-97ce-01161c889d99_buggy.java
+++ b/tmp/22384188-c029-4cf0-aa3c-d7f92d0ede02_fixed.java
@@ -1,5 +1,37 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+        InjectionCandidate bestCandidate = null;
         for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+           InjectionCandidate candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+            if (candidate.isAccepted() && (bestCandidate == null || isBetterCandidate(bestCandidate, candidate))) {
+                bestCandidate = candidate;
             }
         }
+        if (bestCandidate != null) {
+            bestCandidate.thenInject();
+        }
+    }
+
+    private boolean isBetterCandidate(InjectionCandidate current, InjectionCandidate candidate) {
+        return isExactType(current) ? false : !isExactType(candidate) || getTypeHierarchyDepth(candidate.getType()) < getTypeHierarchyDepth(current.getType());
+    }
+
+    private boolean isExactType(InjectionCandidate candidate) {
+        return(candidate.getType().isAssignableFrom(candidate.getMockType()) && !candidate.getType().isInterface());
+    }
+
+    private int getTypeHierarchyDepth(Class<?> type) {
+        int depth = 0;
+        Class<?> current = type;
+        while (current.getSuperclass() != null && current != Object.class) {
+            depth++;
+            current = current.getSuperclass();
+        }
+        return depth;
+    }
+
+    private static class InjectionCandidate {
+        private final Object mock;
+        private final Class<?> type;
+
+        /* constructors and getters */
+    }
\ No newline at end of file
