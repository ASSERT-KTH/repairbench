diff --git a/tmp/193e5b0e-fa5c-4ab8-b309-f07ae8c1ee96_buggy.java b/tmp/2a7794f2-06a9-40bb-a84e-e5d4ca85aaf6_fixed.java
index 21f64c6..ce5bc63 100644
--- a/tmp/193e5b0e-fa5c-4ab8-b309-f07ae8c1ee96_buggy.java
+++ b/tmp/2a7794f2-06a9-40bb-a84e-e5d4ca85aaf6_fixed.java
@@ -1,23 +1,27 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+        int seqLength = seq.length();
+        if (seqLength == 0)
+            return 0;
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        for (int offset = pos; offset < length; ) {
+            while (offset < length && input[offset] != startChar) {
+                offset++;
+            }
+            if (offset >= length)
+                break;
+            if (offset + seqLength > length)
+                break;
+            boolean match = true;
+            for (int i = 1; i < seqLength; i++) {
+                if (input[offset + i] != seq.charAt(i)) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match) {
                 return offset - pos;
             }
+            offset++;
         }
         return -1;
     }
\ No newline at end of file
