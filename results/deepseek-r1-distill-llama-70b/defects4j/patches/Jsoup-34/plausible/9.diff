diff --git a/tmp/945d6058-e6ec-4d83-99b0-fee67a5b9f96_buggy.java b/tmp/352f4995-0e70-4bfe-aca4-0f550b6522c1_fixed.java
index 21f64c6..6fab8d8 100644
--- a/tmp/945d6058-e6ec-4d83-99b0-fee67a5b9f96_buggy.java
+++ b/tmp/352f4995-0e70-4bfe-aca4-0f550b6522c1_fixed.java
@@ -1,23 +1,26 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    int seqLength = seq.length();
+    if (seqLength == 0)
+        return -1;
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar != input[offset]) {
             while (++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (offset >= length)
+                return -1;
+        }
+        int remaining = length - offset;
+        if (remaining < seqLength)
+            return -1;
+        boolean found = true;
+        for (int j = 1; j < seqLength; j++) {
+            if (offset + j >= length || seq.charAt(j) != input[offset + j]) {
+                found = false;
+                break;
+            }
+        }
+        if (found)
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
