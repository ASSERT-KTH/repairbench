diff --git a/tmp/a5a8841e-7227-4841-832b-75012a1dcc82_buggy.java b/tmp/abe86578-4468-4b22-b1f0-e2c189b51a82_fixed.java
index 21f64c6..43802cd 100644
--- a/tmp/a5a8841e-7227-4841-832b-75012a1dcc82_buggy.java
+++ b/tmp/abe86578-4468-4b22-b1f0-e2c189b51a82_fixed.java
@@ -1,23 +1,25 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0 || pos >= length) return -1;
+    
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        if (input[offset] != startChar) continue; // Skip if it's not the start character
+        
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int end = offset + seq.length();
+        
+        if (end > length) break; // Not enough characters left
+        
+        boolean found = true;
+        for (int j = 1; j < seq.length(); j++) {
+            if (input[i++] != seq.charAt(j)) {
+                found = false;
+                break;
+            }
+        }
+        if (found) {
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
