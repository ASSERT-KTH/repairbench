diff --git a/tmp/999a2444-8e04-449a-b0a9-ad90eb00e73e_buggy.java b/tmp/99fd62d2-af8a-4ae7-970c-3c3c5a73318e_fixed.java
index 21f64c6..2c29cdc 100644
--- a/tmp/999a2444-8e04-449a-b0a9-ad90eb00e73e_buggy.java
+++ b/tmp/99fd62d2-af8a-4ae7-970c-3c3c5a73318e_fixed.java
@@ -1,23 +1,25 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0) {
+        return -1;
+    }
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar != input[offset]) {
             while (++offset < length && startChar != input[offset]);
+        }
+        if (offset + seq.length() > length) {
+            continue;
+        }
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int j = 1;
+        while (i <= last && j < seq.length() && seq.charAt(j) == input[i]) {
+            i++;
+            j++;
+        }
+        if (j == seq.length()) {
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
