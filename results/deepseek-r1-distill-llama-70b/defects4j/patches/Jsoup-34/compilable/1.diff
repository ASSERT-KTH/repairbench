diff --git a/tmp/ba76e194-c9d4-44da-b4bb-1db842c936dd_buggy.java b/tmp/f5d67c28-6e5e-44da-9f13-4e3271cabb5a_fixed.java
index 21f64c6..4d0ba59 100644
--- a/tmp/ba76e194-c9d4-44da-b4bb-1db842c936dd_buggy.java
+++ b/tmp/f5d67c28-6e5e-44da-9f13-4e3271cabb5a_fixed.java
@@ -1,23 +1,26 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+        int seqLength = seq.length();
+        if (seqLength == 0 || pos >= length) return -1;
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+            // Find next occurrence of startChar
+            if (startChar != input[offset]) {
+                if (offset + 1 >= length) break;
                 while (++offset < length && startChar != input[offset]);
+            }
+            if (offset + seqLength > length) break; // Not enough chars left
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int last = i + seqLength - 1;
+            if (last >= length) break; // Out of bounds
+            int j = 1;
+            while (i < last && seq.charAt(j) == input[i]) {
+                i++;
+                j++;
+            }
+            if (i == last) {
                 return offset - pos;
             }
+            offset--; // Re-check this offset in the next iteration
         }
         return -1;
     }
\ No newline at end of file
