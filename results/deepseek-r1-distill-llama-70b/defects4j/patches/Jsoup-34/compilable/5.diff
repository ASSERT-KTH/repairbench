diff --git a/tmp/b7d63591-39a3-459c-ac5f-b9dceacb108b_buggy.java b/tmp/6d29be7a-f690-4e55-b8a0-177477bf50d0_fixed.java
index 21f64c6..6b84e98 100644
--- a/tmp/b7d63591-39a3-459c-ac5f-b9dceacb108b_buggy.java
+++ b/tmp/6d29be7a-f690-4e55-b8a0-177477bf50d0_fixed.java
@@ -1,23 +1,31 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0 || pos >= length)
+        return -1;
+
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
+    int endIndex = length - seq.length();
+    if (endIndex < 0)
+        return -1;
+
+    for (int offset = pos; offset <= endIndex; offset++) {
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            continue;
+
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int seqLen = seq.length();
+        if (i + seqLen - 1 >= length)
+            break;
+
+        boolean found = true;
+        for (int j = 1; j < seqLen; j++) {
+            if (input[i + j - 1] != seq.charAt(j)) {
+                found = false;
+                break;
+            }
+        }
+        if (found)
             return offset - pos;
     }
-        }
+
     return -1;
 }
\ No newline at end of file
