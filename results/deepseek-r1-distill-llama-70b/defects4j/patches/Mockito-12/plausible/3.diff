diff --git a/tmp/8de6b70d-1625-4945-a518-1c3bb84259b3_buggy.java b/tmp/75e8ef3d-9974-48db-8415-3c241f959825_fixed.java
index bada2b6..3ebb173 100644
--- a/tmp/8de6b70d-1625-4945-a518-1c3bb84259b3_buggy.java
+++ b/tmp/75e8ef3d-9974-48db-8415-3c241f959825_fixed.java
@@ -1,16 +1,23 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
 public Class getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        ParameterizedType parameterizedType = (ParameterizedType) generic;
+        Type actual = parameterizedType.getActualTypeArguments()[0];
+        return resolveType(actual);
     }
     
     return Object.class;
 }
+
+private Class resolveType(Type type) {
+    if (type instanceof Class) {
+        return (Class) type;
+    } else if (type instanceof ParameterizedType) {
+        ParameterizedType parameterizedType = (ParameterizedType) type;
+        Type rawType = parameterizedType.getRawType();
+        if (rawType instanceof Class) {
+            return (Class) rawType;
+        }
+    }
+    return Object.class;
+}
\ No newline at end of file
