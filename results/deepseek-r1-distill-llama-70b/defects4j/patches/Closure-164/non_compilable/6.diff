diff --git a/tmp/a07bcbf2-9ad4-47e6-8b73-6a03e340e159_buggy.java b/tmp/30d33e47-e7ef-4cbd-a8c7-4e94ba7556f3_fixed.java
index 9976e43..0efa6ed 100644
--- a/tmp/a07bcbf2-9ad4-47e6-8b73-6a03e340e159_buggy.java
+++ b/tmp/30d33e47-e7ef-4cbd-a8c7-4e94ba7556f3_fixed.java
@@ -1,76 +1,59 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
-    // this.returnType <: that.returnType (covariant)
+  // Return type must be covariant: this_return <: that_return.
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
-    Node thisParam = parameters.getFirstChild();
-    Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+  // Now check the parameters: each this_param must be a supertype of that_param for the same position.
+  // Handle cases where parameter lists are of different lengths and manage optional parameters appropriately.
+  Node thisParamNode = parameters.getFirstChild();
+  Node thatParamNode = that.parameters.getFirstChild();
+
+  while (thisParamNode != null || thatParamNode != null) {
+    if (thisParamNode == null) {
+      // `this` has fewer parameters than `that`:
+      // If `that` has more required parameters, `this` cannot be a subtype.
+      // But if `that`'s extra parameters are optional, it might still be a subtype.
+      if (thatParamNode != null && thatParamNode.getJSType() != null) {
         return false;
       }
+      break;
+    }
+    if (thatParamNode == null) {
+      // `this` has more parameters than `that`; all must be optional.
+      // In that case, they can be ignored.
+      if (!thisParamNode.isVarArgs() && thisParamNode.getJSType() != null) {
+        return false;
+      }
+      break;
     }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+    JSType thisParamType = thisParamNode.getJSType();
+    JSType thatParamType = thatParamNode.getJSType();
 
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
+    // If this parameter is null, treat it as the top (most general) type.
+    if (thisParamType == null) {
+      thisParamType = registry.getTopType();
     }
-      if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
+    if (thatParamType == null) {
+      thatParamType = registry.getTopType();
     }
 
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
-      }
+    // Contravariant check: that_param must be a subtype of this_param.
+    if (!thatParamType.isSubtype(thisParamType)) {
+      return false;
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    thisParamNode = thisParamNode.getNext();
+    thatParamNode = thatParamNode.getNext();
+  }
 
   return true;
 }
\ No newline at end of file
