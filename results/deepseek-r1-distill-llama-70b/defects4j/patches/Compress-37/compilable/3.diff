diff --git a/tmp/2e3465e9-8725-48bc-960c-223f0fe3eaeb_buggy.java b/tmp/81f53978-6163-4006-a769-7cbb4ed5c84b_fixed.java
index 4b7e1e4..8441c82 100644
--- a/tmp/2e3465e9-8725-48bc-960c-223f0fe3eaeb_buggy.java
+++ b/tmp/81f53978-6163-4006-a769-7cbb4ed5c84b_fixed.java
@@ -1,52 +1,40 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
+        while (true) { // read headers until EOF
             int ch;
             int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
-                read++;
-                if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+            while ((ch = i.read()) != -1 && Character.isDigit(ch)) {
+                len = len * 10 + (ch - '0');
+            }
+            if (ch == -1) { // EOF
+                break;
+            }
+            if (ch != ' ') { // invalid header line
+                throw new IOException("Invalid pax header line");
+            }
+            if (len == 0) {
+                // No data beyond the space; move to next line
+                continue;
+            }
+            final byte[] data = new byte[len];
+            final int got = IOUtils.readFully(i, data);
+            if (got != len) {
+                throw new IOException("Failed to read Pax header. Expected " + len + " bytes, read " + got);
+            }
+            final String paxLine = new String(data, CharsetNames.UTF_8);
+            final int eqIndex = paxLine.indexOf('=');
+            if (eqIndex == -1) {
+                // No '=' found; treat entire line as keyword with empty value
+                final String keyword = paxLine.trim();
                 headers.remove(keyword);
             } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                final String keyword = paxLine.substring(0, eqIndex);
+                String value = paxLine.substring(eqIndex + 1);
+                // Remove trailing newline characters
+                value = value.replaceAll("[\r\n]+$", "");
                 headers.put(keyword, value);
             }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
         }
         return headers;
     }
\ No newline at end of file
