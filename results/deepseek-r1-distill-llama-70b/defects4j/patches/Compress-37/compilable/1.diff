diff --git a/tmp/60a1c9bc-8dbd-4415-b7b8-50769d139d21_buggy.java b/tmp/d31cb992-c639-481c-8e4f-bb94ceb6c1b8_fixed.java
index 4b7e1e4..aae6c7e 100644
--- a/tmp/60a1c9bc-8dbd-4415-b7b8-50769d139d21_buggy.java
+++ b/tmp/d31cb992-c639-481c-8e4f-bb94ceb6c1b8_fixed.java
@@ -1,52 +1,62 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
+    while(true){ // process each line
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLength = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+                // We have read the length, proceed to the keyword part
+                foundLength = true;
+                break;
+            }
+            if (ch == '\n') {
+                // Skip leading blank lines
+                len = 0;
+                read = 0;
+                foundLength = false;
+                break;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1) {
+            // End of stream
+            break;
+        }
+        if (!foundLength) {
+            // No length found after initial digit processing, line is malformed
+            continue;
+        }
+        int keywordStartRead = read;
         while((ch = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+            if (ch == '=') {
+                final byte[] keywordBytes = new byte[read - keywordStartRead];
+                i.reset();
+                i.skip(keywordStartRead);
+                i.read(keywordBytes);
+                final String keyword = new String(keywordBytes, CharsetNames.UTF_8);
+                int restLen = len - read;
+                if (restLen == 1) { // only '\n'
                     headers.remove(keyword);
-                            } else {
+                } else if (restLen > 0) {
+                    i.reset();
+                    i.skip(read);
                     final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                    if (IOUtils.readFully(i, rest) != restLen) {
+                        throw new IOException("Failed to read Paxheader. Expected " + restLen + " bytes.");
                     }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                    // Drop the trailing newline
+                    final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
                 break;
             }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
         }
     }
     return headers;
 }
