diff --git a/tmp/ecbc06e0-4dba-47e0-8b19-5f93f8274eab_buggy.java b/tmp/26342eab-d96c-4d62-989a-2b7d4f10f070_fixed.java
index c53ca2a..43f8679 100644
--- a/tmp/ecbc06e0-4dba-47e0-8b19-5f93f8274eab_buggy.java
+++ b/tmp/26342eab-d96c-4d62-989a-2b7d4f10f070_fixed.java
@@ -1,54 +1,62 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
             final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
+            if (tree.getCut() == null) {
                 // the instance covers the whole space
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
+                // determine if the region is empty
+                AttributeHandle<Euclidean2D, Object> handle = new AttributeHandle<>();
+                if ( FAILED == tree.getAttribute(handle) || tree.getAttribute(handle) == null || ((Region<Euclidean2D>) tree.getAttribute(handle)).isEmpty()) {
                     setSize(0);
                     setBarycenter(new Vector2D(0, 0));
+                } else {
+                    // the instance covers the whole space
+                    setSize(Double.POSITIVE_INFINITY);
+                    setBarycenter(Vector2D.NaN);
+                }
             }
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             // all loops are closed, we compute some integrals around the shape
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
+                    final double x = point.getX();
                     final double y0 = y1;
-                    x1 = point.getX();
-                    y1 = point.getY();
-                    final double factor = x0 * y1 - y0 * x1;
+                    final double y = point.getY();
+                    x1 = x;
+                    y1 = y;
+                    final double factor = x0 * y - y0 * x;
                     sum  += factor;
-                    sumX += factor * (x0 + x1);
-                    sumY += factor * (y0 + y1);
+                    sumX += factor * (x0 + x);
+                    sumY += factor * (y0 + y);
                 }
             }
 
             if (sum < 0) {
                 // the polygon as a finite outside surrounded by an infinite inside
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
                 setSize(sum / 2);
                 setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
             }
-
         }
-
     }
\ No newline at end of file
