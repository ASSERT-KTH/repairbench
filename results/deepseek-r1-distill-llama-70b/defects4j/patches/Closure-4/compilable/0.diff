diff --git a/tmp/4f1e6ba6-2d68-490e-bf86-0b07b2beb6d2_buggy.java b/tmp/ed5d400a-8a5a-48bd-8bca-d05e8a13b9f6_fixed.java
index d6a560a..44f867b 100644
--- a/tmp/4f1e6ba6-2d68-490e-bf86-0b07b2beb6d2_buggy.java
+++ b/tmp/ed5d400a-8a5a-48bd-8bca-d05e8a13b9f6_fixed.java
@@ -1,33 +1,29 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return this;
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
+      if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+      }
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+    }
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
