diff --git a/tmp/5bf1a09c-1ad7-4c6b-9af6-4a1515af64e6_buggy.java b/tmp/d199e4cc-bf35-4443-88be-851896550577_fixed.java
index d6a560a..9f6cf15 100644
--- a/tmp/5bf1a09c-1ad7-4c6b-9af6-4a1515af64e6_buggy.java
+++ b/tmp/d199e4cc-bf35-4443-88be-851896550577_fixed.java
@@ -1,33 +1,28 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Attempt to resolve via registry first
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
+        if (detectImplicitPrototypeCycle()) {
+            handleTypeCycle(t);
+            // If cycle detected, don't proceed further
+            return this;
+        }
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If not resolved via registry, try via properties
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
