diff --git a/tmp/b076bc8e-285c-4932-828a-e0223e162864_buggy.java b/tmp/666757d2-68dd-47e4-834b-73978742d513_fixed.java
index d6a560a..896d940 100644
--- a/tmp/b076bc8e-285c-4932-828a-e0223e162864_buggy.java
+++ b/tmp/666757d2-68dd-47e4-834b-73978742d513_fixed.java
@@ -1,33 +1,37 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Track cycles during resolution
+    if (resolving.containsKey(this)) {
+      handleTypeCycle(t);
+      return this;
+    }
+    resolving.put(this, true);
+
+    try {
       boolean resolved = resolveViaRegistry(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
 
       if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
             getReferencedType() : this;
       }
 
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
 
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
       return registry.isLastGeneration() ?
           getReferencedType() : this;
+    } finally {
+      resolving.remove(this);
+    }
   }
\ No newline at end of file
