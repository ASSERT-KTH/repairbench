diff --git a/tmp/5db814de-74de-48b3-9b43-768d8c5d6456_buggy.java b/tmp/de8d7696-1238-4f39-856e-625ddd94d850_fixed.java
index d6a560a..8bdb07c 100644
--- a/tmp/5db814de-74de-48b3-9b43-768d8c5d6456_buggy.java
+++ b/tmp/de8d7696-1238-4f39-856e-625ddd94d850_fixed.java
@@ -1,33 +1,27 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for cycles in the type graph using DetectingCompositeVisitor
+    try {
+      new DetectingCompositeVisitor(this, t, enclosing).visit();
+    } catch (CircularReferenceException e) {
+      handleTypeCycle(t);
+      return this;
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
-    super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
