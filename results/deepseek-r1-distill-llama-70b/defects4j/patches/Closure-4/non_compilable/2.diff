diff --git a/tmp/5ee0f679-b477-4744-8c8d-e0424d7a39b5_buggy.java b/tmp/7817b892-e4bc-4470-bd0c-d93a418532a9_fixed.java
index d6a560a..2e01068 100644
--- a/tmp/5ee0f679-b477-4744-8c8d-e0424d7a39b5_buggy.java
+++ b/tmp/7817b892-e4bc-4470-bd0c-d93a418532a9_fixed.java
@@ -1,33 +1,43 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+    // Mechanism to track visited types to detect cycles
+    Set<JSType> visited = new HashSet<>();
+    
+    boolean resolved = false;
+    try {
+        resolved = resolveViaRegistry(t, enclosing, visited);
+    } catch (CycleDetectedException e) {
         handleTypeCycle(t);
+        return this;
     }
     
     if (resolved) {
+        if (detectImplicitPrototypeCycle()) {
+            handleTypeCycle(t);
+        }
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
             getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    try {
+        resolveViaProperties(t, enclosing, visited);
+    } catch (CycleDetectedException e) {
+        handleTypeCycle(t);
+        return this;
+    }
+
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
 }
+
+//	resolveViaRegistry and resolveViaProperties now take a 'visited' set
\ No newline at end of file
