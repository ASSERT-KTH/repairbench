diff --git a/tmp/39c90767-7d7c-4824-9d21-dad2749d94d4_buggy.java b/tmp/2f160f4d-586a-45f8-a183-198b49c14c42_fixed.java
index d6a560a..907c9f8 100644
--- a/tmp/39c90767-7d7c-4824-9d21-dad2749d94d4_buggy.java
+++ b/tmp/2f160f4d-586a-45f8-a183-198b49c14c42_fixed.java
@@ -1,33 +1,28 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
   
   if (resolved) {
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+    }
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
-    resolveViaProperties(t, enclosing);
+  boolean viaPropertiesResolved = resolveViaProperties(t, enclosing);
+
+  if (viaPropertiesResolved) {
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
-
-    super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
+  }
+
+  super.resolveInternal(t, enclosing);
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
