diff --git a/tmp/e6b8184a-c306-4fd8-a140-dd9d9501506b_buggy.java b/tmp/0902a346-00dd-4d8e-9f0b-57637c4756f1_fixed.java
index 6e05e4b..657d8ee 100644
--- a/tmp/e6b8184a-c306-4fd8-a140-dd9d9501506b_buggy.java
+++ b/tmp/0902a346-00dd-4d8e-9f0b-57637c4756f1_fixed.java
@@ -1,51 +1,45 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+  boolean isUnnamedFunction = false;
   if (name == null) {
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
   }
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
   if (isUnnamedFunction) {
     // Old Rhino tagged the empty name node with the line number of the
     // declaration.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    // Set the character number for the empty name.
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
+    // Check if this is a function statement which requires a name.
+    if (functionNode.isStatement()) {
+      node.addError("unnamed function statement");
+    }
   }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
+  // The left paren's line number is derived from the function name if present.
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
-      node.addChildToBack(bodyNode);
+  nodeaddChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
