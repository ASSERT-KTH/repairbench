diff --git a/tmp/27f0964c-b1f3-4ce0-95ed-5a2caf2c511d_buggy.java b/tmp/a92359c1-33c4-42dd-8de3-e0e808fb5485_fixed.java
index cd412d2..9b3af7b 100644
--- a/tmp/27f0964c-b1f3-4ce0-95ed-5a2caf2c511d_buggy.java
+++ b/tmp/a92359c1-33c4-42dd-8de3-e0e808fb5485_fixed.java
@@ -1,76 +1,44 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
-        int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
-            df = _formatPlain;
-            if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+    // Check if we can directly use _formatISO8601
+    if (_formatISO8601 != null) {
+        try {
+            return _formatISO8601.parse(dateStr, pos);
+        } catch (Exception e) {
+            // Fallback to more lenient parsing
         }
-        } else if (c == 'Z') {
+    }
+
+    int len = dateStr.length();
+
+    // Check for presence of 'Z' indicating UTC with colon removed from timezone
+    if (dateStr.endsWith("Z")) {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
-            }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
-            }
-        }
+        dateStr = dateStr.substring(0, len - 1) + "+00:00";
+    } else if (dateStr.length() > 3 && Character.isLetter(dateStr.charAt(len - 3)) ||
+               (len > 1 && Character.isLetter(dateStr.charAt(len - 1)))){
+        // Timezone present but not in 'Z' form, reformat
+        int index = dateStr.lastIndexOf(':');
+        if (index != -1 && dateStr.substring(index).length() > 3) {
+            index = dateStr.length() - 3;
+        }
+        if (index == -1) {
+            index = dateStr.length() - 2;
+        }
+        String tzPart = dateStr.substring(index);
+        dateStr = dateStr.substring(0, index) + "GMT" + tzPart.substring(0, 3);
+    }
+
+    try {
+        df = DateFormat.getDateTimeInstance(DateFormat.ISO_8601, Calendar.LONG, _locale);
+        df.setTimeZone(_timezone);
         return df.parse(dateStr, pos);
+    } catch (Exception e) {
+        throw new IllegalArgumentException("Failed to parse ISO-8601 date: " + dateStr, e);
+    }
 }
\ No newline at end of file
