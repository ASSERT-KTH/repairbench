diff --git a/tmp/ff29c84a-4bb0-4cf3-ac27-f8e96aea7ac6_buggy.java b/tmp/ed68a399-8f96-426c-9c19-d31cdc45ad29_fixed.java
index cd412d2..7f45ea9 100644
--- a/tmp/ff29c84a-4bb0-4cf3-ac27-f8e96aea7ac6_buggy.java
+++ b/tmp/ed68a399-8f96-426c-9c19-d31cdc45ad29_fixed.java
@@ -1,76 +1,87 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
-        int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     DateFormat df;
+    int len = dateStr.length();
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
-            df = _formatPlain;
-            if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
-            }
-        } else if (c == 'Z') {
+    // Identify if the string has a timezone indicator
+    boolean hasTZ = hasTimeZone(dateStr);
+
+    // Determine if the string ends with a 'Z' (Zulu time)
+    if (len > 0 && dateStr.charAt(len - 1) == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        // Ensure milliseconds are present
+        if (!dateStr.substring(0, len -1).contains(".")) {
+            return parseWithMilliSplit(dateStr, pos, df);
         }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
+    } else if (hasTZ) {
+        // Check for optional milliseconds and append if necessary
+        int msStart = dateStr.lastIndexOf('.');
+        if (msStart == -1) {
+            // Check if seconds are present
+            if (dateStr.lastIndexOf(':') != -1) {
+                dateStr += ".000";
             }
-                // Milliseconds partial or missing; and even seconds are optional
+        } else if (msStart != -1) {
+            String msPart = dateStr.substring(msStart + 1);
+            if (msPart.length() < 3) {
+                // Pad with zeros to make it three digits
+                dateStr += "00".substring(msPart.length());
+            }
+        }
+
+        // Ensure the timezone offset has ':' or is in correct format
         len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+        int tzStart = dateStr.indexOf('-', len - 6);
+        if (tzStart == -1) {
+            tzStart = dateStr.indexOf('+', len - 6);
         }
+        if (tzStart != -1) {
+            String timePart = dateStr.substring(0, tzStart);
+            String tzOffset = dateStr.substring(tzStart);
+            if (tzOffset.length() == 3 && Character.isDigit(tzOffset.charAt(1))) {
+                tzOffset = tzOffset.charAt(0) + "0" + tzOffset.substring(1);
+                dateStr = timePart + tzOffset;
+            }
+        }
+
         df = _formatISO8601;
-                if (_formatISO8601 == null) {
+        if (df == null) {
             df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
         }
     } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
+        // Handle cases where no timezone is specified
+        // Append 'Z' to make it UTC if not present
+        if (len > 0 && dateStr.charAt(len - 1) != 'Z') {
+            dateStr += 'Z';
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            }
+        } else {
+            df = _formatPlain;
+            if (df == null) {
+                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+            }
+        }
+    }
+
+    return parseWithMilliSplit(df.format(new Date()), pos, df);
+}
+
+// Helper method to handle cases where milliseconds are split
+private Date parseWithMilliSplit(String dateStr, ParsePosition pos, DateFormat df) {
+    if (dateStr != null) {
+        int milliIndex = dateStr.indexOf('.');
+        if (milliIndex != -1) {
+            String[] parts = dateStr.split("\\.");
+            if (parts.length > 1) {
+                if (parts[1].length() < 3) {
+                    dateStr = parts[0] + "." + parts[1].padRight(3, '0');
+                }
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
