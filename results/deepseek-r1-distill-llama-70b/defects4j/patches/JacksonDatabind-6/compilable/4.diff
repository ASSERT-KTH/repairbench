diff --git a/tmp/3c3f3d1c-cda2-4bef-87c5-9e0bdeb9c672_buggy.java b/tmp/ecfaa991-54d8-45d4-ae80-a79f556a2f92_fixed.java
index cd412d2..1118e5e 100644
--- a/tmp/3c3f3d1c-cda2-4bef-87c5-9e0bdeb9c672_buggy.java
+++ b/tmp/ecfaa991-54d8-45d4-ae80-a79f556a2f92_fixed.java
@@ -1,76 +1,79 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
+    // Handle plain date case
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
+        // 'Zulu' time (GMT) - append milliseconds if missing
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        // Check if seconds are present and adjust milliseconds
+        int secondColon = dateStr.lastIndexOf(':');
+        if (secondColon > 0) {
+            int secondDot = dateStr.indexOf('.', secondColon);
+            if (secondDot == -1) {
+                // Missing milliseconds, add ".000"
+                dateStr += ".000";
+            }
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
+            // Check if time zone colon is present and remove it
+            int tzStart = dateStr.indexOf("Z", 0);
+            if (tzStart == -1) {
+                tzStart = dateStr.length() - 3;
+                c = dateStr.charAt(tzStart);
+                if (c == ':') {
+                    dateStr = dateStr.substring(0, tzStart) + dateStr.substring(tzStart + 1);
+                }
+            }
+            // Handle possible missing minutes in time zone
+            tzStart = dateStr.length() - 3;
+            c = dateStr.charAt(tzStart);
+            if (c == '+' || c == '-') {
+                int tzEnd = dateStr.length();
+                if (dateStr.charAt(tzStart + 1) != '0' || dateStr.charAt(tzStart + 2) != '0') {
+                    dateStr = dateStr.substring(0, tzStart + 3) + "00" + dateStr.substring(tzEnd);
+                }
+            }
+            // Check for seconds and milliseconds
+            if (dateStr.indexOf('T') != -1) {
+                int timePart = dateStr.lastIndexOf('T') + 1;
+                String[] parts = dateStr.substring(timePart).split(":");
+                if (parts.length < 3) {
+                    // Missing seconds, add :00
+                    dateStr += ":00";
+                }
+                if (!dateStr.contains(".")) {
+                    // Missing milliseconds, add .000
+                    int insertIndex = dateStr.lastIndexOf(':') + 1;
+                    if (insertIndex > 0 && Character.isDigit(dateStr.charAt(insertIndex))) {
+                        dateStr = dateStr.substring(0, insertIndex) + ".000" + dateStr.substring(insertIndex);
+                    }
                 }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+            // No time zone, append 'Z' and ensure milliseconds
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
