diff --git a/tmp/31de9fec-ed94-41f2-9a11-8f6d073b6cee_buggy.java b/tmp/6ad9a14e-2838-43c8-a96c-08172df34ff0_fixed.java
index cd412d2..5694732 100644
--- a/tmp/31de9fec-ed94-41f2-9a11-8f6d073b6cee_buggy.java
+++ b/tmp/6ad9a14e-2838-43c8-a96c-08172df34ff0_fixed.java
@@ -1,76 +1,70 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
-        int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
     DateFormat df;
+    int len = dateStr.length();
+    char c = (len > 0) ? dateStr.charAt(len - 1) : 0;
 
-        // [JACKSON-200]: need to support "plain" date...
+    // Check for plain date format without time
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
+        // Ensure milliseconds are present
+        if (dateStr.indexOf('.') == -1) {
             if (dateStr.charAt(len - 4) == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len - 1, ".000");
                 dateStr = sb.toString();
             }
+        }
     } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+        boolean hasTZ = hasTimeZone(dateStr);
+        if (hasTZ) {
+            int tzIndex = dateStr.indexOf('+');
+            if (tzIndex == -1) tzIndex = dateStr.indexOf('-');
+            if (tzIndex != -1 && tzIndex + 5 > len) {
+                // Missing minutes in timezone
                 dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
+            // Check for seconds and milliseconds
+            int secondsIndex = dateStr.indexOf(':', dateStr.indexOf('T') + 1);
+            if (secondsIndex == -1 || secondsIndex + 3 >= len) {
+                // Missing seconds and milliseconds
+                String[] parts = dateStr.split("T");
+                dateStr = parts[0] + "T00:00:00.000" + (dateStr.substring(tzIndex));
             } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+                String timePart = dateStr.substring(secondsIndex + 3);
+                if (timePart.length() < 4) {
+                    // Append milliseconds as needed
                     StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
+                    for (int i = 3 - timePart.length(); i > 0; i--) {
+                        sb.append('0');
+                    }
+                    dateStr = sb.toString() + 'Z';
+                }
             }
-                sb.append('Z');
-                dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            }
+        } else {
+            // Assume UTC if no timezone
+            dateStr += "Z";
+            df = _formatISO8601_z;
+            if (df == null) {
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
