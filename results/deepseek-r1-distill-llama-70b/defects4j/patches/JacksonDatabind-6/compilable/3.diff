diff --git a/tmp/492bbdc6-f841-4eff-a3ce-40190b8a2b66_buggy.java b/tmp/55bb52cf-2c71-4864-85e2-3d19979c5fd8_fixed.java
index cd412d2..57ddd8f 100644
--- a/tmp/492bbdc6-f841-4eff-a3ce-40190b8a2b66_buggy.java
+++ b/tmp/55bb52cf-2c71-4864-85e2-3d19979c5fd8_fixed.java
@@ -1,76 +1,99 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            if (c == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if (c == '+' || c == '-') {
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
+
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            boolean hasSeconds = false;
+            int secondsPos = dateStr.lastIndexOf(':');
+            if (secondsPos != -1) {
+                String timePart = dateStr.substring(secondsPos + 1);
+                if (timePart.matches(".*\\d{2}.*")) {
+                    hasSeconds = true;
+                }
+            }
+
+            if (!hasSeconds) {
+                StringBuilder sb = new StringBuilder(dateStr);
+                int insertPos = dateStr.indexOf('T') + 1;
+                sb.insert(insertPos, "00:00");
+                dateStr = sb.toString();
+            }
+
+            int millisecondsPos = dateStr.lastIndexOf('.');
+            if (millisecondsPos != -1) {
+                String msPart = dateStr.substring(millisecondsPos + 1);
+                if (msPart.length() < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    while (msPart.length() < 3) {
+                        sb.append('0');
+                        msPart = sb.substring(millisecondsPos + 1);
+                    }
+                    dateStr = sb.toString();
+                }
+            } else {
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                sb.append(".000");
                 dateStr = sb.toString();
             }
+
             df = _formatISO8601;
-                if (_formatISO8601 == null) {
+            if (df == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+            int timePart = dateStr.lastIndexOf('T');
+            if (timePart != -1) {
+                String timeStr = dateStr.substring(timePart + 1);
+                String[] parts = timeStr.split(":");
+                if (parts.length == 2) {
                     StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+                    sb.append(":00");
+                    dateStr = sb.toString();
+                }
+            } else {
+                dateStr += "T00:00";
+            }
+
+            StringBuilder sb = new StringBuilder(dateStr);
+            if (dateStr.indexOf('.') == -1) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
+
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
