diff --git a/tmp/03db1aaa-97aa-42de-b9d4-c1b88dd0bf27_buggy.java b/tmp/60d0461d-5a8a-4897-8284-212dc6850dc2_fixed.java
index 42b58d0..66f01e1 100644
--- a/tmp/03db1aaa-97aa-42de-b9d4-c1b88dd0bf27_buggy.java
+++ b/tmp/60d0461d-5a8a-4897-8284-212dc6850dc2_fixed.java
@@ -1,19 +1,31 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Class<?> rawType = (Class<?>) parameterizedType.getRawType();
+    if (processedTypes.contains(rawType)) {
+        return;
+    }
+    processedTypes.add(rawType);
+    TypeVariable[] typeParameters = rawType.getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+        // Recursive handling of nested parameterized types
+        if (actualTypeArgument instanceof ParameterizedType) {
+            registerTypeVariablesOn(actualTypeArgument);
         }
+        // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(actualTypeArgument) + ")" + "' }");
     }
+}
+
+// Field to track processed type parameters to prevent infinite recursion
+private final Set<Class<?>> processedTypes = new HashSet<>();
\ No newline at end of file
