diff --git a/tmp/248a1ae5-54dd-4bf5-862c-fa6820703309_buggy.java b/tmp/3c831425-59c6-4b58-a196-17204f124e89_fixed.java
index 99d6a44..d11981e 100644
--- a/tmp/248a1ae5-54dd-4bf5-862c-fa6820703309_buggy.java
+++ b/tmp/3c831425-59c6-4b58-a196-17204f124e89_fixed.java
@@ -1,58 +1,74 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
+        // Handle week-related fields to correctly set the base year
+        DurationField first = savedFields[0].iField.getDurationField();
+        if (isWeekField(first)) {
+            // Week is 1 and month is January, adjust base year
+            int week = savedFields[0].getValue();
+            if (week == 1 && isJanuary(savedFields)) {
+                saveField(DateTimeFieldType.year(), iDefaultYear - 1);
+            } else {
+                saveField(DateTimeFieldType.year(), iDefaultYear);
+            }
+            return computeMillis(resetFields, text);
+        }
+
+        // Original logic for month/day handling
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
+
+private boolean isWeekField(DurationField field) {
+    return field != null && field.getType() == DurationFieldType.weeks();
+}
+
+private boolean isJanuary(SavedField[] savedFields) {
+    // Check if month is January in any of the fields
+    for (SavedField field : savedFields) {
+        if (field.iField == DateTimeFieldType.monthOfYear() && field.getValue() == 1) {
+            return true;
+        }
+    }
+    return false;
+}
\ No newline at end of file
