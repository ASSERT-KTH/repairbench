diff --git a/tmp/92be5806-693e-4855-8b22-d8bdfe3a4dd7_buggy.java b/tmp/8b36fd3c-7fb0-4e88-b4c2-4d3687cb1900_fixed.java
index 99d6a44..c003418 100644
--- a/tmp/92be5806-693e-4855-8b22-d8bdfe3a4dd7_buggy.java
+++ b/tmp/8b36fd3c-7fb0-4e88-b4c2-4d3687cb1900_fixed.java
@@ -1,58 +1,81 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
+        // Ensure field order is correctly handled when week is involved
+        DurationField first = savedFields[0].iField.getDurationField();
+        if (first.equals(DurationFieldType.weeks()) || first.equals(DurationFieldType.week())) {
+            // Handle week-based parsing by setting the year after setting week and month
+            return computeWeekBasedFields(resetFields, text, savedFields, count);
+        }
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
+
+private long computeWeekBasedFields(boolean resetFields, String text, SavedField[] savedFields, int count) throws IllegalArgumentException {
+    long millis = iMillis;
+    try {
+        for (int i = 0; i < count; i++) {
+            millis = savedFields[i].set(millis, resetFields);
+        }
+        if (savedFields[0].iField.getDurationField().equals(DurationFieldType.weeks())) {
+            // Adjust the year if the week is part of the first week of the next year
+            int week = ((WeekOfYearField) savedFields[0].iField).get(millis);
+            if (week == 1) {
+                int year = ((YearOfEraField) savedFields[1].iField).get(millis);
+                // Check if the first day of the week is in the next year
+                LocalDate date = new LocalDate(millis, iChrono);
+                LocalDate firstDayOfYear = date.plusYears(year).weekOfWeekYear().getStart();
+                if (date.isBefore(firstDayOfYear)) {
+                    saveField(DateTimeFieldType.year(), year + 1);
+                    millis = savedFields[1].set(millis, resetFields);
+                }
+            }
+        }
+    } catch (IllegalFieldValueException e) {
+        if (text != null) {
+            e.prependMessage("Cannot parse \"" + text + '"');
+        }
+        throw e;
+    }
+    return millis;
+}
\ No newline at end of file
