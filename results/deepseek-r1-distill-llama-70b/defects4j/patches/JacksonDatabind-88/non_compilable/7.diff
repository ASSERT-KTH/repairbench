diff --git a/tmp/24a4d5b3-745f-434f-87e4-8913398e3cc1_buggy.java b/tmp/f49b96cd-3fbf-403a-a23d-b97c1eec69bf_fixed.java
index ae1f3a6..8218759 100644
--- a/tmp/24a4d5b3-745f-434f-87e4-8913398e3cc1_buggy.java
+++ b/tmp/f49b96cd-3fbf-403a-a23d-b97c1eec69bf_fixed.java
@@ -1,34 +1,49 @@
-    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
-    {
+protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {
     /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
      *    check if any generics info is added; and only then ask factory
      *    to do translation when necessary
      */
     TypeFactory tf = ctxt.getTypeFactory();
+    JavaType baseType = tf.constructSpecializedType(_baseType, null);
     if (id.indexOf('<') > 0) {
         // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
+        // 17-Aug-2017, tatu: Ensure assignment compatibility to prevent security issues.
         JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+        if (!_isCompatible(t, baseType, ctxt)) {
+            throw new JsonMappingException("Type " + t + " is not a subtype of " + baseType);
+        }
         return t;
     }
     Class<?> cls;
     try {
         cls = tf.findClass(id);
     } catch (ClassNotFoundException e) {
-            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
-            //   DeserializationContext, just playing it safe
+        // 24-May-2016, tatu: Ensure we handle DeserializationContext correctly.
         if (ctxt instanceof DeserializationContext) {
             DeserializationContext dctxt = (DeserializationContext) ctxt;
-                // First: we may have problem handlers that can deal with it?
-                return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
+            return dctxt.handleUnknownTypeId(baseType, id, this, "no such class found");
         }
-            // ... meaning that we really should never get here.
         return null;
     } catch (Exception e) {
         throw new IllegalArgumentException("Invalid type id '" + id + "' (for id type 'Id.class'): " + e.getMessage(), e);
     }
-        return tf.constructSpecializedType(_baseType, cls);
+    return tf.constructSpecializedType(baseType, cls);
+}
+
+private boolean _isCompatible(JavaType type, JavaType baseType, DatabindContext ctxt) throws IOException {
+    if (type == null || baseType == null) {
+        return false;
+    }
+    if (type.equals(baseType)) {
+        return true;
+    }
+    // Handle generic types if necessary
+    if (type.isContainerType()) {
+        JavaType contentType = type.getContentType();
+        JavaType baseContentType = baseType.getContentType();
+        if (contentType != null && baseContentType != null) {
+            return _isCompatible(contentType, baseContentType, ctxt);
+        }
+    }
+    return ctxt.getDeserializationContext().isCompatible(type, baseType);
 }
\ No newline at end of file
