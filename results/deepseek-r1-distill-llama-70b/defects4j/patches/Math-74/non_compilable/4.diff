diff --git a/tmp/9ad115f3-2c1f-4af9-af09-7c6f43987556_buggy.java b/tmp/955f91fc-3e73-43bd-8ed3-9b12ac1d0ab4_fixed.java
index eb491d5..b0b654c 100644
--- a/tmp/9ad115f3-2c1f-4af9-af09-7c6f43987556_buggy.java
+++ b/tmp/955f91fc-3e73-43bd-8ed3-9b12ac1d0ab4_fixed.java
@@ -1,170 +1,125 @@
-  /** {@inheritDoc} */
 @Override
 public double integrate(final FirstOrderDifferentialEquations equations,
                         final double t0, final double[] y0,
                         final double t, final double[] y)
 throws DerivativeException, IntegratorException {
 
     sanityChecks(equations, t0, y0, t, y);
     setEquations(equations);
     resetEvaluations();
+
     final boolean forward = t > t0;
 
     // create some internal working arrays
-    final int stages = c.length + 1;
+    final int n = y0.length;
+
+    // interpolation array is stored in a separate structure
     if (y != y0) {
-      System.arraycopy(y0, 0, y, 0, y0.length);
+        System.arraycopy(y0, 0, y, 0, n);
     }
-    final double[][] yDotK = new double[stages][y0.length];
-    final double[] yTmp = new double[y0.length];
 
-    // set up an interpolator sharing the integrator arrays
-    AbstractStepInterpolator interpolator;
-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
-      rki.reinitialize(this, yTmp, yDotK, forward);
-      interpolator = rki;
-    } else {
-      interpolator = new DummyStepInterpolator(yTmp, forward);
-    }
+    // set up the integrator
+    final AdamsMoultonStepInterpolator interpolator =
+        (AdamsMoultonStepInterpolator) prototype.copy();
+    interpolator.reinitialize(this, y, forward);
     interpolator.storeTime(t0);
 
     // set up integration control objects
-    stepStart         = t0;
-    double  hNew      = 0;
-    boolean firstTime = true;
+    mainLoop:
+    while (true) {
+
+        interpolator.shift();
+
+        // the step has been accepted
+        final double t1 = stepStart + stepSize;
+        final boolean lastStep = t1 == t;
+        final boolean stop   = manager.stop();
+        if (stop || lastStep) {
+
+            if ( (forward && t1 >= t) || (!forward && t1 <= t) ) {
+                stepSize = t - stepStart;
+            }
+
+            // update interpolator after step
+            interpolator.storeTime(t1);
+
+            // provide the step data to the step handler
             for (StepHandler handler : stepHandlers) {
-        handler.reset();
+                handler.handleStep(interpolator, true);
             }
-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
-    boolean lastStep = false;
 
-    // main integration loop
-    while (!lastStep) {
+            // return the last time
+            final double stopTime = t1;
 
             interpolator.shift();
+            interpolator.storeTime(stopTime);
 
-      double error = 0;
-      for (boolean loop = true; loop;) {
+            resetInternalState();
+            return stopTime;
 
-        if (firstTime || !fsal) {
-          // first stage
-          computeDerivatives(stepStart, y, yDotK[0]);
-        }
-
-        if (firstTime) {
-          final double[] scale;
-          if (vecAbsoluteTolerance == null) {
-              scale = new double[y0.length];
-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);
         } else {
-              scale = vecAbsoluteTolerance;
-            }
-          hNew = initializeStep(equations, forward, getOrder(), scale,
-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);
-          firstTime = false;
-        }
-
-        stepSize = hNew;
-
-        // next stages
-        for (int k = 1; k < stages; ++k) {
-
-          for (int j = 0; j < y0.length; ++j) {
-            double sum = a[k-1][0] * yDotK[0][j];
-            for (int l = 1; l < k; ++l) {
-              sum += a[k-1][l] * yDotK[l][j];
-            }
-            yTmp[j] = y[j] + stepSize * sum;
-          }
-
-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
-
-        }
-
-        // estimate the state at the end of the step
-        for (int j = 0; j < y0.length; ++j) {
-          double sum    = b[0] * yDotK[0][j];
-          for (int l = 1; l < stages; ++l) {
-            sum    += b[l] * yDotK[l][j];
-          }
-          yTmp[j] = y[j] + stepSize * sum;
-        }
-
-        // estimate the error at the end of the step
-        error = estimateError(yDotK, y, yTmp, stepSize);
-        if (error <= 1.0) {
 
             // discrete events handling
-          interpolator.storeTime(stepStart + stepSize);
             if (manager.evaluateStep(interpolator)) {
-              final double dt = manager.getEventTime() - stepStart;
-              if (Math.abs(dt) <= Math.ulp(stepStart)) {
+                final double eventTime = manager.getEventTime();
+                final double dt       = (forward)
+                                      ? eventTime - stepStart
+                                      : stepStart - eventTime;
+                if (dt == 0) {
                     // rejecting the step would lead to a too small next step, we accept it
-                  loop = false;
+                    stepSize = forward ? t - stepStart : stepStart - t;
                 } else {
-                  // reject the step to match exactly the next switch time
-                  hNew = dt;
+                    stepSize = dt;
                 }
-          } else {
-            // accept the step
-            loop = false;
             }
 
-        } else {
-          // reject the step and attempt to reduce error by stepsize control
-          final double factor =
-              Math.min(maxGrowth,
-                       Math.max(minReduction, safety * Math.pow(error, exp)));
-          hNew = filterStep(stepSize * factor, forward, false);
+            if (stepStart + stepSize == stepStart) {
+                // Rejecting the step would lead to a too small next step, we accept it
+                break mainLoop;
             }
 
+            // Check if the remaining time is smaller than the step size
+            if (forward) {
+                if (t - stepStart > stepSize) {
+                    stepSize = t - stepStart;
+                }
+            } else {
+                if (stepStart - t > stepSize) {
+                    stepSize = stepStart - t;
+                }
             }
 
-      // the step has been accepted
-      final double nextStep = stepStart + stepSize;
-      System.arraycopy(yTmp, 0, y, 0, y0.length);
-      manager.stepAccepted(nextStep, y);
-      lastStep = manager.stop();
+            try {
+                // perform one step of integration
+                final double[] yDot0 = computeDerivatives(stepStart, y);
+                final double[] y1    = performedStep(forward, stepSize, y, yDot0);
+                manager.stepAccepted(stepStart + stepSize, y1);
+            } catch (DerivativeException ex) {
+                if (ex iteratingMinStep()) {
+                    // processing min step
+                    break mainLoop;
+                } else {
+                    throw ex;
+                }
+            }
 
             // provide the step data to the step handler
-      interpolator.storeTime(nextStep);
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, lastStep);
             }
-      stepStart = nextStep;
 
-      if (fsal) {
-        // save the last evaluation for the next step
-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
+            // check if we have reached the target time
+            if (stepStart == t) {
+                break mainLoop;
             }
 
-      if (manager.reset(stepStart, y) && ! lastStep) {
-        // some event handler has triggered changes that
-        // invalidate the derivatives, we need to recompute them
-        computeDerivatives(stepStart, y, yDotK[0]);
-      }
-
-      if (! lastStep) {
-        // in some rare cases we may get here with stepSize = 0, for example
-        // when an event occurs at integration start, reducing the first step
-        // to zero; we have to reset the step to some safe non zero value
-          stepSize = filterStep(stepSize, forward, true);
+            // update our data for next step
+            stepStart += forward ? stepSize : -stepSize;
+            System.arraycopy(y1, 0, y, 0, n);
 
-        // stepsize control for next step
-        final double factor = Math.min(maxGrowth,
-                                       Math.max(minReduction,
-                                                safety * Math.pow(error, exp)));
-        final double  scaledH    = stepSize * factor;
-        final double  nextT      = stepStart + scaledH;
-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
-        hNew = filterStep(scaledH, forward, nextIsLast);
         }
 
     }
 
-    final double stopTime = stepStart;
-    resetInternalState();
-    return stopTime;
-
+    return stepStart;
 }
\ No newline at end of file
