diff --git a/tmp/4a9ee82a-1981-4b95-99f3-e7ea2b4a3ff8_buggy.java b/tmp/239a634b-73ac-4a71-a93d-6da3ed089084_fixed.java
index b2db1d6..f704ec9 100644
--- a/tmp/4a9ee82a-1981-4b95-99f3-e7ea2b4a3ff8_buggy.java
+++ b/tmp/239a634b-73ac-4a71-a93d-6da3ed089084_fixed.java
@@ -1,29 +1,27 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+    List<AnnotatedMethod> mixinMethods = new ArrayList<>();
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
-                if (am != null) {
-                    _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
+            if (am == null) {
+                AnnotatedMethod added = _constructMethod(m);
+                if (!mixinMethods.contains(added)) {
+                    mixinMethods.add(added);
+                }
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                _addMixUnders(m, am);
             }
         }
     }
+    for (AnnotatedMethod method : mixinMethods) {
+        mixIns.add(method);
+    }
 }
\ No newline at end of file
