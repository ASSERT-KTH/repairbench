diff --git a/tmp/d47a089f-f08f-4055-8460-68689142daf2_buggy.java b/tmp/ed9887ff-b165-45de-a9c6-f7d517dd061c_fixed.java
index 08a41cf..d2c083d 100644
--- a/tmp/d47a089f-f08f-4055-8460-68689142daf2_buggy.java
+++ b/tmp/ed9887ff-b165-45de-a9c6-f7d517dd061c_fixed.java
@@ -1,12 +1,41 @@
  /**
  * Overloaded version of {@link #readValue(InputStream)}.
  */
 public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)
     throws IOException, JsonProcessingException
 {
     if (_dataFormatReaders != null) {
         return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);
     }
-        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),
-                true));
+
+    String encoding = detectCharset(src, offset, length);
+
+    JsonParser p = _parserFactory.createParser(src, offset, length, encoding);
+    p = _considerFilter(p, true);
+
+    return _bindAndReadValues(p);
+}
+
+private String detectCharset(byte[] bytes, int offset, int length) throws IOException {
+    if (length == 0) {
+        return "UTF-8";
+    }
+
+    int bomLength = Math.min(4, length);
+    byte[] bom = new byte[bomLength];
+    System.arraycopy(bytes, offset, bom, 0, bomLength);
+
+    if (bomLength >= 3 && bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+        return "UTF-8";
+    } else if (bomLength >= 2 && bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+        return "UTF-16BE";
+    } else if (bomLength >= 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+        return "UTF-16LE";
+    } else if (bomLength >= 4 && bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+        return "UTF-32BE";
+    } else if (bomLength >= 4 && bom[0] == (byte) 0xFF && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == 0x00) {
+        return "UTF-32LE";
+    } else {
+        return "UTF-8";
+    }
 }
\ No newline at end of file
