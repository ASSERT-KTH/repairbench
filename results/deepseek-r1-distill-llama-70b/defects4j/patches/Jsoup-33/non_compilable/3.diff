diff --git a/tmp/e95e4b43-80ba-49f0-a39e-d3081d9815d5_buggy.java b/tmp/2e6fefd3-07ad-4be5-9879-6841e8077158_fixed.java
index dc93be3..fa1e87b 100644
--- a/tmp/e95e4b43-80ba-49f0-a39e-d3081d9815d5_buggy.java
+++ b/tmp/2e6fefd3-07ad-4be5-9879-6841e8077158_fixed.java
@@ -1,14 +1,16 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (elIsSelfClosing(Tag.valueOf(startTag.name()))) { // Check if the tag is a void element
             Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));
             return el;
+        } else {
+            // Treat as a regular tag if it's not a void element and not self-closing according to the spec
+            return insert(startTag);
+        }
     }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
