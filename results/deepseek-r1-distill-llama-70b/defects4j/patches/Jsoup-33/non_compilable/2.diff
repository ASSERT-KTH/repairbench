diff --git a/tmp/4403e92e-e180-4727-9e2a-9da184eb9a0a_buggy.java b/tmp/f7d3b6c2-355f-4c29-8b9a-0d645124b047_fixed.java
index dc93be3..c2c96ac 100644
--- a/tmp/4403e92e-e180-4727-9e2a-9da184eb9a0a_buggy.java
+++ b/tmp/f7d3b6c2-355f-4c29-8b9a-0d645124b047_fixed.java
@@ -1,14 +1,21 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        Tag tag = Tag.valueOf(startTag.name());
+        if (tag.isSelfClosing() || tag instanceof UnknownTag) {
+            // Known void or unknown tags are treated as empty
             Element el = insertEmpty(startTag);
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));
             return el;
+        } else {
+            // Known non-void tag: treat as non-empty
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            return el;
+        }
     }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
