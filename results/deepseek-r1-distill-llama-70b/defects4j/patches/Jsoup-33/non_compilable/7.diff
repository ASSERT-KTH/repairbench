diff --git a/tmp/4819a4ce-6aaa-429b-a056-76375d7a0190_buggy.java b/tmp/aaaaf3f6-d2d2-4c3a-af33-c58feba9de22_fixed.java
index dc93be3..5df584a 100644
--- a/tmp/4819a4ce-6aaa-429b-a056-76375d7a0190_buggy.java
+++ b/tmp/aaaaf3f6-d2d2-4c3a-af33-c58feba9de22_fixed.java
@@ -1,14 +1,23 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (isKnownEmptyTag(startTag.name())) {
             Element el = insertEmpty(startTag);
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));
             return el;
+        } else {
+            Element el = insertEmpty(startTag);
+            stack.add(el);
+            return el;
+        }
     }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
+
+boolean isKnownEmptyTag(String tagName) {
+    String[] knownSelfClosingTags = {"img", "br", "hr", "meta", "link", "input", "area", "base", "param"};
+    return Arrays.asList(knownSelfClosingTags).contains(tagName.toLowerCase());
+}
\ No newline at end of file
