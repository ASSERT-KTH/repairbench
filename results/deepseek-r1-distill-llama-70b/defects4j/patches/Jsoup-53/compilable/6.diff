diff --git a/tmp/ce5e26cc-273d-40f9-a313-24fb41670468_buggy.java b/tmp/8f983845-da2a-4621-83e8-b11b3f144ae0_fixed.java
index fecb896..e688d9f 100644
--- a/tmp/ce5e26cc-273d-40f9-a313-24fb41670468_buggy.java
+++ b/tmp/8f983845-da2a-4621-83e8-b11b3f144ae0_fixed.java
@@ -1,34 +1,59 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inString = false;
+    boolean escapeNext = false;
+    char stringDelimiter = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+
+        if (escapeNext) {
+            // If last was escape, treat current char as literal
+            last = c;
+            escapeNext = false;
+            continue;
+        }
+
+        if (c == '\\' ) {
+            escapeNext = true;
+            last = c;
+            continue;
+        }
+
+        if (inString) {
+            if (c == stringDelimiter) {
+                inString = false;
+                stringDelimiter = 0;
+            }
+            last = c;
+            continue;
+        }
+
+        if (c == '\'' || c == '"') {
+            inString = true;
+            stringDelimiter = c;
+            last = c;
+            continue;
+        }
+
+        if (last != '\\') { // Only process open and close if not escaped
+            if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close)
                 depth--;
         }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        if (depth > 0)
+            end = pos; // Don't include the outermost pair
+
         last = c;
     } while (depth > 0);
+
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
