diff --git a/tmp/58c529da-c21e-4352-b8d3-ad5248aa50fc_buggy.java b/tmp/98b9291a-b925-487c-98f4-6149662712cb_fixed.java
index fecb896..5a594ee 100644
--- a/tmp/58c529da-c21e-4352-b8d3-ad5248aa50fc_buggy.java
+++ b/tmp/98b9291a-b925-487c-98f4-6149662712cb_fixed.java
@@ -1,34 +1,43 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inSingleQuote = false;
+    boolean inDoubleQuote = false;
+    boolean escaped = false;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        if (escaped) {
+            escaped = false;
+        } else if (c == '\\') {
+            escaped = true;
+        } else if (c == '\'' && !inDoubleQuote) {
+            inSingleQuote = !inSingleQuote;
+        } else if (c == '"' && !inSingleQuote) {
+            inDoubleQuote = !inDoubleQuote;
+        }
+
+        if (!inSingleQuote && !inDoubleQuote) {
+            if (c != null) {
+                if (c == open) {
                     depth++;
-                    if (start == -1)
+                    if (start == -1) {
                         start = pos;
                     }
-                else if (c.equals(close))
+                } else if (c == close) {
                     depth--;
                 }
+            }
+        }
 
-            if (depth > 0 && last != 0)
+        if (depth > 0 && !inSingleQuote && !inDoubleQuote && !escaped) {
             end = pos; // don't include the outer match pair in the return
-            last = c;
+        }
+        last = c != null ? c : 0;
     } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+    return (end >= 0) ? queue.substring(start, end + 1) : "";
 }
\ No newline at end of file
