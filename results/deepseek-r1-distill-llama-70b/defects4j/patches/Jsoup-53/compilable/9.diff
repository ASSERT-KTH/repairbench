diff --git a/tmp/f87ba7e9-13d8-4d6b-af73-e95bacddd016_buggy.java b/tmp/b0936a1b-eadf-4d2a-bd27-851206adc296_fixed.java
index fecb896..4bab5ac 100644
--- a/tmp/f87ba7e9-13d8-4d6b-af73-e95bacddd016_buggy.java
+++ b/tmp/b0936a1b-eadf-4d2a-bd27-851206adc296_fixed.java
@@ -1,34 +1,52 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inQuotes = false;
+        char currentQuote = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+
+            if (last == ESC) {
+                // Treat current character as literal, not part of open/close handling
+                last = c;
+                continue;
+            }
+
+            if (c == '\'' || c == '"') {
+                if (inQuotes) {
+                    if (currentQuote == c) {
+                        inQuotes = false;
+                        currentQuote = 0;
+                    }
+                } else {
+                    inQuotes = true;
+                    currentQuote = c;
+                }
+                last = c;
+                continue;
+            }
+
+            if (inQuotes) {
+                // Skip open/close handling inside quotes
+                last = c;
+                continue;
+            }
+
+            if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close)
                 depth--;
-            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            if (depth > 0) {
+                end = pos;
+            }
             last = c;
         } while (depth > 0);
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
