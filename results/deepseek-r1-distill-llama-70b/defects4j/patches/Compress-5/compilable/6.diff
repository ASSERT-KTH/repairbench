diff --git a/tmp/950af7ba-b237-4cd6-ba64-c1512e366b96_buggy.java b/tmp/469a5217-b5ae-4929-8031-3de7b18586a7_fixed.java
index d907b39..a4cb932 100644
--- a/tmp/950af7ba-b237-4cd6-ba64-c1512e366b96_buggy.java
+++ b/tmp/469a5217-b5ae-4929-8031-3de7b18586a7_fixed.java
@@ -1,56 +1,70 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
 
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+    // Check if all bytes of the current entry have been read
+    if (readBytesOfEntry >= current.getSize()) {
+        return -1;
+    }
+
+    if (start < 0 || length < 0 || start + length > buffer.length) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
     if (current.getMethod() == ZipArchiveOutputStream.STORED) {
         int csize = (int) current.getSize();
-                if (readBytesOfEntry >= csize) {
+        int remaining = csize - readBytesOfEntry;
+        if (remaining <= 0) {
             return -1;
         }
         if (offsetInBuffer >= lengthOfLastRead) {
             offsetInBuffer = 0;
             if ((lengthOfLastRead = in.read(buf)) == -1) {
-                        return -1;
+                throw new IOException("Truncated ZIP file");
             }
             count(lengthOfLastRead);
             bytesReadFromStream += lengthOfLastRead;
         }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
-                if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
-                }
+        int toRead = Math.min(length, Math.min(remaining, lengthOfLastRead - offsetInBuffer));
         System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
         offsetInBuffer += toRead;
         readBytesOfEntry += toRead;
         crc.update(buffer, start, toRead);
+        if (readBytesOfEntry >= csize) {
+            return -1;
+        }
         return toRead;
     }
+
     if (inf.needsInput()) {
+        if (current.getSize() != -1) {
+            int remaining = (int) (current.getSize() - readBytesOfEntry);
+            if (remaining <= 0) {
+                return -1;
+            }
+        }
         fill();
         if (lengthOfLastRead > 0) {
             bytesReadFromStream += lengthOfLastRead;
         }
     }
-            int read = 0;
+
     try {
-                read = inf.inflate(buffer, start, length);
-            } catch (DataFormatException e) {
-                throw new ZipException(e.getMessage());
-            }
-            if (read == 0 && inf.finished()) {
+        int read = inf.inflate(buffer, start, length);
+        if (read <= 0) {
+            if (inf.finished()) {
                 return -1;
+            } else {
+                throw new IOException("Truncated ZIP file");
+            }
         }
         crc.update(buffer, start, read);
         return read;
+    } catch (DataFormatException e) {
+        throw new ZipException(e.getMessage());
     }
-        throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
