diff --git a/tmp/c04aa0be-ade9-4796-98b2-900734c2d29d_buggy.java b/tmp/a372e1b6-c00e-4b92-8dda-e21cafcfa718_fixed.java
index d907b39..41d0498 100644
--- a/tmp/c04aa0be-ade9-4796-98b2-900734c2d29d_buggy.java
+++ b/tmp/a372e1b6-c00e-4b92-8dda-e21cafcfa718_fixed.java
@@ -1,56 +1,61 @@
     public int read(byte[] buffer, int start, int length) throws IOException {
         if (closed) {
             throw new IOException("The stream is closed");
         }
         if (inf.finished() || current == null) {
             return -1;
         }
 
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+        // Check if we've exhausted the current entry's data
+        if (readBytesOfEntry >= current.getSize()) {
+            return -1;
+        }
+
+        // Check for ArrayIndexOutOfBoundsException conditions
+        if (start < 0 || length < 0 || buffer.length < start + length) {
+            throw new ArrayIndexOutOfBoundsException();
+        }
+
         if (current.getMethod() == ZipArchiveOutputStream.STORED) {
             int csize = (int) current.getSize();
             if (readBytesOfEntry >= csize) {
                 return -1;
             }
             if (offsetInBuffer >= lengthOfLastRead) {
                 offsetInBuffer = 0;
                 if ((lengthOfLastRead = in.read(buf)) == -1) {
                     return -1;
                 }
                 count(lengthOfLastRead);
                 bytesReadFromStream += lengthOfLastRead;
             }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
-                if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
-                }
+            int toRead = Math.min(length, Math.min(csize - readBytesOfEntry, lengthOfLastRead - offsetInBuffer));
+            if (toRead > 0) {
                 System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
                 offsetInBuffer += toRead;
                 readBytesOfEntry += toRead;
                 crc.update(buffer, start, toRead);
                 return toRead;
             }
+        } else {
             if (inf.needsInput()) {
                 fill();
                 if (lengthOfLastRead > 0) {
                     bytesReadFromStream += lengthOfLastRead;
                 }
             }
             int read = 0;
             try {
                 read = inf.inflate(buffer, start, length);
             } catch (DataFormatException e) {
                 throw new ZipException(e.getMessage());
             }
             if (read == 0 && inf.finished()) {
                 return -1;
             }
             crc.update(buffer, start, read);
+            readBytesOfEntry += read;
             return read;
         }
-        throw new ArrayIndexOutOfBoundsException();
+        return -1;
     }
\ No newline at end of file
