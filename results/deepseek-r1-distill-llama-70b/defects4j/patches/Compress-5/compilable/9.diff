diff --git a/tmp/e274a532-9d46-4411-be9f-2f3637e8eef3_buggy.java b/tmp/6d4ad68a-7863-413d-b298-49d521dec0be_fixed.java
index d907b39..b4a04fc 100644
--- a/tmp/e274a532-9d46-4411-be9f-2f3637e8eef3_buggy.java
+++ b/tmp/6d4ad68a-7863-413d-b298-49d521dec0be_fixed.java
@@ -1,56 +1,54 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
 
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+    // Check if the buffer is valid
+    if (buffer == null) {
+        throw new NullPointerException("Buffer is null");
+    }
+    if (start < 0 || length < 0 || start + length > buffer.length) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
     if (current.getMethod() == ZipArchiveOutputStream.STORED) {
         int csize = (int) current.getSize();
         if (readBytesOfEntry >= csize) {
             return -1;
         }
         if (offsetInBuffer >= lengthOfLastRead) {
             offsetInBuffer = 0;
             if ((lengthOfLastRead = in.read(buf)) == -1) {
-                        return -1;
+                throw new IOException("Truncated ZIP file");
             }
             count(lengthOfLastRead);
             bytesReadFromStream += lengthOfLastRead;
         }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
-                if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
-                }
+        int toRead = Math.min(length, Math.min(lengthOfLastRead - offsetInBuffer, csize - readBytesOfEntry));
         System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
         offsetInBuffer += toRead;
         readBytesOfEntry += toRead;
         crc.update(buffer, start, toRead);
         return toRead;
     }
     if (inf.needsInput()) {
         fill();
         if (lengthOfLastRead > 0) {
             bytesReadFromStream += lengthOfLastRead;
         }
     }
-            int read = 0;
+    int read;
     try {
         read = inf.inflate(buffer, start, length);
     } catch (DataFormatException e) {
         throw new ZipException(e.getMessage());
     }
     if (read == 0 && inf.finished()) {
         return -1;
     }
     crc.update(buffer, start, read);
     return read;
 }
\ No newline at end of file
-        throw new ArrayIndexOutOfBoundsException();
-    }
