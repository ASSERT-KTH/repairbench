diff --git a/tmp/13e9a5a7-3a39-4124-b3db-e50929b1b169_buggy.java b/tmp/14a9608c-f08e-44ce-b2af-69876522de31_fixed.java
index c4b260c..f2ecb7c 100644
--- a/tmp/13e9a5a7-3a39-4124-b3db-e50929b1b169_buggy.java
+++ b/tmp/14a9608c-f08e-44ce-b2af-69876522de31_fixed.java
@@ -1,51 +1,46 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                    if (foundCharset == null && meta.hasAttr("charset")) {
-                        try {
-                            if (Charset.isSupported(meta.attr("charset"))) {
-                                foundCharset = meta.attr("charset");
-                            }
-                        } catch (IllegalCharsetNameException e) {
-                            foundCharset = null;
-                        }
-                    }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+    // Check for BOM and determine charset
+    if (charsetName == null) {
+        byte[] bytes = new byte[byteData.remaining()];
+        byteData.get(bytes);
         byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+
+        Charset detectedCharset = null;
+        if (bytes.length >= 3 && bytes[0] == (byte) 0xEF && bytes[1] == (byte) 0xBB && bytes[2] == (byte) 0xBF) {
+            detectedCharset = StandardCharsets.UTF_8;
+            byteData.position(3);
+        } else if (bytes.length >= 2 && bytes[0] == (byte) 0xFE && bytes[1] == (byte) 0xFF) {
+            detectedCharset = Charset.forName("UTF-16BE");
+            byteData.position(2);
+        } else if (bytes.length >= 2 && bytes[0] == (byte) 0xFF && bytes[1] == (byte) 0xFE) {
+            detectedCharset = Charset.forName("UTF-16LE");
+            byteData.position(2);
         }
+
+        if (detectedCharset != null) {
+            charsetName = detectedCharset.name();
+            docData = detectedCharset.decode(byteData).toString();
+        } else {
+            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
+
+    // Parse document or re-parse if needed
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+        if (charsetName != null) {
             doc.outputSettings().charset(charsetName);
         }
+    }
+
+    // Additional handling if needed based on parsing
+    // This section can be adjusted as per specific requirements
+
     return doc;
 }
\ No newline at end of file
