diff --git a/tmp/3dcd6f78-9ad8-4e28-a32a-a545e590aeb0_buggy.java b/tmp/0fe82cda-9881-4411-bf50-d0e506d86140_fixed.java
index c4b260c..e5372b0 100644
--- a/tmp/3dcd6f78-9ad8-4e28-a32a-a545e590aeb0_buggy.java
+++ b/tmp/0fe82cda-9881-4411-bf50-d0e506d86140_fixed.java
@@ -1,51 +1,60 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    if (charsetName == null) { // Determine charset from meta or BOM
+        // Check for BOM
+        byte[] bytes = new byte[byteData.remaining()];
+        byteData.get(bytes);
+        String detectedCharset = null;
+        // Check for UTF-8 BOM
+        if (bytes.length > 0 && bytes[0] == (byte) 0xEF && bytes[1] == (byte) 0xBB && bytes[2] == (byte) 0xBF) {
+            detectedCharset = "UTF-8";
+            // Skip BOM when decoding
+            docData = Charset.forName(detectedCharset).decode(ByteBuffer.wrap(bytes, 3, bytes.length - 3));
+        } else {
+            // Decode with default charset for now
+            docData = Charset.forName(defaultCharset).decode(ByteBuffer.wrap(bytes));
+        }
         doc = parser.parseInput(docData, baseUri);
+        
+        //Look for meta tags for charset
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+        if (meta != null) {
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (foundCharset != null && !foundCharset.equals(detectedCharset, StringComparison.OrdinalIgnoreCase)) {
+                // Re-decode with detected charset from meta
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                docData = Charset.forName(foundCharset).decode(byteData);
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
+        // If no charset found from meta tags, use detected BOM charset or default
+        if (foundCharset == null && detectedCharset != null) {
+            charsetName = detectedCharset;
+        } else {
             charsetName = defaultCharset;
         }
+    } else { // use specified charset
+        Validate.notEmpty(charsetName, "Must set charset arg");
+        docData = Charset.forName(charsetName).decode(byteData);
+    }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
