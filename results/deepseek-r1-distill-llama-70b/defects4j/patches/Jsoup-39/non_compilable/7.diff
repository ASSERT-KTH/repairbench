diff --git a/tmp/9c24afd9-2138-4e75-ba69-518897abcf39_buggy.java b/tmp/814ad7a8-a02e-4e6b-9496-1eaaa60ae31d_fixed.java
index c4b260c..e9ff87c 100644
--- a/tmp/9c24afd9-2138-4e75-ba69-518897abcf39_buggy.java
+++ b/tmp/814ad7a8-a02e-4e6b-9496-1eaaa60ae31d_fixed.java
@@ -1,51 +1,49 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                    if (foundCharset == null && meta.hasAttr("charset")) {
+    if (charsetName == null) { 
+        // Attempt to detect charset from HTML meta tags
+        String detectedCharset;
         try {
-                            if (Charset.isSupported(meta.attr("charset"))) {
-                                foundCharset = meta.attr("charset");
-                            }
-                        } catch (IllegalCharsetNameException e) {
-                            foundCharset = null;
-                        }
-                    }
+            detectedCharset = detectHtmlCharset(byteData);
+            if (detectedCharset != null) {
+                charsetName = detectedCharset;
             } else {
-                    foundCharset = meta.attr("charset");
+                charsetName = defaultCharset;
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+        } catch (Exception e) {
+            charsetName = defaultCharset;
         }
+
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+
+        // Check for UTF-8 BOM
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            docData = docData.substring(1);
         }
-        } else { // specified by content type header (or by user on file load)
+
+        doc = parser.parseInput(docData, baseUri);
+        doc.outputSettings().charset(charsetName);
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
         }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static String detectHtmlCharset(ByteBuffer byteData) {
+    byte[] bytes = new byte[byteData.remaining()];
+    byteData.get(bytes);
+    byteData.rewind();
+
+    try (InputStream is = new ByteArrayInputStream(bytes)) {
+        return new InputStreamCharsetDetector(is).detect();
+    } catch (Exception e) {
+        return null;
+    }
+}
\ No newline at end of file
