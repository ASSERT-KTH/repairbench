diff --git a/tmp/dfe7a6a2-93d1-4b0f-834d-c223c3e9f5fd_buggy.java b/tmp/af6f9268-8132-4213-a999-17eacd19ae60_fixed.java
index c4b260c..b508c73 100644
--- a/tmp/dfe7a6a2-93d1-4b0f-834d-c223c3e9f5fd_buggy.java
+++ b/tmp/af6f9268-8132-4213-a999-17eacd19ae60_fixed.java
@@ -1,51 +1,66 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // Decode with default charset
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        
+        // Check for UTF-8 BOM immediately after decoding
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            // BOM present, strip it and set charset
+            docData = docData.substring(1);
+            charsetName = defaultCharset;
+        } else {
+            // Look for meta tags if no BOM
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    doc = null; // Force re-parse after re-decoding
                 }
             }
+        }
+
+        // After handling BOM and meta, parse if doc is null or re-parse if needed
+        if (doc == null) {
+            // Before parsing, ensure we don't have a BOM in the final docData
+            if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                docData = docData.substring(1);
+            }
+            doc = parser.parseInput(docData, baseUri);
+            doc.outputSettings().charset(charsetName);
+        }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Check for UTF-8 BOM in case specified charset is not UTF-8 but data has BOM
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
             docData = docData.substring(1);
+            // If BOM found, override charsetName to UTF-8 as it takes precedence
             charsetName = defaultCharset;
         }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
