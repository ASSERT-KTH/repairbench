diff --git a/tmp/c5591f6e-dcba-410f-9beb-6b2c3e4e4bc1_buggy.java b/tmp/57f163b0-ec34-4784-8027-9b8755b68b91_fixed.java
index c4b260c..9452f28 100644
--- a/tmp/c5591f6e-dcba-410f-9beb-6b2c3e4e4bc1_buggy.java
+++ b/tmp/57f163b0-ec34-4784-8027-9b8755b68b91_fixed.java
@@ -1,51 +1,59 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    
+    if (charsetName == null) {
+        // Check for BOM to determine the charset before decoding
+        ByteBuffer tempBuffer = byteData.duplicate();
+        if (tempBuffer.hasRemaining() && tempBuffer.get() == (byte) 0xEF &&
+            tempBuffer.hasRemaining() && tempBuffer.get() == (byte) 0xBB &&
+            tempBuffer.hasRemaining() && tempBuffer.get() == (byte) 0xBF) {
+            // UTF-8 BOM detected, set charset and adjust position
+            charsetName = "UTF-8";
+            byteData.position(tempBuffer.position() + 3); // Move position past BOM
+        } else {
+            // No BOM found, use default charset
+            charsetName = defaultCharset;
+        }
+    }
+
+    // Now decode with determined charset
+    Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    docData = Charset.forName(charsetName).decode(byteData).toString();
     doc = parser.parseInput(docData, baseUri);
+
+    // Check for meta tags for charset
     Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+    if (meta != null) {
         String foundCharset;
         if (meta.hasAttr("http-equiv")) {
             foundCharset = getCharsetFromContentType(meta.attr("content"));
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
         } else {
             foundCharset = meta.attr("charset");
         }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+        if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(charsetName)) {
             byteData.rewind();
             docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+            doc = parser.parseInput(docData, baseUri);
+            charsetName = foundCharset;
         }
     }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
+
+    // If we detected BOM but didn't parse any meta tags, ensure charset is correct
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
\ No newline at end of file
