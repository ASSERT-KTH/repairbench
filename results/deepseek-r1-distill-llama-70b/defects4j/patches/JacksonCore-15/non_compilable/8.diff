diff --git a/tmp/625894d9-12aa-440a-82d5-1d57b63d36bd_buggy.java b/tmp/a57c7e0e-f2cf-4543-b3c2-46fd2fef654c_fixed.java
index 82cd856..9426d26 100644
--- a/tmp/625894d9-12aa-440a-82d5-1d57b63d36bd_buggy.java
+++ b/tmp/a57c7e0e-f2cf-4543-b3c2-46fd2fef654c_fixed.java
@@ -1,213 +1,115 @@
 @Override
-    public JsonToken nextToken() throws IOException
-    {
-    	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
-    	// check for no buffered context _exposedContext - null
-    	//If all the conditions matches then check for scalar / non-scalar property
-    		//if not scalar and ended successfully, then return null
-    		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-    		// then return null 
-        // Anything buffered?
+public JsonToken nextToken() throws IOException {
     TokenFilterContext ctxt = _exposedContext;
 
     if (ctxt != null) {
         while (true) {
             JsonToken t = ctxt.nextTokenToRead();
             if (t != null) {
                 _currToken = t;
                 return t;
             }
-                // all done with buffered stuff?
             if (ctxt == _headContext) {
                 _exposedContext = null;
                 if (ctxt.inArray()) {
-                        t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
-                        _currToken = t;
-                        return t;
+                    _currToken = JsonToken.END_ARRAY;
+                    return _currToken;
                 }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
                 break;
             }
-                // If not, traverse down the context chain
             ctxt = _headContext.findChildOf(ctxt);
-                _exposedContext = ctxt;
-                if (ctxt == null) { // should never occur
+            if (ctxt == null) {
                 throw _constructError("Unexpected problem: chain of filtered context broken");
             }
+            _exposedContext = ctxt;
         }
     }
 
-        // If not, need to read more. If we got any:
     JsonToken t = delegate.nextToken();
     if (t == null) {
-            // no strict need to close, since we have no state here
-            return (_currToken = t);
+        return _currToken = t;
     }
 
-        // otherwise... to include or not?
-        TokenFilter f;
-        
     switch (t.id()) {
         case ID_START_ARRAY:
-            f = _itemFilter;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
-            }
-            if (f == null) { // does this occur?
-                delegate.skipChildren();
-                break;
-            }
-            // Otherwise still iffy, need to check
+            TokenFilter f = _itemFilter;
+            if (f != null) {
                 f = _headContext.checkValue(f);
                 if (f == null) {
                     delegate.skipChildren();
-                break;
+                    f = _itemFilter;
                 }
-            if (f != TokenFilter.INCLUDE_ALL) {
-                f = f.filterStartArray();
             }
-            _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
-            }
+            } else if (f != null && f.filterStartArray() != null) {
                 _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
-            if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
-                }
+            } else {
+                delegate.skipChildren();
             }
+            _itemFilter = f;
             break;
 
         case ID_START_OBJECT:
             f = _itemFilter;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
-            }
-            if (f == null) { // does this occur?
-                delegate.skipChildren();
-                break;
-            }
-            // Otherwise still iffy, need to check
+            if (f != null) {
                 f = _headContext.checkValue(f);
                 if (f == null) {
                     delegate.skipChildren();
-                break;
+                    f = _itemFilter;
                 }
-            if (f != TokenFilter.INCLUDE_ALL) {
-                f = f.filterStartObject();
             }
-            _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
-            }
+            } else if (f != null && f.filterStartObject() != null) {
                 _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
-            if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
+            } else {
+                delegate.skipChildren();
             }
-            }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
+            _itemFilter = f;
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
-            {
-                boolean returnEnd = _headContext.isStartHandled();
-                f = _headContext.getFilter();
-                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                    f.filterFinishArray();
-                }
+            _itemFilter = _headContext.getParent().getFilter();
             _headContext = _headContext.getParent();
-                _itemFilter = _headContext.getFilter();
-                if (returnEnd) {
-                    return (_currToken = t);
-                }
+            if (_headContext.isStartHandled()) {
+                return _currToken = t;
             }
             break;
 
         case ID_FIELD_NAME:
-            {
-                final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
+            String name = delegate.getCurrentName();
             f = _headContext.setFieldName(name);
-                if (f == TokenFilter.INCLUDE_ALL) {
-                    _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
-                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
-                            _exposedContext = _headContext;
-                        }
-                    }
-                    return (_currToken = t);
-                }
-                if (f == null) {
-                    delegate.nextToken();
-                    delegate.skipChildren();
-                    break;
-                }
-                f = f.includeProperty(name);
             if (f == null) {
                 delegate.nextToken();
                 delegate.skipChildren();
                 break;
             }
-                _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
-                    if (_includePath) {
-                        return (_currToken = t);
-                    }
-                }
-                if (_includePath) {
-                    t = _nextTokenWithBuffering(_headContext);
-                    if (t != null) {
-                        _currToken = t;
-                        return t;
+                _itemFilter = f;
+                return _currToken = t;
             }
+            if (f.includeProperty(name)) {
+                _itemFilter = f;
+                return _currToken = t;
+            } else {
+                delegate.nextToken();
+                delegate.skipChildren();
             }
             break;
-            }
 
-        default: // scalar value
+        default:
+            boolean includeScalar = false;
             f = _itemFilter;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                return (_currToken = t);
+            if (f != null && (f == TokenFilter.INCLUDE_ALL || (f.includeValue(delegate) && !_allowMultipleMatches))) {
+                includeScalar = true;
             }
-            if (f != null) {
-                f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
-                    return (_currToken = t);
+            if (includeScalar) {
+                return _currToken = t;
             }
-            }
-            // Otherwise not included (leaves must be explicitly included)
+            delegate.nextToken();
             break;
     }
-
-        // We get here if token was not yet found; offlined handling
     return _nextToken2();
 }
\ No newline at end of file
