diff --git a/tmp/b4724941-5c23-46a2-b946-14b71d7d7dbc_buggy.java b/tmp/ca68a830-2731-4d11-b1af-b23ca5f4dfa9_fixed.java
index 82cd856..13ffa8d 100644
--- a/tmp/b4724941-5c23-46a2-b946-14b71d7d7dbc_buggy.java
+++ b/tmp/ca68a830-2731-4d11-b1af-b23ca5f4dfa9_fixed.java
@@ -1,213 +1,205 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
-    	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
-    	// check for no buffered context _exposedContext - null
-    	//If all the conditions matches then check for scalar / non-scalar property
-    		//if not scalar and ended successfully, then return null
-    		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-    		// then return null 
-        // Anything buffered?
+        // Check for buffered context
         TokenFilterContext ctxt = _exposedContext;
 
         if (ctxt != null) {
             while (true) {
                 JsonToken t = ctxt.nextTokenToRead();
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
-                // all done with buffered stuff?
+                // All done with buffered stuff?
                 if (ctxt == _headContext) {
                     _exposedContext = null;
                     if (ctxt.inArray()) {
                         t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
                         _currToken = t;
                         return t;
                     }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
                     break;
                 }
-                // If not, traverse down the context chain
+                // Traverse down the context chain
                 ctxt = _headContext.findChildOf(ctxt);
                 _exposedContext = ctxt;
-                if (ctxt == null) { // should never occur
+                if (ctxt == null) {
                     throw _constructError("Unexpected problem: chain of filtered context broken");
                 }
             }
         }
 
-        // If not, need to read more. If we got any:
+        // Read the next token
         JsonToken t = delegate.nextToken();
         if (t == null) {
-            // no strict need to close, since we have no state here
             return (_currToken = t);
         }
 
-        // otherwise... to include or not?
-        TokenFilter f;
-        
+        // Determine handling based on token type
         switch (t.id()) {
             case ID_START_ARRAY:
-            f = _itemFilter;
+                handleStartArray(t);
+                break;
+            case ID_START_OBJECT:
+                handleStartObject(t);
+                break;
+            case ID_END_ARRAY:
+            case ID_END_OBJECT:
+                handleEndStructure(t);
+                break;
+            case ID_FIELD_NAME:
+                handleFieldName(t);
+                break;
+            default:
+                handleScalar(t);
+                break;
+        }
+
+        return _nextToken2();
+    }
+
+    private void handleStartArray(JsonToken t) throws IOException {
+        // Implementation specific to starting an array
+        TokenFilter f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
+            _currToken = t;
+            return;
         }
-            if (f == null) { // does this occur?
+        if (f == null) {
             delegate.skipChildren();
-                break;
+            return;
         }
-            // Otherwise still iffy, need to check
         f = _headContext.checkValue(f);
         if (f == null) {
             delegate.skipChildren();
-                break;
+            return;
         }
         if (f != TokenFilter.INCLUDE_ALL) {
             f = f.filterStartArray();
         }
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
+            _currToken = t;
+            return;
         }
         _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
         if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
+            JsonToken buffered = _nextTokenWithBuffering(_headContext);
+            if (buffered != null) {
+                _currToken = buffered;
+            }
         }
     }
-            break;
 
-        case ID_START_OBJECT:
-            f = _itemFilter;
+    private void handleStartObject(JsonToken t) throws IOException {
+        // Implementation specific to starting an object
+        TokenFilter f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
+            _currToken = t;
+            return;
         }
-            if (f == null) { // does this occur?
+        if (f == null) {
             delegate.skipChildren();
-                break;
+            return;
         }
-            // Otherwise still iffy, need to check
         f = _headContext.checkValue(f);
         if (f == null) {
             delegate.skipChildren();
-                break;
+            return;
         }
         if (f != TokenFilter.INCLUDE_ALL) {
             f = f.filterStartObject();
         }
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
+            _currToken = t;
+            return;
         }
         _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
         if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
+            JsonToken buffered = _nextTokenWithBuffering(_headContext);
+            if (buffered != null) {
+                _currToken = buffered;
+            }
         }
     }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
-            break;
 
-        case ID_END_ARRAY:
-        case ID_END_OBJECT:
-            {
+    private void handleEndStructure(JsonToken t) throws IOException {
+        // Implementation specific to ending structures (array/object)
         boolean returnEnd = _headContext.isStartHandled();
-                f = _headContext.getFilter();
-                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+        TokenFilter f = _headContext.getFilter();
+        if (f != null && f != TokenFilter.INCLUDE_ALL) {
+            if (t.id() == ID_END_ARRAY) {
                 f.filterFinishArray();
+            } else {
+                f.filterFinishObject();
+            }
         }
         _headContext = _headContext.getParent();
         _itemFilter = _headContext.getFilter();
         if (returnEnd) {
-                    return (_currToken = t);
+            _currToken = t;
         }
     }
-            break;
 
-        case ID_FIELD_NAME:
-            {
+    private void handleFieldName(JsonToken t) throws IOException {
+        // Implementation specific to field names
         final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
-                f = _headContext.setFieldName(name);
+        TokenFilter f = _headContext.setFieldName(name);
         if (f == TokenFilter.INCLUDE_ALL) {
             _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
-                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+            if (!_includePath && !_headContext.isStartHandled()) {
+                t = _headContext.nextTokenToRead();
                 _exposedContext = _headContext;
             }
-                    }
-                    return (_currToken = t);
+            _currToken = t;
+            return;
         }
         if (f == null) {
             delegate.nextToken();
             delegate.skipChildren();
-                    break;
+            return;
         }
         f = f.includeProperty(name);
         if (f == null) {
             delegate.nextToken();
             delegate.skipChildren();
-                    break;
+            return;
         }
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
             if (_includePath) {
-                        return (_currToken = t);
-                    }
-                }
-                if (_includePath) {
-                    t = _nextTokenWithBuffering(_headContext);
-                    if (t != null) {
                 _currToken = t;
-                        return t;
+            }
+            return;
+        }
+        if (_includePath) {
+            JsonToken buffered = _nextTokenWithBuffering(_headContext);
+            if (buffered != null) {
+                _currToken = buffered;
             }
         }
-                break;
     }
 
-        default: // scalar value
-            f = _itemFilter;
+    private void handleScalar(JsonToken t) throws IOException {
+        // Implementation specific to scalar values
+        TokenFilter f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
-                return (_currToken = t);
+            _currToken = t;
+            return;
         }
         if (f != null) {
             f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
-                    return (_currToken = t);
+            if (f == TokenFilter.INCLUDE_ALL || (f != null && f.includeValue(delegate))) {
+                _currToken = t;
+                return;
             }
         }
-            // Otherwise not included (leaves must be explicitly included)
-            break;
-        }
-
-        // We get here if token was not yet found; offlined handling
-        return _nextToken2();
+        // Token not included
+        _currToken = null;
     }
\ No newline at end of file
