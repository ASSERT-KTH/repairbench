diff --git a/tmp/7dc26c98-168a-493e-94f5-48686b5ea39a_buggy.java b/tmp/cd2b9717-ef47-4747-a0dc-0cb89001adfc_fixed.java
index 61ffdbf..8a6d765 100644
--- a/tmp/7dc26c98-168a-493e-94f5-48686b5ea39a_buggy.java
+++ b/tmp/cd2b9717-ef47-4747-a0dc-0cb89001adfc_fixed.java
@@ -1,44 +1,71 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
+      // Parameters of object literal setters cannot be removed.
       return;
     }
 
+    // Determine if we should consider call site modification
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);
+
+    // Criteria to avoid removing arguments:
+    // 1. If it's an object literal method and has parameters declared with default values.
+    // 2. If it's a constructor or has a super call.
+    boolean canModifyArgs = !(NodeUtil.isOBObjectLiteralMethod(function) && hasDefaultParameters(function)) 
+        && !isConstructor(function) 
+        && !hasSuperCall(function);
+
+    // Skip processing if modification isn't allowed
+    if (!canModifyArgs) {
+      return;
+    }
+
     if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
+      // Safely remove unreferenced arguments from the end
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
+
+  // Helper method to check if function has default parameters
+  private boolean hasDefaultParameters(Node function) {
+    for (Node param : getFunctionParameters(function)) {
+      if (param.hasChild(NodeDEFAULTPARAM_MARKER)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  // Helper method to check if function is a constructor
+  private boolean isConstructor(Node function) {
+    return function.endsWith(Node.CONSTRUCTOR);
+  }
+
+  // Helper method to check if function has a super call
+  private boolean hasSuperCall(Node function) {
+    return NodeUtil.getCallsTo(function, "super").length > 0;
+  }
+
+  // Helper method to get function parameters for analysis
+  private Iterable<Node> getFunctionParameters(Node function) {
+    return NodeUtil.getFunctionParameters(function);
+  }
\ No newline at end of file
