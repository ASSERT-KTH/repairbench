diff --git a/tmp/cfe79643-3510-4170-8bfa-b66230e9c3c5_buggy.java b/tmp/18f4495c-040c-4fcf-8e3f-959d106632fd_fixed.java
index 61ffdbf..ea7de55 100644
--- a/tmp/cfe79643-3510-4170-8bfa-b66230e9c3c5_buggy.java
+++ b/tmp/18f4495c-040c-4fcf-8e3f-959d106632fd_fixed.java
@@ -1,44 +1,70 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
+        String paramName = lastArg.getString();
+        Var var = fnScope.getVar(paramName);
+        // Check if the parameter is referenced or annotated in JSDoc
+        if (!referenced.contains(var) && !isParameterAnnotated(function, paramName)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
+
+  /**
+   * Checks if a parameter is annotated in the JSDoc of its function.
+   */
+  private boolean isParameterAnnotated(Node function, String paramName) {
+    JSDocInfo jsDoc = function.getJSDocInfo();
+    if (jsDoc == null) {
+      return false;
+    }
+    for (JSDocInfo.Tag tag : jsDoc.getTags()) {
+      if ("param".equals(tag.getType())) {
+        String[] parts = tag.getContent().split(" ");
+        if (parts.length > 0) {
+          String typeName = parts[0];
+          // Check if the tag is in the form {@type} or just {type}
+          if ((typeName.startsWith("{") && typeName.endsWith("}") && typeName.substring(1, typeName.length() - 1).equals(paramName)) ||
+              typeName.equals(paramName)) {
+            return true;
+          }
+        }
+      }
+    }
+    return false;
+  }
\ No newline at end of file
