diff --git a/tmp/1686eb71-cb00-4d61-b60b-b38fa53d4f00_buggy.java b/tmp/2f0b697c-b735-4960-a38d-af69a1798ea2_fixed.java
index 61ffdbf..4150792 100644
--- a/tmp/1686eb71-cb00-4d61-b60b-b38fa53d4f00_buggy.java
+++ b/tmp/2f0b697c-b735-4960-a38d-af69a1798ea2_fixed.java
@@ -1,44 +1,61 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
-          compiler.reportCodeChange();
-        } else {
-          break;
-        }
-      }
-    } else {
+
+    if (modifyCallers) {
       callSiteOptimizer.optimize(fnScope, referenced);
+      // After optimizing call sites, check for any parameters that have become unreferenced
+      if (!argList.hasChildren()) {
+        argList.clearChildren();
+      } else {
+        // Strip from the end as before but only when possible
+        Node lastArg;
+        while ((lastArg = argList.getLastChild()) != null) {
+          Var var = fnScope.getVar(lastArg.getString());
+          if (!referenced.contains(var)) {
+            argList.removeChild(lastArg);
+            compiler.reportCodeChange();
+          } else {
+            break;
+          }
+        }
+      }
+    } else {
+      // Strip unreferenced args off the end of the function declaration.
+      Node lastArg;
+      while ((lastArg = argList.getLastChild()) != null) {
+        Var var = fnScope.getVar(lastArg.getString());
+        if (!referenced.contains(var)) {
+          argList.removeChild(lastArg);
+          compiler.reportCodeChange();
+        } else {
+          break;
+        }
+      }
     }
   }
\ No newline at end of file
