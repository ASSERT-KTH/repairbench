diff --git a/tmp/05f34ef1-2e03-47a4-b0f7-00695e62fc06_buggy.java b/tmp/45cb7eb2-e15d-4787-a1e0-39ff392f898d_fixed.java
index 61ffdbf..85f7e2a 100644
--- a/tmp/05f34ef1-2e03-47a4-b0f7-00695e62fc06_buggy.java
+++ b/tmp/45cb7eb2-e15d-4787-a1e0-39ff392f898d_fixed.java
@@ -1,44 +1,14 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
-          compiler.reportCodeChange();
-        } else {
-          break;
-        }
-      }
-    } else {
+    if (modifyCallers) {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
