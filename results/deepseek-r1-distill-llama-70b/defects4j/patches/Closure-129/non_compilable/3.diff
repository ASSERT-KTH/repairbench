diff --git a/tmp/f95ebb28-e917-4a3f-8b89-3dc52c79ede0_buggy.java b/tmp/5efdd8c6-c59e-4ff4-8428-01b39de80a1e_fixed.java
index e8705ac..c8e8810 100644
--- a/tmp/f95ebb28-e917-4a3f-8b89-3dc52c79ede0_buggy.java
+++ b/tmp/5efdd8c6-c59e-4ff4-8428-01b39de80a1e_fixed.java
@@ -1,24 +1,15 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
     Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+    // Keep track of the "this" context of a call. A call without an explicit
+    // "this" is a free call.
+    boolean isFreeCall = (n.getReceiver() == null);
+    n.putBooleanProp(Node.FREE_CALL, isFreeCall);
+
+    if (isFreeCall) {
         Node first = n.getFirstChild();
-
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
-        n.putBooleanProp(Node.FREE_CALL, true);
-      }
-
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+        if (first.isName() && "eval".equals(first.getString())) {
             first.putBooleanProp(Node.DIRECT_EVAL, true);
         }
     }
+}
\ No newline at end of file
