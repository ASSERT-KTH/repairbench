diff --git a/tmp/a0682933-00ca-46f5-a69a-9ca338764629_buggy.java b/tmp/b3d61e8c-03e6-4b4b-b315-4068494e1b9b_fixed.java
index e8705ac..b5ff18b 100644
--- a/tmp/a0682933-00ca-46f5-a69a-9ca338764629_buggy.java
+++ b/tmp/b3d61e8c-03e6-4b4b-b315-4068494e1b9b_fixed.java
@@ -1,24 +1,21 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // Check if the first child is a call to 'new'
+      if (NodeUtil.isNew(first)) {
+        // Move to the next child which should be the function expression
+        first = first.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // Ignore cast nodes.
+      if (!NodeUtil.isGet(first) && !first.isCast()) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+      // Check if the first child is a name and is 'eval'
+      if (first.isName() && "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
