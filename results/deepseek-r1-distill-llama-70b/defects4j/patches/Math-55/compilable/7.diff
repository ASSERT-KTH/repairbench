diff --git a/tmp/67dc8a71-1514-480e-9b73-e32138ec31e4_buggy.java b/tmp/8c453e3a-7b20-41f4-94e5-c18b74c7a50c_fixed.java
index 1478ee1..1e56133 100644
--- a/tmp/67dc8a71-1514-480e-9b73-e32138ec31e4_buggy.java
+++ b/tmp/8c453e3a-7b20-41f4-94e5-c18b74c7a50c_fixed.java
@@ -1,24 +1,23 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    double dotProduct = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+    double squaredNormV2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
 
+    if (squaredNormV2 == 0) {
+        return new Vector3D(0, 0, 0);
+    }
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    double rho = dotProduct / squaredNormV2;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    // Apply 8-bit approximation
+    rho = Math.rint(rho * 255.0) / 255.0;
 
+    double x3 = v1.x - rho * v2.x;
+    double y3 = v1.y - rho * v2.y;
+    double z3 = v1.z - rho * v2.z;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    double crossX = y3 * v2.z - z3 * v2.y;
+    double crossY = z3 * v2.x - x3 * v2.z;
+    double crossZ = x3 * v2.y - y3 * v2.x;
 
+    return new Vector3D(crossX, crossY, crossZ);
 }
\ No newline at end of file
