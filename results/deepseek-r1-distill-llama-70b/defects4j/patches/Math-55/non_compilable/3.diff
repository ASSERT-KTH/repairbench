diff --git a/tmp/678c23b1-81dc-4264-b293-6169103cbe3d_buggy.java b/tmp/f9c4271d-8385-4e0f-8fbe-92699c0b90ef_fixed.java
index 1478ee1..fe11a7f 100644
--- a/tmp/678c23b1-81dc-4264-b293-6169103cbe3d_buggy.java
+++ b/tmp/f9c4271d-8385-4e0f-8fbe-92699c0b90ef_fixed.java
@@ -1,24 +1,27 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    double dotProduct = v1.dotProduct(v2);
+    double v2SquaredNorm = v2.dotProduct(v2);
     
+    if (v2SquaredNorm == 0) {
+        return new Vector3D(0, 0, 0);
+    }
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double rho = dotProduct / v2SquaredNorm;
     
+    double x = v1.x - rho * v2.x;
+    double y = v1.y - rho * v2.y;
+    double z = v1.z - rho * v2.z;
     
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    Vector3D v3 = new Vector3D(x, y, z);
     
+    return new Vector3D(
+        v3.y * v2.z - v3.z * v2.y,
+        v3.z * v2.x - v3.x * v2.z,
+        v3.x * v2.y - v3.y * v2.x
+    );
 }
\ No newline at end of file
