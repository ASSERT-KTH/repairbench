diff --git a/tmp/6c8d4ae0-585a-4c99-9951-7cbb68ddbb10_buggy.java b/tmp/ccdefe86-57e7-4376-a4d5-01966dbd5af4_fixed.java
index 1478ee1..a82ba71 100644
--- a/tmp/6c8d4ae0-585a-4c99-9951-7cbb68ddbb10_buggy.java
+++ b/tmp/ccdefe86-57e7-4376-a4d5-01966dbd5af4_fixed.java
@@ -1,24 +1,16 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Handle the special case where v2 is the zero vector
+    if (v2.dotProduct(v2) == 0) {
+        return new Vector3D(0, 0, 0);
+    }
 
+    double rho = v1.dotProduct(v2) / v2.dotProduct(v2);
+    rho = Math.rint(rho * 256) / 256;  // 8-bit approximation of rho
+    Vector3D v3 = v1.subtract(v2.multiply(rho));
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(
+        v3.getY() * v2.getZ() - v3.getZ() * v2.getY(),
+        v3.getZ() * v2.getX() - v3.getX() * v2.getZ(),
+        v3.getX() * v2.getY() - v3.getY() * v2.getX()
+    );
 }
\ No newline at end of file
