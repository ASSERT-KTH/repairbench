diff --git a/tmp/b50bcb95-5bc2-4e7e-baa4-fbc6fc33c41d_buggy.java b/tmp/12708a02-18bd-4973-b974-4e7be22a344b_fixed.java
index 1478ee1..0ef894d 100644
--- a/tmp/b50bcb95-5bc2-4e7e-baa4-fbc6fc33c41d_buggy.java
+++ b/tmp/12708a02-18bd-4973-b974-4e7be22a344b_fixed.java
@@ -1,24 +1,30 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+      // Compute dot product of v1 and v2
+      double v1v2 = v1.dotProduct(v2);
       
+      // Compute squared norm of v2
+      double v2v2 = v2.normSquared();
       
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Handle the case where v2 is a zero vector
+      if (v2v2 == 0) {
+          return new Vector3D(0, 0, 0);
+      }
       
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Compute rho as v1v2 / v2v2
+      double rho = v1v2 / v2v2;
       
+      // Compute v3 = v1 - rho * v2
+      Vector3D v3 = v1.subtract(v2.multiply(rho));
       
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute cross product of v3 and v2
+      double x = v3.y * v2.z - v3.z * v2.y;
+      double y = v3.z * v2.x - v3.x * v2.z;
+      double z = v3.x * v2.y - v3.y * v2.x;
       
+      return new Vector3D(x, y, z);
   }
\ No newline at end of file
