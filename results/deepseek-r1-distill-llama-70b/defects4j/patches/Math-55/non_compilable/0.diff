diff --git a/tmp/68257beb-7200-49e2-81d3-bc129f0ff2b4_buggy.java b/tmp/13ffb1ff-c980-456c-9e11-feed1bd020e2_fixed.java
index 1478ee1..71b21aa 100644
--- a/tmp/68257beb-7200-49e2-81d3-bc129f0ff2b4_buggy.java
+++ b/tmp/13ffb1ff-c980-456c-9e11-feed1bd020e2_fixed.java
@@ -1,24 +1,21 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Compute dot products
+    final double dot1 = v1.dotProduct(v2);
+    final double dot2 = v2.dotProduct(v2);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Compute rho as an 8-bit approximation
+    double rho = dot2 == 0 ? 0 : (float)(dot1 / dot2);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // Compute v3 = v1 - rho * v2
+    final double vx = v1.x - rho * v2.x;
+    final double vy = v1.y - rho * v2.y;
+    final double vz = v1.z - rho * v2.z;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute cross product of v3 and v2
+    final double x = vy * v2.z - vz * v2.y;
+    final double y = vz * v2.x - vx * v2.z;
+    final double z = vx * v2.y - vy * v2.x;
 
+    return new Vector3D(x, y, z);
 }
\ No newline at end of file
