diff --git a/tmp/42ea80ce-1bbe-4e66-8b11-d8fcdd9b96d3_buggy.java b/tmp/b0f26373-fd0b-4a8e-a484-5901497b876a_fixed.java
index 1478ee1..f7f6bdb 100644
--- a/tmp/42ea80ce-1bbe-4e66-8b11-d8fcdd9b96d3_buggy.java
+++ b/tmp/b0f26373-fd0b-4a8e-a484-5901497b876a_fixed.java
@@ -1,24 +1,23 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute dot products used for scaling
+    final double dotProductV1V2 = v1.dotProduct(v2);
+    final double dotProductV2V2 = v2.dotProduct(v2);
 
+    // Compute rho using 8 bits of dotProductV1V2
+    long bits = Double.doubleToLongBits(dotProductV1V2);
+    bits = bits << 48; // Move to upper 8 bits
+    bits = bits >>> 56; // Now) Upper 8 bits in lower 8 bits
+    double rho = Double.longBitsToDouble(bits | (double) 0x3FFL << 48); // Bias to get 8 bits
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Precondition v1 to v3 = v1 - rho * v2
+    final double v3X = v1.getX() - rho * v2.getX();
+    final double v3Y = v1.getY() - rho * v2.getY();
+    final double v3Z = v1.getZ() - rho * v2.getZ();
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute cross product of v3 and v2
+    final double x = v3Y * v2.getZ() - v3Z * v2.getY();
+    final double y = v3Z * v2.getX() - v3X * v2.getZ();
+    final double z = v3X * v2.getY() - v3Y * v2.getX();
 
+    return new Vector3D(x, y, z);
 }
\ No newline at end of file
