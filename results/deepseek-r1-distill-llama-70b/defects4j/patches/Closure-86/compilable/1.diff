diff --git a/tmp/23b090ec-0036-4fb6-a863-661c8afc907a_buggy.java b/tmp/d4f563a4-4537-49e5-bad7-ec723e2a8968_fixed.java
index a3709ee..a6f4039 100644
--- a/tmp/23b090ec-0036-4fb6-a863-661c8afc907a_buggy.java
+++ b/tmp/d4f563a4-4537-49e5-bad7-ec723e2a8968_fixed.java
@@ -1,71 +1,53 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
         case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+            return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
         case Token.OR:
             return evaluatesToLocalValue(value.getFirstChild(), locals)
                 && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.HOOK:
             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
                 && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.INC:
         case Token.DEC:
             if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                 return evaluatesToLocalValue(value.getFirstChild(), locals);
             } else {
                 return true;
             }
         case Token.THIS:
             return locals.apply(value);
         case Token.NAME:
             return isImmutableValue(value) || locals.apply(value);
         case Token.GETELEM:
         case Token.GETPROP:
-        // There is no information about the locality of object properties.
             return locals.apply(value);
         case Token.CALL:
-        return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
+            Node recv = value.getFirstChild();
+            if ( recv != null && recv.getType() == Token.THIS 
+                || (recv.getType() == Token.NAME && locals.apply(recv)) 
+                || (recv.getType() == Token.GETPROP && evaluatesToLocalValue(recv, locals))) {
+                return callHasLocalResult(value);
+            }
+            return isToStringMethodCall(value) || locals.apply(value);
         case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+            Node constructor = value.getFirstChild();
+            return (constructor != null && constructor.getType() == Token.NAME && locals.apply(constructor))
+                || isImmutableValue(value);
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
             return true;
         case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
             return true;
         default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                 return true;
             }
-
-        throw new IllegalStateException(
-            "Unexpected expression node" + value +
-            "\n parent:" + value.getParent());
+            throw new IllegalStateException("Unexpected expression node" + value + "\n parent:" + value.getParent());
     }
 }
\ No newline at end of file
