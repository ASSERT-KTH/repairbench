diff --git a/tmp/74eb6084-1138-40cc-8fff-80142d48a6bb_buggy.java b/tmp/4ff61967-23c8-4965-9fd5-3f7e6ac7acdc_fixed.java
index 7f61a8c..2694738 100644
--- a/tmp/74eb6084-1138-40cc-8fff-80142d48a6bb_buggy.java
+++ b/tmp/4ff61967-23c8-4965-9fd5-3f7e6ac7acdc_fixed.java
@@ -1,73 +1,59 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    if (n.isEmpty() || n.isComma()) {
         return;
     }
 
     if (parent == null) {
         return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+    // Handle specific cases where a node is part of an expression within parentheses
     if (parent.getType() == Token.COMMA) {
         Node gramps = parent.getParent();
         if (gramps.isCall() && parent == gramps.getFirstChild()) {
             if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
                 return;
             }
         }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
-            continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
-          else
-            break;
-        }
     }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
-      } else {
+
+    // Adjusted condition to only return if parent is BLOCK or EXPR_RESULT and not in a function argument list
+    boolean isBlockOrExprResult = parent.getType() == Token.BLOCK || parent.getType() == Token.EXPR_RESULT;
+    boolean isFunctionArgument = parent.getType() == Token.COMMA && parent.getParent().isCall();
+    if (isBlockOrExprResult && !isFunctionArgument) {
         return;
     }
-    }
 
+    // Check if the result is used, considering side effects and other conditions
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (!isResultUsed &&
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    
+    if (!isResultUsed && (!isSimpleOp && !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+        handleUselessCode(t, n, msg);
+    } else if (isSimpleOp) {
+        if (!isResultUsed) {
+            handleUselessCode(t, n, msg);
+        }
+    }
+}
+
+private void handleUselessCode(NodeTraversal t, Node n, String msg) {
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
     } else if (n.isExprResult()) {
         return;
     }
-      String msg = "This code lacks side-effects. Is there a bug?";
+
     if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
-      } else if (isSimpleOp) {
-        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
-            "' operator is not being used.";
+    } else {
+        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
     }
 }
\ No newline at end of file
-  }
