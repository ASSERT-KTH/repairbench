diff --git a/tmp/ac2532ab-90d1-499d-848b-f0e0d303f932_buggy.java b/tmp/deaac092-617e-4558-9886-6ecf127d7939_fixed.java
index 7f61a8c..988e448 100644
--- a/tmp/ac2532ab-90d1-499d-848b-f0e0d303f932_buggy.java
+++ b/tmp/deaac092-617e-4558-9886-6ecf127d7939_fixed.java
@@ -1,73 +1,72 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    // Check if the node is empty or a comma, which we can skip
+    if (n.isEmpty() || n.isComma()) {
         return;
     }
 
+    // No action if parent is null
     if (parent == null) {
         return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+    // Handle cases where the parent is a comma
     if (parent.getType() == Token.COMMA) {
         Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
+        if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {
+            // Check if this is an eval call and preserve it
+            if (n == parent.getFirstChild() && parent.getChildCount() == 2 &&
+                    n.getNext().isName() && "eval".equals(n.getNext().getString())) {
                 return;
             }
         }
+    }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
+    // If this is the last child of the parent and the ancestors are expr or block, skip
+    boolean isLastChild = n == parent.getLastChild();
+    if (isLastChild) {
         for (Node an : parent.getAncestors()) {
             int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
+            if (ancestorType == Token.COMMA) {
                 continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+            }
+            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
                 return;
-          else
-            break;
-        }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
             } else {
+                break;
+            }
+        }
+    }
+
+    // If parent is FOR loop and it's the initializer or increment part, handle appropriately
+    if (parent.getType() == Token.FOR) {
+        if (parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {
             return;
         }
     }
 
+    // Check if this is an expression with no side effects and not used
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (!isResultUsed &&
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    if (!isResultUsed && !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
         if (n.isQualifiedName() && n.getJSDocInfo() != null) {
             return;
         } else if (n.isExprResult()) {
             return;
         }
+
         String msg = "This code lacks side-effects. Is there a bug?";
         if (n.isString()) {
             msg = "Is there a missing '+' on the previous line?";
         } else if (isSimpleOp) {
             msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
                     "' operator is not being used.";
         }
 
         t.getCompiler().report(
             t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
         if (!NodeUtil.isStatement(n)) {
             problemNodes.add(n);
         }
     }
 }
\ No newline at end of file
