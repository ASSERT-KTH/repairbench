diff --git a/tmp/f722f7f6-972d-48a2-bb27-51c61008d5cf_buggy.java b/tmp/3aed6733-ac55-43ae-9880-038dea844574_fixed.java
index 13db7da..47f51b2 100644
--- a/tmp/f722f7f6-972d-48a2-bb27-51c61008d5cf_buggy.java
+++ b/tmp/3aed6733-ac55-43ae-9880-038dea844574_fixed.java
@@ -1,11 +1,47 @@
 /**
  * Generates a tooltip string to go in an HTML image map.
  *
  * @param toolTipText  the tooltip.
  * 
  * @return The formatted HTML area tag attribute(s).
  */
 public String generateToolTipFragment(String toolTipText) {
-        return " title=\"" + toolTipText
-            + "\" alt=\"\"";
+    String escapedText = escapeHtml(toolTipText);
+    return " title=\"" + escapedText + "\" alt=\"\"";
+}
+
+/**
+ * Escapes HTML special characters in the given text.
+ *
+ * @param text  the text to escape.
+ * @return      the escaped text.
+ */
+private String escapeHtml(String text) {
+    if (text == null) {
+        return null;
+    }
+    StringBuilder escaped = new StringBuilder();
+    for (int i = 0; i < text.length(); i++) {
+        char c = text.charAt(i);
+        switch (c) {
+            case '&':
+                escaped.append("&amp;");
+                break;
+            case '<':
+                escaped.append("&lt;");
+                break;
+            case '>':
+                escaped.append("&gt;");
+                break;
+            case '"':
+                escaped.append("&quot;");
+                break;
+            case '\'':
+                escaped.append("&apos;");
+                break;
+            default:
+                escaped.append(c);
+        }
+    }
+    return escaped.toString();
 }
\ No newline at end of file
