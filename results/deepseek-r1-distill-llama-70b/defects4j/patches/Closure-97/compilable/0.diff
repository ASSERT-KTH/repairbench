diff --git a/tmp/c92602ae-3474-4766-9c65-a052df397308_buggy.java b/tmp/006c3f2f-955b-4ce7-ba7e-9178a0475235_fixed.java
index 1126687..0bbdc40 100644
--- a/tmp/c92602ae-3474-4766-9c65-a052df397308_buggy.java
+++ b/tmp/006c3f2f-955b-4ce7-ba7e-9178a0475235_fixed.java
@@ -1,65 +1,76 @@
-  /**
-   * Try to fold shift operations
-   */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
-      double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+      // Check if operands are integers and within valid ranges.
+
+      // For LSH and RSH, the left operand must fit in 32 bits.
+      if (n.getType() != Token.URSH &&
+          (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // For RSH, the left operand can be a Number outside 32-bit range as long as it's integer.
+      if (n.getType() == Token.RSH) {
+        if (lval != Math.floor(lval)) {
+          error(FRACTIONAL_BITWISE_OPERAND, left);
+          return n;
+        }
+        lval = Math.floor(lval);
+      }
+
+      // For all shifts, the right operand must be an integer between 0 and 31.
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
+      // Ensure both operands are integer.
+      if (left.getType() != Token.NUMBER || right.getType() != Token.NUMBER ||
+          lval != Math.floor(lval) || rval != Math.floor(rval)) {
+        error(FRACTIONAL_BITWISE_OPERAND, left);
+        return n;
+      }
+
       int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
       int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
-      }
 
+      // Convert to long to avoid integer overflow, especially for unsigned shifts.
+      long result;
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          result = (long) lvalInt << rvalInt;
           break;
         case Token.RSH:
-          result = lvalInt >> rvalInt;
+          result = (long) lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          result = (long) lvalInt >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
+      // If result fits into integer range and is non-negative, use Number.
+      // Otherwise, use long to avoid losing information.
+      if (result >= Integer.MIN_VALUE && result <= Integer.MAX_VALUE) {
+        Node newNumber = Node.newNumber((int) result);
+        n.getParent().replaceChild(n, newNumber);
+        reportCodeChange();
+        return newNumber;
+      } else {
+        // Handle unsigned shifts that result in large numbers.
         Node newNumber = Node.newNumber(result);
         n.getParent().replaceChild(n, newNumber);
         reportCodeChange();
-
         return newNumber;
       }
+    }
 
     return n;
   }
\ No newline at end of file
