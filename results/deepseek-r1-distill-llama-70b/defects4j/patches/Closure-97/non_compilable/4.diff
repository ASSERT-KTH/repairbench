diff --git a/tmp/82999236-4de8-4d43-ae5b-6d1668e90259_buggy.java b/tmp/6136e5d1-f6e8-44e8-95dd-4b53f6480045_fixed.java
index 1126687..46e932c 100644
--- a/tmp/82999236-4de8-4d43-ae5b-6d1668e90259_buggy.java
+++ b/tmp/6136e5d1-f6e8-44e8-95dd-4b53f6480045_fixed.java
@@ -1,65 +1,75 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
+    // Allow left to be a number or a name (variable) as JavaScript allows shifting variables
+    boolean leftIsNumber = left.getType() == Token.NUMBER;
+    boolean rightIsNumber = right.getType() == Token.NUMBER;
 
-      double result;
-      double lval = left.getDouble();
+    if ((leftIsNumber || left.getType() == Token.NAME) && rightIsNumber) {
+
+      double lval = leftIsNumber ? left.getDouble() : tryGetNumberValue(left.getString());
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
+      // Only perform checks when the left operand is a number
+      if (leftIsNumber) {
+        // Check if left operand is within integer range
         if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
           error(BITWISE_OPERAND_OUT_OF_RANGE, left);
           return n;
         }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
-      }
-
-      // Convert the numbers to ints
+        // Convert left to int
         int lvalInt = (int) lval;
         if (lvalInt != lval) {
           error(FRACTIONAL_BITWISE_OPERAND, left);
           return n;
         }
+      }
+
+      // Check if the right operand is within the shift range [0,32)
+      if (!(rval >= 0 && rval < 32)) {
+        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+        return n;
+      }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      int a;
+      int b = rvalInt;
+
+      if (!leftIsNumber) {
+        // If left is a name, treat it as an int
+        a = 0; // Placeholder, actual value depends on runtime variables
+      } else {
+        a = (int) lval;
+      }
+
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          result = a << b;
           break;
         case Token.RSH:
-          result = lvalInt >> rvalInt;
+          result = a >> b;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          result = a >>> b;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
