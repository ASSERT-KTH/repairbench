diff --git a/tmp/eb72f983-2323-4446-932d-5f12eaac5daa_buggy.java b/tmp/6e66ccd8-e67c-4857-b8d0-d60ad62001f8_fixed.java
index aea175a..36909c2 100644
--- a/tmp/eb72f983-2323-4446-932d-5f12eaac5daa_buggy.java
+++ b/tmp/6e66ccd8-e67c-4857-b8d0-d60ad62001f8_fixed.java
@@ -1,76 +1,79 @@
     /**
      * <p>
      * Encodes all of the provided data, starting at inPos, for inAvail bytes.
      * Must be called at least twice:  once with the data to encode, and once
      * with inAvail set to "-1" to alert encoder that EOF has been reached,
      * so flush last remaining bytes (if not multiple of 3).
      * </p><p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations,
      * and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      *
      * @param in byte[] array of binary data to base64 encode.
      * @param inPos Position to start reading data from.
      * @param inAvail Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
+        if (inAvail == 0) { // Handle empty input case
+            return;
+        }
         if (eof) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
             eof = true;
             if (buf == null || buf.length - pos < encodeSize) {
                 resizeBuf();
             }
             switch (modulus) {
                 case 1:
                     buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                         buf[pos++] = PAD;
                     }
                     break;
 
                 case 2:
                     buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                     }
                     break;
             }
             if (lineLength > 0) {
                 System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buf == null || buf.length - pos < encodeSize) {
                     resizeBuf();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
                 if (b < 0) { b += 256; }
                 x = (x << 8) + b;
                 if (0 == modulus) {
                     buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buf[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
             }
         }
     }
\ No newline at end of file
