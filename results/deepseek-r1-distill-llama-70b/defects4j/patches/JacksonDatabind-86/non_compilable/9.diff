diff --git a/tmp/216337d6-bbcc-45b0-8730-48852d387dd9_buggy.java b/tmp/fbab1567-81be-4f72-ae6b-75eb0a30d58a_fixed.java
index e69de29..c2b2d58 100644
--- a/tmp/216337d6-bbcc-45b0-8730-48852d387dd9_buggy.java
+++ b/tmp/fbab1567-81be-4f72-ae6b-75eb0a30d58a_fixed.java
@@ -0,0 +1,43 @@
+    // Ensure that when super class is constructed after, it updates any existing subclass types
+    public JavaType constructType(Class<?> cls) {
+        // Check if this class is already being processed
+        if (_cached & (1 << cls.hashCode() % 64)) {
+            return new RecursiveType();
+        }
+        _cached |= (1 << cls.hashCode() % 64);
+
+        JavaType type = _typeCache.get(cls);
+        if (type != null) {
+            return type;
+        }
+
+        // Create a new JavaType instance
+        JavaType newType = new JavaType(cls, this, null, null);
+        _typeCache.put(cls, newType);
+
+        // Construct the super class type
+        Class<?> superClass = cls.getSuperclass();
+        if (superClass != null && superClass != Object.class) {
+            JavaType superType = constructType(superClass);
+            newType.setSuperClass(superType);
+        }
+
+        // Check if any existing types have this class as their super class and need updating
+        for (JavaType existingType : _allTypes) {
+            if (existingType.getSuperClass() instanceof RecursiveType &&
+                ((RecursiveType) existingType.getSuperClass()).getRawClass() == cls) {
+                existingType.setSuperClass(newType);
+            }
+        }
+
+        // Also, check any cached types that might have this as super class
+        for (Class<?> c : _typeCache.keySet()) {
+            JavaType t = _typeCache.get(c);
+            if (t.getSuperClass() instanceof RecursiveType &&
+                ((RecursiveType) t.getSuperClass()).getRawClass() == cls) {
+                t.setSuperClass(newType);
+            }
+        }
+
+        return newType;
+    }
\ No newline at end of file
