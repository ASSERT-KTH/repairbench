diff --git a/tmp/6140c4a6-8936-42aa-9cbb-ed97d08679c8_buggy.java b/tmp/43c7f67d-55c8-402a-8d09-61acd997b359_fixed.java
index e69de29..22eb3d4 100644
--- a/tmp/6140c4a6-8936-42aa-9cbb-ed97d08679c8_buggy.java
+++ b/tmp/43c7f67d-55c8-402a-8d09-61acd997b359_fixed.java
@@ -0,0 +1,117 @@
+public class ResolvedRecursiveType extends TypeBase {
+    private final TypeFactory _typeFactory;
+    private final JavaType _superClass;
+    private final JavaType _keyType;
+    private final JavaType _contentType;
+    private final JavaType[] _valueType;
+    private final JavaType _componentType;
+    private final int _hashCode;
+
+    private ResolvedRecursiveType(TypeFactory typeFactory, JavaType superClass, JavaType keyType,
+            JavaType contentType, JavaType[] valueType, JavaType componentType) {
+        _typeFactory = typeFactory;
+        _superClass = superClass;
+        _keyType = keyType;
+        _contentType = contentType;
+        _valueType = valueType;
+        _componentType = componentType;
+        _hashCode = computeHash();
+    }
+
+    public static ResolvedRecursiveType construct(TypeFactory typeFactory, JavaType superClass,
+            JavaType keyType, JavaType contentType, JavaType[] valueType, JavaType componentType) {
+        return new ResolvedRecursiveType(typeFactory, superClass, keyType, contentType, valueType, componentType);
+    }
+
+    @Override
+    public JavaType getSuperClass() {
+        if (_superClass != null) {
+            if (_superClass instanceof ResolvedRecursiveType) {
+                ResolvedRecursiveType rr = (ResolvedRecursiveType) _superClass;
+                if (rr.getSuperClass() != null) {
+                    return rr.getSuperClass();
+                }
+            }
+            return _superClass;
+        }
+        return super.getSuperClass();
+    }
+
+    @Override
+    public JavaType getKeyType() {
+        return (_keyType instanceof ResolvedRecursiveType) ?
+                ((ResolvedRecursiveType) _keyType).getKeyType() :
+                _keyType;
+    }
+
+    @Override
+    public JavaType getContentType() {
+        return (_contentType instanceof ResolvedRecursiveType) ?
+                ((ResolvedRecursiveType) _contentType).getContentType() :
+                _contentType;
+    }
+
+    @Override
+    public JavaType[] getValueType() {
+        if (_valueType == null || _valueType.length == 0) {
+            return null;
+        }
+        JavaType[] result = new JavaType[_valueType.length];
+        for (int i = 0; i < _valueType.length; i++) {
+            if (_valueType[i] instanceof ResolvedRecursiveType) {
+                result[i] = ((Resolved RecursiveType) _valueType[i]).getValueType()[0];
+            } else {
+                result[i] = _valueType[i];
+            }
+        }
+        return result;
+    }
+
+    @Override
+    public JavaType getComponentType() {
+        return (_componentType instanceof ResolvedRecursiveType) ?
+                ((ResolvedRecursiveType) _componentType).getComponentType() :
+                _componentType;
+    }
+
+    @Override
+    public int getHash() {
+        return _hashCode;
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append(getClass().getSimpleName());
+        sb.append('[');
+        sb.append("base:").append(_superClass);
+        if (_keyType != null) {
+            sb.append(',').append("key:").append(_keyType);
+        }
+        if (_contentType != null) {
+            sb.append(',').append("content:").append(_contentType);
+        }
+        if (_valueType != null && _valueType.length > 0) {
+            sb.append(',').append("value:").append(_valueType[0]);
+        }
+        if (_componentType != null) {
+            sb.append(',').append("component:").append(_componentType);
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+
+    protected int computeHash() {
+        int hash = 1;
+        hash = hash * 31 + (_superClass != null ? _superClass.getHash() : 0);
+        hash = hash * 31 + (_keyType != null ? _keyType.getHash() : 0);
+        hash = hash * 31 + (_contentType != null ? _contentType.getHash() : 0);
+        if (_valueType != null) {
+            for (JavaType type : _valueType) {
+                hash = hash * 31 + (type != null ? type.getHash() : 0);
+            }
+        }
+        hash = hash * 31 + (_componentType != null ? _componentType.getHash() : 0);
+        return hash;
+    }
+}
\ No newline at end of file
