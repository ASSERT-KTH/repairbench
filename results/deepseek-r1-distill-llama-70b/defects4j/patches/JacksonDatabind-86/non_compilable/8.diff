diff --git a/tmp/6e410b34-e5f7-406f-93c2-c0c9fe87772b_buggy.java b/tmp/59463db1-597a-406c-b5a0-1598d196c509_fixed.java
index e69de29..653574f 100644
--- a/tmp/6e410b34-e5f7-406f-93c2-c0c9fe87772b_buggy.java
+++ b/tmp/59463db1-597a-406c-b5a0-1598d196c509_fixed.java
@@ -0,0 +1,27 @@
+protected JavaType _constructType(Type type, TypeBindings bindings, TypeFactory typeFactory)
+{
+    if (type == null) return null;
+    if (type instanceof Class<?>) {
+        return constructFromCanonical((Class<?>) type, bindings, typeFactory);
+    }
+    if (type instanceof ParameterizedType) {
+        return constructFromParameterized(((ParameterizedType) type), bindings, typeFactory);
+    }
+    if (type instanceof GenericArrayType) {
+        return constructFromGenericArray((GenericArrayType) type, typeFactory, bindings);
+    }
+    // For Java 8+ Type Variables (e.g., from Method declarations)
+    if (type instanceof TypeVariable) {
+        TypeVariable<?> tv = (TypeVariable<?>) type;
+        return new ResolvedRecursiveType(_binderFor(TypeVariableImpl.class, tv), typeFactory, bindings);
+    }
+    if (type instanceof WildcardType) {
+        return constructFromWildcard((WildcardType) type);
+    }
+    // For cases where it's a Member class reference, which may require context
+    if (type instanceof java.lang.reflect.ParameterizedType) {
+        return constructFromParameterized((java.lang.reflect.ParameterizedType) type, bindings, typeFactory);
+    }
+    _throwUnconstructibleTypeException(type);
+    return null;
+}
\ No newline at end of file
