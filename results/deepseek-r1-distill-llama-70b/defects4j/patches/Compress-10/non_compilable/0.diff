diff --git a/tmp/317ed167-8b67-4d23-a4b6-50762e6588c4_buggy.java b/tmp/2d4fb67b-b417-4839-af36-2fe76b1a4f4c_fixed.java
index 85e6a42..9be77e1 100644
--- a/tmp/317ed167-8b67-4d23-a4b6-50762e6588c4_buggy.java
+++ b/tmp/2d4fb67b-b417-4839-af36-2fe76b1a4f4c_fixed.java
@@ -1,50 +1,59 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
+        
+        // Check if data descriptor is present
+        boolean hasDataDescriptor = (offsetEntry.getFlags() & GeneralPurposeBitFlag.DATA_DESCRIPTOR_MASK) != 0;
+        
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
+        
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
+        
+        if (hasDataDescriptor) {
+            // Skip the data descriptor bytes (4 for CRC, 4 for compressed size, 4 for uncompressed size)
+            int dataDescriptorSize = archive.skipBytes(12);
+            if (dataDescriptorSize != 12) {
+                throw new RuntimeException("failed to skip data descriptor");
+            }
+            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
+                + SHORT + SHORT + fileNameLen + extraFieldLen + 12;
+        } else {
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
+        }
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
