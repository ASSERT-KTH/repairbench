diff --git a/tmp/369019b4-c47a-4534-97ca-9a9da0c59c85_buggy.java b/tmp/1df3485a-3b3c-4a67-8bdf-925517407844_fixed.java
index 40f74f7..0d75f8c 100644
--- a/tmp/369019b4-c47a-4534-97ca-9a9da0c59c85_buggy.java
+++ b/tmp/1df3485a-3b3c-4a67-8bdf-925517407844_fixed.java
@@ -1,50 +1,50 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
-            String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
-            }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+        boolean wildcard = testName.getName().equals("*"); // Use direct check for wildcard
+
+        if (wildcard) {
+            // Check if namespace matches, * matches any namespace unless restricted
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
             return equalStrings(namespaceURI, nodeNS);
         }
-            return false;
+
+        String testLocalName = testName.getName();
+        String nodeLocalName = DOMNodePointer.getLocalName(node);
+        
+        return testLocalName.equals(nodeLocalName);
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
