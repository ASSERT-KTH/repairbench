diff --git a/tmp/7c7cde1f-c1b9-4e65-9c68-e5e64df9fbb3_buggy.java b/tmp/dab30b8d-a68b-4190-a4d6-06615c8173bc_fixed.java
index 40f74f7..5deec14 100644
--- a/tmp/7c7cde1f-c1b9-4e65-9c68-e5e64df9fbb3_buggy.java
+++ b/tmp/dab30b8d-a68b-4190-a4d6-06615c8173bc_fixed.java
@@ -1,50 +1,56 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
-            String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
+        boolean wildcard = testName.equals AnyNameTest.ANY_NAME TEST;
+
+        if (wildcard) {
+            return equalStrings(namespaceURI, DOMNodePointer.getNamespaceURI(node));
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+
+        boolean matchesName = DOMNodePointer.getLocalName(node).equals(testName.getName());
         String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
-            }
-            return false;
+        return equalStrings(namespaceURI, nodeNS) && matchesName;
     }
     if (test instanceof NodeTypeTest) {
+        return handleNodeType(node, (NodeTypeTest) test);
+    }
+    if (test instanceof ProcessingInstructionTest) {
+        return handleProcessingInstruction(node, (ProcessingInstructionTest) test);
+    }
+    return false;
+}
+
+private static boolean handleNodeType(Node node, NodeTypeTest test) {
     int nodeType = node.getNodeType();
-            switch (((NodeTypeTest) test).getNodeType()) {
+    int expectedType = test.getNodeType();
+    switch (expectedType) {
         case Compiler.NODE_TYPE_NODE :
-                    return nodeType == Node.ELEMENT_NODE
-                            || nodeType == Node.DOCUMENT_NODE;
+            return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
         case Compiler.NODE_TYPE_TEXT :
-                    return nodeType == Node.CDATA_SECTION_NODE
-                        || nodeType == Node.TEXT_NODE;
+            return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
         case Compiler.NODE_TYPE_COMMENT :
             return nodeType == Node.COMMENT_NODE;
         case Compiler.NODE_TYPE_PI :
             return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
+        default:
+            return false;
+    }
 }
+
+private static boolean handleProcessingInstruction(Node node, ProcessingInstructionTest test) {
+    if (node.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE) {
         return false;
     }
-        if (test instanceof ProcessingInstructionTest) {
-            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
-                String testPI = ((ProcessingInstructionTest) test).getTarget();
+    String testPI = test.getTarget();
     String nodePI = ((ProcessingInstruction) node).getTarget();
     return testPI.equals(nodePI);
 }
\ No newline at end of file
-        }
-        return false;
-    }
