diff --git a/tmp/1fb8d827-a6f2-478f-8eec-3e0ad3d26195_buggy.java b/tmp/69e58ef4-20e3-47ac-8e1b-7c80d6aec774_fixed.java
index 40f74f7..50e4f14 100644
--- a/tmp/1fb8d827-a6f2-478f-8eec-3e0ad3d26195_buggy.java
+++ b/tmp/69e58ef4-20e3-47ac-8e1b-7c80d6aec774_fixed.java
@@ -1,50 +1,58 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+        boolean wildcard = testName.isWildcard();
         String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
-            }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+
+        if (wildcard) {
+            if (testPrefix == null) {
+                // Wildcard match, namespaces must be equal (since test has no prefix)
                 String nodeNS = DOMNodePointer.getNamespaceURI(node);
                 return equalStrings(namespaceURI, nodeNS);
+            } else {
+                // Wildcard with a prefix: cannot match any element node
+                return false;
             }
+        } else {
+            // Not a wildcard: local name and namespace must match
+            String localName = DOMNodePointer.getLocalName(node);
+            if (!testName.getName().equals(localName)) {
                 return false;
             }
+            // Check namespace URI
+            String nodeNS = DOMNodePointer.getNamespaceURI(node);
+            return equalStrings(namespaceURI, nodeNS);
+        }
+    }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
-                    return nodeType == Node.ELEMENT_NODE
-                            || nodeType == Node.DOCUMENT_NODE;
+                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
-                    return nodeType == Node.CDATA_SECTION_NODE
-                        || nodeType == Node.TEXT_NODE;
+                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
