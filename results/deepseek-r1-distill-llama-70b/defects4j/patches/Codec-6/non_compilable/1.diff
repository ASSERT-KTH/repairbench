diff --git a/tmp/8d60d898-7e4d-4522-aa9a-8e344ea75f17_buggy.java b/tmp/92c0b793-4029-4e79-a1e5-edc4d81a4374_fixed.java
index d3b3ebf..bcba250 100644
--- a/tmp/8d60d898-7e4d-4522-aa9a-8e344ea75f17_buggy.java
+++ b/tmp/92c0b793-4029-4e79-a1e5-edc4d81a4374_fixed.java
@@ -1,62 +1,17 @@
-    /**
-     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
-     * from this InputStream.
-     * 
-     * @param b
-     *            destination byte array
-     * @param offset
-     *            where to start writing the bytes
-     * @param len
-     *            maximum number of bytes to read
-     * 
-     * @return number of bytes read
-     * @throws IOException
-     *             if an I/O error occurs.
-     * @throws NullPointerException
-     *             if the byte array parameter is null
-     * @throws IndexOutOfBoundsException
-     *             if offset, len or buffer size are invalid
-     */
-    public int read(byte b[], int offset, int len) throws IOException {
-        if (b == null) {
-            throw new NullPointerException();
-        } else if (offset < 0 || len < 0) {
-            throw new IndexOutOfBoundsException();
-        } else if (offset > b.length || offset + len > b.length) {
-            throw new IndexOutOfBoundsException();
-        } else if (len == 0) {
-            return 0;
-        } else {
-            /*
-             Rationale for while-loop on (readLen == 0):
-             -----
-             Base64.readResults() usually returns > 0 or EOF (-1).  In the
-             rare case where it returns 0, we just keep trying.
-
-             This is essentially an undocumented contract for InputStream
-             implementors that want their code to work properly with
-             java.io.InputStreamReader, since the latter hates it when
-             InputStream.read(byte[]) returns a zero.  Unfortunately our
-             readResults() call must return 0 if a large amount of the data
-             being decoded was non-base64, so this while-loop enables proper
-             interop with InputStreamReader for that scenario.
-             -----
-             This is a fix for CODEC-101
-            */
+int readLen = 0;
+while (true) {
     if (!base64.hasData()) {
-                    byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
+        read more data from input stream into a temporary buffer
+        if no data read (c == -1), break and return what we have
+        process the buffer with encode/decode
     }
-                    if (doEncode) {
-                        base64.encode(buf, 0, c);
-                    } else {
-                        base64.decode(buf, 0, c);
-                    }
-                }
-            return base64.readResults(b, offset, len);
+    int currentRead = base64.readResults(...);
+    if (currentRead > 0) {
+        readLen += currentRead;
+        break;
+    } else if (currentRead < 0) {
+        break;
     }
+    // else, currentRead is 0, so we need to try again
 }
+return readLen;
\ No newline at end of file
