diff --git a/tmp/960e53a1-9ff5-4def-933a-63a425b5236b_buggy.java b/tmp/2d08a58a-7b49-47d2-aa6f-6b63f553ca0a_fixed.java
index 97f28e5..f5f8f0e 100644
--- a/tmp/960e53a1-9ff5-4def-933a-63a425b5236b_buggy.java
+++ b/tmp/2d08a58a-7b49-47d2-aa6f-6b63f553ca0a_fixed.java
@@ -1,26 +1,54 @@
     /**
      * Creates a printer that will print values to the given stream following the CSVFormat.
      * <p>
      * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation
      * and escaping with a different character) are not supported.
      * </p>
      * 
      * @param out
      *        stream to which to print. Must not be null.
      * @param format
      *        the CSV format. Must not be null.
      * @throws IOException
      *         thrown if the optional header cannot be printed.
      * @throws IllegalArgumentException
      *         thrown if the parameters of the format are inconsistent or if either out or format are null.
      */
     public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {
         Assertions.notNull(out, "out");
         Assertions.notNull(format, "format");
 
         this.out = out;
         this.format = format;
         this.format.validate();
-        // TODO: Is it a good idea to do this here instead of on the first call to a print method?
-        // It seems a pain to have to track whether the header has already been printed or not.
+
+        // Check if a header is present and print it
+        final String header = format.getHeader();
+        if (header != null) {
+            printHeader(header);
+        }
+    }
+
+    private void printHeader(final String header) throws IOException {
+        final String[] values = header.split(format.getDelimiter());
+        boolean first = true;
+        for (final String value : values) {
+            if (!first) {
+                out.append(format.getDelimiter());
+            } else {
+                first = false;
+            }
+            printValue(value);
+        }
+        out.append(format.getRecordSeparator());
+    }
+
+    private void printValue(final String value) throws IOException {
+        if (format.getQuoteChar() != null) {
+            out.append(format.getQuoteChar());
+            out.append(value.replace(String.valueOf(format.getQuoteChar()), String.valueOf(format.getEscapeChar()) + format.getQuoteChar()));
+            out.append(format.getQuoteChar());
+        } else {
+            out.append(value);
+        }
     }
\ No newline at end of file
