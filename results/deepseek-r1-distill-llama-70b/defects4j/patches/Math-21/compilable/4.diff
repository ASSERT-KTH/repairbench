diff --git a/tmp/d802d044-ad86-4db4-af78-9fa00d1eebe0_buggy.java b/tmp/817ff4ff-f075-4517-b168-8ce2816e887a_fixed.java
index 6708762..33904a9 100644
--- a/tmp/d802d044-ad86-4db4-af78-9fa00d1eebe0_buggy.java
+++ b/tmp/817ff4ff-f075-4517-b168-8ce2816e887a_fixed.java
@@ -1,99 +1,69 @@
-    /**
-     * Decompose a symmetric positive semidefinite matrix.
-     *
-     * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
-     * considered to be dependent on previous ones and are discarded.
-     * @exception NonPositiveDefiniteMatrixException if the matrix is not
-     * positive semidefinite.
-     */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
     final double[][] c = matrix.getData();
     final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
     int[] index = new int[order];
     for (int i = 0; i < order; ++i) {
         index[i] = i;
     }
 
     int r = 0;
-        for (boolean loop = true; loop;) {
+    while (r < order) {
 
-            // find maximal diagonal element
-            swap[r] = r;
-            for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
-                }
-            }
-
-
-            // swap elements
-            if (swap[r] != r) {
-                int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
-            }
-
-            // check diagonal element
-            int ir = index[r];
-            if (c[ir][ir] < small) {
-
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
-
-                // check remaining diagonal elements
+        // Find the row with the maximum absolute value in the current column
+        int maxIndex = r;
         for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+            if (Math.abs(c[index[i]][index[r]]) > Math.abs(c[index[maxIndex]][index[r]])) {
+                maxIndex = i;
             }
         }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+        // Swap the max row with the current row
+        if (maxIndex != r) {
+            int temp = index[r];
+            index[r] = index[maxIndex];
+            index[maxIndex] = temp;
+        }
+
+        final int ir = index[r];
+        final double diagonal = c[ir][ir];
 
-            } else {
+        if (Math.abs(diagonal) < small) {
+            rank = r;
+            break;
+        }
 
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
+        // Update other rows
+        final double sqrt = FastMath.sqrt(diagonal);
         b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+        final double inverse = 1.0 / sqrt;
+
         for (int i = r + 1; i < order; ++i) {
             final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
+            final double e = c[ii][ir] * inverse;
             b[i][r] = e;
             c[ii][ii] -= e * e;
             for (int j = r + 1; j < i; ++j) {
                 final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
-                        c[ii][ij] = f;
-                        c[ij][ii] = f;
+                final double v = c[ii][ij] - e * b[j][r];
+                c[ii][ij] = v;
+                c[ij][ii] = v;
             }
         }
 
-                // prepare next iteration
-                loop = ++r < order;
-            }
+        r++;
     }
 
-        // build the root matrix
+    // Build the root matrix
     rank = r;
     root = MatrixUtils.createRealMatrix(order, r);
     for (int i = 0; i < order; ++i) {
+        final int ii = index[i];
         for (int j = 0; j < r; ++j) {
-                root.setEntry(index[i], j, b[i][j]);
+            root.setEntry(ii, j, b[i][j]);
         }
     }
-
 }
\ No newline at end of file
