diff --git a/tmp/75511bfb-957e-4839-add9-05a563cfafbf_buggy.java b/tmp/cc5a3c1b-35fc-4705-b19b-eee614794502_fixed.java
index 3effef5..fcd84cf 100644
--- a/tmp/75511bfb-957e-4839-add9-05a563cfafbf_buggy.java
+++ b/tmp/cc5a3c1b-35fc-4705-b19b-eee614794502_fixed.java
@@ -1,73 +1,58 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
             DeserializationContext ctxt)
             throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
+        if (creator == null) {
+            return null;
+        }
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
-        TokenBuffer tokens = new TokenBuffer(p, ctxt);
-        tokens.writeStartObject();
+        // Collect all creator properties first
+        while (p.nextToken() != JsonToken.START_OBJECT) {
+            // Shouldn't happen; expecting START_OBJECT
+        }
+        JsonToken t;
+        do {
+            t = p.nextToken();
+            if (t != JsonToken.FIELD_NAME) break;
 
-        JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+            // Check if it's a creator property
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                p.nextToken();
+                Object value = creatorProp.deserialize(p, ctxt);
+                if (buffer.assignParameter(creatorProp, value)) {
+                    // Attempt to create the bean
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         continue;
                     }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
+                    // Assign unwrapped properties
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
-                }
-                continue;
-            }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
-                continue;
-            }
-            // regular property? needs buffering
-            SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
-            }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, null);
                 }
+            } else {
+                // Buffer other properties for later
+                p.nextToken();
+                buffer.bufferPropertyValue(p.getText(), p.getValue());
             }
+        } while (t != JsonToken.END_OBJECT);
 
-        // We hit END_OBJECT, so:
+        // Create the bean after all creator properties are processed
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
-        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, null);
     }
\ No newline at end of file
