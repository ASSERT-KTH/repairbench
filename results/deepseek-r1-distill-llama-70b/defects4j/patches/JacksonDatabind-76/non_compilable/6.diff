diff --git a/tmp/a5814faa-4f1b-4339-9da3-5e2fed3c9912_buggy.java b/tmp/0391bf49-574b-4d23-8d29-88aa3ef5ee88_fixed.java
index 3effef5..4a60351 100644
--- a/tmp/a5814faa-4f1b-4339-9da3-5e2fed3c9912_buggy.java
+++ b/tmp/0391bf49-574b-4d23-8d29-88aa3ef5ee88_fixed.java
@@ -1,73 +1,88 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
             DeserializationContext ctxt)
             throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
+        SettableBeanProperty[] creatorProps = new SettableBeanProperty[creator.valueInstantiateProperties().size()];
+        int assignedCount = 0;
+
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
+
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                    assignedCount++;
+                }
+                // Do not process further until all creator parameters are assigned
+                if (assignedCount == creatorProps.length) {
+                    // All creator parameters have been assigned
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+                        return null;
                     }
+                    // Consume remaining tokens until end of object
                     while (t == JsonToken.FIELD_NAME) {
                         p.nextToken();
                         tokens.copyCurrentStructure(p);
                         t = p.nextToken();
                     }
                     tokens.writeEndObject();
+
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
+
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
+
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
+
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
+
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
+
             // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
-        // We hit END_OBJECT, so:
+        // If all tokens are processed, try to build the bean
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
