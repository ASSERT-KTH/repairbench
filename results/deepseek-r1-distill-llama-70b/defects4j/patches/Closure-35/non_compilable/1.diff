diff --git a/tmp/53a31c38-388e-48cf-9147-bc8fe7bb1f4a_buggy.java b/tmp/f43c618e-9eb3-4fba-937c-3268e2e4bfb1_fixed.java
index d57736b..3d9ed3c 100644
--- a/tmp/53a31c38-388e-48cf-9147-bc8fe7bb1f4a_buggy.java
+++ b/tmp/f43c618e-9eb3-4fba-937c-3268e2e4bfb1_fixed.java
@@ -1,39 +1,21 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+    JSType constraintNotNull = constraint.restrictByNotNullOrUndefined();
+    if (constraintNotNull.isRecordType()) {
+      ObjectType constraintObj = ObjectType.cast(constraintNotNull);
+      JSType typeRestr = type.restrictByNotNullOrUndefined();
+      if (typeRestr.isObjectType()) {
+        ObjectType objType = ObjectType.cast(typeRestr);
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
-            objType.defineInferredProperty(prop, typeToInfer, null);
+            objType.defineInferredProperty(prop, propType, null);
           }
         }
       }
     }
   }
\ No newline at end of file
