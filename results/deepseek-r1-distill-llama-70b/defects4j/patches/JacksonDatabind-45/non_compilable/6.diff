diff --git a/tmp/00139320-f6fb-4bf1-a62e-addc4f5fc2c3_buggy.java b/tmp/7a67511d-14f2-49cc-8555-e08c86456f29_fixed.java
index 0dbce00..db9e566 100644
--- a/tmp/00139320-f6fb-4bf1-a62e-addc4f5fc2c3_buggy.java
+++ b/tmp/7a67511d-14f2-49cc-8555-e08c86456f29_fixed.java
@@ -1,33 +1,59 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property != null) {
             JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());
             if (format != null) {
 
+                // Handle Shape.ANY case without pattern, locale, or timezone
+                if (format.getShape() == JsonFormat.Shape.ANY) {
+                    if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
+                        // Existing handling for when pattern, locale, or timezone is present
+                        TimeZone tz = format.getTimeZone();
+                        final String pattern = format.getPattern();
+                        final Locale loc = format.getLocale();
+                        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+                        if (tz == null) {
+                            tz = serializers.getTimeZone();
+                        }
+                        df.setTimeZone(tz);
+                        return withFormat(Boolean.FALSE, df);
+                    } else {
+                        // Check the SerializationFeature.WRITE_DATES_AS_TIMESTAMPS setting
+                        if (serializers.getSerializationFeature DefaultManager_instance,
+                                SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {
+                            return withFormat(Boolean.TRUE, null);
+                        } else {
+                            // Use default string format without custom pattern, using default locale and timezone
+                            final String defaultPattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                            final Locale defaultLocale = serializers.getLocale();
+                            TimeZone defaultTz = serializers.getTimeZone();
+                            SimpleDateFormat defaultDf = new SimpleDateFormat(defaultPattern, defaultLocale);
+                            defaultDf.setTimeZone(defaultTz);
+                            return withFormat(Boolean.FALSE, defaultDf);
+                        }
+                    }
+                }
+
                 // Simple case first: serialize as numeric timestamp?
                 JsonFormat.Shape shape = format.getShape();
                 if (shape.isNumeric()) {
                     return withFormat(Boolean.TRUE, null);
                 }
 
                 if (format.getShape() == JsonFormat.Shape.STRING) {
                     TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-                    final Locale loc = format.hasLocale()
-                                    ? format.getLocale()
-                                    : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+                    final String pattern = format.getPattern();
+                    final Locale loc = format.getLocale();
+                    SimpleDateFormat df = new SimpleDateFormat(pattern != null ? pattern : StdDateFormat.DATE_FORMAT_STR_ISO8601, loc);
                     if (tz == null) {
                         tz = serializers.getTimeZone();
                     }
                     df.setTimeZone(tz);
                     return withFormat(Boolean.FALSE, df);
                 }
             }
         }
         return this;
     }
\ No newline at end of file
