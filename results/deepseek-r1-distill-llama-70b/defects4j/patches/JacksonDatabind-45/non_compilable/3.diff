diff --git a/tmp/73365904-7a4c-451b-b899-c357785a1bc7_buggy.java b/tmp/c7806b4c-6a7d-4c07-99dc-8b239a063672_fixed.java
index 0dbce00..46e9ed8 100644
--- a/tmp/73365904-7a4c-451b-b899-c357785a1bc7_buggy.java
+++ b/tmp/c7806b4c-6a7d-4c07-99dc-8b239a063672_fixed.java
@@ -1,33 +1,37 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
+        BeanProperty property) throws JsonMappingException {
     if (property != null) {
         JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
-            if (format != null) {
-
-            	// Simple case first: serialize as numeric timestamp?
+        if (format == null) {
+            // Use default based on SerializationFeature.WRITE_DATES_AS_TIMESTAMPS
+            Boolean useTimestamp = (serializers.getSerializationFeatures() & SerializationFeature.WRITE_DATES_AS_TIMESTAMPS) != 0;
+            if (useTimestamp != null) {
+                return withFormat(useTimestamp, serializers.getDateFormat());
+            }
+        } else {
+            // Existing logic for handling explicit @JsonFormat annotations
             JsonFormat.Shape shape = format.getShape();
             if (shape.isNumeric()) {
                 return withFormat(Boolean.TRUE, null);
             }
 
             if (format.getShape() == JsonFormat.Shape.STRING) {
                 TimeZone tz = format.getTimeZone();
                 final String pattern = format.hasPattern()
                                 ? format.getPattern()
                                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
                 final Locale loc = format.hasLocale()
                                 ? format.getLocale()
                                 : serializers.getLocale();
                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                 if (tz == null) {
                     tz = serializers.getTimeZone();
                 }
                 df.setTimeZone(tz);
                 return withFormat(Boolean.FALSE, df);
             }
         }
     }
     return this;
 }
\ No newline at end of file
