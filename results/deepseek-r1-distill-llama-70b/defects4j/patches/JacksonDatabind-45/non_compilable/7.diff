diff --git a/tmp/ea83e2b7-a559-4cf6-9718-f9031b4943fb_buggy.java b/tmp/6efa1da6-a409-4349-b5b2-a7a463309859_fixed.java
index 0dbce00..262cd92 100644
--- a/tmp/ea83e2b7-a559-4cf6-9718-f9031b4943fb_buggy.java
+++ b/tmp/6efa1da6-a409-4349-b5b2-a7a463309859_fixed.java
@@ -1,33 +1,60 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property != null) {
             JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
             if (format != null) {
-
                 // Simple case first: serialize as numeric timestamp?
                 JsonFormat.Shape shape = format.getShape();
                 if (shape.isNumeric()) {
                     return withFormat(Boolean.TRUE, null);
                 }
 
-                if (format.getShape() == JsonFormat.Shape.STRING) {
+                // Handle Shape.STRING or other non-numeric cases
+                if (shape == JsonFormat.Shape.STRING) {
                     TimeZone tz = format.getTimeZone();
                     final String pattern = format.hasPattern()
                                     ? format.getPattern()
                                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
                     final Locale loc = format.hasLocale()
                                     ? format.getLocale()
                                     : serializers.getLocale();
                     SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                     if (tz == null) {
                         tz = serializers.getTimeZone();
                     }
                     df.setTimeZone(tz);
                     return withFormat(Boolean.FALSE, df);
                 }
+
+                // Infer shape based on annotation presence and user configuration
+                // Default to string format unless WRITE_DATES_AS_TIMESTAMPS is enabled
+                if (format.getShape() == JsonFormat.Shape.ANY) {
+                    // Check if the user has enabled WRITE_DATES_AS_TIMESTAMPS
+                    if (serializers.getSerializationFeatureEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {
+                        return withFormat(Boolean.TRUE, null);
+                    } else {
+                        // Use default date format
+                        final String pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                        final Locale loc = serializers.getLocale();
+                        TimeZone tz = serializers.getTimeZone();
+                        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+                        df.setTimeZone(tz);
+                        return withFormat(Boolean.FALSE, df);
                     }
                 }
-        return this;
+            }
+        }
+        // When no format is specified, use the user's configuration
+        if (serializers.getSerializationFeatureEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {
+            return withFormat(Boolean.TRUE, null);
+        } else {
+            final String pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+            final Locale loc = serializers.getLocale();
+            TimeZone tz = serializers.getTimeZone();
+            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+            df.setTimeZone(tz);
+            return withFormat(Boolean.FALSE, df);
+        }
     }
\ No newline at end of file
