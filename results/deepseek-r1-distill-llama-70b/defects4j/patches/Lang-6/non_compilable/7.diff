diff --git a/tmp/12ab7104-ba47-4640-a395-d6e5c45ff8a5_buggy.java b/tmp/ff9d8ae6-7bcd-4620-8547-f7d594f0929b_fixed.java
index 4c1ed27..87cc7e7 100644
--- a/tmp/12ab7104-ba47-4640-a395-d6e5c45ff8a5_buggy.java
+++ b/tmp/ff9d8ae6-7bcd-4620-8547-f7d594f0929b_fixed.java
@@ -1,32 +1,40 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
+        if (pos + 1 < len && Character.isHighSurrogate(input.charAt(pos))) {
+            // Check if we have a high surrogate followed by a low surrogate
+            if (Character.isLowSurrogate(input.charAt(pos + 1))) {
+                // Form the code point
+                int codePoint = input.charAt(pos);
+                codePoint = codePoint << 10;
+                codePoint |= input.charAt(pos + 1);
+                // Translate as code point
+                int consumed = translateCodePoint(codePoint, out);
+                if (consumed == 0) {
+                    // Write as a single char array (could be more than one char)
+                    char[] c = Character.toChars(codePoint);
+                    out.write(c);
+                }
+                pos += 2;
+                continue;
+            }
+        }
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
             char[] c = Character.toChars(Character.codePointAt(input, pos));
             out.write(c);
             pos += c.length;
             continue;
         }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
         for (int pt = 0; pt < consumed; pt++) {
             pos += Character.charCount(Character.codePointAt(input, pos));
         }
     }
 }
\ No newline at end of file
