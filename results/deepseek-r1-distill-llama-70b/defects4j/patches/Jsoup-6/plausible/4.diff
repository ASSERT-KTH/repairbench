diff --git a/tmp/e347303a-1af8-4d3c-af0c-ff4a29121b3c_buggy.java b/tmp/eed97145-0c8a-4e53-b284-62156e96f767_fixed.java
index 99141e0..edf3576 100644
--- a/tmp/e347303a-1af8-4d3c-af0c-ff4a29121b3c_buggy.java
+++ b/tmp/eed97145-0c8a-4e53-b284-62156e96f767_fixed.java
@@ -1,33 +1,39 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    StringBuilder accum = new StringBuilder();
+    int lastPos = 0;
 
     while (m.find()) {
+        int start = m.start();
+        int end = m.end();
+        accum.append(string.substring(lastPos, start));
+
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
                 int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
                 charval = Integer.valueOf(num, base);
             } catch (NumberFormatException e) {
-                } // skip
+                // skip invalid entities
+            }
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+        if (charval != -1 && charval <= 0xFFFF) {
+            accum.append((char) charval);
         } else {
-                m.appendReplacement(accum, m.group(0));
+            accum.append(string.substring(start, end));
         }
+
+        lastPos = end;
     }
-        m.appendTail(accum);
+    accum.append(string.substring(lastPos));
     return accum.toString();
 }
\ No newline at end of file
