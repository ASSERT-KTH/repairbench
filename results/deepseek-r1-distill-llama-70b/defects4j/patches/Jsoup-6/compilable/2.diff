diff --git a/tmp/be0490d5-99ed-42dc-9cd2-306b88b154e8_buggy.java b/tmp/31951a96-8c5c-4d62-b20e-07f727802cd6_fixed.java
index 99141e0..415a855 100644
--- a/tmp/be0490d5-99ed-42dc-9cd2-306b88b154e8_buggy.java
+++ b/tmp/31951a96-8c5c-4d62-b20e-07f727802cd6_fixed.java
@@ -1,33 +1,39 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    Matcher m = unescapePattern.matcher(string);
+    StringBuffer accum = new StringBuffer(string.length());
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                int base = m.group(2) != null ? 16 : 10;
                 charval = Integer.valueOf(num, base);
             } catch (NumberFormatException e) {
-                } // skip
+                // Skip invalid numeric entities
+            }
         } else {
             String name = m.group(1);
-                if (full.containsKey(name))
+            if (full.containsKey(name)) {
                 charval = full.get(name);
             }
+        }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+        if (charval != -1) {
+            if (charval > 0xFFFF) {
+                // Handle characters beyond 16-bit (if necessary)
+                continue; // or handle as needed
+            }
             String c = Character.toString((char) charval);
             m.appendReplacement(accum, c);
         } else {
+            // If no valid character found, append the original string
             m.appendReplacement(accum, m.group(0));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
