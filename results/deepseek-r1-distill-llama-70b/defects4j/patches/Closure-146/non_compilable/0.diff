diff --git a/tmp/5a550a99-ba4e-475b-8d3b-888ac659310f_buggy.java b/tmp/939230cb-b934-49d7-a133-d3d7b53b4f85_fixed.java
index 210695a..7b7fd1a 100644
--- a/tmp/5a550a99-ba4e-475b-8d3b-888ac659310f_buggy.java
+++ b/tmp/939230cb-b934-49d7-a133-d3d7b53b4f85_fixed.java
@@ -1,32 +1,41 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
       case UNKNOWN:
-        return new TypePair(this, that);
+        // Check if either type is NO_TYPE and return appropriately
+        JSType typeA = this;
+        JSType typeB = that;
+        if (typeA == NO_TYPE) {
+          typeA = null;
+        }
+        if (typeB == NO_TYPE) {
+          typeB = null;
+        }
+        return new TypePair(typeA, typeB);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
