diff --git a/tmp/257e600a-186e-4e80-8fe8-db7553698349_buggy.java b/tmp/19b38d46-07c5-4756-a83d-a1ab57e389a4_fixed.java
index eb9ce9f..077fbb1 100644
--- a/tmp/257e600a-186e-4e80-8fe8-db7553698349_buggy.java
+++ b/tmp/19b38d46-07c5-4756-a83d-a1ab57e389a4_fixed.java
@@ -1,60 +1,44 @@
-    /**
-     * Look for a type declaration on a property assignment
-     * (in an ASSIGN or an object literal key).
-     *
-     * @param info The doc info for this property.
-     * @param lValue The l-value node.
-     * @param rValue The node that {@code n} is being initialized to,
-     *     or {@code null} if this is a stub declaration.
-     */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+      }
+      if (rValue != null) {
+        if (rValue.isFunction() &&
             shouldUseFunctionLiteralType(
                 JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
           return rValue.getJSType();
-      } else if (info != null) {
-        if (info.hasEnumParameterType()) {
-          if (rValue != null && rValue.isObjectLit()) {
+        }
+        if (rValue.isObjectLit() && info != null && info.hasEnumParameterType()) {
           return rValue.getJSType();
-          } else {
-            return createEnumTypeFromNodes(
-                rValue, lValue.getQualifiedName(), info, lValue);
         }
-        } else if (info.isConstructor() || info.isInterface()) {
+      }
+      if (info != null) {
+        if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+        } else if (info.isConstant()) {
           if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
+            JSType rValueType = rValue.getJSType();
+            if (rValueType != null && !rValueType.isUnknownType()) {
+              if (rValue.getJSType().isCast()) {
                 return rValue.getJSType();
-              } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+              }
+              if (rValue.isOr()) {
                 Node firstClause = rValue.getFirstChild();
                 Node secondClause = firstClause.getNext();
-                boolean namesMatch = firstClause.isName()
-                    && lValue.isName()
-                    && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
+                if (firstClause.isName() && lValue.isName() &&
+                    firstClause.getString().equals(lValue.getString())) {
+                  JSType secondClauseType = secondClause.getJSType();
+                  if (secondClauseType != null && !secondClauseType.isUnknownType()) {
+                    return secondClauseType;
                   }
                 }
               }
+              return rValueType;
+            }
           }
         }
       }
-
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
