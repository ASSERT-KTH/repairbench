diff --git a/tmp/dedb4a7e-2627-4810-8c64-bb72b6762dd9_buggy.java b/tmp/b9fe714b-6413-4451-ad47-cef780a9f1a3_fixed.java
index 56b2d66..b4d7bc6 100644
--- a/tmp/dedb4a7e-2627-4810-8c64-bb72b6762dd9_buggy.java
+++ b/tmp/b9fe714b-6413-4451-ad47-cef780a9f1a3_fixed.java
@@ -1,45 +1,46 @@
-    /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
-     */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
         columnsToDrop.add(0);
 
         // positive cost non-artificial variables
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
-        // non-basic artificial variables
+        // non-basic artificial variables that are not in the basis
         for (int i = 0; i < getNumArtificialVariables(); i++) {
             int col = i + getArtificialVariableOffset();
             if (getBasicRow(col) == null) {
                 columnsToDrop.add(col);
             }
         }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        // Create a new matrix excluding the columns to drop
+        int targetWidth = getWidth() - columnsToDrop.size();
+        int targetHeight = getHeight() - 1;
+        double[][] newMatrix = new double[targetHeight][targetWidth];
+
+        // Copy data excluding dropped columns and the first row (phase 1 objective)
+        for (int row = 1; row < getHeight(); row++) {
+            int colIndex = 0;
+            for (int col = 0; col < getWidth(); col++) {
+                if (!columnsToDrop.contains(col)) {
+                    newMatrix[row - 1][colIndex++] = tableau.getEntry(row, col);
                 }
             }
         }
 
+        // Update the tableau and labels
+        this.tableau = new Array2DRowRealMatrix(newMatrix);
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
             columnLabels.remove((int) columnsToDrop.get(i));
         }
-
-        this.tableau = new Array2DRowRealMatrix(matrix);
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
