diff --git a/tmp/395b8ea6-680f-4ce5-80bc-2415f413e849_buggy.java b/tmp/6b668f71-a007-4b19-ab72-5a965a9f7c4f_fixed.java
index 56b2d66..ccabdcb 100644
--- a/tmp/395b8ea6-680f-4ce5-80bc-2415f413e849_buggy.java
+++ b/tmp/6b668f71-a007-4b19-ab72-5a965a9f7c4f_fixed.java
@@ -1,45 +1,65 @@
-    /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
-     */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
-        List<Integer> columnsToDrop = new ArrayList<Integer>();
+    List<Integer> columnsToDrop = new ArrayList<>();
+
+    // Check if the first column is an artificial variable before dropping it
+    boolean isArtificial = false;
+    for (int i = 0; i < getNumArtificialVariables(); i++) {
+        if (i + getArtificialVariableOffset() == 0) {
+            isArtificial = true;
+            break;
+        }
+    }
+    if (isArtificial) {
         columnsToDrop.add(0);
+    }
 
-        // positive cost non-artificial variables
+    // Add positive cost non-artificial variables
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
         final double entry = tableau.getEntry(0, i);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
-        // non-basic artificial variables
+    // Add non-basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
+        if (col >= getWidth() || getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+    // Remove duplicate columns to avoid issues
+    Set<Integer> uniqueColumns = new HashSet<>(columnsToDrop);
+    columnsToDrop.clear();
+    columnsToDrop.addAll(uniqueColumns);
+
+    // Create the new matrix
+    int newWidth = getWidth() - columnsToDrop.size();
+    int newHeight = getHeight() - 1;
+    double[][] matrix = new double[newHeight][newWidth];
+
     for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+        int colIndex = 0;
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+                matrix[i - 1][colIndex++] = tableau.getEntry(i, j);
             }
         }
     }
 
+    // Remove columns from labels
     for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+        int colToRemove = columnsToDrop.get(i);
+        if (colToRemove < columnLabels.size()) {
+            columnLabels.remove(colToRemove);
+        }
     }
 
     this.tableau = new Array2DRowRealMatrix(matrix);
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
