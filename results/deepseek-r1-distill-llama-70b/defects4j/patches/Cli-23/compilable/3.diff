diff --git a/tmp/5be456a4-81be-49bf-a510-95ef154e5521_buggy.java b/tmp/95020b45-377b-4fb4-b20d-86a55b4944f2_fixed.java
index 227a4ef..9e5ef2a 100644
--- a/tmp/5be456a4-81be-49bf-a510-95ef154e5521_buggy.java
+++ b/tmp/95020b45-377b-4fb4-b20d-86a55b4944f2_fixed.java
@@ -1,48 +1,38 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // All following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+        // Add padding to the remaining text
+        text = padding + rtrim(text.substring(pos)).replaceAll("\\s+$", "");
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         } else
         if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // If pos hasn't changed, we can't wrap here; append the rest
+            sb.append(text.substring(0, pos)).append(defaultNewLine);
+            sb.append(text.substring(pos));
+            return sb;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
