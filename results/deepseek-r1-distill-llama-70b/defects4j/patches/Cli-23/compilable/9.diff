diff --git a/tmp/03a7849e-84c5-4664-94e7-f9c92569df13_buggy.java b/tmp/1ff7ef70-bb54-4b2c-b538-3865e5cf2901_fixed.java
index 227a4ef..813c101 100644
--- a/tmp/03a7849e-84c5-4664-94e7-f9c92569df13_buggy.java
+++ b/tmp/1ff7ef70-bb54-4b2c-b538-3865e5cf2901_fixed.java
@@ -1,48 +1,42 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            int lastPos = pos;
     text = padding + text.substring(pos).trim();
+
+    while (true)
+    {
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
-
+            sb.append(rtrim(text));
             return sb;
-            } else
-            if (pos == lastPos)
+        }
+
+        if (pos == 0)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // The text cannot be wrapped into the desired width, so add the remaining text and return
+            sb.append(rtrim(text)).append(defaultNewLine);
+            return sb;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        int lastPos = 0;
+        while (pos > lastPos)
+        {
+            sb.append(rtrim(text.substring(lastPos, pos))).append(defaultNewLine);
+            lastPos = pos;
+            text = createPadding(nextLineTabStop) + text.substring(pos).trim();
+            pos = findWrapPos(text, width, 0);
+        }
     }
 }
\ No newline at end of file
