diff --git a/tmp/83c3c5fe-4916-41dd-8597-235d050087ae_buggy.java b/tmp/708fdacc-fe35-4e4d-81c3-69cc1949dd1f_fixed.java
index 227a4ef..fd36d46 100644
--- a/tmp/83c3c5fe-4916-41dd-8597-235d050087ae_buggy.java
+++ b/tmp/708fdacc-fe35-4e4d-81c3-69cc1949dd1f_fixed.java
@@ -1,48 +1,33 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+                                             int nextLineTabStop, String text) {
         int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+        if (pos == -1) {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            int lastPos = pos;
+        while (true) {
             text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
+            if (pos == -1) {
                 sb.append(text);
+                return sb;
+            }
 
+            if (pos <= text.length() && text.substring(pos).trim().isEmpty()) {
+                sb.append(rtrim(text));
                 return sb;
-            } else
-            if (pos == lastPos)
-            {
+            }
+
+            if (pos == lastPos) {
                 throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
