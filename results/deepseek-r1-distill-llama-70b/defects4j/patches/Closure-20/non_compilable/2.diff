diff --git a/tmp/616d917f-f432-4712-9505-17a99add4a0f_buggy.java b/tmp/2cd3c08c-19ae-46ef-a3b1-3fe1441dd521_fixed.java
index d4e6d48..e82ce92 100644
--- a/tmp/616d917f-f432-4712-9505-17a99add4a0f_buggy.java
+++ b/tmp/2cd3c08c-19ae-46ef-a3b1-3fe1441dd521_fixed.java
@@ -1,23 +1,22 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+          callTarget.getString().equals("String") &&
+          n.getChildrenCount() == 2) {  // Check for exactly one argument
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value != null && isSafeLiteral(value)) {  // Check if argument is a safe literal
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
 }
+
+private boolean isSafeLiteral(Node node) {
+    return node.isStringLit() || node.isNumberLit() || node.isBooleanLit() || node.isNullLit() || node.isUndefinedLit();
+}
\ No newline at end of file
