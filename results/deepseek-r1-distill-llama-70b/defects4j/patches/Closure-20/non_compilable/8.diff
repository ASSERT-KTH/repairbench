diff --git a/tmp/eb69faa2-a4a7-4dce-b23f-3b84be78ae06_buggy.java b/tmp/2f356eb0-78c1-4ac0-bcc5-0eb40b9bdfe2_fixed.java
index d4e6d48..03a4c86 100644
--- a/tmp/eb69faa2-a4a7-4dce-b23f-3b84be78ae06_buggy.java
+++ b/tmp/2f356eb0-78c1-4ac0-bcc5-0eb40b9bdfe2_fixed.java
@@ -1,23 +1,21 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
       callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+    // Fold String(a) to '' + (a) only when there's exactly one argument
     Node value = callTarget.getNext();
-      if (value != null) {
+    if (value != null && value.isArgumentList() && value.getChildrenCount() == 1) {
+      Node argument = value.getFirstChild();
+      if (argument != null) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
-            value.detachFromParent());
+            argument.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
+  }
   return n;
 }
\ No newline at end of file
