diff --git a/tmp/5380717e-97fc-4160-8859-04069fd23d06_buggy.java b/tmp/9c02b32a-97e0-4147-980d-9b039da40005_fixed.java
index d4e6d48..6eb0695 100644
--- a/tmp/5380717e-97fc-4160-8859-04069fd23d06_buggy.java
+++ b/tmp/9c02b32a-97e0-4147-980d-9b039da40005_fixed.java
@@ -1,23 +1,31 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+    // Fold String(...) to '' + ... which allows further optimizations;
+    // handles multiple arguments by chaining the add operations.
+    NodeParentNode parent = n.getParent();
+    Node next = callTarget.getNext();
+    if (next != null) {
+      // Collect all arguments into a list to chain their addition.
+      List<Node> args = new ArrayList<>();
+      for (Node arg = next; arg != null; arg = arg.getNext()) {
+        args.add(arg.detachFromParent());
+      }
+      
+      // Create the chain of additions: '' + arg1 + arg2 + ... + argN
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
+          args.get(0));
+      for (int i = 1; i < args.size(); i++) {
+        addition = IR.add(addition, args.get(i)).srcref(addition);
+      }
+      
+      parent.replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
