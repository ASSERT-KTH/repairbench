diff --git a/tmp/f223f45c-9ee4-41af-ae09-38990394025c_buggy.java b/tmp/71478436-b18e-4cef-aa45-23136c3bcab3_fixed.java
index d4e6d48..aeffb7f 100644
--- a/tmp/f223f45c-9ee4-41af-ae09-38990394025c_buggy.java
+++ b/tmp/71478436-b18e-4cef-aa45-23136c3bcab3_fixed.java
@@ -1,23 +1,18 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+        callTarget.getString().equals("String") &&
+        n.getChildCount() == 2) { // Ensure only one argument is present
     Node value = callTarget.getNext();
-      if (value != null) {
+    if (value != null && (value.isNumber() || value.isString())) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
           value.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
