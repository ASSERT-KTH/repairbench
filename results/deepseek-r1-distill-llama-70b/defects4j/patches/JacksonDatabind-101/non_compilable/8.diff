diff --git a/tmp/b342709f-cc7c-4704-93c3-cc6c5ae61ed1_buggy.java b/tmp/945cb61a-4c8a-4b6f-a591-9da5d60d3f92_fixed.java
index e81a2c6..7b4b000 100644
--- a/tmp/b342709f-cc7c-4704-93c3-cc6c5ae61ed1_buggy.java
+++ b/tmp/945cb61a-4c8a-4b6f-a591-9da5d60d3f92_fixed.java
@@ -1,102 +1,106 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
     throws IOException
 {
-        // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
-        //    value itself is NOT passed via `CreatorProperty` (which isn't supported).
-        //    Ok however to pass via setter or field.
-        
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+        p.nextToken();
+
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                // Last creator property to set?
             if (buffer.assignParameter(creatorProp,
                     _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
+                t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     bean = wrapInstantiationProblem(e, ctxt);
                 }
-                    // [databind#631]: Assign current value, to be accessible by custom serializers
                 p.setCurrentValue(bean);
-                    // if so, need to copy all remaining tokens into buffer
+
+                if (t == JsonToken.END_OBJECT) {
+                    // If no more properties, proceed
+                    tokens.writeEndObject();
+                    bean = processUnwrappedAndReturn(p, ctxt, bean, tokens);
+                    return bean;
+                }
+
+                // Skip the next token if it's FIELD_NAME and hasn't been processed
+                boolean isNextField = (t == JsonToken.FIELD_NAME);
+                t = p.nextToken();
                 while (t == JsonToken.FIELD_NAME) {
-                        // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
+                    processFieldAfterCreatorProp(p, ctxt, propName, tokens, t);
                     t = p.nextToken();
                 }
-                    // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some
-                    //    problems if we maintain invariants
+                if (isNextField) { // Ensure we don't miss the next token after the last FIELD_NAME
+                    p.nextToken();
+                }
                 tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        // !!! 08-Jul-2011, tatu: Could probably support; but for now
-                        //   it's too complicated, so bail out
-                        ctxt.reportInputMismatch(creatorProp,
-                                "Cannot create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                return processUnwrappedAndReturn(p, ctxt, bean, tokens);
             }
             continue;
         }
-            // Object Id property?
+
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));
             continue;
         }
-            // Things marked as ignorable should not be passed to any setter
+
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
-            // 29-Nov-2016, tatu: probably should try to avoid sending content
-            //    both to any setter AND buffer... but, for now, the only thing
-            //    we can do.
-            // how about any setter? We'll get copies but...
-            if (_anySetter == null) {
-                // but... others should be passed to unwrapped property deserializers
-                tokens.writeFieldName(propName);
-                tokens.copyCurrentStructure(p);
-            } else {
-                // Need to copy to a separate buffer first
+
+        if (_anySetter != null) {
             TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
             tokens.writeFieldName(propName);
             tokens.append(b2);
-                try {
             buffer.bufferAnyProperty(_anySetter, propName,
                     _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
-                } catch (Exception e) {
-                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                }
-                continue;
+        } else {
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
         }
     }
 
-        // We hit END_OBJECT, so:
     Object bean;
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
-            wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+        return wrapInstantiationProblem(e, ctxt);
     }
+    tokens.writeEndObject();
+
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
+
+private Object processUnwrappedAndReturn(JsonParser p, DeserializationContext ctxt, Object bean, TokenBuffer tokens) {
+    if (bean.getClass() != _beanType.getRawClass()) {
+        ctxt.reportInputMismatch(null, "Cannot create polymorphic instances with unwrapped values");
+        return null;
+    }
+    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+}
+
+private void processFieldAfterCreatorProp(JsonParser p, DeserializationContext ctxt, String propName, TokenBuffer tokens, JsonToken t) {
+    if (t == JsonToken.FIELD_NAME) {
+        String name = p.getCurrentName();
+        p.nextToken();
+        tokens.writeFieldName(name);
+        tokens.copyCurrentStructure(p);
+    }
+}
\ No newline at end of file
