diff --git a/tmp/556619f3-20af-4daf-a57d-4caf0e71ec9a_buggy.java b/tmp/923a952e-a07f-454c-bada-9e8249b6595a_fixed.java
index 5abdeb5..0f49d70 100644
--- a/tmp/556619f3-20af-4daf-a57d-4caf0e71ec9a_buggy.java
+++ b/tmp/923a952e-a07f-454c-bada-9e8249b6595a_fixed.java
@@ -1,29 +1,16 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // Exclude only top-level assignment statements
+          !(parent.isAssign() && parent.getParent().isStmt() && parent.getFirstChild() == n)) {
         numUsesWithinCfgNode++;
       }
     }
-
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
