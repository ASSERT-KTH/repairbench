diff --git a/tmp/4fa3c295-6e5e-4947-a5d9-e7c22bcd6152_buggy.java b/tmp/95f562e9-0cda-4c60-a761-171fc81389db_fixed.java
index 5abdeb5..29db1c8 100644
--- a/tmp/4fa3c295-6e5e-4947-a5d9-e7c22bcd6152_buggy.java
+++ b/tmp/95f562e9-0cda-4c60-a761-171fc81389db_fixed.java
@@ -1,29 +1,24 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+              !(isTopLevelAssign(parent) && parent.getFirstChild() == n)) {
+              // Don't count lhs of top-level assignment
               numUsesWithinCfgNode++;
           }
         }
 
+        private boolean isTopLevelAssign(Node parent) {
+          return parent.isAssign() &&
+              (parent.getParent().isExprStmt() ||
+               parent.getParent().isAssignmentExpr());
+        }
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
