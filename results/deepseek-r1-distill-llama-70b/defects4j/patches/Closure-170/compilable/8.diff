diff --git a/tmp/59f8e074-7ce4-4658-be88-00c6ab543f30_buggy.java b/tmp/823cc150-cb6b-48d0-898f-482d4b88c90b_fixed.java
index 5abdeb5..8437e3d 100644
--- a/tmp/59f8e074-7ce4-4658-be88-00c6ab543f30_buggy.java
+++ b/tmp/823cc150-cb6b-48d0-898f-482d4b88c90b_fixed.java
@@ -1,29 +1,25 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        boolean isAssignmentTarget = false;
+        for (Node p = n.getParent(); p != null; p = p.getParent()) {
+          if (p.isAssign() && p.getFirstChild() == n) {
+            isAssignmentTarget = true;
+            break;
+          }
+        }
+        if (!isAssignmentTarget) {
           numUsesWithinCfgNode++;
         }
       }
+    }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
