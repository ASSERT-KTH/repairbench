diff --git a/tmp/09c16510-1a2e-440c-81b9-250ada6e6a4b_buggy.java b/tmp/32f1bcad-27b1-4b4a-99e3-c0864ff8f556_fixed.java
index 5abdeb5..0c1d4be 100644
--- a/tmp/09c16510-1a2e-440c-81b9-250ada6e6a4b_buggy.java
+++ b/tmp/32f1bcad-27b1-4b4a-99e3-c0864ff8f556_fixed.java
@@ -1,29 +1,30 @@
     /**
-     * Computes the number of uses of the variable varName and store it in
+     * Computes the number of uses of the variable varName and stores it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName) && !isLHSOfAssignment(n)) {
             numUsesWithinCfgNode++;
           }
         }
-
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
+
+    private boolean isLHSOfAssignment(Node n) {
+      Node current = n.getParent();
+      while (current != null) {
+        if (current.isAssign() && current.getFirstChild() == n) {
+          return true;
+        }
+        current = current.getParent();
+      }
+      return false;
+    }
\ No newline at end of file
