diff --git a/tmp/108e21d8-584d-4f18-a62a-7c3241e26497_buggy.java b/tmp/8e127299-4aef-4edd-aeb2-0f3687f44396_fixed.java
index e0ecec8..055d1b2 100644
--- a/tmp/108e21d8-584d-4f18-a62a-7c3241e26497_buggy.java
+++ b/tmp/8e127299-4aef-4edd-aeb2-0f3687f44396_fixed.java
@@ -1,35 +1,44 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
       // If there are no parameters left in the list, then the while loop
       // above implies that this must be a var_args function.
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
+
+    // Handle variadic functions and check remaining arguments
+    if (maxArgs == Integer.MAX_VALUE) {
+        // This function is variadic; check remaining arguments against the variadic parameter type
+        JSType variadicType = getJSType(parameter);
+        while (arguments.hasNext()) {
+            argument = arguments.next();
+            ordinal++;
+            validator.expectArgumentMatchesParameter(t, argument,
+                    getJSType(argument), variadicType, call, ordinal);
+        }
+    }
   }
\ No newline at end of file
