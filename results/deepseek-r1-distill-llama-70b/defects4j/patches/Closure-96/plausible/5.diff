diff --git a/tmp/ac9bc1ed-1ca9-4f86-b4cf-5d42273360ba_buggy.java b/tmp/40bc3bca-e73c-4bec-96c4-ffb1ae693522_fixed.java
index e0ecec8..02f20a7 100644
--- a/tmp/ac9bc1ed-1ca9-4f86-b4cf-5d42273360ba_buggy.java
+++ b/tmp/40bc3bca-e73c-4bec-96c4-ffb1ae693522_fixed.java
@@ -1,35 +1,52 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // Handle variadic functions: check all remaining arguments against the last parameter's type
+    if (functionType.getMaxArguments() == Integer.MAX_VALUE) {
+        // Retrieve the last parameter (the variadic parameter)
+        Node variadicParameter = null;
+        Iterator<Node> paramsIter = functionType.getParameters().iterator();
+        while (paramsIter.hasNext()) {
+            variadicParameter = paramsIter.next();
+        }
+        JSType variadicType = getJSType(variadicParameter);
+
+        // Check each remaining argument against the variadic parameter's type
+        while (arguments.hasNext()) {
+            argument = arguments.next();
+            ordinal++;
+            validator.expectArgumentMatchesParameter(t, argument,
+                getJSType(argument), variadicType, call, ordinal);
+        }
+    }
+
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+    if (minArgs > numArgs || (maxArgs != Integer.MAX_VALUE && maxArgs < numArgs)) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
