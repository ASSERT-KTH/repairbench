diff --git a/tmp/f795f91b-2d4f-4c14-b995-edf836f3e5d6_buggy.java b/tmp/3e10dedc-2f77-4071-8988-37130e790b2e_fixed.java
index e0ecec8..2ccd888 100644
--- a/tmp/f795f91b-2d4f-4c14-b995-edf836f3e5d6_buggy.java
+++ b/tmp/3e10dedc-2f77-4071-8988-37130e790b2e_fixed.java
@@ -1,35 +1,47 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
 private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // Handle remaining arguments for variadic functions
+    if (functionType.getMaxArguments() == Integer.MAX_VALUE && arguments.hasNext()) {
+        // Retrieve the var_args parameter's type, which should be an array
+        Iterator<Node> paramsIter = functionType.getParameters().iterator();
+        Node varArgsParam = paramsIter.next();
+        JSType varArgsType = getJSType(varArgsParam);
+        // Extract the element type from the array type
+        JSType elementType = varArgsType.getContentType();
+
+        while (arguments.hasNext()) {
+            argument = arguments.next();
+            ordinal++;
+            validator.expectArgumentMatchesParameter(t, argument,
+                getJSType(argument), elementType, call, ordinal);
+        }
+    }
+
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
 }
\ No newline at end of file
