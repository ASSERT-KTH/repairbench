diff --git a/tmp/a4b26268-92ac-4f8c-b909-e9347bb994cb_buggy.java b/tmp/d0b6e88c-7c46-48ea-86ad-79670d3b9c39_fixed.java
index e0ecec8..60e6165 100644
--- a/tmp/a4b26268-92ac-4f8c-b909-e9347bb994cb_buggy.java
+++ b/tmp/d0b6e88c-7c46-48ea-86ad-79670d3b9c39_fixed.java
@@ -1,35 +1,46 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
+
   while (arguments.hasNext() &&
          parameters.hasNext()) {
     // If there are no parameters left in the list, then the while loop
     // above implies that this must be a var_args function.
     parameter = parameters.next();
     argument = arguments.next();
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
+  // Check remaining arguments if function expects var_args
+  if (functionType.isVarArgs() && arguments.hasNext()) {
+    // The var_args parameter's type is the last parameter's type
+    Node varArgsParameter = parameters.next();
+    JSType varArgsType = getJSType(varArgsParameter);
+    while (arguments.hasNext()) {
+      argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), varArgsType, call, ordinal);
+    }
+  }
+
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
         String.valueOf(numArgs), String.valueOf(minArgs),
         maxArgs != Integer.MAX_VALUE ?
         " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
