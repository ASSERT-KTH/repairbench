diff --git a/tmp/012d8aa1-cdf1-4f11-b9a5-496cbc44a584_buggy.java b/tmp/4a17d596-35bd-49c4-85d6-78ecfa73c73c_fixed.java
index e0ecec8..364188d 100644
--- a/tmp/012d8aa1-cdf1-4f11-b9a5-496cbc44a584_buggy.java
+++ b/tmp/4a17d596-35bd-49c4-85d6-78ecfa73c73c_fixed.java
@@ -1,35 +1,39 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
-    int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
-      ordinal++;
-
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
-    }
-
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+
+  // First, check the number of arguments against min and max
+  if (minArgs > numArgs || (maxArgs != Integer.MAX_VALUE && maxArgs < numArgs)) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
         String.valueOf(numArgs), String.valueOf(minArgs),
         maxArgs != Integer.MAX_VALUE ?
         " and no more than " + maxArgs + " argument(s)" : "");
   }
+
+  Iterator<Node> parameters = functionType.getParameters().iterator();
+  int ordinal = 0;
+  while (arguments.hasNext()) {
+    Node argument = arguments.next();
+    ordinal++;
+
+    if (ordinal <= functionType.getParametersCount()) {
+      Node parameter = parameters.next();
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(parameter), call, ordinal);
+    } else {
+      // For var_args, check against the var_args type
+      JSType varArgType = functionType.getParameters().isEmpty() ? null : getJSType(parameters.next());
+      if (varArgType == null) {
+        varArgType = functionType.getVarArgType();
+      }
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), varArgType, call, ordinal);
+    }
+  }
 }
\ No newline at end of file
