diff --git a/tmp/46de322d-1700-4875-b819-c936402ffddb_buggy.java b/tmp/5a538710-dd33-4790-afd4-cf98245d9f70_fixed.java
index 0f439b3..3a088b8 100644
--- a/tmp/46de322d-1700-4875-b819-c936402ffddb_buggy.java
+++ b/tmp/5a538710-dd33-4790-afd4-cf98245d9f70_fixed.java
@@ -1,38 +1,31 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
+    // Immediately check for EOF condition
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
-        numToRead = Math.min(numToRead, available());
+    // Calculate how many bytes are left to read in the current entry
+    int availableBytes = entrySize - entryOffset;
+    numToRead = Math.min(numToRead, availableBytes);
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+    int bytesRead = is.read(buf, offset, numToRead);
 
-        if (totalRead == -1) {
+    if (bytesRead > 0) {
+        count(bytesRead);
+        entryOffset += bytesRead;
+
+        // If we've reached the end of the entry, mark as EOF
+        if (entryOffset >= entrySize) {
             hasHitEOF = true;
+        }
     } else {
-            entryOffset += totalRead;
+        hasHitEOF = true;
     }
 
-        return totalRead;
+    return bytesRead;
 }
\ No newline at end of file
