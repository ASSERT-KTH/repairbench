diff --git a/tmp/8818be46-5ed6-4ca8-b9fb-8ace53e071c5_buggy.java b/tmp/8dbb1e5c-31fa-4390-a987-c26f595ddca3_fixed.java
index 0f439b3..645628d 100644
--- a/tmp/8818be46-5ed6-4ca8-b9fb-8ace53e071c5_buggy.java
+++ b/tmp/8dbb1e5c-31fa-4390-a987-c26f595ddca3_fixed.java
@@ -1,38 +1,45 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
         int totalRead = 0;
 
-        if (hasHitEOF || entryOffset >= entrySize) {
+        if (hasHitEOF || entryOffset >= entrySize || isTruncated) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
-        numToRead = Math.min(numToRead, available());
+        if (entryOffset >= entrySize) {
+            hasHitEOF = true;
+            return -1;
+        }
+
+        if (numToRead > entrySize - entryOffset) {
+            numToRead = entrySize - entryOffset;
+        }
 
         totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
 
         if (totalRead == -1) {
+            if (entryOffset < entrySize) {
+                // Set truncated flag
+                isTruncated = true;
                 hasHitEOF = true;
-        } else {
+                throw new IOException("Truncated tar entry");
+            }
+            hasHitEOF = true;
+            return -1;
+        }
+
+        count(totalRead);
+
         entryOffset += totalRead;
+
+        // Check if we've read all expected bytes without hitting EOF
+        if (entryOffset == entrySize) {
+            hasHitEOF = true;
         }
 
         return totalRead;
     }
\ No newline at end of file
