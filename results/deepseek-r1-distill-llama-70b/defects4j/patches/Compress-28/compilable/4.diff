diff --git a/tmp/144f9928-96a6-4e48-b918-91f5e5bba0b5_buggy.java b/tmp/76447277-162c-4a75-beee-970cbc321746_fixed.java
index 0f439b3..b8dc210 100644
--- a/tmp/144f9928-96a6-4e48-b918-91f5e5bba0b5_buggy.java
+++ b/tmp/76447277-162c-4a75-beee-970cbc321746_fixed.java
@@ -1,38 +1,32 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
-        if (hasHitEOF || entryOffset >= entrySize) {
+    if (hasHitEOF) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
-        numToRead = Math.min(numToRead, available());
+    int bytesAvailable = Math.min(numToRead, available());
+    if (bytesAvailable <= 0) {
+        return -1;
+    }
 
-        totalRead = is.read(buf, offset, numToRead);
+    int totalRead = is.read(buf, offset, bytesAvailable);
     count(totalRead);
 
     if (totalRead == -1) {
         hasHitEOF = true;
-        } else {
+        return -1;
+    }
+
     entryOffset += totalRead;
+
+    if (entryOffset > entrySize) {
+        hasHitEOF = true;
+        return -1;
     }
 
     return totalRead;
 }
\ No newline at end of file
