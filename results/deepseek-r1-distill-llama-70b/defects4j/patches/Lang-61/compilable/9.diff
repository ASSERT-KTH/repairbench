diff --git a/tmp/2dc2b181-f1c4-4c64-8e97-a3e027d91bcc_buggy.java b/tmp/e504033a-6d7a-4136-8c02-14a2578ee23b_fixed.java
index addeb8d..996b3df 100644
--- a/tmp/2dc2b181-f1c4-4c64-8e97-a3e027d91bcc_buggy.java
+++ b/tmp/e504033a-6d7a-4136-8c02-14a2578ee23b_fixed.java
@@ -1,38 +1,31 @@
-    /**
-     * Searches the string builder to find the first reference to the specified
-     * string starting searching from the given index.
-     * <p>
-     * Note that a null input string will return -1, whereas the JDK throws an exception.
-     * 
-     * @param str  the string to find, null returns -1
-     * @param startIndex  the index to start at, invalid index rounded to edge
-     * @return the first index of the string, or -1 if not found
-     */
 public int indexOf(String str, int startIndex) {
-        startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
+    if (str == null) {
+        return -1;
+    }
+    int len = buffer.length;
+    // Clamp the start index to be within [0, len]
+    if (startIndex < 0) {
+        startIndex = 0;
+    } else if (startIndex >= len) {
         return -1;
     }
     int strLen = str.length();
-        if (strLen == 1) {
-            return indexOf(str.charAt(0), startIndex);
-        }
     if (strLen == 0) {
         return startIndex;
     }
-        if (strLen > size) {
+    // Ensure that there's enough characters left from startIndex
+    if (strLen > len - startIndex) {
         return -1;
     }
     char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
     outer:
-        for (int i = startIndex; i < len; i++) {
+    for (int i = startIndex; i <= len - strLen; i++) {
         for (int j = 0; j < strLen; j++) {
             if (str.charAt(j) != thisBuf[i + j]) {
                 continue outer;
             }
         }
         return i;
     }
     return -1;
 }
\ No newline at end of file
