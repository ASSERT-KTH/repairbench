diff --git a/tmp/09f4db06-e239-494b-8893-ae24e142fe9b_buggy.java b/tmp/587edc32-698c-44b3-91a6-b8e2e378f471_fixed.java
index ec6c9ee..b767963 100644
--- a/tmp/09f4db06-e239-494b-8893-ae24e142fe9b_buggy.java
+++ b/tmp/587edc32-698c-44b3-91a6-b8e2e378f471_fixed.java
@@ -1,21 +1,29 @@
  //-----------------------------------------------------------------------
     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
         if (notPrinter && notParser) {
             throw new IllegalStateException("Builder has created neither a printer nor a parser");
         }
         int size = elementPairs.size();
         if (size >= 2 && elementPairs.get(0) instanceof Separator) {
             Separator sep = (Separator) elementPairs.get(0);
             PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
             sep = sep.finish(f.getPrinter(), f.getParser());
             return new PeriodFormatter(sep, sep);
         }
+        // Check if the remaining elements should be treated as a single component
+        if (size == 2 && elementPairs.get(1) instanceof Separator) {
+            Object comp = elementPairs.get(0);
+            PeriodFormatter formatter = toFormatter(Collections.singletonList(comp), notPrinter, notParser);
+            Separator sep = (Separator) elementPairs.get(1);
+            sep = sep.finish(formatter.getPrinter(), formatter.getParser());
+            return new PeriodFormatter(sep, sep);
+        }
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
             return new PeriodFormatter(null, (PeriodParser) comp[1]);
         } else if (notParser) {
             return new PeriodFormatter((PeriodPrinter) comp[0], null);
         } else {
             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
         }
     }
\ No newline at end of file
