diff --git a/tmp/64cc173a-9c37-42b5-9a5e-40efedb01fc2_buggy.java b/tmp/797a69e4-8aab-4ba0-8111-c4e8ad014ad9_fixed.java
index 1303a19..10ec431 100644
--- a/tmp/64cc173a-9c37-42b5-9a5e-40efedb01fc2_buggy.java
+++ b/tmp/797a69e4-8aab-4ba0-8111-c4e8ad014ad9_fixed.java
@@ -1,45 +1,58 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
-
     if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
+    // Check if the array has enough elements
+    int arrayLength = getNodeCount(left.getFirstChild());
+    if (intIndex >= arrayLength) {
+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+        return n;
+    }
+
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
         elem = elem.getNext();
     }
 
     if (elem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
+
+// Helper method to get the number of elements in the array
+private int getNodeCount(Node arrayNode) {
+    int count = 0;
+    Node elem = arrayNode.getNext();
+    while (elem != null && elem.getType() != Token.COMMA) {
+        if (elem.getType() != Token.EMPTY) {
+            count++;
+        }
+        elem = elem.getNext();
+    }
+    return count;
+}
\ No newline at end of file
