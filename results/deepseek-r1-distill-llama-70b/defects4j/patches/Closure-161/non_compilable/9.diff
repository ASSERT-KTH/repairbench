diff --git a/tmp/db31d384-f145-4131-9c77-83de92f1f4c1_buggy.java b/tmp/d4b52c6d-97a0-485a-a1e9-efc6e594bb34_fixed.java
index 1303a19..b57b8ef 100644
--- a/tmp/db31d384-f145-4131-9c77-83de92f1f4c1_buggy.java
+++ b/tmp/d4b52c6d-97a0-485a-a1e9-efc6e594bb34_fixed.java
@@ -1,45 +1,34 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
 
-    if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
+    // Do not fold if the array is part of an assignment (SETELEM)
+    if (parent.getType() == Token.SETELEM) {
+      return n;
+    }
+
+    // Only fold if accessing a fixed array initializer to the right of a GETELEM
+    if (left.getType() != Token.ARRAYHOLE || right.getType() != Token.NUMBER) {
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
-    if (intIndex != index) {
-      error(INVALID_GETELEM_INDEX_ERROR, right);
-      return n;
-    }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+    if (intIndex != index || intIndex < 0) {
       return n;
     }
 
+    // Perform bounds check only on fixed array initializers
+    if (!(left.getFirstChild().getType() == Token.ARRAYHOLE)) {
       Node elem = left.getFirstChild();
       for (int i = 0; elem != null && i < intIndex; i++) {
         elem = elem.getNext();
       }
-
       if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
       }
-
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
-    } else {
-      left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
-    reportCodeChange();
-    return elem;
+    // Use the array hole element directly without modification
+    return left.getFirstChild().getNext(intIndex);
   }
\ No newline at end of file
