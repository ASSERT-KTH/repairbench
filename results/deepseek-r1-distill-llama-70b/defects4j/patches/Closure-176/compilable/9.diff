diff --git a/tmp/570fd2bb-9606-4683-a21b-eb55721a30f0_buggy.java b/tmp/1f9f6eb9-7fe0-4d4f-9f66-2ea3a12ab83b_fixed.java
index 8b2f10f..f4b30c9 100644
--- a/tmp/570fd2bb-9606-4683-a21b-eb55721a30f0_buggy.java
+++ b/tmp/1f9f6eb9-7fe0-4d4f-9f66-2ea3a12ab83b_fixed.java
@@ -1,67 +1,41 @@
-  /**
-   * Updates the scope according to the result of a type change, like
-   * an assignment or a type cast.
-   */
 private void updateScopeForTypeChange(
     FlowScope scope, Node left, JSType leftType, JSType resultType) {
   Preconditions.checkNotNull(resultType);
   switch (left.getType()) {
     case Token.NAME:
       String varName = left.getString();
       Var var = syntacticScope.getVar(varName);
       boolean isVarDeclaration = left.hasChildren();
 
-        // When looking at VAR initializers for declared VARs, we tend
-        // to use the declared type over the type it's being
-        // initialized to in the global scope.
-        //
-        // For example,
-        // /** @param {number} */ var f = goog.abstractMethod;
-        // it's obvious that the programmer wants you to use
-        // the declared function signature, not the inferred signature.
-        //
-        // Or,
-        // /** @type {Object.<string>} */ var x = {};
-        // the one-time anonymous object on the right side
-        // is as narrow as it can possibly be, but we need to make
-        // sure we back-infer the <string> element constraint on
-        // the left hand side, so we use the left hand side.
+      // Only prefer the declared type if the var is inferred or not declared elsewhere
+      boolean shouldUseLeftType = 
+          isVarDeclaration &&
+          (var == null || var.isTypeInferred());
       
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
-
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
-        //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
-
-
-        if (isVarTypeBetter) {
+      if (shouldUseLeftType) {
         redeclareSimpleVar(scope, left, resultType);
       }
-        left.setJSType(isVarDeclaration || leftType == null ?
-            resultType : null);
+
+      // If we can't use the declared type, let the type be inferred from the result
+      left.setJSType(resultType);
 
       if (var != null && var.isTypeInferred()) {
         JSType oldType = var.getType();
         var.setType(oldType == null ?
             resultType : oldType.getLeastSupertype(resultType));
       }
       break;
+
     case Token.GETPROP:
       String qualifiedName = left.getQualifiedName();
       if (qualifiedName != null) {
         scope.inferQualifiedSlot(left, qualifiedName,
             leftType == null ? unknownType : leftType,
             resultType);
       }
 
       left.setJSType(resultType);
       ensurePropertyDefined(left, resultType);
       break;
   }
 }
\ No newline at end of file
