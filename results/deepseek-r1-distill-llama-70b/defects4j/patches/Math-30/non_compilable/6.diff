diff --git a/tmp/1860f16f-3efa-41b3-b90c-5947ce723bbe_buggy.java b/tmp/4fb33532-8d3f-4fac-a685-76907c17d507_fixed.java
index 3c69e10..4908d47 100644
--- a/tmp/1860f16f-3efa-41b3-b90c-5947ce723bbe_buggy.java
+++ b/tmp/4fb33532-8d3f-4fac-a685-76907c17d507_fixed.java
@@ -1,27 +1,37 @@
-    /**
-     * @param Umin smallest Mann-Whitney U value
-     * @param n1 number of subjects in first sample
-     * @param n2 number of subjects in second sample
-     * @return two-sided asymptotic p-value
-     * @throws ConvergenceException if the p-value can not be computed
-     * due to a convergence error
-     * @throws MaxCountExceededException if the maximum number of
-     * iterations is exceeded
-     */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
+    // Corrected variance calculation based on tie-corrected Mann-Whitney U statistic
     final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+
+    // Calculate the variance with tie correction
+    final double t = countTies(d1, d2);
+    final double VarU = ((n1 * n2) * (n1 + n2 + 1 - (t / (n1 + n2)))) / (12.0 * (n1 + n2));
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    return 2 * standardNormal.cumulativeProbability(-Math.abs(z));
+}
+
+private int countTies(final double[] d1, final double[] d2) {
+    final Map<Double, Integer> ties = new HashMap<>();
+    for (double d : d1) {
+        ties.put(d, ties.getOrDefault(d, 0) + 1);
+    }
+    for (double d : d2) {
+        ties.put(d, ties.getOrDefault(d, 0) + 1);
+    }
+    int t = 0;
+    for (int count : ties.values()) {
+        if (count > 1) {
+            t += count * (count - 1);
+        }
+    }
+    return t;
 }
\ No newline at end of file
