diff --git a/tmp/2e5edf3e-9b22-4561-bb32-8a15921b5d5b_buggy.java b/tmp/af43f11c-bb7c-4254-bbe1-e4abd4577f4e_fixed.java
index ef65dd9..c4a2f1a 100644
--- a/tmp/2e5edf3e-9b22-4561-bb32-8a15921b5d5b_buggy.java
+++ b/tmp/af43f11c-bb7c-4254-bbe1-e4abd4577f4e_fixed.java
@@ -1,92 +1,55 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
+
+    // Process each element in the array
+    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {
       if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
-          sb.append(joinString);
-        }
-        sb.append(NodeUtil.getStringValue(elem));
+        String elemValue = NodeUtil.getStringValue(elem);
+        if (arrayFoldedChildren.isEmpty() || arrayFoldedChildren.get(-1) instanceof Node) {
+          // Start a new string
+          foldedSize += elemValue.length();
+          arrayFoldedChildren.add(Node.newString(elemValue));
         } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+          // Merge with the previous string
+          Node prevString = arrayFoldedChildren.get(-1);
+          String prevValue = prevString.getString();
+          String newValue = prevValue + joinString + elemValue;
+          arrayFoldedChildren.set(-1, Node.newString(newValue));
+          foldedSize += elemValue.length() + joinString.length();
         }
+      } else {
+        // Cannot fold this element; retain it as-is
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
-      elem = elem.getNext();
     }
 
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
-    }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+    // Calculate the total size considering commas
+    foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();
 
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
-
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
+    if (foldedSize >= originalSize) {
       return;
     }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        parent.replaceChild(n, foldedStringNode);
-        break;
 
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
+    // Replace the array literal with the folded children
     arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
-        break;
-    }
+    NodeUtil.pushNodes(arrayNode, arrayFoldedChildren);
+
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
