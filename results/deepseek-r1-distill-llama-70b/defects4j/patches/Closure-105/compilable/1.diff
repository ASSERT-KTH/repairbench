diff --git a/tmp/67f30001-5d45-418f-b789-ae57b005b672_buggy.java b/tmp/4b3ba3bd-9745-460d-a9b0-28e4e52ad846_fixed.java
index ef65dd9..1c9a5cd 100644
--- a/tmp/67f30001-5d45-418f-b789-ae57b005b672_buggy.java
+++ b/tmp/4b3ba3bd-9745-460d-a9b0-28e4e52ad846_fixed.java
@@ -1,92 +1,80 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
+
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
-        sb.append(NodeUtil.getStringValue(elem));
+        String elemValue = NodeUtil.getStringValue(elem);
+        sb.append(elemValue);
       } else {
         if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+
+    foldedSize = computeSize(arrayFoldedChildren, joinString);
 
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
-
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
     if (foldedSize > originalSize) {
       return;
     }
-        arrayNode.detachChildren();
+
+    if (arrayFoldedChildren.isEmpty()) {
+      parent.replaceChild(n, Node.newString(""));
+    } else if (arrayFoldedChildren.size() == 1) {
+      Node foldedStringNode = arrayFoldedChildren.get(0);
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
+        foldedStringNode = new Node(Token.ADD, Node.newString(""), foldedStringNode);
       }
       parent.replaceChild(n, foldedStringNode);
-        break;
-
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
+    } else {
       arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+      for (Node foldedChild : arrayFoldedChildren) {
+        arrayNode.addChildToBack(foldedChild);
       }
-        break;
     }
+
     t.getCompiler().reportCodeChange();
   }
+
+  private int computeSize(List<Node> foldedChildren, String joinString) {
+    int size = 0;
+    for (Node child : foldedChildren) {
+      if (child.getType() == Token.STRING) {
+        size += child.getString().length();
+      } else {
+        size += InlineCostEstimator.getCost(child);
+      }
+      if (!foldedChildren.get(foldedChildren.size() - 1).equals(child)) {
+        size += joinString.length();
+      }
+    }
+    return size;
+  }
\ No newline at end of file
