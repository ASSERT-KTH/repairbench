diff --git a/tmp/766bc6f5-3f06-455f-9c08-76ec24eabf5a_buggy.java b/tmp/07a5b970-17fa-480b-82a0-441e00196b4d_fixed.java
index ef65dd9..17a5f36 100644
--- a/tmp/766bc6f5-3f06-455f-9c08-76ec24eabf5a_buggy.java
+++ b/tmp/07a5b970-17fa-480b-82a0-441e00196b4d_fixed.java
@@ -1,92 +1,74 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+    if (arrayNode.getType() != Token.ARRAYLIT ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    // Track the number of joined elements.
+    int numElements = 0;
+    
     while (elem != null) {
+      numElements++;
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
-          // + 2 for the quotes.
+          // + 2 for the quotes
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
-      // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+    
+    // The cost of the separator joins, which is (numElements - 1) * (joinString.length()), 
+    // since each join adds the separator once
+    foldedSize += (numElements - 1) * joinString.length();
     
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
+    boolean isSizeWin = foldedSize <= originalSize;
 
-      case 1:
+    if (arrayFoldedChildren.isEmpty()) {
+      parent.replaceChild(n, Node.newString(""));
+    } else if (arrayFoldedChildren.size() == 1) {
       Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
-        }
-        arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString(""), foldedStringNode);
         foldedStringNode = replacement;
       }
       parent.replaceChild(n, foldedStringNode);
-        break;
-
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
+    } else if (isSizeWin) {
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
-        break;
+      parent.replaceChild(n, arrayNode);
     }
+    if (isSizeWin) {
       t.getCompiler().reportCodeChange();
     }
+  }
\ No newline at end of file
