diff --git a/tmp/f2fde912-f25d-43d2-bf0c-ad1c65bbf059_buggy.java b/tmp/04154510-d52c-421f-91aa-5b6bbb469afe_fixed.java
index ef65dd9..1792644 100644
--- a/tmp/f2fde912-f25d-43d2-bf0c-ad1c65bbf059_buggy.java
+++ b/tmp/04154510-d52c-421f-91aa-5b6bbb469afe_fixed.java
@@ -1,92 +1,69 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
+
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
+  String currentString = null;
+
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
-          sb.append(joinString);
+      String elemStr = NodeUtil.getStringValue(elem);
+      if (currentString == null) {
+        currentString = elemStr;
+      } else {
+        currentString += joinString + elemStr;
       }
-        sb.append(NodeUtil.getStringValue(elem));
     } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+      if (currentString != null) {
+        arrayFoldedChildren.add(Node.newString(currentString));
+        foldedSize += currentString.length() + 2; // +2 for quotes
+        currentString = null;
       }
-        foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
+      foldedSize += InlineCostEstimator.getCost(elem);
     }
     elem = elem.getNext();
   }
 
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
+  if (currentString != null) {
+    arrayFoldedChildren.add(Node.newString(currentString));
+    foldedSize += currentString.length() + 2; // +2 for quotes
   }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+
+  foldedSize += (arrayFoldedChildren.size() - 1); // one for each comma
 
   int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
-
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
   if (foldedSize > originalSize) {
     return;
   }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        parent.replaceChild(n, foldedStringNode);
-        break;
 
-      default:
-        // No folding could actually be performed.
   if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
     return;
   }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
+
   arrayNode.detachChildren();
   for (Node node : arrayFoldedChildren) {
     arrayNode.addChildToBack(node);
   }
-        break;
-    }
+
+  parent.replaceChild(n, arrayNode);
+
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
