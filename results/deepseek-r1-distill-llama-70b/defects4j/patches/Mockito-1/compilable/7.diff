diff --git a/tmp/7a2fae80-3b2b-4664-b5ed-581695dc4937_buggy.java b/tmp/7f500d1f-a5e9-4065-9fde-4e1cd4e610d8_fixed.java
index 1c875ad..bab1cda 100644
--- a/tmp/7a2fae80-3b2b-4664-b5ed-581695dc4937_buggy.java
+++ b/tmp/7f500d1f-a5e9-4065-9fde-4e1cd4e610d8_fixed.java
@@ -1,31 +1,22 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Object varargsArray = invocation.getArgumentAt(invocation.getRawArguments().length - 1, Object.class);
+        int varargsLength = Array.getLength(varargsArray);
         
+        for (int i = 0; i < varargsLength; i++) {
+            Object argument = Array.get(varargsArray, i);
+            for (Matcher matcher : matchers) {
+                if (matcher instanceof CapturesArguments) {
+                    ((CapturesArguments) matcher).captureFrom(argument);
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            Matcher matcher = matchers.get(position);
+            if (matcher instanceof CapturesArguments) {
+                ((CapturesArguments) matcher).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
