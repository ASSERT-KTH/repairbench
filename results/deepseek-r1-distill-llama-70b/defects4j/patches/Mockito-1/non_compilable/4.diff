diff --git a/tmp/7c8322c4-057c-4efc-ad61-9677b726a6ad_buggy.java b/tmp/9cd15df7-ba18-4df4-8c13-b46d33982599_fixed.java
index 1c875ad..3090608 100644
--- a/tmp/7c8322c4-057c-4efc-ad61-9677b726a6ad_buggy.java
+++ b/tmp/9cd15df7-ba18-4df4-8c13-b46d33982599_fixed.java
@@ -1,31 +1,43 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        Object[] rawArguments = invocation.getRawArguments();
+        if (rawArguments.length > 0) {
+            Object varargArray = rawArguments[rawArguments.length - 1];
+            if (varargArray != null && varargArray.getClass().isArray()) {
+                int length = Array.getLength(varargArray);
+                for (int i = 0; i < length; i++) {
+                    Object argument = Array.get(varargArray, i);
+                    for (Matcher m : matchers) {
+                        if (m instanceof CapturesArguments) {
+                            ((CapturesArguments) m).captureFrom(argument);
+                        }
+                    }
+                }
+            } else {
+                // Handle case where the last argument is not an array (not typical for varargs)
+                for (Matcher m : matchers) {
+                    if (m instanceof CapturesArguments) {
+                        ((CapturesArguments) m).captureFrom(varargArray);
+                    }
+                }
+            }
+        } else {
+            // No arguments provided, handle each potential matcher as needed
+            for (Matcher m : matchers) {
+                if (m instanceof CapturesArguments) {
+                    ((CapturesArguments) m).captureFrom(null);
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                Object argument = position < invocation.getArgumentCount() 
+                    ? invocation.getArgumentAt(position, Object.class)
+                    : null;
+                ((CapturesArguments) m).captureFrom(argument);
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
