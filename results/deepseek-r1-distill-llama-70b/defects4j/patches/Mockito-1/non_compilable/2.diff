diff --git a/tmp/8abca6bf-f536-4394-8431-8b03073576b5_buggy.java b/tmp/4fa0ab94-4aec-4256-9a1d-dbca75be87dc_fixed.java
index 1c875ad..82779a3 100644
--- a/tmp/8abca6bf-f536-4394-8431-8b03073576b5_buggy.java
+++ b/tmp/4fa0ab94-4aec-4256-9a1d-dbca75be87dc_fixed.java
@@ -1,31 +1,28 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        Object[] rawArgs = invocation.getRawArguments();
+        int varargIndex = invocation.getMethod().getVarArgIndex();
+        // Handle the vararg
+        for (int i = varargIndex; i < rawArgs.length; i++) {
+            Object arg = rawArgs[i];
+            if (arg instanceof Object[]) {
+                Object[] arrayArgs = (Object[]) arg;
+                for (Object arrayArg : arrayArgs) {
+                    captureArgument(matchers.get(i), arrayArg);
+                }
+            } else {
+                captureArgument(matchers.get(i), arg);
+            }
+        }
     } else {
-            for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        for (int i = 0; i < matchers.size(); i++) {
+            captureArgument(matchers.get(i), invocation.getArgumentAt(i, Object.class));
         }
     }
 }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+private void captureArgument(Matcher<Object> matcher, Object argument) {
+    if (matcher instanceof CapturesArguments) {
+        ((CapturesArguments) matcher).captureFrom(argument);
+    }
 }
\ No newline at end of file
