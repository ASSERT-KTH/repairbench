diff --git a/tmp/fd0e3d63-f718-4715-b726-ff90dc5eba8d_buggy.java b/tmp/f7555745-3f13-4ad9-8b43-148792ff7c92_fixed.java
index 1c875ad..be63252 100644
--- a/tmp/fd0e3d63-f718-4715-b726-ff90dc5eba8d_buggy.java
+++ b/tmp/f7555745-3f13-4ad9-8b43-148792ff7c92_fixed.java
@@ -1,31 +1,48 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        int indexOfVararg = indexOfVarargParameter(invocation.getMethod().getParameterTypes());
+        if (indexOfVararg != -1 && indexOfVararg < matchers.size()) {
+            Object[] rawArguments = invocation.getRawArguments();
+            object VarargMatcher = matchers.get(indexOfVararg);
+            if (VarargMatcher instanceof CapturesArguments) {
+                if (rawArguments.length > indexOfVararg) {
+                    Object varargValue = rawArguments[indexOfVararg];
+                    if (varargValue != null && isVarargArray(varargValue, indexOfVararg)) {
+                        // Handle case where vararg is passed as an array
+                        Object[] array = (Object[]) varargValue;
+                        for (Object element : array) {
+                            ((CapturesArguments) VarargMatcher).captureFrom(element);
+                        }
+                    } else {
+                        // Handle case where vararg elements are spread
+                        int varargCount = rawArguments.length - indexOfVararg;
+                        for (int i = indexOfVararg; i < rawArguments.length; i++) {
+                            ((CapturesArguments) VarargMatcher).captureFrom(rawArguments[i]);
+                        }
+                    }
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
+}
+
+private int indexOfVarargParameter(Class<?>[] parameterTypes) {
+    int varargIndex = -1;
+    for (int i = 0; i < parameterTypes.length; i++) {
+        if (parameterTypes[i].isArray()) {
+            varargIndex = i;
+        }
+    }
+    return varargIndex;
+}
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+private boolean isVarargArray(Object value, int varargIndex) {
+    return value != null && value.getClass().isArray() && value.getClass().getComponentType().equals(invocation.getMethod().getParameterTypes()[varargIndex].getComponentType());
 }
\ No newline at end of file
