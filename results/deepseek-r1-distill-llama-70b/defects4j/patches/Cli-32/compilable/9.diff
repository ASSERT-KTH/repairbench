diff --git a/tmp/c8ada2e7-b93b-4dd6-9cef-164f1657c251_buggy.java b/tmp/ab3b0baf-3fa7-4f97-afa3-f01bb39b6331_fixed.java
index 14b78fb..569cd6b 100644
--- a/tmp/c8ada2e7-b93b-4dd6-9cef-164f1657c251_buggy.java
+++ b/tmp/ab3b0baf-3fa7-4f97-afa3-f01bb39b6331_fixed.java
@@ -1,56 +1,38 @@
-    /**
-     * Finds the next text wrap position after <code>startPos</code> for the
-     * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
-     *
-     * @param text The text being searched for the wrap position
-     * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
-     */
-    protected int findWrapPos(String text, int width, int startPos)
-    {
+protected int findWrapPos(String text, int width, int startPos) {
     int pos;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
+    // Check if there's a newline or tab within the width
+    if ((pos = text.indexOf('\n', startPos)) != -1 && pos < startPos + width) {
         return pos + 1;
     }
-        else if (startPos + width >= text.length())
-        {
+    if ((pos = text.indexOf('\t', startPos)) != -1 && pos < startPos + width) {
+        return pos + 1;
+    }
+
+    // Check if we've reached the end
+    if (startPos + width >= text.length()) {
         return -1;
     }
 
-
-        // look for the last whitespace character before startPos+width
+    // Look for the last whitespace before the width
     pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
+    while (pos > startPos && !isWhitespace(text.charAt(pos))) {
+        pos--;
     }
 
-        // if we found it - just return
-        if (pos > startPos)
-        {
+    if (pos > startPos) {
         return pos;
     }
 
-        // if we didn't find one, simply chop at startPos+width
+    // Check if we need to cut in the middle of a word
     pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
+    while (pos < text.length() && !isWhitespace(text.charAt(pos))) {
+        pos++;
     }
+
     return pos == text.length() ? -1 : pos;
 }
+
+private boolean isWhitespace(char c) {
+    return c == ' ' || c == '\n' || c == '\r';
+}
\ No newline at end of file
