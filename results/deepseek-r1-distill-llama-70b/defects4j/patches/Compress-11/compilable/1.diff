diff --git a/tmp/d79fa0c4-cce9-4d97-8cfa-e0d589de99e2_buggy.java b/tmp/d3b2d2b7-c6a4-4fe8-9ad0-febc4fa3a004_fixed.java
index 6b160ef..a40027c 100644
--- a/tmp/d79fa0c4-cce9-4d97-8cfa-e0d589de99e2_buggy.java
+++ b/tmp/d3b2d2b7-c6a4-4fe8-9ad0-febc4fa3a004_fixed.java
@@ -1,68 +1,78 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
         // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
+        //_tarHeaderSize increased to 1024, allowing to read multiple possible headers
+        final int tarHeaderSize = 1024;
+        final byte[] tarheader = new byte[tarHeaderSize];
+        in.mark(tarHeaderSize);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
-            // COMPRESS-117 - improve auto-recognition
+
+        // fallback to the more thorough tar check by trying to read the stream
+        boolean isTar = false;
+        try {
+            // Use a larger buffer to read ahead and check for valid tar entries
+            in.mark(tarHeaderSize);
+            TarArchiveInputStream tais = new TarArchiveInputStream(in);
             try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                 tais.getNextEntry();
-                return new TarArchiveInputStream(in);
+                isTar = true;
+                in.reset();
+            } catch (IOException e) {
+                // If getting the next entry fails, it's not a tar
+                isTar = false;
+            } finally {
+                if (!isTar) {
+                    in.reset();
+                }
+            }
         } catch (Exception e) { // NOPMD
             // can generate IllegalArgumentException as well as IOException
             // autodetection, simply not a TAR
             // ignored
         }
+
+        if (isTar) {
+            return new TarArchiveInputStream(in);
+        }
+
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
