diff --git a/tmp/b50bf0cd-bb7c-4795-99ab-bd6e86fe2ab5_buggy.java b/tmp/17a0a11b-4fe1-40cb-a973-11aa32766604_fixed.java
index 939f49b..03a6b20 100644
--- a/tmp/b50bf0cd-bb7c-4795-99ab-bd6e86fe2ab5_buggy.java
+++ b/tmp/17a0a11b-4fe1-40cb-a973-11aa32766604_fixed.java
@@ -1,21 +1,27 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+        return hasPrototypeProperty(n);
+    }
+    return false;
+}
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+private boolean hasPrototypeProperty(Node node) {
+    if (node == null) {
+        return false;
+    }
+    if (node.getType() == Token.GETPROP) {
+        Node propertyNode = node.getFirstChild().getNext();
+        if (propertyNode != null && propertyNode.getType() == Token.STRING
+                && "prototype".equals(propertyNode.getString())) {
             return true;
         }
+        return hasPrototypeProperty(node.getFirstChild()) || hasPrototypeProperty(propertyNode);
+    }
+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+        if (hasPrototypeProperty(child)) {
+            return true;
         }
     }
-
     return false;
 }
\ No newline at end of file
