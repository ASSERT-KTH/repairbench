diff --git a/tmp/e26fba5b-3e23-4c64-bc8d-54d3b11aae1b_buggy.java b/tmp/a17e4eb9-f64a-4a64-ba5e-f74b0b15653f_fixed.java
index 939f49b..074b580 100644
--- a/tmp/e26fba5b-3e23-4c64-bc8d-54d3b11aae1b_buggy.java
+++ b/tmp/a17e4eb9-f64a-4a64-ba5e-f74b0b15653f_fixed.java
@@ -1,21 +1,19 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {
+        return hasPrototypeProperty(n);
+    }
+    return false;
+}
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+private boolean hasPrototypeProperty(Node node) {
+    if (node.getType() == Token.GETPROP) {
+        Node propertyNode = node.getNext();
+        if (propertyNode != null && propertyNode.getType() == Token.STRING &&
+            propertyNode.getString().equals("prototype")) {
             return true;
         }
+        return hasPrototypeProperty(node.getFirstChild());
     }
-      }
-
     return false;
 }
\ No newline at end of file
