diff --git a/tmp/50bc3d71-c7f2-4a71-8abd-deba1da8eb9a_buggy.java b/tmp/ca1c48b3-e809-4858-88b2-2727a1af42cc_fixed.java
index 2573d30..ef712a1 100644
--- a/tmp/50bc3d71-c7f2-4a71-8abd-deba1da8eb9a_buggy.java
+++ b/tmp/ca1c48b3-e809-4858-88b2-2727a1af42cc_fixed.java
@@ -1,20 +1,34 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Traverse up the tree to check if the variable is reassigned
+    Node current = node;
+    while (current.isGetProp()) {
+      current = current.getFirstChild();
+    }
+    // Now current should be the name (e.g., x in x.a.b.c)
+    String name = current.getString();
+
+    // Check if the name is redefined in any assignment in the same statement
+    Node statement = node.getEnclosingStatement();
+    for (Node assign = statement.getFirstChild(); assign != null; assign = assign.getNext()) {
+      if (assign.isAssign()) {
+        Node target = assign.getFirstChild();
+        if (target.isName() && target.getString().equals(name)) {
+          // The variable is reassigned, replacement is not safe
           return false;
         }
+      }
+    }
 
     return true;
   }
\ No newline at end of file
