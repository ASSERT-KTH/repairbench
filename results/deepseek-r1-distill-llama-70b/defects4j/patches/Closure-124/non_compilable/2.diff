diff --git a/tmp/e449d35b-2744-4c7a-b3e9-1532ff25ee6c_buggy.java b/tmp/914d0055-d9dc-41a2-b30a-9299b6175813_fixed.java
index 2573d30..72f4921 100644
--- a/tmp/e449d35b-2744-4c7a-b3e9-1532ff25ee6c_buggy.java
+++ b/tmp/914d0055-d9dc-41a2-b30a-9299b6175813_fixed.java
@@ -1,20 +1,36 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    Node baseNode = node.getFirstChild();
+    String baseName = baseNode.getString();
+    if (isNameAssigned(replacement, baseName)) {
       return false;
     }
+    return true;
+  }
 
+  /**
+   * Checks whether the specified name is assigned anywhere in the subtree rooted at node.
+   * @return True if the name is assigned, false otherwise.
+   */
+  private boolean isNameAssigned(Node node, String name) {
+    if (node.isAssignment()) {
+      Node leftChild = node.getFirstChild();
+      if (leftChild != null && leftChild.isName() && leftChild.getString().equals(name)) {
         return true;
       }
+    }
+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+      if (isNameAssigned(child, name)) {
+        return true;
+      }
+    }
+    return false;
+  }
\ No newline at end of file
