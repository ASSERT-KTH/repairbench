diff --git a/tmp/5d3b0918-c1f1-4c4f-9e04-1489b77fdc35_buggy.java b/tmp/359244d5-7b10-491d-a294-ce341f09cbee_fixed.java
index c3944a7..4ccdf8c 100644
--- a/tmp/5d3b0918-c1f1-4c4f-9e04-1489b77fdc35_buggy.java
+++ b/tmp/359244d5-7b10-491d-a294-ce341f09cbee_fixed.java
@@ -1,71 +1,50 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
-     * @return row with the minimum ratio
+     * @return row with the minimum ratio, or null if no pivot is possible
      */
     private Integer getPivotRow(SimplexTableau tableau, final int col) {
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
-        List<Integer> minRatioPositions = new ArrayList<Integer>();
+        List<Integer> candidates = new ArrayList<>();
         double minRatio = Double.MAX_VALUE;
+
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
 
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
-                final int cmp = Double.compare(ratio, minRatio);
-                if (cmp == 0) {
-                    minRatioPositions.add(i);
-                } else if (cmp < 0) {
+
+                if (ratio < minRatio) {
                     minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
-                    minRatioPositions.add(i);
+                    candidates = new ArrayList<>();
+                    candidates.add(i);
+                } else if (ratio == minRatio) {
+                    candidates.add(i);
                 }
             }
         }
 
-        if (minRatioPositions.size() == 0) {
-            return null;
-        } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
-
-            // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
+        if (candidates.isEmpty()) {
+            return null; // no pivot possible, exit
+        } else if (candidates.size() == 1) {
+            return candidates.get(0);
+        } else {
+            // Apply Bland's Rule: select the row with the smallest index basic variable
+            Integer selectedRow = null;
+            int minBasicIndex = Integer.MAX_VALUE;
+            for (Integer row : candidates) {
+                for (int j = 0; j < tableau.getWidth() - 1; j++) {
+                    if (row == tableau.getBasicRow(j)) {
+                        if (j < minBasicIndex) {
+                            minBasicIndex = j;
+                            selectedRow = row;
                         }
+                        break; // first basic variable for this row, no need to check further columns
                     }
                 }
-
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
-                Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
-                            }
-                        }
-                    }
-                }
-                return minRow;
-        }
-        return minRatioPositions.get(0);
+            }
+            return selectedRow;
+        }
     }
\ No newline at end of file
