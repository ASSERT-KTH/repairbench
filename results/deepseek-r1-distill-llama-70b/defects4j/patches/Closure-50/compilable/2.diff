diff --git a/tmp/0e162fdd-b5cc-4a75-8d4c-2729d2a4e566_buggy.java b/tmp/40503b6c-99a7-4339-b3e4-d1ca729985ba_fixed.java
index d8b0158..565a4f9 100644
--- a/tmp/0e162fdd-b5cc-4a75-8d4c-2729d2a4e566_buggy.java
+++ b/tmp/40503b6c-99a7-4339-b3e4-d1ca729985ba_fixed.java
@@ -1,113 +1,87 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
     Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
-        return n;
-      }
-    }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
+    String separator = right != null ? NodeUtil.getStringValue(right) : ",";
 
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
-          sb.append(joinString);
+          sb.append(separator);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
         if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
+          Node stringNode = Node.newString(sb.toString());
           foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
+          arrayFoldedChildren.add(stringNode.copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
 
     if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
+      Node stringNode = Node.newString(sb.toString());
       foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+      arrayFoldedChildren.add(stringNode.copyInformationFrom(prev));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+
+    foldedSize += (arrayFoldedChildren.size() - 1) * separator.length();
 
     int originalSize = InlineCostEstimator.getCost(n);
+    if (foldedSize > originalSize) {
+      return n;
+    }
+
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString("").copyInformationFrom(n),
               foldedStringNode);
           foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
-        }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         reportCodeChange();
-        break;
     }
 
     return n;
   }
\ No newline at end of file
