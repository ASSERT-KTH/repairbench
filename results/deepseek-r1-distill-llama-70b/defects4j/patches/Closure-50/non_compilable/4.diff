diff --git a/tmp/b75cdd95-dfe7-43d5-9554-486725f67f4c_buggy.java b/tmp/114ad226-995b-42b1-9e4d-c0e45bc836a5_fixed.java
index d8b0158..5bc27bd 100644
--- a/tmp/b75cdd95-dfe7-43d5-9554-486725f67f4c_buggy.java
+++ b/tmp/114ad226-995b-42b1-9e4d-c0e45bc836a5_fixed.java
@@ -1,113 +1,98 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
     Node right = callTarget.getNext();
     if (right != null) {
       if (!NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
-
+    // Default separator is ","
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
+    List<Node> arrayFoldedChildren = new ArrayList<>();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
+
+    for (Node elem : arrayNode.getChildren()) {
+      String elemStr = elem.getType() == Token.EMPTY ? "" : NodeUtil.getStringValue(elem);
+      elemStr = (elemStr == null) ? String.valueOf(elem.getValue()) : elemStr;
+
+      if (elemStr != null) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
           sb.append(joinString);
         }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
+        sb.append(elemStr);
       } else {
         if (sb != null) {
           Preconditions.checkNotNull(prev);
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
-      elem = elem.getNext();
     }
 
     if (sb != null) {
       Preconditions.checkNotNull(prev);
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+
+    // Account for each joinString
+    foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();
 
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
+    if (foldedSize > originalSize) {
+      return n;
+    }
+
+    if (arrayFoldedChildren.isEmpty()) {
       Node emptyStringNode = Node.newString("");
       n.getParent().replaceChild(n, emptyStringNode);
       reportCodeChange();
       return emptyStringNode;
-      case 1:
+    } else if (arrayFoldedChildren.size() == 1) {
       Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
+        // Ensure non-string literals are coerced to string.
         Node replacement = new Node(Token.ADD,
             Node.newString("").copyInformationFrom(n),
             foldedStringNode);
         foldedStringNode = replacement;
       }
       n.getParent().replaceChild(n, foldedStringNode);
       reportCodeChange();
       return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
-        }
+    } else {
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
       reportCodeChange();
-        break;
-    }
-
       return n;
     }
+  }
\ No newline at end of file
