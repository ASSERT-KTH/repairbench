diff --git a/tmp/bf843332-d6a7-445e-9c66-096c76878fca_buggy.java b/tmp/d6364052-82ea-4377-94da-ad4bf990d298_fixed.java
index d8b0158..9b7157e 100644
--- a/tmp/bf843332-d6a7-445e-9c66-096c76878fca_buggy.java
+++ b/tmp/d6364052-82ea-4377-94da-ad4bf990d298_fixed.java
@@ -1,113 +1,67 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
+    if (n.getType() != Token.CALL) {
+        return n;
+    }
+
     Node callTarget = n.getFirstChild();
-
-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
+    if (!NodeUtil.isGetProp(callTarget)) {
         return n;
     }
 
-    Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
-        return n;
-      }
-    }
-
     Node arrayNode = callTarget.getFirstChild();
-    Node functionName = arrayNode.getNext();
-
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+    Node functionName = callTarget.getNext();
+    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals("join")) {
         return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
-
+    Node right = callTarget.getNext();
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
+
+    List<Node> arrayFoldedChildren = new ArrayList<>();
     int foldedSize = 0;
-    Node prev = null;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
+
+    for (Node elem : arrayNode.getChildren()) {
+        String elemStr = elem.toString();
+        if (elem.getType() == Token.EMPTY || NodeUtil.isImmutableValue(elem)) {
+            arrayFoldedChildren.add(Node.newString(elemStr));
+            foldedSize += elemStr.length();
         } else {
-          sb.append(joinString);
-        }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
-      } else {
-        if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
-        }
-        foldedSize += InlineCostEstimator.getCost(elem);
             arrayFoldedChildren.add(elem);
+            foldedSize += InlineCostEstimator.getCost(elem);
         }
-      prev = elem;
-      elem = elem.getNext();
     }
 
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
-    }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
-
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
+    if (foldedSize > originalSize) {
+        return n;
+    }
+
+    if (arrayFoldedChildren.isEmpty()) {
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
     }
-        arrayNode.detachChildren();
+
+    if (arrayFoldedChildren.size() == 1) {
+        Node foldedStringNode = arrayFoldedChildren.get(0);
         if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
+            Node replacement = new Node(Token.ADD, Node.newString(""), foldedStringNode);
             foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
     }
+
     arrayNode.detachChildren();
     for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
     }
     reportCodeChange();
-        break;
-    }
 
     return n;
 }
\ No newline at end of file
