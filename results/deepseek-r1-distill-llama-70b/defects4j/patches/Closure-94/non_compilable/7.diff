diff --git a/tmp/af299292-9f18-4cb6-b4ec-2f62fd9ef460_buggy.java b/tmp/cc03cfc8-65b1-4e2f-ba37-593cb4840a14_fixed.java
index 66e3d01..309a3dd 100644
--- a/tmp/af299292-9f18-4cb6-b4ec-2f62fd9ef460_buggy.java
+++ b/tmp/cc03cfc8-65b1-4e2f-ba37-593cb4840a14_fixed.java
@@ -1,34 +1,42 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
-      // Binary operators are only valid if both children are valid.
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
+      case Token.PLUS:
+      case Token.MINUS:
+      case Token.MUL:
+      case Token.DIV:
+      case Token.MOD:
+      case Token.POW:
+        return isValidDefineValue(val.getFirstChild(), defines)
+            && isValidDefineValue(val.getLastChild(), defines);
 
-      // Uniary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
         return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
-    }
         return false;
+
+      default:
+        return false;
+    }
 }
\ No newline at end of file
