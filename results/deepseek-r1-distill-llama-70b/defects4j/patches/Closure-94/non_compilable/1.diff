diff --git a/tmp/47bc2ec1-e8bc-4fc4-bc0d-56d7091fe325_buggy.java b/tmp/1953e3a0-cfeb-48dc-a330-af258c206302_fixed.java
index 66e3d01..e2b0f26 100644
--- a/tmp/47bc2ec1-e8bc-4fc4-bc0d-56d7091fe325_buggy.java
+++ b/tmp/1953e3a0-cfeb-48dc-a330-af258c206302_fixed.java
@@ -1,34 +1,58 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
-      // Binary operators are only valid if both children are valid.
+    // Binary operators: check both left and right children.
+    case Token.ADD:
+    case Token.SUB:
+    case Token.MUL:
+    case Token.DIV:
+    case Token.MOD:
+    case Token.EQ:
+    case Token.NEQ:
+    case Token.LT:
+    case Token.GT:
+    case Token.LE:
+    case Token.GE:
+    case Token.EQ3:
+    case Token.NEQ3:
+    case Token.LT3:
+    case Token.GT3:
+    case Token.LE3:
+    case Token.GE3:
     case Token.BITAND:
     case Token.BITNOT:
-      case Token.BITOR:
     case Token.BITXOR:
+    case Token.BITOR:
+    case Token.AND:
+    case Token.OR:
+    case Token.NAND:
+    case Token.NOR:
+    case Token.SHR:
+    case Token.SAR:
+    case Token.SHL:
+    {
+      Node left = val.getFirstChild();
+      Node right = left.getNext();
+      return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);
+    }
 
-      // Uniary operators are valid if the child is valid.
+    // Unary operators: check the single child.
     case Token.NOT:
     case Token.NEG:
       return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
+    // Names and GETPROP are valid only if they are defines.
     case Token.NAME:
     case Token.GETPROP:
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
+      break;
   }
   return false;
 }
\ No newline at end of file
