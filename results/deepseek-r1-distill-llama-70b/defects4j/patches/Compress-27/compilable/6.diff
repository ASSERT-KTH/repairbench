diff --git a/tmp/0b702001-2b08-4c75-8694-6cab46962093_buggy.java b/tmp/51de02f2-ec63-40f0-8e69-02c460b97d2a_fixed.java
index 81872ca..1b79b9c 100644
--- a/tmp/0b702001-2b08-4c75-8694-6cab46962093_buggy.java
+++ b/tmp/51de02f2-ec63-40f0-8e69-02c460b97d2a_fixed.java
@@ -1,70 +1,46 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long result = 0;
         int end = offset + length;
         int start = offset;
 
         if (length < 2) {
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
+        // Check for a leading NUL
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end && buffer[start] == ' ') {
             start++;
-            } else {
-                break;
-            }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
+        // Find trailing space or NUL
+        if (end - 1 < start) {
+            throw new IllegalArgumentException("Buffer underflow");
+        }
         byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+        if (trailer == ' ' || trailer == 0) {
             end--;
-            trailer = buffer[end - 1];
-        }
             if (start == end) {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+                return 0L;
+            }
+        } else {
+            end--;
         }
 
+        // Now parse digits between start and end
         for (; start < end; start++) {
             final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        "Invalid byte " + currentByte + " at offset " + start + " in '" +
+                                java.util.Arrays.toString(buffer) + "'");
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) | (currentByte - '0');
         }
 
         return result;
     }
\ No newline at end of file
