diff --git a/tmp/68e2a2c3-136f-4d9a-8698-1a3dfae735e1_buggy.java b/tmp/1f87507e-3d89-4c91-9730-9c55635cc100_fixed.java
index c6164f1..3a2b58e 100644
--- a/tmp/68e2a2c3-136f-4d9a-8698-1a3dfae735e1_buggy.java
+++ b/tmp/1f87507e-3d89-4c91-9730-9c55635cc100_fixed.java
@@ -1,116 +1,188 @@
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
+    if (buf.readableBytes() < 2) {
+        return null;
+    }
     int status = buf.readUnsignedShort();
 
     position.setValid(BitUtil.check(status, 15));
 
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
+    if (buf.readableBytes() < 2) {
+        return null;
+    }
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
+    if (buf.readableBytes() < 12) {
+        return null;
+    }
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
     DateBuilder dateBuilder = new DateBuilder()
             .setYear(Integer.parseInt(time.substring(0, 2)))
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
+    if (buf.readableBytes() < 8) {
+        return null;
+    }
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
+    if (buf.readableBytes() < 6) {
+        return null;
+    }
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
+    if (buf.readableBytes() < 2) {
+        return null;
+    }
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
     while (buf.readableBytes() > 4) {
+        if (buf.readableBytes() < 2) {
+            break;
+        }
         int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+        if (buf.readableBytes() < 2) {
+            buf.skipBytes(buf.readableBytes());
+            break;
+        }
+        int length = Math.max(0, buf.readUnsignedShort() - 4);
+
         switch (subtype) {
             case 0x0001:
+                if (buf.readableBytes() >= (1 + (length > 0 ? length : 0))) {
                     int coolantTemperature = buf.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
+                    if (buf.readableBytes() >= 2) {
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
+                    }
+                    if (buf.readableBytes() >= 1) {
                         position.set("averageSpeed", buf.readUnsignedByte());
+                    }
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
+                    } else {
+                        buf.skipBytes(buf.readableBytes());
+                    }
+                    if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // trip id
+                    } else {
+                        buf.skipBytes(buf.readableBytes());
+                    }
+                } else {
+                    buf.skipBytes(buf.readableBytes());
+                }
                 break;
             case 0x0005:
+                if (buf.readableBytes() >= 2) {
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte());
+                    if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // run time
+                    } else {
+                        buf.skipBytes(buf.readableBytes());
+                    }
+                } else {
+                    buf.skipBytes(buf.readableBytes());
+                }
                 break;
             case 0x0009:
+                if (buf.readableBytes() >= length) {
                     position.set(
                             Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                } else {
+                    buf.skipBytes(buf.readableBytes());
+                }
                 break;
             case 0x0011:
+                if (buf.readableBytes() >= 4) {
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                }
                 break;
             case 0x0014:
+                if (buf.readableBytes() >= 9) {
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                     position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                     position.set("airTemp", buf.readUnsignedByte() - 40);
                     position.set("airFlow", buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                } else {
+                    buf.skipBytes(buf.readableBytes());
+                }
                 break;
             case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                if (length > 0 && buf.readableBytes() >= length) {
+                    String[] cells = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String cell : cells) {
                         String[] values = cell.split("@");
+                        if (values.length >= 4) {
                             network.addCellTower(CellTower.from(
-                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),
-                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                    Integer.parseInt(values[0]),
+                                    Integer.parseInt(values[1]),
+                                    Integer.parseInt(values[2], 16),
+                                    Integer.parseInt(values[3], 16)));
+                        }
+                    }
+                } else {
+                    buf.skipBytes(buf.readableBytes());
                 }
                 break;
             case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                if (length > 0 && buf.readableBytes() >= length) {
+                    String[] points = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String point : points) {
                         String[] values = point.split("@");
+                        if (values.length >= 2) {
                             network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                         }
+                    }
+                } else {
+                    buf.skipBytes(buf.readableBytes());
+                }
                 break;
             default:
-                    buf.skipBytes(length);
+                buf.skipBytes(buf.readableBytes());
                 break;
         }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
