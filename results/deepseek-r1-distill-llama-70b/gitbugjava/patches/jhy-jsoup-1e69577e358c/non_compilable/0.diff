diff --git a/tmp/7cbd7a1e-1360-4ec8-9649-5ecd086fb683_buggy.java b/tmp/11086c48-c196-4ba5-8a5c-b8c629099720_fixed.java
index c9c77a4..2f11bc9 100644
--- a/tmp/7cbd7a1e-1360-4ec8-9649-5ecd086fb683_buggy.java
+++ b/tmp/11086c48-c196-4ba5-8a5c-b8c629099720_fixed.java
@@ -1,35 +1,40 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
+        // Create a new URI using the original URL's components
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+            IDN.toASCII(u.getHost()), // puny-code the host
             u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+            null, // leave path null to avoid encoding
+            null, null // query and fragment to be added later
         );
 
         String normUrl = uri.toASCIIString();
+
+        // Use the original URL's encoded path
+        if (u.getPath() != null) {
+            normUrl += URLDecoder.decode(u.getPath(), StandardCharsets.UTF_8.name());
+        }
+
+        // Append query and fragment if present
         if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
+            StringBuilder sb = new StringBuilder(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
-                normUrl = StringUtil.releaseBuilder(sb);
+            normUrl = sb.toString();
         }
+
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
