diff --git a/tmp/6261b12b-3534-4e78-8b44-af8c0e72c375_buggy.java b/tmp/636e6d9c-b85d-4961-b6f1-aaadd01bd6f7_fixed.java
index c9c77a4..8f11cbf 100644
--- a/tmp/6261b12b-3534-4e78-8b44-af8c0e72c375_buggy.java
+++ b/tmp/636e6d9c-b85d-4961-b6f1-aaadd01bd6f7_fixed.java
@@ -1,35 +1,47 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
-            );
+        String protocol = u.getProtocol();
+        String userInfo = u.getUserInfo();
+        String host = IDN.toASCII(u.getHost());
+        int port = u.getPort();
+        String path = u.getPath();
+        String query = u.getQuery();
+        String fragment = u.getRef();
 
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
-                if (q != null) {
-                    sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
+        boolean hasPort = port != -1;
+        boolean isHttp = "http".equalsIgnoreCase(protocol) && port == 80;
+        boolean isHttps = "https".equalsIgnoreCase(protocol) && port == 443;
+
+        if (isHttp || isHttps) {
+            if (port != -1 && port != (isHttp ? 80 : 443)) {
+                hasPort = true;
+            } else {
+                port = -1;
+                hasPort = false;
+            }
+        }
+
+        StringBuilder sb = new StringBuilder();
+        sb.append(protocol).append("://");
+        if (userInfo != null) {
+            sb.append(userInfo).append('@');
+        }
+        sb.append(host);
+        if (hasPort) {
+            sb.append(':').append(port);
         }
-                if (u.getRef() != null) {
-                    sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
+        sb.append(path);
+        if (query != null) {
+            sb.append('?').append(query);
         }
-                normUrl = StringUtil.releaseBuilder(sb);
+        if (fragment != null) {
+            sb.append('#').append(fragment);
         }
-            u =  new URL(normUrl);
-            return u;
-        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
+
+        String urlStr = sb.toString();
+        return new URL(urlStr);
+    } catch (MalformedURLException e) {
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
