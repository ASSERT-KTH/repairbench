diff --git a/tmp/372c1ba4-247e-4d7d-900d-316a8e001757_buggy.java b/tmp/5651383f-4d12-4b8a-800b-0aff1634e531_fixed.java
index 712f277..04db462 100644
--- a/tmp/372c1ba4-247e-4d7d-900d-316a8e001757_buggy.java
+++ b/tmp/5651383f-4d12-4b8a-800b-0aff1634e531_fixed.java
@@ -1,48 +1,54 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
-        int j, k;
-
         while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
-            if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+            int beginIndex = input.indexOf(BEGIN_TOKEN, i);
+            if (beginIndex == -1) {
+                // No more tokens, append the rest of the input
                 target.append(input.substring(i));
                 return target;
             }
-            target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
-            if (k == -1) {
-                target.append(input);
-                return target;
+            // Check if any END_TOKEN appears before the next BEGIN_TOKEN, which is invalid
+            int nextEndIndex = input.indexOf(END_TOKEN, beginIndex);
+            if (nextEndIndex != -1 && nextEndIndex < beginIndex) {
+                throw new IllegalArgumentException("Unterminated token at position " + beginIndex);
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
+
+            // Append the text before the token
+            target.append(input.substring(i, beginIndex));
+
+            int endIndex = input.indexOf(END_TOKEN, beginIndex + BEGIN_TOKEN_LEN);
+            if (endIndex == -1) {
+                // Unterminated token found
+                throw new IllegalArgumentException("Unterminated token starting at position " + beginIndex);
+            }
+
+            // Extract the spec inside the token
+            String spec = input.substring(beginIndex + BEGIN_TOKEN_LEN, endIndex);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
-                target.append(input);
+                // No content to process, append the original and return
+                target.append(input.substring(beginIndex));
                 return target;
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
-            i = k + END_TOKEN_LEN;
+            // Move the index to after the END_TOKEN for the next iteration
+            i = endIndex + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
