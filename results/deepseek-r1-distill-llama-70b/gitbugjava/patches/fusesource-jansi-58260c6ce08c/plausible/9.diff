diff --git a/tmp/398abc05-3658-4fc3-aee3-aa7d57c4a637_buggy.java b/tmp/a66dca60-8ded-479e-9e2b-8399fc8682e2_fixed.java
index 712f277..f961e9e 100644
--- a/tmp/398abc05-3658-4fc3-aee3-aa7d57c4a637_buggy.java
+++ b/tmp/a66dca60-8ded-479e-9e2b-8399fc8682e2_fixed.java
@@ -1,48 +1,37 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
+            // Check if there are any END_TOKENs left in the remaining string
+            if (input.substring(i).indexOf(END_TOKEN) != -1) {
+                throw new IllegalArgumentException("Unexpected end token before begin token.");
             }
             target.append(input.substring(i));
             return target;
+        } else {
+            // Check the text before the next BEGIN_TOKEN for END_TOKEN
+            String prevText = input.substring(i, j);
+            if (prevText.indexOf(END_TOKEN) != -1) {
+                throw new IllegalArgumentException("Unexpected end token in text.");
+            }
+            target.append(prevText);
         }
-            target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+        // Proceed to process the token
+        k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Missing end token for begin token at index " + j);
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
-
+        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Invalid token format at index " + j);
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
-
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
