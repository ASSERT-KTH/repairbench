diff --git a/tmp/c529060c-41ef-468f-ab1c-c4f315d8ec81_buggy.java b/tmp/12dc90c5-e3dd-4964-8c8c-18deea562542_fixed.java
index f506479..4da43a0 100644
--- a/tmp/c529060c-41ef-468f-ab1c-c4f315d8ec81_buggy.java
+++ b/tmp/12dc90c5-e3dd-4964-8c8c-18deea562542_fixed.java
@@ -1,64 +1,78 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
-                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
+        final String name = dslArg.getName().toLowerCase();
+        if (argsByName.put(name, dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    final List<RepeatingParamValues> groupValues = new ArrayList<>();
+    Map<String, List<String>> currentGroupValues = new HashMap<>();
+    boolean inGroup = false;
+
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
+            if (!inGroup)
+            {
+                throw new IllegalArgumentException("Unexpected group separator");
+            }
+            inGroup = false;
+            groupValues.add(new RepeatingParamValues(groupArg.getDslArgs(), currentGroupValues));
+            currentGroupValues = new HashMap<>();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
+        {
+            if (inGroup)
+            {
+                throw new IllegalArgumentException("Unexpected argument '" + argument.name + "' in group");
+            }
+            else
             {
                 break;
             }
+        }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+        if (!inGroup)
         {
-                    break;
+            inGroup = true;
+        }
+
+        if (!currentGroupValues.containsKey(arg.getName().toLowerCase()))
+        {
+            currentGroupValues.put(arg.getName().toLowerCase(), new ArrayList<>());
         }
 
         checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
+        currentGroupValues.get(arg.getName().toLowerCase()).add(argument.value);
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
-            final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
+    if (inGroup)
     {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
-                {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
-                }
+        groupValues.add(new RepeatingParamValues(groupArg.getDslArgs(), currentGroupValues));
     }
 
-            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
-            dslArgs[0] = groupArg.getIdentity();
-            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+    groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).addAll(groupValues);
 }
\ No newline at end of file
