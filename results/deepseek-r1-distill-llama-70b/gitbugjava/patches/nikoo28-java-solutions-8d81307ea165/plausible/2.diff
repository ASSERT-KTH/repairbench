diff --git a/tmp/2356cbf2-9d3d-4131-8154-1ef5c1a2a0dc_buggy.java b/tmp/08ec558c-6256-465d-a195-e9de7afbb989_fixed.java
index 9739964..8eba320 100644
--- a/tmp/2356cbf2-9d3d-4131-8154-1ef5c1a2a0dc_buggy.java
+++ b/tmp/08ec558c-6256-465d-a195-e9de7afbb989_fixed.java
@@ -1,27 +1,27 @@
 public int[] calculateSpans(int[] prices) {
-
     int[] spans = new int[prices.length];
-    spans[0] = 1; // Span of first element is always 1
-
+    if (prices.length == 0) {
+        return spans;
+    }
+    spans[0] = 1; // span of the first element is 1
     Stack<Integer> indexStack = new Stack<>();
-
-    // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+        // Pop elements while the top of stack is less than current price
+        while (!indexStack.isEmpty() && prices[indexStack.peek()] < prices[i]) {
             indexStack.pop();
+        }
 
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
+        // If stack becomes empty, span is i+1, else i - index of the element
+        if (indexStack.isEmpty()) {
             spans[i] = i + 1;
-      else
+        } else {
             spans[i] = i - indexStack.peek();
+        }
 
+        // Push current index onto stack
         indexStack.push(i);
     }
-
     return spans;
 }
\ No newline at end of file
