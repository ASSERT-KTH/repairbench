diff --git a/tmp/992b8ed5-171c-4202-9b8a-425310df4416_buggy.java b/tmp/d520afe4-2482-48b7-a931-745cad0760f6_fixed.java
index 0583946..99a9a25 100644
--- a/tmp/992b8ed5-171c-4202-9b8a-425310df4416_buggy.java
+++ b/tmp/d520afe4-2482-48b7-a931-745cad0760f6_fixed.java
@@ -1,30 +1,42 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
+            // Determine if the current line is blank
+            boolean currentLineIsBlank = isBlank();
+
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
+        // Add a check to avoid escaping if the line is blank and meets the conditions
+        boolean shouldEscape = true;
+        if (normaliseWhite && isBlank() && previousSibling() == null) {
+            shouldEscape = false;
+        }
+
+        if (shouldEscape) {
             Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
         }
+    }
\ No newline at end of file
