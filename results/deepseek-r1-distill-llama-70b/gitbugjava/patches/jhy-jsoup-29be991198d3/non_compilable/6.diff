diff --git a/tmp/ae6bddd2-e261-43c1-b77d-5ea35055c150_buggy.java b/tmp/8730c219-c452-4c0a-a61c-ff98c9aa787c_fixed.java
index 862c60c..5b9ebfa 100644
--- a/tmp/ae6bddd2-e261-43c1-b77d-5ea35055c150_buggy.java
+++ b/tmp/8730c219-c452-4c0a-a61c-ff98c9aa787c_fixed.java
@@ -1,25 +1,58 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // Original logic to check next node and decide to skip
         Node next = this.nextSibling();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            || (next instanceof TextNode && (((TextNode) next).isBlank()));
+
+        // Additional check to handle cases where next is a <br> followed by text
+        if (!couldSkip && next instanceof Element && ((Element) next).tagName.equals("br")) {
+            // Check the node after <br> to see if it's text that needs wrapping
+            Node nextNext = next.nextSibling();
+            if (nextNext instanceof TextNode && prettyPrint) {
+                couldSkip = true;
+            }
+        }
+
         if (couldSkip && isBlank()) return;
 
+        // Apply existing wrapping logic and check if adding a line break is needed
+        boolean wrapAfterBr = prettyPrint && "br".equalsIgnoreCase(parent.tag()) && next instanceof TextNode;
+        if (wrapAfterBr) {
+            // Determine if new line is needed
+            boolean addLineBreak = true;
+
+            // Check the node that follows the <br>
+            Node nodeAfterBr = next instanceof TextNode ? ((TextNode) next).nextSibling() : next.nextSibling();
+            if (nodeAfterBr != null && nodeAfterBr instanceof Element && ((Element) nodeAfterBr).tag().isBlock()) {
+                addLineBreak = true;
+            } else if (next instanceof TextNode && !((TextNode) next).isBlank()) {
+                addLineBreak = true;
+            } else {
+                addLineBreak = false;
+            }
+
+            if (addLineBreak) {
+                indent(accum, depth, out);
+            }
+        }
+
+        // Existing condition for wrapping
         if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            (out.outline() && siblingNodes().size() > 0 && !isBlank())) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
