diff --git a/tmp/ade01f82-bcd9-4984-8df3-1de5ba3e9fea_buggy.java b/tmp/1df66d94-f52b-4efb-9865-2ae0d9b3fbd0_fixed.java
index 016a7f6..1c71935 100644
--- a/tmp/ade01f82-bcd9-4984-8df3-1de5ba3e9fea_buggy.java
+++ b/tmp/1df66d94-f52b-4efb-9865-2ae0d9b3fbd0_fixed.java
@@ -1,29 +1,38 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        // Prevent adding space if next sibling is an inline element that is not blank text
+        boolean couldSkip = next instanceof Element && ((Element) next).shouldIndent(out)
+                || next instanceof TextNode && ((TextNode) next).isBlank();
+
+        if (couldSkip && isBlank) {
+            return;
+        }
 
         Node prev = previousSibling();
         if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+        ) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+    // Additional check to prevent space before span
+    if (parent != null && parent.tag().isBlock() && nextSibling() instanceof Element && !((Element) nextSibling()).tag().isBlock()) {
+        accum.append("");
+    }
 }
\ No newline at end of file
