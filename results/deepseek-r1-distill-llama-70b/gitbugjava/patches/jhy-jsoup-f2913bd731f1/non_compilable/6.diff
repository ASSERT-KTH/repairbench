diff --git a/tmp/dde98839-a620-49da-9b3f-d220bc4e5e57_buggy.java b/tmp/1b9f4ef0-9dcb-428c-bcf2-dfeb4b1bf2f6_fixed.java
index 016a7f6..c417768 100644
--- a/tmp/dde98839-a620-49da-9b3f-d220bc4e5e57_buggy.java
+++ b/tmp/1b9f4ef0-9dcb-428c-bcf2-dfeb4b1bf2f6_fixed.java
@@ -1,29 +1,37 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+
+        // Determine if we need to trim trailing whitespace
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // Additional check: if the parent is block and next sibling is an inline element, trim trailing
+        if (parent != null && parent.tag().isBlock() && nextSibling() instanceof Element && !((Element) nextSibling()).tag().isBlock()) {
+            trimTrailing = true;
+        }
+    }
+
+    if (normaliseWhite) {
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) 
+            || (next instanceof TextNode && ((TextNode) next).isBlank());
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
         )
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
