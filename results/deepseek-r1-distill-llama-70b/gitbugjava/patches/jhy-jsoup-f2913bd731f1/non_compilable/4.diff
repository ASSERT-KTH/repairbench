diff --git a/tmp/45a65fe2-a746-47cf-825b-047aa0621450_buggy.java b/tmp/f8519a9f-7081-4630-88e0-c85567d743c0_fixed.java
index 016a7f6..a18c159 100644
--- a/tmp/45a65fe2-a746-47cf-825b-047aa0621450_buggy.java
+++ b/tmp/f8519a9f-7081-4630-88e0-c85567d743c0_fixed.java
@@ -1,29 +1,33 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Determine the next node and whether it will cause indentation
             Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            final boolean nextIsIndenting = (next instanceof Element) && ((Element) next).shouldIndent(out);
+
+            // Set trimTrailing to true if next node is either null or does not cause indentation
+            trimTrailing = trimLikeBlock && (next == null || !nextIsIndenting);
+
+            // Check if this blank node can be skipped if next will indent
+            final boolean isBlank = isBlank();
+            final boolean couldSkip = isBlank && (nextIsIndenting || (next instanceof TextNode && ((TextNode) next).isBlank()));
+            if (couldSkip) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) 
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
