diff --git a/tmp/e4946264-96a6-49e3-9df3-9b24c851a4d6_buggy.java b/tmp/de6c9108-512d-493e-83fa-fd77a00812da_fixed.java
index 47a8941..1af1259 100644
--- a/tmp/e4946264-96a6-49e3-9df3-9b24c851a4d6_buggy.java
+++ b/tmp/de6c9108-512d-493e-83fa-fd77a00812da_fixed.java
@@ -1,53 +1,36 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
-			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+        Map<String, JDefinedClass> classes = getPrivateField(grandParentClass, "classes");
+        classes.put(clazz.name(), clazz);
+        setPrivateField(clazz, "outer", grandParentClass);
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
+        Map<String, JDefinedClass> classes = getPrivateField(grandParentPackage, "classes");
 
-			classes = getPrivateField(grandParentPackage, "classes");
-
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                if (sc instanceof XSDeclaration) {
                     setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                }
                 break;
             }
         }
-		}
 
         if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+            writeSummary("\tRenaming class " + clazz.fullName() + " to " + clazz.parentContainer().name() + clazz.name());
+            setPrivateField(clazz, "name", clazz.parentContainer().name() + clazz.name());
         }
 
         classes.put(clazz.name(), clazz);
-
-		// Finally modify the class so that it refers back the container:
-		setPrivateField(clazz, "outer", grandParent);
+        setPrivateField(clazz, "outer", grandParentPackage);
+    }
 }
\ No newline at end of file
