diff --git a/tmp/1fd304f9-47c6-4a22-b036-645773008749_buggy.java b/tmp/6c6e5fcc-96da-427e-9b82-636c341bd3f8_fixed.java
index 47a8941..f783a9d 100644
--- a/tmp/1fd304f9-47c6-4a22-b036-645773008749_buggy.java
+++ b/tmp/6c6e5fcc-96da-427e-9b82-636c341bd3f8_fixed.java
@@ -1,53 +1,74 @@
 	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+	 * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+		// Modify the container so it now refers to the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+		// Allows tracking class name collisions:
 		Map<String, JDefinedClass> classes;
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+			// Elemental class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+		} else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 			classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+			// In this scenario, the class should have "static" modifier reset otherwise it won't compile:
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
 					// FIXME: Inner class is always a local declaration.
 					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
 					setPrivateField(sc, "anonymous", Boolean.FALSE);
 
 					break;
 				}
 			}
 		}
 
+		// Check if a class with the same name exists in the target container
 		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+			String newName = clazz.name() + "_" + System.currentTimeMillis();
+			writeSummary("\tRenaming class " + clazz.name() + " to " + newName + " to avoid name collision");
+			setPrivateField(clazz, "name", newName);
 		}
 
 		classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+		// Update the class name in the outline
+		for (ClassOutline classOutline : outline.getClasses()) {
+			if (classOutline.implClass == clazz) {
+				classOutline.implClass = clazz;
+				break;
+			}
+		}
+
+		// Update the schema component references
+		for (ClassOutline classOutline : outline.getClasses()) {
+			if (classOutline.implClass == clazz) {
+				XSComponent sc = classOutline.target.getSchemaComponent();
+				if (sc instanceof XSDeclaration) {
+					XSDeclaration declaration = (XSDeclaration) sc;
+					declaration.setName(clazz.name());
+				}
+				break;
+			}
+		}
+
+		// Finally, modify the class so that it refers back to the container:
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
