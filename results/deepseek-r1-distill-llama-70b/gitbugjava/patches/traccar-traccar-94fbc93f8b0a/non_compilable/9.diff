diff --git a/tmp/fd304deb-15e8-420b-9e24-f7f9f5604c36_buggy.java b/tmp/a990458e-4da3-46be-9efe-6e08c6e66208_fixed.java
index fb15c85..f3fb607 100644
--- a/tmp/fd304deb-15e8-420b-9e24-f7f9f5604c36_buggy.java
+++ b/tmp/a990458e-4da3-46be-9efe-6e08c6e66208_fixed.java
@@ -1,311 +1,2 @@
-    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
-        CellTower cellTower = new CellTower();
-        String[] keys = form.substring(1).split("%");
-        for (String key : keys) {
-            switch (key) {
-                case "SA":
-                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                    break;
-                case "MV":
-                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
-                    break;
-                case "BV":
-                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
-                    break;
-                case "GQ":
-                    cellTower.setSignalStrength((int) buf.readUnsignedByte());
-                    break;
-                case "CE":
-                    cellTower.setCellId(buf.readUnsignedInt());
-                    break;
-                case "LC":
-                    cellTower.setLocationAreaCode(buf.readUnsignedShort());
-                    break;
-                case "CN":
-                    int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
-                    cellTower.setMobileCountryCode(combinedMobileCodes / 100);
-                    cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
-                    break;
-                case "RL":
-                    buf.readUnsignedByte(); // rxlev
-                    break;
-                case "PC":
-                    position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
-                    break;
-                case "AT":
-                    position.setAltitude(buf.readUnsignedInt());
-                    break;
-                case "RP":
-                    position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                    break;
-                case "GS":
-                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    break;
-                case "DT":
-                    position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
-                    break;
-                case "VN":
-                    position.set(Position.KEY_VIN, readString(buf));
-                    break;
-                case "MF":
-                    buf.readUnsignedShort(); // mass air flow rate
-                    break;
-                case "EL":
-                    buf.readUnsignedByte(); // engine load
-                    break;
-                case "TR":
-                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
-                    break;
-                case "ET":
-                    position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
-                    break;
-                case "FL":
-                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
-                    break;
-                case "ML":
-                    buf.readUnsignedByte(); // mil status
-                    break;
-                case "FC":
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
-                    break;
-                case "CI":
-                    readString(buf); // format string
-                    break;
-                case "AV1":
-                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
-                    break;
-                case "NC":
-                    readString(buf); // gsm neighbor cell info
-                    break;
-                case "SM":
-                    buf.readUnsignedShort(); // max speed between reports
-                    break;
-                case "GL":
-                    readString(buf); // google link
-                    break;
-                case "MA":
-                    readString(buf); // mac address
-                    break;
-                case "PD":
-                    buf.readUnsignedByte(); // pending code status
-                    break;
-                case "CD":
-                    position.set(Position.KEY_ICCID, readString(buf));
-                    break;
-                case "CM":
-                    buf.readLong(); // imsi
-                    break;
-                case "GN":
-                    buf.skipBytes(60); // g sensor data
-                    break;
-                case "GV":
-                    buf.skipBytes(6); // maximum g force
-                    break;
-                case "ME":
-                    buf.readLong(); // imei
-                    break;
-                case "IA":
-                    buf.readUnsignedByte(); // intake air temperature
-                    break;
-                case "MP":
-                    buf.readUnsignedByte(); // manifold absolute pressure
-                    break;
-                case "EO":
-                    position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));
-                    break;
-                case "EH":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000);
-                    break;
-                case "ZO1":
-                    buf.readUnsignedByte(); // brake stroke status
-                    break;
-                case "ZO2":
-                    buf.readUnsignedByte(); // warning indicator status
-                    break;
-                case "ZO3":
-                    buf.readUnsignedByte(); // abs control status
-                    break;
-                case "ZO4":
-                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);
-                    break;
-                case "ZO5":
-                    buf.readUnsignedByte(); // parking brake status
-                    break;
-                case "ZO6":
-                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);
-                    break;
-                case "ZO7":
-                    buf.readUnsignedByte(); // cruise control status
-                    break;
-                case "ZO8":
-                    buf.readUnsignedByte(); // accelector pedal position
-                    break;
-                case "ZO9":
-                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);
-                    break;
-                case "ZO10":
-                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);
-                    break;
-                case "ZO11":
-                    buf.readUnsignedByte(); // engine oil pressure
-                    break;
-                case "ZO12":
-                    buf.readUnsignedByte(); // boost pressure
-                    break;
-                case "ZO13":
-                    buf.readUnsignedByte(); // intake temperature
-                    break;
-                case "ZO14":
-                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte());
-                    break;
-                case "ZO15":
-                    buf.readUnsignedByte(); // brake application pressure
-                    break;
-                case "ZO16":
-                    buf.readUnsignedByte(); // brake primary pressure
-                    break;
-                case "ZO17":
-                    buf.readUnsignedByte(); // brake secondary pressure
-                    break;
-                case "ZH1":
-                    buf.readUnsignedShort(); // cargo weight
-                    break;
-                case "ZH2":
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);
-                    break;
-                case "ZH3":
-                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);
-                    break;
-                case "ZL1":
-                    buf.readUnsignedInt(); // fuel used (natural gas)
-                    break;
-                case "ZL2":
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161);
-                    break;
-                case "ZL3":
-                    buf.readUnsignedInt(); // vehicle hours
-                    break;
-                case "ZL4":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);
-                    break;
-                case "ZS1":
-                    position.set(Position.KEY_VIN, readString(buf));
-                    break;
-                case "JO1":
-                    buf.readUnsignedByte(); // pedals
-                    break;
-                case "JO2":
-                    buf.readUnsignedByte(); // power takeoff device
-                    break;
-                case "JO3":
-                    buf.readUnsignedByte(); // accelector pedal position
-                    break;
-                case "JO4":
-                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());
-                    break;
-                case "JO5":
-                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
-                    break;
-                case "JO6":
-                    buf.readUnsignedByte(); // fms vehicle interface
-                    break;
-                case "JO7":
-                    buf.readUnsignedByte(); // driver 2
-                    break;
-                case "JO8":
-                    buf.readUnsignedByte(); // driver 1
-                    break;
-                case "JO9":
-                    buf.readUnsignedByte(); // drivers
-                    break;
-                case "JO10":
-                    buf.readUnsignedByte(); // system information
-                    break;
-                case "JO11":
-                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
-                    break;
-                case "JO12":
-                    buf.readUnsignedByte(); // pto engaged
-                    break;
-                case "JH1":
-                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);
-                    break;
-                case "JH2":
-                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);
-                    break;
-                case "JH3":
-                case "JH4":
-                case "JH5":
-                case "JH6":
-                case "JH7":
-                    int index = Integer.parseInt(key.substring(2)) - 2;
-                    position.set("axleWeight" + index, buf.readUnsignedShort() * 0.5);
-                    break;
-                case "JH8":
-                    position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5);
-                    break;
-                case "JH9":
-                    buf.readUnsignedShort(); // tachograph speed
-                    break;
-                case "JH10":
-                    buf.readUnsignedShort(); // ambient air temperature
-                    break;
-                case "JH11":
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);
-                    break;
-                case "JH12":
-                    buf.readUnsignedShort(); // fuel economy
-                    break;
-                case "JL1":
-                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);
-                    break;
-                case "JL2":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);
-                    break;
-                case "JL3":
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
-                    break;
-                case "JL4":
-                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);
-                    break;
-                case "JS1":
-                    position.set(Position.KEY_VIN, readString(buf));
-                    break;
-                case "JS2":
-                    readString(buf); // fms version supported
-                    break;
-                case "JS3":
-                    position.set("driver1", readString(buf));
-                    break;
-                case "JS4":
-                    position.set("driver2", readString(buf));
-                    break;
-                case "JN1":
-                    buf.readUnsignedInt(); // cruise control distance
-                    break;
-                case "JN2":
-                    buf.readUnsignedInt(); // excessive idling time
-                    break;
-                case "JN3":
-                    buf.readUnsignedInt(); // excessive idling fuel
-                    break;
-                case "JN4":
-                    buf.readUnsignedInt(); // pto time
-                    break;
-                case "JN5":
-                    buf.readUnsignedInt(); // pto fuel
-                    break;
-                default:
-                    break;
-            }
-        }
-
-        if (cellTower.getMobileCountryCode() != null
-            && cellTower.getMobileNetworkCode() != null
-            && cellTower.getCellId() != null && cellTower.getCellId() != 0
-            && cellTower.getLocationAreaCode() != null) {
-            position.setNetwork(new Network(cellTower));
-        } else if (cellTower.getSignalStrength() != null) {
-            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
-        }
-    }
+verifyNull(decoder, binary(
+    "4052698c032a924f000147027fe5d7425f642e56060f031847bb68cb500719e26752c25bebc11c7fddce2b8ed4eff4ed863b187cc6653b5b1c1fc6803884d21aeeedae2ec6e72781d97e95b965610c1d107e5400cd5a7b7b3b592e676091c6a5893d80af9b3c63ae4de20d6e5bc60440bf2c299fbabfe268039d558e4b8589dd5173c926b7f51b916ba29f21d46ff9170793fe450072d691896e114fddce4fd29f7f2f9b74e41ca83814015e8a00ffd1f9bd475e2a44624e074a009455ab5628e39fce8036a09368cf1d2ba0d2653b979c0a00e9edc82335a56d1ee6071401d468b0f4cd761a743d011401d15b4636015721870dd0500695b2edabeabf2f4a00a514645cc83a739ad165f320c1ed401617a0a2800a2803ffd2faa68a004660aa598e00acd8f4d866d54eab3c7994284881fe11ebf5e68034e8a0086e674850927f0ae2bc4dafa5844659674451d39e49a00e1dae23d76ed67bb72211d109e4d5bd756da3b68a4b755021e30076a00cf31431a064e41e6a19a68d5396518f7a00f1ff008bfe27f31068766dbb7e1a723d3fbbf8d79aeb764748b489662be7ccbbb6820e07d4500734caa727765aa32ac0720e28026b4bb9ed7ccf2594798bb5b2a0f1f8f4a82800a2803fffd3f9b97352ae02e45004c808e4f7a997823bd005e86600618f26b7b4a9cab819fa500767a749b9403cd74162b903de803acd1e3c28aebf4d4c81401d05a4441fad682444738a00b712f2055f03e502802b14c5dffbc2ac106343ed4012a905411e94b40051401fffd4faa6992488980c793d0773400d54676df2f1e8b9e054b400564ebb77750c463b442d2119247f08f53e9401e7da85d6a12cd221d427217a856c60fe15caea9689292f2832bfac8777f3a00e67538ef150ff00665d9b4b95fba4aee46f623fa8ae26fbe24f88b49b87d3b5bd2a12e38ca3950e3d41e7228008be2ac02d423dadc09071c1047e791fcab96d77c79acdf92969279113f1c1cb7e7401876c4c939b8ba73230e5998e49ac4d66ee6bebd796462ddb9f4ed40140a12339e9dea225b1824d0025140051401fffd5f9bc676f6a7ae4af6e280255cf5c7153a7b0a0052d8715bba64bf32f39a00ed74694902bb1d306e65c500763a5afca2baed2"));
\ No newline at end of file
