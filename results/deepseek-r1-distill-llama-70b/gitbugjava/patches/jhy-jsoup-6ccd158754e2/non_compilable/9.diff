diff --git a/tmp/6cb6f029-f5fe-4b68-9692-47d9a0c16808_buggy.java b/tmp/0219f4f9-3401-441e-818b-4cb017d4d63a_fixed.java
index 23f078d..997b3b4 100644
--- a/tmp/6cb6f029-f5fe-4b68-9692-47d9a0c16808_buggy.java
+++ b/tmp/0219f4f9-3401-441e-818b-4cb017d4d63a_fixed.java
@@ -1,14 +1,18 @@
-    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
+private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) {
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            // Properly encode the character for URLs using Java 10+ String.encode method
+            String encoded = java.net.URLLEncoder.encode(new String(Character.toChars(c)), java.nio.charset.StandardCharsets.UTF_8)
+                    .replace("%2F", "/")
+                    .replace("%3A", ":")
+                    .replace("%2D", "-")
+                    .replace("%2E", ".");
+            sb.append(encoded);
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
