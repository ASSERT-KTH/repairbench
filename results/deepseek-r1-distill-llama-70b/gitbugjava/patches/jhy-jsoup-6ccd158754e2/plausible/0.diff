diff --git a/tmp/315406ab-f538-4f61-990c-535b984ae32c_buggy.java b/tmp/9203c606-3024-4aa2-b79b-39ca543886ec_fixed.java
index 23f078d..5eaf9f4 100644
--- a/tmp/315406ab-f538-4f61-990c-535b984ae32c_buggy.java
+++ b/tmp/9203c606-3024-4aa2-b79b-39ca543886ec_fixed.java
@@ -1,14 +1,28 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
+    for (int i = 0; i < s.length();) {
+        int c;
+        if (Character.isHighSurrogate(s.charAt(i))) {
+            // Check if there is a next character to form a surrogate pair
+            if (i + 1 < s.length() && Character.isLowSurrogate(s.charAt(i + 1))) {
+                c = Character.toCodePoint(s.charAt(i), s.charAt(i + 1));
+                i += 2;
+            } else {
+                // Orphan high surrogate, treat as single char
+                c = s.charAt(i);
+                i += 1;
+            }
+        } else {
+            c = s.charAt(i);
+            i += 1;
+        }
+
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
             sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
