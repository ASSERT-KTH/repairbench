diff --git a/tmp/d658e8e5-8215-4c84-a017-eedf155ce522_buggy.java b/tmp/13b54f9b-22a4-403b-8cd9-cc8180508893_fixed.java
index d87dd79..64b98bc 100644
--- a/tmp/d658e8e5-8215-4c84-a017-eedf155ce522_buggy.java
+++ b/tmp/13b54f9b-22a4-403b-8cd9-cc8180508893_fixed.java
@@ -1,47 +1,57 @@
 @Override
 protected Object decode(
         ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
+    // Search for the first matching ']' from the current reader index.
     int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+    for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
         if (buf.getByte(i) == ']') {
             endIndex = i + 1;
             break;
         }
     }
 
     if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
+        int frameLength = endIndex - buf.readerIndex();
+        ByteBuf frame = Unpooled.buffer(frameLength);
+        int markReaderIndex = buf.readerIndex();
         while (buf.readerIndex() < endIndex) {
             byte b1 = buf.readByte();
             if (b1 == '}') {
+                if (buf.readerIndex() < endIndex) {
                     byte b2 = buf.readByte();
                     switch (b2) {
                         case 0x01:
                             frame.writeByte('}');
                             break;
                         case 0x02:
                             frame.writeByte('[');
                             break;
                         case 0x03:
                             frame.writeByte(']');
                             break;
                         case 0x04:
                             frame.writeByte(',');
                             break;
                         case 0x05:
                             frame.writeByte('*');
                             break;
                         default:
                             throw new IllegalArgumentException(String.format(
                                     "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                     }
+                } else {
+                    // Not enough bytes to read escape sequence
+                    // Reset reader index and return null to wait for more data
+                    buf.readerIndex(markReaderIndex);
+                    return null;
+                }
             } else {
                 frame.writeByte(b1);
             }
         }
         return frame;
     }
 
     return null;
 }
\ No newline at end of file
