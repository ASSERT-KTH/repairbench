diff --git a/tmp/b502c33c-fcda-4476-9945-4de6fe76cb43_buggy.java b/tmp/3850878e-2fb7-4a4e-9442-f77d587b940e_fixed.java
index 33e2e76..fdbdaef 100644
--- a/tmp/b502c33c-fcda-4476-9945-4de6fe76cb43_buggy.java
+++ b/tmp/3850878e-2fb7-4a4e-9442-f77d587b940e_fixed.java
@@ -1,126 +1,147 @@
 private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
     CellTower cellTower = new CellTower();
     String[] keys = form.substring(1).split("%");
     for (String key : keys) {
         switch (key) {
             case "SA":
                 position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 break;
             case "MV":
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
                 break;
             case "BV":
                 position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                 break;
             case "GQ":
                 cellTower.setSignalStrength((int) buf.readUnsignedByte());
                 break;
             case "CE":
-                    cellTower.setCellId(buf.readUnsignedInt());
+                cellTower.setCellId((int) buf.readUnsignedInt());
                 break;
             case "LC":
                 cellTower.setLocationAreaCode(buf.readUnsignedShort());
                 break;
-                case "CN":
-                    int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
-                    cellTower.setMobileCountryCode(combinedMobileCodes / 100);
-                    cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
+            case "CN": {
+                // The code previously parsed combinedMobileCodes = <buffer> % 100000
+                // cccnn but in most usage, it's expected to be BCD based like 310260 or similar
+                // In Atrack, it's just mccmnc as int, so parse it as such:
+                int mccmnc = (int) buf.readUnsignedInt();
+                // Most common lengths: mcc=3 digits, mnc=2 or 3 digits (usually 2)
+                // Try detecting 5 or 6 digits
+                int mcc;
+                int mnc;
+                if (mccmnc > 99999) { // 6 digits
+                    mcc = mccmnc / 1000;
+                    mnc = mccmnc % 1000;
+                } else if (mccmnc > 999) { // 5 digits
+                    mcc = mccmnc / 100;
+                    mnc = mccmnc % 100;
+                } else { // Fallback
+                    mcc = mccmnc;
+                    mnc = 0;
+                }
+                cellTower.setMobileCountryCode(mcc);
+                cellTower.setMobileNetworkCode(mnc);
                 break;
+            }
             case "RL":
                 buf.readUnsignedByte(); // rxlev
                 break;
             case "PC":
                 position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
                 break;
             case "AT":
-                    position.setAltitude(buf.readUnsignedInt());
+                position.setAltitude((double) buf.readUnsignedInt());
                 break;
             case "RP":
                 position.set(Position.KEY_RPM, buf.readUnsignedShort());
                 break;
             case "GS":
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 break;
             case "DT":
                 position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
                 break;
             case "VN":
                 position.set(Position.KEY_VIN, readString(buf));
                 break;
             case "MF":
                 buf.readUnsignedShort(); // mass air flow rate
                 break;
             case "EL":
                 buf.readUnsignedByte(); // engine load
                 break;
             case "TR":
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                 break;
             case "ET":
                 position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
                 break;
             case "FL":
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                 break;
             case "ML":
                 buf.readUnsignedByte(); // mil status
                 break;
             case "FC":
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
                 break;
             case "CI":
-                    readString(buf); // format string
+                // format string, may be present but unused
+                readString(buf);
                 break;
             case "AV1":
                 position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                 break;
             case "NC":
                 readString(buf); // gsm neighbor cell info
                 break;
             case "SM":
                 buf.readUnsignedShort(); // max speed between reports
                 break;
             case "GL":
                 readString(buf); // google link
                 break;
             case "MA":
                 readString(buf); // mac address
                 break;
             case "PD":
                 buf.readUnsignedByte(); // pending code status
                 break;
             case "CD":
                 position.set(Position.KEY_ICCID, readString(buf));
                 break;
             case "CM":
                 buf.readLong(); // imsi
                 break;
             case "GN":
                 buf.skipBytes(60); // g sensor data
                 break;
             case "GV":
                 buf.skipBytes(6); // maximum g force
                 break;
             case "ME":
                 buf.readLong(); // imei
                 break;
             case "IA":
                 buf.readUnsignedByte(); // intake air temperature
                 break;
             case "MP":
                 buf.readUnsignedByte(); // manifold absolute pressure
                 break;
             default:
+                // skip unknown keys
                 break;
         }
     }
 
+    // Only call .equals or use with autoboxing if not null
     if (cellTower.getMobileCountryCode() != null
             && cellTower.getMobileNetworkCode() != null
             && cellTower.getCellId() != null && cellTower.getCellId() != 0
             && cellTower.getLocationAreaCode() != null) {
         position.setNetwork(new Network(cellTower));
     } else if (cellTower.getSignalStrength() != null) {
         position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
     }
 }
\ No newline at end of file
