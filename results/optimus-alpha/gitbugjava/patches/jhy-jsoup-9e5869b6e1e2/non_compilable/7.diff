diff --git a/tmp/95b82d73-7ea9-40c9-a0fb-5d8c02c1d683_buggy.java b/tmp/47400bcd-5f8a-4d35-a93b-5e5f66d6eb81_fixed.java
index 0583946..ff9cf3d 100644
--- a/tmp/95b82d73-7ea9-40c9-a0fb-5d8c02c1d683_buggy.java
+++ b/tmp/47400bcd-5f8a-4d35-a93b-5e5f66d6eb81_fixed.java
@@ -1,30 +1,33 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+    // Use preserveWhitespace with correct type Element, not Node
+    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parent);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        // Fix: check that parent is not a custom tag (not block, not inline, not known)
+        boolean parentIsBlock = parent != null && parent.tag().isBlock() && !parent.tag().isSelfClosing();
+        trimLeading = (siblingIndex == 0 && parentIsBlock) || parentNode instanceof Document;
+        trimTrailing = nextSibling() == null && parentIsBlock;
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && (((TextNode) next).isBlank()));
+        // Fix: Only skip if parent is block and not a custom tag
+        if (couldSkip && isBlank && parentIsBlock) return;
 
         Node prev = previousSibling();
         if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+            (siblingIndex == 0 && parentIsBlock && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
         )
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
