diff --git a/tmp/6a807c4f-f932-4957-8030-2aa1b2a24fb1_buggy.java b/tmp/774bcb30-4624-4edf-b664-65967ed42bcd_fixed.java
index 0583946..be01202 100644
--- a/tmp/6a807c4f-f932-4957-8030-2aa1b2a24fb1_buggy.java
+++ b/tmp/774bcb30-4624-4edf-b664-65967ed42bcd_fixed.java
@@ -1,30 +1,45 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
+        // Only trim leading whitespace if NOT following a custom (unknown) tag;
+        // For https://github.com/jhy/jsoup/issues/1852, avoid removing whitespace after a custom element
+        boolean followsCustomTag = false;
+        if (siblingIndex > 0 && parent != null) {
+            Node prev = previousSibling();
+            if (prev instanceof Element) {
+                Element prevEl = (Element) prev;
+                if (prevEl.tag().isUnknown()) {
+                    // custom (unknown) tag
+                    followsCustomTag = true;
+                }
+            }
+        }
+
+        trimLeading = ((siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
+            parentNode instanceof Document)
+            && !followsCustomTag;
+
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && (((TextNode) next).isBlank()));
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
         )
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
