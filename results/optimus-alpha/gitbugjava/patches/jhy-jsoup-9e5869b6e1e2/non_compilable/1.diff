diff --git a/tmp/a4a6e27f-0d01-464c-9301-d3cb351fb991_buggy.java b/tmp/c55e7650-51e5-410e-a3f4-e7311c30f7ad_fixed.java
index 0583946..cdf21c6 100644
--- a/tmp/a4a6e27f-0d01-464c-9301-d3cb351fb991_buggy.java
+++ b/tmp/c55e7650-51e5-410e-a3f4-e7311c30f7ad_fixed.java
@@ -1,30 +1,36 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
+        // Only trim leading and trailing whitespace for text nodes, not element nodes.
+        // Fix: Only trimLeading/trailing when node() is actually TextNode, not always when prettyPrint.
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        // Fix: Only trim trailing whitespace if this node *is* the last node and is a text node,
+        // and parent is not a custom tag (like <bar> or <foo>).
+        boolean parentIsBlock = parent != null && parent.tag().isBlock();
+        boolean parentIsKnownTag = parent != null && (!parent.tag().isKnownTag() || parent.tag().isBlock());
+        trimTrailing = nextSibling() == null && parentIsBlock && parentIsKnownTag;
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+            (siblingIndex == 0 && parentIsBlock && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
             (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
         )
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
