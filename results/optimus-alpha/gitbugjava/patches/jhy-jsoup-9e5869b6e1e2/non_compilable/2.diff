diff --git a/tmp/a9b0b17c-21db-4e67-9522-3536268acbeb_buggy.java b/tmp/77e1332a-79ad-4d4c-b6fe-7f0f05235300_fixed.java
index 0583946..6c96cfd 100644
--- a/tmp/a9b0b17c-21db-4e67-9522-3536268acbeb_buggy.java
+++ b/tmp/77e1332a-79ad-4d4c-b6fe-7f0f05235300_fixed.java
@@ -1,30 +1,30 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        // Fix: Only trim leading whitespace if parent is NOT a custom tag (unknown tag)
+        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock() && !parent.tag().isKnownTag()) ||
+            (parentNode instanceof Document);
+        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock() && !parent.tag().isKnownTag();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && (((TextNode) next).isBlank()));
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
         )
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
