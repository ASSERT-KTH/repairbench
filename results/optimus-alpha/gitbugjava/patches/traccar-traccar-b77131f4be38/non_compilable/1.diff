diff --git a/tmp/ac24bd4b-22dc-4ecf-ae3b-a64daff54ae5_buggy.java b/tmp/95833048-3cc0-4b2d-b837-666a2ad12316_fixed.java
index 7b8ee38..f05e025 100644
--- a/tmp/ac24bd4b-22dc-4ecf-ae3b-a64daff54ae5_buggy.java
+++ b/tmp/95833048-3cc0-4b2d-b837-666a2ad12316_fixed.java
@@ -1,179 +1,220 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
     buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     buf.skipBytes(1); // '*' delimiter
 
     String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+    boolean hasIndex = false;
+    int readerIdx = buf.readerIndex();
+
+    // Try to detect optional index
+    int nextAsteriskIdx = buf.indexOf(readerIdx, buf.writerIndex(), (byte) '*');
+    if (nextAsteriskIdx - readerIdx == 4 &&
+            nextAsteriskIdx + 1 + 4 <= buf.writerIndex()) {
+        String maybeHex = buf.toString(readerIdx, 4, StandardCharsets.US_ASCII);
+        // 4 hex digits for index, check there's another asterisk after
+        if (maybeHex.matches("\\p{XDigit}+")) {
             hasIndex = true;
-            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
+            index = buf.readSlice(4).toString(StandardCharsets.US_ASCII);
             buf.skipBytes(1); // '*' delimiter
         }
+    }
 
-        buf.skipBytes(4); // length
+    // Length - always present and 4 bytes
+    buf.skipBytes(4);
     buf.skipBytes(1); // '*' delimiter
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+    // Move writerIndex to ignore trailing ']'
+    buf.writerIndex(buf.writerIndex() - 1); // ignore ']'
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+    // Find comma delimiter for type, if not present - use to end
+    int typeCommaIdx = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (typeCommaIdx < 0) {
+        typeCommaIdx = buf.writerIndex();
     }
 
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    String type = buf.readSlice(typeCommaIdx - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+    if (typeCommaIdx < buf.writerIndex()) {
+        buf.readerIndex(typeCommaIdx + 1);
     }
 
     if (type.equals("INIT")) {
 
         sendResponse(channel, id, index, "INIT,1");
 
     } else if (type.equals("LK")) {
 
         sendResponse(channel, id, index, "LK");
 
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, null);
 
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                 return position;
             }
         }
 
     } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
         if (type.startsWith("AL")) {
             if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
+                // ALARM REMOVING: If input starts with 'AL', set the alarm key
+                position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);
             }
             sendResponse(channel, id, index, "AL");
         }
 
         return position;
 
     } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
         sendResponse(channel, id, index, type);
 
     } else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
             || type.equalsIgnoreCase("btemp2")) {
 
         if (buf.isReadable()) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, new Date());
 
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             int valueIndex = 0;
 
             if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                if (values.length > valueIndex && Integer.parseInt(values[valueIndex++]) > 0
+                        && values.length > valueIndex) {
                     position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                 }
             } else {
-                    if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                if ((type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD"))
+                        && values.length > valueIndex + 1) {
                     position.set("pressureHigh", values[valueIndex++]);
                     position.set("pressureLow", values[valueIndex++]);
                 }
-                    if (valueIndex <= values.length - 1) {
+                if (values.length > valueIndex && !values[valueIndex].isEmpty()) {
                     position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                 }
             }
 
             return position;
 
         }
 
     } else if (type.equals("img")) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (timeIndex >= 0 && (timeIndex + 12 + 2) <= buf.writerIndex()) {
             buf.readerIndex(timeIndex + 12 + 2);
+        } else {
+            buf.readerIndex(buf.writerIndex());
+        }
         position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
 
         return position;
 
     } else if (type.equals("JXTK")) {
 
+        // Find the index of 4th comma, since data header is: JXTK,0,watch_7...
         int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
         String[] values = buf.readCharSequence(
                 dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
 
         int current = Integer.parseInt(values[2]);
         int total = Integer.parseInt(values[3]);
 
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
 
         sendResponse(channel, id, index, "JXTKR,1");
 
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
 
     } else if (type.equals("TK")) {
 
         if (buf.readableBytes() == 1) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
 
         return position;
 
+    } else if (type.toUpperCase().startsWith("TEMP")) {
+        // For temperature packets: [ZJ*...*TEMP,36.5]
+        String temperatureStr = buf.toString(StandardCharsets.US_ASCII).trim();
+        if (!temperatureStr.isEmpty()) {
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(deviceSession.getDeviceId());
+            getLastLocation(position, null);
+            String[] parts = temperatureStr.split(",");
+            double tempValue;
+            // Some packets are: TEMP,36.5
+            if (parts.length >= 2 && parts[1].matches("[-+]?\\d*\\.?\\d+")) {
+                tempValue = Double.parseDouble(parts[1]);
+            } else if (parts.length == 1 && parts[0].matches("[-+]?\\d*\\.?\\d+")) {
+                tempValue = Double.parseDouble(parts[0]);
+            } else {
+                tempValue = Double.NaN;
+            }
+
+            if (!Double.isNaN(tempValue)) {
+                position.set(Position.PREFIX_TEMP + 1, tempValue);
+                return position;
+            }
+        }
     }
 
     return null;
 }
\ No newline at end of file
