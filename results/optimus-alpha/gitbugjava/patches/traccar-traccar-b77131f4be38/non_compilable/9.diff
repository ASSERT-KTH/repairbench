diff --git a/tmp/a73d8d3a-4d12-415d-b4dd-bb4dd2f6d488_buggy.java b/tmp/d6bbf4c8-f8d4-49f4-b60d-c247e060684a_fixed.java
index 7b8ee38..f291d79 100644
--- a/tmp/a73d8d3a-4d12-415d-b4dd-bb4dd2f6d488_buggy.java
+++ b/tmp/d6bbf4c8-f8d4-49f4-b60d-c247e060684a_fixed.java
@@ -1,179 +1,212 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
     buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     buf.skipBytes(1); // '*' delimiter
 
     String index = null;
+    boolean hasIndex = false;
     int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
+    if (contentIndex > buf.readerIndex()) {
+        // Try to detect index field
+        // There must be at least 5 more bytes after this '*' to check for optional index field
+        if (contentIndex + 5 < buf.writerIndex()
+                && buf.getByte(contentIndex + 5) == '*'
                 && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
             int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
             hasIndex = true;
             index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
             buf.skipBytes(1); // '*' delimiter
         }
+    }
 
     buf.skipBytes(4); // length
     buf.skipBytes(1); // '*' delimiter
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
-
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+    // ignore ending ']'
+    if (buf.writerIndex() > buf.readerIndex() && buf.getByte(buf.writerIndex() - 1) == ']') {
+        buf.writerIndex(buf.writerIndex() - 1);
     }
 
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+    int typeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    String type;
+    if (typeIndex < 0) {
+        type = buf.readSlice(buf.writerIndex() - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    } else {
+        type = buf.readSlice(typeIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+        if (buf.readerIndex() < buf.writerIndex()) {
+            buf.readerIndex(typeIndex + 1);
+        }
     }
 
     if (type.equals("INIT")) {
 
         sendResponse(channel, id, index, "INIT,1");
 
     } else if (type.equals("LK")) {
 
         sendResponse(channel, id, index, "LK");
 
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, null);
 
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                 return position;
             }
         }
 
     } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
         if (type.startsWith("AL")) {
             if (position != null) {
                 position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
             }
             sendResponse(channel, id, index, "AL");
         }
 
         return position;
 
     } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
         sendResponse(channel, id, index, type);
 
     } else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
             || type.equalsIgnoreCase("btemp2")) {
 
         if (buf.isReadable()) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, new Date());
 
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             int valueIndex = 0;
 
             if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
-                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
+                if (values.length > 1 && Integer.parseInt(values[valueIndex++].trim()) > 0 && valueIndex < values.length) {
+                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex].trim()));
                 }
             } else {
-                    if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
-                        position.set("pressureHigh", values[valueIndex++]);
-                        position.set("pressureLow", values[valueIndex++]);
+                if ((type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) && values.length > valueIndex + 1) {
+                    position.set("pressureHigh", values[valueIndex++].trim());
+                    position.set("pressureLow", values[valueIndex++].trim());
                 }
                 if (valueIndex <= values.length - 1) {
-                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
+                    String heartValue = values[valueIndex].trim();
+                    if (!heartValue.isEmpty()) {
+                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(heartValue));
+                    }
                 }
             }
 
             return position;
 
         }
 
     } else if (type.equals("img")) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (timeIndex >= 0 && timeIndex + 12 + 2 < buf.writerIndex()) {
             buf.readerIndex(timeIndex + 12 + 2);
             position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
             return position;
+        }
 
     } else if (type.equals("JXTK")) {
 
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
+        // BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1
+        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4);
+        if (dataIndex < 0) return null;
+        dataIndex += 1;
         String[] values = buf.readCharSequence(
                 dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
 
         int current = Integer.parseInt(values[2]);
         int total = Integer.parseInt(values[3]);
 
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
 
         sendResponse(channel, id, index, "JXTKR,1");
 
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
 
     } else if (type.equals("TK")) {
 
         if (buf.readableBytes() == 1) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
 
         return position;
 
+    } else if (type.equals("TEMP")) {
+
+        // For "[ZJ*5678901234*0001*0009*TEMP,36.5]"
+        String tempStr = buf.toString(StandardCharsets.US_ASCII).trim();
+        if (!tempStr.isEmpty()) {
+            String[] tempParts = tempStr.split(",", 2);
+            if (tempParts.length >= 2) {
+                try {
+                    double tempValue = Double.parseDouble(tempParts[1]);
+                    Position position = new Position(getProtocolName());
+                    position.setDeviceId(deviceSession.getDeviceId());
+                    getLastLocation(position, null);
+                    position.set(Position.PREFIX_TEMP + 1, tempValue);
+                    return position;
+                } catch (NumberFormatException ignored) { }
+            }
+        }
     }
 
     return null;
 }
\ No newline at end of file
