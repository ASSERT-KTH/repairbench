diff --git a/tmp/e6f2fa75-7ed5-430a-8532-3c72d7189122_buggy.java b/tmp/58f8f02d-353c-44e7-8a09-980acecca21d_fixed.java
index 2189af9..5ecef89 100644
--- a/tmp/e6f2fa75-7ed5-430a-8532-3c72d7189122_buggy.java
+++ b/tmp/58f8f02d-353c-44e7-8a09-980acecca21d_fixed.java
@@ -1,113 +1,181 @@
 private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
     int type = buf.readUnsignedByte();
 
     if (type == 0xF0) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
+        if (buf.readableBytes() <= 0) {
+            return null; // corrupted packet, can't continue
+        }
+
         if (buf.readUnsignedByte() > 0) {
             position.set(Position.KEY_ARCHIVE, true);
         }
 
         buf.readUnsignedByte(); // vehicle type
 
-            int count;
+        if (buf.readableBytes() <= 0) {
+            return null;
+        }
+
         int subtype = buf.readUnsignedByte();
+        int count;
         switch (subtype) {
             case 0x01:
+                if (buf.readableBytes() <= 0) {
+                    return null;
+                }
                 count = buf.readUnsignedByte();
                 for (int i = 0; i < count; i++) {
+                    if (buf.readableBytes() < 3) break; // need at least id(2) + length(1)
                     int id = buf.readUnsignedShort();
                     int length = buf.readUnsignedByte();
+
+                    if (buf.readableBytes() < length) {
+                        buf.skipBytes(buf.readableBytes()); // skip what's left
+                        break;
+                    }
+
                     switch (id) {
                         case 0x0102:
                         case 0x0528:
                         case 0x0546:
+                            if (length >= 4 && buf.readableBytes() >= 4) {
                                 position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x0103:
+                            if (length >= 4 && buf.readableBytes() >= 4) {
                                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x052A:
+                            if (length >= 2 && buf.readableBytes() >= 2) {
                                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x0105:
                         case 0x052C:
+                            if (length >= 4 && buf.readableBytes() >= 4) {
                                 position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         case 0x014A:
                         case 0x0537:
                         case 0x0538:
                         case 0x0539:
+                            if (length >= 2 && buf.readableBytes() >= 2) {
                                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                            } else {
+                                buf.skipBytes(length);
+                            }
                             break;
                         default:
                             switch (length) {
                                 case 1:
+                                    if (buf.readableBytes() >= 1) {
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
+                                    } else {
+                                        buf.skipBytes(buf.readableBytes());
+                                    }
                                     break;
                                 case 2:
+                                    if (buf.readableBytes() >= 2) {
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
+                                    } else {
+                                        buf.skipBytes(buf.readableBytes());
+                                    }
                                     break;
                                 case 4:
+                                    if (buf.readableBytes() >= 4) {
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
+                                    } else {
+                                        buf.skipBytes(buf.readableBytes());
+                                    }
                                     break;
                                 default:
-                                        buf.skipBytes(length);
+                                    buf.skipBytes(length > buf.readableBytes() ? buf.readableBytes() : length);
                                     break;
                             }
                             break;
                     }
                 }
+                // Safety: Only continue if enough bytes remain for coordinates (typically 4+4+...)
+                if (buf.readableBytes() >= 8) {
                     decodeCoordinates(position, buf);
+                }
                 position.setTime(time);
                 break;
             case 0x03:
+                if (buf.readableBytes() <= 0) {
+                    return null;
+                }
                 count = buf.readUnsignedByte();
                 for (int i = 0; i < count; i++) {
+                    if (buf.readableBytes() < 3) break; // id(2)+len(1)
                     int id = buf.readUnsignedShort();
                     int length = buf.readUnsignedByte();
                     switch (id) {
                         case 0x1A:
                             position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                             break;
                         case 0x1B:
                             position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                             break;
                         case 0x1C:
                             position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                             break;
                         case 0x1D:
                         case 0x1E:
                         case 0x1F:
                             position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                             break;
                         case 0x23:
                             position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                             break;
                         default:
                             break;
                     }
-                        buf.skipBytes(length);
+                    buf.skipBytes(length > buf.readableBytes() ? buf.readableBytes() : length);
                 }
+                // Coordinates
+                if (buf.readableBytes() >= 8) {
                     decodeCoordinates(position, buf);
+                }
                 position.setTime(time);
                 break;
             case 0x0B:
+                if (buf.readableBytes() <= 0) {
+                    return null;
+                }
                 if (buf.readUnsignedByte() > 0) {
+                    if (buf.readableBytes() >= 17) {
                         position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+                    } else {
+                        // Malformed, skip to end
+                        buf.skipBytes(buf.readableBytes());
+                    }
                 }
                 getLastLocation(position, time);
                 break;
             default:
                 return null;
         }
 
         return position;
     }
 
     return null;
 }
\ No newline at end of file
