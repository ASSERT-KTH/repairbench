diff --git a/tmp/d695ede1-ae8e-472d-bc73-21664276bede_buggy.java b/tmp/40bd5756-d018-4024-ba66-523f020a948b_fixed.java
index 0a8838d..1cc6f82 100644
--- a/tmp/d695ede1-ae8e-472d-bc73-21664276bede_buggy.java
+++ b/tmp/40bd5756-d018-4024-ba66-523f020a948b_fixed.java
@@ -1,61 +1,81 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
-        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
+    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
+    String model = device != null ? device.getModel() : null;
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
-                buf.readUnsignedByte(); // type
+            int type = buf.readUnsignedByte(); // type
             int length = buf.readInt() - 4;
             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
             if (isPrintable(buf, length)) {
-                    position.set(Position.KEY_RESULT,
-                            buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
+                String result = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
+                position.set(Position.KEY_RESULT, result);
             } else {
-                    position.set(Position.KEY_RESULT,
-                            ByteBufUtil.hexDump(buf.readSlice(length)));
+                position.set(Position.KEY_RESULT, ByteBufUtil.hexDump(buf.readSlice(length)));
+            }
+            // Fix: driver code for CODEC_13
+            if (type == 6) { // 6 == driver code/identification message
+                String result = position.getString(Position.KEY_RESULT);
+                if (result != null) {
+                    String code = result;
+                    // According to protocol, split by | or extract number
+                    // Attempt possible extraction of driver code: TS|CODE|...
+                    String[] segments = code.split("\\|");
+                    if (segments.length >= 3 && segments[0].equalsIgnoreCase("TS")) {
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, segments[2]);
+                    } else if (segments.length >= 2 && segments[0].equalsIgnoreCase("TS")) {
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, segments[1]);
+                    } else {
+                        // Fallback, if looks like a code itself (all digits)
+                        if (code.matches("^[0-9]+$")) {
+                            position.set(Position.KEY_DRIVER_UNIQUE_ID, code);
+                        }
+                    }
+                }
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
