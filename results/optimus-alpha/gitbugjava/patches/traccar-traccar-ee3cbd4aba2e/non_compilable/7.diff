diff --git a/tmp/567589b8-1617-4779-af37-afe15c8a7782_buggy.java b/tmp/03570a8a-ad17-4553-ba87-737a52817fdd_fixed.java
index a4ebaaa..7f59cde 100644
--- a/tmp/567589b8-1617-4779-af37-afe15c8a7782_buggy.java
+++ b/tmp/03570a8a-ad17-4553-ba87-737a52817fdd_fixed.java
@@ -1,63 +1,81 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
     position.set(Position.KEY_STATUS, status);
 
+    // --- fix: store actual byte array for gyro instead of hex string if 0x0C ---
     while (buf.readableBytes() > 2) {
         int id = buf.readUnsignedByte();
         int length = buf.readUnsignedByte();
         switch (id) {
             case 0x02:
                 position.setAltitude(buf.readShort());
                 break;
             case 0x0C:
-                    position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                // fix: get signed 2-byte integers [-32768,32767] for x, y, z axes
+                // If length == 6, 3 axes, signed shorts, then divide by 256 to match [-128,127]
+                if (length == 6 && buf.readableBytes() >= 6) {
+                    byte[] gyroRaw = new byte[6];
+                    buf.readBytes(gyroRaw);
+                    int[] gyro = new int[3];
+                    gyro[0] = (short) ((gyroRaw[0] & 0xFF) << 8 | (gyroRaw[1] & 0xFF));
+                    gyro[1] = (short) ((gyroRaw[2] & 0xFF) << 8 | (gyroRaw[3] & 0xFF));
+                    gyro[2] = (short) ((gyroRaw[4] & 0xFF) << 8 | (gyroRaw[5] & 0xFF));
+                    // To match signed byte in [-128,127], right shift to take high byte (or divide by 256)
+                    int[] result = new int[3];
+                    result[0] = gyro[0] >> 8;
+                    result[1] = gyro[1] >> 8;
+                    result[2] = gyro[2] >> 8;
+                    position.set("tilt", Arrays.toString(result));
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             default:
                 buf.skipBytes(length);
                 break;
         }
     }
 
     return position;
 }
\ No newline at end of file
