diff --git a/tmp/7beda79d-5da9-4f0f-b5f3-e02ae88a85c8_buggy.java b/tmp/b3d6017d-1a56-4c61-9d9c-43d11a178162_fixed.java
index a4ebaaa..10b0860 100644
--- a/tmp/7beda79d-5da9-4f0f-b5f3-e02ae88a85c8_buggy.java
+++ b/tmp/b3d6017d-1a56-4c61-9d9c-43d11a178162_fixed.java
@@ -1,63 +1,86 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
     position.set(Position.KEY_STATUS, status);
 
+    // fix: avoid reading/splitting when not enough data
     while (buf.readableBytes() > 2) {
         int id = buf.readUnsignedByte();
         int length = buf.readUnsignedByte();
+        if (buf.readableBytes() < length) {
+            buf.skipBytes(buf.readableBytes());
+            break;
+        }
         switch (id) {
             case 0x02:
+                if (length >= 2) {
                     position.setAltitude(buf.readShort());
+                    if (length > 2) {
+                        buf.skipBytes(length - 2);
+                    }
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x0C:
-                    position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                if (length == 6) {
+                    // fix: store "gyro" attribute as signed 3 bytes array
+                    byte[] gyroBytes = new byte[6];
+                    buf.readBytes(gyroBytes);
+                    int[] gyro = new int[3];
+                    gyro[0] = (short) ((gyroBytes[0] & 0xFF) << 8 | (gyroBytes[1] & 0xFF));
+                    gyro[1] = (short) ((gyroBytes[2] & 0xFF) << 8 | (gyroBytes[3] & 0xFF));
+                    gyro[2] = (short) ((gyroBytes[4] & 0xFF) << 8 | (gyroBytes[5] & 0xFF));
+                    position.set("gyro", "[" + gyro[0] + "," + gyro[1] + "," + gyro[2] + "]");
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             default:
                 buf.skipBytes(length);
                 break;
         }
     }
 
     return position;
 }
\ No newline at end of file
