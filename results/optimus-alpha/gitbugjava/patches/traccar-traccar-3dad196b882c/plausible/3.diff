diff --git a/tmp/3da37a9f-8d3c-4eb9-905f-9cb0bfa4857e_buggy.java b/tmp/2f977bad-5d1d-4a3d-97f0-112dad17c44b_fixed.java
index c6164f1..0684deb 100644
--- a/tmp/3da37a9f-8d3c-4eb9-905f-9cb0bfa4857e_buggy.java
+++ b/tmp/2f977bad-5d1d-4a3d-97f0-112dad17c44b_fixed.java
@@ -1,116 +1,198 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
-                .setYear(Integer.parseInt(time.substring(0, 2)))
+                .setYear(Integer.parseInt(time.substring(0, 2)) + 2000)
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() >= 4) {
+            int subtypeIndex = buf.readerIndex();
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int length = buf.readUnsignedShort();
+
+            // Prevent negative/invalid lengths and incomplete data reads
+            if (length < 4 || buf.readableBytes() < length - 4) {
+                // Not enough data, roll back and break out
+                buf.readerIndex(subtypeIndex);
+                break;
+            }
+
+            int dataLen = length - 4;
+
             switch (subtype) {
                 case 0x0001:
+                    if (dataLen >= 13) {  // minimum expected data bytes for this subtype
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
                         position.set("averageSpeed", buf.readUnsignedByte());
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
+                        if (buf.readableBytes() >= 4) {
                             buf.readUnsignedInt(); // trip id
+                        }
+                    } else {
+                        buf.skipBytes(dataLen);
+                    }
                     break;
                 case 0x0005:
+                    if (dataLen >= 6) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                    } else {
+                        buf.skipBytes(dataLen);
+                    }
                     break;
                 case 0x0009:
+                    if (buf.readableBytes() >= dataLen) {
                         position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                                Position.KEY_VIN, buf.readCharSequence(dataLen, StandardCharsets.US_ASCII).toString());
+                    } else {
+                        buf.skipBytes(dataLen);
+                    }
+                    break;
+                case 0x000F:
+                    // DTC codes (trouble codes)
+                    if (dataLen % 2 == 0 && dataLen > 0 && buf.readableBytes() >= dataLen) {
+                        StringBuilder dtcs = new StringBuilder();
+                        for (int i = 0; i < dataLen / 2; i++) {
+                            int code = buf.readUnsignedShort();
+                            char type;
+                            switch (code >> 14) {
+                                case 0: type = 'P'; break;
+                                case 1: type = 'C'; break;
+                                case 2: type = 'B'; break;
+                                case 3: type = 'U'; break;
+                                default: type = ' '; break;
+                            }
+                            int value = code & 0x3FFF;
+                            if (dtcs.length() > 0) {
+                                dtcs.append(' ');
+                            }
+                            dtcs.append(type)
+                                    .append(String.format("%04d", value));
+                        }
+                        position.set(Position.KEY_DTCS, dtcs.toString());
+                    } else {
+                        buf.skipBytes(dataLen);
+                    }
                     break;
                 case 0x0011:
+                    if (dataLen >= 4) {
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    } else {
+                        buf.skipBytes(dataLen);
+                    }
                     break;
                 case 0x0014:
+                    if (dataLen >= 6) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    } else {
+                        buf.skipBytes(dataLen);
+                    }
                     break;
                 case 0x0020:
+                    if (buf.readableBytes() >= dataLen) {
                         String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                                dataLen, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String cell : cells) {
+                            if (cell.isEmpty()) continue;
                             String[] values = cell.split("@");
+                            if (values.length == 4) {
+                                try {
                                     network.addCellTower(CellTower.from(
-                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),
-                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                            Integer.parseInt(values[0]),
+                                            Integer.parseInt(values[1]),
+                                            Integer.parseInt(values[2], 16),
+                                            Integer.parseInt(values[3], 16)));
+                                } catch (NumberFormatException ignored) {
+                                }
+                            }
+                        }
+                    } else {
+                        buf.skipBytes(dataLen);
                     }
                     break;
                 case 0x0021:
+                    if (buf.readableBytes() >= dataLen) {
                         String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                                dataLen, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String point : points) {
+                            if (point.isEmpty()) continue;
                             String[] values = point.split("@");
+                            if (values.length == 2) {
+                                try {
                                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                } catch (NumberFormatException ignored) {
+                                }
+                            }
+                        }
+                    } else {
+                        buf.skipBytes(dataLen);
                     }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    buf.skipBytes(dataLen);
                     break;
             }
         }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+        if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())
+                || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
