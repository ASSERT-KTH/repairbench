diff --git a/tmp/ce1e50ba-69a3-4afd-ac19-5667c991b982_buggy.java b/tmp/f2c9f472-afd1-43b6-bf05-00259d00525a_fixed.java
index c6164f1..deb4982 100644
--- a/tmp/ce1e50ba-69a3-4afd-ac19-5667c991b982_buggy.java
+++ b/tmp/f2c9f472-afd1-43b6-bf05-00259d00525a_fixed.java
@@ -1,116 +1,171 @@
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int status = buf.readUnsignedShort();
 
     position.setValid(BitUtil.check(status, 15));
 
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
     DateBuilder dateBuilder = new DateBuilder()
             .setYear(Integer.parseInt(time.substring(0, 2)))
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+    // Fix: Only enter while loop if there are enough bytes for both subtype and length
+    while (buf.readableBytes() >= 4) {
         int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+        int length = buf.readUnsignedShort();
+
+        // Defensive: length must be >= 4 (header), skip if it is not valid.
+        if (length < 4) {
+            break;
+        }
+        int fieldLength = length - 4;
+        // Defensive: do not process if not enough bytes remain
+        if (buf.readableBytes() < fieldLength) {
+            buf.skipBytes(Math.max(0, buf.readableBytes()));
+            break;
+        }
         switch (subtype) {
             case 0x0001:
+                if (fieldLength >= 14) {
                     int coolantTemperature = buf.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
                     int rpm = buf.readUnsignedShort();
                     if (rpm <= 65535) {
                         position.set(Position.KEY_RPM, rpm);
                     }
                     position.set("averageSpeed", buf.readUnsignedByte());
                     buf.readUnsignedShort(); // interval fuel consumption
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                     buf.readUnsignedInt(); // trip id
+                } else {
+                    buf.skipBytes(fieldLength);
+                }
                 break;
             case 0x0005:
+                if (fieldLength >= 6) {
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                     buf.readUnsignedInt(); // run time
+                } else {
+                    buf.skipBytes(fieldLength);
+                }
                 break;
             case 0x0009:
                 position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                        Position.KEY_VIN, buf.readCharSequence(fieldLength, StandardCharsets.US_ASCII).toString());
+                break;
+            case 0x000f:
+            case 0x0010:
+                // DTC codes
+                StringBuilder dtcs = new StringBuilder();
+                for (int i = 0; i + 2 <= fieldLength; i += 2) {
+                    int dtc = buf.readUnsignedShort();
+                    char c1 = "PCBU".charAt((dtc >> 14) & 0x3);
+                    int d1 = (dtc >> 12) & 0x3;
+                    int d2 = (dtc >> 8) & 0xf;
+                    int d3 = (dtc >> 4) & 0xf;
+                    int d4 = dtc & 0xf;
+                    if (dtcs.length() > 0) {
+                        dtcs.append(" ");
+                    }
+                    dtcs.append(String.format("%c%01d%01d%01d%01d", c1, d1, d2, d3, d4));
+                }
+                position.set(Position.KEY_DTCS, dtcs.toString());
                 break;
             case 0x0011:
+                if (fieldLength >= 4) {
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                } else {
+                    buf.skipBytes(fieldLength);
+                }
                 break;
             case 0x0014:
+                if (fieldLength >= 6) {
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                     position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                     position.set("airTemp", buf.readUnsignedByte() - 40);
                     position.set("airFlow", buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                } else {
+                    buf.skipBytes(fieldLength);
+                }
                 break;
             case 0x0020:
+                {
                     String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                            fieldLength, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String cell : cells) {
                         String[] values = cell.split("@");
+                        if (values.length == 4) {
                             network.addCellTower(CellTower.from(
                                     Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                     Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                         }
+                    }
+                }
                 break;
             case 0x0021:
+                {
                     String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                            fieldLength, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String point : points) {
                         String[] values = point.split("@");
+                        if (values.length == 2) {
                             network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                         }
+                    }
+                }
                 break;
             default:
-                    buf.skipBytes(length);
+                buf.skipBytes(fieldLength);
                 break;
         }
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    // Fix: Original code uses OR, but both lists are always non-null inside Network, must check for non-empty
+    if (!network.getCellTowers().isEmpty() || !network.getWifiAccessPoints().isEmpty()) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
