diff --git a/tmp/5c171862-a2d0-40b9-8002-fe782e7a4397_buggy.java b/tmp/062bbe30-b180-4c8d-9fe0-0c522b47016f_fixed.java
index c6164f1..912fc70 100644
--- a/tmp/5c171862-a2d0-40b9-8002-fe782e7a4397_buggy.java
+++ b/tmp/062bbe30-b180-4c8d-9fe0-0c522b47016f_fixed.java
@@ -1,116 +1,192 @@
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int status = buf.readUnsignedShort();
 
     position.setValid(BitUtil.check(status, 15));
 
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
     DateBuilder dateBuilder = new DateBuilder()
-                .setYear(Integer.parseInt(time.substring(0, 2)))
+            .setYear(Integer.parseInt(time.substring(0, 2)) + 2000)
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+    // Prevent buffer underflow by checking length
+    while (buf.readableBytes() >= 4) {
+        int readerIndex = buf.readerIndex();
         int subtype = buf.readUnsignedShort();
         int length = buf.readUnsignedShort() - 4;
+        if (length < 0) {
+            // Invalid length, skip to prevent underflow
+            break;
+        }
+        if (buf.readableBytes() < length) {
+            // Break if remaining data is less than length (protection)
+            buf.readerIndex(readerIndex); // Reset so decoder isn't out-of-sync
+            break;
+        }
+
         switch (subtype) {
             case 0x0001:
+                if (length >= 16) { // Minimum size validation
                     int coolantTemperature = buf.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
                     int rpm = buf.readUnsignedShort();
                     if (rpm <= 65535) {
                         position.set(Position.KEY_RPM, rpm);
                     }
                     position.set("averageSpeed", buf.readUnsignedByte());
                     buf.readUnsignedShort(); // interval fuel consumption
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
-                    buf.readUnsignedInt(); // trip id
+                    if (length >= 20) {
+                        buf.readUnsignedInt(); // trip id, only skip if possible (for larger option block)
+                    }
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x0005:
+                if (length >= 6) {
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                     buf.readUnsignedInt(); // run time
+                    if (length > 6) {
+                        buf.skipBytes(length - 6);
+                    }
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x0009:
+                if (length > 0) {
                     position.set(
                             Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                }
+                break;
+            case 0x000f: // DTC codes
+                // Each DTC is 2 bytes, decode as DTC string list
+                if (length >= 2) {
+                    StringBuilder dtcs = new StringBuilder();
+                    int count = length / 2;
+                    for (int i = 0; i < count; i++) {
+                        int dtc = buf.readUnsignedShort();
+                        char first;
+                        switch ((dtc >> 14) & 0x3) {
+                            case 0: first = 'P'; break;
+                            case 1: first = 'C'; break;
+                            case 2: first = 'B'; break;
+                            case 3: first = 'U'; break;
+                            default: first = 'P'; // fallback
+                        }
+                        dtcs.append(first);
+                        dtcs.append(String.format("%04d", dtc & 0x3fff));
+                        if (i < count - 1) dtcs.append(" ");
+                    }
+                    position.set(Position.KEY_DTCS, dtcs.toString());
+                } else {
+                    buf.skipBytes(length);
+                }
+                break;
+            case 0x0010:
+                // Custom key-value pairs, undefined: skip bytes
+                buf.skipBytes(length);
                 break;
             case 0x0011:
+                if (length >= 4) {
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                } else if (length > 0) {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x0014:
+                if (length >= 7) {
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                     position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                     position.set("airTemp", buf.readUnsignedByte() - 40);
                     position.set("airFlow", buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                    if (length > 7) {
+                        buf.skipBytes(length - 7);
+                    }
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x0020:
+                if (length > 0) {
                     String[] cells = buf.readCharSequence(
                             length, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String cell : cells) {
                         String[] values = cell.split("@");
+                        if (values.length == 4) {
                             network.addCellTower(CellTower.from(
                                     Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                     Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                         }
+                    }
+                }
                 break;
             case 0x0021:
+                if (length > 0) {
                     String[] points = buf.readCharSequence(
                             length, StandardCharsets.US_ASCII).toString().split("\\+");
                     for (String point : points) {
                         String[] values = point.split("@");
+                        if (values.length == 2) {
                             network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                         }
+                    }
+                }
                 break;
             default:
                 buf.skipBytes(length);
                 break;
         }
+        // Safety: loop will proceed as long as at least 4 bytes remain and record lengths are valid.
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty()) 
+            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
