diff --git a/tmp/169adb4b-8fe9-4a36-a6b9-07939c607cf5_buggy.java b/tmp/7a0289bb-63ea-4523-8330-c60af90f87cf_fixed.java
index 862c60c..b0c82cf 100644
--- a/tmp/169adb4b-8fe9-4a36-a6b9-07939c607cf5_buggy.java
+++ b/tmp/7a0289bb-63ea-4523-8330-c60af90f87cf_fixed.java
@@ -1,25 +1,30 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
+        Node prev = previousSibling();
+        if (prev instanceof Element && ((Element) prev).normalName().equals("br")) {
+            indent(accum, depth, out);
+        } else {
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank()) return;
 
             if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank()))
                 indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
