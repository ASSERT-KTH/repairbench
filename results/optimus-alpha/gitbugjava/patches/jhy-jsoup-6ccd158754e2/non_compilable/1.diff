diff --git a/tmp/268e9f3c-0533-4bc2-bca0-4861244c2ea7_buggy.java b/tmp/c52d5de0-a070-459b-afce-1d24b5eb93fb_fixed.java
index 23f078d..8bc7e05 100644
--- a/tmp/268e9f3c-0533-4bc2-bca0-4861244c2ea7_buggy.java
+++ b/tmp/c52d5de0-a070-459b-afce-1d24b5eb93fb_fixed.java
@@ -1,14 +1,24 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String enc = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // URLEncoder.encode() encodes space as '+', but since it's not space here, replace any '+' with '%XX'
+            // Also, URLEncoder encodes supplementary codepoints as two %XX sequences of their UTF-16 representation,
+            // but we want a single %F0%9F%92%A9, i.e., actual UTF-8 bytes.
+            byte[] bytes = new String(Character.toChars(c)).getBytes(UTF_8);
+            for (byte b : bytes) {
+                sb.append('%');
+                String hex = Integer.toHexString(b & 0xff).toUpperCase();
+                if (hex.length() == 1) sb.append('0');
+                sb.append(hex);
+            }
         } else {
             sb.append((char) c);
         }
+        i += Character.charCount(c);
     }
 }
\ No newline at end of file
