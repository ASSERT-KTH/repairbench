diff --git a/tmp/d6f0cf20-773a-46cb-8b3c-94f0e3b45238_buggy.java b/tmp/5d5e93cf-3423-4291-8ad0-95191fa81dc0_fixed.java
index 23f078d..aff7f78 100644
--- a/tmp/d6f0cf20-773a-46cb-8b3c-94f0e3b45238_buggy.java
+++ b/tmp/5d5e93cf-3423-4291-8ad0-95191fa81dc0_fixed.java
@@ -1,14 +1,20 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
+        int charCount = Character.charCount(c);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            // URLEncoder will encode to utf-8 and encode as %XX
+            byte[] bytes = new String(Character.toChars(c)).getBytes(UTF_8);
+            for (byte b : bytes) {
+                sb.append('%');
+                sb.append(String.format("%02X", b & 0xff));
+            }
         } else {
             sb.append((char) c);
         }
+        i += charCount;
     }
 }
\ No newline at end of file
