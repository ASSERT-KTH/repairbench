diff --git a/tmp/13db159c-6325-45ab-afb8-949dec7331d3_buggy.java b/tmp/f7b417ef-868a-4d33-9626-4e0409a7d6cb_fixed.java
index 23f078d..cb27c81 100644
--- a/tmp/13db159c-6325-45ab-afb8-949dec7331d3_buggy.java
+++ b/tmp/f7b417ef-868a-4d33-9626-4e0409a7d6cb_fixed.java
@@ -1,14 +1,23 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // URLEncoder.encode replaces space with '+', and encodes non-ASCII as %.., but also escapes '*' and others unnecessarily
+            // We'll only take the % encodings, not any '?', so filter:
+            for (int j = 0; j < encoded.length(); j++) {
+                char ch = encoded.charAt(j);
+                if (ch == '%') {
+                    sb.append('%').append(encoded.charAt(j + 1)).append(encoded.charAt(j + 2));
+                    j += 2;
+                }
+            }
         } else {
             sb.append((char) c);
         }
+        i += Character.charCount(c);
     }
 }
\ No newline at end of file
