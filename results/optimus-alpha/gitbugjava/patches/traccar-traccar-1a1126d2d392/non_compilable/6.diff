diff --git a/tmp/de58081e-c93d-4236-a1bc-74bb9328acd5_buggy.java b/tmp/e14b8eb9-7453-422e-baab-c23e100bd514_fixed.java
index 2a0dceb..e0be11d 100644
--- a/tmp/de58081e-c93d-4236-a1bc-74bb9328acd5_buggy.java
+++ b/tmp/e14b8eb9-7453-422e-baab-c23e100bd514_fixed.java
@@ -1,68 +1,100 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
     String type = values[index++].substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
+    // Defensive check for cell info block presence (may be missing or with partial values)
+    boolean hasCellInfo = true;
+    int cellSectionIndex = index;
+    for (int i = 0; i < 7 * (type.equals("ALT") ? 6 : 6); i++) {
+        if (cellSectionIndex >= values.length) {
+            hasCellInfo = false;
+            break;
+        }
+        if (values[cellSectionIndex] == null || values[cellSectionIndex].isEmpty()) {
+            hasCellInfo = false;
+            break;
+        }
+        cellSectionIndex++;
+    }
+    if (hasCellInfo && values.length >= index + 7 * 6) {
         for (int i = 0; i < 7; i++) {
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
-
         position.setNetwork(network);
+    }
+
+    // Defensive: Ensure the following indexes do not go out of bounds
+    if (index + 6 > values.length) {
+        return position;
+    }
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
+    // Check for collaborative network field (optional)
+    if (index < values.length && values[index].length() == 3) {
         index += 1; // collaborative network
     }
 
+    // Defensive check on date/time presence
+    if (index + 1 < values.length && !values[index].isEmpty() && !values[index + 1].isEmpty()) {
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
         position.setTime(dateFormat.parse(values[index++] + values[index++]));
-
+    } else {
+        // If date/time is missing, skip them to avoid ParseException
+        index += 2;
+    }
+    // Defensive: latitude/longitude and kph/speed must be present
+    if (index + 4 < values.length) {
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
+    }
 
+    if (index < values.length) {
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
+    }
+    if (index < values.length) {
         position.setValid(values[index++].equals("1"));
+    }
 
     return position;
 }
\ No newline at end of file
