diff --git a/tmp/bd73b1eb-3244-42ff-b5d3-4673d8edc918_buggy.java b/tmp/b943a116-2f6f-433b-89b6-a1c126334bef_fixed.java
index 2a0dceb..d0aad3f 100644
--- a/tmp/bd73b1eb-3244-42ff-b5d3-4673d8edc918_buggy.java
+++ b/tmp/b943a116-2f6f-433b-89b6-a1c126334bef_fixed.java
@@ -1,68 +1,87 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
     String type = values[index++].substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
-        for (int i = 0; i < 7; i++) {
+    // Defensive: Make sure we have enough values for GSM cells
+    // (Some packets may omit these fields)
+    int restFields = values.length - index;
+    int maxCells = Math.min(7, restFields / 6); // at least 6 fields per cell (sometimes 7 for first cell)
+
+    for (int i = 0; i < maxCells; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
         index += 1; // timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
+    // Skip any extra unparsed GSM cell fields to reach core data,
+    // as some implementations send fewer than 7 cells (so we may have leftovers)
+    // DO NOT use 'index += ...' based on expectations, just continue.
+
     position.setNetwork(network);
 
+    // Defensive: Make sure we don't IndexOutOfBounds
+    if (index >= values.length) return position;
+
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
+    // Defensive: make sure next is not out of bounds and is a collaborative network
+    if (index < values.length && values[index].length() == 3) {
         index += 1; // collaborative network
     }
 
+    // Defensive: Make sure there's enough for date/time
+    if (index + 1 >= values.length) return position;
+
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
+    // Defensive: Make sure there are still enough data fields for lat/lon/speed/course/sat/valid
+    if (index + 5 >= values.length) return position;
+
     position.setLatitude(Double.parseDouble(values[index++]));
     position.setLongitude(Double.parseDouble(values[index++]));
     position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
     position.setCourse(Double.parseDouble(values[index++]));
 
     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
     position.setValid(values[index++].equals("1"));
 
     return position;
 }
\ No newline at end of file
