diff --git a/tmp/7dc2e756-5f45-4f68-9eec-630fa3cd9122_buggy.java b/tmp/f02fe227-61a0-48ed-8cb8-d7e8bf24ae65_fixed.java
index f506479..7370baa 100644
--- a/tmp/7dc2e756-5f45-4f68-9eec-630fa3cd9122_buggy.java
+++ b/tmp/f02fe227-61a0-48ed-8cb8-d7e8bf24ae65_fixed.java
@@ -1,64 +1,114 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
+    // consume main identifier argument
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    // This holds the group values in a fixed order
+    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
+    dslArgs[0] = groupArg.getIdentity();
+    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
+
+    // Instead of accumulating over all the rest, we build ONE group, add, then repeat
+    while (true)
+    {
+        // For each group instance, collect argument values in this map
+        final Map<DslArg, List<String>> groupValuesByArg = new HashMap<>();
+        final SimpleArgumentProcessor groupProcessor = new SimpleArgumentProcessor(groupValuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
+
+        // Transfer the already consumed identity argument
+        groupValuesByArg.put(groupArg.getIdentity(), valuesByArg.getOrDefault(groupArg.getIdentity(), Collections.emptyList()));
+
+        // Now, scan and collect values for optional (or required) group members, until:
+        // - we hit a new identity (which means a new group)
+        // - or end of argument queue
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
+            // Check: is this a new group instance starting? (Identity key name)
+            if (argument.name.equalsIgnoreCase(groupArg.getIdentity().getName()))
+            {
+                break; // This starts the next group -- leave it in the queue.
+            }
+
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
             if (arg == null)
             {
-                    break;
+                break; // No matching arg for this group, leave for higher-level parser
             }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+            // We only process group member args (not identity/name)
+            if (arg == groupArg.getIdentity())
+            {
+                break; // But in theory, handled above (identity triggers new group)
+            }
+
+            final List<String> argValues = groupValuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
-                    break;
+                break; // Only one value allowed for this arg
             }
 
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
         }
 
-            // TODO: this whole thing here is a bit hacky!
+        // Prepare valuesByName for instantiating the group values container
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
+            // Pull from local groupValuesByArg
+            List<String> values = groupValuesByArg.getOrDefault(simpleDslArg, Collections.emptyList());
+            if (!values.isEmpty())
             {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+                valuesByName.put(simpleDslArg.getName().toLowerCase(), values);
             }
         }
 
-            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
-            dslArgs[0] = groupArg.getIdentity();
-            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
+        // Only create a group if the identity arg has a value (it is required)
+        if (!valuesByName.containsKey(groupArg.getIdentity().getName().toLowerCase()))
+        {
+            break;
+        }
+
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+
+        // Check: is there a next group instance? (by seeing if next arg is the identity)
+        if (!arguments.isEmpty() && arguments.peekFirst().name != null
+                && arguments.peekFirst().name.equalsIgnoreCase(groupArg.getIdentity().getName()))
+        {
+            // Next identity present, need to reset valuesByArg and process next group
+            valuesByArg.clear();
+            // Now consume this identity arg
+            processor.consume(groupArg.getIdentity(), arguments);
+            // Update valuesByArg for the next group (refresh with newly parsed identity value)
+            valuesByArg.put(groupArg.getIdentity(), processor.collect(groupArg.getIdentity()).getValuesAsList());
+            continue;
+        }
+        break;
+    }
 }
\ No newline at end of file
