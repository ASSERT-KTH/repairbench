diff --git a/tmp/bead0645-ca94-460a-8ed5-fdd2d5ec2af0_buggy.java b/tmp/503a635d-b456-4dfb-a624-c2818ed51b31_fixed.java
index f506479..95390a9 100644
--- a/tmp/bead0645-ca94-460a-8ed5-fdd2d5ec2af0_buggy.java
+++ b/tmp/503a635d-b456-4dfb-a624-c2818ed51b31_fixed.java
@@ -1,64 +1,95 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
-            while (!arguments.isEmpty())
-            {
+    boolean foundAny = false;
+    do {
+        foundAny = false;
+        Map<DslArg, List<String>> currentValuesByArg = new HashMap<>();
+        // Add the identity value from processor-consumed parameter
+        for (Map.Entry<DslArg, List<String>> entry : valuesByArg.entrySet()) {
+            currentValuesByArg.put(entry.getKey(), new ArrayList<>(entry.getValue()));
+        }
+        // Process parameters in the group until next group appears or input ends
+        while (!arguments.isEmpty()) {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
-
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
+            // New subgroup start? If so, break this repetition
+            if (argument.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {
+                break;
+            }
 
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
             if (arg == null)
             {
                 break;
             }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+            final List<String> argValues = currentValuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
                 break;
             }
 
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
+            foundAny = true;
         }
 
-            // TODO: this whole thing here is a bit hacky!
+        // collect values and store into groupsByArg
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
+            SimpleDslParam param;
+            if (simpleDslArg.equals(groupArg.getIdentity())) {
+                // For the identity, use the value initially consumed by processor
+                param = processor.collect(simpleDslArg);
+            } else {
+                List<String> argVals = currentValuesByArg.getOrDefault(simpleDslArg, Collections.emptyList());
+                param = new SimpleDslParam(simpleDslArg, argVals);
+            }
             if (param.hasValue())
             {
                 valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+
+        // If the next argument is identity, start a new group
+        if (!arguments.isEmpty()) {
+            final NameValuePair nextArg = arguments.peekFirst();
+            if (nextArg != null && nextArg.name != null && nextArg.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {
+                // Prepare for next repetition
+                processor.consume(groupArg.getIdentity(), arguments);
+                valuesByArg.clear();
+                foundAny = true; // will force another loop
+            }
+        }
+    } while (foundAny);
 }
\ No newline at end of file
