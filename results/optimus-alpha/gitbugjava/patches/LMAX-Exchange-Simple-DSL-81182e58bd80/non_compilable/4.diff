diff --git a/tmp/c9646a4f-0dbd-4dc3-babd-cb259ac86690_buggy.java b/tmp/3fd0191d-8c08-4702-95c2-480f4a67de1f_fixed.java
index f506479..c93f41b 100644
--- a/tmp/c9646a4f-0dbd-4dc3-babd-cb259ac86690_buggy.java
+++ b/tmp/3fd0191d-8c08-4702-95c2-480f4a67de1f_fixed.java
@@ -1,64 +1,95 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity()); // Fix: store the identity name lowercased as well.
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    // Change: Instead of adding all group values at once,
+    // handle splitting values for allow-multiple-value args here, so each group gets the correct value lists.
     while (!arguments.isEmpty())
     {
-                final NameValuePair argument = arguments.peekFirst();
-                if (argument == NameValuePair.NULL)
+        final Deque<NameValuePair> perGroupArgs = new ArrayDeque<>();
+
+        // gather as many arguments as belong to a single group occurrence
         {
+            // always consume identity arg
+            final NameValuePair identityArg = arguments.pollFirst();
+            if (identityArg == null || identityArg == NameValuePair.NULL) {
+                break;
+            }
+            if (identityArg.name == null || !identityArg.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {
+                // not a group anymore
+                arguments.addFirst(identityArg);
+                break;
+            }
+            perGroupArgs.add(identityArg);
+
+            // also collect the following "otherArgs" of this group occurrence
+            while (!arguments.isEmpty())
+            {
+                final NameValuePair arg = arguments.peekFirst();
+                if (arg == NameValuePair.NULL) {
                     arguments.pollFirst();
                     continue;
                 }
-
-                if (argument.name == null)
+                if (arg.name == null)
                 {
-                    throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
+                    throw new IllegalArgumentException("Unexpected ambiguous argument " + arg.originalValue);
                 }
-
-                final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
-                {
+                if (arg.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {
+                    // start of next group
                     break;
                 }
-
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+                if (!argsByName.containsKey(arg.name.toLowerCase()))
                 {
+                    // argument not relevant for this group, stop group collection
                     break;
                 }
-
-                checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
-                arguments.pollFirst();
+                perGroupArgs.add(arguments.pollFirst());
+            }
         }
 
-            // TODO: this whole thing here is a bit hacky!
+        // Now process the arguments for this particular group
         final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
-            {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
-                {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+        // Identity arg
+        NameValuePair identityPair = perGroupArgs.pollFirst();
+        valuesByName.put(identityPair.name.toLowerCase(), Collections.singletonList(identityPair.value));
+
+        // Rest (group "other" args)
+        for (NameValuePair pair : perGroupArgs) {
+            SimpleDslArg dslArg = argsByName.get(pair.name.toLowerCase());
+            if (dslArg.isAllowMultipleValues()) {
+                // perform splitting
+                List<String> splitValues = new ArrayList<>();
+                String[] rawSplits = pair.value.split(","); // Use default separator
+                for (String s : rawSplits) {
+                    String trimmed = s.trim();
+                    if (!trimmed.isEmpty()) {
+                        checkValidValue(dslArg, trimmed);
+                        splitValues.add(trimmed);
+                    }
+                }
+                valuesByName.put(dslArg.getName().toLowerCase(), splitValues);
+            } else {
+                checkValidValue(dslArg, pair.value);
+                valuesByName.put(dslArg.getName().toLowerCase(), Collections.singletonList(pair.value));
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
     }
+}
\ No newline at end of file
