diff --git a/tmp/898fc525-9ed2-4d2b-a352-b390b3421c80_buggy.java b/tmp/1a13b8b4-d994-4774-946f-4f7a4fc38bf4_fixed.java
index f506479..a961924 100644
--- a/tmp/898fc525-9ed2-4d2b-a352-b390b3421c80_buggy.java
+++ b/tmp/1a13b8b4-d994-4774-946f-4f7a4fc38bf4_fixed.java
@@ -1,64 +1,98 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    // The bug: Only one set of group values is being "grouped together" per call,
+    // so we should loop, and for each set of group arguments, create one RepeatingParamValues,
+    // then add more, for the next match. So, as long as we can consume the identity argument,
+    // repeat the process.
+
+    while (true)
+    {
+        // Start a new group if identity parameter is present at this position in args
+        if (arguments.isEmpty())
+        {
+            break;
+        }
+
+        // Build for this group
+        final Map<DslArg, List<String>> groupValuesByArg = new HashMap<>();
+        final SimpleArgumentProcessor groupProcessor = new SimpleArgumentProcessor(groupValuesByArg,
+                "Did not supply a value for %s in group " + groupArg.getName());
+
+        // Only consume identity parameter, if present
+        if (!processor.tryConsumeIdentity(groupArg.getIdentity(), arguments))
+        {
+            break;
+        }
+
+        // Copy consumed value for group identity from valuesByArg to groupValuesByArg
+        List<String> identityVals = valuesByArg.get(groupArg.getIdentity());
+        if (identityVals != null)
+        {
+            groupValuesByArg.put(groupArg.getIdentity(), new ArrayList<>(identityVals));
+            valuesByArg.remove(groupArg.getIdentity());
+        }
+
+        // For all remaining arguments belonging to this group: match only until new group, or non-group param
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
+            if (arg == null || arg == groupArg.getIdentity())
             {
                 break;
             }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+            final List<String> argValues = groupValuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
                 break;
             }
 
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
         }
 
-            // TODO: this whole thing here is a bit hacky!
+        // Build SimpleDslArgs for this group
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
+            final SimpleDslParam param = groupProcessor.collectFromMap(simpleDslArg, groupValuesByArg);
             if (param.hasValue())
             {
                 valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
     }
+}
\ No newline at end of file
