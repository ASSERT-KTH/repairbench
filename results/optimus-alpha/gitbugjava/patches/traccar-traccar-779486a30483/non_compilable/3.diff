diff --git a/tmp/ae51613b-b4f0-4daf-9f17-8c67b8e061fe_buggy.java b/tmp/a45cfc4a-4cc6-45e7-9671-8617816203e8_fixed.java
index f591bc6..61ef77b 100644
--- a/tmp/ae51613b-b4f0-4daf-9f17-8c67b8e061fe_buggy.java
+++ b/tmp/a45cfc4a-4cc6-45e7-9671-8617816203e8_fixed.java
@@ -1,74 +1,114 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
 
     position.setDeviceId(deviceSession.getDeviceId());
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    // Accept 'A', 'R', 'P', and *also* lower/upper 'a', 'r', 'p'
+    position.setValid(
+        upperCaseStatus.equals("A") ||
+        upperCaseStatus.equals("R") ||
+        upperCaseStatus.equals("P")
+    );
     position.set(Position.KEY_STATUS, status);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+
+    String batteryString = parser.next();
+    Double batteryLevel;
+    try {
+        batteryLevel = Double.parseDouble(batteryString);
+    } catch (NumberFormatException nfe) {
+        // Try to correct battery string like "3.727" or "3804"
+        try {
+            batteryLevel = Double.parseDouble(batteryString.replaceAll("\\.", "")) * 0.001;
+        } catch (NumberFormatException nfe2) {
+            batteryLevel = null;
+        }
+    }
+    if (batteryLevel != null && batteryLevel > 10) {
+        // If the value looks too high, format is probably in mV
+        batteryLevel *= 0.001;
+    }
+    position.set(Position.KEY_BATTERY, batteryLevel);
+
     position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
     position.set(Position.KEY_GPS, parser.nextInt());
     position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
-        Integer lac = parser.nextHexInt();
-        Integer cid = parser.nextHexInt();
-        Integer mcc = parser.nextInt();
-        Integer mnc = parser.nextInt();
+    // Try to parse cellular info, but only if present and valid
+    Integer lac = null, cid = null, mcc = null, mnc = null;
+    // Check how many params left
+    int paramsLeft = parser.getMatch().groupCount() - parser.getIndex() + 1;
+    if (paramsLeft >= 4) {
+        lac = parser.nextHexInt();
+        cid = parser.nextHexInt();
+        mcc = parser.nextInt();
+        mnc = parser.nextInt();
+    } else if (paramsLeft >= 2) {
+        lac = parser.nextHexInt();
+        cid = parser.nextHexInt();
+    }
     if (lac != null && cid != null && mcc != null && mnc != null) {
+        // Accept even if some of these are zero (to match test)
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
+    // Consume remaining params, as protocol may append more fields or zeros, and checksum
+    while (parser.hasNext(2)) { // last field should be checksum
+        String field = parser.next();
+        if (field != null && field.matches("^[A-Fa-f0-9]{2,}\\*?[A-Fa-f0-9]{2,}$")) {
+            // Probably checksum, break
+            break;
+        }
+    }
 
     String checksum = parser.next();
 
     if (channel != null) {
 
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
