diff --git a/tmp/6a6c1654-49f5-4265-ac13-76f80573582c_buggy.java b/tmp/71806647-ff14-4135-8aeb-e2a7427cda54_fixed.java
index f591bc6..cff214b 100644
--- a/tmp/6a6c1654-49f5-4265-ac13-76f80573582c_buggy.java
+++ b/tmp/71806647-ff14-4135-8aeb-e2a7427cda54_fixed.java
@@ -1,74 +1,114 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
 
     position.setDeviceId(deviceSession.getDeviceId());
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P") || upperCaseStatus.equals("V") || upperCaseStatus.equals("p") || upperCaseStatus.equals("v") || upperCaseStatus.equals("r") || upperCaseStatus.equals("a") || upperCaseStatus.equals("P"));
+    // Fix: Also treat 'V' (void) and unrecognized as invalid, only 'A', 'R', 'P', 'p', 'r', 'a' as valid true, 'V'/'v' and others as false
+
+    // Actually, based on the protocol, "A"=Active/fix, "V"=invalid (so false validity), "R"/"P" might mean valid, but "V" is invalid
+    // So let's make: valid = status equalsIgnoreCase "A" or "R" or "P"
+    position.setValid(
+        upperCaseStatus.equals("A") 
+        || upperCaseStatus.equals("R") 
+        || upperCaseStatus.equals("P")
+    );
+
     position.set(Position.KEY_STATUS, status);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
-        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-        position.set(Position.KEY_GPS, parser.nextInt());
-        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
+    // Battery voltage - may be missing
+    String batteryStr = parser.next();
+    Double battery = null;
+    try {
+        if (batteryStr != null && !batteryStr.isEmpty()) {
+            battery = Double.parseDouble(batteryStr.replaceAll("\\.", "")) * 0.001;
+        }
+    } catch (NumberFormatException e) {
+        battery = null;
+    }
+    if (battery != null) {
+        position.set(Position.KEY_BATTERY, battery);
+    }
+
+    if (parser.hasNext()) position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+    if (parser.hasNext()) position.set(Position.KEY_GPS, parser.nextInt());
+    if (parser.hasNext()) position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
-            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
+        if (parser.hasNext()) position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
-        Integer lac = parser.nextHexInt();
-        Integer cid = parser.nextHexInt();
-        Integer mcc = parser.nextInt();
-        Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
+    Integer lac = null, cid = null, mcc = null, mnc = null;
+    // Try to read next hex ints/MMC/MNC but only if present
+    if (parser.hasNext()) lac = parser.nextHexInt();
+    if (parser.hasNext()) cid = parser.nextHexInt();
+    if (parser.hasNext()) mcc = parser.nextInt();
+    if (parser.hasNext()) mnc = parser.nextInt();
+
+    if (lac != null && cid != null && mcc != null && mnc != null
+            && lac > 0 && cid > 0 && mcc > 0 && mnc > 0) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
+    // Skip any extra fields but do not require
+    while (parser.hasNext(1)) {
+        String unusedField = parser.next();
+        // Check if this field could be the checksum (should start with '*', due to split)
+        if (unusedField != null && unusedField.length() > 0
+                && (unusedField.startsWith("*") || unusedField.matches("[0-9A-Fa-f]{2}"))) {
+            // We treat as checksum, end parsing
+            break;
+        }
+    }
 
-        String checksum = parser.next();
+    // If still has a field, treat as checksum
+    String checksum = null;
+    if (parser.hasNext()) {
+        checksum = parser.next();
+    }
 
     if (channel != null) {
 
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
