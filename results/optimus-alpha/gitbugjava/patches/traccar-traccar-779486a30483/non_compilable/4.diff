diff --git a/tmp/3f10f53b-0e27-4188-bac9-54d60883d1a6_buggy.java b/tmp/e4f47aaf-0a87-4b8b-9afd-7a77e46f32ab_fixed.java
index f591bc6..a84e148 100644
--- a/tmp/3f10f53b-0e27-4188-bac9-54d60883d1a6_buggy.java
+++ b/tmp/e4f47aaf-0a87-4b8b-9afd-7a77e46f32ab_fixed.java
@@ -1,74 +1,104 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
 
     position.setDeviceId(deviceSession.getDeviceId());
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    // FIX: Accept also "V" and "v" for validity, as these are sometimes used for valid positions
+    position.setValid(
+      upperCaseStatus.equals("A")
+      || upperCaseStatus.equals("R")
+      || upperCaseStatus.equals("P")
+      || upperCaseStatus.equals("V")
+      || upperCaseStatus.equals("S")
+      || upperCaseStatus.equals("T")
+      || upperCaseStatus.matches("[0-9]+")
+    );
     position.set(Position.KEY_STATUS, status);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+
+    // Some models use 3.727 for battery, treat as voltage in V if contains dot, otherwise just int, or skip if not present
+    String batteryStr = parser.next();
+    if (batteryStr != null && !batteryStr.isEmpty()) {
+        batteryStr = batteryStr.replace(",", ""); // Defensive, just in case.
+        // accept both "3.727" and "3727" kind of values
+        double battery = 0.0;
+        if (batteryStr.indexOf('.') >= 0) {
+            // If it's a float, just parse
+            battery = Double.parseDouble(batteryStr);
+        } else {
+            // If int, consider it's mV
+            battery = Double.parseDouble(batteryStr) * 0.001;
+        }
+        position.set(Position.KEY_BATTERY, battery);
+    }
+
     position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+
     position.set(Position.KEY_GPS, parser.nextInt());
+
     position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
     Integer lac = parser.nextHexInt();
     Integer cid = parser.nextHexInt();
     Integer mcc = parser.nextInt();
     Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
+    // FIX: some models/data may have 0 for these parameters, in which case do not create CellTower
+    if (lac != null && cid != null && mcc != null && mnc != null
+            && lac != 0 && cid != 0 && mcc != 0 && mnc != 0) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
+    // SAFETY: parser may continue with additional unused fields or nothing at all; skip only if present
     parser.next(); // unused
 
     String checksum = parser.next();
 
     if (channel != null) {
 
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
