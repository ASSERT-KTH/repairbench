diff --git a/tmp/77485b77-8918-406a-b9d2-8a69ab905aba_buggy.java b/tmp/74947a4a-9023-4749-820d-203b057030cb_fixed.java
index 27f2719..18f722a 100644
--- a/tmp/77485b77-8918-406a-b9d2-8a69ab905aba_buggy.java
+++ b/tmp/74947a4a-9023-4749-820d-203b057030cb_fixed.java
@@ -1,90 +1,127 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
+        // Register device session
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
+    // Extract type (character after the '!')
+    if (sentence.length() < 2) {
+        return null;
+    }
+    String type = sentence.substring(1, 2);
+
+    // Accept ![35A-D]*
+    if (!sentence.matches("![35A-D],.*") && !sentence.matches("![A-D],.*") && !sentence.matches("![A-D].*")) {
+        if (!sentence.matches("![A-D].*") && !sentence.matches("![345].*")) {
+            // Only early exit for invalid sentences, allow legacy !A without comma
+            return null;
+        }
+    }
+
+    // For !4, handle attribute extraction without device session
+    if (type.equals("4")) {
+        String[] values = sentence.split(",");
+        if (values.length > 2) {
+            Position position = new Position(getProtocolName());
+            position.set(Position.KEY_TYPE, type);
+            position.set("phone1", values[2]);
+            return position;
+        } else {
+            return null;
+        }
+    }
+
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+    if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
-
-        String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
 
         getLastLocation(position, null);
 
-            position.set(Position.KEY_RESULT, sentence.substring(3));
+        position.set(Position.KEY_RESULT, sentence.substring(3).replaceFirst("^,", ""));
 
         return position;
 
     } else if (type.equals("5")) {
 
         String[] values = sentence.split(",");
 
         getLastLocation(position, null);
 
+        // values: 0 = !5, 1 = RSSI, 2 = ?, 3 = battery
+        if (values.length >= 2 && !values[1].isEmpty()) {
+            try {
                 position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
-            if (values.length >= 4) {
+            } catch (NumberFormatException error) {
+                // ignore
+            }
+        }
+        if (values.length >= 4 && !values[3].isEmpty()) {
+            try {
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
+            } catch (NumberFormatException error) {
+                // ignore
+            }
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
