diff --git a/tmp/a522ffe9-04f7-4a29-8c43-26ef2533aac7_buggy.java b/tmp/77fb3b32-a3e4-4e0d-a991-33fa53e789b1_fixed.java
index 27f2719..66321fa 100644
--- a/tmp/a522ffe9-04f7-4a29-8c43-26ef2533aac7_buggy.java
+++ b/tmp/77fb3b32-a3e4-4e0d-a991-33fa53e789b1_fixed.java
@@ -1,90 +1,100 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+    if (deviceSession == null || !sentence.matches("![345ABCD],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
+    if (type.equals("3") || type.equals("4")) {
+
+        getLastLocation(position, null);
+
+        // The !4 messages are of the form !4,10,040123,,,1.0,110,0,0S,33
+        String[] values = sentence.split(",", -1);
+
         if (type.equals("3")) {
-
-            getLastLocation(position, null);
-
             position.set(Position.KEY_RESULT, sentence.substring(3));
+        } else if (type.equals("4") && values.length > 2 && !values[2].isEmpty()) {
+            // Get phone from third value
+            position.set("phone1", values[2]);
+        }
 
         return position;
 
     } else if (type.equals("5")) {
 
-            String[] values = sentence.split(",");
+        String[] values = sentence.split(",", -1);
 
         getLastLocation(position, null);
 
+        if (values.length > 1 && !values[1].isEmpty()) {
             position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
-            if (values.length >= 4) {
+        }
+        if (values.length >= 4 && !values[3].isEmpty()) {
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
