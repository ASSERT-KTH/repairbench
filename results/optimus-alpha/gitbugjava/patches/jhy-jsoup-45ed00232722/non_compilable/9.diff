diff --git a/tmp/e5d35b4c-3180-4071-a5bf-5609c6c4c4ae_buggy.java b/tmp/a22ebc35-4dfb-4368-af80-278d3ce38f01_fixed.java
index 855afa5..6e9d517 100644
--- a/tmp/e5d35b4c-3180-4071-a5bf-5609c6c4c4ae_buggy.java
+++ b/tmp/a22ebc35-4dfb-4368-af80-278d3ce38f01_fixed.java
@@ -1,13 +1,41 @@
 static URL encodeUrl(URL u) {
     u = punyUrl(u);
     try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+        String path = u.getPath();
+        String query = u.getQuery();
+        String ref = u.getRef();
+
+        // Encode the path - encode each segment separately so "/" are not encoded
+        if (path != null) {
+            StringBuilder encodedPath = new StringBuilder();
+            String[] segments = path.split("/", -1); // keep trailing empties
+            for (int i = 0; i < segments.length; i++) {
+                if (i > 0) encodedPath.append("/");
+                // encode each segment
+                encodedPath.append(URLEncoder.encode(segments[i], "UTF-8")
+                                         .replace("+", "%20")
+                                         .replace("%2F", "/")); // don't double-encode /
+            }
+            path = encodedPath.toString();
+        }
+
+        // Encode the query
+        String encodedQuery = null;
+        if (query != null) {
+            encodedQuery = URLEncoder.encode(query, "UTF-8").replace("+", "%20");
+        }
+
+        URI uri = new URI(
+                u.getProtocol(),
+                u.getUserInfo(),
+                u.getHost(),
+                u.getPort(),
+                path,
+                encodedQuery,
+                ref
+        );
+        return uri.toURL();
+    } catch (Exception e) {
         return u;
     }
 }
\ No newline at end of file
