diff --git a/tmp/b6f9519e-dda7-442f-a856-b3fd8f34bbf6_buggy.java b/tmp/fe29e710-7d27-4464-b51a-0fbca16abe91_fixed.java
index ad77f15..78adb43 100644
--- a/tmp/b6f9519e-dda7-442f-a856-b3fd8f34bbf6_buggy.java
+++ b/tmp/fe29e710-7d27-4464-b51a-0fbca16abe91_fixed.java
@@ -1,112 +1,203 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
+            // Defensive: Don't continue parsing if not enough values to parse validity and satellites
+            if (index + 2 > values.length) break;
             position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            position.set(Position.KEY_SATELLITES, values[index].isEmpty() ? 0 : Integer.parseInt(values[index++]));
+            
+            // Defensive: Latitude/Longitude parsing
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setLatitude(Double.parseDouble(values[index].substring(1)));
                 if (values[index++].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setLongitude(Double.parseDouble(values[index].substring(1)));
                 if (values[index++].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            // Speed parsing (can be empty)
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+            } else {
+                index++; // still consume empty slot
             }
-                if (index < values.length) {
+            // Course
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setCourse(Double.parseDouble(values[index++]));
+            } else {
+                index++;
+            }
+            // Altitude
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setAltitude(Double.parseDouble(values[index++]));
+            } else if (index < values.length) {
+                index++;
+            }
+            // HDOP
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            } else if (index < values.length) {
+                index++;
             }
-                if (index < values.length) {
+            // VDOP
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
             }
             break;
         case "GSM":
+            // Defensive: If not enough values just skip
             index += 1; // registration status
             index += 1; // signal strength
+            // For multi-cell, several may follow.
+            if (index + 5 <= values.length) {
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                         Integer.parseInt(values[index++]))));
+            } else {
+                // Defensive: Allow multi cell parsing
+                List<CellTower> cells = new ArrayList<>();
+                while (index + 5 <= values.length) {
+                    int mcc = Integer.parseInt(values[index++]);
+                    int mnc = Integer.parseInt(values[index++]);
+                    int lac = Integer.parseInt(values[index++], 16);
+                    int cid = Integer.parseInt(values[index++], 16);
+                    int rssi = Integer.parseInt(values[index++]);
+                    cells.add(CellTower.from(mcc, mnc, lac, cid, rssi));
+                }
+                if (!cells.isEmpty()) {
+                    position.setNetwork(new Network(cells));
+                }
+            }
             break;
         case "COT":
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            } else if (index < values.length) {
+                index++;
             }
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                int h = Integer.parseInt(hours[0]);
+                int m = (hours.length > 1 ? Integer.parseInt(hours[1]) : 0);
+                int s = (hours.length > 2 ? Integer.parseInt(hours[2]) : 0);
+                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
             }
             break;
         case "ADC":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            } else if (index < values.length) {
+                index++;
             }
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            } else if (index < values.length) {
+                index++;
             }
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
             }
             break;
         case "DTT":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                int io = Integer.parseInt(values[index], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                index++;
             }
+            // Defensive: geofence can be split into two fields, check how many remaining
+            if (index + 1 < values.length) {
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            } else if (index < values.length) {
+                position.set(Position.KEY_GEOFENCE, values[index++]);
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("eventStatus", values[index++]);
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+            // Indexed sensor block
+            while (index + 2 <= values.length) {
+                int sensorIndex;
+                int dataType;
+                try {
+                    sensorIndex = Integer.parseInt(values[index++]);
+                    dataType = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    // Defensive skip malformed entries
+                    break;
+                }
                 if (dataType == 0) {
+                    if (index < values.length && !values[index].isEmpty()) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    } else if (index < values.length) {
+                        index++;
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                    // Skip serial number if present
+                    if (index < values.length && !values[index].isEmpty() && values[index].length() > 10) {
+                        index++;
+                    }
+                    if (index < values.length && !values[index].isEmpty()) {
                         position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    } else if (index < values.length) {
+                        index++;
+                    }
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
