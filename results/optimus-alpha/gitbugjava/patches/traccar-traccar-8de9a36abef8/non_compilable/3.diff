diff --git a/tmp/931dcffb-78ae-40d7-b2b6-0c87f5e74b20_buggy.java b/tmp/4ec4f82d-267d-48ae-a273-8d22386c0d9c_fixed.java
index ad77f15..6973d72 100644
--- a/tmp/931dcffb-78ae-40d7-b2b6-0c87f5e74b20_buggy.java
+++ b/tmp/4ec4f82d-267d-48ae-a273-8d22386c0d9c_fixed.java
@@ -1,112 +1,254 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
+            position.setValid(values.length > index && values[index++].equals("A"));
+            if (values.length > index) {
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            } else {
+                break;
+            }
+            if (values.length > index) {
+                String latString = values[index++];
+                if (!latString.isEmpty() && latString.length() > 1) {
+                    position.setLatitude(Double.parseDouble(latString.substring(1)));
+                    if (latString.charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                }
+            }
+            if (values.length > index) {
+                String lonString = values[index++];
+                if (!lonString.isEmpty() && lonString.length() > 1) {
+                    position.setLongitude(Double.parseDouble(lonString.substring(1)));
+                    if (lonString.charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            if (values.length > index) {
+                String speedString = values[index++];
+                if (!speedString.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedString)));
+                }
+            }
+            if (values.length > index) {
+                String courseString = values[index++];
+                if (!courseString.isEmpty()) {
+                    position.setCourse(Double.parseDouble(courseString));
+                }
+            }
+            if (values.length > index) {
+                String altitudeString = values[index++];
+                if (!altitudeString.isEmpty()) {
+                    position.setAltitude(Double.parseDouble(altitudeString));
+                }
+            }
+            if (values.length > index) {
+                String hdopString = values[index++];
+                if (!hdopString.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopString));
+                }
+            }
+            if (values.length > index) {
+                String vdopString = values[index++];
+                if (!vdopString.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopString));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            index += 2; // registration status and signal strength (may be empty)
+            if ((values.length - index) % 6 == 0 && values.length > index) {
+                // Multiple towers possible (each group of 6 fields: mcc;mnc;lac;cid;...;rssi)
+                List<CellTower> cellTowers = new ArrayList<>();
+                while (values.length - index >= 6) {
+                    try {
+                        int mcc = Integer.parseInt(values[index++]);
+                        int mnc = Integer.parseInt(values[index++]);
+                        int lac = Integer.parseInt(values[index++], 16);
+                        int cid = Integer.parseInt(values[index++], 16);
+                        // skip one (possibly rssi as int or extra?)
+                        index++; // unknown field, skip
+                        int rssi = Integer.parseInt(values[index++]);
+                        cellTowers.add(CellTower.from(mcc, mnc, lac, cid, rssi));
+                    } catch (Exception e) {
+                        break;
+                    }
+                }
+                if (!cellTowers.isEmpty()) {
+                    position.setNetwork(new Network(cellTowers));
+                }
+            } else if (values.length - index >= 5) {
+                try {
+                    int mcc = Integer.parseInt(values[index++]);
+                    int mnc = Integer.parseInt(values[index++]);
+                    int lac = Integer.parseInt(values[index++], 16);
+                    int cid = Integer.parseInt(values[index++], 16);
+                    int rssi = Integer.parseInt(values[index++]);
+                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
+                } catch (Exception e) {
+                    // ignore parsing error
+                }
+            }
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
-                }
-                if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+            if (values.length > index) {
+                String odometer = values[index++];
+                if (!odometer.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));
+                }
+            }
+            if (values.length > index) {
+                String hoursString = values[index++];
+                if (!hoursString.isEmpty()) {
+                    String[] hours = hoursString.split("-");
+                    int totalSeconds = 0;
+                    if (hours.length > 0) {
+                        totalSeconds += Integer.parseInt(hours[0]) * 3600;
+                    }
+                    if (hours.length > 1) {
+                        totalSeconds += Integer.parseInt(hours[1]) * 60;
+                    }
+                    if (hours.length > 2) {
+                        totalSeconds += Integer.parseInt(hours[2]);
+                    }
+                    position.set(Position.KEY_HOURS, totalSeconds * 1000L);
+                }
             }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (values.length > index) {
+                String powerString = values[index++];
+                if (!powerString.isEmpty()) {
+                    position.set(Position.KEY_POWER, Double.parseDouble(powerString));
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            if (values.length > index) {
+                String batteryString = values[index++];
+                if (!batteryString.isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(batteryString));
+                }
+            }
+            if (values.length > index) {
+                String adc1 = values[index++];
+                if (!adc1.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));
+                }
+            }
+            if (values.length > index) {
+                String adc2 = values[index++];
+                if (!adc2.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));
+                }
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (values.length > index) {
+                String statusString = values[index++];
+                if (!statusString.isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(statusString, 16));
+                }
+            }
+            if (values.length > index) {
+                String ioString = values[index++];
+                if (!ioString.isEmpty()) {
+                    int io = Integer.parseInt(ioString, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+            }
+            // Two geofence or event values expected
+            StringBuilder geofenceValue = new StringBuilder();
+            for (int i = 0; i < 2 && values.length > index; i++) {
+                String part = values[index++];
+                if (part != null) {
+                    geofenceValue.append(part);
+                }
+            }
+            if (geofenceValue.length() > 0) {
+                position.set(Position.KEY_GEOFENCE, geofenceValue.toString());
+            }
+            if (values.length > index) {
+                String eventStatus = values[index++];
+                if (!eventStatus.isEmpty()) {
+                    position.set("eventStatus", eventStatus);
+                }
+            }
+            if (values.length > index) {
+                String packetType = values[index++];
+                if (!packetType.isEmpty()) {
+                    position.set("packetType", packetType);
+                }
             }
             break;
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (values.length > index) {
+                String eventData = values[index++];
+                if (!eventData.isEmpty()) {
+                    position.set("eventData", eventData);
+                }
+            }
             break;
         case "OBD":
-                position.set("obd", values[index++]);
+            if (values.length > index) {
+                String obdData = values[index++];
+                if (!obdData.isEmpty()) {
+                    position.set("obd", obdData);
+                }
+            }
             break;
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (values.length > index) {
+                String tagData = values[index++];
+                if (!tagData.isEmpty()) {
+                    position.set("tagData", tagData);
+                }
+            }
             break;
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+            while (values.length > index + 1) {
+                String sensorIndexS = values[index++];
+                String dataTypeS = values[index++];
+                if (sensorIndexS.isEmpty() || dataTypeS.isEmpty()) {
+                    break;
+                }
+                int sensorIndex = Integer.parseInt(sensorIndexS);
+                int dataType = Integer.parseInt(dataTypeS);
                 if (dataType == 0) {
+                    if (values.length > index) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    if (values.length > index) index++; // skip serial number
+                    if (values.length > index) {
+                        String tempString = values[index++];
+                        if (!tempString.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempString));
+                        }
+                    }
+                } else {
+                    // unknown dataType, just skip
+                    if (values.length > index) index++;
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
