diff --git a/tmp/3b92322d-c690-4c4b-b905-9a4230528c12_buggy.java b/tmp/d6a6e793-d776-41ff-976b-78987619337b_fixed.java
index ad77f15..0619fb1 100644
--- a/tmp/3b92322d-c690-4c4b-b905-9a4230528c12_buggy.java
+++ b/tmp/d6a6e793-d776-41ff-976b-78987619337b_fixed.java
@@ -1,112 +1,289 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
-        switch (fragment.substring(0, dataIndex)) {
+    String header = fragment.substring(0, dataIndex);
+
+    switch (header) {
         case "GPS":
+            if (values.length == 0) break;
             position.setValid(values[index++].equals("A"));
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            } else {
+                // Defensive: skip/supply reasonable value/leave as null
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                if (values[index].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
+            }
+            index++;
+
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                if (values[index].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            index++;
+
+            Double speed = null;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    speed = Double.parseDouble(values[index]);
+                } catch (NumberFormatException error) {
+                    // Ignore parsing error, leave speed null
                 }
-                if (index < values.length) {
+            }
+            index++;
+
+            Double course = null;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    course = Double.parseDouble(values[index]);
+                } catch (NumberFormatException error) {
+                    // Ignore parsing error, leave course null
+                }
+            }
+            index++;
+
+            // For some formats, there is a speed in knots and/or KPH before/after course, or omitted fields (";" empty slot)
+            if (index < values.length && !values[index].isEmpty()) {
+                // If not empty, check if this value looks like integer speed in KPH, else try as a double.
+                String val = values[index];
+                try {
+                    int speedKph = Integer.parseInt(val);
+                    speed = UnitsConverter.knotsFromKph(speedKph);
+                } catch (Exception nfe) {
+                    try {
+                        speed = Double.parseDouble(val); // Possibly speed in knots
+                    } catch (Exception ignore) {
+                    }
+                }
+            }
+            // Only set speed if not already set and we got a value
+            if (speed != null) {
+                position.setSpeed(speed);
+            }
+            index++;
+
+            if (course != null) {
+                position.setCourse(course);
+            }
+            // Additional optional fields
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setAltitude(Double.parseDouble(values[index++]));
+                } catch (Exception ignore) {
+                    index++;
+                }
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                } catch (Exception ignore) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                } catch (Exception ignore) {
+                    index++;
+                }
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            // Defensive: GSM can have empty fields; skip accordingly
+            // Network: MCC;MNC;LAC;CID;RSSI
+            // In some samples there are fields like GSM:1;4;416;3;627A;A84B;-66 or GSM:;;310;260;C76D;9F1D;-85
+            while (index < values.length && index < 2) {
+                index++; // registration status, signal strength
+            }
+            try {
+                while (index + 4 < values.length) {
+                    int mcc = Integer.parseInt(values[index++]);
+                    int mnc = Integer.parseInt(values[index++]);
+                    int lac = Integer.parseInt(values[index++], 16);
+                    int cid = Integer.parseInt(values[index++], 16);
+                    int rssi = Integer.parseInt(values[index++]);
+                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
+                }
+            } catch (Exception ignore) {
+                // Defensive: in case any parsing/length fails, ignore chunk
+            }
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                String odometer = values[index++];
+                try {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));
+                } catch (Exception ignore) {
                 }
-                if (index < values.length) {
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                try {
+                    int h = Integer.parseInt(hours.length > 0 ? hours[0] : "0");
+                    int m = Integer.parseInt(hours.length > 1 ? hours[1] : "0");
+                    int s = Integer.parseInt(hours.length > 2 ? hours[2] : "0");
+                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
+                } catch (Exception ignore) {
+                }
             }
             break;
         case "ADC":
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+                } catch (Exception ignore) {
+                    index++;
+                }
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                } catch (Exception ignore) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                } catch (Exception ignore) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                } catch (Exception ignore) {
+                    index++;
+                }
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length && !values[index].isEmpty()) {
+                String status = values[index++];
+                try {
+                    // Numeric status may be hex or decimal
+                    if (status.startsWith("0x") || status.startsWith("0X")) {
+                        position.set(Position.KEY_STATUS, Integer.parseInt(status.substring(2), 16));
+                    } else if (status.matches("[0-9A-Fa-f]+")) {
+                        position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));
+                    } else {
+                        position.set(Position.KEY_STATUS, Integer.parseInt(status));
+                    }
+                } catch (Exception ignore) {
+                }
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                String ioString = values[index++];
+                try {
+                    int io = Integer.parseInt(ioString, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                } catch (Exception ignore) {
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            } else {
+                index++;
+            }
+            // Defensive: skip up to geofence
+            if (index + 1 < values.length) {
+                String g1 = values[index++] == null ? "" : values[index - 1];
+                String g2 = values[index++] == null ? "" : values[index - 1];
+                position.set(Position.KEY_GEOFENCE, g1 + g2);
+            } else {
+                index += 2;
+            }
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
+                String sensorIndexStr = "";
+                String dataTypeStr = "";
+                try {
+                    sensorIndexStr = values[index++];
+                    dataTypeStr = values[index++];
+                    int sensorIndex = Integer.parseInt(sensorIndexStr);
+                    int dataType = Integer.parseInt(dataTypeStr);
+                    if (dataType == 0 && index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        if (index < values.length) {
+                            // serial
+                            index += 1;
+                        }
+                        if (index < values.length && !values[index].isEmpty()) {
+                            try {
+                                position.set(Position.PREFIX_TEMP + sensorIndex,
+                                        Double.parseDouble(values[index++]));
+                            } catch (Exception ignore) {
+                                index++;
+                            }
+                        } else {
+                            index++;
+                        }
+                    } else {
+                        // Unhandled datatype, skip as many as possible
+                        index++;
+                    }
+                } catch (Exception ignore) {
+                    // Defensive: malformed data, advance index
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
