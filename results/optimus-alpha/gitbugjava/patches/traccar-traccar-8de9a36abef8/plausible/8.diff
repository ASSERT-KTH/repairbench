diff --git a/tmp/a1b9a6d4-c22a-42d4-bf77-4c434dfaf88d_buggy.java b/tmp/549a3320-1355-4e0e-baa5-8d1ec868fb2f_fixed.java
index ad77f15..5ed1d09 100644
--- a/tmp/a1b9a6d4-c22a-42d4-bf77-4c434dfaf88d_buggy.java
+++ b/tmp/549a3320-1355-4e0e-baa5-8d1ec868fb2f_fixed.java
@@ -1,112 +1,227 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            position.setValid(values.length > index ? values[index++].equals("A") : false);
+            position.set(Position.KEY_SATELLITES,
+                values.length > index && !values[index].isEmpty() ? Integer.parseInt(values[index++]) : null);
+
+            if (values.length > index && !values[index].isEmpty()) {
                 position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                if (values[index].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
+            }
+            index++;
+
+            if (values.length > index && !values[index].isEmpty()) {
                 position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                if (values[index].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            index++;
+
+            if (values.length > index && !values[index].isEmpty()) {
+                try {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));
+                } catch (NumberFormatException e) {
+                    // ignore
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+            index++;
+
+            if (values.length > index && !values[index].isEmpty()) {
+                position.setCourse(Integer.parseInt(values[index]));
             }
+            index++;
+
+            if (values.length > index && !values[index].isEmpty()) {
+                try {
+                    position.setAltitude(Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+            }
+            index++;
+
+            if (values.length > index && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+            }
+            index++;
+
+            if (values.length > index && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+            }
+            // index++; // no further parsing needed
             break;
-            case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+
+        case "GSM": {
+            index += 2;
+
+            if (values.length - index >= 5) {
                 position.setNetwork(new Network(CellTower.from(
                     Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                     Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                     Integer.parseInt(values[index++]))));
+            }
             break;
+        }
+
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (values.length > index && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
+                } catch (NumberFormatException e) {
+                    // ignore
                 }
-                if (index < values.length) {
+            }
+            index++;
+            if (values.length > index && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                int h = 0, m = 0, s = 0;
+                try {
+                    if (hours.length > 0 && !hours[0].isEmpty()) h = Integer.parseInt(hours[0]);
+                } catch (NumberFormatException e) {}
+                try {
+                    if (hours.length > 1 && !hours[1].isEmpty()) m = Integer.parseInt(hours[1]);
+                } catch (NumberFormatException e) {}
+                try {
+                    if (hours.length > 2 && !hours[2].isEmpty()) s = Integer.parseInt(hours[2]);
+                } catch (NumberFormatException e) {}
+                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
             }
             break;
+
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            index++;
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            index++;
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+            }
+            index++;
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
             }
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (values.length > index && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+            }
+            index++;
+            if (values.length > index && !values[index].isEmpty()) {
+                try {
+                    int io = Integer.parseInt(values[index], 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                } catch (NumberFormatException e) {
+                    // ignore
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+            }
+            index++;
+            if (values.length > index + 1) {
+                String geofence = (values[index] != null ? values[index] : "") + (values[index + 1] != null ? values[index + 1] : "");
+                position.set(Position.KEY_GEOFENCE, geofence);
+            }
+            index += 2;
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set("eventStatus", values[index]);
+            }
+            index++;
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set("packetType", values[index]);
             }
             break;
+
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set("eventData", values[index]);
+            }
             break;
+
         case "OBD":
-                position.set("obd", values[index++]);
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set("obd", values[index]);
+            }
             break;
+
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set("tagData", values[index]);
+            }
             break;
+
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+            while (values.length > index + 1) {
+                int sensorIndex = 0;
+                int dataType = 0;
+                try {
+                    sensorIndex = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    index++;
+                    continue;
+                }
+                try {
+                    dataType = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    continue;
+                }
                 if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    // driver unique id
+                    if (values.length > index && !values[index].isEmpty()) {
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                    }
+                    index++;
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    // temp sensor
+                    if (values.length > index) index++; // skip serial number
+                    if (values.length > index && !values[index].isEmpty()) {
+                        try {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                        } catch (NumberFormatException e) {
+                            // ignore
+                        }
+                    }
+                    index++;
                 }
             }
             break;
+
         default:
             break;
     }
 }
\ No newline at end of file
