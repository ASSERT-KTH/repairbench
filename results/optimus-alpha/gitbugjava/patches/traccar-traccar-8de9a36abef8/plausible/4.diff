diff --git a/tmp/3c90c7ba-6258-4a3a-b4c7-ad71c2d5c9c5_buggy.java b/tmp/4d7f8ca3-ca3e-4844-8d1f-86ad28b2d194_fixed.java
index ad77f15..b4ca014 100644
--- a/tmp/3c90c7ba-6258-4a3a-b4c7-ad71c2d5c9c5_buggy.java
+++ b/tmp/4d7f8ca3-ca3e-4844-8d1f-86ad28b2d194_fixed.java
@@ -1,112 +1,241 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
+    if (dataIndex < 0) {
+        return; // invalid fragment, do nothing
+    }
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
+            // Defensive check for sufficient values length
+            if (values.length < 4) {
+                break;
+            }
             position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            position.set(Position.KEY_SATELLITES, values.length > index ? parseIntSafe(values[index++], 0) : 0);
+
+            // Latitude
+            if (values.length > index && !values[index].isEmpty()) {
+                String latValue = values[index];
+                position.setLatitude(parseDoubleSafe(latValue.substring(1), 0));
+                if (latValue.charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+            }
+            index++;
+
+            // Longitude
+            if (values.length > index && !values[index].isEmpty()) {
+                String lonValue = values[index];
+                position.setLongitude(parseDoubleSafe(lonValue.substring(1), 0));
+                if (lonValue.charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            index++;
+
+            // Speed
+            if (values.length > index && !values[index].isEmpty()) {
+                position.setSpeed(UnitsConverter.knotsFromKph(parseIntSafe(values[index], 0)));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            index++;
+
+            // Course
+            if (values.length > index && !values[index].isEmpty()) {
+                position.setCourse(parseIntSafe(values[index], 0));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+            index++;
+
+            // Altitude
+            if (values.length > index && !values[index].isEmpty()) {
+                position.setAltitude(parseIntSafe(values[index], 0));
+                index++;
+            }
+
+            // HDOP
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.KEY_HDOP, parseDoubleSafe(values[index++], 0));
+            }
+
+            // VDOP
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.KEY_VDOP, parseDoubleSafe(values[index++], 0));
             }
             break;
+
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            index += 2; // registration status and signal strength
+            if (values.length >= index + 5) {
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                    parseIntSafe(values[index++], 0), parseIntSafe(values[index++], 0),
+                    parseIntSafeHex(values[index++], 0), parseIntSafeHex(values[index++], 0),
+                    parseIntSafe(values[index++], 0)
+                )));
+            }
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.KEY_ODOMETER, parseLongSafe(values[index++], 0));
+            } else {
+                index++;
             }
-                if (index < values.length) {
+            if (values.length > index && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                int ms = 0;
+                try {
+                    if (hours.length >= 1) ms += Integer.parseInt(hours[0]) * 3600 * 1000;
+                    if (hours.length >= 2) ms += Integer.parseInt(hours[1]) * 60 * 1000;
+                    if (hours.length >= 3) ms += Integer.parseInt(hours[2]) * 1000;
+                    position.set(Position.KEY_HOURS, ms);
+                } catch (NumberFormatException ex) {
+                    // Ignore parsing errors, do not set hours
+                }
             }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.KEY_POWER, parseDoubleSafe(values[index++], 0));
+            } else {
+                index++;
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.KEY_BATTERY, parseDoubleSafe(values[index++], 0));
+            } else {
+                index++;
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, parseDoubleSafe(values[index++], 0));
+            } else {
+                index++;
+            }
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2, parseDoubleSafe(values[index++], 0));
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (values.length > index && !values[index].isEmpty()) {
+                position.set(Position.KEY_STATUS, parseIntSafe(values[index++], 16));
+            } else {
+                index++;
+            }
+            int io = 0;
+            if (values.length > index && !values[index].isEmpty()) {
+                io = parseIntSafe(values[index++], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+            } else {
+                index++;
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            String geofence = "";
+            if (values.length > index && !values[index].isEmpty()) {
+                geofence += values[index++];
+            } else {
+                index++;
+            }
+            if (values.length > index && !values[index].isEmpty()) {
+                geofence += values[index++];
+            } else {
+                index++;
+            }
+            position.set(Position.KEY_GEOFENCE, geofence);
+            if (values.length > index && !values[index].isEmpty()) {
                 position.set("eventStatus", values[index++]);
-                if (index < values.length) {
+            } else {
+                index++;
+            }
+            if (values.length > index && !values[index].isEmpty()) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (values.length > index && !values[index].isEmpty()) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (values.length > index && !values[index].isEmpty()) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (values.length > index && !values[index].isEmpty()) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+            while (index + 1 < values.length) {
+                int sensorIndex = parseIntSafe(values[index++], 0);
+                int dataType = parseIntSafe(values[index++], 0);
                 if (dataType == 0) {
+                    if (values.length > index) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    } else {
+                        index++;
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    // Defensive: Serial number can be empty or missing
+                    if (values.length > index) {
+                        index++; // temperature sensor serial number
+                    }
+                    if (values.length > index && !values[index].isEmpty()) {
+                        position.set(Position.PREFIX_TEMP + sensorIndex, parseDoubleSafe(values[index++], 0));
+                    } else {
+                        index++;
+                    }
                 }
             }
             break;
         default:
             break;
     }
 }
+
+// Helper methods for safe parsing
+private static int parseIntSafe(String value, int def) {
+    try {
+        return Integer.parseInt(value);
+    } catch (Exception ex) {
+        return def;
+    }
+}
+private static int parseIntSafe(String value, int radix, int def) {
+    try {
+        return Integer.parseInt(value, radix);
+    } catch (Exception ex) {
+        return def;
+    }
+}
+private static int parseIntSafeHex(String value, int def) {
+    try {
+        return Integer.parseInt(value, 16);
+    } catch (Exception ex) {
+        return def;
+    }
+}
+private static double parseDoubleSafe(String value, double def) {
+    try {
+        return Double.parseDouble(value);
+    } catch (Exception ex) {
+        return def;
+    }
+}
+private static long parseLongSafe(String value, long def) {
+    try {
+        return Long.parseLong(value);
+    } catch (Exception ex) {
+        return def;
+    }
+}
\ No newline at end of file
