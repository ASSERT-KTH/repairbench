diff --git a/tmp/dba71049-1fbe-440c-9fe8-d72be1b98c0b_buggy.java b/tmp/e68c672b-0ba1-4628-a12c-b13d0969b32b_fixed.java
index ad77f15..6ee7c95 100644
--- a/tmp/dba71049-1fbe-440c-9fe8-d72be1b98c0b_buggy.java
+++ b/tmp/e68c672b-0ba1-4628-a12c-b13d0969b32b_fixed.java
@@ -1,112 +1,282 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
-        if (fragment.length() == dataIndex + 1) {
+    if (fragment.length() == dataIndex + 1 || dataIndex == -1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
-        switch (fragment.substring(0, dataIndex)) {
+    switch (fragment.substring(0, dataIndex != -1 ? dataIndex : fragment.length())) {
         case "GPS":
+            // Defensive: check we have enough elements before each access
+            if (index < values.length) {
                 position.setValid(values[index++].equals("A"));
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            } else if (index < values.length) {
+                index++; // skip
+            }
+            // Latitude
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                if (values[index].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
+                index++;
+            } else if (index < values.length) {
+                index++;
+            }
+            // Longitude
+            if (index < values.length && !values[index].isEmpty()) {
                 position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                if (values[index].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                index++;
+            } else if (index < values.length) {
+                index++;
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
+            // Speed
+            if (index < values.length && !values[index].isEmpty()) {
+                double speed = 0.0;
+                try {
+                    speed = Double.parseDouble(values[index]);
+                } catch (NumberFormatException e) {
+                    try {
+                        speed = Integer.parseInt(values[index]);
+                    } catch (NumberFormatException ignored) {}
+                }
+                position.setSpeed(UnitsConverter.knotsFromKph(speed));
+                index++;
+            } else if (index < values.length) {
+                index++;
+            }
+            // Course
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setCourse(Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    try {
+                        position.setCourse(Integer.parseInt(values[index]));
+                    } catch (NumberFormatException ignored) {}
+                }
+            }
+            index++;
+            // Altitude (optional)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setAltitude(Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    try {
                         position.setAltitude(Integer.parseInt(values[index++]));
+                    } catch (NumberFormatException ignored) {
+                        index++;
                     }
-                if (index < values.length) {
+                }
+            } else if (index < values.length) {
+                index++;
+            }
+            // HDOP (optional)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            // VDOP (optional)
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else if (index < values.length) {
+                index++;
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            // skip registration status and signal strength
+            index += 2;
+            // Defensive: check there are at least 5 values left (for a full cell tower)
+            if (values.length - index >= 5) {
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                         Integer.parseInt(values[index++]))));
+            }
             break;
         case "COT":
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                int t = 0;
+                if (hours.length > 0 && !hours[0].isEmpty()) {
+                    t += Integer.parseInt(hours[0]) * 3600;
+                }
+                if (hours.length > 1 && !hours[1].isEmpty()) {
+                    t += Integer.parseInt(hours[1]) * 60;
+                }
+                if (hours.length > 2 && !hours[2].isEmpty()) {
+                    t += Integer.parseInt(hours[2]);
+                }
+                position.set(Position.KEY_HOURS, t * 1000);
+                index++;
+            } else if (index < values.length) {
+                index++;
             }
             break;
         case "ADC":
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
                 }
-                if (index < values.length) {
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else if (index < values.length) {
+                index++;
             }
             break;
         case "DTT":
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                } catch (NumberFormatException e) {
+                    index++;
+                }
+            } else if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                int io = 0;
+                try {
+                    io = Integer.parseInt(values[index], 16);
+                } catch (NumberFormatException ignored) {}
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
+            index++;
+            if (index + 1 < values.length) { // Geofence can be two elements
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            } else if (index < values.length) {
+                position.set(Position.KEY_GEOFENCE, values[index++]);
+            }
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                // Defensive: each sensor block should at least have 2 elements (index + dataType)
+                if (index + 1 >= values.length) {
+                    break;
+                }
+                int sensorIndex = 0;
+                int dataType = 0;
+                try {
+                    sensorIndex = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    index++; // skip unusable data
+                    continue;
+                }
+                try {
+                    dataType = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    // skip unusable data
+                    continue;
+                }
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                    // skip temperature sensor serial number, but only if present
+                    if (index < values.length) {
+                        index++;
+                    }
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
                             position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        } catch (NumberFormatException e) {
+                            index++;
+                        }
+                    } else if (index < values.length) {
+                        index++;
+                    }
+                } else {
+                    // in case there are more types in the future, skip their params (could attempt to infer count based on further spec, for now skip one)
+                    if (index < values.length) {
+                        index++;
+                    }
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
