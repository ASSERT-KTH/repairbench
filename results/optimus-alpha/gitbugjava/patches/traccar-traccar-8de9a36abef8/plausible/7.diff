diff --git a/tmp/386f4ffe-ce69-42e1-8d00-cc3b96f6fb15_buggy.java b/tmp/7ea447bd-7e2a-41e8-ae87-40fdb21c1f51_fixed.java
index ad77f15..8466073 100644
--- a/tmp/386f4ffe-ce69-42e1-8d00-cc3b96f6fb15_buggy.java
+++ b/tmp/7ea447bd-7e2a-41e8-ae87-40fdb21c1f51_fixed.java
@@ -1,112 +1,224 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
+    if (dataIndex < 0) {
+        return;
+    }
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
+            // Defensive: bail if not enough values for mandatory fields
+            if (values.length < 5) {
+                return;
+            }
             position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+            position.set(Position.KEY_SATELLITES, !values[index].isEmpty() ? Integer.parseInt(values[index++]) : null);
+
+            // Latitude
+            double latitude = 0.0;
+            if (!values[index].isEmpty()) {
+                latitude = Double.parseDouble(values[index].substring(1));
+                if (values[index].charAt(0) == 'S') {
+                    latitude = -latitude;
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+            position.setLatitude(latitude);
+            index++;
+
+            // Longitude
+            double longitude = 0.0;
+            if (!values[index].isEmpty()) {
+                longitude = Double.parseDouble(values[index].substring(1));
+                if (values[index].charAt(0) == 'W') {
+                    longitude = -longitude;
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            position.setLongitude(longitude);
+            index++;
+
+            // Speed
+            double speed = 0.0;
+            if (index < values.length && !values[index].isEmpty()) {
+                speed = UnitsConverter.knotsFromKph(Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+            position.setSpeed(speed);
+            index++;
+
+            // Course
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setCourse(Double.parseDouble(values[index]));
+            }
+            index++;
+
+            // Altitude
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setAltitude(Double.parseDouble(values[index]));
+                index++;
+            }
+
+            // HDOP
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                index++;
+            }
+
+            // VDOP
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                index++;
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            // original: registration status, signal strength
+            index += 2;
+            // Multi-cell support
+            while (index + 4 < values.length) {
+                if (!values[index].isEmpty() && !values[index + 1].isEmpty() && !values[index + 2].isEmpty() && !values[index + 3].isEmpty() && !values[index + 4].isEmpty()) {
                     position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                            Integer.parseInt(values[index++]),
+                            Integer.parseInt(values[index++]),
+                            Integer.parseInt(values[index++], 16),
+                            Integer.parseInt(values[index++], 16),
+                            Integer.parseInt(values[index++])
+                    )));
+                } else {
+                    index += 5;
+                }
+            }
             break;
         case "COT":
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
             }
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                int hoursVal = (hours.length > 0 && !hours[0].isEmpty() ? Integer.parseInt(hours[0]) : 0) * 3600
+                        + (hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) : 0) * 60
+                        + (hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0);
+                position.set(Position.KEY_HOURS, hoursVal * 1000);
+                index++;
             }
             break;
         case "ADC":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            } else {
+                index++;
             }
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            } else {
+                index++;
             }
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
             }
             break;
         case "DTT":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            } else {
+                index++;
+            }
+            // IO
+            if (index < values.length && !values[index].isEmpty()) {
+                int io = Integer.parseInt(values[index], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                index++;
+            } else {
+                index++;
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            String geofence = "";
+            if (index < values.length && !values[index].isEmpty()) {
+                geofence += values[index++];
+            } else {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                geofence += values[index++];
+            } else {
+                index++;
+            }
+            position.set(Position.KEY_GEOFENCE, geofence);
+
+            if (index < values.length) {
+                // this might be "eventStatus" or, if empty, skip forward
+                if (!values[index].isEmpty()) {
                     position.set("eventStatus", values[index++]);
-                if (index < values.length) {
+                } else {
+                    index++;
+                }
+            }
+
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                // Defensive: there must be at least two more elements for sensorIndex and dataType
+                if (index + 1 >= values.length) break;
+                int sensorIndex = 0, dataType = 0;
+                if (!values[index].isEmpty()) {
+                    sensorIndex = Integer.parseInt(values[index]);
+                }
+                index++;
+                if (!values[index].isEmpty()) {
+                    dataType = Integer.parseInt(values[index]);
+                }
+                index++;
+
                 if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    // driver unique id
+                    if (index < values.length && !values[index].isEmpty()) {
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                    }
+                    index++;
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    // temperature sensor serial number
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                    }
+                    index++;
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
