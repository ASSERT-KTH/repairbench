diff --git a/tmp/0e00c90a-69e6-4028-85ec-e93ab9b4cd2f_buggy.java b/tmp/7e49e109-cbae-4da1-96ea-fd39578ce9fb_fixed.java
index c9c77a4..e085f36 100644
--- a/tmp/0e00c90a-69e6-4028-85ec-e93ab9b4cd2f_buggy.java
+++ b/tmp/7e49e109-cbae-4da1-96ea-fd39578ce9fb_fixed.java
@@ -1,35 +1,52 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
-            );
+        // Instead of URI (which decodes %2B to + in path), manually encode userInfo and host,
+        // but preserve the raw path as-is.
+        StringBuilder urlBuilder = new StringBuilder();
+        urlBuilder.append(u.getProtocol())
+                .append("://");
+        if (u.getUserInfo() != null) {
+            urlBuilder.append(URLEncoder.encode(u.getUserInfo(), "UTF-8")).append('@');
+        }
+        String asciiHost = IDN.toASCII(decodePart(u.getHost()));
+        urlBuilder.append(asciiHost);
+        if (u.getPort() != -1) {
+            urlBuilder.append(':').append(u.getPort());
+        }
+        // Use getRawPath() if available, else getPath(). This preserves %XX encodings in path.
+        String rawPath;
+        try {
+            rawPath = u.toURI().getRawPath();
+        } catch (URISyntaxException e) {
+            // fallback in case of error (should not happen)
+            rawPath = u.getPath();
+        }
+        if (rawPath != null)
+            urlBuilder.append(rawPath);
 
-            String normUrl = uri.toASCIIString();
         if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
-                    sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
+                urlBuilder.append('?');
+                appendToAscii(StringUtil.releaseBuilder(q), true, urlBuilder);
             }
             if (u.getRef() != null) {
-                    sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
+                urlBuilder.append('#');
+                appendToAscii(u.getRef(), false, urlBuilder);
             }
-                normUrl = StringUtil.releaseBuilder(sb);
+        } else {
+            if (u.getQuery() != null) {
+                urlBuilder.append('?').append(u.toURI().getRawQuery());
             }
+            if (u.getRef() != null) {
+                urlBuilder.append('#').append(u.toURI().getRawFragment());
+            }
+        }
+
+        String normUrl = urlBuilder.toString();
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
