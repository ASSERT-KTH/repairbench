diff --git a/tmp/466387c4-5be0-4e3a-976c-239da251301d_buggy.java b/tmp/00d329c5-c5a2-40ac-ae56-9952b7c03406_fixed.java
index c9c77a4..e53bbc3 100644
--- a/tmp/466387c4-5be0-4e3a-976c-239da251301d_buggy.java
+++ b/tmp/00d329c5-c5a2-40ac-ae56-9952b7c03406_fixed.java
@@ -1,35 +1,40 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
+        // use the URI class to encode non-ascii in path, but keep the original percent-encoding
+        String path = u.getPath();
+        // Special: if the path contains percent-encoded characters, do not decode or re-encode it
+        // since URI will normalize %2B to +, which is not desired
+        String host = u.getHost();
+        if (host != null) {
+            host = IDN.toASCII(decodePart(host));
+        }
+        // pass path as-is, don't try to decodePart()
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+            host,
             u.getPort(),
-                decodePart(u.getPath()),
+            path,
             null, null // query and fragment appended later so as not to encode
         );
 
         String normUrl = uri.toASCIIString();
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u =  new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
