diff --git a/tmp/63f71fd3-2c9e-4324-921f-1945a5692566_buggy.java b/tmp/920aaddb-cfa1-4fc1-932f-52504352a5f2_fixed.java
index 47a8941..0ae498e 100644
--- a/tmp/63f71fd3-2c9e-4324-921f-1945a5692566_buggy.java
+++ b/tmp/920aaddb-cfa1-4fc1-932f-52504352a5f2_fixed.java
@@ -1,53 +1,63 @@
 /**
  * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
+    String oldName = clazz.name();
+    String newName = oldName; // Will be changed if collision occurs
+
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
     }
     else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
         // In this scenario class should have "static" modifier reset otherwise it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
-					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                // Fix: Allow both local and global declarations (anonymous attribute exists only for XSDeclaration, not all XSComponent).
+                if (sc instanceof XSDeclaration) {
+                    XSDeclaration decl = (XSDeclaration) sc;
+                    // Only set anonymous if 'anonymous' field exists (for local).
+                    try {
+                        setPrivateField(decl, "anonymous", Boolean.FALSE);
+                    } catch (Exception e) {
+                        // Ignore if field missing, ensure continuation
+                    }
+                }
                 break;
             }
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+    // Rename only if there is a collision in the target context (grandParent)
+    if (classes.containsKey(newName)) {
+        newName = parent.name() + newName;
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
     }
 
-		classes.put(clazz.name(), clazz);
+    classes.put(newName, clazz);
 
     // Finally modify the class so that it refers back the container:
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
