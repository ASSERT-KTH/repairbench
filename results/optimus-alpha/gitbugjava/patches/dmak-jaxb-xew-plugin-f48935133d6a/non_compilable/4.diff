diff --git a/tmp/be37641f-2b40-48b2-9197-805efca75128_buggy.java b/tmp/8f3c1260-de44-4c05-b2e1-4c7486a3e426_fixed.java
index 47a8941..6170ea7 100644
--- a/tmp/be37641f-2b40-48b2-9197-805efca75128_buggy.java
+++ b/tmp/8f3c1260-de44-4c05-b2e1-4c7486a3e426_fixed.java
@@ -1,53 +1,67 @@
 /**
  * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
-		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    JClassContainer origParentContainer = clazz.parentContainer();
+    if (!(origParentContainer instanceof JDefinedClass)) {
+        // Not an inner class, nothing to do.
+        return;
+    }
+    JDefinedClass parent = (JDefinedClass) origParentContainer;
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
     }
     else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
         // In this scenario class should have "static" modifier reset otherwise it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
+                // Remove the assertion that an inner class is always a local declaration.
+                // The previous assertion caused problems for global inner classes.
+                // assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
 
                 break;
             }
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+    String originalName = clazz.name();
+    if (classes.containsKey(originalName)) {
+        String newName = parent.name() + originalName;
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
+        // Since we're using clazz.name() below, ensure the key matches the renamed class
+        originalName = newName;
     }
 
     classes.put(clazz.name(), clazz);
 
     // Finally modify the class so that it refers back the container:
     setPrivateField(clazz, "outer", grandParent);
+
+    // Remove from original parent's classes map to avoid duplicate declaration
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
 }
\ No newline at end of file
