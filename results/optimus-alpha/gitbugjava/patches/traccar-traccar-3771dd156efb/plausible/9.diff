diff --git a/tmp/f7c1346a-eff9-4e2c-88cf-3cb552db2846_buggy.java b/tmp/69d10c4b-07db-407b-9ee9-e104fd28111a_fixed.java
index 3da904d..38ce4c3 100644
--- a/tmp/f7c1346a-eff9-4e2c-88cf-3cb552db2846_buggy.java
+++ b/tmp/69d10c4b-07db-407b-9ee9-e104fd28111a_fixed.java
@@ -1,73 +1,141 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
-        String[] values = parser.next().split(",");
+    String nextBlock = parser.next();
+    if (nextBlock == null) {
+        return position;
+    }
+    String[] values = nextBlock.split(",");
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    // parse cell towers/wifi block if exists
+    try {
+        int cellCount = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                cellCount = Integer.parseInt(values[index++]);
+            } catch (NumberFormatException ignore) {
+                cellCount = 0;
+                index++; // skip the field
+            }
+        }
         if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+            index += 1; // timing advance (can be missing in some protocols, but usually present)
+            int mcc = 0;
+            int mnc = 0;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    mcc = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException ignore) {
+                    mcc = 0;
+                    index++;
+                }
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    mnc = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException ignore) {
+                    mnc = 0;
+                    index++;
+                }
+            }
 
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                if (index + 2 < values.length) {
+                    int lac = 0;
+                    int cid = 0;
+                    try {
+                        lac = Integer.parseInt(values[index++]);
+                    } catch (NumberFormatException ignore) {
+                        index++;
+                    }
+                    try {
+                        cid = Integer.parseInt(values[index++]);
+                    } catch (NumberFormatException ignore) {
+                        index++;
+                    }
                     String rssi = values[index++];
                     if (!rssi.isEmpty()) {
+                        try {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                        } catch (NumberFormatException ignore) {
+                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                        }
                     } else {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                     }
+                } else {
+                    break;
+                }
             }
         }
 
         if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+            // Parse wifi
+            int wifiCount = 0;
+            try {
+                wifiCount = Integer.parseInt(values[index++]);
+            } catch (NumberFormatException ignore) {
+                wifiCount = 0;
+                index++;
+            }
 
             for (int i = 0; i < wifiCount; i++) {
+                if (index + 2 < values.length) {
                     index += 1; // wifi name
                     String macAddress = values[index++];
                     String rssi = values[index++];
                     if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+                        try {
                             network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                        } catch (NumberFormatException ignore) {
+                            // ignore this wifi point if rssi is invalid
                         }
                     }
+                } else {
+                    break;
+                }
+            }
+        }
+    } catch (IndexOutOfBoundsException ignore) {
+        // Just ignore extra values if not enough data for cells or wifi
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    // Only set network if has any towers or APs
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())
+            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
