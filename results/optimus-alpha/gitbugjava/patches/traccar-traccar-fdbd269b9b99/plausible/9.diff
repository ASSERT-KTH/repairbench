diff --git a/tmp/325f59cc-76ac-403c-a405-4300139f0ac5_buggy.java b/tmp/5be7ad03-5f20-40eb-a703-51f64e7744d5_fixed.java
index 30eba92..cb14694 100644
--- a/tmp/325f59cc-76ac-403c-a405-4300139f0ac5_buggy.java
+++ b/tmp/5be7ad03-5f20-40eb-a703-51f64e7744d5_fixed.java
@@ -1,113 +1,209 @@
 private Object decodePosition(
         Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
         String[] data = pair.split("[=:]");
+        if (data.length < 2) {
+            continue;
+        }
         int key;
+        boolean keyIsHex = true;
         try {
             key = Integer.parseInt(data[0], 16);
         } catch (NumberFormatException e) {
+            // try as decimal
+            try {
+                key = Integer.parseInt(data[0]);
+                keyIsHex = false;
+            } catch (NumberFormatException ex) {
                 continue;
             }
+        }
         String value = data[1];
+        // Try to map A/B/C/D/... keys to hex codes
+        if (!keyIsHex && data[0].length() == 1) {
+            // handle single-letter keys
+            switch (data[0]) {
+                case "A": key = 0xA; break;
+                case "B": key = 0xB; break;
+                case "C": key = 0xC; break;
+                case "D": key = 0xD; break;
+                case "E": key = 0xE; break;
+                case "F": key = 0xF; break;
+                default: /* leave as is */ break;
+            }
+        }
+
         if (key == 0x0) {
             if (position != null) {
+                if (dateBuilder != null) {
                     position.setTime(dateBuilder.getDate());
+                }
                 positions.add(position);
             }
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             dateBuilder = new DateBuilder(new Date());
         } else if (position != null) {
             switch (key) {
                 case 0x11:
                     value = ("000000" + value).substring(value.length());
+                    try {
                         dateBuilder.setDateReverse(
                             Integer.parseInt(value.substring(0, 2)),
                             Integer.parseInt(value.substring(2, 4)),
                             Integer.parseInt(value.substring(4)));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0x10:
                     value = ("00000000" + value).substring(value.length());
+                    try {
                         dateBuilder.setTime(
                             Integer.parseInt(value.substring(0, 2)),
                             Integer.parseInt(value.substring(2, 4)),
                             Integer.parseInt(value.substring(4, 6)),
                             Integer.parseInt(value.substring(6)) * 10);
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0xA:
                     position.setValid(true);
+                    try {
                         position.setLatitude(Double.parseDouble(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0xB:
                     position.setValid(true);
+                    try {
                         position.setLongitude(Double.parseDouble(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0xC:
+                    try {
                         position.setAltitude(Double.parseDouble(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0xD:
+                    try {
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0xE:
+                    try {
                         position.setCourse(Integer.parseInt(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0xF:
+                    try {
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0x12:
+                    try {
                         position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0x20:
                     position.set(Position.KEY_ACCELERATION, value);
                     break;
                 case 0x24:
+                    try {
                         position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0x81:
+                    try {
                         position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0x82:
+                    try {
                         position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0x104:
+                    try {
                         position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0x105:
+                    try {
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0x10c:
+                    try {
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0x10d:
+                    try {
                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 case 0x111:
+                    try {
                         position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                    } catch (Exception ignore) {
+                        // ignore parse exceptions
+                    }
                     break;
                 default:
                     position.set(Position.PREFIX_IO + key, value);
                     break;
             }
         }
     }
 
     if (position != null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
+        if (dateBuilder != null) {
             position.setTime(dateBuilder.getDate());
+        }
         positions.add(position);
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
