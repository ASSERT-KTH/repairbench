diff --git a/tmp/7dda8b1e-26b7-4d2b-b71e-e54422ba3e21_buggy.java b/tmp/9e19bd9d-ad17-4bcb-b0cc-c477f7afd25a_fixed.java
index 30eba92..847fe4a 100644
--- a/tmp/7dda8b1e-26b7-4d2b-b71e-e54422ba3e21_buggy.java
+++ b/tmp/9e19bd9d-ad17-4bcb-b0cc-c477f7afd25a_fixed.java
@@ -1,113 +1,267 @@
 private Object decodePosition(
         Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
-            String[] data = pair.split("[=:]");
-            int key;
-            try {
-                key = Integer.parseInt(data[0], 16);
-            } catch (NumberFormatException e) {
+        String[] data = pair.split("[=:]", 2); // fix: limit to 2 in case of multiple '=' or ':'
+        if (data.length < 2) {
             continue;
         }
+        String keyString = data[0];
         String value = data[1];
+        Integer key = null;
+        try {
+            key = Integer.parseInt(keyString, 16);
+        } catch (NumberFormatException e) {
+            // Try parse as letters for A, B, C, etc.
+            if (keyString.length() == 1) {
+                // Use hex value for single char A/B/C/D/E/F
+                try {
+                    key = Integer.parseInt(keyString, 16);
+                } catch (NumberFormatException ex) {
+                    key = null;
+                }
+            }
+        }
+        // If cannot parse as key, handle as non-numeric. Use letter as key
+        if (key == null && keyString.length() == 1 && Character.isLetter(keyString.charAt(0))) {
+            key = (int) Character.toUpperCase(keyString.charAt(0));
+        }
+        // Special handling for fields like 10D, 10C etc
+        if (key == null) {
+            try {
+                key = Integer.parseInt(keyString.replaceAll("[^0-9A-Fa-f]", ""), 16);
+            } catch (NumberFormatException ex) {
+                continue;
+            }
+        }
+
+        // Special handling for old-style keys like 'A', 'B', ... (lat/lon), as observed in input
+        boolean isLetterKey = keyString.length() == 1 && Character.isLetter(keyString.charAt(0));
+        if (isLetterKey) {
+            int charKey = Character.toUpperCase(keyString.charAt(0));
+            if (position != null) {
+                switch (charKey) {
+                    case 'A':
+                        position.setValid(true);
+                        try {
+                            position.setLatitude(Double.parseDouble(value));
+                        } catch (Exception e) {
+                            // ignore
+                        }
+                        break;
+                    case 'B':
+                        position.setValid(true);
+                        try {
+                            position.setLongitude(Double.parseDouble(value));
+                        } catch (Exception e) {
+                            // ignore
+                        }
+                        break;
+                    case 'C':
+                        try {
+                            position.setAltitude(Double.parseDouble(value));
+                        } catch (Exception e) {
+                            // ignore
+                        }
+                        break;
+                    case 'D':
+                        try {
+                            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                        } catch (Exception e) {
+                            // ignore
+                        }
+                        break;
+                    case 'E':
+                        try {
+                            position.setCourse(Integer.parseInt(value));
+                        } catch (Exception e) {
+                            // ignore
+                        }
+                        break;
+                    case 'F':
+                        try {
+                            position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                        } catch (Exception e) {
+                            // ignore
+                        }
+                        break;
+                    default:
+                        position.set(Position.PREFIX_IO + keyString, value);
+                }
+            }
+            continue;
+        }
+
         if (key == 0x0) {
             if (position != null) {
+                if (dateBuilder != null) {
                     position.setTime(dateBuilder.getDate());
+                }
                 positions.add(position);
             }
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             dateBuilder = new DateBuilder(new Date());
         } else if (position != null) {
             switch (key) {
                 case 0x11:
                     value = ("000000" + value).substring(value.length());
+                    try {
                         dateBuilder.setDateReverse(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4)));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0x10:
                     value = ("00000000" + value).substring(value.length());
+                    try {
                         dateBuilder.setTime(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4, 6)),
                                 Integer.parseInt(value.substring(6)) * 10);
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0xA:
                     position.setValid(true);
+                    try {
                         position.setLatitude(Double.parseDouble(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0xB:
                     position.setValid(true);
+                    try {
                         position.setLongitude(Double.parseDouble(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0xC:
+                    try {
                         position.setAltitude(Double.parseDouble(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0xD:
+                    try {
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0xE:
+                    try {
                         position.setCourse(Integer.parseInt(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0xF:
+                    try {
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0x12:
+                    try {
                         position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0x20:
                     position.set(Position.KEY_ACCELERATION, value);
                     break;
                 case 0x24:
+                    try {
                         position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0x81:
+                    try {
                         position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0x82:
+                    try {
                         position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0x104:
+                    try {
                         position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0x105:
+                    try {
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0x10c:
+                    try {
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0x10d:
+                    try {
                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 case 0x111:
+                    try {
                         position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                    } catch (Exception e) {
+                        // ignore
+                    }
                     break;
                 default:
-                        position.set(Position.PREFIX_IO + key, value);
+                    position.set(Position.PREFIX_IO + keyString, value);
                     break;
             }
         }
     }
 
     if (position != null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
+        if (dateBuilder != null) {
             position.setTime(dateBuilder.getDate());
+        }
         positions.add(position);
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
