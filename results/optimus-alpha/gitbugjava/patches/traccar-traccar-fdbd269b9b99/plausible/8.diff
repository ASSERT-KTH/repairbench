diff --git a/tmp/ee783c46-89f4-4440-a89f-334b3e2151ca_buggy.java b/tmp/02748069-c1bd-468f-8bea-edd49da99246_fixed.java
index 30eba92..e97acbd 100644
--- a/tmp/ee783c46-89f4-4440-a89f-334b3e2151ca_buggy.java
+++ b/tmp/02748069-c1bd-468f-8bea-edd49da99246_fixed.java
@@ -1,113 +1,242 @@
 private Object decodePosition(
         Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
-            String[] data = pair.split("[=:]");
-            int key;
-            try {
-                key = Integer.parseInt(data[0], 16);
-            } catch (NumberFormatException e) {
+        String[] data = pair.split("[=:]", 2);
+
+        // Ensure data has both key and value parts
+        if (data.length < 2) {
             continue;
         }
+
+        String keyRaw = data[0];
         String value = data[1];
-            if (key == 0x0) {
+        int key;
+
+        // Determine hex or decimal key: try hex, then fallback to decimal if fails, then string fallback
+        try {
+            key = Integer.parseInt(keyRaw, 16);
+        } catch (NumberFormatException hex) {
+            try {
+                key = Integer.parseInt(keyRaw); // fallback to decimal
+            } catch (NumberFormatException dec) {
+                // If not parseable and not A/B/C/D/E/F/...
+                key = -1;
+            }
+        }
+
+        // A, B, C, D, E, F, etc. should be handled by string
+        if (key == -1 && keyRaw.length() == 1) {
+            // Single char, keep as string for below (A/B/...)
+        } else if (key == -1) {
+            continue;
+        }
+
+        if ((key == 0x0) || (key == 0)) {
             if (position != null) {
-                    position.setTime(dateBuilder.getDate());
+                position.setTime(dateBuilder != null ? dateBuilder.getDate() : new Date());
                 positions.add(position);
             }
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             dateBuilder = new DateBuilder(new Date());
         } else if (position != null) {
+            // Switch for keys as int or char
+            boolean handled = false;
             switch (key) {
                 case 0x11:
                     value = ("000000" + value).substring(value.length());
                     dateBuilder.setDateReverse(
                             Integer.parseInt(value.substring(0, 2)),
                             Integer.parseInt(value.substring(2, 4)),
                             Integer.parseInt(value.substring(4)));
+                    handled = true;
                     break;
                 case 0x10:
                     value = ("00000000" + value).substring(value.length());
                     dateBuilder.setTime(
                             Integer.parseInt(value.substring(0, 2)),
                             Integer.parseInt(value.substring(2, 4)),
                             Integer.parseInt(value.substring(4, 6)),
                             Integer.parseInt(value.substring(6)) * 10);
+                    handled = true;
                     break;
                 case 0xA:
+                    try {
+                        double lat = Double.parseDouble(value);
                         position.setValid(true);
-                        position.setLatitude(Double.parseDouble(value));
+                        position.setLatitude(lat);
+                    } catch (NumberFormatException e) {
+                        // ignore invalid latitude
+                    }
+                    handled = true;
                     break;
                 case 0xB:
+                    try {
+                        double lon = Double.parseDouble(value);
                         position.setValid(true);
-                        position.setLongitude(Double.parseDouble(value));
+                        position.setLongitude(lon);
+                    } catch (NumberFormatException e) {
+                        // ignore invalid longitude
+                    }
+                    handled = true;
                     break;
                 case 0xC:
+                    try {
                         position.setAltitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                        // ignore invalid altitude
+                    }
+                    handled = true;
                     break;
                 case 0xD:
+                    try {
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                    } catch (NumberFormatException e) {
+                        // ignore invalid speed
+                    }
+                    handled = true;
                     break;
                 case 0xE:
+                    try {
                         position.setCourse(Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        // ignore invalid course
+                    }
+                    handled = true;
                     break;
                 case 0xF:
+                    try {
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {}
+                    handled = true;
                     break;
                 case 0x12:
+                    try {
                         position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {}
+                    handled = true;
                     break;
                 case 0x20:
                     position.set(Position.KEY_ACCELERATION, value);
+                    handled = true;
                     break;
                 case 0x24:
+                    try {
                         position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                    } catch (NumberFormatException e) {}
+                    handled = true;
                     break;
                 case 0x81:
+                    try {
                         position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {}
+                    handled = true;
                     break;
                 case 0x82:
+                    try {
                         position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    } catch (NumberFormatException e) {}
+                    handled = true;
                     break;
                 case 0x104:
+                    try {
                         position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {}
+                    handled = true;
                     break;
                 case 0x105:
+                    try {
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {}
+                    handled = true;
                     break;
                 case 0x10c:
+                    try {
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {}
+                    handled = true;
                     break;
                 case 0x10d:
+                    try {
                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                    } catch (NumberFormatException e) {}
+                    handled = true;
                     break;
                 case 0x111:
+                    try {
                         position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {}
+                    handled = true;
+                    break;
+            }
+            if (!handled && key == -1) {
+                // String keys, e.g., A/B/C/D/E/F
+                switch (keyRaw) {
+                    case "A":
+                        try {
+                            position.setValid(true);
+                            position.setLatitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                        }
+                        break;
+                    case "B":
+                        try {
+                            position.setValid(true);
+                            position.setLongitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                        }
+                        break;
+                    case "C":
+                        try {
+                            position.setAltitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                        }
+                        break;
+                    case "D":
+                        try {
+                            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                        } catch (NumberFormatException e) {
+                        }
+                        break;
+                    case "E":
+                        try {
+                            position.setCourse(Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                        }
+                        break;
+                    case "F":
+                        try {
+                            position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                        }
                         break;
                     default:
+                        position.set(Position.PREFIX_IO + keyRaw, value);
+                        break;
+                }
+            } else if (!handled) {
                 position.set(Position.PREFIX_IO + key, value);
-                        break;
             }
         }
     }
 
     if (position != null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
-            position.setTime(dateBuilder.getDate());
+        position.setTime(dateBuilder != null ? dateBuilder.getDate() : new Date());
         positions.add(position);
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
