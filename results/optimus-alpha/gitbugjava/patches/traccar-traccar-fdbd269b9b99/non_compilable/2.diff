diff --git a/tmp/5bc5de39-ce6f-4639-b4d0-156a74c70a28_buggy.java b/tmp/b1415f94-44d7-4e29-861d-1ce4b2d03dd9_fixed.java
index 30eba92..d639e1b 100644
--- a/tmp/5bc5de39-ce6f-4639-b4d0-156a74c70a28_buggy.java
+++ b/tmp/b1415f94-44d7-4e29-861d-1ce4b2d03dd9_fixed.java
@@ -1,113 +1,209 @@
 private Object decodePosition(
         Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
-            String[] data = pair.split("[=:]");
-            int key;
-            try {
-                key = Integer.parseInt(data[0], 16);
-            } catch (NumberFormatException e) {
+        String[] data = pair.split("[=:]", 2);
+        if (data.length != 2) {
             continue;
         }
+        String keyString = data[0].toUpperCase();
         String value = data[1];
-            if (key == 0x0) {
+
+        int key;
+        boolean keyParsed = false;
+
+        // Try parsing key as hexadecimal if it looks like a hex number, otherwise as decimal/alpha.
+        try {
+            // If the key only consists of hex digits, parse as hex
+            if (keyString.matches("^[0-9A-F]+$")) {
+                key = Integer.parseInt(keyString, 16);
+            } else {
+                // fallback to parse as decimal for pure numbers
+                key = Integer.parseInt(keyString);
+            }
+            keyParsed = true;
+        } catch (NumberFormatException e) {
+            keyParsed = false;
+        }
+
+        if (keyParsed && key == 0x0) {
             if (position != null) {
-                    position.setTime(dateBuilder.getDate());
+                position.setTime(dateBuilder != null ? dateBuilder.getDate() : new Date());
                 positions.add(position);
             }
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             dateBuilder = new DateBuilder(new Date());
-            } else if (position != null) {
+        } else if (keyParsed && position != null) {
             switch (key) {
                 case 0x11:
                     value = ("000000" + value).substring(value.length());
+                    try {
                         dateBuilder.setDateReverse(
                             Integer.parseInt(value.substring(0, 2)),
                             Integer.parseInt(value.substring(2, 4)),
-                                Integer.parseInt(value.substring(4)));
+                            Integer.parseInt(value.substring(4))
+                        );
+                    } catch (Exception ignore) {
+                        // Invalid date value
+                    }
                     break;
                 case 0x10:
                     value = ("00000000" + value).substring(value.length());
+                    try {
                         dateBuilder.setTime(
                             Integer.parseInt(value.substring(0, 2)),
                             Integer.parseInt(value.substring(2, 4)),
                             Integer.parseInt(value.substring(4, 6)),
-                                Integer.parseInt(value.substring(6)) * 10);
+                            Integer.parseInt(value.substring(6)) * 10
+                        );
+                    } catch (Exception ignore) {
+                        // Invalid time value
+                    }
                     break;
                 case 0xA:
+                    try {
                         position.setValid(true);
                         position.setLatitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0xB:
+                    try {
                         position.setValid(true);
                         position.setLongitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0xC:
+                    try {
                         position.setAltitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0xD:
+                    try {
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0xE:
+                    try {
                         position.setCourse(Integer.parseInt(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0xF:
+                    try {
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0x12:
+                    try {
                         position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0x20:
                     position.set(Position.KEY_ACCELERATION, value);
                     break;
                 case 0x24:
+                    try {
                         position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0x81:
+                    try {
                         position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0x82:
+                    try {
                         position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0x104:
+                    try {
                         position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0x105:
+                    try {
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0x10c:
+                    try {
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0x10d:
+                    try {
                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                    } catch (NumberFormatException ignore){}
                     break;
                 case 0x111:
+                    try {
                         position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                    } catch (NumberFormatException ignore){}
                     break;
                 default:
                     position.set(Position.PREFIX_IO + key, value);
                     break;
             }
+        } else if (position != null) {
+            // handle "A", "B", "C", "D", etc. as keys
+            String keyAlpha = keyString;
+            switch (keyAlpha) {
+                case "A":
+                    try {
+                        position.setValid(true);
+                        position.setLatitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ignore){}
+                    break;
+                case "B":
+                    try {
+                        position.setValid(true);
+                        position.setLongitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ignore){}
+                    break;
+                case "C":
+                    try {
+                        position.setAltitude(Double.parseDouble(value));
+                    } catch (NumberFormatException ignore){}
+                    break;
+                case "D":
+                    try {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                    } catch (NumberFormatException ignore){}
+                    break;
+                case "E":
+                    try {
+                        position.setCourse(Integer.parseInt(value));
+                    } catch (NumberFormatException ignore){}
+                    break;
+                case "F":
+                    try {
+                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (NumberFormatException ignore){}
+                    break;
+                default:
+                    position.set(Position.PREFIX_IO + keyAlpha, value);
+                    break;
+            }
         }
     }
 
     if (position != null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
-            position.setTime(dateBuilder.getDate());
+        position.setTime(dateBuilder != null ? dateBuilder.getDate() : new Date());
         positions.add(position);
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
