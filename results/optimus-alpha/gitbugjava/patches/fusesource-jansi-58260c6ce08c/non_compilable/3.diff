diff --git a/tmp/9b6d8829-76fd-4722-bb30-463c732180b1_buggy.java b/tmp/97ffca30-86f0-476d-93ce-777582763a43_fixed.java
index 712f277..3b776a6 100644
--- a/tmp/9b6d8829-76fd-4722-bb30-463c732180b1_buggy.java
+++ b/tmp/97ffca30-86f0-476d-93ce-777582763a43_fixed.java
@@ -1,48 +1,45 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
 
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
                 return target;
             }
             target.append(input.substring(i));
             return target;
         }
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
 
         if (k == -1) {
-                target.append(input);
-                return target;
+            // If an END_TOKEN appears before a BEGIN_TOKEN, or missing END_TOKEN, throw exception
+            int endBeforeStart = input.indexOf(END_TOKEN, i);
+            if (endBeforeStart != -1 && (endBeforeStart < j)) {
+                throw new IllegalArgumentException("Invalid END_TOKEN before BEGIN_TOKEN");
+            }
+            throw new IllegalArgumentException("Missing END_TOKEN");
+        }
+        // Check for END before BEGIN between last i and j
+        int endBeforeStart = input.indexOf(END_TOKEN, i);
+        if (endBeforeStart != -1 && endBeforeStart < j) {
+            throw new IllegalArgumentException("Invalid END_TOKEN before BEGIN_TOKEN");
         }
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Invalid token spec: missing separator");
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
