diff --git a/tmp/88baf238-3537-494b-b889-e8c5dc524028_buggy.java b/tmp/b5af4a3b-2315-46b1-917f-3fde6a61640b_fixed.java
index e883360..3be01e7 100644
--- a/tmp/88baf238-3537-494b-b889-e8c5dc524028_buggy.java
+++ b/tmp/b5af4a3b-2315-46b1-917f-3fde6a61640b_fixed.java
@@ -1,196 +1,316 @@
 private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
     Position position = new Position(getProtocolName());
 
     int index = 0;
     String[] values = sentence.split(",");
 
     index += 1; // header
     index += 1; // protocol version
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
+    if (deviceSession == null) {
+        return null;
+    }
     position.setDeviceId(deviceSession.getDeviceId());
 
     index += 1; // device name
     index += 1; // report type
     index += 1; // canbus state
-        long reportMask = Long.parseLong(values[index++], 16);
+    long reportMask = 0;
     long reportMaskExt = 0;
+    if (index < values.length && !values[index].isEmpty()) {
+        reportMask = Long.parseLong(values[index], 16);
+    }
+    index++;
 
-        if (BitUtil.check(reportMask, 0)) {
-            position.set(Position.KEY_VIN, values[index++]);
+    if (BitUtil.check(reportMask, 0)) { // vin
+        if (index < values.length) position.set(Position.KEY_VIN, values[index]);
+        index++;
     }
-        if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+    if (BitUtil.check(reportMask, 1)) { // ignition
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index]) > 0);
         }
-        if (BitUtil.check(reportMask, 2)) {
-            position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+        index++;
     }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 2)) { // obd odo
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_OBD_ODOMETER, values[index]);
         }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+    if (BitUtil.check(reportMask, 3)) { // fuel used
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index]));
         }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+    if (BitUtil.check(reportMask, 5)) { // rpm
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_RPM, Integer.parseInt(values[index]));
         }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
+        index++;
     }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+    if (BitUtil.check(reportMask, 4)) { // obd speed
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
         }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+    if (BitUtil.check(reportMask, 6)) { // coolant temp
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index]));
         }
-        if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+    if (BitUtil.check(reportMask, 7)) { // fuel consumption
+        if (index < values.length && !values[index].isEmpty()) {
+            String s = values[index];
+            if (s.length() > 1) position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(s.substring(1)));
         }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMask, 8)) { // fuel level
+        if (index < values.length && !values[index].isEmpty()) {
+            String s = values[index];
+            // Sometimes, for legacy/old data, it's pure number, sometimes prefixed by character (e.g. 'P99.99')
+            if (s.length() > 1 && !Character.isDigit(s.charAt(0)) && s.charAt(1) != '.') {
+                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(s.substring(1)));
+            } else {
+                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(s));
             }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
         }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+        index++;
     }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
+    if (BitUtil.check(reportMask, 9)) { // range
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("range", Long.parseLong(values[index]) * 100);
         }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
+        index++;
     }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 10)) { // throttle
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index]));
         }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
+    if (BitUtil.check(reportMask, 11)) { // hours
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index])));
         }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMask, 12)) { // driving time
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index]));
         }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMask, 13)) { // idle hours
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("idleHours", Double.parseDouble(values[index]));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 14)) { // idle fuel cons
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("idleFuelConsumption", Double.parseDouble(values[index]));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 15)) { // axle weight
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index]));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 16)) { // tachograph info
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("tachographInfo", Integer.parseInt(values[index], 16));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 17)) { // indicators
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("indicators", Integer.parseInt(values[index], 16));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 18)) { // lights
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("lights", Integer.parseInt(values[index], 16));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 19)) { // doors
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("doors", Integer.parseInt(values[index], 16));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 20)) { // vehicle overspeed
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("vehicleOverspeed", Double.parseDouble(values[index]));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 21)) { // engine overspeed
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("engineOverspeed", Double.parseDouble(values[index]));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMask, 29)) { // reportMaskExt
+        if (index < values.length && !values[index].isEmpty()) {
+            reportMaskExt = Long.parseLong(values[index], 16);
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMaskExt, 0)) { // adBlueLevel
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("adBlueLevel", Integer.parseInt(values[index]));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMaskExt, 1)) { // axleWeight1
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("axleWeight1", Integer.parseInt(values[index]));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMaskExt, 2)) { // axleWeight3
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("axleWeight3", Integer.parseInt(values[index]));
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMaskExt, 3)) { // axleWeight4
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("axleWeight4", Integer.parseInt(values[index]));
+        }
+        index++;
     }
     if (BitUtil.check(reportMaskExt, 4)) {
         index += 1; // tachograph overspeed
     }
     if (BitUtil.check(reportMaskExt, 5)) {
         index += 1; // tachograph motion
     }
     if (BitUtil.check(reportMaskExt, 6)) {
         index += 1; // tachograph direction
     }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
+    if (BitUtil.check(reportMaskExt, 7)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index]) * 0.001);
+        }
+        index++;
     }
     if (BitUtil.check(reportMaskExt, 8)) {
         index += 1; // pedal breaking factor
     }
     if (BitUtil.check(reportMaskExt, 9)) {
         index += 1; // engine breaking factor
     }
     if (BitUtil.check(reportMaskExt, 10)) {
         index += 1; // total accelerator kick-downs
     }
     if (BitUtil.check(reportMaskExt, 11)) {
         index += 1; // total effective engine speed
     }
     if (BitUtil.check(reportMaskExt, 12)) {
         index += 1; // total cruise control time
     }
     if (BitUtil.check(reportMaskExt, 13)) {
         index += 1; // total accelerator kick-down time
     }
     if (BitUtil.check(reportMaskExt, 14)) {
         index += 1; // total brake application
     }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 15)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("driver1Card", values[index]);
         }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 16)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("driver2Card", values[index]);
         }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
+        index++;
     }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 17)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("driver1Name", values[index]);
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMaskExt, 18)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("driver2Name", values[index]);
+        }
+        index++;
+    }
+    if (BitUtil.check(reportMaskExt, 19)) {
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set("registration", values[index]);
+        }
+        index++;
     }
     if (BitUtil.check(reportMaskExt, 20)) {
         index += 1; // expansion information
     }
     if (BitUtil.check(reportMaskExt, 21)) {
         index += 1; // rapid brakings
     }
     if (BitUtil.check(reportMaskExt, 22)) {
         index += 1; // rapid accelerations
     }
     if (BitUtil.check(reportMaskExt, 23)) {
         index += 1; // engine torque
     }
 
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
-        if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
+    if (BitUtil.check(reportMask, 30)) { // location present
+        // Some devices may send empty fields to pad, skip empties
+        while (index < values.length && values[index].isEmpty()) {
             index += 1;
         }
-            position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
+        if (index < values.length) {
+            position.setValid(!values[index].isEmpty() && Integer.parseInt(values[index]) > 0);
+            index++;
+        }
+        // Now position fields (speed, course, altitude, lon, lat, time)
+        if (index + 5 < values.length && !values[index].isEmpty()) {
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
             position.setCourse(Integer.parseInt(values[index++]));
             position.setAltitude(Double.parseDouble(values[index++]));
             position.setLongitude(Double.parseDouble(values[index++]));
             position.setLatitude(Double.parseDouble(values[index++]));
             position.setTime(dateFormat.parse(values[index++]));
         } else {
-                index += 6; // no location
+            // No location fields present, skip fields and get last
+            index += 6; // skip location fields
             getLastLocation(position, null);
         }
     } else {
         getLastLocation(position, null);
     }
 
     if (BitUtil.check(reportMask, 31)) {
         index += 4; // cell
         index += 1; // reserved
     }
 
+    // Defensive: Only parse time if available, and avoid NumberFormatException
+    if (index < values.length && !values[index].isEmpty()) {
         if (ignoreFixTime) {
             position.setTime(dateFormat.parse(values[index]));
         } else {
             position.setDeviceTime(dateFormat.parse(values[index]));
         }
+    }
 
     return position;
 }
\ No newline at end of file
