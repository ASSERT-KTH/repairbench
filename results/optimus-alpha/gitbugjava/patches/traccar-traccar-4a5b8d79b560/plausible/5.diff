diff --git a/tmp/0df08832-1a67-470b-ad96-f8e616f5db41_buggy.java b/tmp/34347bea-4328-4d16-8dc4-5aeff2c93daf_fixed.java
index 1c732f4..98e9e86 100644
--- a/tmp/0df08832-1a67-470b-ad96-f8e616f5db41_buggy.java
+++ b/tmp/34347bea-4328-4d16-8dc4-5aeff2c93daf_fixed.java
@@ -1,88 +1,102 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
     sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
+    // Added variables to distinguish odometer value
+    Double odometerValue = null;
+
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if (delimiter == -1) continue; // Skip malformed entry
         String key = entry.substring(0, delimiter);
-            String value = entry.substring(delimiter + 1);
+        String value = entry.substring(delimiter + 1).trim();
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
                 position.setValid(Integer.parseInt(value) != 0);
                 break;
             case "datetime_actual":
                 position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                 break;
             case "latitude":
                 position.setLatitude(Double.parseDouble(value));
                 break;
             case "longitude":
                 position.setLongitude(Double.parseDouble(value));
                 break;
             case "altitude":
                 position.setAltitude(Double.parseDouble(value));
                 break;
             case "velocity":
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                 break;
             case "heading":
-                    position.setCourse(Integer.parseInt(value));
+                position.setCourse(Double.parseDouble(value));
                 break;
             case "eventid":
                 position.set(Position.KEY_EVENT, Integer.parseInt(value));
                 break;
             case "mileage":
+                // Mileage seems to be in kilometers, used for odometer in KEY_ODOMETER, multiply by 1000 to get meters
                 position.set(Position.KEY_ODOMETER, (long)(Double.parseDouble(value) * 1000));
                 break;
+            case "odometer":
+                // Save the value, but prefer mileage as odometer if both exist (see original code/test)
+                odometerValue = Double.parseDouble(value);
+                break;
             case "satellites":
                 position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                 break;
             case "ignition":
                 position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                 break;
             case "door":
                 position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                 break;
             case "arm":
                 position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                 break;
             case "fuel":
                 position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                 break;
             case "rpm":
                 position.set(Position.KEY_RPM, Integer.parseInt(value));
                 break;
             case "main_voltage":
                 position.set(Position.KEY_POWER, Double.parseDouble(value));
                 break;
             case "backup_voltage":
                 position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
                 position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
             default:
                 position.set(key, value);
                 break;
         }
     }
 
+    // If no mileage (KEY_ODOMETER) was set, use odometer field if present, in meters
+    if (!position.hasAttribute(Position.KEY_ODOMETER) && odometerValue != null) {
+        position.set(Position.KEY_ODOMETER, odometerValue.longValue());
+    }
+
     return position;
 }
\ No newline at end of file
