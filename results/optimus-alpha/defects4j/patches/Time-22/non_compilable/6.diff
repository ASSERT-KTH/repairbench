diff --git a/tmp/b765be5f-bc5f-40f3-a4f1-fce441b52b98_buggy.java b/tmp/eaa084e2-8fce-473a-908b-e4ce642757f8_fixed.java
index 5b8a4d2..d222b6d 100644
--- a/tmp/b765be5f-bc5f-40f3-a4f1-fce441b52b98_buggy.java
+++ b/tmp/eaa084e2-8fce-473a-908b-e4ce642757f8_fixed.java
@@ -1,12 +1,25 @@
 /**
  * Creates a period from the given millisecond duration with the standard period type
  * and ISO rules, ensuring that the calculation is performed with the time-only period type.
  * <p>
  * The calculation uses the hour, minute, second and millisecond fields.
  *
  * @param duration  the duration, in milliseconds
  */
 protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+    // bug [3264409] fix: use PeriodType.time() to only split into time fields
+    this(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.time());
+    if (duration != 0L) {
+        long millis = duration;
+        int[] values = new int[8];
+        values[4] = (int) (millis / DateTimeConstants.MILLIS_PER_HOUR);
+        millis = millis % DateTimeConstants.MILLIS_PER_HOUR;
+        values[5] = (int) (millis / DateTimeConstants.MILLIS_PER_MINUTE);
+        millis = millis % DateTimeConstants.MILLIS_PER_MINUTE;
+        values[6] = (int) (millis / DateTimeConstants.MILLIS_PER_SECOND);
+        millis = millis % DateTimeConstants.MILLIS_PER_SECOND;
+        values[7] = (int) millis;
+        // Set the values
+        setValues(values);
+    }
 }
\ No newline at end of file
