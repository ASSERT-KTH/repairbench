diff --git a/tmp/bd2ee57b-3629-4e51-8e08-ef483ae40e2b_buggy.java b/tmp/c1fb27bb-b924-41b0-b66a-82a43b2d7d82_fixed.java
index 10da689..3f7320f 100644
--- a/tmp/bd2ee57b-3629-4e51-8e08-ef483ae40e2b_buggy.java
+++ b/tmp/c1fb27bb-b924-41b0-b66a-82a43b2d7d82_fixed.java
@@ -1,7 +1,43 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+        // special cases handling
+        if (isNaN()) {
+            return field.newNaN(this, this, x);
+        }
+        if (x == 0) {
+            if (sign == -1) {
+                Dfp result = field.newInstance(this);
+                result.sign = (byte) ((x == 0 && sign == -1) ? -1 : 1);
+                result.exp = 0;
+                Arrays.fill(result.mant, 0);
+                result.nans = FINITE;
+                field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
+                return result;
+            } else {
+                return field.getZero();
+            }
+        }
+        if (isInfinite()) {
+            if (x == 0) {
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return field.newNaN(this, this, x);
+            }
+            Dfp result = field.newInstance(this);
+            result.sign = (byte)((x < 0) ? -result.sign : result.sign);
+            return result;
+        }
+
+        // Normal case: use multiplyFast for speed and to preserve sign of zero
+        Dfp result = multiplyFast(Math.abs(x));
+        result.sign = (byte)((x < 0) ? -result.sign : result.sign);
+
+        // If multiplying by -0, preserve sign
+        if (x == 0 && sign == -1) {
+            result.sign = -1;
+        }
+
+        return result;
     }
\ No newline at end of file
