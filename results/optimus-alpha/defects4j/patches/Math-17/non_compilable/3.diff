diff --git a/tmp/6d69eab8-e71d-478f-bdc4-31ee2ec0d1ad_buggy.java b/tmp/f7026fb0-09c9-4603-b729-77abc91b95ce_fixed.java
index 10da689..79d42eb 100644
--- a/tmp/6d69eab8-e71d-478f-bdc4-31ee2ec0d1ad_buggy.java
+++ b/tmp/f7026fb0-09c9-4603-b729-77abc91b95ce_fixed.java
@@ -1,7 +1,48 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+        // Handle special cases according to Dfp rules (NaN, Infinity, zero)
+        if (isNaN() || (x == 0 && (isInfinite() || isNaN()))) {
+            // Multiplying NaN or inf * 0 or 0 * inf -> NaN
+            Dfp result = newInstance(getZero());
+            result.nan = true;
+            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            return result;
+        }
+
+        if (isInfinite()) {
+            if (x > 0) {
+                return copysign(this, false); // inf * positive = inf
+            } else if (x < 0) {
+                return copysign(this, true); // inf * negative = -inf
+            } else { // x == 0 handled above
+                // Already handled above, so unreachable
+                Dfp result = newInstance(getZero());
+                result.nan = true;
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return result;
+            }
+        }
+
+        if (isZero()) {
+            // Keep the sign correctly (handle signed zero)
+            Dfp result = copysign(getZero(), ((x < 0) ^ sign));
+            result.sign = ((x < 0) ^ sign); // "sign" is true for negative
+            return result;
+        }
+
+        if (x == 0) {
+            // Zero with sign handling
+            Dfp result = copysign(getZero(), (sign ^ (x < 0)));
+            result.sign = (sign ^ (x < 0));
+            return result;
+        }
+
+        // For normal numbers (not NaN/Inf/zero), delegate to multiplyFast
+        Dfp result = multiplyFast(Math.abs(x));
+        // Set correct sign if x is negative
+        result.sign = (sign ^ (x < 0));
+        return result;
     }
\ No newline at end of file
