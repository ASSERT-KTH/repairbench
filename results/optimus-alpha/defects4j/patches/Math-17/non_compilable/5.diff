diff --git a/tmp/08e79c07-3d85-423a-a25c-39adaffd4a59_buggy.java b/tmp/a51d6471-514d-491b-beb5-0dbd6505557e_fixed.java
index 10da689..971f3fd 100644
--- a/tmp/08e79c07-3d85-423a-a25c-39adaffd4a59_buggy.java
+++ b/tmp/a51d6471-514d-491b-beb5-0dbd6505557e_fixed.java
@@ -1,7 +1,72 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+        // Handle NaN
+        if (isNaN()) {
+            return newInstance(this).dotrap(DfpField.FLAG_INVALID, "multiply", this, getZero());
+        }
+
+        // Handle zero * infinity
+        if (this.isInfinite() && x == 0) {
+            return newInstance(getField().getZero()).dotrap(DfpField.FLAG_INVALID, "multiply", this, getZero());
+        }
+        if (this.isZero() && (x == Integer.MAX_VALUE || x == Integer.MIN_VALUE)) { // just in case
+            return newInstance(getField().getZero()).dotrap(DfpField.FLAG_INVALID, "multiply", this, getZero());
+        }
+        if (this.isZero() && x == 0) {
+            // preserve sign of zero
+            return this.copySign(this);
+        }
+        if (this.isZero()) {
+            // multiply zero by integer
+            if ((this.sign == -1 && x >= 0) || (this.sign == 1 && x < 0)) {
+                Dfp r = newInstance(getZero());
+                r.sign = -1;
+                return r;
+            } else {
+                return getZero();
+            }
+        }
+        if (this.isInfinite()) {
+            // Multiply infinite by integer
+            if (x == 1) {
+                return this;
+            } else if (x == -1) {
+                Dfp res = newInstance(this);
+                res.sign = -this.sign;
+                return res;
+            } else if (x == 0) {
+                return newInstance(getField().getZero()).dotrap(DfpField.FLAG_INVALID, "multiply", this, getZero());
+            } else {
+                Dfp res = newInstance(this);
+                if (x < 0) {
+                    res.sign = -this.sign;
+                }
+                return res;
+            }
+        }
+        if (x == 0) {
+            Dfp r = newInstance(getZero());
+            r.sign = this.sign == -1 ? -1 : 1;
+            return r;
+        }
+        if (x == 1) {
+            return this;
+        }
+        if (x == -1) {
+            Dfp res = newInstance(this);
+            res.sign = -this.sign;
+            return res;
+        }
+
+        boolean negative = x < 0;
+        int absx = Math.abs(x);
+
+        Dfp result = multiplyFast(absx);
+        if (negative) {
+            result.sign = -result.sign;
+        }
+        return result;
     }
\ No newline at end of file
