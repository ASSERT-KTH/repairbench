diff --git a/tmp/33414fd4-a795-464b-9011-92b2fdb5224d_buggy.java b/tmp/131390ba-5290-4263-b6f5-fe092feecca3_fixed.java
index 10da689..ae35e31 100644
--- a/tmp/33414fd4-a795-464b-9011-92b2fdb5224d_buggy.java
+++ b/tmp/131390ba-5290-4263-b6f5-fe092feecca3_fixed.java
@@ -1,7 +1,42 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+        // Handle special values first: NaN, Infinity, Zero
+        if (isNaN() || field.getZero().getClass().cast(field.getZero()).isNaN()) {
+            return newInstance(field.getZero().nan); // propagate NaN
+        }
+        if (this.isInfinite()) {
+            if (x == 0) {
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return newInstance(field.getZero().nan); // inf * 0 = NaN
+            }
+            // inf * (positive/negative) = inf with sign according to x
+            if ((x > 0 && this.sign == 1) || (x < 0 && this.sign == -1)) {
+                return newInstance(this, this.sign);
+            } else {
+                return newInstance(this, -this.sign);
+            }
+        }
+        if (x == 0) {
+            // Determine the sign of 0 according to this
+            Dfp result = newInstance(field.getZero());
+            result.sign = this.sign;
+            return result;
+        }
+
+        if (this.isZero()) {
+            // 0 * inf already handled above, so just zero
+            Dfp result = newInstance(field.getZero());
+            result.sign = (x < 0) ? -this.sign : this.sign;
+            return result;
+        }
+
+        // Pass correct sign for negative x
+        Dfp result = multiplyFast(Math.abs(x));
+        if (x < 0) {
+            result = result.negate();
+        }
+        return result;
     }
\ No newline at end of file
