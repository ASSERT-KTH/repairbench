diff --git a/tmp/908a5be7-f5c4-4c51-b56b-53194171bf82_buggy.java b/tmp/de0729a9-120f-4e76-9cee-52945884b75e_fixed.java
index 10da689..8856095 100644
--- a/tmp/908a5be7-f5c4-4c51-b56b-53194171bf82_buggy.java
+++ b/tmp/de0729a9-120f-4e76-9cee-52945884b75e_fixed.java
@@ -1,7 +1,45 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
+        // Handle special cases for x == 0, x == 1, x == -1
+        if (x == 0) {
+            Dfp result = newInstance(this);
+            result.sign = (this.sign == -1) ? -1 : 1;
+            result.nans = FINITE;
+            result.mantissa = new int[mantissa.length];
+            result.exp = 0; // convention
+            result.field = this.field;
+            result.iszero = true;
+            if (this.sign == -1 && this.nans == FINITE) {
+                // -0
+                result.sign = -1;
+            }
+            return result;
+        } else if (x == 1) {
+            return this.copy();
+        } else if (x == -1) {
+            Dfp result = this.copy();
+            result.sign = -result.sign;
+            return result;
+        }
+        // handle other cases including infinities and NaN (if this Dfp is special)
+        if (this.isNaN()) {
+            return this;
+        }
+        if (this.isInfinite()) {
+            if (x == 0) {
+                // Infinity * 0 = NaN
+                Dfp result = this.newInstance(this);
+                result.nans = QNAN;
+                this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return result;
+            }
+            Dfp result = this.copy();
+            result.sign = this.sign * (x < 0 ? -1 : 1);
+            return result;
+        }
+        // General case: normal multiplyFast
         return multiplyFast(x);
     }
\ No newline at end of file
