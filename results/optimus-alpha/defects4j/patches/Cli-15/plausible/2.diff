diff --git a/tmp/30879834-0f52-499c-acd8-9b40fead4fd3_buggy.java b/tmp/c58afe7b-3d59-478d-9099-0e52044385b5_fixed.java
index 4e8b037..a2f6992 100644
--- a/tmp/30879834-0f52-499c-acd8-9b40fead4fd3_buggy.java
+++ b/tmp/c58afe7b-3d59-478d-9099-0e52044385b5_fixed.java
@@ -1,20 +1,40 @@
-    public List getValues(final Option option,
-                          List defaultValues) {
-        // initialize the return list
+public List getValues(final Option option, List defaultValues) {
     List valueList = (List) values.get(option);
 
-        // grab the correct default values
-        if ((valueList == null) || valueList.isEmpty()) {
+    // If no user-supplied values, fall back to default values
+    if (valueList == null || valueList.isEmpty()) {
         valueList = defaultValues;
     }
 
-        // augment the list with the default values
-        if ((valueList == null) || valueList.isEmpty()) {
+    // If still no defaults, try global defaults
+    if (valueList == null || valueList.isEmpty()) {
         valueList = (List) this.defaultValues.get(option);
     }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
 
-        return valueList == null ? Collections.EMPTY_LIST : valueList;
+    // Merge valueList with global defaults if user supplied fewer than allowed
+    // or if explicit defaultValues present but not enough entries.
+    // The defaultValues can be a list of multiple defaults for an argument that allows multiple values
+    List originalList = valueList;
+    List optionDefaults = (List) this.defaultValues.get(option);
+    // Defensive copying to avoid mutating original
+    List merged = null;
+    if (optionDefaults != null && !optionDefaults.isEmpty()) {
+        if (valueList == null || valueList.isEmpty()) {
+            merged = new ArrayList(optionDefaults);
+        } else {
+            merged = new ArrayList(valueList);
+            // Only fill up to the number of defaults (or the max allowed by the option)
+            // So, if fewer than defaults are supplied, fill in defaults
+            int maxFill = optionDefaults.size();
+            for (int i = merged.size(); i < maxFill; ++i) {
+                merged.add(optionDefaults.get(i));
+            }
+        }
+    } else {
+        if (valueList != null) {
+            merged = valueList;
+        }
+    }
+
+    return merged == null ? Collections.EMPTY_LIST : merged;
 }
\ No newline at end of file
