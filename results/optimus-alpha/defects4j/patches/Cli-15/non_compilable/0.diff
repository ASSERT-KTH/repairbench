diff --git a/tmp/06175b1f-e50f-48ca-9f09-7d05ebe377cd_buggy.java b/tmp/927c6c6f-e7db-451e-8677-e837132966a0_fixed.java
index 4e8b037..fbb71fc 100644
--- a/tmp/06175b1f-e50f-48ca-9f09-7d05ebe377cd_buggy.java
+++ b/tmp/927c6c6f-e7db-451e-8677-e837132966a0_fixed.java
@@ -1,20 +1,47 @@
 public List getValues(final Option option,
                       List defaultValues) {
     // initialize the return list
     List valueList = (List) values.get(option);
 
-        // grab the correct default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = defaultValues;
+    // copy the values to a new list to avoid side effects
+    List resultList = new ArrayList();
+
+    // add explicit values if any
+    if (valueList != null && !valueList.isEmpty()) {
+        resultList.addAll(valueList);
+    }
+
+    // get the full set of default values for this option, if any, as a List
+    List optionDefaults = (List) this.defaultValues.get(option);
+    if (optionDefaults == null) {
+        // fallback: use defaultValues parameter if provided
+        optionDefaults = defaultValues;
+    }
+
+    // If there are explicit values, and total expected argument count is more.
+    // Add default values from optionDefaults only as many as needed to fill minimum/maximum count.
+    if (optionDefaults != null && !optionDefaults.isEmpty()) {
+        // Determine how many values are expected for this option
+        int minimum = 0, maximum = Integer.MAX_VALUE;
+        if (option instanceof DefaultOption) {
+            Argument arg = ((DefaultOption)option).getArgument();
+            if (arg != null) {
+                minimum = arg.getMinimum();
+                maximum = arg.getMaximum();
+            }
         }
 
-        // augment the list with the default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = (List) this.defaultValues.get(option);
+        // Use maximum limit for trimming defaults for this option
+        int toFill = Math.max(0, maximum - resultList.size());
+        // Only add enough defaults to reach maximum
+        for (int i = 0, added = 0; i < optionDefaults.size() && added < toFill; i++, added++) {
+            // skip defaults already present (i.e., if explicit values cover)
+            resultList.add(optionDefaults.get(i));
+        }
     }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
 
-        return valueList == null ? Collections.EMPTY_LIST : valueList;
+    if (resultList.isEmpty()) {
+        return Collections.EMPTY_LIST;
+    }
+    return resultList;
 }
\ No newline at end of file
