diff --git a/tmp/88956921-63ac-45ad-a97b-acc454ee3078_buggy.java b/tmp/bea5d6c0-5957-4eda-b527-d2b3c6192613_fixed.java
index 4e8b037..0d23291 100644
--- a/tmp/88956921-63ac-45ad-a97b-acc454ee3078_buggy.java
+++ b/tmp/bea5d6c0-5957-4eda-b527-d2b3c6192613_fixed.java
@@ -1,20 +1,54 @@
-    public List getValues(final Option option,
-                          List defaultValues) {
-        // initialize the return list
+public List getValues(final Option option, List defaultValues) {
     List valueList = (List) values.get(option);
 
-        // grab the correct default values
+    // If no values found, use defaultValues if provided
     if ((valueList == null) || valueList.isEmpty()) {
         valueList = defaultValues;
     }
 
-        // augment the list with the default values
+    // If still no values, try the object's defaultValues map
     if ((valueList == null) || valueList.isEmpty()) {
         valueList = (List) this.defaultValues.get(option);
     }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
 
-        return valueList == null ? Collections.EMPTY_LIST : valueList;
+    // If valueList is null or empty at this point, return empty list
+    if (valueList == null || valueList.isEmpty()) {
+        return Collections.EMPTY_LIST;
+    }
+
+    // Now possibly need to supplement valueList with additional default values to reach 'maximum'
+    // Find the argument for this option
+    Argument arg = null;
+    if (option instanceof Option) {
+        arg = option.getArgument();
+    }
+    int maximum = (arg != null) ? arg.getMaximum() : Integer.MAX_VALUE;
+
+    // Gather the full set of default values for the argument, if any
+    List allDefaults = null;
+    if (arg != null) {
+        allDefaults = arg.getDefaultValues();
+    }
+    if (allDefaults == null) {
+        allDefaults = Collections.EMPTY_LIST;
+    }
+
+    // If fewer values than maximum, pad with available default values
+    int missing = maximum - valueList.size();
+
+    // Only create a new list if we need to augment
+    if (missing > 0 && !allDefaults.isEmpty()) {
+        List result = new ArrayList(valueList);
+        int defIndex = 0;
+        // Add missing values from default, skipping any already present
+        while (result.size() < maximum && defIndex < allDefaults.size()) {
+            if (!result.contains(allDefaults.get(defIndex))) {
+                result.add(allDefaults.get(defIndex));
+            }
+            defIndex++;
+        }
+        return result;
+    }
+
+    return valueList;
 }
\ No newline at end of file
