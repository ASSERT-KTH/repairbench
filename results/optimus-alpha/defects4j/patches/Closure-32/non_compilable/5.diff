diff --git a/tmp/ad4e8426-182a-469f-a6dd-e040ace304f0_buggy.java b/tmp/a0254e4e-bd26-4ff2-ba42-5f26410dfb0e_fixed.java
index 4be01ab..69186d0 100644
--- a/tmp/ad4e8426-182a-469f-a6dd-e040ace304f0_buggy.java
+++ b/tmp/a0254e4e-bd26-4ff2-ba42-5f26410dfb0e_fixed.java
@@ -1,115 +1,123 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
+    StringBuilder builder = new StringBuilder();
+
     // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
-    StringBuilder builder = new StringBuilder();
+    // Always preserve leading whitespace on the first line,
+    // but remove trailing to avoid extra spaces.
+    line = trimEnd(line);
     builder.append(line);
 
     state = State.SEARCHING_ANNOTATION;
     token = next();
 
     boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+    boolean firstLine = true;
 
     do {
       switch (token) {
         case STAR:
           if (ignoreStar) {
             // Mark the position after the star as the new start of the line.
           } else {
             // The star is part of the comment.
-            if (builder.length() > 0) {
+            if (builder.length() > 0 && !endsWithNewline(builder)) {
               builder.append(' ');
             }
-
             builder.append('*');
           }
-
           token = next();
           continue;
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
           ignoreStar = true;
+          firstLine = false;
           token = next();
           continue;
 
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
               // When we're capturing a license block, annotations
               // in the block are ok.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
-
-            if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
-            }
+            // For license and @preserve, we want to preserve leading and intermediate whitespace,
+            // but trim trailing; for all others, we trim as before.
+            multilineText = trimEnd(multilineText);
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
+          String lineContent = toString(token);
+          // Only add a space if current builder does not end with a newline,
+          // i.e., we are on the same line.
+          if (builder.length() > 0 && !endsWithNewline(builder)) {
             builder.append(' ');
           }
-          builder.append(toString(token));
+          builder.append(lineContent);
 
           line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
+          // Always trim only trailing whitespace for these blocks.
           line = trimEnd(line);
-          }
-
           builder.append(line);
           token = next();
       }
     } while (true);
   }
+
+  // Helper function to trim trailing whitespace
+  private static String trimEnd(String s) {
+    int len = s.length();
+    int st = 0;
+    while ((st < len) && (s.charAt(len - 1) <= ' ')) {
+      len--;
+    }
+    return s.substring(0, len);
+  }
+
+  // Helper function: does builder end with newline?
+  private static boolean endsWithNewline(StringBuilder sb) {
+    int len = sb.length();
+    return len > 0 && sb.charAt(len - 1) == '\n';
+  }
\ No newline at end of file
