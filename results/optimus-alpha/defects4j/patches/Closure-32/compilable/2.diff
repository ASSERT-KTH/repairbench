diff --git a/tmp/dddc0518-db4a-4c11-9260-2e3d404f7b5f_buggy.java b/tmp/171cfb53-5624-4a78-9718-1f65bd3a792d_fixed.java
index 4be01ab..6803fd2 100644
--- a/tmp/dddc0518-db4a-4c11-9260-2e3d404f7b5f_buggy.java
+++ b/tmp/171cfb53-5624-4a78-9718-1f65bd3a792d_fixed.java
@@ -1,115 +1,102 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
 
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
   StringBuilder builder = new StringBuilder();
-    builder.append(line);
-
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
 
+  boolean firstLine = true;
   boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+  boolean seenAnyToken = false;
+  int endLineno = startLineno;
+  int endCharno = startCharno;
 
   do {
     switch (token) {
       case STAR:
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          // Ignore leading stars on subsequent lines.
         } else {
-            // The star is part of the comment.
           if (builder.length() > 0) {
             builder.append(' ');
           }
-
           builder.append('*');
         }
-
+        ignoreStar = false;
         token = next();
         continue;
 
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
-
         ignoreStar = true;
         token = next();
+        firstLine = false;
         continue;
 
       default:
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
         if (token == JsDocToken.EOC ||
             token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
             (token == JsDocToken.ANNOTATION &&
              option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
 
-            if (option != WhitespaceOption.PRESERVE) {
+          // Only trim end (right) whitespace for PRESERVE,
+          // otherwise trim both ends for compatibility with license blocks, etc.
+          if (option == WhitespaceOption.PRESERVE) {
+            multilineText = trimEnd(multilineText);
+          } else {
             multilineText = multilineText.trim();
           }
 
-            int endLineno = stream.getLineno();
-            int endCharno = stream.getCharno();
+          endLineno = stream.getLineno();
+          endCharno = stream.getCharno();
 
           if (multilineText.length() > 0) {
             jsdocBuilder.markText(multilineText, startLineno, startCharno,
                 endLineno, endCharno);
           }
 
           return new ExtractionInfo(multilineText, token);
         }
 
-          if (builder.length() > 0) {
+        if (!firstLine && builder.length() > 0) {
+          // For lines after the first: always preserve leading whitespace as is,
+          // including spaces between tokens and text.
+          builder.append(' ');
+        } else if (firstLine && builder.length() > 0) {
           builder.append(' ');
         }
+
+        // Add the token text.
         builder.append(toString(token));
 
-          line = stream.getRemainingJSDocLine();
+        // For the current line, append the rest of the line verbatim (for ASCII art, etc.)
+        String line = stream.getRemainingJSDocLine();
 
-          if (option != WhitespaceOption.PRESERVE) {
+        if (option == WhitespaceOption.PRESERVE) {
+          // Do not trim at all.
+        } else {
           line = trimEnd(line);
         }
 
         builder.append(line);
+
+        seenAnyToken = true;
         token = next();
+        firstLine = false;
     }
   } while (true);
 }
\ No newline at end of file
