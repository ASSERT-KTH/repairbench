diff --git a/tmp/71c31918-3c01-4621-ae1f-da65a9aeef4e_buggy.java b/tmp/887b5825-e043-4e29-86db-f9fa6f192511_fixed.java
index 0dbce00..66309e4 100644
--- a/tmp/71c31918-3c01-4621-ae1f-da65a9aeef4e_buggy.java
+++ b/tmp/887b5825-e043-4e29-86db-f9fa6f192511_fixed.java
@@ -1,33 +1,39 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property != null) {
         JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
         if (format != null) {
-
             // Simple case first: serialize as numeric timestamp?
             JsonFormat.Shape shape = format.getShape();
-                if (shape.isNumeric()) {
+            if (shape != JsonFormat.Shape.ANY && shape.isNumeric()) {
                 return withFormat(Boolean.TRUE, null);
             }
 
-                if (format.getShape() == JsonFormat.Shape.STRING) {
+            if ((shape == JsonFormat.Shape.STRING)
+                    || (format.hasPattern() || format.hasLocale() || format.hasTimeZone())) {
+                // If explicit pattern/locale/timezone, use string format even if shape is ANY
                 TimeZone tz = format.getTimeZone();
                 final String pattern = format.hasPattern()
                                 ? format.getPattern()
                                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
                 final Locale loc = format.hasLocale()
                                 ? format.getLocale()
                                 : serializers.getLocale();
                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                 if (tz == null) {
                     tz = serializers.getTimeZone();
                 }
                 df.setTimeZone(tz);
                 return withFormat(Boolean.FALSE, df);
             }
+
+            // If shape is explicitly numeric and not handled above, use numeric
+            if (shape.isNumeric()) {
+                return withFormat(Boolean.TRUE, null);
+            }
         }
     }
     return this;
 }
\ No newline at end of file
