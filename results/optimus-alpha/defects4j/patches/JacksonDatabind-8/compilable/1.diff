diff --git a/tmp/8d68310a-dda9-41c0-a55c-5da17380bf06_buggy.java b/tmp/fc77f7b1-7cff-437f-8663-8596d4b41440_fixed.java
index c9da1b7..2edb029 100644
--- a/tmp/8d68310a-dda9-41c0-a55c-5da17380bf06_buggy.java
+++ b/tmp/fc77f7b1-7cff-437f-8663-8596d4b41440_fixed.java
@@ -1,33 +1,29 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // If both are explicit AND are not exactly the same thing (by reference), it's a conflict
+            if (oldOne.getClass() == newOne.getClass() && !oldOne.equals(newOne)) {
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
+            // If we get here, old and new are the same (e.g. JDK StringBuilder), so just return/keep existing
+            return;
+        }
+        // one more thing: ok to override in sub-class, but only explicit ones are problematic, and checked above
+        // so in any case just fall through
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
