diff --git a/tmp/378e2e0d-bf7a-44b7-9b74-531bddb8ddda_buggy.java b/tmp/7df32347-894e-4aea-9546-110e6b4d6dff_fixed.java
index c9da1b7..56a8101 100644
--- a/tmp/378e2e0d-bf7a-44b7-9b74-531bddb8ddda_buggy.java
+++ b/tmp/7df32347-894e-4aea-9546-110e6b4d6dff_fixed.java
@@ -1,33 +1,29 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        // If there is already an explicit creator, check if we have a real conflict
+        if ((_explicitCreators & mask) != 0) {
             if (!explicit) {
+                // Already had explicit creator, ignore non-explicit one
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            // both explicit: verify for genuine conflict (must be distinct methods/constructors)
+            if (oldOne.getClass() == newOne.getClass()
+                    && oldOne.getMember() == newOne.getMember()) {
+                // Same creator, ignore
+                return;
             }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
+        // If neither is explicit, or old is not explicit and new is explicit, we always override
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
