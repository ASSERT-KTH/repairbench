diff --git a/tmp/781fdf15-82b4-4fb2-a052-16d18426dafc_buggy.java b/tmp/b235fdaa-02b4-4f16-9576-9290846268af_fixed.java
index c9da1b7..1adfacc 100644
--- a/tmp/781fdf15-82b4-4fb2-a052-16d18426dafc_buggy.java
+++ b/tmp/b235fdaa-02b4-4f16-9576-9290846268af_fixed.java
@@ -1,33 +1,33 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // Only error if real duplicates
+            if (oldOne.getClass() == newOne.getClass() &&
+                oldOne.getMember().equals(newOne.getMember())) {
+                // ignore, it's the same member (constructor/creator)
+                // (do nothing, will fall through to storing newOne, which is equal)
+            } else {
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
         }
+        // one more thing: ok to override in sub-class
+        // (databind#667): avoid one particular class of bogus problems
+        // If not explicitly handled above, continue to use new one as candidate
+    }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
