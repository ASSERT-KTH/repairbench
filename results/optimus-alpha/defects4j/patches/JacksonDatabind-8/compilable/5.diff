diff --git a/tmp/b1d45467-b212-4f70-b9a8-7442c2fb1158_buggy.java b/tmp/77182d9f-54ef-4dca-8717-3dede40b53f3_fixed.java
index c9da1b7..990d71f 100644
--- a/tmp/b1d45467-b212-4f70-b9a8-7442c2fb1158_buggy.java
+++ b/tmp/77182d9f-54ef-4dca-8717-3dede40b53f3_fixed.java
@@ -1,33 +1,38 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
 
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
         }
         
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
             // [databind#667]: avoid one particular class of bogus problems
-
+            // Only consider it a conflict if creators are not the same method/constructor
+            if (!oldOne.getMember().equals(newOne.getMember())) {
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            }
+            // else, exactly same member, allow: occurs for JDK types like StringBuilder
+            // silently replace or ignore
+            if (explicit) {
+                _explicitCreators |= mask;
+            }
+            _creators[typeIndex] = _fixAccess(newOne);
+            return;
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
