diff --git a/tmp/ca130b0d-c10e-40af-abbc-78f35093e5ba_buggy.java b/tmp/0309ffc8-f01c-49b0-ab62-229e33129d8f_fixed.java
index c9da1b7..424181f 100644
--- a/tmp/ca130b0d-c10e-40af-abbc-78f35093e5ba_buggy.java
+++ b/tmp/0309ffc8-f01c-49b0-ab62-229e33129d8f_fixed.java
@@ -1,33 +1,31 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
         }
-
         // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
+        // Change: don't compare by class only, compare actual underlying method/constructor
+        if (oldOne.getMember() != null && newOne.getMember() != null) {
+            if (oldOne.getMember().equals(newOne.getMember())) {
+                // Same physical member (constructor or method), so just return, don't throw
+                return;
+            }
+        }
         // [databind#667]: avoid one particular class of bogus problems
-
         throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                 +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
-            }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
