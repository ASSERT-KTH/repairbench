diff --git a/tmp/6e027696-32b7-4a3e-8edb-ebf345bb4314_buggy.java b/tmp/2d7a659a-db41-4087-9a20-68d15468f4a9_fixed.java
index c9da1b7..9d3160d 100644
--- a/tmp/6e027696-32b7-4a3e-8edb-ebf345bb4314_buggy.java
+++ b/tmp/2d7a659a-db41-4087-9a20-68d15468f4a9_fixed.java
@@ -1,33 +1,41 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
-
+                if (oldOne.getMember() != null && newOne.getMember() != null
+                        && oldOne.getMember().equals(newOne.getMember())) {
+                    // Same physical constructor/method, okay to override.
+                    // Update if new one is explicit.
+                } else {
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                }
+            }
+        } else {
+            if (oldOne.getClass() == newOne.getClass()) {
+                if (oldOne.getMember() != null && newOne.getMember() != null
+                        && oldOne.getMember().equals(newOne.getMember())) {
+                    // same member, ok
+                } else {
+                    // otherwise ignore: prefer explicit or "earlier"
+                }
+            }
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
