diff --git a/tmp/73be0967-9e1d-435e-b891-f807d32d022c_buggy.java b/tmp/ff729a16-5c82-4b10-8fb4-210275f2f8dd_fixed.java
index e69de29..76b4d64 100644
--- a/tmp/73be0967-9e1d-435e-b891-f807d32d022c_buggy.java
+++ b/tmp/ff729a16-5c82-4b10-8fb4-210275f2f8dd_fixed.java
@@ -0,0 +1,31 @@
+@Override
+public List<Connection.KeyVal> formData() {
+    // ensure that only inputs currently attached to this form element are considered
+    List<Connection.KeyVal> data = new ArrayList<>();
+    Elements elements = elements(); // gets all associated input/textarea/select within this FormElement
+    for (Element el : elements) {
+        if (el.parent() == null) continue; // skip detached elements
+        if (el.hasAttr("name")) {
+            String type = el.attr("type");
+            String tagName = el.tagName();
+            if ("select".equals(tagName)) {
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element option : options) {
+                    data.add(HttpConnection.KeyVal.create(el.attr("name"), option.val()));
+                    set = true;
+                }
+                if (!set) {
+                    Element option = el.selectFirst("option");
+                    if (option != null)
+                        data.add(HttpConnection.KeyVal.create(el.attr("name"), option.val()));
+                }
+            } else if (!"radio".equalsIgnoreCase(type) && !"checkbox".equalsIgnoreCase(type)) {
+                data.add(HttpConnection.KeyVal.create(el.attr("name"), el.val()));
+            } else if (el.hasAttr("checked")) {
+                data.add(HttpConnection.KeyVal.create(el.attr("name"), el.val()));
+            }
+        }
+    }
+    return data;
+}
\ No newline at end of file
