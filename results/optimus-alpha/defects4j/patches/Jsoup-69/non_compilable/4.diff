diff --git a/tmp/62e9212c-4722-494d-9aec-f5f1159334ea_buggy.java b/tmp/2ff6b2eb-1b67-4bca-b241-51a22d9c76c4_fixed.java
index e69de29..85286a8 100644
--- a/tmp/62e9212c-4722-494d-9aec-f5f1159334ea_buggy.java
+++ b/tmp/2ff6b2eb-1b67-4bca-b241-51a22d9c76c4_fixed.java
@@ -0,0 +1,31 @@
+@Override
+public List<Connection.KeyVal> formData() {
+    // Remove invalid elements and update elements list before returning form data.
+    elements().removeIf(el -> !el.hasParent() || !el.parents().contains(this));
+    List<Connection.KeyVal> data = new ArrayList<>();
+    for (Element el : elements()) {
+        if (el.tag().isFormSubmittable() && !el.hasAttr("disabled")) {
+            String name = el.attr("name");
+            if (name.length() == 0) continue;
+            String type = el.attr("type");
+            if ("select".equals(el.tagName())) {
+                Elements options = el.select("option[selected]");
+                boolean set = false;
+                for (Element option : options) {
+                    data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    set = true;
+                }
+                if (!set) {
+                    Element option = el.selectFirst("option");
+                    if (option != null)
+                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                }
+            } else if (!"radio".equalsIgnoreCase(type) && !"checkbox".equalsIgnoreCase(type)) {
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            } else if (el.hasAttr("checked")) {
+                data.add(HttpConnection.KeyVal.create(name, el.val()));
+            }
+        }
+    }
+    return data;
+}
\ No newline at end of file
