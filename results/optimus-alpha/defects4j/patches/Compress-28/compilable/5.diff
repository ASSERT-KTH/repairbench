diff --git a/tmp/5cce13d4-46c2-4db1-9b9a-0a63dbb60c02_buggy.java b/tmp/42015b68-91e8-4ed6-9f85-7ae5da1efe5e_fixed.java
index 0f439b3..6cd3957 100644
--- a/tmp/5cce13d4-46c2-4db1-9b9a-0a63dbb60c02_buggy.java
+++ b/tmp/42015b68-91e8-4ed6-9f85-7ae5da1efe5e_fixed.java
@@ -1,38 +1,28 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
     numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+    int totalRead = is.read(buf, offset, numToRead);
 
     if (totalRead == -1) {
+        // We've hit EOF in the stream before the expected entry size - truncated entry!
+        if (entryOffset < entrySize) {
+            throw new IOException("Truncated TAR archive entry");
+        }
         hasHitEOF = true;
+        return -1;
     } else {
         entryOffset += totalRead;
+        count(totalRead);
     }
 
     return totalRead;
 }
\ No newline at end of file
