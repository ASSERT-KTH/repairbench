diff --git a/tmp/a53dccbf-987e-41bb-a2d4-70a53379c426_buggy.java b/tmp/5a485f77-784a-4385-a5a7-4f32f1cb7917_fixed.java
index 0f439b3..cbf5525 100644
--- a/tmp/a53dccbf-987e-41bb-a2d4-70a53379c426_buggy.java
+++ b/tmp/5a485f77-784a-4385-a5a7-4f32f1cb7917_fixed.java
@@ -1,38 +1,34 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
     int totalRead = 0;
 
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
     numToRead = Math.min(numToRead, available());
 
+    if (numToRead == 0) {
+        return 0;
+    }
+
     totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
 
     if (totalRead == -1) {
+        // If we've not reached full entry size, but underlying stream hit EOF: truncated entry
+        if (entryOffset < entrySize) {
+            throw new IOException("Truncated TAR archive: entry size expected=" + entrySize + "; read=" + entryOffset);
+        }
         hasHitEOF = true;
+        return -1;
     } else {
+        count(totalRead);
         entryOffset += totalRead;
     }
 
     return totalRead;
 }
\ No newline at end of file
