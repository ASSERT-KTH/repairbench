diff --git a/tmp/a51f141e-6e4a-4c5f-b503-3a69772a1990_buggy.java b/tmp/fda42e98-651b-44c3-8138-cad7807c03d3_fixed.java
index 57c40b2..d7cc1c8 100644
--- a/tmp/a51f141e-6e4a-4c5f-b503-3a69772a1990_buggy.java
+++ b/tmp/fda42e98-651b-44c3-8138-cad7807c03d3_fixed.java
@@ -1,27 +1,33 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    } else if (n.getJSType() != null && parent.isAssign() && n == parent.getFirstChild()) {
+      // Do not check the property access type on the left side of assignment,
+      // but ONLY if it is the assignment target (lhs of =), following the right context.
+      // This avoids masking missing property warnings.
+      // Just set the type to UNKNOWN or let ensureTyped handle it.
+    } else {
+      // Even if expectNotNullOrUndefined fails, checkPropertyAccess should still be called 
+      // to trigger appropriate verification and warnings about missing props.
+      boolean valid = validator.expectNotNullOrUndefined(t, n, childType,
+          "No properties on this expression", getNativeType(OBJECT_TYPE));
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
