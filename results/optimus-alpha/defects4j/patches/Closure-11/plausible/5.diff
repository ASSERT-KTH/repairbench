diff --git a/tmp/ee4c4e88-4d6f-47c6-976e-d002a12667b5_buggy.java b/tmp/774657d7-bb83-4a6d-8b85-5270eab7ad60_fixed.java
index 57c40b2..30d16f0 100644
--- a/tmp/ee4c4e88-4d6f-47c6-976e-d002a12667b5_buggy.java
+++ b/tmp/774657d7-bb83-4a6d-8b85-5270eab7ad60_fixed.java
@@ -1,27 +1,33 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
   // obj.prop or obj.method()
   // Lots of types can appear on the left, a call to a void function can
   // never be on the left. getPropertyType will decide what is acceptable
   // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
   if (childType.isDict()) {
     report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
+  } else if (parent.isAssign() && parent.getFirstChild() == n) {
+    // Only skip checking property existence for the LHS of an assignment,
+    // but still check for 'null' or 'undefined' receivers.
+    if (validator.expectNotNullOrUndefined(t, n, childType,
+        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      // Do NOT check property access existence when this is the LHS of an assignment.
+      // This is the correct behavior (see https://github.com/google/closure-compiler/issues/810)
+    }
   } else if (validator.expectNotNullOrUndefined(t, n, childType,
       "No properties on this expression", getNativeType(OBJECT_TYPE))) {
     checkPropertyAccess(childType, property.getString(), t, n);
   }
   ensureTyped(t, n);
 }
\ No newline at end of file
