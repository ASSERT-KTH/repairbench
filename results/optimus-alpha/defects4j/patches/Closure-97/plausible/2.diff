diff --git a/tmp/2b2520f0-9383-4e29-898d-c17d0c85be50_buggy.java b/tmp/e5c378a6-b81b-4c20-bbfc-84f04cf0c857_fixed.java
index 1126687..3686758 100644
--- a/tmp/2b2520f0-9383-4e29-898d-c17d0c85be50_buggy.java
+++ b/tmp/e5c378a6-b81b-4c20-bbfc-84f04cf0c857_fixed.java
@@ -1,65 +1,71 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
   if (left.getType() == Token.NUMBER &&
       right.getType() == Token.NUMBER) {
 
-      double result;
     double lval = left.getDouble();
     double rval = right.getDouble();
 
     // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+    // a 32-bit range for LSH or RSH, since the user likely does not intend that.
+    // For URSH, JavaScript treats its operands as unsigned 32-bit.
+    boolean isUrsh = n.getType() == Token.URSH;
+
+    if (!isUrsh && !(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
       error(BITWISE_OPERAND_OUT_OF_RANGE, left);
       return n;
     }
 
     // only the lower 5 bits are used when shifting, so don't do anything
     // if the shift amount is outside [0,32)
     if (!(rval >= 0 && rval < 32)) {
       error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
       return n;
     }
 
     // Convert the numbers to ints
     int lvalInt = (int) lval;
     if (lvalInt != lval) {
       error(FRACTIONAL_BITWISE_OPERAND, left);
       return n;
     }
 
     int rvalInt = (int) rval;
     if (rvalInt != rval) {
       error(FRACTIONAL_BITWISE_OPERAND, right);
       return n;
     }
 
+    double result;
     switch (n.getType()) {
       case Token.LSH:
         result = lvalInt << rvalInt;
         break;
       case Token.RSH:
         result = lvalInt >> rvalInt;
         break;
       case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+        // In JavaScript, >>> produces a uint32 value, which (for negative numbers) is >= 2^31.
+        // In Java, >>> always produces a signed int in the range [0, 2^31-1], so we must
+        // promote to long, apply the mask, and convert to double for correct JS behavior.
+        // JavaScript: (-1) >>> 0 === 4294967295
+        long lvalUint32 = lvalInt & 0xFFFFFFFFL;
+        long r = (lvalUint32 >>> rvalInt) & 0xFFFFFFFFL;
+        result = (double) r;
         break;
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
     }
 
     Node newNumber = Node.newNumber(result);
     n.getParent().replaceChild(n, newNumber);
     reportCodeChange();
 
     return newNumber;
   }
 
   return n;
 }
\ No newline at end of file
