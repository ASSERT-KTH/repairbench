diff --git a/tmp/4cbe1cef-059b-4a3d-a522-2d66e992eed1_buggy.java b/tmp/812608d8-dbf7-4c58-88f4-9461db126f49_fixed.java
index 4b163f6..302cab5 100644
--- a/tmp/4cbe1cef-059b-4a3d-a522-2d66e992eed1_buggy.java
+++ b/tmp/812608d8-dbf7-4c58-88f4-9461db126f49_fixed.java
@@ -1,28 +1,18 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+    long remaining = numToSkip;
+    while (remaining > 0) {
+        long skipped = input.skip(remaining);
         if (skipped == 0) {
+            // Try to read a single byte to see if we're at EOF
+            int b = input.read();
+            if (b == -1) {
+                // EOF reached
                 break;
             }
-            numToSkip -= skipped;
+            remaining--;
+        } else {
+            remaining -= skipped;
         }
-            
-        return available - numToSkip;
+    }
+    return numToSkip - remaining;
 }
\ No newline at end of file
