diff --git a/tmp/852e6cbc-21f5-4ad0-9a8b-ad85eff494b5_buggy.java b/tmp/566fe5f4-b716-427a-9fad-a1ff0db3e30c_fixed.java
index 4b163f6..596bbf7 100644
--- a/tmp/852e6cbc-21f5-4ad0-9a8b-ad85eff494b5_buggy.java
+++ b/tmp/566fe5f4-b716-427a-9fad-a1ff0db3e30c_fixed.java
@@ -1,28 +1,19 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
+    byte[] buffer = new byte[2048];
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
+            // Try to read and discard a byte to check for EOF.
+            int min = (int) Math.min(numToSkip, buffer.length);
+            int bytesRead = input.read(buffer, 0, min);
+            if (bytesRead == -1) {
                 break;
             }
+            numToSkip -= bytesRead;
+        } else {
             numToSkip -= skipped;
         }
-            
+    }
     return available - numToSkip;
 }
\ No newline at end of file
