diff --git a/tmp/e5eedfd2-0a02-42d3-bf96-08edc9ca0cdc_buggy.java b/tmp/963d8bd3-601c-48db-978c-0e6a32878c56_fixed.java
index e087f95..bc2981e 100644
--- a/tmp/e5eedfd2-0a02-42d3-bf96-08edc9ca0cdc_buggy.java
+++ b/tmp/963d8bd3-601c-48db-978c-0e6a32878c56_fixed.java
@@ -1,53 +1,78 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
+    // Special-case: input buffer contains all NULs
+    boolean allNuls = true;
     for (int i = start; i < end; i++) {
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (buffer[i] != 0) {
+            allNuls = false;
             break;
         }
+    }
+    if (allNuls) {
+        return 0L;
+    }
 
+    // All fields must contain a trailing space or NUL (may have additional)
+    // Both last two bytes must be spaces or NULs; or,
+    // must have at least one NUL or space at end, and not multiple NULs/trailers after content chars
+    // Accept both patterns: NUL,space or space,NUL or both NUL (checked above), or both space
+    // Stricter: at least one NUL or space at buffer[end-1] and possibly [end-2], allow both
+    
+    // Check for trailer (at least last byte must be space or NUL)
+    if ((buffer[end - 1] != (byte) ' ') && (buffer[end - 1] != 0)) {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
+    }
+    // If length > 2: possible to have both
+    if (length > 2 && (buffer[end - 2] != (byte) ' ') && (buffer[end - 2] != 0)
+            && !(buffer[end - 1] == (byte) ' ' || buffer[end - 1] == 0)) {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
+    }
+
+    int i = start;
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    while (i < end && (buffer[i] == (byte) ' ')) {
+        i++;
     }
-                if (currentByte == (byte) ' ') {
+
+    // Octal digits: must be '0'..'7'
+    int octalStart = i;
+    while (i < end) {
+        byte currentByte = buffer[i];
+
+        // Stop at the first trailer
+        if (currentByte == 0 || currentByte == (byte) ' ') {
             break;
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        stillPadding = false;
+        i++;
     }
 
+    // We must now be at trailing chars: all remaining must be space/NUL
+    for (; i < end; i++) {
+        byte b = buffer[i];
+        if (b != 0 && b != (byte) ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, b));
+        }
+    }
+
+    // All strict: not allowed to have embedded spaces/NULs in digits
+    // (i.e., "07 1" or "07\0001" should be rejected)
+
+    // If no octal digits, treat as zero (but if only padding already filtered above)
+    // (ie, "   \0" is legal and yields 0L)
+
     return result;
 }
\ No newline at end of file
