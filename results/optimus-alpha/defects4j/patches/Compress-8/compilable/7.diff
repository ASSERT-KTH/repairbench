diff --git a/tmp/4259f450-0d64-49b0-8a3a-3f16be4441b1_buggy.java b/tmp/fba284d9-aa1e-48a0-a923-1a18fd72c332_fixed.java
index e087f95..a113835 100644
--- a/tmp/4259f450-0d64-49b0-8a3a-3f16be4441b1_buggy.java
+++ b/tmp/fba284d9-aa1e-48a0-a923-1a18fd72c332_fixed.java
@@ -1,53 +1,55 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes, got " + length);
+    }
     long result = 0;
     boolean stillPadding = true;
-        int     end = offset + length;
     int start = offset;
+    int end = offset + length;
 
+    // Check all zeros: if all bytes are zero, return 0L
+    boolean allNuls = true;
     for (int i = start; i < end; i++) {
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (buffer[i] != 0) {
+            allNuls = false;
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
     }
-                if (currentByte == (byte) ' ') {
-                break;
+    if (allNuls) {
+        return 0L;
+    }
+
+    int trailerIndex = end - 1;
+    // Allow for a trailing extra space or NUL
+    if (buffer[trailerIndex] == 0 || buffer[trailerIndex] == (byte)' ') {
+        // good, trailer is at end
+    } else if (length > 2 && (buffer[trailerIndex - 1] == 0 || buffer[trailerIndex - 1] == (byte)' ')) {
+        trailerIndex--;
+        if (!(buffer[trailerIndex] == 0 || buffer[trailerIndex] == (byte)' ')) {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, buffer[trailerIndex]));
         }
+    } else {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
     }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    // Now parse from offset to one before trailerIndex
+    int i = start;
+    // skip leading spaces
+    while (i < trailerIndex && (buffer[i] == (byte)' ' || buffer[i] == 0)) {
+        i++;
+    }
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+    for (; i < trailerIndex; i++) {
+        byte currentByte = buffer[i];
+        if (currentByte == (byte)' ' || currentByte == 0) {
+            // if we haven't reached the trailer, but hit a space or NUL, it's invalid
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+        }
         if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
     }
 
     return result;
 }
\ No newline at end of file
