diff --git a/tmp/34e0b6de-9b59-4000-87d0-87012ff198c8_buggy.java b/tmp/61e5b19b-ed24-4030-bc41-1794a595101e_fixed.java
index e087f95..05639b1 100644
--- a/tmp/34e0b6de-9b59-4000-87d0-87012ff198c8_buggy.java
+++ b/tmp/61e5b19b-ed24-4030-bc41-1794a595101e_fixed.java
@@ -1,53 +1,68 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean foundTrailer = false;
 
-        for (int i = start; i < end; i++){
+    // Check for all NULs
+    boolean allNuls = true;
+    for (int i = offset; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (currentByte != 0) {
+            allNuls = false;
             break;
         }
+    }
+    if (allNuls) {
+        return 0L;
+    }
 
+    int i = start;
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
+    while (i < end && (buffer[i] == (byte) ' ')) {
+        i++;
     }
+    // Now, buffer[i] is first non-space, or i==end
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    // All NULs case has already been handled
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    boolean seenDigit = false;
+    for (; i < end; i++) {
+        final byte currentByte = buffer[i];
+        // Detect trailer
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            foundTrailer = true;
+            // make sure remaining bytes are all NUL or space (may be up to 1 more NUL/space allowed)
+            for (int j = i; j < end; j++) {
+                if (buffer[j] != 0 && buffer[j] != (byte)' ') {
                     throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, start, buffer[j]));
                 }
+            }
+            break;
+        }
+        if (currentByte >= '0' && currentByte <= '7') {
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            stillPadding = false;
+            seenDigit = true;
+            continue;
+        }
+        // Only allow '0' as padding when stillPadding is true
+        if (currentByte == '0' && stillPadding) {
+            continue;
+        }
+        // Otherwise, invalid character (including embedded space or NUL)
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
+    }
+    if (!foundTrailer) {
+        throw new IllegalArgumentException("Missing trailing space or NUL in the buffer");
+    }
+    if (!seenDigit && !stillPadding) {
+        throw new IllegalArgumentException("No digits found in buffer");
     }
-
     return result;
 }
\ No newline at end of file
