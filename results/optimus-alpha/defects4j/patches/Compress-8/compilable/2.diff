diff --git a/tmp/09e238f5-28af-4122-ba4c-2709f6758452_buggy.java b/tmp/70d2a732-06db-449d-ac12-3adb89dce8ea_fixed.java
index e087f95..4591f1a 100644
--- a/tmp/09e238f5-28af-4122-ba4c-2709f6758452_buggy.java
+++ b/tmp/70d2a732-06db-449d-ac12-3adb89dce8ea_fixed.java
@@ -1,53 +1,57 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Must be at least 2 bytes (room for value + trailer) per javadoc/test
+    if (buffer == null || length < 2 || offset < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Buffer too small for parseOctal");
+    }
+
+    boolean allNuls = true;
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Must have trailing space or NUL at buffer[offset+length-1]
+    final byte trailer = buffer[offset + length - 1];
+    if (trailer != (byte)' ' && trailer != 0) {
+        throw new IllegalArgumentException("Trailer is not space or NUL");
+    }
+
+    // If length >= 3, allow an additional trailing space/NUL, which means that
+    // the actual value is up to length-2, trailer at length-2 or length-1
+    int end = offset + length;
+    int last = offset + length - 1;
+
+    // skip possible _additional_ trailing space/NUL
+    if (length >= 3 && (buffer[last] == (byte)' ' || buffer[last] == 0) &&
+        (buffer[last - 1] == (byte)' ' || buffer[last - 1] == 0)) {
+        last = last - 1;
+    }
+
+    // Now last points at the trailer (space/NUL), so parse up to last-1 (inclusive)
     long result = 0;
     boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
+    int i = offset;
+    // skip leading spaces
+    while (i < last && (buffer[i] == (byte)' ' || buffer[i] == 0)) {
+        i++;
+    }
+    for (; i < last; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+        // Check for embedded space/NUL in value (invalid)
+        if (currentByte == (byte)' ' || currentByte == 0) {
+            throw new IllegalArgumentException("Embedded space or NUL in value");
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
     }
-
+    // No value parsed? Only trailing padding? That is ok only if value was all NULs, which is already handled above.
     return result;
 }
\ No newline at end of file
