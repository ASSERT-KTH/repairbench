diff --git a/tmp/3bb0d580-c63d-4acf-a8c6-985d0c8c5db8_buggy.java b/tmp/636b1b9d-325a-4d42-9c51-f2a42ad652dd_fixed.java
index e087f95..273c9a1 100644
--- a/tmp/3bb0d580-c63d-4acf-a8c6-985d0c8c5db8_buggy.java
+++ b/tmp/636b1b9d-325a-4d42-9c51-f2a42ad652dd_fixed.java
@@ -1,53 +1,96 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Length must be at least 2 bytes
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes, but was: " + length);
+    }
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    int i = start;
 
-        for (int i = start; i < end; i++){
+    // Check for all NULs case
+    boolean allNuls = true;
+    for (int j = start; j < end; j++) {
+        if (buffer[j] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Main parse loop
+    int digits = 0;
+    for (; i < end; i++) {
         final byte currentByte = buffer[i];
+        // NUL encountered
         if (currentByte == 0) {
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        // Skip leading spaces and zeros (padding)
+        if (currentByte == (byte) ' ' || currentByte == (byte) '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
                 break;
             }
         }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        // Only octal digits allowed
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        digits++;
+    }
+
+    // There must be at least one octal digit parsed, and
+    // at least one trailing space or NUL
+    // Check for invalid embedded NULs or spaces after first octal digit
+    if (digits == 0) {
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, (byte) 0));
+    }
+
+    // After digits, must end with space or NUL (trailing characters)
+    boolean foundTrailer = false;
+    // i is the index directly after the last parsed byte
+    if (i < end) {
+        byte trailingByte = buffer[i];
+        if (trailingByte == 0 || trailingByte == (byte) ' ') {
+            foundTrailer = true;
+            // Check for only one extra padding (valid: one or two trailer space/NULs)
+            if (i + 1 < end) {
+                byte t2 = buffer[i + 1];
+                if (!((t2 == 0) || (t2 == (byte) ' '))) {
+                    // Any other content after two trailer padding bytes is illegal
+                    for (int k = i + 1; k < end; ++k) {
+                        if (buffer[k] != 0 && buffer[k] != (byte)' ') {
+                            throw new IllegalArgumentException(
+                                    exceptionMessage(buffer, offset, length, start, buffer[k]));
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    // The buffer cannot contain further non-space/non-NULs after digit sequence
+    if (!foundTrailer) {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, start, buffer[Math.min(i, end - 1)]));
+    }
+
+    // Remaining bytes after two trailers must be all space or NUL (else embedded end-of-field)
+    for (int k = i + 2; k < end; ++k) {
+        if (buffer[k] != 0 && buffer[k] != (byte) ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, buffer[k]));
+        }
     }
 
     return result;
 }
\ No newline at end of file
