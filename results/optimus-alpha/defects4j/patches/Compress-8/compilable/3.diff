diff --git a/tmp/8e2fb034-1c89-4713-80b0-51830c403f63_buggy.java b/tmp/d1109232-c79b-45c8-98b6-08e6fddc97af_fixed.java
index e087f95..2726b20 100644
--- a/tmp/8e2fb034-1c89-4713-80b0-51830c403f63_buggy.java
+++ b/tmp/d1109232-c79b-45c8-98b6-08e6fddc97af_fixed.java
@@ -1,53 +1,66 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException(
+                "Length of octal field must be at least 2, got " + length);
+    }
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
+    // Check if all bytes are NULs; if so, return 0L
+    boolean allNuls = true;
     for (int i = start; i < end; i++) {
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (buffer[i] != 0) {
+            allNuls = false;
             break;
         }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Identify last non-padding (space/NUL) byte for the trailer
+    int last = end - 1;
+    // Allow up to two trailers (last + penultimate)
+    int foundTrailer = 0;
+    while (last >= start && (buffer[last] == 0 || buffer[last] == (byte) ' ')) {
+        foundTrailer++;
+        last--;
+        if (foundTrailer == 2) {
+            break;
+        }
+    }
+    // After removing up to 2 trailers,
+    // the next byte must be a non-padding and the number of trailers must be >=1
+    if (foundTrailer == 0) {
+        throw new IllegalArgumentException(
+            "Missing trailing space or NUL in the octal field");
+    }
+    int parseEnd = last + 1; // exclusive
 
+    int i = start;
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    while (i < parseEnd && (buffer[i] == (byte) ' ' || buffer[i] == 0)) {
+        i++;
     }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+    // Now parse the octal digits
+    for (; i < parseEnd; i++) {
+        final byte currentByte = buffer[i];
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
-
+    // Make sure there are no embedded spaces or NULs.
+    // Already checked by structure above (since we Skipped leading and checked trailers),
+    // but double-check that parseEnd...end (the trailers) are all valid padding bytes.
+    for (int j = parseEnd; j < end; j++) {
+        if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, j, buffer[j]));
+        }
+    }
     return result;
 }
\ No newline at end of file
