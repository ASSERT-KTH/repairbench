diff --git a/tmp/405c80d2-e4f2-45a6-bc27-7f0309bb45ab_buggy.java b/tmp/65a16904-42e9-444d-b09b-8536e17a71c3_fixed.java
index e087f95..3c7cf84 100644
--- a/tmp/405c80d2-e4f2-45a6-bc27-7f0309bb45ab_buggy.java
+++ b/tmp/65a16904-42e9-444d-b09b-8536e17a71c3_fixed.java
@@ -1,53 +1,89 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length of octal field must be at least 2 bytes");
+    }
+
+    final int end = offset + length;
+    // Check for all NULs: allow and return 0L
+    boolean allNuls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
     long result = 0;
     boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
+    int i = offset;
+    int trailerPos = -1;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+    // Strip leading spaces and zeros
+    for (; i < end; i++) {
+        byte b = buffer[i];
+        if (b == (byte)' ' || b == (byte)'0') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        break;
+    }
+
+    // No digits present after padding
+    if (i >= end) {
+        throw new IllegalArgumentException("No valid octal digits found");
+    }
+
+    boolean digitRead = false;
+    // Parse digits. Must be only '0'..'7'
+    for (; i < end; i++) {
+        byte b = buffer[i];
+
+        if (b >= '0' && b <= '7') {
+            result = (result << 3) + (b - '0');
+            digitRead = true;
+        } else if (b == (byte)' ' || b == 0) {
+            trailerPos = i;
+            break;
+        } else {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, i, b));
+        }
+    }
+
+    if (!digitRead) {
+        throw new IllegalArgumentException("No octal digits found");
+    }
+
+    // Must have at least one trailing space or NUL (i.e., trailerPos >= 0)
+    if (trailerPos == -1) {
+        throw new IllegalArgumentException("Octal value missing trailing space or NUL");
+    }
+
+    // After the first trailer byte, only allow more trailing spaces or NULs
+    for (int j = trailerPos; j < end; j++) {
+        byte b = buffer[j];
+        if (b != (byte)' ' && b != 0) {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, j, b));
+        }
+    }
+
+    // Check for embedded trailer inside the digits
+    for (int k = i - 1; k >= offset; k--) {
+        byte b = buffer[k];
+        if (b == (byte)' ' || b == 0) {
+            // Embedded trailer found before the digit block ends
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, k, b));
+        } else if (b >= '0' && b <= '7') {
+            break; // Last digit found, OK
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
