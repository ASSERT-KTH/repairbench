diff --git a/tmp/05bec031-ad48-4b6a-a3b1-4b78c97805d4_buggy.java b/tmp/c9533cf7-165c-44ac-aa02-9d3b38c0314a_fixed.java
index e087f95..0eda9cf 100644
--- a/tmp/05bec031-ad48-4b6a-a3b1-4b78c97805d4_buggy.java
+++ b/tmp/c9533cf7-165c-44ac-aa02-9d3b38c0314a_fixed.java
@@ -1,53 +1,65 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
+    if (buffer == null || buffer.length < offset + length) {
+        throw new IllegalArgumentException("Buffer too small for given offset and length");
+    }
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
+    // Check if all bytes are NUL
+    boolean allNuls = true;
     for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Must have valid trailer (last or second to last char must be space or NUL, and after content only padding allowed)
+    int trailerIdx = end - 1;
+    // Skip trailing padding (NUL/space)
+    while (trailerIdx >= start && (buffer[trailerIdx] == 0 || buffer[trailerIdx] == (byte) ' ')) {
+        trailerIdx--;
+    }
+    // trailerIdx now at last non-padding byte; the next must be the trailer
+    int trailerPos = trailerIdx + 1;
+    if (trailerPos >= end || 
+        !((buffer[trailerPos] == 0) || (buffer[trailerPos] == (byte) ' '))) {
+        throw new IllegalArgumentException("Missing trailing space or NUL in octal header");
+    }
+
+    for (int i = start; i < trailerPos; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        // Skip leading spaces and leading zeros
         if (stillPadding) {
+            if (currentByte == (byte) ' ' || currentByte == (byte) '0') {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        }
+        // After padding, only octal digits permitted
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
+    // After first non-padding digit processed, all rest till trailer must be digits, and no embedded space or NUL
+    // (already checked by loop, as we break on seeing trailer)
+    // (trailer may be more than one char; that's fine)
+
+    // After trailer, only NUL or space may follow (trailing NULs/spaces already skipped in the check above)
+
+    // If embedded space or NUL found before trailer, the loop would skip digits, causing malformed parse,
+    // which is already caught.
+
     return result;
 }
\ No newline at end of file
