diff --git a/tmp/e62404bd-c9af-4dbe-b124-54909fad4a62_buggy.java b/tmp/e3aca002-73c7-4c17-84bd-3eec006a65a4_fixed.java
index e087f95..cd73590 100644
--- a/tmp/e62404bd-c9af-4dbe-b124-54909fad4a62_buggy.java
+++ b/tmp/e3aca002-73c7-4c17-84bd-3eec006a65a4_fixed.java
@@ -1,53 +1,61 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean foundTrailer = false;
+    boolean allNuls = true;
+
+    // Check for all NULs
+    for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+        // End if we hit a trailer
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            foundTrailer = true;
+
+            // Possible extra trailer allowed; just validate
+            // There should be no more data after the first trailer except more trailers
+            for (int j = i + 1; j < end; j++) {
+                if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+                    throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, j, buffer[j]));
+                }
+            }
             break;
         }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        // Skip leading space and zero (' ', '0')
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == (byte) '0')) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Must be octal digit
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, i, currentByte));
         }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    if (!foundTrailer) {
+        throw new IllegalArgumentException("Missing trailing NUL or space");
     }
 
     return result;
 }
\ No newline at end of file
