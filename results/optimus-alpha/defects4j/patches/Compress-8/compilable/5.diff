diff --git a/tmp/453c2a34-e4bb-46bb-b9ea-6f5584b4d9d2_buggy.java b/tmp/4a4da80b-fcba-47a2-b59d-43c48d7deb26_fixed.java
index e087f95..c785f18 100644
--- a/tmp/453c2a34-e4bb-46bb-b9ea-6f5584b4d9d2_buggy.java
+++ b/tmp/4a4da80b-fcba-47a2-b59d-43c48d7deb26_fixed.java
@@ -1,53 +1,63 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("length must be at least 2");
+    }
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    int i = start;
 
-        for (int i = start; i < end; i++){
+    // Check if all NULs
+    boolean allNuls = true;
+    for (int j = start; j < end; j++) {
+        if (buffer[j] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // The buffer must end in a space or NUL (or have the next after that as space/NUL)
+    if (buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
+    }
+
+    // Second last allowed to be space/nul, but not required.
+    // Now parse
+    for (; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            // Only trailing NULs or spaces allowed. Rest must be digits
+            // Any embedded NUL or space (i.e., not at trailing position) is invalid
+            for (int j = i; j < end; j++) {
+                if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, j, buffer[j]));
+                }
+            }
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
+    // If we never saw a non-padding character, check if trailing space/NULs are valid for all NUL case above
+    if (stillPadding) {
+        return 0L;
+    }
+
+    // There must be at least one trailing space or NUL, which the logic above ensures
+
     return result;
 }
\ No newline at end of file
