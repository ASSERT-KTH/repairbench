diff --git a/tmp/2bfe4fc8-db5f-4b69-a5d1-f89d212490c1_buggy.java b/tmp/4698c689-47d5-40b3-b0b7-d79001e866fd_fixed.java
index d27c40c..93ffef2 100644
--- a/tmp/2bfe4fc8-db5f-4b69-a5d1-f89d212490c1_buggy.java
+++ b/tmp/4698c689-47d5-40b3-b0b7-d79001e866fd_fixed.java
@@ -1,49 +1,124 @@
 /** Compute two arguments arc tangent of a derivative structure.
  * @param y array holding the first operand
  * @param yOffset offset of the first operand in its array
  * @param x array holding the second operand
  * @param xOffset offset of the second operand in its array
  * @param result array where result must be stored (for
  * two arguments arc tangent the result array <em>cannot</em>
  * be the input array)
  * @param resultOffset offset of the result in its array
  */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    // Extract the function value of y and x (the first element in the arrays)
+    final double y0 = y[yOffset];
+    final double x0 = x[xOffset];
+
+    // Special cases from java.lang.Math#atan2 for correct sign and zero handling
+    if (Double.isNaN(y0) || Double.isNaN(x0)) {
+        result[resultOffset] = Double.NaN;
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = Double.NaN;
+        }
+        return;
+    }
+    if (Double.isInfinite(y0)) {
+        if (Double.isInfinite(x0)) {
+            // Both infinite
+            if (y0 > 0) {
+                result[resultOffset] = x0 > 0 ? FastMath.PI / 4 : 3 * FastMath.PI / 4;
+            } else {
+                result[resultOffset] = x0 > 0 ? -FastMath.PI / 4 : -3 * FastMath.PI / 4;
+            }
+        } else {
+            result[resultOffset] = y0 > 0 ? FastMath.PI / 2 : -FastMath.PI / 2;
+        }
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+    if (Double.isInfinite(x0)) {
+        if (x0 > 0) {
+            result[resultOffset] = y0 == 0.0 ? (Math.copySign(0.0, y0)) : 0.0;
+        } else {
+            result[resultOffset] = y0 >= 0.0 ? FastMath.PI : -FastMath.PI;
+        }
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+    // Explicit handling for signed zeros, according to IEEE 754 and Math.atan2
+    if (y0 == 0.0) {
+        if (x0 == 0.0) {
+            // Both are zero, result is defined by the signs
+            // (+0, +0) => +0
+            // (-0, +0) => -0
+            // (+0, -0) => +pi
+            // (-0, -0) => -pi
+            // Distinguish by raw bits because of signed zero
+            if (Double.doubleToRawLongBits(x0) == Double.doubleToRawLongBits(+0.0)) {
+                // x +0.0
+                result[resultOffset] = y0;
+            } else {
+                // x -0.0
+                result[resultOffset] = Math.copySign(FastMath.PI, y0);
+            }
+            for (int i = 1; i < getSize(); ++i) {
+                result[resultOffset + i] = 0.0;
+            }
+            return;
+        } else if (x0 > 0.0) {
+            // y == 0, x > 0 => result == y (preserving sign of y)
+            result[resultOffset] = y0;
+            for (int i = 1; i < getSize(); ++i) {
+                result[resultOffset + i] = 0.0;
+            }
+            return;
+        } else { // x < 0
+            // y == 0, x < 0 => result == pi with sign of y
+            result[resultOffset] = Math.copySign(FastMath.PI, y0);
+            for (int i = 1; i < getSize(); ++i) {
+                result[resultOffset + i] = 0.0;
+            }
+            return;
+        }
+    }
+
+    // Now handle normal derivatives, general case for non-special values
+
     // compute r = sqrt(x^2+y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
+    if (x0 >= 0) {
 
         // compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
 
     } else {
 
         // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
         result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+                (y0 <= 0 ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
             result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
         }
 
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
