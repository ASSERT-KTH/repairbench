diff --git a/tmp/10d978b8-36b6-43dd-a07b-d770b8fd9580_buggy.java b/tmp/93e054e3-b7c2-4309-89cd-3cea580def4c_fixed.java
index d27c40c..07a87a9 100644
--- a/tmp/10d978b8-36b6-43dd-a07b-d770b8fd9580_buggy.java
+++ b/tmp/93e054e3-b7c2-4309-89cd-3cea580def4c_fixed.java
@@ -1,49 +1,150 @@
     /** Compute two arguments arc tangent of a derivative structure.
      * @param y array holding the first operand
      * @param yOffset offset of the first operand in its array
      * @param x array holding the second operand
      * @param xOffset offset of the second operand in its array
      * @param result array where result must be stored (for
      * two arguments arc tangent the result array <em>cannot</em>
      * be the input array)
      * @param resultOffset offset of the result in its array
      */
     public void atan2(final double[] y, final int yOffset,
                       final double[] x, final int xOffset,
                       final double[] result, final int resultOffset) {
 
+        // Handle special cases to get the correct sign for zeros and infinities
+        double y0 = y[yOffset];
+        double x0 = x[xOffset];
+
+        // Handle NaNs
+        if (Double.isNaN(y0) || Double.isNaN(x0)) {
+            result[resultOffset] = Double.NaN;
+            for (int i = 1; i < getSize(); ++i) {
+                result[resultOffset + i] = Double.NaN;
+            }
+            return;
+        }
+
+        if (y0 == 0.0) {
+            // y == 0.0
+            if (x0 == 0.0) {
+                // Both y and x are +/-0.0
+                double res = FastMath.copySign(0.0, y0);
+                // Determine the correct value based on sign of y0 and x0
+                if (FastMath.copySign(1.0, y0) == 1.0 && FastMath.copySign(1.0, x0) == 1.0) {
+                    // +0.0, +0.0
+                    res = 0.0;
+                } else if (FastMath.copySign(1.0, y0) == 1.0 && FastMath.copySign(1.0, x0) == -1.0) {
+                    // +0.0, -0.0
+                    res = FastMath.PI;
+                } else if (FastMath.copySign(1.0, y0) == -1.0 && FastMath.copySign(1.0, x0) == 1.0) {
+                    // -0.0, +0.0
+                    res = -0.0;
+                } else /*if (FastMath.copySign(1.0, y0) == -1.0 && FastMath.copySign(1.0, x0) == -1.0)*/ {
+                    // -0.0, -0.0
+                    res = -FastMath.PI;
+                }
+                result[resultOffset] = res;
+                // Derivative is NaN if both input are zero (derivative is not defined)
+                for (int i = 1; i < getSize(); ++i) {
+                    result[resultOffset + i] = Double.NaN;
+                }
+                return;
+            } else if (Double.isInfinite(x0)) {
+                // y == 0.0, x infinite
+                if (x0 > 0.0) {
+                    // x is +infinity
+                    result[resultOffset] = FastMath.copySign(0.0, y0);
+                    for (int i = 1; i < getSize(); ++i) {
+                        result[resultOffset + i] = 0.0;
+                    }
+                    return;
+                } else {
+                    // x is -infinity
+                    result[resultOffset] = FastMath.copySign(FastMath.PI, y0);
+                    for (int i = 1; i < getSize(); ++i) {
+                        result[resultOffset + i] = 0.0;
+                    }
+                    return;
+                }
+            }
+        }
+        if (Double.isInfinite(y0)) {
+            if (Double.isInfinite(x0)) {
+                // Both are infinite
+                if (y0 > 0.0) {
+                    if (x0 > 0.0) {
+                        result[resultOffset] = FastMath.PI / 4;
+                    } else {
+                        result[resultOffset] = 3 * FastMath.PI / 4;
+                    }
+                } else {
+                    if (x0 > 0.0) {
+                        result[resultOffset] = -FastMath.PI / 4;
+                    } else {
+                        result[resultOffset] = -3 * FastMath.PI / 4;
+                    }
+                }
+                for (int i = 1; i < getSize(); ++i) {
+                    result[resultOffset + i] = 0.0;
+                }
+                return;
+            }
+            // y infinite, x finite
+            result[resultOffset] = FastMath.copySign(FastMath.PI / 2, y0);
+            for (int i = 1; i < getSize(); ++i) {
+                result[resultOffset + i] = 0.0;
+            }
+            return;
+        }
+        if (Double.isInfinite(x0)) {
+            // x infinite, y finite (y != 0 because handled above)
+            if (x0 > 0.0) {
+                result[resultOffset] = FastMath.copySign(0.0, y0);
+            } else {
+                result[resultOffset] = FastMath.copySign(FastMath.PI, y0);
+            }
+            for (int i = 1; i < getSize(); ++i) {
+                result[resultOffset + i] = 0.0;
+            }
+            return;
+        }
+
         // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
         double[] tmp2 = new double[getSize()];
         multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
+        if (x0 >= 0) {
 
             // compute atan2(y, x) = 2 atan(y / (r + x))
             add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
             for (int i = 0; i < tmp2.length; ++i) {
                 result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
             }
 
         } else {
 
             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
             result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+                    ((y0 < 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
             for (int i = 1; i < tmp2.length; ++i) {
                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
             }
 
         }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+        // Special handling for signed zero results (when y == 0)
+        if (y0 == 0.0 && x0 > 0.0) {
+            // tan2(+0, +) = +0, tan2(-0, +) = -0
+            result[resultOffset] = FastMath.copySign(0.0, y0);
+        }
     }
\ No newline at end of file
