diff --git a/tmp/5cdb6944-4dd5-489b-8914-430935127da8_buggy.java b/tmp/cba4a6bc-8a20-4561-87b6-dc080f25b500_fixed.java
index 70cafe0..265def2 100644
--- a/tmp/5cdb6944-4dd5-489b-8914-430935127da8_buggy.java
+++ b/tmp/cba4a6bc-8a20-4561-87b6-dc080f25b500_fixed.java
@@ -1,18 +1,33 @@
 /**
  * Checks whether the given column is basic.
  * @param col index of the column to check
  * @return the row that the variable is basic in.  null if the column is not basic
  */
 private Integer getBasicRow(final int col) {
     Integer row = null;
+    int nonZeroCount = 0;
     for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
         if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon)) {
                 if (row == null) {
                     row = i;
                 } else {
+                    return null; // More than one 1.0 entry found => not basic
+                }
+            } else {
+                return null; // Not a unit column
+            }
+            nonZeroCount++;
+        }
+    }
+    if (row == null) {
         return null;
     }
+    // Check if all other entries in this column are zero
+    for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
+        if (i != row && !MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            return null;
         }
     }
     return row;
 }
\ No newline at end of file
