diff --git a/tmp/785a925e-fd80-431a-bccc-b1bf152f7732_buggy.java b/tmp/2b6c4f2a-3f14-4e68-89e2-17c91b800b25_fixed.java
index 3effef5..839ad5e 100644
--- a/tmp/785a925e-fd80-431a-bccc-b1bf152f7732_buggy.java
+++ b/tmp/2b6c4f2a-3f14-4e68-89e2-17c91b800b25_fixed.java
@@ -1,73 +1,80 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                // creator parameters all assigned
                 t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
-                    while (t == JsonToken.FIELD_NAME) {
+                // At this point, t points to the next field name (or END_OBJECT)
+                // We must buffer the rest of the object into the tokens buffer so they are processed as unwrapped.
+                // However, we also need to buffer whatever property not handled yet
+                // But: need to include the current field as well (the one right after the creator properties)
+                for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+                    String name = p.getCurrentName();
                     p.nextToken();
+                    tokens.writeFieldName(name);
                     tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
                 }
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
         // "any property"?
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
     // We hit END_OBJECT, so:
     Object bean;
     // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    tokens.writeEndObject();
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
