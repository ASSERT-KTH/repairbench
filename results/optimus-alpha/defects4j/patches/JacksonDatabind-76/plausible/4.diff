diff --git a/tmp/3f9cf834-692f-4aaf-980e-930f5d37f471_buggy.java b/tmp/cb14f6b3-a661-42f3-abe3-6c987c2f5446_fixed.java
index 3effef5..83c8649 100644
--- a/tmp/3f9cf834-692f-4aaf-980e-930f5d37f471_buggy.java
+++ b/tmp/cb14f6b3-a661-42f3-abe3-6c987c2f5446_fixed.java
@@ -1,73 +1,120 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    Object bean = null;
+
+    // This flag tells us if we already built the bean (i.e. hit full creator)
+    boolean beanCreated = false;
+
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
+                // Creator constructor is satisfied with all its parameters, create POJO!
                 try {
                     bean = creator.build(ctxt, buffer);
+                    beanCreated = true;
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
+                // Now that we have the bean, continue reading ALL remaining fields:
+                t = p.nextToken();
                 while (t == JsonToken.FIELD_NAME) {
+                    String remPropName = p.getCurrentName();
                     p.nextToken();
+                    SettableBeanProperty prop = _beanProperties.find(remPropName);
+                    if (prop != null) {
+                        // assign to POJO property directly
+                        try {
+                            prop.deserializeAndSet(p, ctxt, bean);
+                        } catch (Exception e) {
+                            wrapAndThrow(e, bean, remPropName, ctxt);
+                        }
+                    } else if (_ignorableProps != null && _ignorableProps.contains(remPropName)) {
+                        handleIgnoredProperty(p, ctxt, bean, remPropName);
+                    } else {
+                        tokens.writeFieldName(remPropName);
                         tokens.copyCurrentStructure(p);
+                        // "any property"?
+                        if (_anySetter != null) {
+                            try {
+                                _anySetter.deserializeAndSet(p, ctxt, bean, remPropName);
+                            } catch (Exception e) {
+                                wrapAndThrow(e, bean, remPropName, ctxt);
+                            }
+                        }
+                    }
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
+            // If bean has been created, set property directly; otherwise, buffer value
+            if (beanCreated) {
+                try {
+                    prop.deserializeAndSet(p, ctxt, bean);
+                } catch (Exception e) {
+                    wrapAndThrow(e, bean, propName, ctxt);
+                }
+            } else {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            }
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
         // "any property"?
         if (_anySetter != null) {
+            if (beanCreated) {
+                try {
+                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);
+                } catch (Exception e) {
+                    wrapAndThrow(e, bean, propName, ctxt);
+                }
+            } else {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
+    }
 
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+    // We hit END_OBJECT, so if we do NOT have a bean yet, create it
+    if (!beanCreated) {
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+    }
+    tokens.writeEndObject();
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
