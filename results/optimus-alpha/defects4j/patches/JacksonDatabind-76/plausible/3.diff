diff --git a/tmp/f709078b-413c-4b21-b840-c732f72ca0b7_buggy.java b/tmp/a1bf6e8a-2bfe-4a30-98bd-2f9259594168_fixed.java
index 3effef5..9cb3622 100644
--- a/tmp/f709078b-413c-4b21-b840-c732f72ca0b7_buggy.java
+++ b/tmp/a1bf6e8a-2bfe-4a30-98bd-2f9259594168_fixed.java
@@ -1,73 +1,98 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+    // We must buffer all fields and not build bean until all creator params are set.
+    Object bean = null;
+
+    // track which creator properties have been set
+    while (t == JsonToken.FIELD_NAME) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
+            // assignParameter returns true if all Creator properties are set
+            Object value = creatorProp.deserialize(p, ctxt);
+            if (buffer.assignParameter(creatorProp, value)) {
+                // All creator properties assigned, build bean
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
                 }
+                t = p.nextToken();
+                // finish reading the rest of the fields and buffer them
                 while (t == JsonToken.FIELD_NAME) {
+                    String remName = p.getCurrentName();
                     p.nextToken();
+                    // try to find bean property
+                    SettableBeanProperty prop = _beanProperties.find(remName);
+                    if (prop != null) {
+                        prop.deserializeAndSet(p, ctxt, bean);
+                    } else if (_ignorableProps != null && _ignorableProps.contains(remName)) {
+                        handleIgnoredProperty(p, ctxt, handledType(), remName);
+                    } else {
+                        tokens.writeFieldName(remName);
                         tokens.copyCurrentStructure(p);
+                        // any setter
+                        if (_anySetter != null) {
+                            _anySetter.deserializeAndSet(p, ctxt, bean, remName);
+                        }
+                    }
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
+            // Not all creator params set yet, just continue
+            t = p.nextToken();
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
+            t = p.nextToken();
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            t = p.nextToken();
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
+            t = p.nextToken();
             continue;
         }
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
         // "any property"?
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
+        t = p.nextToken();
     }
 
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+    // If we didn't hit build during property loop (creator params weren't all met in time)
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    tokens.writeEndObject();
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
