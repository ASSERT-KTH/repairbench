diff --git a/tmp/27e716ce-5b82-41f1-808f-2bd92c40037e_buggy.java b/tmp/ac4446e8-4c68-4909-a038-a6464d8dd6c2_fixed.java
index 2ce28b5..9d009c4 100644
--- a/tmp/27e716ce-5b82-41f1-808f-2bd92c40037e_buggy.java
+++ b/tmp/ac4446e8-4c68-4909-a038-a6464d8dd6c2_fixed.java
@@ -1,72 +1,78 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      * 
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
+        int signatureLength = 0;
+        try {
             in.mark(signature.length);
-        try {
-            int signatureLength = in.read(signature);
+            signatureLength = in.read(signature);
             in.reset();
+            if (signatureLength == -1) {
+                throw new ArchiveException("No Archiver found for the stream signature");
+            }
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
             signatureLength = in.read(dumpsig);
             in.reset();
+            if (signatureLength == -1) {
+                throw new ArchiveException("No Archiver found for the stream signature");
+            }
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
             signatureLength = in.read(tarheader);
             in.reset();
+            if (signatureLength == -1) {
+                throw new ArchiveException("No Archiver found for the stream signature");
+            }
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
                 try {
+                    // COMPRESS-191 - verify the header checksum and entry
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+                    if (tais.getNextEntry() != null) {
+                        // The header parses as a tar entry, so it's a tar archive
                         return new TarArchiveInputStream(in);
+                    }
+                    // If getNextEntry returns null, it's not a valid tar archive
                 } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
+                    // Ignore and fall through to error
                 }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
