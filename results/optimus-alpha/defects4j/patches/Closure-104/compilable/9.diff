diff --git a/tmp/f630bc9a-6709-4cb9-85c1-bf034ec81224_buggy.java b/tmp/0c6f1f16-7627-4e3b-bde0-3195c821e2fa_fixed.java
index b36b2a9..4740b93 100644
--- a/tmp/f630bc9a-6709-4cb9-85c1-bf034ec81224_buggy.java
+++ b/tmp/0c6f1f16-7627-4e3b-bde0-3195c821e2fa_fixed.java
@@ -1,26 +1,34 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
     for (JSType alternate : alternates) {
       if (alternate.isSubtype(that)) {
         builder.addAlternate(alternate);
       }
     }
 
     if (that instanceof UnionType) {
       for (JSType otherAlternate : ((UnionType) that).alternates) {
         if (otherAlternate.isSubtype(this)) {
           builder.addAlternate(otherAlternate);
         }
       }
     } else if (that.isSubtype(this)) {
       builder.addAlternate(that);
     }
     JSType result = builder.build();
     if (result != null) {
       return result;
     } else if (this.isObject() && that.isObject()) {
+      // Fix: If both are object, return NO_OBJECT_TYPE, not NO_TYPE
+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
+    } else if (!this.isObject() && !that.isObject()) {
+      // Fix: If neither is object, return NO_TYPE
+      return getNativeType(JSTypeNative.NO_TYPE);
+    } else if (this.isObject() || that.isObject()) {
+      // Fix: If one is object and the other is not, return NO_OBJECT_TYPE
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
+      // Fallback (should not be reached)
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
\ No newline at end of file
