diff --git a/tmp/36cfe420-9670-4f4a-91c2-284c1e8b7c65_buggy.java b/tmp/28f34b0b-0822-4a2a-a0b5-19cde0dc7fb7_fixed.java
index 31f58d4..ce43218 100644
--- a/tmp/36cfe420-9670-4f4a-91c2-284c1e8b7c65_buggy.java
+++ b/tmp/28f34b0b-0822-4a2a-a0b5-19cde0dc7fb7_fixed.java
@@ -1,101 +1,94 @@
-    /**
-     * <p>An implementation of {@link Parser}'s abstract
-     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
-     *
-     * <p>The following are the rules used by this flatten method.
-     * <ol>
-     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
-     *  burst anymore of <code>arguments</code> entries, just add each
-     *  successive entry without further processing.  Otherwise, ignore
-     *  <code>stopAtNonOption</code>.</li>
-     *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
-     *  just add the entry to the list of processed tokens</li>
-     *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
-     *  just add the entry to the list of processed tokens</li>
-     *  <li>if the current <code>arguments</code> entry is two characters
-     *  in length and the first character is "<b>-</b>" then check if this
-     *  is a valid {@link Option} id.  If it is a valid id, then add the
-     *  entry to the list of processed tokens and set the current {@link Option}
-     *  member.  If it is not a valid id and <code>stopAtNonOption</code>
-     *  is true, then the remaining entries are copied to the list of 
-     *  processed tokens.  Otherwise, the current entry is ignored.</li>
-     *  <li>if the current <code>arguments</code> entry is more than two
-     *  characters in length and the first character is "<b>-</b>" then
-     *  we need to burst the entry to determine its constituents.  For more
-     *  information on the bursting algorithm see 
-     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
-     *  <li>if the current <code>arguments</code> entry is not handled 
-     *  by any of the previous rules, then the entry is added to the list
-     *  of processed tokens.</li>
-     * </ol>
-     * </p>
-     *
-     * @param options The command line {@link Options}
-     * @param arguments The command line arguments to be parsed
-     * @param stopAtNonOption Specifies whether to stop flattening
-     * when an non option is found.
-     * @return The flattened <code>arguments</code> String array.
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     init();
     this.options = options;
 
-        // an iterator for the command line tokens
+    boolean eatTheRest = false;
     Iterator iter = Arrays.asList(arguments).iterator();
 
-        // process each command line token
     while (iter.hasNext())
     {
-            // get the next command line token
         String token = (String) iter.next();
 
-            // handle long option --foo or --foo=bar
-            if (token.startsWith("--"))
+        if (eatTheRest)
         {
-                if (token.indexOf('=') != -1)
+            tokens.add(token);
+        }
+        else if (token.startsWith("--"))
+        {
+            int pos = token.indexOf('=');
+            if (pos != -1)
+            {
+                String opt = token.substring(0, pos);
+                if (!options.hasOption(opt))
                 {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(token);
                 }
                 else
                 {
+                    tokens.add(opt);
+                    tokens.add(token.substring(pos + 1));
+                }
+            }
+            else
+            {
+                if (!options.hasOption(token))
+                {
+                    eatTheRest = stopAtNonOption;
                     tokens.add(token);
                 }
+                else
+                {
+                    tokens.add(token);
+                }
+            }
         }
-
-            // single hyphen
         else if ("-".equals(token))
         {
             tokens.add(token);
         }
         else if (token.startsWith("-"))
         {
             if (token.length() == 2)
+            {
+                if (!options.hasOption(token))
+                {
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(token);
+                }
+                else
                 {
                     processOptionToken(token, stopAtNonOption);
                 }
+            }
             else if (options.hasOption(token))
             {
                 tokens.add(token);
             }
-                // requires bursting
             else
             {
                 burstToken(token, stopAtNonOption);
+                if (stopAtNonOption)
+                {
+                    // burstToken may not consume the whole token as a valid option,
+                    // so check if we should stop processing.
+                    eatTheRest = true;
+                }
             }
         }
         else if (stopAtNonOption)
         {
-                process(token);
+            eatTheRest = true;
+            tokens.add(token);
         }
         else
         {
             tokens.add(token);
         }
 
         gobble(iter);
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
