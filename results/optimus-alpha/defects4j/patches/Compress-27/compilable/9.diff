diff --git a/tmp/d3c63f15-78b2-4bd1-90fc-a4e78a4577b9_buggy.java b/tmp/44dca22f-f313-4a4b-871a-d03f90359557_fixed.java
index 81872ca..0d7a51f 100644
--- a/tmp/d3c63f15-78b2-4bd1-90fc-a4e78a4577b9_buggy.java
+++ b/tmp/44dca22f-f313-4a4b-871a-d03f90359557_fixed.java
@@ -1,70 +1,54 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long    result = 0;
     int     end = offset + length;
     int     start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
+    // all NULs or all spaces or any combo -> 0
+    boolean allNullOrSpace = true;
+    for (int i = start; i < end; i++) {
+        if (buffer[i] != 0 && buffer[i] != ' ') {
+            allNullOrSpace = false;
+            break;
+        }
+    }
+    if (allNullOrSpace) {
+        return 0L;
+    }
+
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
-            }
     }
 
     // Trim all trailing NULs and spaces.
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
     // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+    while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
-            trailer = buffer[end - 1];
     }
     if (start == end) {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+        return 0L; // All were spaces or NULs; treat as 0
     }
 
     for ( ;start < end; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
