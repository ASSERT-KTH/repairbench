diff --git a/tmp/c1e62b15-b66f-491c-8f28-c980d872e208_buggy.java b/tmp/842154a1-ea61-4b2e-b55a-cf3c62c4fb62_fixed.java
index 85e6a42..803cfca 100644
--- a/tmp/c1e62b15-b66f-491c-8f28-c980d872e208_buggy.java
+++ b/tmp/842154a1-ea61-4b2e-b55a-cf3c62c4fb62_fixed.java
@@ -1,50 +1,65 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
+
+    // To avoid ConcurrentModificationException or lost mappings, collect updates
+    Map<String, ZipArchiveEntry> namesToAdd = new HashMap<>();
+    Set<String> namesToRemove = new HashSet<>();
+
+    for (ZipArchiveEntry ze : new ArrayList<>(entries.keySet())) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
             if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
-                    nameMap.put(ze.getName(), ze);
+                // Only remove the old name if it still maps to 'ze'
+                if (nameMap.get(orig) == ze) {
+                    namesToRemove.add(orig);
                 }
+                namesToAdd.put(ze.getName(), ze);
             }
         }
     }
+    // Do update outside the loop to avoid ConcurrentModificationException
+    for (String name : namesToRemove) {
+        nameMap.remove(name);
+    }
+    for (Map.Entry<String, ZipArchiveEntry> e : namesToAdd.entrySet()) {
+        nameMap.put(e.getKey(), e.getValue());
+    }
+}
\ No newline at end of file
