diff --git a/tmp/044576d2-b06e-4156-874b-b7bab3785b03_buggy.java b/tmp/f0a5ecd5-defe-4465-bd7c-04f3ff5d4fdf_fixed.java
index 5bc9804..2ec354c 100644
--- a/tmp/044576d2-b06e-4156-874b-b7bab3785b03_buggy.java
+++ b/tmp/f0a5ecd5-defe-4465-bd7c-04f3ff5d4fdf_fixed.java
@@ -1,85 +1,81 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
     throws IOException
 {
     final ExternalTypeHandler ext = _externalTypeIdHandler.start();
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                // first: let's check to see if this might be part of value with external type id:
-                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
-                //   since it is not the bean
+            // First: external type id handling
             if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
-                    ;
+                // ext handled it
             } else {
-                    // Last creator property to set?
+                // If the value for this creator property is of type id (not value), buffer it for later assign after seeing value property
+                // But if this is the value property, assign as normal
                 if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                        t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
+                    // creator can build now, finish loop
+                    t = p.nextToken(); // move to FIELD_NAME/END_OBJECT after value
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         continue; // never gets here
                     }
-                        // if so, need to copy all remaining tokens into buffer
-                        while (t == JsonToken.FIELD_NAME) {
-                            p.nextToken(); // to skip name
+                    // Copy all remaining tokens
+                    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+                        p.nextToken();
                         tokens.copyCurrentStructure(p);
-                            t = p.nextToken();
                     }
                     if (bean.getClass() != _beanType.getRawClass()) {
-                            // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
-                            //   it's too complicated, so bail out
                         throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
                     }
                     return ext.complete(p, ctxt, bean);
                 }
             }
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
         // external type id (or property that depends on it)?
         if (ext.handlePropertyValue(p, ctxt, propName, null)) {
             continue;
         }
-            /* As per [JACKSON-313], things marked as ignorable should not be
-             * passed to any setter
-             */
+        // ignorable
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
-            // "any property"?
+        // any setter
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT; resolve the pieces:
+    // If not enough creator parameters, we may need to complete with buffered values
     try {
-            return ext.complete(p, ctxt, buffer, creator);
+        Object bean = creator.build(ctxt, buffer);
+        return ext.complete(p, ctxt, bean);
     } catch (Exception e) {
         wrapInstantiationProblem(e, ctxt);
         return null; // never gets here
     }
 }
\ No newline at end of file
