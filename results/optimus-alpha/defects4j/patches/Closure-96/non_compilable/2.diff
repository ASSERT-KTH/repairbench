diff --git a/tmp/e9c1bce8-6d42-4eac-b097-fa3f3be923e4_buggy.java b/tmp/795fb890-5dfc-4793-ac3c-ce6300b61e78_fixed.java
index e0ecec8..fea58f6 100644
--- a/tmp/e9c1bce8-6d42-4eac-b097-fa3f3be923e4_buggy.java
+++ b/tmp/795fb890-5dfc-4793-ac3c-ce6300b61e78_fixed.java
@@ -1,35 +1,56 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+
+    // Flag to indicate if the function is var_args style
+    boolean isVarArgs = functionType.isVarArgs();
+
+    // Get the last parameter node (if any) for use with extra arguments (var_args)
+    Node varArgsParameter = null;
+    if (isVarArgs) {
+      // Find the last parameter node, which is the var_args parameter.
+      while (parameters.hasNext()) {
+        varArgsParameter = parameters.next();
+      }
+      // Reset parameters iterator
+      parameters = functionType.getParameters().iterator();
+    }
+
+    while (arguments.hasNext()) {
+      if (parameters.hasNext()) {
         parameter = parameters.next();
+      } else if (isVarArgs && varArgsParameter != null) {
+        parameter = varArgsParameter;
+      } else {
+        // Extra argument with no matching parameter
+        argument = arguments.next();
+        ordinal++;
+        // Continue to check argument count (after loop), no type-checking for this argument
+        continue;
+      }
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
