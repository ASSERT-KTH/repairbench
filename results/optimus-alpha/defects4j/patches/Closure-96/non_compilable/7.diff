diff --git a/tmp/ac6c153e-b87f-4a59-b0d9-6513ff3de93e_buggy.java b/tmp/8cb4016b-598f-4fe2-aba0-d0d4afb4b85a_fixed.java
index e0ecec8..0b8e0d3 100644
--- a/tmp/ac6c153e-b87f-4a59-b0d9-6513ff3de93e_buggy.java
+++ b/tmp/8cb4016b-598f-4fe2-aba0-d0d4afb4b85a_fixed.java
@@ -1,35 +1,60 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  boolean isVarArgs = functionType.isVarArgs();
+  JSType varArgsType = isVarArgs
+      ? functionType.getTypeOfThis() // placeholder, will be replaced below
+      : null;
+  if (isVarArgs) {
+    // Find the last parameter (which will be the var_args parameter).
+    // According to JSFunctionTypeBuilder, isVarArgs means last param is var_args.
+    Node lastParam = null;
+    for (Node param : functionType.getParameters()) {
+      lastParam = param;
+    }
+    if (lastParam != null) {
+      varArgsType = getJSType(lastParam);
+    }
+  }
+
+  // Match provided arguments with declared parameters
+  while (arguments.hasNext()) {
+    if (parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
+    } else if (isVarArgs) {
+      // For var_args, all remaining arguments match the vararg parameter type
+      argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), varArgsType, call, ordinal);
+    } else {
+      // extra argument with no parameter: just consume to count for error reporting
+      arguments.next();
+      ordinal++;
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
