diff --git a/tmp/34148b03-5091-4f6d-8c42-df0ee2b6e3fd_buggy.java b/tmp/00826207-0115-497d-8969-31a3ed6eda7a_fixed.java
index 98d89dc..7d752f8 100644
--- a/tmp/34148b03-5091-4f6d-8c42-df0ee2b6e3fd_buggy.java
+++ b/tmp/00826207-0115-497d-8969-31a3ed6eda7a_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Fix for NaN handling as per XPath 1.0 specification
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (getOperator() == EQUAL) {
+            // NaN = NaN is true, NaN = X (X != NaN) is false
+            return Double.isNaN(ld) && Double.isNaN(rd);
+        }
+        // For <, >, <=, >=, != (NOT_EQUAL), always false if any is NaN
+        return false;
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
