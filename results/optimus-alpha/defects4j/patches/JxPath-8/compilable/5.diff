diff --git a/tmp/c139de90-dfd3-4f5e-80e7-4b9ad8a31ffd_buggy.java b/tmp/45226e85-9a1e-4591-80a8-a1dce8847700_fixed.java
index 98d89dc..ce1536f 100644
--- a/tmp/c139de90-dfd3-4f5e-80e7-4b9ad8a31ffd_buggy.java
+++ b/tmp/45226e85-9a1e-4591-80a8-a1dce8847700_fixed.java
@@ -1,23 +1,32 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    // Handle NaN cases explicitly per XPath 1.0 rules
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        // Only "=" returns true for NaN, others return false
+        return evaluateCompare(0);
+    }
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // All comparisons except "=" are false when either is NaN.
+        return evaluateCompare(2); // Pass unknown value to return always false except "="
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
