diff --git a/tmp/4e06e359-6b27-4e65-a011-db12acbefb37_buggy.java b/tmp/692ae45a-dc23-45fe-b45e-210bfa5c5a0a_fixed.java
index 98d89dc..2fedf52 100644
--- a/tmp/4e06e359-6b27-4e65-a011-db12acbefb37_buggy.java
+++ b/tmp/692ae45a-dc23-45fe-b45e-210bfa5c5a0a_fixed.java
@@ -1,23 +1,37 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Fix: Special handling for NaN per XPath: NaN = NaN yields TRUE, all other ops with NaN yield FALSE
+    boolean ldNaN = Double.isNaN(ld);
+    boolean rdNaN = Double.isNaN(rd);
+
+    if (ldNaN && rdNaN) {
+        // NaN = NaN must yield true, others false
+        return evaluateCompare(0); // this means equality (compare==0) is true, others false
+    }
+    if (ldNaN || rdNaN) {
+        // if either is NaN, any relational or equality yields false
+        return evaluateCompare(Integer.MIN_VALUE); // always false, even for equality
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
