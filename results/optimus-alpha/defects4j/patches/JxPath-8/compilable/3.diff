diff --git a/tmp/a205198c-dbf2-4613-b598-866eda74cd9a_buggy.java b/tmp/e15a03da-4d22-499b-a31a-a902998592b4_fixed.java
index 98d89dc..a473c32 100644
--- a/tmp/a205198c-dbf2-4613-b598-866eda74cd9a_buggy.java
+++ b/tmp/e15a03da-4d22-499b-a31a-a902998592b4_fixed.java
@@ -1,23 +1,37 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN specially as per XPath 1.0:
+    // $nan = $nan ==> true, any other comparison ==> false
+    boolean ldNaN = Double.isNaN(ld);
+    boolean rdNaN = Double.isNaN(rd);
+    if (ldNaN || rdNaN) {
+        // equality: if both NaN, true; otherwise false
+        if (ldNaN && rdNaN) {
+            return evaluateCompare(0);
+        }
+        // For all non-equals comparisons involving NaN: false
+        return evaluateCompare(Integer.MIN_VALUE); // Will always return false
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
