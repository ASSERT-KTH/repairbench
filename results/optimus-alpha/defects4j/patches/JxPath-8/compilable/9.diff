diff --git a/tmp/1c9cf2a9-496b-448e-8bc3-c716c7e3c2a0_buggy.java b/tmp/48ff6505-6e83-4d11-8d6f-6764b778a4e6_fixed.java
index 98d89dc..1aa91c6 100644
--- a/tmp/1c9cf2a9-496b-448e-8bc3-c716c7e3c2a0_buggy.java
+++ b/tmp/48ff6505-6e83-4d11-8d6f-6764b778a4e6_fixed.java
@@ -1,23 +1,33 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        // NaN == NaN is true in XPath
+        return evaluateCompare(0);
+    }
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // any op with NaN except '=' is false; '=' is false unless both are NaN
+        // so for '!=' treat as not equal; here, defer to evaluateCompare with non-zero
+        // But for '>', '<', always false
+        return evaluateCompare(1); // 1 indicates not equal
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
