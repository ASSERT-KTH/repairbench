diff --git a/tmp/f55c39ee-dfdc-441b-ad19-a383e42c1338_buggy.java b/tmp/ce4b761e-3933-44ec-b4d9-4aeed9ba409f_fixed.java
index 42b58d0..56aee23 100644
--- a/tmp/f55c39ee-dfdc-441b-ad19-a383e42c1338_buggy.java
+++ b/tmp/ce4b761e-3933-44ec-b4d9-4aeed9ba409f_fixed.java
@@ -1,19 +1,28 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
     TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
-        for (int i = 0; i < actualTypeArguments.length; i++) {
+
+    // Defensive check to avoid StackOverflowError due to recursive type variable references
+    int len = Math.min(typeParameters.length, actualTypeArguments.length);
+    for (int i = 0; i < len; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // Avoid putting self-referential type variable to prevent infinite recursion.
+        if (typeParameter.equals(actualTypeArgument)) {
+            // Skipping direct self-reference to avoid infinite loop
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
