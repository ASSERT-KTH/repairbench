diff --git a/tmp/35ce7062-b75e-4e10-bd88-5dbf52a0b56f_buggy.java b/tmp/58e8dc75-7ec6-469c-98a0-01c512707f45_fixed.java
index 42b58d0..e0b4ce6 100644
--- a/tmp/35ce7062-b75e-4e10-bd88-5dbf52a0b56f_buggy.java
+++ b/tmp/58e8dc75-7ec6-469c-98a0-01c512707f45_fixed.java
@@ -1,19 +1,30 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Type raw = parameterizedType.getRawType();
+    if (!(raw instanceof Class<?>)) {
+        return; // avoid ClassCastException
+    }
+    TypeVariable<?>[] typeParameters = ((Class<?>) raw).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
-        for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+    // Ensure we do not exceed array bounds in case of recursive definitions
+    int limit = Math.min(typeParameters.length, actualTypeArguments.length);
+    for (int i = 0; i < limit; i++) {
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // Prevent infinite recursion on self-referential type variables
+        if (actualTypeArgument.equals(typeParameter)) {
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
