diff --git a/tmp/4b1dd921-13b3-4e92-9e03-886561ef94eb_buggy.java b/tmp/7bd2d17d-66f2-4df8-a366-63f449446fd0_fixed.java
index b56897c..bd2e80e 100644
--- a/tmp/4b1dd921-13b3-4e92-9e03-886561ef94eb_buggy.java
+++ b/tmp/7bd2d17d-66f2-4df8-a366-63f449446fd0_fixed.java
@@ -1,27 +1,42 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // where the function returns (possibly without a return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
+  // We only care about calls to functions that
+  // pass one of the dependent variable to a non-side-effect free
   // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+  if ((n.isCall() && NodeUtil.functionCallHasSideEffects(n)) ||
+      (n.isNew() && NodeUtil.constructorCallHasSideEffects(n))) {
     return true;
   }
 
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+  // Do NOT traverse into FOR_IN LHS (the first child of FOR_IN). "a in b"
+  // has side effects if a or b are objects (due to property access semantics),
+  // but the assignment itself is not a side-effectful use like a function call.
+  // So, for code like "var x = a in b", we should allow inlining x,
+  // unless x is used in a function call, etc, in which case we forbid inlining.
+  if (n.isForIn()) {
+    // Only visit the NODE representing the source (rhs) and the body;
+    // do not traverse into the target (lhs) child.
+    Node rhs = n.getSecondChild();
+    Node body = n.getChildCount() > 2 ? n.getChildAtIndex(2) : null;
+    if (rhs != null && apply(rhs)) {
       return true;
     }
-
+    if (body != null && apply(body)) {
+      return true;
+    }
+    return false;
+  }
 
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
