diff --git a/tmp/c9268b6f-f1c8-4db4-8fc5-9668bac1b3da_buggy.java b/tmp/27a4a97b-2a38-4dfd-87ac-abd7650c57c0_fixed.java
index b56897c..e57cf5b 100644
--- a/tmp/c9268b6f-f1c8-4db4-8fc5-9668bac1b3da_buggy.java
+++ b/tmp/27a4a97b-2a38-4dfd-87ac-abd7650c57c0_fixed.java
@@ -1,27 +1,33 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // We only care about calls to functions or constructors that
+  // have side effects. We do NOT want to count 'in' and 'instanceof'
+  // as side-effecting, since those expressions just check properties,
+  // they do not modify state and shouldn't block inlining.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // Explicitly skip over 'in' and 'instanceof' as they are safe to inline across
+  // Note: n.isIn() and n.isInstanceOf() are not standard methods, so check token type
+  if (n.getToken() == Token.IN || n.getToken() == Token.INSTANCEOF) {
+    return false;
+  }
 
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
