diff --git a/tmp/e50f94c8-1997-4bd5-be43-5ba116f2695f_buggy.java b/tmp/b0d4d56f-6eb1-4277-830c-acf4cab8f58e_fixed.java
index 4c1ed27..c26565f 100644
--- a/tmp/e50f94c8-1997-4bd5-be43-5ba116f2695f_buggy.java
+++ b/tmp/b0d4d56f-6eb1-4277-830c-acf4cab8f58e_fixed.java
@@ -1,32 +1,29 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                int codepoint = Character.codePointAt(input, pos);
+                char[] c = Character.toChars(codepoint);
                 out.write(c);
                 pos += c.length;
                 continue;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+            // contract with translators is that they have to understand codepoints 
+            // and they just took care of a surrogate pair
+            int pt = 0;
+            while (pt < consumed && pos < len) {
+                int codepoint = Character.codePointAt(input, pos);
+                int charCount = Character.charCount(codepoint);
+                pos += charCount;
+                pt++;
             }
         }
     }
\ No newline at end of file
