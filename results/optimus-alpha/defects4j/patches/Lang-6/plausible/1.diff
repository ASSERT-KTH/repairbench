diff --git a/tmp/e19c2244-410c-4cc2-88e6-019af318048d_buggy.java b/tmp/2ae67460-0ab2-4e8d-bc5a-01639946d347_fixed.java
index 4c1ed27..d2fd873 100644
--- a/tmp/e19c2244-410c-4cc2-88e6-019af318048d_buggy.java
+++ b/tmp/2ae67460-0ab2-4e8d-bc5a-01639946d347_fixed.java
@@ -1,32 +1,38 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is 
  * tightly coupled with the abstract method of this class. 
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+            int codePoint = Character.codePointAt(input, pos);
+            char[] c = Character.toChars(codePoint);
             out.write(c);
             pos += c.length;
             continue;
         }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+        // contract with translators is that they have to understand codepoints 
+        // and they just took care of a surrogate pair
+        int skip = 0;
+        int count = 0;
+        while (count < consumed && pos + skip < len) {
+            int codePoint = Character.codePointAt(input, pos + skip);
+            skip += Character.charCount(codePoint);
+            count++;
         }
+        pos += skip;
     }
 }
\ No newline at end of file
