diff --git a/tmp/e6409fe4-87b8-4a10-a14c-329a7010f3b1_buggy.java b/tmp/efd7991f-ffd7-46d3-88d2-2c7f05ae102f_fixed.java
index 800e6e1..721080f 100644
--- a/tmp/e6409fe4-87b8-4a10-a14c-329a7010f3b1_buggy.java
+++ b/tmp/efd7991f-ffd7-46d3-88d2-2c7f05ae102f_fixed.java
@@ -1,32 +1,41 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
+
+  // Process stubs and assignments to named properties attached to locals,
+  // including stub function types and constructor property types.
+  if ((n.isExprResult() || n.isAssign()) && parent == scope.getRootNode()) {
+    // Handles expressions like: /** @param {number} x */ goog.foo;
+    // or assignments: /** @type {number} */ goog.bar = 5;
+    defineAssignedName(n, parent);
+  }
+
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
