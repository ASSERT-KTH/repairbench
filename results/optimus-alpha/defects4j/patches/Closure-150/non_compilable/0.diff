diff --git a/tmp/7ce557fb-47d2-413e-9b7c-374b108822a3_buggy.java b/tmp/ba44b08b-c1bb-4c1e-98cb-7f40fb7d10d4_fixed.java
index 800e6e1..930b2e8 100644
--- a/tmp/7ce557fb-47d2-413e-9b7c-374b108822a3_buggy.java
+++ b/tmp/ba44b08b-c1bb-4c1e-98cb-7f40fb7d10d4_fixed.java
@@ -1,32 +1,51 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
+  // Attach JSDoc types to function stubs *before* literal types, so we know to
+  // define a function property on an object before we try to add the type to the object.
+  // This order is necessary for supporting type annotations on function stubs,
+  // such as: /** @param {number} x */ goog.foo;
+  if (n.getType() == Token.EXPR_RESULT) {
+    Node expr = n.getFirstChild();
+    if (expr != null && expr.getType() == Token.GETPROP && expr.getJSDocInfo() != null) {
+      defineFunctionLiteral(expr, n, expr.getJSDocInfo());
+    }
+  }
+
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    // Add support for stub declarations like /** @param {number} x */ goog.foo; or this.foo;
+    case Token.GETPROP:
+      if (parent != null && parent.getType() == Token.EXPR_RESULT && n.getJSDocInfo() != null) {
+        defineFunctionLiteral(n, parent, n.getJSDocInfo());
+      }
+      break;
+    case Token.GETELEM:
+      // Optionally handle gets like this["foo"], etc.
+      break;
+    // Also allow property stub declarations on 'this'
+    case Token.STRING:
+      if (parent != null && parent.getType() == Token.GETPROP && parent.getFirstChild().getType() == Token.THIS && parent.getJSDocInfo() != null) {
+        defineFunctionLiteral(parent, t.getEnclosingFunction(), parent.getJSDocInfo());
+      }
+      break;
   }
 }
\ No newline at end of file
