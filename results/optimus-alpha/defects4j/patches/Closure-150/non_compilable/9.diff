diff --git a/tmp/fab536c9-c3cb-4c5a-b26b-caaae13522b2_buggy.java b/tmp/cea776ae-05b6-4311-a9c3-68e919a9cfac_fixed.java
index 800e6e1..120c7b1 100644
--- a/tmp/fab536c9-c3cb-4c5a-b26b-caaae13522b2_buggy.java
+++ b/tmp/cea776ae-05b6-4311-a9c3-68e919a9cfac_fixed.java
@@ -1,32 +1,44 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
+  // Attach types *before* defining VARs, so stub property declarations
+  // (e.g. /** @type {string} */ foo.bar;) work for local scopes.
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
+      // Handle cases like "var foo; /** @param {number} x */ foo.bar;"
+      // so that "foo.bar"'s type is recorded in the scope.
+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+        if (child.getFirstChild() == null && child.isQualifiedName()) {
+          Var var = scope.getVar(child.getQualifiedName());
+          if (var != null) {
+            maybeDeclareQualifiedNameType(child, var.getType());
+          }
+        }
+      }
       break;
   }
 }
\ No newline at end of file
