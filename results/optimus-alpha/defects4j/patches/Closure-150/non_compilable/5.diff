diff --git a/tmp/590a4080-154e-4a60-9b6a-572260e2e238_buggy.java b/tmp/9b3e72a6-6270-447f-b9d4-f396f0acebbd_fixed.java
index 800e6e1..2cec885 100644
--- a/tmp/590a4080-154e-4a60-9b6a-572260e2e238_buggy.java
+++ b/tmp/9b3e72a6-6270-447f-b9d4-f396f0acebbd_fixed.java
@@ -1,32 +1,50 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
+  // Handle function stubs and property declarations ahead of attachLiteralTypes,
+  // in order to collect correct property and function types before type analysis.
+  if (n.getType() == Token.NAME && parent != null) {
+    maybeHandleQualifiedNameDeclaration(n, parent);
+  }
+
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
+
+/**
+ * Handles qualified names and property declarations for function stubs and
+ * property stubs, so that correct type info is assigned when they are
+ * declared with JSDoc (for example: /** @param {number} x * / goog.foo;).
+ */
+private void maybeHandleQualifiedNameDeclaration(Node n, Node parent) {
+  if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.VAR) {
+    // Only interested in stubs like goog.foo;
+    if (n.isQualifiedName()) {
+      JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(n);
+      if (jsdoc != null && (jsdoc.containsFunction() || jsdoc.hasType()
+          || jsdoc.isConst() || jsdoc.isDefine() || jsdoc.isConstructor()
+          || jsdoc.isInterface())) {
+        defineSlot(n, parent, jsdoc);
+      }
+    }
+  }
+}
\ No newline at end of file
