diff --git a/tmp/ab8f4e9a-b76b-47ef-b0b2-4739d7b32e40_buggy.java b/tmp/6878168c-84e6-4dc5-bed9-a50877e97a02_fixed.java
index 800e6e1..9627429 100644
--- a/tmp/ab8f4e9a-b76b-47ef-b0b2-4739d7b32e40_buggy.java
+++ b/tmp/6878168c-84e6-4dc5-bed9-a50877e97a02_fixed.java
@@ -1,32 +1,35 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
+
+  // Attach function or property types to their qualified names even if not declared with 'var'.
+  // This handles function stub declarations and property declarations like goog.foo or this.foo.
+  if (n.isExprResult() && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
+    defineSlot(n.getFirstChild(), n, parent, null);
+  }
+  // Attach property types for property literal assignments (e.g., this.foo = ...)
+  if (n.isAssign() && n.getFirstChild().isGetProp()) {
+    defineSlot(n.getFirstChild(), n, parent, null);
+  }
+    
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
