diff --git a/tmp/c36fd830-23e5-4f40-b069-f3c83aebf657_buggy.java b/tmp/fd1e95d7-6b08-42ab-98e6-d9420c43071a_fixed.java
index 210695a..e84357b 100644
--- a/tmp/c36fd830-23e5-4f40-b069-f3c83aebf657_buggy.java
+++ b/tmp/fd1e95d7-6b08-42ab-98e6-d9420c43071a_fixed.java
@@ -1,32 +1,21 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
   // unions types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
   // other types
   switch (this.testForEquality(that)) {
     case TRUE:
-        return new TypePair(null, null);
+      // If the types are always equal, under inequality condition, both should be NO_TYPE.
+      return new TypePair(this.getNativeType(JSTypeNative.NO_TYPE), that.getNativeType(JSTypeNative.NO_TYPE));
 
     case FALSE:
     case UNKNOWN:
       return new TypePair(this, that);
   }
 
   // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
