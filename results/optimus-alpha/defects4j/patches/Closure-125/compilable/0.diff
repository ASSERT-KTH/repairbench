diff --git a/tmp/e4921833-040b-4fbb-837b-6a47b2136613_buggy.java b/tmp/d048403f-63ec-4a35-810f-621cc2b56dce_fixed.java
index 7e43c1c..d3dc98e 100644
--- a/tmp/e4921833-040b-4fbb-837b-6a47b2136613_buggy.java
+++ b/tmp/d048403f-63ec-4a35-810f-621cc2b56dce_fixed.java
@@ -1,19 +1,25 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+  // Fix: Check type.isFunctionType() instead of type.isConstructor(),
+  // because constructors may have additional implem.
+  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType() || type.isFunctionType()) {
     FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+    if (fnType != null && fnType.isConstructor()) {
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
     } else {
+      // If the function type is not a constructor, mark as NOT_A_CONSTRUCTOR
+      if (fnType != null && !fnType.isConstructor()) {
+        report(t, n, NOT_A_CONSTRUCTOR);
+      }
       ensureTyped(t, n);
     }
   } else {
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
