diff --git a/tmp/0688d8fb-2c08-420a-a256-e68115530f41_buggy.java b/tmp/9cd2820c-9509-45cc-8397-49b15e4d75dd_fixed.java
index dbda381..acc3b1a 100644
--- a/tmp/0688d8fb-2c08-420a-a256-e68115530f41_buggy.java
+++ b/tmp/9cd2820c-9509-45cc-8397-49b15e4d75dd_fixed.java
@@ -1,54 +1,78 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+    int weeks = getWeeks();
+    int days = getDays();
+    int hours = getHours();
+    int minutes = getMinutes();
+    int seconds = getSeconds();
+    int millis = getMillis();
+
+    // Verify that unsupported fields are not non-zero
+    if (years != 0 && type.isSupported(DurationFieldType.years()) == false) {
+        throw new UnsupportedOperationException("Field is not supported");
     }
-            if (months != 0) {
-                result = result.withMonths(months);
+    if (months != 0 && type.isSupported(DurationFieldType.months()) == false) {
+        throw new UnsupportedOperationException("Field is not supported");
     }
+    if (weeks != 0 && type.isSupported(DurationFieldType.weeks()) == false) {
+        throw new UnsupportedOperationException("Field is not supported");
     }
-        return result;
+    if (days != 0 && type.isSupported(DurationFieldType.days()) == false) {
+        throw new UnsupportedOperationException("Field is not supported");
+    }
+    if (hours != 0 && type.isSupported(DurationFieldType.hours()) == false) {
+        throw new UnsupportedOperationException("Field is not supported");
+    }
+    if (minutes != 0 && type.isSupported(DurationFieldType.minutes()) == false) {
+        throw new UnsupportedOperationException("Field is not supported");
+    }
+    if (seconds != 0 && type.isSupported(DurationFieldType.seconds()) == false) {
+        throw new UnsupportedOperationException("Field is not supported");
+    }
+    if (millis != 0 && type.isSupported(DurationFieldType.millis()) == false) {
+        throw new UnsupportedOperationException("Field is not supported");
+    }
+
+    // If period type contains years or months, normalize years/months (do not convert to months)
+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {
+        // Convert to total months
+        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+        int newYears = 0;
+        int newMonths = 0;
+        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {
+            newYears = totalMonths / 12;
+            newMonths = totalMonths % 12;
+        } else if (type.isSupported(DurationFieldType.years())) {
+            newYears = totalMonths / 12;
+            // months are dropped
+        } else {
+            // only months supported
+            newMonths = totalMonths;
+        }
+        return new Period(
+                type.isSupported(DurationFieldType.years()) ? newYears : 0,
+                type.isSupported(DurationFieldType.months()) ? newMonths : 0,
+                type.isSupported(DurationFieldType.weeks()) ? weeks : 0,
+                type.isSupported(DurationFieldType.days()) ? days : 0,
+                type.isSupported(DurationFieldType.hours()) ? hours : 0,
+                type.isSupported(DurationFieldType.minutes()) ? minutes : 0,
+                type.isSupported(DurationFieldType.seconds()) ? seconds : 0,
+                type.isSupported(DurationFieldType.millis()) ? millis : 0,
+                type
+        );
+    }
+    // else: convert entire period to milliseconds, construct Period from that
+    long totalMillis = 0L;
+    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) years) * 12L * DateTimeConstants.MILLIS_PER_MONTH);
+    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) months) * DateTimeConstants.MILLIS_PER_MONTH);
+    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) weeks) * DateTimeConstants.MILLIS_PER_WEEK);
+    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) days) * DateTimeConstants.MILLIS_PER_DAY);
+    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) hours) * DateTimeConstants.MILLIS_PER_HOUR);
+    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE);
+    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND);
+    totalMillis = FieldUtils.safeAdd(totalMillis, millis);
+
+    return new Period(totalMillis, type, ISOChronology.getInstanceUTC());
 }
\ No newline at end of file
