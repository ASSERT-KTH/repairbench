diff --git a/tmp/a5c0a384-69ec-4ff4-a307-829520ee2b34_buggy.java b/tmp/54247723-fd52-4daa-b376-48fe13fc9a07_fixed.java
index dbda381..85b20c2 100644
--- a/tmp/a5c0a384-69ec-4ff4-a307-829520ee2b34_buggy.java
+++ b/tmp/54247723-fd52-4daa-b376-48fe13fc9a07_fixed.java
@@ -1,54 +1,101 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
+    int weeks = getWeeks();
+    int days = getDays();
+    int hours = getHours();
+    int minutes = getMinutes();
+    int seconds = getSeconds();
+    int millis = getMillis();
+
+    // If type supports years or months, do the normal Year/Month normalization logic.
+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {
+        // years & months handled via normalization
+        if (!type.isSupported(DurationFieldType.years()) && years != 0) {
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+        if (!type.isSupported(DurationFieldType.months()) && months != 0) {
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+        // years and months normalized into years and months
         years = FieldUtils.safeAdd(years, months / 12);
         months = months % 12;
-            if (years != 0) {
+        if (months < 0 && years > 0) {
+            // for negative months, make months positive & decrement years
+            years = FieldUtils.safeAdd(years, -1);
+            months = FieldUtils.safeAdd(months, 12);
+        } else if (months > 0 && years < 0) {
+            years = FieldUtils.safeAdd(years, 1);
+            months = FieldUtils.safeAdd(months, -12);
+        }
+
+        // The rest normalized using standard rules (weeks/days/hours/...)
+        long totalMillis = millis;
+        totalMillis = FieldUtils.safeAdd(totalMillis, seconds * (long) DateTimeConstants.MILLIS_PER_SECOND);
+        totalMillis = FieldUtils.safeAdd(totalMillis, minutes * (long) DateTimeConstants.MILLIS_PER_MINUTE);
+        totalMillis = FieldUtils.safeAdd(totalMillis, hours * (long) DateTimeConstants.MILLIS_PER_HOUR);
+        totalMillis = FieldUtils.safeAdd(totalMillis, days * (long) DateTimeConstants.MILLIS_PER_DAY);
+        totalMillis = FieldUtils.safeAdd(totalMillis, weeks * (long) DateTimeConstants.MILLIS_PER_WEEK);
+
+        Period remainder = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+
+        // Now copy in normalized years/months if supported
+        Period result = remainder;
+        if (type.isSupported(DurationFieldType.years())) {
             result = result.withYears(years);
         }
-            if (months != 0) {
+        if (type.isSupported(DurationFieldType.months())) {
             result = result.withMonths(months);
         }
-        }
         return result;
+    } else if (type.isSupported(DurationFieldType.months())) {
+        // No years, only months supported: convert years into months
+        if (years != 0 && !type.isSupported(DurationFieldType.years())) {
+            if (!type.isSupported(DurationFieldType.months())) {
+                throw new UnsupportedOperationException("Field is not supported");
+            }
+            months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
+            years = 0;
+        }
+        if (months != 0 && !type.isSupported(DurationFieldType.months())) {
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+        int[] values = new int[type.size()];
+        for (int i = 0; i < type.size(); i++) {
+            DurationFieldType f = type.getFieldType(i);
+            if (f == DurationFieldType.months()) {
+                values[i] = months;
+            } else if (f == DurationFieldType.weeks()) {
+                values[i] = weeks;
+            } else if (f == DurationFieldType.days()) {
+                values[i] = days;
+            } else if (f == DurationFieldType.hours()) {
+                values[i] = hours;
+            } else if (f == DurationFieldType.minutes()) {
+                values[i] = minutes;
+            } else if (f == DurationFieldType.seconds()) {
+                values[i] = seconds;
+            } else if (f == DurationFieldType.millis()) {
+                values[i] = millis;
+            } else {
+                // Not supported field
+                throw new UnsupportedOperationException("Field is not supported");
+            }
+        }
+        return new Period(values, type);
+    } else {
+        // No years or months supported: years and months must be zero!
+        if ((years != 0 || months != 0)) {
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+        // normalize all fields into milliseconds
+        long totalMillis = millis;
+        totalMillis = FieldUtils.safeAdd(totalMillis, seconds * (long) DateTimeConstants.MILLIS_PER_SECOND);
+        totalMillis = FieldUtils.safeAdd(totalMillis, minutes * (long) DateTimeConstants.MILLIS_PER_MINUTE);
+        totalMillis = FieldUtils.safeAdd(totalMillis, hours * (long) DateTimeConstants.MILLIS_PER_HOUR);
+        totalMillis = FieldUtils.safeAdd(totalMillis, days * (long) DateTimeConstants.MILLIS_PER_DAY);
+        totalMillis = FieldUtils.safeAdd(totalMillis, weeks * (long) DateTimeConstants.MILLIS_PER_WEEK);
+        return new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+    }
 }
\ No newline at end of file
