diff --git a/tmp/9b49cdc0-8f78-4c8b-8ab1-9a8c27a127b1_buggy.java b/tmp/b5c04f35-44b0-476d-ad96-013e677e31ec_fixed.java
index dbda381..f677a29 100644
--- a/tmp/9b49cdc0-8f78-4c8b-8ab1-9a8c27a127b1_buggy.java
+++ b/tmp/b5c04f35-44b0-476d-ad96-013e677e31ec_fixed.java
@@ -1,54 +1,89 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
+    int weeks = getWeeks();
+    int days = getDays();
+    int hours = getHours();
+    int minutes = getMinutes();
+    int seconds = getSeconds();
+    int millis = getMillis();
+
+    // Check for unsupported fields
+    if ((years != 0 && !type.isSupported(DurationFieldType.years())) ||
+        (months != 0 && !type.isSupported(DurationFieldType.months()))) {
+        throw new UnsupportedOperationException("Field is not supported");
+    }
+
+    // Normalize months/years if fields are supported
+    if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {
         years = FieldUtils.safeAdd(years, months / 12);
         months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+    } else if (type.isSupported(DurationFieldType.months()) && !type.isSupported(DurationFieldType.years())) {
+        // Convert all years to months
+        months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
+        years = 0;
+    } else if (!type.isSupported(DurationFieldType.months()) && type.isSupported(DurationFieldType.years())) {
+        // Convert all months to years (fractional years ignored)
+        years = FieldUtils.safeAdd(years, months / 12);
+        months = 0;
     }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+    // Now check for weeks/days normalization
+    if (type.isSupported(DurationFieldType.weeks()) && !type.isSupported(DurationFieldType.days())) {
+        // Convert all days to weeks (fractional weeks ignored)
+        weeks = FieldUtils.safeAdd(weeks, days / 7);
+        days = 0;
+    } else if (!type.isSupported(DurationFieldType.weeks()) && type.isSupported(DurationFieldType.days())) {
+        // Convert all weeks to days
+        days = FieldUtils.safeAdd(days, FieldUtils.safeMultiply(weeks, 7));
+        weeks = 0;
     }
+
+    // For hours, minutes, seconds, millis: always normalize using millis
+    long totalMillis = millis
+            + seconds * (long) DateTimeConstants.MILLIS_PER_SECOND
+            + minutes * (long) DateTimeConstants.MILLIS_PER_MINUTE
+            + hours * (long) DateTimeConstants.MILLIS_PER_HOUR;
+    int normHours, normMinutes, normSeconds, normMillis;
+    normHours = normMinutes = normSeconds = normMillis = 0;
+
+    if (type.isSupported(DurationFieldType.hours()) ||
+        type.isSupported(DurationFieldType.minutes()) ||
+        type.isSupported(DurationFieldType.seconds()) ||
+        type.isSupported(DurationFieldType.millis())) {
+
+        if (type.isSupported(DurationFieldType.hours())) {
+            normHours = (int) (totalMillis / DateTimeConstants.MILLIS_PER_HOUR);
+            totalMillis = totalMillis % DateTimeConstants.MILLIS_PER_HOUR;
         }
+        if (type.isSupported(DurationFieldType.minutes())) {
+            normMinutes = (int) (totalMillis / DateTimeConstants.MILLIS_PER_MINUTE);
+            totalMillis = totalMillis % DateTimeConstants.MILLIS_PER_MINUTE;
+        }
+        if (type.isSupported(DurationFieldType.seconds())) {
+            normSeconds = (int) (totalMillis / DateTimeConstants.MILLIS_PER_SECOND);
+            totalMillis = totalMillis % DateTimeConstants.MILLIS_PER_SECOND;
+        }
+        if (type.isSupported(DurationFieldType.millis())) {
+            normMillis = (int) totalMillis;
+        }
+        // If a field is not supported, "leave" its value in the lowest supported field above it
+        // E.g. if seconds and millis are not supported, all left-over millis end in minutes, etc.
+        // This behavior matches previous logic with Period(millis, PeriodType, chrono)
+    }
+
+    // Compose the normalized Period
+    Period result = new Period(
+            type.isSupported(DurationFieldType.years()) ? years : 0,
+            type.isSupported(DurationFieldType.months()) ? months : 0,
+            type.isSupported(DurationFieldType.weeks()) ? weeks : 0,
+            type.isSupported(DurationFieldType.days()) ? days : 0,
+            type.isSupported(DurationFieldType.hours()) ? normHours : 0,
+            type.isSupported(DurationFieldType.minutes()) ? normMinutes : 0,
+            type.isSupported(DurationFieldType.seconds()) ? normSeconds : 0,
+            type.isSupported(DurationFieldType.millis()) ? normMillis : 0,
+            type
+    );
     return result;
 }
\ No newline at end of file
