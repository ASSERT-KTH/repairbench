diff --git a/tmp/47e96b85-19cf-4160-a9c0-677478067e6c_buggy.java b/tmp/28d43ab6-f9c0-469a-b99c-02019d51814b_fixed.java
index dbda381..0955fc1 100644
--- a/tmp/47e96b85-19cf-4160-a9c0-677478067e6c_buggy.java
+++ b/tmp/28d43ab6-f9c0-469a-b99c-02019d51814b_fixed.java
@@ -1,54 +1,65 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
+    int weeks = getWeeks();
+    int days = getDays();
+    int hours = getHours();
+    int minutes = getMinutes();
+    int seconds = getSeconds();
+    int millis = getMillis();
+
+    // Calculate monthsFields = years*12 + months if supported by period type
+    if (type.isSupported(DurationFieldType.years()) == false && type.isSupported(DurationFieldType.months())) {
+        long totalMonths = ((long) years) * 12L + (long) months;
+        // If type supports weeks, merge them down like weeks/days
+        // day/week reduction will be further handled below
+        years = 0;
+        months = FieldUtils.safeToInt(totalMonths);
+    } else if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {
+        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+        years = totalMonths / 12;
+        months = totalMonths % 12;
+        // Negative value handling for months field
+        if (months < 0 && years > 0) {
+            years--;
+            months += 12;
+        } else if (months > 0 && years < 0) {
+            years++;
+            months -= 12;
+        }
+    } else if (!type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {
         if (years != 0) {
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+        if (months != 0) {
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+        years = 0;
+        months = 0;
+    } else if (type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {
+        if (months != 0) {
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+        // years is ok
+    }
+
+    // Now weeks/days/hours/mins/secs/ms get pushed "down" into ms and reborn from reference instant
+    long totalMillis = millis;
+    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(seconds, DateTimeConstants.MILLIS_PER_SECOND));
+    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(minutes, DateTimeConstants.MILLIS_PER_MINUTE));
+    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(hours, DateTimeConstants.MILLIS_PER_HOUR));
+    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(days, DateTimeConstants.MILLIS_PER_DAY));
+    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(weeks, DateTimeConstants.MILLIS_PER_WEEK));
+
+    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());
+
+    // Set years/months if type supports them
+    if (type.isSupported(DurationFieldType.years())) {
         result = result.withYears(years);
     }
-            if (months != 0) {
+    if (type.isSupported(DurationFieldType.months())) {
         result = result.withMonths(months);
     }
-        }
     return result;
 }
\ No newline at end of file
