diff --git a/tmp/215a4104-63d1-4a1c-8392-8e5a81e605e8_buggy.java b/tmp/863844fa-dcbd-4bd7-9367-25269ce6c0a7_fixed.java
index dbda381..2f50ae6 100644
--- a/tmp/215a4104-63d1-4a1c-8392-8e5a81e605e8_buggy.java
+++ b/tmp/863844fa-dcbd-4bd7-9367-25269ce6c0a7_fixed.java
@@ -1,54 +1,66 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+    // Handle years and months specially if they are not supported in the type.
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
+
+    // If type doesn't support years or months, they get converted to months
+    int totalMonths = 0;
+    if (type.isSupported(DurationFieldType.years())) {
+        // Type supports years
+        if (type.isSupported(DurationFieldType.months())) {
+            // Type supports years and months, normalize months to years+months
+            years = FieldUtils.safeAdd(years, months / 12);
+            months = months % 12;
+        } else {
+            // Type supports years but not months
             years = FieldUtils.safeAdd(years, months / 12);
             months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
-            }
             if (months != 0) {
+                throw new UnsupportedOperationException("Field is not supported");
+            }
+        }
+    } else {
+        // type does not support years
+        if (years != 0) {
+            if (type.isSupported(DurationFieldType.months())) {
+                totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+                years = 0;
+                months = 0;
+            } else {
+                throw new UnsupportedOperationException("Field is not supported");
+            }
+        } else {
+            totalMonths = months;
+            months = 0;
+        }
+    }
+
+    // Use only the supported fields
+    long millis = getMillis()
+            + ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND
+            + ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE
+            + ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR
+            + ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY
+            + ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;
+
+    // Start constructing the period with base fields as duration
+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+    // Now set years/months/totalMonths as needed
+    if (type.isSupported(DurationFieldType.years())) {
+        if (years != 0) {
+            result = result.withYears(years);
+        }
+        if (type.isSupported(DurationFieldType.months()) && months != 0) {
             result = result.withMonths(months);
         }
+    } else if (type.isSupported(DurationFieldType.months())) {
+        if (totalMonths != 0) {
+            result = result.withMonths(totalMonths);
         }
+    } // else: neither years nor months supported, all months/years should have thrown above if non-zero
+
     return result;
 }
\ No newline at end of file
