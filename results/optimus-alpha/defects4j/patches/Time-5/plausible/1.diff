diff --git a/tmp/8fac9edc-9b82-4157-a937-97149a3b6a27_buggy.java b/tmp/897fc3e1-7b09-40a1-bd49-e516b6a8e155_fixed.java
index dbda381..4f1b3e0 100644
--- a/tmp/8fac9edc-9b82-4157-a937-97149a3b6a27_buggy.java
+++ b/tmp/897fc3e1-7b09-40a1-bd49-e516b6a8e155_fixed.java
@@ -1,54 +1,72 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+
+    // Special handling if years or months exist, and the type does not support them.
+    int years = getYears();
+    int months = getMonths();
+
+    boolean typeHasYears = type.isSupported(DurationFieldType.years());
+    boolean typeHasMonths = type.isSupported(DurationFieldType.months());
+
+    // When years or months are present, but PeriodType doesn't support years/months,
+    // sum them together as months, or throw if not even months are supported.
+    if ((years != 0 || months != 0) && (!typeHasYears || !typeHasMonths)) {
+        if (!typeHasMonths) {
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+        // Convert all years to months.
+        long totalMonths = (long) years * 12 + (long) months;
+        // Compose other fields into a period
+        int weeks = getWeeks();
+        int days = getDays();
+        int hours = getHours();
+        int minutes = getMinutes();
+        int seconds = getSeconds();
+        int millis = getMillis();
+        int[] values = new int[type.size()];
+
+        for (int i = 0; i < type.size(); i++) {
+            DurationFieldType fieldType = type.getFieldType(i);
+            if (fieldType == DurationFieldType.months()) {
+                // To avoid overflow, check limits
+                if (totalMonths > Integer.MAX_VALUE || totalMonths < Integer.MIN_VALUE) {
+                    throw new ArithmeticException("Period months too large to be represented");
+                }
+                values[i] = (int) totalMonths;
+            } else if (fieldType == DurationFieldType.weeks()) {
+                values[i] = weeks;
+            } else if (fieldType == DurationFieldType.days()) {
+                values[i] = days;
+            } else if (fieldType == DurationFieldType.hours()) {
+                values[i] = hours;
+            } else if (fieldType == DurationFieldType.minutes()) {
+                values[i] = minutes;
+            } else if (fieldType == DurationFieldType.seconds()) {
+                values[i] = seconds;
+            } else if (fieldType == DurationFieldType.millis()) {
+                values[i] = millis;
+            } // years are not supported
+        }
+        return new Period(values, type);
+    }
+
+    // Proceed as normal if years/months are both supported or not present
+    long millis = getMillis(); // No overflow can happen, even with Integer.MAX_VALUEs
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
     if (years != 0 || months != 0) {
         years = FieldUtils.safeAdd(years, months / 12);
         months = months % 12;
         if (years != 0) {
             result = result.withYears(years);
         }
         if (months != 0) {
             result = result.withMonths(months);
         }
     }
     return result;
 }
\ No newline at end of file
