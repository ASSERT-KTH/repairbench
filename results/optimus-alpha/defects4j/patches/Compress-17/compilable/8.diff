diff --git a/tmp/a1a98cbc-7ecd-497d-a51e-05760d5fc970_buggy.java b/tmp/8380919f-019a-4168-a692-48ea9454c289_fixed.java
index 3b9a3c0..ed451bd 100644
--- a/tmp/a1a98cbc-7ecd-497d-a51e-05760d5fc970_buggy.java
+++ b/tmp/8380919f-019a-4168-a692-48ea9454c289_fixed.java
@@ -1,71 +1,60 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
+    // To work around some tar implementations that insert a leading NUL
+    // this method returns 0 if it detects a leading NUL since Commons Compress 1.4.
     if (buffer[start] == 0) {
         return 0L;
     }
 
+    // Check for all NUL in field (tolerate missing fields)
+    boolean allNul = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNul = false;
+            break;
+        }
+    }
+    if (allNul) {
+        return 0L;
+    }
+
     // Skip leading spaces
     while (start < end){
         if (buffer[start] == ' '){
             start++;
         } else {
             break;
         }
     }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
+    // Must have trailing NUL or space OR end before trailer if trailer = 0x00 or ' '
+    // If there are no valid digits, return 0
     // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+    int trailerEnd = end;
+    while (trailerEnd > start && (buffer[trailerEnd - 1] == 0 || buffer[trailerEnd - 1] == ' ')) {
+        trailerEnd--;
+    }
+    if (trailerEnd == start) {
+        return 0L;
     }
 
-        for ( ;start < end; start++) {
+    for (; start < trailerEnd; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
