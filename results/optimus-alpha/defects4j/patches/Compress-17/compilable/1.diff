diff --git a/tmp/9136c1b5-4b31-4019-bcf6-aa890c35794f_buggy.java b/tmp/768713ce-30d7-4528-a9b8-ca56ba1777fa_fixed.java
index 3b9a3c0..a24eb4b 100644
--- a/tmp/9136c1b5-4b31-4019-bcf6-aa890c35794f_buggy.java
+++ b/tmp/768713ce-30d7-4528-a9b8-ca56ba1777fa_fixed.java
@@ -1,71 +1,65 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
-        if (buffer[start] == 0) {
+    // Skip leading NULs (COMPRESS-197 workaround)
+    while (start < end && buffer[start] == 0) {
+        start++;
+    }
+
+    // All NULs, or we skipped everything
+    if (start == end) {
         return 0L;
     }
 
     // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
     }
+
+    // If nothing remains, it's a field of spaces (missing field)
+    if (start == end) {
+        return 0L;
     }
 
     // Must have trailing NUL or space
     byte trailer;
     trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
         end--;
     } else {
         throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, end - 1, trailer));
     }
-        // May have additional NULs or spaces
+    // May have additional NULs or spaces (second trailer)
+    if (end > start) {
         trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' ') {
             end--;
         }
+    }
+
+    // Skip trailing NULs/spaces after supposed value, before parse
+    while (end > start && (buffer[start] == 0 || buffer[start] == ' ')) {
+        start++;
+    }
+    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
+        end--;
+    }
 
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
