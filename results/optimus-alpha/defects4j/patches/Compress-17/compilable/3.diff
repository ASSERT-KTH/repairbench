diff --git a/tmp/5466403a-7dd5-478e-a939-7e5b45c205df_buggy.java b/tmp/59d8d6ff-47a2-4034-a072-d2a3de119067_fixed.java
index 3b9a3c0..e549107 100644
--- a/tmp/5466403a-7dd5-478e-a939-7e5b45c205df_buggy.java
+++ b/tmp/59d8d6ff-47a2-4034-a072-d2a3de119067_fixed.java
@@ -1,71 +1,68 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
+    // To work-around leading NUL
     if (buffer[start] == 0) {
+        boolean allNuls = true;
+        for (int i = start; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNuls = false;
+                break;
+            }
+        }
+        if (allNuls) {
             return 0L;
         }
+    }
 
     // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
     }
+
+    // Return 0 if buffer is all spaces or all NULs after skipping leading spaces
+    if (start == end) {
+        return 0L;
     }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+    // Must have trailing NUL or space (one or two)
+    if (end <= offset) {
+        throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, end-1, (byte)0));
+    }
+    byte trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
         end--;
+        if (end > offset) {
+            byte prev = buffer[end - 1];
+            if (prev == 0 || prev == ' ') {
+                end--;
+            }
+        }
     } else {
         throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, end - 1, trailer));
     }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+
+    if (start == end) {
+        // All NUL/space field after trimming
+        return 0L;
     }
 
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
