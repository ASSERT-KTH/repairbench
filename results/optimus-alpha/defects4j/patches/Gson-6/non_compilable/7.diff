diff --git a/tmp/06fe5077-d903-44b4-8fb8-0b1d72ab52e4_buggy.java b/tmp/f6e2eda3-6189-47ef-a86c-7d57ee878e3a_fixed.java
index 1c53d31..be31ade 100644
--- a/tmp/06fe5077-d903-44b4-8fb8-0b1d72ab52e4_buggy.java
+++ b/tmp/f6e2eda3-6189-47ef-a86c-7d57ee878e3a_fixed.java
@@ -1,20 +1,26 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
+  Object instance;
+  try {
+    instance = constructorConstructor.get(TypeToken.get(value)).construct();
+  } catch (Exception e) {
+    throw new IllegalArgumentException("Failed to construct instance of " + value, e);
+  }
+
   TypeAdapter<?> typeAdapter;
-    if (TypeAdapter.class.isAssignableFrom(value)) {
-      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
-    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
-      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+  if (instance instanceof TypeAdapter) {
+    typeAdapter = (TypeAdapter<?>) instance;
+  } else if (instance instanceof TypeAdapterFactory) {
+    typeAdapter = ((TypeAdapterFactory) instance).create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
+
+  if (typeAdapter != null && annotation.nullSafe()) {
     typeAdapter = typeAdapter.nullSafe();
+  }
   return typeAdapter;
 }
\ No newline at end of file
