diff --git a/tmp/433417a6-0880-4023-b2d7-7fe06649d522_buggy.java b/tmp/f5976dc9-54fb-45f0-99cd-2d299562b106_fixed.java
index 90fe130..c3f2a76 100644
--- a/tmp/433417a6-0880-4023-b2d7-7fe06649d522_buggy.java
+++ b/tmp/f5976dc9-54fb-45f0-99cd-2d299562b106_fixed.java
@@ -1,61 +1,56 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        char ch0 = str.charAt(0);
-        char ch1 = str.charAt(1);
-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
     if (len == 2) {
+        // e.g. "en"
+        char ch0 = str.charAt(0);
+        char ch1 = str.charAt(1);
+        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         return new Locale(str, "");
-        } else {
+    } else if (len == 5) {
+        // e.g. "en_GB"
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        char ch0 = str.charAt(0);
+        char ch1 = str.charAt(1);
         char ch3 = str.charAt(3);
         char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z' ||
+            ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
         return new Locale(str.substring(0, 2), str.substring(3, 5));
+    } else if (len >= 7) {
+        // "en__POSIX" or "en_GB_xxx"
+        if (str.charAt(2) != '_') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        char ch0 = str.charAt(0);
+        char ch1 = str.charAt(1);
+        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (str.charAt(3) == '_') {
+            // language + __ + variant, e.g. "fr__POSIX"
+            return new Locale(str.substring(0, 2), "", str.substring(4));
         } else {
+            // Either language + country + _ + variant ("en_GB_xxx")
+            char ch3 = str.charAt(3);
+            char ch4 = str.charAt(4);
+            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
             if (str.charAt(5) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
         }
+    } else {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
     }
 }
\ No newline at end of file
