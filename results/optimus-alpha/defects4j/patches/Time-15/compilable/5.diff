diff --git a/tmp/d61cd529-ff33-4a47-9de6-9358ddcaf115_buggy.java b/tmp/1b642c5f-657f-4cf9-be4f-9f1462b136c6_fixed.java
index a9a5e27..389fabc 100644
--- a/tmp/d61cd529-ff33-4a47-9de6-9358ddcaf115_buggy.java
+++ b/tmp/1b642c5f-657f-4cf9-be4f-9f1462b136c6_fixed.java
@@ -1,24 +1,34 @@
-    /**
-     * Multiply two values throwing an exception if overflow occurs.
-     * 
-     * @param val1  the first value
-     * @param val2  the second value
-     * @return the new total
-     * @throws ArithmeticException if the value is too big or too small
-     * @since 1.2
-     */
 public static long safeMultiply(long val1, int val2) {
     switch (val2) {
         case -1:
+            if (val1 == Long.MIN_VALUE) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
             return -val1;
         case 0:
             return 0L;
         case 1:
             return val1;
     }
+    // Special handling for val2 == Integer.MIN_VALUE
+    if (val2 == Integer.MIN_VALUE) {
+        if (val1 == 0L) {
+            return 0L;
+        }
+        if (val1 > 0L) {
+            if (val1 > Long.MAX_VALUE / val2) { // Note: val2 is negative, so this is a positive division
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        } else {
+            if (val1 < Long.MIN_VALUE / val2) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        }
+    }
     long total = val1 * val2;
-        if (total / val2 != val1) {
+    // Avoid division by zero and overflow when val2 == -1 and val1 == Long.MIN_VALUE
+    if (val2 != 0 && (total / val2 != val1 || (val1 == Long.MIN_VALUE && val2 == -1))) {
         throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
     }
     return total;
 }
\ No newline at end of file
