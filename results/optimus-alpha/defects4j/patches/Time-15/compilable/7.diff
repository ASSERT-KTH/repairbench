diff --git a/tmp/96bfaab3-86ec-4ca0-b56d-ee7dc67908b6_buggy.java b/tmp/e066f4db-95e8-4a5a-b2c2-6b0349c85506_fixed.java
index a9a5e27..fcb0a12 100644
--- a/tmp/96bfaab3-86ec-4ca0-b56d-ee7dc67908b6_buggy.java
+++ b/tmp/e066f4db-95e8-4a5a-b2c2-6b0349c85506_fixed.java
@@ -1,24 +1,33 @@
-    /**
-     * Multiply two values throwing an exception if overflow occurs.
-     * 
-     * @param val1  the first value
-     * @param val2  the second value
-     * @return the new total
-     * @throws ArithmeticException if the value is too big or too small
-     * @since 1.2
-     */
 public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
+    // Handle special cases first
+    if (val2 == -1) {
+        if (val1 == Long.MIN_VALUE) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
         return -val1;
-            case 0:
+    }
+    if (val2 == 0) {
         return 0L;
-            case 1:
+    }
+    if (val2 == 1) {
         return val1;
     }
     long total = val1 * val2;
-        if (total / val2 != val1) {
+    // Check for overflow
+    if (val1 > Long.MAX_VALUE / val2) {
+        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+    }
+    if (val1 < Long.MIN_VALUE / val2) {
+        throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+    }
+    if (val2 == Integer.MIN_VALUE && val1 != 0 && (val1 != 1 && val1 != -1)) {
+        // Special case: Integer.MIN_VALUE * >1 or <-1 always overflows long unless val1 is 0 or 1 or -1
+        if (val1 > 1 || val1 < -1) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+    }
+    if (val2 != 0 && total / val2 != val1) {
         throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
     }
     return total;
 }
\ No newline at end of file
