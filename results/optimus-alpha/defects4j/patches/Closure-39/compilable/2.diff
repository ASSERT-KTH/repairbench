diff --git a/tmp/f3f34b80-ba6a-452e-9bdb-f5a47602a1b6_buggy.java b/tmp/ee6c89df-0e0d-466a-98f3-26385db122b6_fixed.java
index e4d90e7..4fb305b 100644
--- a/tmp/f3f34b80-ba6a-452e-9bdb-f5a47602a1b6_buggy.java
+++ b/tmp/ee6c89df-0e0d-466a-98f3-26385db122b6_fixed.java
@@ -1,45 +1,50 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
+    int max = forAnnotations ? Integer.MAX_VALUE : MAX_PRETTY_PRINTED_PROPERTIES;
+    int totalProperties = propertyNames.size();
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
+      // For annotation strings, show type even if record is long
+      // For non-annotation toString(), potentially show {...}
+      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        sb.append("...");
         break;
+      } else {
+        sb.append(getPropertyType(property).toStringHelper(forAnnotations));
       }
+
+      ++i;
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
