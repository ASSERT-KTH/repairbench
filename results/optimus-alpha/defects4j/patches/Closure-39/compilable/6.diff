diff --git a/tmp/1acb8ca2-10dc-49fd-9d12-3c6f9b977af9_buggy.java b/tmp/a1425697-756d-4218-8f42-923c2efce10c_fixed.java
index e4d90e7..200afe9 100644
--- a/tmp/1acb8ca2-10dc-49fd-9d12-3c6f9b977af9_buggy.java
+++ b/tmp/a1425697-756d-4218-8f42-923c2efce10c_fixed.java
@@ -1,45 +1,54 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
+    int numProps = propertyNames.size();
+    int limit =
+        forAnnotations ? Integer.MAX_VALUE : MAX_PRETTY_PRINTED_PROPERTIES;
+
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      JSType propType = getPropertyType(property);
+      // In annotation case, use annotation string
+      sb.append(forAnnotations ? propType.toAnnotationString() : propType.toString());
 
       ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        // Print the rest properties in annotation case, else print ", ..."
+        if (numProps > MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
+        }
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
