diff --git a/tmp/e253e634-c116-4003-a69d-efb1ed9931f5_buggy.java b/tmp/09b4cae7-f542-40f1-bf4b-eb931327ae27_fixed.java
index b98f0a7..41d06d4 100644
--- a/tmp/e253e634-c116-4003-a69d-efb1ed9931f5_buggy.java
+++ b/tmp/09b4cae7-f542-40f1-bf4b-eb931327ae27_fixed.java
@@ -1,29 +1,67 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+
+    // Backwards inference: propagate parameter types to arguments
+    // (only applies to the call as performed; do not update the declared
+    // type of the function)
+    Node arg = constructor.getNext();
+    if (ct != null && ct.isConstructor()) {
+      Node param = ct.getParametersNode().getFirstChild();
+      while (arg != null && param != null) {
+        JSType paramType = param.getJSType();
+        if (paramType == null && param.getType() == com.google.javascript.rhino.Token.NAME && param.hasChildren()) {
+          // Optional, destructuring or default param: get its child
+          paramType = param.getFirstChild().getJSType();
+        }
+        if (paramType != null) {
+          updateTypeOfArgument(arg, paramType, scope);
+        }
+        arg = arg.getNext();
+        param = param.getNext();
+      }
+    }
+
+    // Traverse arguments after inference, so updated types are correct in scope
+    for (Node argNode = constructor.getNext(); argNode != null; argNode = argNode.getNext()) {
+      scope = traverse(argNode, scope);
     }
     return scope;
 }
+
+// Helper to update the type of the argument, propagating backwards inference.
+private void updateTypeOfArgument(Node arg, JSType paramType, FlowScope flowScope) {
+    JSType argType = arg.getJSType();
+    if (argType != null && !paramType.isUnknownType() && !paramType.equals(argType)) {
+      JSType resolvedType = paramType;
+      // Merge to get the most specific type that can satisfy both.
+      // (optional, implementation-specific)
+      arg.setJSType(resolvedType);
+      // Optionally, update the variable's type in the flow scope, if appropriate.
+      if (arg.isName()) {
+        flowScope.inferSlotType(arg.getString(), resolvedType);
+      }
+    }
+}
\ No newline at end of file
