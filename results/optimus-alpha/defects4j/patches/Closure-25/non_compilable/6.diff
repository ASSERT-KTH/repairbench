diff --git a/tmp/2a4ed8fc-09b6-49d2-94b1-d76d2694f202_buggy.java b/tmp/84512995-ee5d-4045-af02-e12f13d31cf6_fixed.java
index b98f0a7..e1bb8c9 100644
--- a/tmp/2a4ed8fc-09b6-49d2-94b1-d76d2694f202_buggy.java
+++ b/tmp/84512995-ee5d-4045-af02-e12f13d31cf6_fixed.java
@@ -1,29 +1,39 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
+    // Traverse argument children first to enable backwards inference
+    List<Node> args = new ArrayList<>();
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      args.add(arg);
+    }
+
+    // Traverse constructor after the arguments for backwards inference
+    for (Node arg : args) {
+      scope = traverse(arg, scope);
+    }
+
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Perform backwards inference from parameters to arguments
+          ct.inferInstanceType(args);
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
     return scope;
   }
\ No newline at end of file
