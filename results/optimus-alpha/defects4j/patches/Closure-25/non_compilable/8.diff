diff --git a/tmp/b1588dec-0856-4e60-af05-083061772b11_buggy.java b/tmp/602aa449-a21e-4883-830a-eb33b0c41b21_fixed.java
index b98f0a7..0d0912f 100644
--- a/tmp/b1588dec-0856-4e60-af05-083061772b11_buggy.java
+++ b/tmp/602aa449-a21e-4883-830a-eb33b0c41b21_fixed.java
@@ -1,29 +1,52 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
+    // Traverse arguments first to enable backwards inference on them.
+    // In a call like: new F(y), traversing 'y' before resolving the constructor type
+    // allows backwards inference to propagate expected parameter types to 'y'.
+    Node lastArg = null;
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      lastArg = arg;
+      scope = traverse(arg, scope);
+    }
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+
+          // Add backwards inference: update argument types based on constructor param types.
+          FunctionType functionType = ct;
+          Node param = constructor.getNext();
+          int i = 0;
+          ImmutableList<JSType> paramTypes = functionType.getNormalizedArgumentTypes();
+          for (JSType paramType : paramTypes) {
+            if (param == null) {
+              break;
+            }
+            JSType argType = param.getJSType();
+            if (argType != null && !paramType.isUnknownType()) {
+              // Use backwards inference to update the type of the argument variable
+              updateTypeOfVariable(param, paramType, scope);
+            }
+            param = param.getNext();
+            i++;
+          }
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
     return scope;
   }
\ No newline at end of file
