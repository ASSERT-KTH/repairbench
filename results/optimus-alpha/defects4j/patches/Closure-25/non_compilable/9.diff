diff --git a/tmp/4e3657d3-0638-4d99-bb80-311028648b6e_buggy.java b/tmp/93e14bab-e27a-45f8-a42e-65fcd6e52366_fixed.java
index b98f0a7..3934711 100644
--- a/tmp/4e3657d3-0638-4d99-bb80-311028648b6e_buggy.java
+++ b/tmp/93e14bab-e27a-45f8-a42e-65fcd6e52366_fixed.java
@@ -1,29 +1,36 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
+    JSType type = null;
+
+    // First, process arguments to allow backwards inference before traversing the constructor
+    List<Node> args = new ArrayList<>();
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      args.add(arg);
+    }
+    // Traverse arguments first (backwards inference happens here)
+    for (Node arg : args) {
+      scope = traverse(arg, scope);
+    }
+    // Now traverse the constructor
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
+
     return scope;
   }
\ No newline at end of file
