diff --git a/tmp/3479ad7f-66ac-43c4-a679-c3e4434f8a3d_buggy.java b/tmp/10d1211c-8d16-48a4-b6a8-fddbd81cb759_fixed.java
index b98f0a7..593c05e 100644
--- a/tmp/3479ad7f-66ac-43c4-a679-c3e4434f8a3d_buggy.java
+++ b/tmp/10d1211c-8d16-48a4-b6a8-fddbd81cb759_fixed.java
@@ -1,29 +1,38 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
+    // Traverse arguments first to enable backwards inference before type is fixed.
+    Node argStart = constructor.getNext();
+    List<Node> args = new ArrayList<>();
+    for (Node arg = argStart; arg != null; arg = arg.getNext()) {
+      args.add(arg);
+    }
+    // Traverse arguments first.
+    for (Node arg : args) {
+      scope = traverse(arg, scope);
+    }
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Backwards inference from arguments to parameter types.
+          ct.inferJsDocInfoForCall(n, args.toArray(new Node[0]), this);
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
     return scope;
   }
\ No newline at end of file
