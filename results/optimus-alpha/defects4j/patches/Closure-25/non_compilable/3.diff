diff --git a/tmp/1d11a978-eaee-4eb0-8cf9-ee7e1469e474_buggy.java b/tmp/1e4c12b3-eeb3-4b0d-b155-c0eabf223c2d_fixed.java
index b98f0a7..81f4b88 100644
--- a/tmp/1d11a978-eaee-4eb0-8cf9-ee7e1469e474_buggy.java
+++ b/tmp/1e4c12b3-eeb3-4b0d-b155-c0eabf223c2d_fixed.java
@@ -1,29 +1,34 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
+    // Collect argument nodes before traversing, so we can call traverse on args after setting new's type.
+    List<Node> argNodes = new ArrayList<Node>();
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      argNodes.add(arg); // preserve argument order
+    }
+
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Traverse arguments now, after setting n's type, to enable backwards inference.
+    for (Node arg : argNodes) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
