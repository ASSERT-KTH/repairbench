diff --git a/tmp/13f762a9-5c64-4b2c-ab25-9686cfac6ec4_buggy.java b/tmp/2d274812-8690-49ee-9817-0a095b900a26_fixed.java
index b98f0a7..b1d9268 100644
--- a/tmp/13f762a9-5c64-4b2c-ab25-9686cfac6ec4_buggy.java
+++ b/tmp/2d274812-8690-49ee-9817-0a095b900a26_fixed.java
@@ -1,29 +1,55 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
+  List<Node> argNodes = new ArrayList<>();
+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    argNodes.add(arg);
+  }
+
+  // 1. Traverse only the constructor first
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
+        // Do backwards inference from argNodes to parameters, BEFORE traversing args.
+        inferParameters(argNodes, ct, scope);
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+  // 2. Now traverse args
+  for (Node arg : argNodes) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
+
+// Helper method to trigger backwards inference
+private void inferParameters(List<Node> argNodes, FunctionType ct, FlowScope scope) {
+  int paramCount = 0;
+  for (Node param = ct.getParametersNode().getFirstChild(); param != null; param = param.getNext()) {
+    if (paramCount >= argNodes.size()) {
+      break;
+    }
+    Node arg = argNodes.get(paramCount);
+    JSType paramType = param.getJSType();
+    if (paramType != null) {
+      updateTypeOfExpression(scope, arg, paramType);
+    }
+    paramCount++;
+  }
+}
\ No newline at end of file
