diff --git a/tmp/6d2a4018-c6b5-493a-a3bf-14e98efee761_buggy.java b/tmp/ac232f76-824f-4aa4-a798-a41c21eaf916_fixed.java
index eed2194..00c4723 100644
--- a/tmp/6d2a4018-c6b5-493a-a3bf-14e98efee761_buggy.java
+++ b/tmp/ac232f76-824f-4aa4-a798-a41c21eaf916_fixed.java
@@ -1,55 +1,42 @@
-    /**
-     * Gets a time zone instance for the specified offset to UTC in hours and minutes.
-     * This method assumes 60 minutes in an hour, and standard length minutes.
-     * <p>
-     * This factory is a convenient way of constructing zones with a fixed offset.
-     * The hours value must be in the range -23 to +23.
-     * The minutes value must be in the range -59 to +59.
-     * The following combinations of sign for the hour and minute are possible:
-     * <pre>
-     *  Hour    Minute    Example    Result
-     * 
-     *  +ve     +ve       (2, 15)    +02:15
-     *  +ve     zero      (2, 0)     +02:00
-     *  +ve     -ve       (2, -15)   IllegalArgumentException
-     * 
-     *  zero    +ve       (0, 15)    +00:15
-     *  zero    zero      (0, 0)     +00:00
-     *  zero    -ve       (0, -15)   -00:15
-     * 
-     *  -ve     +ve       (-2, 15)   -02:15
-     *  -ve     zero      (-2, 0)    -02:00
-     *  -ve     -ve       (-2, -15)  -02:15
-     * </pre>
-     * Note that in versions before 2.3, the minutes had to be zero or positive.
-     * 
-     * @param hoursOffset  the offset in hours from UTC, from -23 to +23
-     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
-     * @return the DateTimeZone object for the offset
-     * @throws IllegalArgumentException if any value is out of range, the minutes are negative
-     *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
-     */
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
     if (hoursOffset == 0 && minutesOffset == 0) {
         return DateTimeZone.UTC;
     }
     if (hoursOffset < -23 || hoursOffset > 23) {
         throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
     }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+    if (minutesOffset < -59 || minutesOffset > 59) {
         throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
     }
-        int offset = 0;
-        try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
+
+    // Check illegal combinations
+    if (hoursOffset > 0 && minutesOffset < 0) {
+        throw new IllegalArgumentException("Positive hours must not have negative minutes: " + hoursOffset + ":" + minutesOffset);
+    }
+
+    int offsetMinutes;
+    if (hoursOffset < 0) {
+        // For negative hours, minutes are always subtracted from the negative hour
+        offsetMinutes = hoursOffset * 60 - Math.abs(minutesOffset);
+    } else if (hoursOffset > 0) {
+        // Positive hours, positive minutes or zero
+        offsetMinutes = hoursOffset * 60 + minutesOffset;
     } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
+        // hours == 0
+        offsetMinutes = minutesOffset;
     }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+
+    int offset;
+    try {
+        offset = FieldUtils.safeMultiply(offsetMinutes, DateTimeConstants.MILLIS_PER_MINUTE);
     } catch (ArithmeticException ex) {
         throw new IllegalArgumentException("Offset is too large");
     }
+
+    // verify that offset does not exceed bounds
+    if (Math.abs(offset) > (23 * DateTimeConstants.MILLIS_PER_HOUR + 59 * DateTimeConstants.MILLIS_PER_MINUTE + 59 * 1000)) {
+        throw new IllegalArgumentException("Offset is too large");
+    }
+
     return forOffsetMillis(offset);
 }
\ No newline at end of file
