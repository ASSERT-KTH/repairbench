diff --git a/tmp/fa790058-2887-4144-b1e4-5ca4ba10f6c1_buggy.java b/tmp/3500c505-0a09-4aba-b8ca-f4af44f61eb9_fixed.java
index 373b1e8..4969e7d 100644
--- a/tmp/fa790058-2887-4144-b1e4-5ca4ba10f6c1_buggy.java
+++ b/tmp/3500c505-0a09-4aba-b8ca-f4af44f61eb9_fixed.java
@@ -1,37 +1,44 @@
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
     // BOM:
     if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+        && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
         i = 3;
     }
 
     int end;
-            for (int j = input.length; i < j; ++i) {
-                int o = input[i];
+    int j = input.length;
+    while (i < j) {
+        int o = input[i] & 0xFF; // make sure o is unsigned for bit operations
         if ((o & 0x80) == 0) {
-                    continue; // ASCII
+            i++; // ASCII
+            continue;
         }
 
         // UTF-8 leading:
         if ((o & 0xE0) == 0xC0) {
             end = i + 1;
         } else if ((o & 0xF0) == 0xE0) {
             end = i + 2;
         } else if ((o & 0xF8) == 0xF0) {
             end = i + 3;
         } else {
             return false;
         }
 
+        // Check for out-of-bounds before attempting to access input[end]
+        if (end >= j) {
+            return false;
+        }
 
-                while (i < end) {
         i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+        while (i <= end) {
+            int oo = input[i] & 0xFF;
+            if ((oo & 0xC0) != 0x80) {
                 return false;
             }
+            i++;
         }
     }
     return true;
 }
\ No newline at end of file
