diff --git a/tmp/b8dede1c-43b5-42c3-b523-ec5a8d8a5230_buggy.java b/tmp/5696b030-0f26-4648-b2d7-b6a2c0d1cfe3_fixed.java
index 0b7c52e..3ff87b8 100644
--- a/tmp/b8dede1c-43b5-42c3-b523-ec5a8d8a5230_buggy.java
+++ b/tmp/5696b030-0f26-4648-b2d7-b6a2c0d1cfe3_fixed.java
@@ -1,27 +1,30 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Maybe STRING, GET, SET, or number as string key
 
-        // We should never see a mix of numbers and strings.
+        // Only process children which are not quoted (e.g. plain a: 1 but NOT 'a': 1)
+        // This matches closure's handling for custom property disambiguation.
+        if (!child.isQuotedString()) {
           String name = child.getString();
           T type = typeSystem.getType(getScope(), n, name);
 
           Property prop = getProperty(name);
           if (!prop.scheduleRenaming(child,
                                      processProperty(t, prop, type, null))) {
             // TODO(user): It doesn't look like the user can do much in this
             // case right now.
             if (propertiesToErrorFor.containsKey(name)) {
               compiler.report(JSError.make(
                   t.getSourceName(), child, propertiesToErrorFor.get(name),
                   Warnings.INVALIDATION, name,
                   (type == null ? "null" : type.toString()), n.toString(), ""));
             }
           }
         }
       }
+    }
\ No newline at end of file
