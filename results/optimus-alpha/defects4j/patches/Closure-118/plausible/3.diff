diff --git a/tmp/d4fbdb12-522b-49ae-9dec-bfc3192dd237_buggy.java b/tmp/545a6bba-e4de-4f52-b013-76188b604da0_fixed.java
index 0b7c52e..a9c4b52 100644
--- a/tmp/d4fbdb12-522b-49ae-9dec-bfc3192dd237_buggy.java
+++ b/tmp/545a6bba-e4de-4f52-b013-76188b604da0_fixed.java
@@ -1,27 +1,38 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
-        // We should never see a mix of numbers and strings.
+        // Only process quoted keys for prototype object literals.
+        if (n.isObjectLit()
+            && n.getParent() != null
+            && n.getParent().isAssign()
+            && n.getParent().getFirstChild() != null
+            && n.getParent().getFirstChild().isGetProp()
+            && "prototype".equals(n.getParent().getFirstChild().getLastChild().getString())
+            && child.isQuotedString()) {
+          // Quoted keys on prototype assignments should not participate in renaming/type inference.
+          continue;
+        }
+
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
