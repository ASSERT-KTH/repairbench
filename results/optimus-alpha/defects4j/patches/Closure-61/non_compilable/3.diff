diff --git a/tmp/9a09ff8a-2adc-4aaf-9b60-cb94f2cb803a_buggy.java b/tmp/db78464a-4924-4dc4-80e6-fba07f00f365_fixed.java
index b36c3f0..09659bf 100644
--- a/tmp/9a09ff8a-2adc-4aaf-9b60-cb94f2cb803a_buggy.java
+++ b/tmp/db78464a-4924-4dc4-80e6-fba07f00f365_fixed.java
@@ -1,58 +1,73 @@
 /**
  * Returns true if calls to this function have side effects.
  *
  * @param callNode The call node to inspected.
  * @param compiler A compiler object to provide program state changing
  *     context information. Can be null.
  */
 static boolean functionCallHasSideEffects(
     Node callNode, @Nullable AbstractCompiler compiler) {
   if (callNode.getType() != Token.CALL) {
     throw new IllegalStateException(
         "Expected CALL node, got " + Token.name(callNode.getType()));
   }
 
   if (callNode.isNoSideEffectsCall()) {
     return false;
   }
 
   Node nameNode = callNode.getFirstChild();
 
   // Built-in functions with no side effects.
   if (nameNode.getType() == Token.NAME) {
     String name = nameNode.getString();
     if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
       return false;
     }
   } else if (nameNode.getType() == Token.GETPROP) {
+
+    // === FIX: recognize Math.* calls ===
+    // Detect calls like Math.sin(...), Math.random(...), etc.
+    Node obj = nameNode.getFirstChild();
+    Node prop = nameNode.getLastChild();
+    if (obj != null && prop != null && obj.getType() == Token.NAME) {
+      String objName = obj.getString();
+      String propName = prop.getString();
+      if ("Math".equals(objName) &&
+          MATH_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(propName)) {
+        return false;
+      }
+    }
+    // === END FIX ===
+
     if (callNode.hasOneChild()
         && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
               nameNode.getLastChild().getString())) {
       return false;
     }
 
     if (callNode.isOnlyModifiesThisCall()
         && evaluatesToLocalValue(nameNode.getFirstChild())) {
       return false;
     }
 
     // Functions in the "Math" namespace have no side effects.
 
     if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
       if (nameNode.getFirstChild().getType() == Token.REGEXP
           && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
         return false;
       } else if (nameNode.getFirstChild().getType() == Token.STRING
           && STRING_REGEXP_METHODS.contains(
               nameNode.getLastChild().getString())) {
         Node param = nameNode.getNext();
         if (param != null &&
             (param.getType() == Token.STRING
                 || param.getType() == Token.REGEXP))
         return false;
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
