diff --git a/tmp/7e543f0c-2ccf-48a6-9722-684eb10c5e61_buggy.java b/tmp/776fc592-f840-46ac-8d05-5bb709af64cd_fixed.java
index 8e93a5e..a5005f5 100644
--- a/tmp/7e543f0c-2ccf-48a6-9722-684eb10c5e61_buggy.java
+++ b/tmp/776fc592-f840-46ac-8d05-5bb709af64cd_fixed.java
@@ -1,43 +1,49 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // Handle multi-line input: split on newlines and process each line separately
+    String[] lines = text.split("\\r?\\n");
+    for (int i = 0; i < lines.length; ++i) {
+        String line = lines[i];
+        int pos = findWrapPos(line, width, 0);
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        if (pos == -1) {
+            sb.append(rtrim(line));
+        } else {
+            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
 
             // all following lines must be padded with nextLineTabStop space 
             // characters
             final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            String subLine = line;
+            while (true) {
+                subLine = padding + subLine.substring(pos).trim();
+                pos = findWrapPos(subLine, width, nextLineTabStop);
 
-            if (pos == -1)
-            {
-                sb.append(text);
+                if (pos == -1) {
+                    sb.append(subLine);
+                    break;
+                }
+                sb.append(rtrim(subLine.substring(0, pos))).append(defaultNewLine);
+            }
+        }
+        // only append a new line if this wasn't the last original input line
+        if (i < lines.length - 1) {
+            sb.append(defaultNewLine);
+        }
+    }
 
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
