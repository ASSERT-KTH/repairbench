diff --git a/tmp/7e099c74-8776-41e2-84b9-9561c9231ccf_buggy.java b/tmp/dbfdfb45-4a15-4b90-ba88-ce5a151b5c88_fixed.java
index 8e93a5e..e06be58 100644
--- a/tmp/7e099c74-8776-41e2-84b9-9561c9231ccf_buggy.java
+++ b/tmp/dbfdfb45-4a15-4b90-ba88-ce5a151b5c88_fixed.java
@@ -1,43 +1,31 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // Support handling for texts which already contain newlines
+    String[] tokens = text.split("\\r?\\n", -1);
+    for (int i = 0; i < tokens.length; ++i) {
+        String line = tokens[i];
+        boolean firstLine = true;
+        while (true) {
+            int curWidth = firstLine ? width : width - nextLineTabStop;
+            int pos = findWrapPos(line, curWidth, firstLine ? 0 : nextLineTabStop);
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+            if (pos == -1) {
+                if (!firstLine && nextLineTabStop > 0)
+                    sb.append(createPadding(nextLineTabStop));
+                sb.append(rtrim(line));
+                break;
             }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
 
-                return sb;
+            if (!firstLine && nextLineTabStop > 0)
+                sb.append(createPadding(nextLineTabStop));
+            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+            line = line.substring(pos).trim();
+            firstLine = false;
         }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        if (i < tokens.length - 1) {
+            sb.append(defaultNewLine);
         }
     }
+    return sb;
+}
\ No newline at end of file
