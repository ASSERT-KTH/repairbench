diff --git a/tmp/fc0c23c7-5a2e-4a2e-9024-1c4814ef5b0f_buggy.java b/tmp/1dbb7ad6-f8dc-45e0-9014-58f5ca181d7c_fixed.java
index 8e93a5e..0c3a467 100644
--- a/tmp/fc0c23c7-5a2e-4a2e-9024-1c4814ef5b0f_buggy.java
+++ b/tmp/1dbb7ad6-f8dc-45e0-9014-58f5ca181d7c_fixed.java
@@ -1,43 +1,61 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // handle existing newlines in the input text
+    int lineStart = 0;
+    while (true)
+    {
+        int newLine = text.indexOf('\n', lineStart);
+        String line;
+        if (newLine == -1)
+        {
+            line = text.substring(lineStart);
+        }
+        else
+        {
+            line = text.substring(lineStart, newLine);
+        }
+
+        // Process one logical line
+        int pos = findWrapPos(line, width, 0);
 
         if (pos == -1)
         {
-            sb.append(rtrim(text));
-
-            return sb;
+            sb.append(rtrim(line));
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        else
+        {
+            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
             final String padding = createPadding(nextLineTabStop);
 
+            String remaining = line.substring(pos).trim();
             while (true)
             {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+                remaining = padding + remaining;
+                pos = findWrapPos(remaining, width, nextLineTabStop);
 
                 if (pos == -1)
                 {
-                sb.append(text);
+                    sb.append(remaining);
+                    break;
+                }
+                sb.append(rtrim(remaining.substring(0, pos))).append(defaultNewLine);
+                remaining = remaining.substring(pos).trim();
+            }
+        }
+
+        // If there are more lines, add a new line and continue processing
+        if (newLine == -1)
+        {
+            break;
+        }
+        else
+        {
+            sb.append(defaultNewLine);
+            lineStart = newLine + 1;
+        }
+    }
 
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
