diff --git a/tmp/882c8b60-3d05-4fe9-b2cb-0c2a54a47dd8_buggy.java b/tmp/72c13f0c-8000-4104-83a9-97f257b98dc9_fixed.java
index 8e93a5e..ef27b4f 100644
--- a/tmp/882c8b60-3d05-4fe9-b2cb-0c2a54a47dd8_buggy.java
+++ b/tmp/72c13f0c-8000-4104-83a9-97f257b98dc9_fixed.java
@@ -1,43 +1,57 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // Handle null or empty string
+    if (text == null) {
+        return sb;
+    }
+    int lineLen = 0;
+    int pos = 0;
+    String nl = defaultNewLine;
+    String padding = createPadding(nextLineTabStop);
 
-        if (pos == -1)
-        {
+    while (text.length() > 0) {
+        // Handle embedded newlines (honour user newlines)
+        int newline = text.indexOf(nl);
+        String line;
+        if (newline != -1 && newline <= width) {
+            line = text.substring(0, newline);
+            sb.append(rtrim(line));
+            sb.append(nl);
+            text = text.substring(newline + nl.length());
+            if (text.length() > 0) {
+                sb.append(padding);
+            }
+            continue;
+        }
+
+        int wrapPos = findWrapPos(text, width, pos);
+
+        if (wrapPos == -1) {
             sb.append(rtrim(text));
+            break;
+        } else {
+            line = text.substring(0, wrapPos);
+            sb.append(rtrim(line));
+            sb.append(nl);
+            text = text.substring(wrapPos).trim();
 
-            return sb;
+            if (text.length() > 0) {
+                sb.append(padding);
             }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
         }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
+
+    return sb;
 }
\ No newline at end of file
