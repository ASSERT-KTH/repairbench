diff --git a/tmp/4aaf92fe-240a-4c2c-917d-544ad48b0ead_buggy.java b/tmp/e30b5fe2-ac04-4a44-bc76-f2116e3d67d7_fixed.java
index 8e93a5e..045b2d9 100644
--- a/tmp/4aaf92fe-240a-4c2c-917d-544ad48b0ead_buggy.java
+++ b/tmp/e30b5fe2-ac04-4a44-bc76-f2116e3d67d7_fixed.java
@@ -1,43 +1,61 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+    // handle already-wrapped text correctly
+    int start = 0;
+    int len = text.length();
+    while (start < len) {
+        // Find the next newline, if any
+        int newline = text.indexOf(defaultNewLine, start);
+        String line;
+        boolean isLastLine;
+        if (newline == -1) {
+            line = text.substring(start);
+            isLastLine = true;
+        } else {
+            line = text.substring(start, newline);
+            isLastLine = false;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        // Now wrap this line as normal
+        int pos = findWrapPos(line, width, 0);
+        if (pos == -1) {
+            sb.append(rtrim(line));
+        } else {
+            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+
             final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            while (true) {
+                line = padding + line.substring(pos).trim();
+                pos = findWrapPos(line, width, nextLineTabStop);
 
-            if (pos == -1)
-            {
-                sb.append(text);
+                if (pos == -1) {
+                    sb.append(line);
+                    break;
+                }
 
+                sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+            }
+        }
+
+        if (!isLastLine) {
+            sb.append(defaultNewLine);
+            start = newline + defaultNewLine.length();
+        } else {
+            break;
+        }
+    }
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
