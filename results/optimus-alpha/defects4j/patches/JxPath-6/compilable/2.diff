diff --git a/tmp/54d19a81-aff3-4264-b0c9-32410f96689a_buggy.java b/tmp/eb787516-1541-4665-8663-24dc7bddb24f_fixed.java
index f650982..8901c5b 100644
--- a/tmp/54d19a81-aff3-4264-b0c9-32410f96689a_buggy.java
+++ b/tmp/eb787516-1541-4665-8663-24dc7bddb24f_fixed.java
@@ -1,42 +1,41 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
+    // If left is a Collection, iterate over its elements.
+    if (l instanceof Collection && !(l instanceof Pointer)) {
         l = ((Collection) l).iterator();
     }
 
-        if (r instanceof Collection) {
+    // If right is a Collection, iterate over its elements.
+    if (r instanceof Collection && !(r instanceof Pointer)) {
         r = ((Collection) r).iterator();
     }
 
+    // Handle Iterator-Object and Object-Iterator comparisons
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
     return equal(l, r);
 }
\ No newline at end of file
