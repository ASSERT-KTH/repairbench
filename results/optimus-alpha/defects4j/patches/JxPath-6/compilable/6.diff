diff --git a/tmp/d00fad98-60bb-444f-b116-6a1d18f22b11_buggy.java b/tmp/26f1c6a5-ee7b-41d2-b6b2-cfd0c495e0b8_fixed.java
index f650982..53cb47a 100644
--- a/tmp/d00fad98-60bb-444f-b116-6a1d18f22b11_buggy.java
+++ b/tmp/26f1c6a5-ee7b-41d2-b6b2-cfd0c495e0b8_fixed.java
@@ -1,42 +1,52 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    boolean lIsIterator = false;
+    boolean rIsIterator = false;
+
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
+        lIsIterator = true;
+    }
+    else if (l instanceof Iterator) {
+        lIsIterator = true;
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
+        rIsIterator = true;
+    }
+    else if (r instanceof Iterator) {
+        rIsIterator = true;
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    // Fix: If one is iterator/collection and the other is not, then iterate and compare
+    if (lIsIterator && !rIsIterator) {
         return contains((Iterator) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+    if (!lIsIterator && rIsIterator) {
         return contains((Iterator) r, l);
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
+    // If both are iterators, compare accordingly
+    if (lIsIterator && rIsIterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+    // If both are not iterators, perform normal equality
     return equal(l, r);
 }
\ No newline at end of file
