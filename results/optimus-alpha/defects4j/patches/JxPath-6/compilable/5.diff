diff --git a/tmp/96cb3e0f-f500-4b43-850e-23e63d5170b9_buggy.java b/tmp/024c287c-2793-492b-a71f-b562fe747512_fixed.java
index f650982..e011c93 100644
--- a/tmp/96cb3e0f-f500-4b43-850e-23e63d5170b9_buggy.java
+++ b/tmp/024c287c-2793-492b-a71f-b562fe747512_fixed.java
@@ -1,42 +1,43 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
-        }
+        // Do NOT automatically convert Collection to Iterator here.
+        // Only treat as Iterator for the 'many' side of comparision.
 
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
-        }
+        boolean lIsCollection = l instanceof Collection;
+        boolean rIsCollection = r instanceof Collection;
+        boolean lIsIterator = l instanceof Iterator;
+        boolean rIsIterator = r instanceof Iterator;
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // Convert Collection to Iterator only if matched with a scalar
+        if ((lIsCollection || lIsIterator) && !(rIsCollection || rIsIterator)) {
+            Iterator lit = l instanceof Iterator ? (Iterator) l : ((Collection) l).iterator();
+            return contains(lit, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (!(lIsCollection || lIsIterator) && (rIsCollection || rIsIterator)) {
+            Iterator rit = r instanceof Iterator ? (Iterator) r : ((Collection) r).iterator();
+            return contains(rit, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        if ((lIsCollection || lIsIterator) && (rIsCollection || rIsIterator)) {
+            Iterator lit = l instanceof Iterator ? (Iterator) l : ((Collection) l).iterator();
+            Iterator rit = r instanceof Iterator ? (Iterator) r : ((Collection) r).iterator();
+            return findMatch(lit, rit);
         }
         return equal(l, r);
     }
\ No newline at end of file
