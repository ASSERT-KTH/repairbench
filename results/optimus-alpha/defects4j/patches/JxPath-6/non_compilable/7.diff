diff --git a/tmp/02a62d82-36ce-4c54-957b-195c106b7c8e_buggy.java b/tmp/7fe00c71-7c26-47c4-a243-6473d31ae542_fixed.java
index f650982..1d4695d 100644
--- a/tmp/02a62d82-36ce-4c54-957b-195c106b7c8e_buggy.java
+++ b/tmp/7fe00c71-7c26-47c4-a243-6473d31ae542_fixed.java
@@ -1,42 +1,50 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // If either l or r is a Collection, convert it to an Iterator for comparison
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
+    } else if (l != null && l.getClass().isArray()) {
+        l = Arrays.asList((Object[]) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
+    } else if (r != null && r.getClass().isArray()) {
+        r = Arrays.asList((Object[]) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+    // FIX: handle case where l or r is a singleton List (from VariableContext) and the other is not
+    if (l instanceof List && ((List) l).size() == 1) {
+        l = ((List) l).get(0);
+    }
+    if (r instanceof List && ((List) r).size() == 1) {
+        r = ((List) r).get(0);
+    }
     return equal(l, r);
 }
\ No newline at end of file
