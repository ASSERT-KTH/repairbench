diff --git a/tmp/87f73426-f090-4cbf-9de6-9a091a37a98a_buggy.java b/tmp/2c6e1ecf-90d3-4a44-b879-2986fe5c4372_fixed.java
index 7ea7ac9..9f35dbb 100644
--- a/tmp/87f73426-f090-4cbf-9de6-9a091a37a98a_buggy.java
+++ b/tmp/2c6e1ecf-90d3-4a44-b879-2986fe5c4372_fixed.java
@@ -1,63 +1,58 @@
-    /**
-     * Gets a copy of this date with the specified field set to a new value.
-     * <p>
-     * If this partial did not previously support the field, the new one will.
-     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
-     * <p>
-     * For example, if the field type is <code>dayOfMonth</code> then the day
-     * would be changed/added in the returned instance.
-     *
-     * @param fieldType  the field type to set, not null
-     * @param value  the value to set
-     * @return a copy of this instance with the field set
-     * @throws IllegalArgumentException if the value is null or invalid
-     */
 public Partial with(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
     int index = indexOf(fieldType);
     if (index == -1) {
+        DateTimeField field = fieldType.getField(iChronology);
+        try {
+            // Try setting value to check if it is valid with current field values
+            int[] newValues = field.set(this, getValues(), value);
+            // If succeeded, insert the field as normal
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
-            int[] newValues = new int[newTypes.length];
+            int[] finalValues = new int[newTypes.length];
 
             // find correct insertion point to keep largest-smallest order
             int i = 0;
             DurationField unitField = fieldType.getDurationType().getField(iChronology);
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
                         if (compare > 0) {
                             break;
                         } else if (compare == 0) {
                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                             if (rangeField.compareTo(loopRangeField) > 0) {
                                 break;
                             }
                         }
                     }
                 }
             }
             System.arraycopy(iTypes, 0, newTypes, 0, i);
-            System.arraycopy(iValues, 0, newValues, 0, i);
+            System.arraycopy(getValues(), 0, finalValues, 0, i);
             newTypes[i] = fieldType;
-            newValues[i] = value;
+            finalValues[i] = value;
             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
+            System.arraycopy(getValues(), i, finalValues, i + 1, newTypes.length - i - 1);
+
             // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
-            Partial newPartial = new Partial(iChronology, newTypes, newValues);
-            iChronology.validate(newPartial, newValues);
+            Partial newPartial = new Partial(iChronology, newTypes, finalValues);
+            iChronology.validate(newPartial, finalValues);
             return newPartial;
+        } catch (IllegalArgumentException ex) {
+            // Invalid value for this field on this Partial, throw immediately
+            throw ex;
+        }
     }
     if (value == getValue(index)) {
         return this;
     }
     int[] newValues = getValues();
     newValues = getField(index).set(this, index, newValues, value);
     return new Partial(this, newValues);
 }
\ No newline at end of file
