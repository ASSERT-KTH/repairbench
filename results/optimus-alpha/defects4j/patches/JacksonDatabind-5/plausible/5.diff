diff --git a/tmp/375dbd27-d6df-4c4c-a174-600f16356629_buggy.java b/tmp/992caf8b-b187-43c7-a9c4-db7edf9e3408_fixed.java
index b2db1d6..199714d 100644
--- a/tmp/375dbd27-d6df-4c4c-a174-600f16356629_buggy.java
+++ b/tmp/992caf8b-b187-43c7-a9c4-db7edf9e3408_fixed.java
@@ -1,29 +1,25 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
+    // For multi-level merge, we must process from most distant parent mix-in down to the target mix-in itself
     List<Class<?>> parents = new ArrayList<Class<?>>();
-        parents.add(mixInCls);
+    // collect super types in reverse (most distant ancestor first, as ClassUtil.findSuperTypes does)
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+    parents.add(mixInCls); // add mixIn class itself last -- that's the most immediate ancestor
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Only add if not already present in mixIns
+                if (mixIns.find(m) == null) {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
\ No newline at end of file
