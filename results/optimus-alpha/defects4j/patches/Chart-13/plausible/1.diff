diff --git a/tmp/9067e116-ce7a-4331-8caf-86b12c9b7744_buggy.java b/tmp/ed7ef76b-57db-43e1-bbac-c5fb08634bac_fixed.java
index 63a7c80..86459bf 100644
--- a/tmp/9067e116-ce7a-4331-8caf-86b12c9b7744_buggy.java
+++ b/tmp/ed7ef76b-57db-43e1-bbac-c5fb08634bac_fixed.java
@@ -1,77 +1,98 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint  the constraint.
  * @param g2  the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
+
+    // Handle top block
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                new Range(0.0, Double.POSITIVE_INFINITY),
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
+
+    // Handle bottom block
     w[1] = w[0];
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+        // The upper bound for the height cannot be less than 0.0
+        double remaining = Math.max(0.0, constraint.getHeight() - h[0]);
+        RectangleConstraint c2 = new RectangleConstraint(
+                w[0], null, LengthConstraintType.FIXED, 0.0,
+                new Range(0.0, Double.POSITIVE_INFINITY),
+                LengthConstraintType.RANGE
+        );
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+    // Height available for left, right, and center blocks
+    h[2] = Math.max(0.0, constraint.getHeight() - h[0] - h[1]);
+    // Handle left block
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth()),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
+
+    // Height for right block is same as available to left/center
     h[3] = h[2];
+
+    // Handle right block
+    double rightAvailableWidth = Math.max(0.0, constraint.getWidth() - w[2]);
     if (this.rightBlock != null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                new Range(0.0, rightAvailableWidth),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
+
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+
+    // Center block width is width left after left and right
+    w[4] = Math.max(0.0, constraint.getWidth() - w[2] - w[3]);
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
+    // Now set bounds for the blocks (these never affect arrangement, but do for rendering)
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+    // Height is sum of top + max(middle area, 0) + bottom
+    double height = h[0] + h[2] + h[1];
+    // If only top, bottom, left, or right are present, height could be just their height(s)
+    // If none are present, height is 0.0
+    // Otherwise, keep as calculated
+
+    return new Size2D(constraint.getWidth(), height);
 }
\ No newline at end of file
