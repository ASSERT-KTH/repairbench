diff --git a/tmp/a8c252a8-7874-4768-856e-8f7e5441b33a_buggy.java b/tmp/0adcadc3-f42f-4570-bc01-1b564fc40262_fixed.java
index 63a7c80..4fa2de9 100644
--- a/tmp/a8c252a8-7874-4768-856e-8f7e5441b33a_buggy.java
+++ b/tmp/0adcadc3-f42f-4570-bc01-1b564fc40262_fixed.java
@@ -1,77 +1,121 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint  the constraint.
  * @param g2  the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
+    h[0] = 0.0;
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                (constraint.getHeight() >= 0.0
+                        ? new Range(0.0, constraint.getHeight()) : new Range(0.0, 0.0)),
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
     w[1] = w[0];
+    h[1] = 0.0;
+    double bottomMaxHeight = Math.max(0.0, constraint.getHeight() - h[0]);
     if (this.bottomBlock != null) {
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                LengthConstraintType.FIXED, 0.0, 
+                new Range(0.0, bottomMaxHeight), LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+    h[2] = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);
+    w[2] = 0.0;
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
+                new Range(0.0, w[0]),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+        w[2] = Math.min(size.width, w[0]);
     }
     h[3] = h[2];
+    w[3] = 0.0;
+    double rightMaxWidth = Math.max(0.0, w[0] - w[2]);
     if (this.rightBlock != null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                new Range(0.0, rightMaxWidth),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+        w[3] = Math.min(size.width, rightMaxWidth);
     }
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+    w[4] = Math.max(0.0, w[0] - w[3] - w[2]);
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
     if (this.topBlock != null) {
         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                 h[0]));
     }
     if (this.bottomBlock != null) {
         this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                 w[1], h[1]));
     }
     if (this.leftBlock != null) {
         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                 h[2]));
     }
     if (this.rightBlock != null) {
         this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                 w[3], h[3]));
     }
     if (this.centerBlock != null) {
         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                 h[4]));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+    // Calculate total height
+    double totalHeight = h[0] + h[2] + h[1];
+
+    // If top, bottom and center blocks are present, center (h[2]) may already incorporate center/left/right
+    // If only top or only bottom, h[2] is the remaining space
+    // If only left, right, center: h[0] = h[1] = 0, so totalHeight = h[2]
+
+    // If no items: totalHeight = 0
+
+    // When only one block is present, set totalHeight accordingly
+    if (this.topBlock == null && this.bottomBlock == null && this.leftBlock == null
+            && this.rightBlock == null && this.centerBlock == null) {
+        totalHeight = 0.0;
+    }
+
+    // If just one block, ensure height equals its height
+    if (this.topBlock != null && this.bottomBlock == null && this.leftBlock == null
+            && this.rightBlock == null && this.centerBlock == null) {
+        totalHeight = h[0];
+    }
+    if (this.bottomBlock != null && this.topBlock == null && this.leftBlock == null
+            && this.rightBlock == null && this.centerBlock == null) {
+        totalHeight = h[1];
+    }
+    if (this.leftBlock != null && this.topBlock == null && this.bottomBlock == null
+            && this.rightBlock == null && this.centerBlock == null) {
+        totalHeight = h[3]; // = h[2]
+    }
+    if (this.rightBlock != null && this.topBlock == null && this.bottomBlock == null
+            && this.leftBlock == null && this.centerBlock == null) {
+        totalHeight = h[3]; // = h[2]
+    }
+    if (this.centerBlock != null && this.topBlock == null && this.bottomBlock == null
+            && this.leftBlock == null && this.rightBlock == null) {
+        totalHeight = h[4]; // = h[2]
+    }
+
+    return new Size2D(constraint.getWidth(), totalHeight);
 }
\ No newline at end of file
