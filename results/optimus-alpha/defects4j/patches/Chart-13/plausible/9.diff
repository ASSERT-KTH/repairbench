diff --git a/tmp/322ba0e3-8e32-4057-963d-e6c2ce2d19e7_buggy.java b/tmp/53046d27-7e6b-43b2-9fd8-fcb35117c24f_fixed.java
index 63a7c80..03ffc35 100644
--- a/tmp/322ba0e3-8e32-4057-963d-e6c2ce2d19e7_buggy.java
+++ b/tmp/53046d27-7e6b-43b2-9fd8-fcb35117c24f_fixed.java
@@ -1,77 +1,112 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint  the constraint.
  * @param g2  the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
-        w[0] = constraint.getWidth();
+    w[0] = constraint.getWidth(); // full width
+    double remainingHeight = constraint.getHeight();
+    double topHeight = 0.0;
+    double bottomHeight = 0.0;
+    double leftWidth = 0.0;
+    double rightWidth = 0.0;
+
+    // top block
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                new Range(0.0, Math.max(0.0, remainingHeight)),
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+        topHeight = size.height;
+        topHeight = Math.min(topHeight, Math.max(0.0, remainingHeight));
     }
-        w[1] = w[0];
+    h[0] = topHeight;
+    remainingHeight -= topHeight;
+
+    // bottom block
     if (this.bottomBlock != null) {
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                LengthConstraintType.FIXED, 0.0, 
+                new Range(0.0, Math.max(0.0, remainingHeight)),
+                LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+        bottomHeight = size.height;
+        bottomHeight = Math.min(bottomHeight, Math.max(0.0, remainingHeight));
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+    h[1] = bottomHeight;
+    remainingHeight -= bottomHeight;
+
+    // Prevent negative remainingHeight due to floating-point errors
+    if (remainingHeight < 0.0) {
+        remainingHeight = 0.0;
+    }
+    h[2] = remainingHeight;
+
+    double remainingWidth = w[0];
+
+    // left block
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
+                new Range(0.0, Math.max(0.0, remainingWidth)),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+        leftWidth = size.width;
+        leftWidth = Math.min(leftWidth, Math.max(0.0, remainingWidth));
     }
-        h[3] = h[2];
+    w[2] = leftWidth;
+    remainingWidth -= leftWidth;
+
+    // right block
     if (this.rightBlock != null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                new Range(0.0, Math.max(0.0, remainingWidth)),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+        rightWidth = size.width;
+        rightWidth = Math.min(rightWidth, Math.max(0.0, remainingWidth));
     }
+    w[3] = rightWidth;
+    remainingWidth -= rightWidth;
+
+    // Prevent negative remainingWidth due to floating-point errors
+    if (remainingWidth < 0.0) {
+        remainingWidth = 0.0;
+    }
+    w[4] = remainingWidth;
+    h[3] = h[2];
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[0], h[1]));
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+    double totalHeight = h[0] + h[2] + h[1];
+    return new Size2D(constraint.getWidth(), totalHeight);
 }
\ No newline at end of file
