diff --git a/tmp/5c6a1c14-504c-45c2-9977-451d9f5eba02_buggy.java b/tmp/bd563c22-80e7-4079-8740-e2c9ece4321a_fixed.java
index 63a7c80..9d94989 100644
--- a/tmp/5c6a1c14-504c-45c2-9977-451d9f5eba02_buggy.java
+++ b/tmp/bd563c22-80e7-4079-8740-e2c9ece4321a_fixed.java
@@ -1,77 +1,140 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint  the constraint.
  * @param g2  the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
+    double maxHeight = 0.0;
+
+    // Arrange top block
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+                RectangleConstraint.NONE, LengthConstraintType.NONE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
+        maxHeight += h[0];
     }
+
     w[1] = w[0];
+    // Arrange bottom block
     if (this.bottomBlock != null) {
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                LengthConstraintType.FIXED, 0.0,
+                RectangleConstraint.NONE, LengthConstraintType.NONE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
+        maxHeight += h[1];
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+    // Calculate available height for middle row (left, center, right)
+    double availableHeight = 0.0;
+    if (constraint.getHeight() != Double.POSITIVE_INFINITY) {
+        availableHeight = Math.max(constraint.getHeight() - maxHeight, 0.0);
+    }
+    double leftHeight = availableHeight;
+    double rightHeight = availableHeight;
+    double centerHeight = availableHeight;
+
+    // If both top and bottom are null, center, left, right determine height.
+    // If at least one is present, these get only the remainder, but if the constraint is NONE, let them expand.
+
+    // Arrange left block
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                new Range(0.0, w[0]),
+                LengthConstraintType.RANGE, leftHeight, null,
+                (availableHeight > 0.0) ? LengthConstraintType.FIXED : LengthConstraintType.NONE);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
+        h[2] = size.height; // Could be largest
+        if (availableHeight == 0.0) {
+            maxHeight = Math.max(maxHeight, h[2]);
         }
-        h[3] = h[2];
+    }
+
+    // Arrange right block
     if (this.rightBlock != null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                new Range(0.0, w[0] - w[2]),
+                LengthConstraintType.RANGE, rightHeight, null,
+                (availableHeight > 0.0) ? LengthConstraintType.FIXED : LengthConstraintType.NONE);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
+        h[3] = size.height;
+        if (availableHeight == 0.0) {
+            maxHeight = Math.max(maxHeight, h[3]);
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+    }
+
+    // Available width for center block
+    w[4] = w[0] - w[2] - w[3];
+    if (w[4] < 0.0) {
+        w[4] = 0.0;
+    }
+    h[4] = centerHeight;
+
+    Size2D centerSize = null;
+    if (this.centerBlock != null) {
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
-        if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+        centerSize = this.centerBlock.arrange(g2, c5);
+        h[4] = centerSize.height;
+        if (availableHeight == 0.0) {
+            maxHeight = Math.max(maxHeight, h[4]);
+        }
+    }
+
+    // If availableHeight was 0 (NONE on height constraint), calculate max of h[2], h[3], h[4]
+    if (constraint.getHeight() == 0.0 || constraint.getHeight() == Double.POSITIVE_INFINITY) {
+        if (this.leftBlock != null || this.centerBlock != null || this.rightBlock != null) {
+            double maxMiddleHeight = Math.max(h[2], Math.max(h[3], h[4]));
+            maxHeight += maxMiddleHeight;
+            leftHeight = maxMiddleHeight;
+            rightHeight = maxMiddleHeight;
+            h[2] = h[3] = h[4] = maxMiddleHeight;
+        }
+    } else {
+        leftHeight = rightHeight = centerHeight;
+        maxHeight = Math.max(constraint.getHeight(), maxHeight);
     }
 
+    // Set block bounds
+    double topY = 0.0;
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
+        topY = h[0];
     }
+    double bottomY = maxHeight - (this.bottomBlock != null ? h[1] : 0.0);
+
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, bottomY, w[1], h[1]));
     }
+    // Calculate the heights for left, center, right blocks
+    double middleY = topY;
+    double middleHeight = maxHeight - (this.topBlock != null ? h[0] : 0.0) - (this.bottomBlock != null ? h[1] : 0.0);
+
+    if (middleHeight < 0.0) {
+        middleHeight = 0.0;
+    }
+
+    // Adjust the heights for the blocks in the middle row, use calculated heights
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, middleY, w[2], middleHeight));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(w[0] - w[3], middleY, w[3], middleHeight));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], middleY, w[4], middleHeight));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+    return new Size2D(w[0], maxHeight);
 }
\ No newline at end of file
