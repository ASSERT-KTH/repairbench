diff --git a/tmp/92f469a3-0223-443f-ad96-5b60fcf4f281_buggy.java b/tmp/03b8f040-e98c-44f1-ade3-a477e0bedc68_fixed.java
index 63a7c80..6ca5a82 100644
--- a/tmp/92f469a3-0223-443f-ad96-5b60fcf4f281_buggy.java
+++ b/tmp/03b8f040-e98c-44f1-ade3-a477e0bedc68_fixed.java
@@ -1,77 +1,106 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint  the constraint.
  * @param g2  the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
+    h[0] = 0.0;
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                new Range(0.0, Double.POSITIVE_INFINITY),
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
     w[1] = w[0];
+    h[1] = 0.0;
     if (this.bottomBlock != null) {
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                LengthConstraintType.FIXED, 0.0,
+                new Range(0.0, Double.POSITIVE_INFINITY),
+                LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+    // The height for left, right, and center is not constrained by remaining vertical space, so use their preferred heights
+    h[2] = 0.0; // max height among left, right, center blocks
+    double leftHeight = 0.0;
+    double rightHeight = 0.0;
+    double centerHeight = 0.0;
+
+    w[2] = 0.0;
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                new Range(0.0, w[0]),
+                LengthConstraintType.RANGE, 0.0, null,
+                LengthConstraintType.NONE);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
+        leftHeight = size.height;
     }
-        h[3] = h[2];
+
+    w[3] = 0.0;
     if (this.rightBlock != null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                new Range(0.0, w[0] - w[2]),
+                LengthConstraintType.RANGE, 0.0, null,
+                LengthConstraintType.NONE);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
+        rightHeight = size.height;
     }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+
+    w[4] = Math.max(0.0, w[0] - w[2] - w[3]);
+    h[4] = 0.0;
     if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+        RectangleConstraint c5 = new RectangleConstraint(w[4], 0.0,
+                LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE);
+        Size2D size = this.centerBlock.arrange(g2, c5);
+        h[4] = size.height;
+        centerHeight = h[4];
     }
 
+    // Compute heights for left and right blocks based on previous arrange
+    if (this.leftBlock != null) {
+        leftHeight = Math.max(leftHeight, h[4]);
+    }
+    if (this.rightBlock != null) {
+        rightHeight = Math.max(rightHeight, h[4]);
+    }
+    // Compute the height of the middle row (max among left, right, center)
+    double midHeight = Math.max(Math.max(leftHeight, rightHeight), centerHeight);
+
+    double totalHeight = h[0] + midHeight + h[1];
+
+    // Set bounds for the blocks
+    double yCursor = 0.0;
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(0.0, yCursor, w[0], h[0]));
     }
+    yCursor += h[0];
+
+    if (this.leftBlock != null) {
+        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, yCursor, w[2], midHeight));
+    }
+    if (this.rightBlock != null) {
+        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], yCursor, w[3], midHeight));
+    }
+    if (this.centerBlock != null) {
+        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], yCursor, w[4], midHeight));
+    }
+    yCursor += midHeight;
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, yCursor, w[1], h[1]));
     }
-        if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
-        }
-        if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
-        }
-        if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
-        }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+    return new Size2D(constraint.getWidth(), totalHeight);
 }
\ No newline at end of file
