diff --git a/tmp/32ecfcf9-3aba-4e2d-85a5-d71f5862279c_buggy.java b/tmp/8eb48a01-3203-4294-8e4a-f0989f7d2fa1_fixed.java
index d4e6d48..a6a8cc3 100644
--- a/tmp/32ecfcf9-3aba-4e2d-85a5-d71f5862279c_buggy.java
+++ b/tmp/8eb48a01-3203-4294-8e4a-f0989f7d2fa1_fixed.java
@@ -1,23 +1,19 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+    // Only fold if String is called with exactly one argument
     if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+            callTarget.getString().equals("String") &&
+            n.getChildCount() == 2) {
         Node value = callTarget.getNext();
         if (value != null) {
             Node addition = IR.add(
                 IR.string("").srcref(callTarget),
                 value.detachFromParent());
             n.getParent().replaceChild(n, addition);
             reportCodeChange();
             return addition;
         }
     }
     return n;
 }
\ No newline at end of file
