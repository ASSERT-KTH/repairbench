diff --git a/tmp/3a125b94-5eba-4365-80ac-2cc354206c08_buggy.java b/tmp/4d0beb02-3e59-439b-912f-167582981f4a_fixed.java
index d4e6d48..74d6bfa 100644
--- a/tmp/3a125b94-5eba-4365-80ac-2cc354206c08_buggy.java
+++ b/tmp/4d0beb02-3e59-439b-912f-167582981f4a_fixed.java
@@ -1,23 +1,21 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+    // Fold String(a) to '' + (a) only if there is exactly one argument
+    // and it is an immutable literal (number, string, boolean, null, or undefined)
+    Node arg1 = callTarget.getNext();
+    if (arg1 != null && arg1.getNext() == null) {
+      if (NodeUtil.isImmutableValue(arg1)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
-            value.detachFromParent());
+            arg1.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
+  }
   return n;
 }
\ No newline at end of file
