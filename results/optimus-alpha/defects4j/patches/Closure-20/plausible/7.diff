diff --git a/tmp/ee19ee5a-baf3-4a96-a5df-e15b0a1fcc2a_buggy.java b/tmp/06b6e4fc-5c6c-4039-9879-fd83b97cf60c_fixed.java
index d4e6d48..1a90ab1 100644
--- a/tmp/ee19ee5a-baf3-4a96-a5df-e15b0a1fcc2a_buggy.java
+++ b/tmp/06b6e4fc-5c6c-4039-9879-fd83b97cf60c_fixed.java
@@ -1,23 +1,25 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+    // Only fold String(x) to '' + x if there's exactly one argument.
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+
+      Node firstArg = callTarget.getNext();
+
+      // Check that there is exactly one argument
+      if (firstArg != null && firstArg.getNext() == null) {
+        // Only fold if the argument is an immutable literal (number, string, boolean, null)
+        if (firstArg.isString() || firstArg.isNumber() || firstArg.isTrue()
+            || firstArg.isFalse() || firstArg.isNull()) {
           Node addition = IR.add(
               IR.string("").srcref(callTarget),
-            value.detachFromParent());
+              firstArg.detachFromParent());
           n.getParent().replaceChild(n, addition);
           reportCodeChange();
           return addition;
         }
       }
+    }
     return n;
   }
\ No newline at end of file
