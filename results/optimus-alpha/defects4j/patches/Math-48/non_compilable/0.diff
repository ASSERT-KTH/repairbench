diff --git a/tmp/85608aa7-1e28-427c-a6c5-8b7230c63b1e_buggy.java b/tmp/6c1d595e-fffc-4814-bfa8-16a665a8301e_fixed.java
index 14b51f9..99bf89e 100644
--- a/tmp/85608aa7-1e28-427c-a6c5-8b7230c63b1e_buggy.java
+++ b/tmp/6c1d595e-fffc-4814-bfa8-16a665a8301e_fixed.java
@@ -1,124 +1,144 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
     // If one of the bounds is the exact root, return it. Since these are
     // not under-approximations or over-approximations, we can return them
     // regardless of the allowed solutions.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
     // Keep track of inverted intervals, meaning that the left bound is
     // larger than the right bound.
     boolean inverted = false;
 
+    // To avoid infinite loop for REGULA_FALSI when f0 or f1 is stuck, set a stuck counter
+    int stuckCounter = 0;
+    double prevF0 = f0;
+    double prevF1 = f1;
+
     // Keep finding better approximations.
     while (true) {
+        incrementEvaluationCount();
+
         // Calculate the next approximation.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
 
         // If the new approximation is the exact root, return it. Since
         // this is not an under-approximation or an over-approximation,
         // we can return it regardless of the allowed solutions.
         if (fx == 0.0) {
             return x;
         }
 
         // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
             // The value of x1 has switched to the other bound, thus inverting
             // the interval.
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
+            stuckCounter = 0; // reset stuck counter on bracketing change
         } else {
             switch (method) {
             case ILLINOIS:
                 f0 *= 0.5;
                 break;
             case PEGASUS:
                 f0 *= f1 / (f1 + fx);
                 break;
             case REGULA_FALSI:
                 // Detect early that algorithm is stuck, instead of waiting
                 // for the maximum number of iterations to be exceeded.
+                // If one side's function value doesn't change, the solver is stuck.
+                if ((Math.abs(f0 - prevF0) < 1e-15 && Math.abs(f1 - prevF1) < 1e-15) ||
+                    (Math.abs(x1 - x0) < atol && Math.abs(f1) > ftol)) {
+                    throw new org.apache.commons.math.exception.ConvergenceException(
+                        org.apache.commons.math.exception.util.LocalizedFormats.CONVERGENCE_FAILED,
+                        getMaximalIterationCount(), x, x0, x1, fx, f0, f1
+                    );
+                }
                 break;
             default:
                 // Should never happen.
                 throw new MathInternalError();
             }
         }
+        // Remember previous function values for stuck detection
+        prevF0 = f0;
+        prevF1 = f1;
+
         // Update from [x0, x1] to [x0, x].
         x1 = x;
         f1 = fx;
 
         // If the function value of the last approximation is too small,
         // given the function value accuracy, then we can't get closer to
         // the root than we already are.
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 if (inverted) {
                     return x1;
                 }
                 break;
             case RIGHT_SIDE:
                 if (!inverted) {
                     return x1;
                 }
                 break;
             case BELOW_SIDE:
                 if (f1 <= 0) {
                     return x1;
                 }
                 break;
             case ABOVE_SIDE:
                 if (f1 >= 0) {
                     return x1;
                 }
                 break;
             default:
                 throw new MathInternalError();
             }
         }
 
         // If the current interval is within the given accuracies, we
         // are satisfied with the current approximation.
         if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                  atol)) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 return inverted ? x1 : x0;
             case RIGHT_SIDE:
                 return inverted ? x0 : x1;
             case BELOW_SIDE:
                 return (f1 <= 0) ? x1 : x0;
             case ABOVE_SIDE:
                 return (f1 >= 0) ? x1 : x0;
             default:
                 throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
