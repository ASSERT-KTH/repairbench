diff --git a/tmp/a0fef1a1-1413-4ccd-8a03-b1706dc1289b_buggy.java b/tmp/7306b233-26af-4af5-9cbc-ba335ea95976_fixed.java
index 6e05e4b..2ada352 100644
--- a/tmp/a0fef1a1-1413-4ccd-8a03-b1706dc1289b_buggy.java
+++ b/tmp/7306b233-26af-4af5-9cbc-ba335ea95976_fixed.java
@@ -1,51 +1,60 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+  Node node = newNode(Token.FUNCTION);
+
+  // Unnamed function statement is a parse error in JavaScript.
+  // Only allow unnamed for function expressions, not declarations/statements.
+  boolean isUnnamedFunction = false;
   if (name == null) {
-        name = new Name();
-        name.setIdentifier("");
     isUnnamedFunction = true;
+    // Check for function *statements* with no name and throw error
+    if (functionNode.isStatement()) {
+      // Simulate the parse error as Parser does.
+      errorReporter.error("unnamed function statement",
+                          sourceName,
+                          functionNode.getLineno(),
+                          "",
+                          0);
+      // Could return a dummy node, or throw if desired
+      Name dummy = new Name();
+      dummy.setIdentifier("");
+      name = dummy;
+    } else {
+      // Function expression, use empty name node.
+      Name dummy = new Name();
+      dummy.setIdentifier("");
+      name = dummy;
     }
-      Node node = newNode(Token.FUNCTION);
+  }
+
   Node newName = transform(name);
   if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
     int lpColumn = functionNode.getAbsolutePosition() +
         functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
   int lparenCharno = functionNode.getLp() +
       functionNode.getAbsolutePosition();
 
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
