diff --git a/tmp/32e7b3d3-17b6-4253-8653-7bd70e8178a6_buggy.java b/tmp/47c81ddc-a8d0-4760-bfa6-99856838ee86_fixed.java
index cd412d2..3245e81 100644
--- a/tmp/32e7b3d3-17b6-4253-8653-7bd70e8178a6_buggy.java
+++ b/tmp/47c81ddc-a8d0-4760-bfa6-99856838ee86_fixed.java
@@ -1,76 +1,139 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // First, handle the timezone (remove colon, handle +hh or -hh format)
+            // and adjust any missing components for the time
+            
+            // Remove colon in offset if present: 2014-10-03T18:00:00.6-05:00
+            int tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            if (tzIndex != -1 && (tzIndex + 3 < dateStr.length()) && dateStr.charAt(tzIndex + 3) == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                sb.delete(tzIndex + 3, tzIndex + 4); // remove colon
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+                len--;
+            } else if (tzIndex != -1 && dateStr.length() - tzIndex == 3) {
+                // Timezone given as +hh or -hh, missing minutes
                 dateStr += "00";
+                len += 2;
+            }
+
+            // Now handle milliseconds
+            // Look for the start of the timezone info
+            tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            if (tzIndex == -1)
+                tzIndex = len;
+
+            // Now, parse for time section to possibly fill missing/malformed fields
+            // Regex: Look for ".s" or ".ss" (partial milliseconds)
+            int msStart = -1;
+            int msEnd = -1;
+            for (int i = tzIndex - 1; i >= 0; --i) {
+                char ch = dateStr.charAt(i);
+                if (ch == '.') {
+                    msStart = i;
+                    // scan for the end of milliseconds part (first non-digit)
+                    msEnd = msStart + 1;
+                    while (msEnd < tzIndex && Character.isDigit(dateStr.charAt(msEnd)))
+                        msEnd++;
+                    break;
+                }
+                // break out if reach a non-digit, non-colon, non-T, non-S
+                if (ch == 'T' || ch == ':')
+                    break;
+            }
+
+            StringBuilder sb = null;
+            if (msStart >= 0 && msEnd > msStart) {
+                int msLen = msEnd - (msStart + 1);
+                if (msLen < 3) {
+                    sb = new StringBuilder(dateStr);
+                    // Pad with zeros to make 3 digits
+                    for (int i = 0; i < 3 - msLen; ++i) {
+                        sb.insert(msEnd + i, '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            } else {
+                // missing milliseconds, so insert ".000" before timezone
+                sb = new StringBuilder(dateStr);
+                int insertPos = tzIndex;
+                // Find the position before timezone sign
+                // Also, check if there's seconds
+                // Find 'T' and last ':' after T
+                int tIndex = dateStr.indexOf('T');
+                int secIndex = dateStr.lastIndexOf(':', tzIndex - 1);
+                boolean hasSeconds = (secIndex > tIndex);
+                if (!hasSeconds) {
+                    // Add ":00" seconds
+                    sb.insert(insertPos, ":00.000");
+                } else {
+                    sb.insert(insertPos, ".000");
                 }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
                 dateStr = sb.toString();
             }
+
+            // Now, check if missing seconds part (format ends with ...:mmÂ±hhmm)
+            // Already handled above if !hasSeconds
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            int tIndex = dateStr.lastIndexOf('T');
+            int timeLen = len - tIndex - 1;
+            // timeLen == 5: HH:mm
+            // timeLen == 8: HH:mm:ss
+            // timeLen < 8: missing seconds or milliseconds
+            if (tIndex >= 0) {
+                // Find seconds
+                int secIndex = dateStr.indexOf(':', tIndex + 1);
+                secIndex = secIndex >= 0 ? dateStr.indexOf(':', secIndex + 1) : -1;
+                boolean hasSeconds = (secIndex > 0 && secIndex < len);
+                boolean hasMilliseconds = false;
+                if (hasSeconds) {
+                    int msDot = dateStr.indexOf('.', secIndex);
+                    hasMilliseconds = (msDot > secIndex && msDot < len);
+                }
+                if (!hasSeconds) {
+                    sb.append(":00.000");
+                } else if (!hasMilliseconds) {
                     sb.append(".000");
                 }
+            }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
