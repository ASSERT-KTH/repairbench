diff --git a/tmp/9f3a2c88-4650-4cb7-adda-ba32b0e43323_buggy.java b/tmp/5389cf97-9a09-4094-adf0-ee78f05fdb16_fixed.java
index cd412d2..1c93dfc 100644
--- a/tmp/9f3a2c88-4650-4cb7-adda-ba32b0e43323_buggy.java
+++ b/tmp/5389cf97-9a09-4094-adf0-ee78f05fdb16_fixed.java
@@ -1,76 +1,137 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
+        } else if (dateStr.charAt(len-5) == 'T') {
+            // missing milliseconds and seconds
+            StringBuilder sb = new StringBuilder(dateStr);
+            sb.insert(len-1, ":00.000");
+            dateStr = sb.toString();
+        } else if (dateStr.charAt(len-8) == 'T') {
+            // missing milliseconds
+            StringBuilder sb = new StringBuilder(dateStr);
+            sb.insert(len-1, ".000");
+            dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            int tzIndex = dateStr.lastIndexOf('+');
+            if (tzIndex < 0) {
+                tzIndex = dateStr.lastIndexOf('-');
+            }
+            // If timezone indicator exists, process
+            if (tzIndex >= 0) {
+                // Look for colon in timezone offset
+                if (tzIndex + 3 < dateStr.length() && dateStr.charAt(tzIndex + 3) == ':') {
+                    // Remove the colon
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                    sb.deleteCharAt(tzIndex + 3);
                     dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+                    len = dateStr.length();
+                } else if (tzIndex + 3 == dateStr.length()) {
+                    // e.g.: 1997-07-16T19:20+01
+                    // Append "00"
                     dateStr += "00";
+                    len = dateStr.length();
                 }
-                // Milliseconds partial or missing; and even seconds are optional
+                // Now, handle missing seconds and/or milliseconds
+                int timeStart = dateStr.indexOf('T');
+                int timeEnd = tzIndex;
+                String timePart = timeStart >= 0 ? dateStr.substring(timeStart + 1, timeEnd) : "";
+                // Expected: HH:mm[:ss][.SSS]
+                if (timePart.length() > 0) {
+                    String[] parts = timePart.split(":");
+                    if (parts.length == 2) {
+                        // missing seconds and milliseconds
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(tzIndex, ":00.000");
+                        dateStr = sb.toString();
+                        len = dateStr.length();
+                    } else if (parts.length == 3) {
+                        // check for missing milliseconds or partial milliseconds
+                        int secDot = parts[2].indexOf('.');
+                        if (secDot < 0) {
+                            // no millis
+                            StringBuilder sb = new StringBuilder(dateStr);
+                            sb.insert(tzIndex, ".000");
+                            dateStr = sb.toString();
                             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                        } else {
+                            // has millis, but possibly not 3 digits
+                            int millisStart = timeStart + 1 + parts[0].length() + 1 + parts[1].length() + 1 + secDot + 2;
+                            int millisDigits = parts[2].length() - secDot - 1;
+                            if (millisDigits < 3) {
                                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                                for (int i = 0; i < 3 - millisDigits; ++i) {
+                                    sb.insert(tzIndex, "0");
+                                }
                                 dateStr = sb.toString();
+                                len = dateStr.length();
+                            } else if (millisDigits > 3) {
+                                // trim to 3 digits
+                                int extra = millisDigits - 3;
+                                StringBuilder sb = new StringBuilder(dateStr);
+                                sb.delete(millisStart + 3, millisStart + 3 + extra);
+                                dateStr = sb.toString();
+                                len = dateStr.length();
+                            }
+                        }
+                    }
+                }
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            if (timeLen <= 8 && dateStr.indexOf('.') < 0) {
                 sb.append(".000");
+            } else if (timeLen > 9) {
+                // could be missing fractional ms digits
+                int msStart = dateStr.indexOf('.');
+                if (msStart > 0) {
+                    int msDigits = len - msStart - 1;
+                    if (msDigits < 3) {
+                        for (int i = 0; i < 3 - msDigits; ++i) {
+                            sb.append('0');
+                        }
+                    } else if (msDigits > 3) {
+                        // trim extra ms digits
+                        sb.setLength(msStart + 4);
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
