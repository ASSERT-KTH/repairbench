diff --git a/tmp/9dc0d4a3-9715-4a46-baf2-cdee4ed6b4a1_buggy.java b/tmp/8beaf676-5914-4659-a44a-554517feb979_fixed.java
index cd412d2..3db08ba 100644
--- a/tmp/9dc0d4a3-9715-4a46-baf2-cdee4ed6b4a1_buggy.java
+++ b/tmp/8beaf676-5914-4659-a44a-554517feb979_fixed.java
@@ -1,76 +1,141 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // Determine the offset position for timezone
+            int tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            if (tzIndex > 0) {
+                // Remove the colon in the timezone if present, e.g. "+01:00" â†’ "+0100"
+                if (tzIndex + 3 < dateStr.length() && dateStr.charAt(tzIndex + 3) == ':') {
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                    sb.deleteCharAt(tzIndex + 3);
                     dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                }
+                // If missing minutes, append "00"
+                else if (dateStr.length() - tzIndex <= 3) {
+                    dateStr = dateStr + "00";
+                }
+            }
+
+            // Now, handle milliseconds and missing seconds
+            // Find the time part in the string: find where 'T' is, that's start of time
+            int tIndex = dateStr.indexOf('T');
+            if (tIndex >= 0) {
+                // Find start of timezone offset or end of string
+                int timeEndIndex = dateStr.length();
+                if (tzIndex > tIndex) {
+                    timeEndIndex = tzIndex;
+                }
+                // Now scan for seconds portion
+                int colon2 = dateStr.indexOf(':', dateStr.indexOf(':', tIndex + 1) + 1);
+                // colon2: Index after "HH:mm:", so it's after seconds, OR -1 if missing
+                boolean hasSeconds = (colon2 != -1 && colon2 < timeEndIndex);
+
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                int millisPos = -1;
+                boolean hasMillis = false;
+                // Find decimal point for millis (if it exists before timezone)
+                int dotIndex = sb.indexOf(".", tIndex);
+                if (dotIndex > -1 && dotIndex < timeEndIndex) {
+                    hasMillis = true;
+                    millisPos = dotIndex;
+                }
+
+                // If we have no seconds (ie, "1997-07-16T19:20" or "19:20+01:00" or similar)
+                if (!hasSeconds) {
+                    // Insert seconds after minutes
+                    int insertPos = dateStr.indexOf(':', tIndex + 1) + 3; // skip ":mm"
+                    if (insertPos <= tIndex + 1 || insertPos > timeEndIndex)
+                        insertPos = timeEndIndex;
+                    sb.insert(insertPos, ":00");
+                    timeEndIndex += 3;
+                    if (millisPos >= insertPos) millisPos += 3;
+                }
+
+                // Now handle milliseconds -- pad or set as needed
+                // Refetch dotIndex (might relocate after possible insert)
+                dotIndex = sb.indexOf(".", tIndex);
+                if (dotIndex > -1 && dotIndex < timeEndIndex) {
+                    // There are already milliseconds in original or modified string
+                    int msStart = dotIndex + 1;
+                    int msEnd = msStart;
+                    while (msEnd < sb.length() && Character.isDigit(sb.charAt(msEnd))) {
+                        msEnd++;
+                    }
+                    int msLen = msEnd - msStart;
+                    if (msLen < 3) {
+                        for (int i = 0; i < 3 - msLen; ++i) {
+                            sb.insert(msEnd, '0');
+                        }
+                        // Don't need to update msEnd/timeEndIndex for anything after ms
+                    } else if (msLen > 3) {
+                        // truncate if too long
+                        sb.delete(msStart + 3, msEnd);
+                    }
+                } else {
+                    // No dot, so insert ".000" after seconds
+                    // Find seconds start: after first ":" after the minutes (thus after "T"),
+                    // and possibly after inserted ":00"
+                    int secIndex = sb.indexOf(":", tIndex + 1);
+                    secIndex = sb.indexOf(":", secIndex + 1); // find second ':'
+                    if (secIndex > -1 && secIndex + 3 <= sb.length()) {
+                        sb.insert(secIndex + 3, ".000");
+                    }
+                }
+
                 dateStr = sb.toString();
             }
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
