diff --git a/tmp/5e0730d3-dca2-4070-b1f8-65502a66a9f6_buggy.java b/tmp/d1895c1c-aa40-47f7-a860-445c995d8d80_fixed.java
index cd412d2..f6280bb 100644
--- a/tmp/5e0730d3-dca2-4070-b1f8-65502a66a9f6_buggy.java
+++ b/tmp/d1895c1c-aa40-47f7-a860-445c995d8d80_fixed.java
@@ -1,76 +1,131 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // Patch for offset and missing parts
+            int tzStart = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            if (tzStart > 0) {
+                // tzStart points to + or -
+                if (dateStr.indexOf(':', tzStart) != -1) {
+                    // Remove colon in timezone
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                    sb.deleteCharAt(tzStart + 3);
                     dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+                } else if (dateStr.length() - tzStart == 3) { // +hh or -hh, missing mm
                     dateStr += "00";
                 }
-                // Milliseconds partial or missing; and even seconds are optional
+            }
+            // Find the 'T' position if present (time part)
+            int tIndex = dateStr.indexOf('T');
+            // Find the position of '.' (milliseconds)
+            int dotIndex = dateStr.indexOf('.', tIndex > -1 ? tIndex : 0);
+            int offsetLen = (dateStr.charAt(dateStr.length() - 5) == '+' || dateStr.charAt(dateStr.length() - 5) == '-')
+                    ? 5 : 0;
+
+            // Add seconds if missing
+            int timeLen = 0;
+            if (tIndex >= 0) {
+                int timeEnd = tzStart > 0 ? tzStart : dateStr.length();
+                String timePart = dateStr.substring(tIndex + 1, dotIndex > 0 ? dotIndex : timeEnd);
+                String[] parts = timePart.split(":");
+                if (parts.length == 1) { // Only hour
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    int insertPos = dotIndex > 0 ? dotIndex : (tzStart > 0 ? tzStart : dateStr.length());
+                    sb.insert(insertPos, ":00:00");
+                    dateStr = sb.toString();
+                    dotIndex = dateStr.indexOf('.', tIndex > -1 ? tIndex : 0);
+                } else if (parts.length == 2) { // Hour:minute, missing seconds
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    int insertPos = dotIndex > 0 ? dotIndex : (tzStart > 0 ? tzStart : dateStr.length());
+                    sb.insert(insertPos, ":00");
+                    dateStr = sb.toString();
+                    dotIndex = dateStr.indexOf('.', tIndex > -1 ? tIndex : 0);
+                }
+            }
+
+            // Update positions after patch
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            tzStart = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+
+            // Now, patch milliseconds to be exactly 3 digits if present,
+            // or add ".000" if completely missing.
+            dotIndex = dateStr.indexOf('.', tIndex > -1 ? tIndex : 0);
+            if (dotIndex > -1) {
+                int msStart = dotIndex + 1;
+                int msEnd = msStart;
+                while (msEnd < len && Character.isDigit(dateStr.charAt(msEnd))) {
+                    msEnd++;
+                }
+                int msDigits = msEnd - msStart;
+                if (msDigits < 3) {
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    for (int i = 0; i < 3 - msDigits; ++i) {
+                        sb.insert(msEnd, '0');
+                    }
+                    dateStr = sb.toString();
+                } else if (msDigits > 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.delete(msStart + 3, msEnd);
+                    dateStr = sb.toString();
+                }
+            } else {
+                // If seconds are present, but missing milliseconds, insert ".000"
+                // Insert just before timezone
+                int insertPos = (tzStart > 0) ? tzStart : len;
+                StringBuilder sb = new StringBuilder(dateStr);
+                sb.insert(insertPos, ".000");
                 dateStr = sb.toString();
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                     sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
