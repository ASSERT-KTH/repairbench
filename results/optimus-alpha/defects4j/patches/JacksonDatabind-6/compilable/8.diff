diff --git a/tmp/b369cc9d-b6b6-4809-b93a-86bc7e135929_buggy.java b/tmp/9a81523f-0b26-4cde-906e-16b7b9b812f1_fixed.java
index cd412d2..80ea359 100644
--- a/tmp/b369cc9d-b6b6-4809-b93a-86bc7e135929_buggy.java
+++ b/tmp/9a81523f-0b26-4cde-906e-16b7b9b812f1_fixed.java
@@ -1,76 +1,136 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
+        // handle partial milliseconds for Z case
+        int milliStart = dateStr.lastIndexOf('.');
+        if (milliStart > 0 && (len - milliStart - (c == 'Z' ? 2 : 1)) < 3) {
+            int insertZeros = 3 - (len - milliStart - 2);
+            StringBuilder sb = new StringBuilder(dateStr);
+            for (int i=0;i<insertZeros;i++) sb.insert(len-1, "0");
+            dateStr = sb.toString();
+        }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
+            // Remove colon from timezone if present
+            if (len >= 6) {
                 c = dateStr.charAt(len-3);
                 if (c == ':') { // remove optional colon
-                    // remove colon
                     StringBuilder sb = new StringBuilder(dateStr);
                     sb.delete(len-3, len-2);
                     dateStr = sb.toString();
+                    len = dateStr.length();
                 } else if (c == '+' || c == '-') { // missing minutes
                     // let's just append '00'
                     dateStr += "00";
+                    len = dateStr.length();
+                }
             }
-                // Milliseconds partial or missing; and even seconds are optional
+            // Insert missing seconds if only hours and minutes for time part
+            int tIndex = dateStr.indexOf('T');
+            int plusIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            int tzOffset = (plusIndex > -1) ? plusIndex : len;
+            String timePart = tIndex >= 0 ? dateStr.substring(tIndex + 1, tzOffset) : "";
+            // timePart is like HH:mm or HH:mm:ss(.sss)
+            if (timePart.length() >= 5) {
+                if (timePart.charAt(2) == ':' && (timePart.length() == 5 || (timePart.length() > 5 && timePart.charAt(5) != ':'))) {
+                    // missing seconds, insert ":00"
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.insert(tIndex + 6, ":00");
+                    dateStr = sb.toString();
                     len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                }
+            }
+            // Insert missing milliseconds if not present
+            // find location before timezone, in "[.sss]([+-]hhmm)"
+            timePart = tIndex >= 0 ? dateStr.substring(tIndex + 1, tzOffset) : "";
+            int secDot = timePart.indexOf('.');
+            int secLen = timePart.length();
+            if (timePart.length() >= 8) {
+                // time is HH:mm:ss(.sss) expectation
+                if (secDot > 0) {
+                    // partial or missing milliseconds, pad to 3 digits
+                    int fracStart = tIndex + 1 + secDot + 1;
+                    int fracEnd = fracStart;
+                    while (fracEnd < tzOffset && Character.isDigit(dateStr.charAt(fracEnd))) {
+                        fracEnd++;
+                    }
+                    int milliCount = fracEnd - fracStart;
+                    if (milliCount < 3) {
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                        for (int i = 0; i < 3 - milliCount; ++i) {
+                            sb.insert(fracEnd, '0');
+                        }
                         dateStr = sb.toString();
+                        len = dateStr.length();
+                    }
+                } else {
+                    // No milliseconds, insert ".000" after seconds
+                    int secondEnd = tIndex + 1 + 8; // T + HH:mm:ss
+                    if (secondEnd <= tzOffset) {
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        sb.insert(secondEnd, ".000");
+                        dateStr = sb.toString();
+                        len = dateStr.length();
+                    }
+                }
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+            // If not, plain date. Patch 'Z' in the end, and add millisecond part if missing
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
+            int tIndex = dateStr.indexOf('T');
+            int timeLen = (tIndex < 0) ? 0 : (len - tIndex - 1);
+            if (tIndex >= 0 && timeLen > 0) {
+                String timePart = dateStr.substring(tIndex + 1);
+                int secDot = timePart.indexOf('.');
+                if (timePart.length() >= 8) {
+                    if (secDot > 0) {
+                        int milliCount = 0;
+                        int fracStart = secDot + 1;
+                        while (fracStart + milliCount < timePart.length() && Character.isDigit(timePart.charAt(fracStart + milliCount)))
+                            milliCount++;
+                        if (milliCount < 3) {
+                            int insertAt = tIndex + 1 + secDot + 1 + milliCount;
+                            for (int i = 0; i < 3 - milliCount; ++i)
+                                sb.insert(insertAt, '0');
+                        }
+                    } else {
+                        int insertAt = tIndex + 1 + 8;
+                        sb.insert(insertAt, ".000");
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
