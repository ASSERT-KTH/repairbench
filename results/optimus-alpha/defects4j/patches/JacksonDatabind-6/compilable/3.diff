diff --git a/tmp/2279fdd2-00b3-458b-86a9-b9e7dbbf31da_buggy.java b/tmp/59496b4b-d7de-4f60-8c16-999cb58318c0_fixed.java
index cd412d2..beff405 100644
--- a/tmp/2279fdd2-00b3-458b-86a9-b9e7dbbf31da_buggy.java
+++ b/tmp/59496b4b-d7de-4f60-8c16-999cb58318c0_fixed.java
@@ -1,76 +1,89 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
+            // Find index of timezone
+            int tzIndex = len - 6;
+            char sign = dateStr.charAt(tzIndex);
+            boolean hasColon = (dateStr.charAt(len-3) == ':');
+            String preTZ = dateStr.substring(0, tzIndex);
+            String tzPart;
+            if (hasColon) {
+                tzPart = dateStr.substring(tzIndex, len-3) + dateStr.substring(len-2);
+            } else {
+                tzPart = dateStr.substring(tzIndex);
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+
+            // Split main date/time
+            int dotIdx = preTZ.lastIndexOf('.');
+            int tIdx = preTZ.lastIndexOf('T');
+            int secIdx = preTZ.lastIndexOf(':');
+
+            boolean hasMillis = (dotIdx > tIdx);
+            boolean hasSec = (secIdx > tIdx);
+            StringBuilder sb = new StringBuilder();
+            if (!hasSec) {
+                // Time is missing seconds; add ":00"
+                sb.append(preTZ);
+                sb.append(":00");
+            } else {
+                sb.append(preTZ);
+            }
+            if (!hasMillis) {
+                // No milliseconds -- add default ".000"
+                sb.append(".000");
+            } else {
+                // Handle partial milliseconds: pad to full 3 digits
+                int milliLen = preTZ.length() - dotIdx - 1;
+                if (milliLen < 3) {
+                    for (int i = 0; i < 3 - milliLen; ++i) {
+                        sb.append('0');
                     }
+                }
+            }
+            sb.append(tzPart);
+            dateStr = sb.toString();
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
