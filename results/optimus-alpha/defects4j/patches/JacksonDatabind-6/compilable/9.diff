diff --git a/tmp/8e51a3da-4d0c-4e8f-a86a-7be8779fd4a5_buggy.java b/tmp/3b13c6f3-f8b4-47ba-8e6c-ee7552a1e587_fixed.java
index cd412d2..aa0198d 100644
--- a/tmp/8e51a3da-4d0c-4e8f-a86a-7be8779fd4a5_buggy.java
+++ b/tmp/3b13c6f3-f8b4-47ba-8e6c-ee7552a1e587_fixed.java
@@ -1,76 +1,129 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            int tzIndex = dateStr.length() - 6;
+            char tzSign = dateStr.charAt(tzIndex);
+            // Check for timezone in format "+hh:mm" or "-hh:mm"
+            if ((tzSign == '+' || tzSign == '-') && dateStr.charAt(dateStr.length() - 3) == ':') {
+                // Remove colon in timezone offset
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                sb.delete(dateStr.length() - 3, dateStr.length() - 2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if ((tzSign == '+' || tzSign == '-') && (dateStr.length() - tzIndex) <= 3) {
+                // If timezone is like "+hh", append minutes
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            // Ensure milliseconds, possibly partial
+            int timeStart = dateStr.indexOf('T');
+            int tzSignIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            if (timeStart >= 0) {
+                int dotIdx = dateStr.indexOf('.', timeStart);
+                int secIdx = dateStr.indexOf(':', timeStart);
+                if (dotIdx >= 0 && (tzSignIndex < 0 || dotIdx < tzSignIndex)) {
+                    int msStart = dotIdx + 1;
+                    int msEnd = (tzSignIndex > 0) ? tzSignIndex : dateStr.length();
+                    int msLen = msEnd - msStart;
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    // Pad ms up to 3 digits
+                    if (msLen < 3) {
+                        for (int i = 0; i < 3 - msLen; ++i) {
+                            sb.insert(msEnd, "0");
+                        }
                         dateStr = sb.toString();
+                    } else if (msLen > 3) {
+                        // Truncate ms if longer than 3
+                        sb.delete(msStart + 3, msEnd);
+                        dateStr = sb.toString();
+                    }
+                } else {
+                    // Add missing milliseconds: after seconds, before TZ
+                    // Find position after seconds
+                    int secondIdx = dateStr.indexOf(':', timeStart);
+                    if (secondIdx >= 0) {
+                        int nextColonIdx = dateStr.indexOf(':', secondIdx + 1);
+                        if (nextColonIdx >= 0) {
+                            int secEnd = nextColonIdx;
+                            // May also have no seconds, e.g. 'T12:34+00:00'
+                            secEnd = nextColonIdx + 3;
+                            // Actually, let's just search for the + or - (start of timezone)
+                            StringBuilder sb = new StringBuilder(dateStr);
+                            int tzIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+                            // If have seconds but no dot, insert ".000" after seconds
+                            if (tzIdx > 0) {
+                                sb.insert(tzIdx, ".000");
+                            } else {
+                                sb.append(".000");
+                            }
+                            dateStr = sb.toString();
+                        } else {
+                            // Only hours and minutes, missing seconds
+                            StringBuilder sb = new StringBuilder(dateStr);
+                            int tzIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+                            if (tzIdx > 0) {
+                                sb.insert(tzIdx, ":00.000");
+                            } else {
+                                sb.append(":00.000");
+                            }
+                            dateStr = sb.toString();
+                        }
+                    } else {
+                        // Should not get here, but in case...
+                        if (!dateStr.contains(":")) {
+                            // No time component, just append ":00.000"
+                            StringBuilder sb = new StringBuilder(dateStr);
+                            int tzIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+                            if (tzIdx > 0) {
+                                sb.insert(tzIdx, ":00.000");
+                            } else {
+                                sb.append(":00.000");
+                            }
+                            dateStr = sb.toString();
+                        }
+                    }
+                }
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+            // If not, plain date/time. Patch 'Z' at end? 
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            if (timeLen <= 8 && timeLen > 0) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
