diff --git a/tmp/14e94d4a-129e-412f-b9d7-c506c8fb38cc_buggy.java b/tmp/8d3deed2-dfa4-4c0c-ac8d-7fea2ff48273_fixed.java
index cd412d2..b0b81eb 100644
--- a/tmp/14e94d4a-129e-412f-b9d7-c506c8fb38cc_buggy.java
+++ b/tmp/8d3deed2-dfa4-4c0c-ac8d-7fea2ff48273_fixed.java
@@ -1,76 +1,148 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // Standardize the timezone format, remove colon if present
+            int tzIdx = dateStr.length() - 6; // e.g. "yyyy-MM-ddThh:mm:ss(.SSS)?+hh:mm"
             StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+            if ((dateStr.charAt(dateStr.length()-3) == ':')
+                && (dateStr.charAt(dateStr.length()-6) == '+' || dateStr.charAt(dateStr.length()-6) == '-')) {
+                // Remove colon in timezone
+                sb.delete(dateStr.length()-3, dateStr.length()-2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if (dateStr.charAt(dateStr.length()-3) == '+'
+                    || dateStr.charAt(dateStr.length()-3) == '-') { // "+hh" or "-hh"
+                // append minutes "00"
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+            // Fix missing seconds (like "yyyy-MM-ddThh:mm+hhmm" or "yyyy-MM-ddThh:mm-hhmm")
+            int timeStart = dateStr.indexOf('T');
+            if (timeStart > 0) {
+                int tzOffset = dateStr.length();
+                // Z form or +hhmm/-hhmm
+                int plusIdx = dateStr.indexOf('+', timeStart);
+                int minusIdx = dateStr.indexOf('-', timeStart);
+                if (plusIdx < 0 || (minusIdx >= 0 && minusIdx < plusIdx)) {
+                    plusIdx = minusIdx;
+                }
+                if (plusIdx > 0) {
+                    tzOffset = plusIdx;
+                }
+                int timeLen = tzOffset - (timeStart + 1);
+                // if we only have hh:mm, without seconds
+                // e.g. 1997-07-16T19:20+0100 (timeLen==5), or 1997-07-16T19:20-01:00 (timeLen==5 or 6 if colon)
+                if (timeLen == 5 && dateStr.charAt(timeStart + 3) == ':') {
+                    // insert ":00" for seconds
+                    sb = new StringBuilder(dateStr);
+                    sb.insert(timeStart + 6, ":00");
                     dateStr = sb.toString();
                 }
+            }
+
+            // Fix partial or missing milliseconds
+            // Look for dot for milliseconds
+            int sIdx = dateStr.indexOf('.', timeStart > 0 ? timeStart : 0);
+            int tzSignIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            if (sIdx >= 0 && tzSignIdx > sIdx) {
+                int msStart = sIdx + 1;
+                int msEnd = tzSignIdx;
+                int msLen = msEnd - msStart;
+                // Only allow 1,2,3 digits
+                if (msLen < 3) {
+                    sb = new StringBuilder(dateStr);
+                    for (int i = 0; i < 3 - msLen; ++i) {
+                        sb.insert(msEnd, "0");
+                    }
+                    dateStr = sb.toString();
+                } else if (msLen > 3) {
+                    // truncate to three digits
+                    sb = new StringBuilder(dateStr);
+                    sb.delete(msStart + 3, msEnd);
+                    dateStr = sb.toString();
+                }
+            }
+            // If missing milliseconds, add ".000"
+            else if ((timeStart > 0) && (dateStr.lastIndexOf(':') > timeStart)) {
+                // after the last ':', there should be two digits (seconds)
+                int secondEnd = dateStr.lastIndexOf(':') + 3;
+                // avoid index out of bounds
+                if (secondEnd <= dateStr.length()) {
+                    String secondsPart = dateStr.substring(dateStr.lastIndexOf(':') + 1,
+                                                           Math.min(dateStr.lastIndexOf(':') + 3, dateStr.length()));
+                    if (secondsPart.length() == 2
+                        && (tzSignIdx == -1 || tzSignIdx >= dateStr.length())
+                        && (dateStr.length() == secondEnd || dateStr.charAt(secondEnd) == '+' || dateStr.charAt(secondEnd) == '-')) {
+                        // Assume missing milliseconds, add them just before the timezone part (if exists)
+                        int insertPos = (tzSignIdx > 0) ? tzSignIdx : dateStr.length();
+                        sb = new StringBuilder(dateStr);
+                        sb.insert(insertPos, ".000");
+                        dateStr = sb.toString();
+                    }
+                }
+            }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            int tIdx = dateStr.lastIndexOf('T');
+            int timeLen = len - tIdx - 1;
+            if (timeLen > 0 && tIdx > 0) {
+                // see if we have seconds
+                int colonCnt = 0;
+                for (int i = tIdx + 1; i < dateStr.length(); ++i) {
+                    if (dateStr.charAt(i) == ':') ++colonCnt;
+                }
+                if (colonCnt == 1) { // only hh:mm present
+                    sb.append(":00");
+                }
+                // milliseconds?
+                int dotIdx = dateStr.indexOf('.', tIdx);
+                if (dotIdx < 0) {
                     sb.append(".000");
+                } else {
+                    int msLen = dateStr.length() - dotIdx - 1;
+                    if (msLen < 3) {
+                        for (int i = 0; i < 3 - msLen; ++i) {
+                            sb.append("0");
+                        }
+                    } else if (msLen > 3) {
+                        sb.delete(dotIdx + 4, sb.length());
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
