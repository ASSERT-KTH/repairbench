diff --git a/tmp/3478d6a3-d787-4f51-9f92-bce4b3932a51_buggy.java b/tmp/1350dce2-c959-4833-a702-54bd27e70891_fixed.java
index cd412d2..59d3a6e 100644
--- a/tmp/3478d6a3-d787-4f51-9f92-bce4b3932a51_buggy.java
+++ b/tmp/1350dce2-c959-4833-a702-54bd27e70891_fixed.java
@@ -1,76 +1,120 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+            // Adjust timezone offset format
+            // Find the index where the timezone offset starts (+/-)
+            int tzSignIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            String preTZ = (tzSignIndex >= 0) ? dateStr.substring(0, tzSignIndex) : dateStr;
+            String tzPart = (tzSignIndex >= 0) ? dateStr.substring(tzSignIndex) : "";
+            StringBuilder sb = new StringBuilder(preTZ);
+
+            // Remove colon in timezone offset if present (e.g., +01:00 -> +0100)
+            if (tzPart.length() == 6 && tzPart.charAt(3) == ':') {
+                tzPart = tzPart.substring(0, 3) + tzPart.substring(4);
+            } else if ((tzPart.length() == 3 || tzPart.length() == 5) && (tzPart.charAt(0) == '+' || tzPart.charAt(0) == '-')) {
+                // missing minutes in offset, assume as 00
+                if (tzPart.length() == 3) {
+                    tzPart = tzPart + "00";
                 }
+            }
+
+            // Handle optional seconds and milliseconds
+            // Find 'T' position
+            int tIndex = dateStr.indexOf('T');
+            int dotIndex = preTZ.indexOf('.', tIndex > 0 ? tIndex : 0);
+            int colonCount = 0;
+            int firstColon = preTZ.indexOf(':', tIndex > 0 ? tIndex : 0);
+            int lastColon = preTZ.lastIndexOf(':');
+            if (firstColon >= 0 && lastColon >= firstColon) {
+                for (int ci = firstColon; ci <= lastColon; ci++) {
+                    if (preTZ.charAt(ci) == ':') {
+                        colonCount++;
+                    }
+                }
+            }
+            // colonCount==2: has seconds (HH:mm:ss), ==1: missing seconds (HH:mm)
+            boolean hasSeconds = (colonCount >= 2);
+
+            if (!hasSeconds) {
+                // missing seconds, add ":00"
+                sb.append(":00");
+            }
+
+            // After possible ":00", add milliseconds if missing or pad as necessary
+            int msLen = 0;
+            if (dotIndex >= 0 && dotIndex > tIndex) {
+                int msStart = dotIndex + 1;
+                int msEnd = msStart;
+                while (msEnd < preTZ.length() && Character.isDigit(preTZ.charAt(msEnd))) {
+                    msEnd++;
+                }
+                msLen = msEnd - msStart;
+                if (msLen < 3) {
+                    // Pad zeros
+                    sb.append(preTZ.substring(dotIndex, msEnd));
+                    for (int i = msLen; i < 3; ++i) {
+                        sb.append('0');
+                    }
+                    // Append the rest
+                    if (msEnd < preTZ.length()) {
+                        sb.append(preTZ.substring(msEnd));
+                    }
+                } else {
+                    sb.append(preTZ.substring(dotIndex, msEnd));
+                    if (msEnd < preTZ.length()) {
+                        sb.append(preTZ.substring(msEnd));
+                    }
+                }
+            } else {
+                // milliseconds missing, add .000 after seconds
+                sb.append(".000");
+            }
+
+            dateStr = sb.toString() + tzPart;
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
+            int tIndex = dateStr.lastIndexOf('T');
+            int timeLen = len - tIndex - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
