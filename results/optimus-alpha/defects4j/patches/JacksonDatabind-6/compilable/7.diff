diff --git a/tmp/30b11ad9-8670-4b73-8b42-b75b393b5cb8_buggy.java b/tmp/290bad0d-ace7-4c03-8640-efc62f4b4919_fixed.java
index cd412d2..1153c41 100644
--- a/tmp/30b11ad9-8670-4b73-8b42-b75b393b5cb8_buggy.java
+++ b/tmp/290bad0d-ace7-4c03-8640-efc62f4b4919_fixed.java
@@ -1,76 +1,135 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // Identify offset part: look for +/- in last 6 or last 5
+            int tzOffsetIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            // Handle colon in offset, and possible missing minutes in offset
+            if (tzOffsetIndex != -1 && (tzOffsetIndex + 3 < dateStr.length()) && dateStr.charAt(tzOffsetIndex + 3) == ':') {
+                // Remove colon, e.g. +01:00 -> +0100
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                sb.deleteCharAt(tzOffsetIndex + 3);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+                len = dateStr.length();
+            } else if (tzOffsetIndex != -1 && (tzOffsetIndex + 2 == dateStr.length() - 1)) {
+                // e.g. "+01" or "-02" at end; add minutes "00"
                 dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            }
+            // Ensure that seconds and milliseconds are present
+
+            // Start at the separator 'T', must be there for ISO8601 with time
+            int timeStart = dateStr.indexOf('T');
+            if (timeStart > 0) {
+                int timeLen = tzOffsetIndex != -1 ? tzOffsetIndex - (timeStart + 1) : len - (timeStart + 1);
+                String timePortion = dateStr.substring(timeStart + 1, timeStart + 1 + timeLen);
+                // timePortion might be e.g., "19:20", "19:20:30", "19:20:30.45"
+                int secSep = timePortion.indexOf(':', timePortion.indexOf(':') + 1);
+                boolean hasSeconds = (secSep != -1);
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                int insertPos = tzOffsetIndex != -1 ? tzOffsetIndex : len;
+                if (!hasSeconds) {
+                    // Insert ":00" before suffix (timezone).
+                    sb.insert(insertPos, ":00");
                     dateStr = sb.toString();
+                    // Now adjust variables since we changed the string
+                    len = dateStr.length();
+                    sb = new StringBuilder(dateStr);
+                    // Since we added 3 chars, we need to shift insertPos
+                    insertPos += 3;
                 }
+
+                // After possible addition of seconds, see if we have milliseconds
+                // Regex match for fractions: look for '.' after seconds
+                // Insert zeros until we have 3 digits after dot, or insert '.000' if missing
+
+                // Find the '.' after seconds, before timezone offset
+                int dotPos = -1;
+                int timeEnd = tzOffsetIndex != -1 ? tzOffsetIndex : sb.length();
+                for (int i = timeStart + 1; i < timeEnd; ++i) {
+                    if (sb.charAt(i) == '.') {
+                        dotPos = i;
+                        break;
+                    }
+                }
+                if (dotPos == -1) {
+                    // No dot, so insert ".000" after seconds (which is after ":ss")
+                    int secCount = 0, i = timeStart + 1;
+                    while (i < timeEnd && secCount < 2) {
+                        if (sb.charAt(i) == ':') {
+                            secCount++;
+                        }
+                        i++;
+                    }
+                    // After second ':', that's after seconds, so i points to insert position
+                    sb.insert(i, ".000");
+                    dateStr = sb.toString();
+                } else {
+                    // Has dot, check how many digits in fraction, pad as necessary
+                    int milliStart = dotPos + 1;
+                    int milliEnd = milliStart;
+                    // Only consider up to 3 digits
+                    while (milliEnd < timeEnd && Character.isDigit(sb.charAt(milliEnd)) && milliEnd - milliStart < 3) {
+                        milliEnd++;
+                    }
+                    int milliDigits = milliEnd - milliStart;
+                    if (milliDigits < 3) {
+                        // Insert zeros (milliDigits >= 0)
+                        for (int j = 0; j < 3 - milliDigits; j++) {
+                            sb.insert(milliEnd, '0');
+                        }
+                        dateStr = sb.toString();
+                    } else if (milliDigits > 3) {
+                        // Truncate extra digits (should not occur in valid ISO, but guard)
+                        sb.delete(milliStart + 3, milliEnd);
+                        dateStr = sb.toString();
+                    }
+                }
+            }
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            int tIndex = dateStr.lastIndexOf('T');
+            int timeLen = len - tIndex - 1;
+            if (tIndex >= 0 && timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
