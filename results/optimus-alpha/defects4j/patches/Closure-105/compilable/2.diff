diff --git a/tmp/9d657bd1-6b5a-4267-92c6-3c0ebfd3645a_buggy.java b/tmp/f45fcf09-0652-4fc1-9c66-1b01fff7f369_fixed.java
index ef65dd9..3d30b64 100644
--- a/tmp/9d657bd1-6b5a-4267-92c6-3c0ebfd3645a_buggy.java
+++ b/tmp/f45fcf09-0652-4fc1-9c66-1b01fff7f369_fixed.java
@@ -1,92 +1,106 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
   Node elem = arrayNode.getFirstChild();
+  boolean first = true;
   // Merges adjacent String nodes.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
-          sb.append(joinString);
+      if (!first) {
+        sb.append(joinString == null ? "null" : joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
     } else {
       if (sb.length() > 0) {
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
         sb = new StringBuilder();
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
+      first = true;
+      elem = elem.getNext();
+      continue;
     }
+    first = false;
     elem = elem.getNext();
   }
 
   if (sb.length() > 0) {
     // +2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
   // one for each comma.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       parent.replaceChild(n, emptyStringNode);
       break;
 
     case 1:
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
         // If the Node is not a string literal, ensure that
         // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString(""), foldedStringNode);
         foldedStringNode = replacement;
       }
       parent.replaceChild(n, foldedStringNode);
       break;
 
     default:
       // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+      int nonStringCount = 0;
+      for (Node c : arrayFoldedChildren) {
+        if (!NodeUtil.isImmutableValue(c)) {
+          nonStringCount++;
+        }
+      }
+      // Only skip if the folded result is exactly the same as original node,
+      // i.e. no folding could be performed.
+      if (arrayFoldedChildren.size() == arrayNode.getChildCount() &&
+          nonStringCount == arrayFoldedChildren.size()) {
         return;
       }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
       break;
   }
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
