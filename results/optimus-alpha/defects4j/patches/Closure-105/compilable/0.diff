diff --git a/tmp/401fdc48-2f5a-4220-b13e-c71d2170992b_buggy.java b/tmp/beb9f2ec-8d9c-473b-b128-a9c3bece69da_fixed.java
index ef65dd9..fb7acfb 100644
--- a/tmp/401fdc48-2f5a-4220-b13e-c71d2170992b_buggy.java
+++ b/tmp/beb9f2ec-8d9c-473b-b128-a9c3bece69da_fixed.java
@@ -1,92 +1,129 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
+    boolean foundNonString = false;
+    // Merges runs of adjacent immutable values (including empty strings).
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
+        foundNonString = true;
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
+        t.getCompiler().reportCodeChange();
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
+        t.getCompiler().reportCodeChange();
         break;
 
       default:
-        // No folding could actually be performed.
+        // No folding could actually be performed if the folded children
+        // match the original number of children and all were immutable values.
+        // In that case, we can fold (e.g. [1,2,3].join('') -> "123")
+        boolean allImmutable = true;
+        Node c = arrayNode.getFirstChild();
+        for (Node foldedNode : arrayFoldedChildren) {
+          if (c == null) {
+            allImmutable = false;
+            break;
+          }
+          if (!NodeUtil.isImmutableValue(c)) {
+            allImmutable = false;
+            break;
+          }
+          c = c.getNext();
+        }
+        if (allImmutable && arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+          // All array elements were immutable values, so we can replace with single string.
+          StringBuilder sbs = new StringBuilder();
+          Node ec = arrayNode.getFirstChild();
+          boolean first = true;
+          while (ec != null) {
+            if (!first) sbs.append(joinString);
+            sbs.append(NodeUtil.getStringValue(ec));
+            first = false;
+            ec = ec.getNext();
+          }
+          Node folded = Node.newString(sbs.toString());
+          parent.replaceChild(n, folded);
+          t.getCompiler().reportCodeChange();
+          return;
+        }
+        // No folding could actually be performed otherwise.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
-        break;
-    }
         t.getCompiler().reportCodeChange();
+        break;
+    }
   }
\ No newline at end of file
