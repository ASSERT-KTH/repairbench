diff --git a/tmp/da5295ca-d760-4299-953e-74abd89173f2_buggy.java b/tmp/25647aed-a5b8-4d25-a291-93be62cd4325_fixed.java
index 40f74f7..29b19ae 100644
--- a/tmp/da5295ca-d760-4299-953e-74abd89173f2_buggy.java
+++ b/tmp/25647aed-a5b8-4d25-a291-93be62cd4325_fixed.java
@@ -1,50 +1,62 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+        if (wildcard && (testPrefix == null || testPrefix.length() == 0)) {
+            // Accept any element regardless of namespace
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+        String localName = DOMNodePointer.getLocalName(node);
         String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+
+        boolean localNameMatches = wildcard 
+                || testName.getName().equals(localName);
+        boolean nsMatches;
+        if (wildcard && testPrefix != null && testPrefix.length() > 0) {
+            // Wildcard with a prefix: wildcard in local name but must match namespace
+            nsMatches = equalStrings(namespaceURI, nodeNS);
+        } else if (!wildcard && testPrefix != null && testPrefix.length() > 0) {
+            // Named node with prefix: must match namespace
+            nsMatches = equalStrings(namespaceURI, nodeNS);
+        } else {
+            // No prefix: ignore namespace
+            nsMatches = true;
         }
-            return false;
+
+        return localNameMatches && nsMatches;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
