diff --git a/tmp/c85a2e96-1efc-49a8-b880-d87386a68bb8_buggy.java b/tmp/930d4114-9f90-47ef-93e7-f3dd7032fbf0_fixed.java
index be2af16..eb5ac1d 100644
--- a/tmp/c85a2e96-1efc-49a8-b880-d87386a68bb8_buggy.java
+++ b/tmp/930d4114-9f90-47ef-93e7-f3dd7032fbf0_fixed.java
@@ -1,29 +1,48 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // Dates before the cutover are always Julian (even if Gregorian date is valid).
+    if (year < 0 || (year == 0 && monthOfYear < 0)) { // unlikely, but safe guard
+        return iJulianChronology.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
+            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    }
+
+    // First try Julian if date is before the cutover instant
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    if (year <= 1582) { // typical cutover is 1582, but iCutoverMillis is authoritative
+        // Get millis for the Julian date
+        instant = iJulianChronology.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+            return instant;
+        }
+    }
+
+    // Otherwise, try Gregorian
+    instant = iGregorianChronology.getDateTimeMillis(
+        year, monthOfYear, dayOfMonth,
         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        return instant;
+    }
+
+    // Check if the Julian version leads to a date after the cutover -- invalid
+    long julianInstant = iJulianChronology.getDateTimeMillis(
+        year, monthOfYear, dayOfMonth,
+        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    if (julianInstant >= iCutoverMillis) {
         throw new IllegalArgumentException("Specified date does not exist");
     }
-        }
-        return instant;
+    return julianInstant;
 }
\ No newline at end of file
