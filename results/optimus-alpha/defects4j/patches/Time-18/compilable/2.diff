diff --git a/tmp/2dac4698-9a97-4fcc-9f3b-22a3a06faa7b_buggy.java b/tmp/20f48ad3-cbbe-48db-baa9-245c340a3a8a_fixed.java
index be2af16..7dd6f0b 100644
--- a/tmp/2dac4698-9a97-4fcc-9f3b-22a3a06faa7b_buggy.java
+++ b/tmp/20f48ad3-cbbe-48db-baa9-245c340a3a8a_fixed.java
@@ -1,29 +1,53 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
+        // First try Julian chronology if date is before cutover year, otherwise Gregorian
         long instant;
+        boolean isJulianLeap = false;
+        try {
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        } catch (IllegalFieldValueException e) {
+            // Try Julian: could be in Julian leap year not valid in Gregorian
+            try {
                 instant = iJulianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
                 if (instant >= iCutoverMillis) {
+                    // Still not valid, so illegal cutover gap
+                    throw new IllegalArgumentException("Specified date does not exist");
+                }
+            } catch (IllegalFieldValueException je) {
+                // Not valid in either calendar
+                throw e; // propagate original Gregorian exception
+            }
+            return instant;
+        }
+        if (instant < iCutoverMillis) {
+            // double-check for gap
+            long julianInstant;
+            try {
+                julianInstant = iJulianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            } catch (IllegalFieldValueException e) {
+                // Not valid in Julian: keep instant as is
+                return instant;
+            }
+            if (julianInstant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
         }
         return instant;
     }
\ No newline at end of file
