diff --git a/tmp/727d2b32-a77d-44ad-b829-c9a06d6ea240_buggy.java b/tmp/8ffcea6b-3405-4aaf-9d7b-cc64361a93c9_fixed.java
index 308b324..3d934b1 100644
--- a/tmp/727d2b32-a77d-44ad-b829-c9a06d6ea240_buggy.java
+++ b/tmp/8ffcea6b-3405-4aaf-9d7b-cc64361a93c9_fixed.java
@@ -1,11 +1,30 @@
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    String value = comment.getValue();
+    // Check each line for ' * @', which is typical of JSDoc, or lines starting '@'
+    // Exclude actual JSDoc comments (which begin with /**)
+    if (!value.startsWith("**")) { // actual JSDoc comment text starts with /**
+      String[] lines = value.split("\n");
+      for (String line : lines) {
+        String trimmed = line.trim();
+        // Check for a line that begins with '*' (possibly after spaces) followed by '@'
+        if (trimmed.startsWith("*") && trimmed.contains("@")) {
           errorReporter.warning(
               SUSPICIOUS_COMMENT_WARNING,
               sourceName,
               comment.getLineno(), "", 0);
+          return;
+        }
+        // Or a line starting directly with @ (uncommon, but check if no leading stars)
+        if (trimmed.startsWith("@")) {
+          errorReporter.warning(
+              SUSPICIOUS_COMMENT_WARNING,
+              sourceName,
+              comment.getLineno(), "", 0);
+          return;
+        }
+      }
     }
   }
\ No newline at end of file
