diff --git a/tmp/c63c24e8-be9f-4109-bc03-d5202ddf724f_buggy.java b/tmp/0571aadf-3ff5-4a6f-90f2-3da4d1a1cf70_fixed.java
index 7f61a8c..a923080 100644
--- a/tmp/c63c24e8-be9f-4109-bc03-d5202ddf724f_buggy.java
+++ b/tmp/0571aadf-3ff5-4a6f-90f2-3da4d1a1cf70_fixed.java
@@ -1,73 +1,106 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  if (n.isEmpty() || n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (parent.getType() == Token.COMMA) {
     Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
+    if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {
+      if (n == parent.getFirstChild()
+          && parent.getChildCount() == 2
+          && n.getNext().isName()
+          && "eval".equals(n.getNext().getString())) {
         return;
       }
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
+      boolean foundExprResultOrBlock = false;
+      Node current = parent;
+      while ((current = current.getParent()) != null) {
+        int ancestorType = current.getType();
+        if (ancestorType == Token.COMMA) {
           continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+        }
+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
           return;
-          else
+        } else {
+          foundExprResultOrBlock = true;
           break;
         }
       }
+      // If not found, keep analyzing as usual.
+    }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
+    if (parent.getType() == Token.FOR
+        && parent.getChildCount() == 4
+        && (n == parent.getFirstChild()
+            || n == parent.getFirstChild().getNext().getNext())) {
+      // Allowed: first ("init") or third ("increment") clause of FOR
     } else {
       return;
     }
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+  // Fix: Always check for useless code inside COMMA operator, except for the last element (which might be an expression result).
+  boolean isChildOfComma = parent.getType() == Token.COMMA;
+  boolean isLastChildOfComma =
+      isChildOfComma && (n == parent.getLastChild());
+
+  // Only skip last child of COMMA if it's the last child and parent goes into EXPR_RESULT or BLOCK.
+  boolean skipForCommaLastChild = false;
+  if (isLastChildOfComma) {
+    Node ancestor = parent.getParent();
+    while (ancestor != null && ancestor.getType() == Token.COMMA) {
+      ancestor = ancestor.getParent();
+    }
+    if (ancestor != null
+        && (ancestor.getType() == Token.EXPR_RESULT
+            || ancestor.getType() == Token.BLOCK)) {
+      skipForCommaLastChild = true;
+    }
+  }
+
   if (!isResultUsed &&
       (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     } else if (n.isExprResult()) {
       return;
     }
+    if (skipForCommaLastChild) {
+      return; // do not warn for the last element in a comma, e.g., "x = 1, 2"
+    }
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
