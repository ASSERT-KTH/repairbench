diff --git a/tmp/8b241843-f8d8-44a6-97a8-fbe049286c17_buggy.java b/tmp/db51998f-0828-4f10-abc8-743f35e2b560_fixed.java
index 5f8ac1a..a6f42eb 100644
--- a/tmp/8b241843-f8d8-44a6-97a8-fbe049286c17_buggy.java
+++ b/tmp/db51998f-0828-4f10-abc8-743f35e2b560_fixed.java
@@ -1,34 +1,64 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
+        if (p2 == null || p2.parent == null) {
+            if (p1 == null) {
+                // Both are null, treat as equal
+                return 0;
+            }
+            // p2 is detached
+            return -1;
+        }
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
+        if (p1 == null || p1.parent == null) {
+            if (p2 == null) {
+                // Both are null, treat as equal
+                return 0;
+            }
+            // p1 is detached
+            return 1;
+        }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
+    // If either pointer is detached (outside of a document tree), define an ordering
+    if (p1 == null || p2 == null || p1.parent == null || p2.parent == null) {
+        // Convention: detached pointers are "less" (appear before document nodes)
+        if ((p1 == null || p1.parent == null) && (p2 == null || p2.parent == null)) {
+            return 0;
+        }
+        if (p1 == null || p1.parent == null) {
+            return -1;
+        }
+        if (p2 == null || p2.parent == null) {
+            return 1;
+        }
+    }
+
     if (depth1 == 1) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
