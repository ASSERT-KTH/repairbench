diff --git a/tmp/5b4e2a3e-d181-45a9-b7b4-a885c103e73a_buggy.java b/tmp/9ec8d42b-cff8-410c-846b-ca8ccba31b34_fixed.java
index 5f8ac1a..64d4079 100644
--- a/tmp/5b4e2a3e-d181-45a9-b7b4-a885c103e73a_buggy.java
+++ b/tmp/9ec8d42b-cff8-410c-846b-ca8ccba31b34_fixed.java
@@ -1,34 +1,50 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // Handle null pointers: if one is null and the other is not, ensure consistent ordering
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    if (p1 == null) {
+        return -1;
+    }
+    if (p2 == null) {
+        return 1;
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
+    if (p1.equals(p2)) {
         return 0;
     }
-
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
-        }
-
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Instead of throwing, fall back to pointer comparison via identity or toString or class name.
+        // Ensures disparate roots do not fail with exception.
+        // Put a deterministic order for pointers in separate trees
+        int classCmp = p1.getClass().getName().compareTo(p2.getClass().getName());
+        if (classCmp != 0) {
+            return classCmp;
+        }
+        int strCmp = p1.toString().compareTo(p2.toString());
+        if (strCmp != 0) {
+            return strCmp;
+        }
+        // Final fallback: identity hashCode
+        return System.identityHashCode(p1) - System.identityHashCode(p2);
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
