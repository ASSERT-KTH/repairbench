diff --git a/tmp/a70db51e-ec5d-460b-87de-299d65b6406e_buggy.java b/tmp/c0e194bb-d87e-4bea-887d-969630259314_fixed.java
index 5f8ac1a..1850990 100644
--- a/tmp/a70db51e-ec5d-460b-87de-299d65b6406e_buggy.java
+++ b/tmp/c0e194bb-d87e-4bea-887d-969630259314_fixed.java
@@ -1,34 +1,45 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == null || p2 == null) {
+        // If either pointer is null, consider them as not belonging to the same tree.
+        // Define a total ordering: non-null > null
+        if (p1 == null && p2 == null) {
+            return 0;
+        }
+        return p1 == null ? -1 : 1;
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
+    if (p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // p1 and p2 are not the same, but at root level; just give a stable ordering
+        int cmp = p1.toString().compareTo(p2.toString());
+        if (cmp != 0) {
+            return cmp;
         }
+        // fallback if toString is same but not equals (unlikely)
+        return System.identityHashCode(p1) - System.identityHashCode(p2);
+    }
+
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
