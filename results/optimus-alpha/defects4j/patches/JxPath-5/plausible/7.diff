diff --git a/tmp/d58936d1-a0fb-4be8-812b-205da096af1d_buggy.java b/tmp/874f2af4-854a-41bc-a5f0-9b8738c60dc2_fixed.java
index 5f8ac1a..cbcfdbb 100644
--- a/tmp/d58936d1-a0fb-4be8-812b-205da096af1d_buggy.java
+++ b/tmp/874f2af4-854a-41bc-a5f0-9b8738c60dc2_fixed.java
@@ -1,34 +1,45 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // If either pointer is null, but not both, handle ordering
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    if (p1 == null) {
+        return -1;
+    }
+    if (p2 == null) {
+        return 1;
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
+    if (p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Instead of throwing, establish ordering between different roots
+        // Compare by identity hash code so that order is stable
+        int h1 = System.identityHashCode(p1);
+        int h2 = System.identityHashCode(p2);
+        return (h1 < h2) ? -1 : ((h1 == h2) ? 0 : 1);
     }
+
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
