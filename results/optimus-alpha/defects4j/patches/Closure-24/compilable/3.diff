diff --git a/tmp/79348625-3425-448d-938d-ffe637830648_buggy.java b/tmp/6f442323-bd8a-44ce-a166-1bd1809d9f2f_fixed.java
index 602226b..b2d2f05 100644
--- a/tmp/79348625-3425-448d-938d-ffe637830648_buggy.java
+++ b/tmp/6f442323-bd8a-44ce-a166-1bd1809d9f2f_fixed.java
@@ -1,26 +1,35 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    if (parent != null && parent.isVar()) {
+      if (n.hasChildren()) {
+        Node value = n.getFirstChild();
+        if (value.isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
         } else {
           // TODO(robbyw): Support using locals for private variables.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
+      } else {
+        // Variable declared without initialization.
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
+    } else if (n.isFunction()) {
+      // Report functions directly as not allowed.
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
