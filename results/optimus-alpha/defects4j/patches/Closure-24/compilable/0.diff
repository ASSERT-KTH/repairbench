diff --git a/tmp/fbbb6771-4a09-4f5f-9dcb-1180ac4ce86d_buggy.java b/tmp/4ab61c38-c72a-4adb-9248-3f4fd72c5f71_fixed.java
index 602226b..a463114 100644
--- a/tmp/fbbb6771-4a09-4f5f-9dcb-1180ac4ce86d_buggy.java
+++ b/tmp/4ab61c38-c72a-4adb-9248-3f4fd72c5f71_fixed.java
@@ -1,26 +1,36 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    // Only consider variable declarations (var, let, const)
+    if (parent != null && parent.isVar()) {
+      // Check if variable has an initializer and if it's a simple qualified name.
+      if (n.hasChildren()) {
+        Node init = n.getFirstChild();
+        if (init.isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // This variable is declared but is NOT a simple qualified name RHS.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
+      } else {
+        // This variable is declared but has no initializer (e.g. var x;)
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
+    } else if (n.isFunction()) {
+      // Function declaration: also invalid.
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
