diff --git a/tmp/8187a02f-c1c2-4be1-9977-a0fd48c221ee_buggy.java b/tmp/77b794f5-e575-4150-a2d6-d420ee62f88e_fixed.java
index 602226b..6749685 100644
--- a/tmp/8187a02f-c1c2-4be1-9977-a0fd48c221ee_buggy.java
+++ b/tmp/77b794f5-e575-4150-a2d6-d420ee62f88e_fixed.java
@@ -1,26 +1,29 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
+    if (parent != null && parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+
+        // Make sure aliasVar has an initializer and is not a function declaration
+        Node init = aliasVar.getInitialValue();
+        if (init != null && init.isQualifiedName()) {
           aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          String qualifiedName = init.getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
+      } else {
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
+    } else if (n.isFunction()) {
+      // Top-level bleeding functions should also report as non-alias locals
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
