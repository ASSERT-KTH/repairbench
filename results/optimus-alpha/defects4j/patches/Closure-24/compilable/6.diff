diff --git a/tmp/54bde5fd-ddf4-4a21-88a5-b257a9ed52f0_buggy.java b/tmp/f49651ba-3964-4832-8e3e-3a7eb7f56ec5_fixed.java
index 602226b..42d9210 100644
--- a/tmp/54bde5fd-ddf4-4a21-88a5-b257a9ed52f0_buggy.java
+++ b/tmp/f49651ba-3964-4832-8e3e-3a7eb7f56ec5_fixed.java
@@ -1,26 +1,39 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
+
+    if (parent != null && parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        Node init = aliasVar.getInitialValue();
+        if (init != null) {
+          String qualifiedName = init.getQualifiedName();
+          if (qualifiedName != null) {
             transformation.addAlias(name, qualifiedName);
+          } else {
+            // Not a proper qualified name; report.
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+          }
+        } else {
+          // No initializer; report.
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+        }
         // Bleeding functions already get a BAD_PARAMETERS error, so just
         // do nothing.
         // Parameters of the scope function also get a BAD_PARAMETERS
         // error.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
+    } else {
+      // Functions defined in the scope body (not variable statements),
+      // they are not allowed as aliases.
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
