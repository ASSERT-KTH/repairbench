diff --git a/tmp/719d9574-dc3e-4dc1-83eb-507cfc59f57b_buggy.java b/tmp/3f94ba16-7012-45dd-a528-ce1143293ed0_fixed.java
index 63641d0..6e47114 100644
--- a/tmp/719d9574-dc3e-4dc1-83eb-507cfc59f57b_buggy.java
+++ b/tmp/3f94ba16-7012-45dd-a528-ce1143293ed0_fixed.java
@@ -1,33 +1,40 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Make sure all inferred types are non-null. 
+    // If inference fails for a template, use UNKNOWN_TYPE.
+    // This avoids situations where we leave some template types unresolved.
+    for (TemplateType key : keys) {
+      if (!inferred.containsKey(key) || inferred.get(key) == null) {
+        inferred.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      }
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Replace all template types.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
