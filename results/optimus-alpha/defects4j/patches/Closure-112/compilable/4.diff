diff --git a/tmp/3fb31602-ea0f-4965-9d14-f2d978349755_buggy.java b/tmp/cec76edf-af60-48e7-abb0-b2ec934cc310_fixed.java
index 63641d0..e949379 100644
--- a/tmp/3fb31602-ea0f-4965-9d14-f2d978349755_buggy.java
+++ b/tmp/cec76edf-af60-48e7-abb0-b2ec934cc310_fixed.java
@@ -1,33 +1,53 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // We must preserve the original invariant: do *not* infer/replace template types
+  // if we couldn't fully infer all (non-optional) template types in the context of the call.
+  // Otherwise, we might set template types in the function itself to unknown, which breaks
+  // the propagation of the template constraints (see issue 1058 and testTemplatized11).
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+  // Check if we have values for all template keys
+  boolean anyInferred = false;
+  boolean allInferred = true;
+  for (TemplateType key : keys) {
+    if (inferred.containsKey(key)) {
+      anyInferred = true;
+    } else {
+      allInferred = false;
+      break;
+    }
+  }
+
+  // Only replace templates if all were inferred (partial inference is wrong for call sites).
+  if (!allInferred) {
+    return anyInferred; // Return true if we inferred at least one template for downstream logic.
+  }
+
+  // Replace all template types.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
