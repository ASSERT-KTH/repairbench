diff --git a/tmp/ab6f944f-8fce-44a3-8439-68959adb21aa_buggy.java b/tmp/01b0cce7-785e-44b9-9b59-03bb77644e14_fixed.java
index 63641d0..745f27c 100644
--- a/tmp/ab6f944f-8fce-44a3-8439-68959adb21aa_buggy.java
+++ b/tmp/01b0cce7-785e-44b9-9b59-03bb77644e14_fixed.java
@@ -1,33 +1,38 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+ * actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+      registry, inferred, /* replaceMissingTypesWithUnknown=*/ false);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
+  // Only use the resolved return type if all template types were inferred,
+  // otherwise preserve UNKNOWN to avoid spurious warnings.
+  if (inferred.keySet().containsAll(keys)) {
     n.setJSType(replacementFnType.getReturnType());
+  } else {
+    n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));
+  }
 
   return replacer.madeChanges;
 }
\ No newline at end of file
