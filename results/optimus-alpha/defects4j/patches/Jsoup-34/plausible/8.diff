diff --git a/tmp/7c4fa5bf-e907-4d77-8a49-24da7150aaaa_buggy.java b/tmp/558195ed-846a-4599-a85f-1da682d36129_fixed.java
index 21f64c6..d0a2528 100644
--- a/tmp/7c4fa5bf-e907-4d77-8a49-24da7150aaaa_buggy.java
+++ b/tmp/558195ed-846a-4599-a85f-1da682d36129_fixed.java
@@ -1,23 +1,23 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+    int seqLen = seq.length();
+    int max = length - seqLen + 1; // max offset to safely match the full sequence
+
+    for (int offset = pos; offset < max; offset++) {
+        // scan to first instance of startChar:
+        if (startChar != input[offset]) {
+            while (++offset < max && startChar != input[offset]);
+            if (offset >= max) // went past valid bounds
+                break;
+        }
+        // Check the rest of the sequence
+        int i = 1;
+        while (i < seqLen && seq.charAt(i) == input[offset + i]) {
+            i++;
+        }
+        if (i == seqLen) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
