diff --git a/tmp/2b965dad-e329-4992-a059-c9384c5f4fa0_buggy.java b/tmp/a405b9cf-f946-4e70-b003-e08a86665383_fixed.java
index 21f64c6..7b4987e 100644
--- a/tmp/2b965dad-e329-4992-a059-c9384c5f4fa0_buggy.java
+++ b/tmp/a405b9cf-f946-4e70-b003-e08a86665383_fixed.java
@@ -1,23 +1,22 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLen = seq.length();
+    int maxOffset = length - seqLen + 1;
+    for (int offset = pos; offset < maxOffset; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (startChar != input[offset]) {
+            while (++offset < maxOffset && startChar != input[offset]);
+            if (offset >= maxOffset)
+                break;
+        }
+        int i = 1;
+        while (i < seqLen && input[offset + i] == seq.charAt(i)) {
+            i++;
+        }
+        if (i == seqLen)
             return offset - pos;
-            }
+        // else continue scanning
     }
     return -1;
 }
\ No newline at end of file
