diff --git a/tmp/565a548e-376b-40a2-88d5-56fae1b95869_buggy.java b/tmp/df296ae9-c980-48f4-9735-d8f6b6b908be_fixed.java
index 21f64c6..1e55db4 100644
--- a/tmp/565a548e-376b-40a2-88d5-56fae1b95869_buggy.java
+++ b/tmp/df296ae9-c980-48f4-9735-d8f6b6b908be_fixed.java
@@ -1,23 +1,22 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    int seqLen = seq.length();
+    if (seqLen == 0)
+        return -1;
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
+    int max = length - seqLen + 1; // last position where seq of length seqLen can match
+    for (int offset = pos; offset < max; offset++) {
+        // scan to first instance of startChar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            while(++offset < max && startChar != input[offset]);
+        if (offset >= max)
+            break;
+        int i = 1;
+        while (i < seqLen && seq.charAt(i) == input[offset + i]) {
+            i++;
+        }
+        if (i == seqLen) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
