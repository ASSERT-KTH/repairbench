diff --git a/tmp/659f7e39-1316-45c9-887c-a784744bc895_buggy.java b/tmp/84767ce1-ca92-48bb-98cd-55698e858f3b_fixed.java
index 21f64c6..68d99ac 100644
--- a/tmp/659f7e39-1316-45c9-887c-a784744bc895_buggy.java
+++ b/tmp/84767ce1-ca92-48bb-98cd-55698e858f3b_fixed.java
@@ -1,23 +1,25 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLen = seq.length();
+    // the last possible position to start matching the sequence, so that the full sequence fits within input
+    int maxScan = length - seqLen;
+    for (int offset = pos; offset <= maxScan; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while(++offset <= maxScan && startChar != input[offset]);
+        if (offset > maxScan)
+            break;
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int j = 1;
+        int last = seqLen;
+        while (j < last && seq.charAt(j) == input[i]) {
+            i++;
+            j++;
+        }
+        if (j == last) // found full sequence
             return offset - pos;
-            }
+        // else, continue searching
     }
     return -1;
 }
\ No newline at end of file
