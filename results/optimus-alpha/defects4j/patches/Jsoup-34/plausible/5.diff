diff --git a/tmp/8211bdc3-9578-443d-a13c-16a43f5b36c5_buggy.java b/tmp/9477c9bb-ab03-4cea-b7bf-a21a5434bf7b_fixed.java
index 21f64c6..4ee04a9 100644
--- a/tmp/8211bdc3-9578-443d-a13c-16a43f5b36c5_buggy.java
+++ b/tmp/9477c9bb-ab03-4cea-b7bf-a21a5434bf7b_fixed.java
@@ -1,23 +1,20 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLen = seq.length();
+    int lastSearchPos = length - seqLen + 1; // last offset where seq can start without running out of input
+    for (int offset = pos; offset < lastSearchPos; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while(++offset < lastSearchPos && startChar != input[offset]);
+        if (offset < lastSearchPos) {
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int j = 1;
+            while (j < seqLen && input[i] == seq.charAt(j)) {
+                i++; j++;
+            }
+            if (j == seqLen) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
