diff --git a/tmp/418b6689-b4f2-4934-90ce-c2b007289fdc_buggy.java b/tmp/6cd6e0db-b14c-4dd4-8ebc-8ed83cfcf1cf_fixed.java
index 21f64c6..ae92630 100644
--- a/tmp/418b6689-b4f2-4934-90ce-c2b007289fdc_buggy.java
+++ b/tmp/6cd6e0db-b14c-4dd4-8ebc-8ed83cfcf1cf_fixed.java
@@ -1,23 +1,22 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    int seqLen = seq.length();
+    int maxOffset = length - seqLen + 1; // last starting position for possible match
+    for (int offset = pos; offset < maxOffset; offset++) {
+        // scan to first instance of startChar:
+        if (startChar != input[offset]) {
+            while (++offset < maxOffset && startChar != input[offset]);
+            if (offset >= maxOffset) // gone past boundary, no match possible
+                break;
+        }
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int last = offset + seqLen;
+        int j = 1;
+        // check rest of the sequence
+        for (; i < last && seq.charAt(j) == input[i]; i++, j++);
+        if (j == seqLen) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
