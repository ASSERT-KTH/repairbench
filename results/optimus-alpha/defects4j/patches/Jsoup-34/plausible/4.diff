diff --git a/tmp/f9dc25c0-3fc5-46bf-a794-3edd5fd4a61e_buggy.java b/tmp/5a0b1a22-120d-4d01-b7f4-95f19aadb514_fixed.java
index 21f64c6..86128a5 100644
--- a/tmp/f9dc25c0-3fc5-46bf-a794-3edd5fd4a61e_buggy.java
+++ b/tmp/5a0b1a22-120d-4d01-b7f4-95f19aadb514_fixed.java
@@ -1,23 +1,20 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    int seqLen = seq.length();
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int maxScan = length - seqLen + 1; // don't scan such that window exceeds buffer
+    outer:
+    for (int offset = pos; offset < maxScan; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            continue;
+        // found a possible match, check following chars
+        for (int j = 1; j < seqLen; j++) {
+            if (input[offset + j] != seq.charAt(j))
+                continue outer;
+        }
+        // found full sequence
         return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
