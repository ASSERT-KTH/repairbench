diff --git a/tmp/9c99fc45-b7a1-4e7f-b2c6-c55f57b245e8_buggy.java b/tmp/97bf3315-3c90-42ac-b08b-c4ffbc314c56_fixed.java
index 21f64c6..71fa3e8 100644
--- a/tmp/9c99fc45-b7a1-4e7f-b2c6-c55f57b245e8_buggy.java
+++ b/tmp/97bf3315-3c90-42ac-b08b-c4ffbc314c56_fixed.java
@@ -1,23 +1,23 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+        int seqLen = seq.length();
+        int maxOffset = length - seqLen + 1; // Only scan where there is enough room for seq
+        for (int offset = pos; offset < maxOffset; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+                while(++offset < maxOffset && startChar != input[offset]);
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+            int last = offset + seqLen; // exclusive
+            if (offset < maxOffset) {
+                int j = 1;
+                while (i < last && seq.charAt(j) == input[i]) {
+                    i++;
+                    j++;
+                }
                 if (i == last) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
