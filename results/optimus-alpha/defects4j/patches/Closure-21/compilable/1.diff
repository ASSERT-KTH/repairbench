diff --git a/tmp/38b0d985-6853-457d-810b-c70c0233396c_buggy.java b/tmp/ca00380d-c19d-4750-a9ba-6bb76d1ec501_fixed.java
index 49a5702..a009cbe 100644
--- a/tmp/38b0d985-6853-457d-810b-c70c0233396c_buggy.java
+++ b/tmp/ca00380d-c19d-4750-a9ba-6bb76d1ec501_fixed.java
@@ -1,66 +1,74 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Bug fix: Do not return if result is used -- must still check if
+  // n is a side-effect free expression used in other contexts, e.g., comma.
   if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
+    // If this is the last child in a top-level COMMA, and the result is used,
+    // let descendant logic handle it. If it's not the last, or not a result,
+    // check for side-effect-free code.
     if (n == parent.getLastChild()) {
+      // Only skip when last child in a context that will immediately be checked at a higher level
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
         if (ancestorType == Token.COMMA) continue;
         if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
         else break;
       }
     }
+    // No early return here; allow below logic to check for useless code.
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
     if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
-    if (
+
+  // Only warn for expressions whose results are not used,
+  // unless it's allowed by comma/for context above.
+  if ((!isResultUsed) &&
       (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
