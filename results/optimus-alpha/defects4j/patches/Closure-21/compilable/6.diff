diff --git a/tmp/889cab4f-3d4d-41e6-88d4-c7e360b2f89a_buggy.java b/tmp/a357333c-fc5f-4bce-a8b8-a8cf55dc5386_fixed.java
index 49a5702..86b238c 100644
--- a/tmp/889cab4f-3d4d-41e6-88d4-c7e360b2f89a_buggy.java
+++ b/tmp/a357333c-fc5f-4bce-a8b8-a8cf55dc5386_fixed.java
@@ -1,66 +1,83 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Only flag no-side-effect expressions that are direct children of a BLOCK or EXPR_RESULT
+  boolean isStatement = NodeUtil.isStatement(n);
+  boolean directInBlockOrExprResult =
+      parent != null && (parent.getType() == Token.BLOCK || parent.getType() == Token.EXPR_RESULT);
+
+  boolean isUseless = false;
+
   if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
+    // Only check commas in explicit comma expressions, not in the statement context
+    if (!isResultUsed) {
       if (n == parent.getLastChild()) {
+        // For the last child of a comma, check the parent chain
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA) continue;
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
           else break;
         }
       }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+      // If it's not the last child, it's a useless code
+      isUseless = true;
+    }
+  } else if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK) {
+    isUseless = true;
+  } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+      (n == parent.getFirstChild() ||
+       n == parent.getFirstChild().getNext().getNext())) {
+    // allow init and update expressions in for
+    // do nothing, not useless
+  } else {
+    // In all other contexts, do NOT report.
     return;
   }
-    }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  if (isUseless && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
