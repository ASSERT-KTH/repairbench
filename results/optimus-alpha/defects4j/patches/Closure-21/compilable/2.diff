diff --git a/tmp/7d723dc2-38da-401d-a4d8-2722870fe91c_buggy.java b/tmp/2c004930-19c4-404c-8fa4-6d479b648f6d_fixed.java
index 49a5702..25d7bd2 100644
--- a/tmp/7d723dc2-38da-401d-a4d8-2722870fe91c_buggy.java
+++ b/tmp/2c004930-19c4-404c-8fa4-6d479b648f6d_fixed.java
@@ -1,66 +1,111 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Fix: Always report useless side-effect free code that is result in a COMMA
+  // sequence, except in a statement position (EXPR_RESULT, BLOCK), and
+  // allow for "for" loop heads
+  //
+  // The original code made it too hard to report errors for side-effect free
+  // sub-expressions inside a comma but not in statement position.
   if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
+    // The ONLY time result may be used is if this comma-tree is inside
+    // EXPR_RESULT or BLOCK (i.e., statement), FOR header, or all but last child?
+    Node ancestor = parent;
+    boolean inExprResultOrBlock = false;
+    while (ancestor != null) {
+      int ancestorType = ancestor.getType();
+      if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {
+        inExprResultOrBlock = true;
+        break;
+      }
+      if (ancestorType == Token.FOR) {
+        // If this is child 0 or 2 (initializer or increment)
+        Node child = n;
+        Node forNode = ancestor;
+        int index = 0;
+        for (Node c = forNode.getFirstChild(); c != null; c = c.getNext(), index++) {
+          if (c == child) {
+            // ok, don't warn for these
             return;
           }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
         }
+        // Else keep looking
+      }
+      ancestor = ancestor.getParent();
+    }
+    if (!inExprResultOrBlock) {
+      if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+        String msg = "This code lacks side-effects. Is there a bug?";
+        if (n.isString()) {
+          msg = "Is there a missing '+' on the previous line?";
+        } else if (isSimpleOp) {
+          msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
+              "' operator is not being used.";
+        }
+
+        t.getCompiler().report(
+            t.makeError(n, level, USELESS_CODE_ERROR, msg));
+        // TODO(johnlenz): determine if it is necessary to
+        // try to protect side-effect free statements as well.
+        if (!NodeUtil.isStatement(n)) {
+          problemNodes.add(n);
         }
+      }
+    }
+    // If in EXPR_RESULT or BLOCK, let the normal visitation happen later
+    return;
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    // Don't warn for FOR loop headers
+    if (!(parent.getType() == Token.FOR &&
+        parent.getChildCount() == 4 &&
+        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
   if (
       (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
