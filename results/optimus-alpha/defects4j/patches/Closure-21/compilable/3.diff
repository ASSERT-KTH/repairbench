diff --git a/tmp/dbe990a9-9f4b-46a5-a274-860dd4079d0c_buggy.java b/tmp/cf25de46-0e64-4a87-8789-2b3556aac96f_fixed.java
index 49a5702..bc670c3 100644
--- a/tmp/dbe990a9-9f4b-46a5-a274-860dd4079d0c_buggy.java
+++ b/tmp/cf25de46-0e64-4a87-8789-2b3556aac96f_fixed.java
@@ -1,66 +1,77 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  if (n.isEmpty() || n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
   if (parent.getType() == Token.COMMA) {
     if (isResultUsed) {
       return;
     }
+    // Don't early return here! We want to warn about useless side-effect free
+    // code that's a child (except for the last one) of a COMMA.
+    // the error should be reported for every useless child except for the last one _if the parent is in statement position_
     if (n == parent.getLastChild()) {
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
         if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+          return;
+        else
+          break;
       }
     }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    // Exception: "FOR" node, its first and third child can be side-effect-free expressions
+    if (!(parent.getType() == Token.FOR
+          && parent.getChildCount() == 4
+          && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  // If result is used, or is simple op, or side-effects, suppress warning
+  if ((!isSimpleOp && NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    return;
+  }
+
   String msg = "This code lacks side-effects. Is there a bug?";
   if (n.isString()) {
     msg = "Is there a missing '+' on the previous line?";
   } else if (isSimpleOp) {
     msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
         "' operator is not being used.";
   }
 
   t.getCompiler().report(
       t.makeError(n, level, USELESS_CODE_ERROR, msg));
   // TODO(johnlenz): determine if it is necessary to
   // try to protect side-effect free statements as well.
   if (!NodeUtil.isStatement(n)) {
     problemNodes.add(n);
   }
 }
\ No newline at end of file
-  }
