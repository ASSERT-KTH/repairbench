diff --git a/tmp/8def1698-d25a-4af9-8529-9e217f2d940e_buggy.java b/tmp/beabcdd8-00ad-413a-937f-f2d800ae5a6c_fixed.java
index 49a5702..f66c130 100644
--- a/tmp/8def1698-d25a-4af9-8529-9e217f2d940e_buggy.java
+++ b/tmp/beabcdd8-00ad-413a-937f-f2d800ae5a6c_fixed.java
@@ -1,66 +1,87 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Handle when n is in COMMA context
   if (parent.getType() == Token.COMMA) {
     if (isResultUsed) {
       return;
     }
     if (n == parent.getLastChild()) {
+      // Only check ancestors if this is the *last* node in a comma expr
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
         if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+        // Bug fix: we should only return here if we are INSIDE an EXPR_RESULT *directly*
+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK &&
+            !(ancestorType == Token.FOR && (
+                n == parent.getFirstChild() || 
+                (parent.getFirstChild() != null && parent.getFirstChild().getNext() != null &&
+                 n == parent.getFirstChild().getNext().getNext())
+                ))) {
+          return;
+        } else {
+          break;
+        }
       }
     }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    // Also allow certain FOR loop positions
+    if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() ||
+           (parent.getFirstChild() != null && parent.getFirstChild().getNext() != null &&
+           n == parent.getFirstChild().getNext().getNext())))) {
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  // Fix: Allow useless code warning if not result used and not mayHaveSideEffects
+  if (isResultUsed || NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+    return;
+  }
+
+  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
