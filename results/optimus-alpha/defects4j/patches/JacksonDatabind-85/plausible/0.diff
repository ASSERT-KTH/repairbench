diff --git a/tmp/a2d86686-0bf9-4aad-8189-68c03c0ba6e1_buggy.java b/tmp/50e8686b-f477-4c70-a470-c7566cdf4d36_fixed.java
index d926eea..e83ac88 100644
--- a/tmp/a2d86686-0bf9-4aad-8189-68c03c0ba6e1_buggy.java
+++ b/tmp/50e8686b-f477-4c70-a470-c7566cdf4d36_fixed.java
@@ -1,48 +1,60 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
-        // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+    // With [databind#1648], this gets bit tricky..
+    // First: custom pattern/locale/timezone will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                     || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
+        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();
         final String pattern = format.hasPattern()
                         ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                        : null;
         final Locale loc = format.hasLocale()
                         ? format.getLocale()
                         : serializers.getLocale();
+        if (pattern != null) {
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
+            df.setTimeZone(tz);
+            return withFormat(Boolean.FALSE, df);
         }
+        // [databind#1648]: If no pattern, must use default DateFormat from provider,
+        // contextualized with correct TimeZone and Locale if possible.
+        DateFormat base = serializers.getConfig().getDateFormat();
+        DateFormat df;
+        if (base instanceof SimpleDateFormat) {
+            // Must re-create for Locale/Timezone
+            SimpleDateFormat std = (SimpleDateFormat) base;
+            SimpleDateFormat sdf = new SimpleDateFormat(std.toPattern(), loc);
+            sdf.setTimeZone(tz);
+            df = sdf;
+        } else if (base instanceof StdDateFormat) {
+            // StdDateFormat is immutable, but it supports withLocale()/withTimeZone()
+            df = ((StdDateFormat) base)
+                    .withTimeZone(tz)
+                    .withLocale(loc);
+        } else {
+            // For other types, try to clone and set timezone, but nothing for locale
+            try {
+                df = (DateFormat) base.clone();
                 df.setTimeZone(tz);
+            } catch (Exception e) {
+                throw new IllegalArgumentException("Unable to clone DateFormat of type " + base.getClass().getName(), e);
+            }
+        }
         return withFormat(Boolean.FALSE, df);
     }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
