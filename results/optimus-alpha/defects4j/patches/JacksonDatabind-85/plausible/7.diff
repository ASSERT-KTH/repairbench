diff --git a/tmp/b316e86c-fd50-4309-b975-474d4e2ad465_buggy.java b/tmp/cb0ce98f-0ce9-4fd9-8f17-1b6aedece5bd_fixed.java
index d926eea..22ba2f8 100644
--- a/tmp/b316e86c-fd50-4309-b975-474d4e2ad465_buggy.java
+++ b/tmp/cb0ce98f-0ce9-4fd9-8f17-1b6aedece5bd_fixed.java
@@ -1,48 +1,61 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
             || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
         final String pattern = format.hasPattern()
                 ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                : null;
         final Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
+
+        if (pattern != null) {
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
+        } else {
+            // No pattern: use default DateFormat from provider
+            DateFormat baseFormat = serializers.getConfig().getDateFormat();
+            DateFormat df;
+            if (baseFormat instanceof SimpleDateFormat) {
+                // Re-create to allow specific Locale/TimeZone
+                SimpleDateFormat sdf = (SimpleDateFormat) baseFormat;
+                SimpleDateFormat newSdf = new SimpleDateFormat(sdf.toPattern(), loc);
+                TimeZone timeZoneToUse = (tz != null) ? tz : sdf.getTimeZone();
+                newSdf.setTimeZone(timeZoneToUse);
+                df = newSdf;
+            } else {
+                // For other DateFormats, try to clone and set TimeZone if needed
+                df = (DateFormat) baseFormat.clone();
+                if (tz != null) {
+                    df.setTimeZone(tz);
+                }
+            }
+            return withFormat(Boolean.FALSE, df);
+        }
     }
 
     // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
