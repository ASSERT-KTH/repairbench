diff --git a/tmp/9d7a6789-ce47-46b9-8f9e-79abb9b33749_buggy.java b/tmp/dc3803c2-5e61-4fce-ad4f-07d624749ce4_fixed.java
index d926eea..9dbba2c 100644
--- a/tmp/9d7a6789-ce47-46b9-8f9e-79abb9b33749_buggy.java
+++ b/tmp/dc3803c2-5e61-4fce-ad4f-07d624749ce4_fixed.java
@@ -1,48 +1,66 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                     || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
+        final String pattern;
+        if (format.hasPattern()) {
+            pattern = format.getPattern();
+            final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
+        } else {
+            // [databind#1648]: If no pattern specified, use global DateFormat as base
+            DateFormat base = serializers.getConfig().getDateFormat();
+            DateFormat df;
+            if (base instanceof SimpleDateFormat) {
+                SimpleDateFormat std = (SimpleDateFormat) base;
+                // Must make a clone to avoid mutating shared default
+                SimpleDateFormat newDf = (SimpleDateFormat) std.clone();
+                Locale loc = format.hasLocale() ? format.getLocale() : std.getLocale();
+                if (format.hasLocale() && !format.getLocale().equals(std.getLocale())) {
+                    // Need to re-create with new locale
+                    newDf = new SimpleDateFormat(std.toPattern(), loc);
+                }
+                df = newDf;
+            } else if (base instanceof StdDateFormat) {
+                // For StdDateFormat, clone and set pattern/locale if necessary
+                df = ((StdDateFormat) base).clone();
+            } else if (base != null) {
+                // Best effort for unknown DateFormat
+                df = (DateFormat) base.clone();
+            } else {
+                // Fallback, construct default
+                df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale());
+            }
+            if (tz == null) {
+                tz = serializers.getTimeZone();
+            }
+            df.setTimeZone(tz);
+            return withFormat(Boolean.FALSE, df);
+        }
     }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
