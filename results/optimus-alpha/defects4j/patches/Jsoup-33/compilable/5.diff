diff --git a/tmp/64315c6f-ec49-4dff-bb2b-25efd054fe1d_buggy.java b/tmp/b3b2981e-b0ae-4e8e-8cc8-6ae67349b538_fixed.java
index dc93be3..82724d7 100644
--- a/tmp/64315c6f-ec49-4dff-bb2b-25efd054fe1d_buggy.java
+++ b/tmp/b3b2981e-b0ae-4e8e-8cc8-6ae67349b538_fixed.java
@@ -1,14 +1,17 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    // handle empty known tags and unknown tags differently
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+        // Only add to stack and emit fake EndTag for unknown/self-closing unknown tags;
+        // for known empty tags (like br, img, hr), spec does not require fake end tag and not added to stack.
+        if (!el.tag().isKnownTag() || !el.tag().isSelfClosing()) {
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));
+        }
         return el;
     }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
