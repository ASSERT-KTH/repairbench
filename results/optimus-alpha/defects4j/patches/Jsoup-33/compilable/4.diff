diff --git a/tmp/199e1353-175c-45ba-8519-6766b45fc234_buggy.java b/tmp/71685cb5-6955-43a2-9bde-8900307b9fab_fixed.java
index dc93be3..79b7b51 100644
--- a/tmp/199e1353-175c-45ba-8519-6766b45fc234_buggy.java
+++ b/tmp/71685cb5-6955-43a2-9bde-8900307b9fab_fixed.java
@@ -1,14 +1,23 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+
     if (startTag.isSelfClosing()) {
+        // Check if the tag is known and recognized as a void tag (e.g., br, img, hr, meta, link, etc.)
+        Tag tag = Tag.valueOf(startTag.name());
         Element el = insertEmpty(startTag);
+        if (tag.isKnownTag() && tag.isSelfClosing()) {
+            // Do NOT add to stack, do NOT emit fake end tag - just return (void elements)
+            return el;
+        } else {
+            // For unknown or non-void tags, we treat as opening and closing immediately
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
