diff --git a/tmp/4009731c-780c-4d83-9017-15738bf6ba12_buggy.java b/tmp/52c83b9b-5986-4a2c-ab13-7094f6eddfea_fixed.java
index dc93be3..cd83dc1 100644
--- a/tmp/4009731c-780c-4d83-9017-15738bf6ba12_buggy.java
+++ b/tmp/52c83b9b-5986-4a2c-ab13-7094f6eddfea_fixed.java
@@ -1,14 +1,18 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        Tag tag = Tag.valueOf(startTag.name());
+        Element el = new Element(tag, baseUri, startTag.attributes);
+        insertNode(el); // directly add to the tree, do not add to stack
+        // For known tags that are not self-closing per spec, emit an end tag to close them.
+        if (tag.isKnownTag() && !tag.isSelfClosing()) {
+            tokeniser.emit(new Token.EndTag(el.tagName()));
+        }
+        // Do not add to stack for self-closing tags
         return el;
     }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
