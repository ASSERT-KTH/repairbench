diff --git a/tmp/139aedf8-b1a6-4616-a65c-6ee444b9aeae_buggy.java b/tmp/1a2c6206-3f13-4b59-9f70-d9e93c1f0171_fixed.java
index dc93be3..6ec687c 100644
--- a/tmp/139aedf8-b1a6-4616-a65c-6ee444b9aeae_buggy.java
+++ b/tmp/1a2c6206-3f13-4b59-9f70-d9e93c1f0171_fixed.java
@@ -1,14 +1,21 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (Tag.valueOf(startTag.name()).isSelfClosing()) {
+            Element el = insertEmpty(startTag);
+            // Known empty elements should not be added to stack nor should a fake end tag be emitted
+            return el;
+        } else {
+            // Unknown tags or not known-empty, treat as normal with fake end tag
             Element el = insertEmpty(startTag);
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
