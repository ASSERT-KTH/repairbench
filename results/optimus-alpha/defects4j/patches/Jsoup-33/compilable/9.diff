diff --git a/tmp/6f941695-1d01-439c-b081-e16cdb522393_buggy.java b/tmp/e1154c3a-b075-4e13-8f89-07f61bc93330_fixed.java
index dc93be3..5718290 100644
--- a/tmp/6f941695-1d01-439c-b081-e16cdb522393_buggy.java
+++ b/tmp/e1154c3a-b075-4e13-8f89-07f61bc93330_fixed.java
@@ -1,14 +1,19 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
+        Tag tag = Tag.valueOf(startTag.name());
+        Element el = new Element(tag, baseUri, startTag.attributes);
+        insert(el);
+        // Only known void tags should be forced closed, unknown are left as self closing, per spec
+        if (tag.isKnownTag() && tag.isSelfClosing()) {
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        }
         return el;
     }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
