diff --git a/tmp/fb6fe67d-8882-4e35-8c66-c7a59ff6c4b7_buggy.java b/tmp/d434ed02-26d1-4870-a3a4-3c6fe485ac45_fixed.java
index dc93be3..5310543 100644
--- a/tmp/fb6fe67d-8882-4e35-8c66-c7a59ff6c4b7_buggy.java
+++ b/tmp/d434ed02-26d1-4870-a3a4-3c6fe485ac45_fixed.java
@@ -1,14 +1,20 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        Tag tag = Tag.valueOf(startTag.name());
+        if (tag.isSelfClosing()) { // known empty tag
+            Element el = insertEmpty(startTag);
+            return el;
+        } else { // unknown or not a known empty tag, treat as normal but force end tag
             Element el = insertEmpty(startTag);
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
