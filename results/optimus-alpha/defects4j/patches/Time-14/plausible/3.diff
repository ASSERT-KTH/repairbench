diff --git a/tmp/494e2e20-3fe5-4804-a63a-458d2b831e0d_buggy.java b/tmp/665352ed-6b01-41a2-82ff-a3553548b69d_fixed.java
index 10616db..55cdba0 100644
--- a/tmp/494e2e20-3fe5-4804-a63a-458d2b831e0d_buggy.java
+++ b/tmp/665352ed-6b01-41a2-82ff-a3553548b69d_fixed.java
@@ -1,19 +1,85 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
+        // Determine if we're incrementing a month or day-based partial
+        // so we can handle leap years/end-of-month correctly
+        // Construct a base date in a leap year with a safe day (e.g. 2000-02-29)
+        // Use the maximum possible day for given (month + delta) in the leap year
+        // e.g. MonthDay(2,29).plusMonths(1) => MonthDay(3,29) (March 29 exists)
+        // for day overflow, correct day as necessary
+
+        // Set base year as 2000 (leap year)
+        int baseYear = 2000;
+        int[] newValues = values.clone();
+
+        // Recreate date with year
+        int month = 0, day = 0;
+        for (int i = 0; i < partial.size(); i++) {
+            if ("monthOfYear".equals(partial.getFieldType(i).getName())) {
+                month = values[i];
+            }
+            if ("dayOfMonth".equals(partial.getFieldType(i).getName())) {
+                day = values[i];
+            }
+        }
+        org.joda.time.Chronology chrono = iChronology.withUTC();
+
+        // If both month and day exist, use LocalDate for easy manipulation
+        if (month != 0 && day != 0 && partial.size() == 2) {
+            // Create base date
+            org.joda.time.LocalDate base = new org.joda.time.LocalDate(baseYear, month, 1, chrono);
+            int maxDay = base.dayOfMonth().getMaximumValue();
+            int realDay = Math.min(day, maxDay);
+            base = base.withDayOfMonth(realDay);
+
+            // Use the field being added to
+            if ("monthOfYear".equals(partial.getFieldType(fieldIndex).getName())) {
+                base = base.plusMonths(valueToAdd);
+                // Adjust to keep day if possible, or the last day of new month otherwise
+                int newMaxDay = base.dayOfMonth().getMaximumValue();
+                if (day > newMaxDay) {
+                    base = base.withDayOfMonth(newMaxDay);
+                } else {
+                    base = base.withDayOfMonth(day);
+                }
+            } else if ("dayOfMonth".equals(partial.getFieldType(fieldIndex).getName())) {
+                base = base.plusDays(valueToAdd);
+            } else {
+                // fallback to general algorithm
                 long instant = 0L;
                 for (int i = 0, isize = partial.size(); i < isize; i++) {
                     instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
                 }
                 instant = add(instant, valueToAdd);
                 return iChronology.get(partial, instant);
+            }
+
+            // <partial order: [month, day]>
+            for (int i = 0; i < partial.size(); i++) {
+                if ("monthOfYear".equals(partial.getFieldType(i).getName())) {
+                    newValues[i] = base.getMonthOfYear();
+                }
+                if ("dayOfMonth".equals(partial.getFieldType(i).getName())) {
+                    newValues[i] = base.getDayOfMonth();
+                }
+            }
+            return newValues;
+        } else {
+            // fallback to original algorithm for other partials
+            long instant = 0L;
+            for (int i = 0, isize = partial.size(); i < isize; i++) {
+                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            }
+            instant = add(instant, valueToAdd);
+            return iChronology.get(partial, instant);
+        }
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
