diff --git a/tmp/307cf21c-1bf3-4cc5-be02-b949d9187a53_buggy.java b/tmp/548db733-c771-4451-bb22-4b5cb8de0220_fixed.java
index 10616db..90aefc2 100644
--- a/tmp/307cf21c-1bf3-4cc5-be02-b949d9187a53_buggy.java
+++ b/tmp/548db733-c771-4451-bb22-4b5cb8de0220_fixed.java
@@ -1,19 +1,41 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
+        // Determine if the operation is on a MonthDay-like partial (no year)
+        // If so, handle end-of-month adjustment for leap day/month transitions.
+        boolean isMonthDay = (partial.size() == 2
+            && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())
+            && partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth()));
+
+        if (isMonthDay && (fieldIndex == 0 || fieldIndex == 1)) {
+            int month = values[0];
+            int day = values[1];
+            // Use a reference leap year for correct leap-day handling
+            int referenceYear = 2000;
+            // Create a LocalDate in the reference year
+            org.joda.time.LocalDate date = new org.joda.time.LocalDate(referenceYear, month, day, iChronology);
+            if (fieldIndex == 0) {
+                // Adding to monthOfYear
+                date = date.plusMonths(valueToAdd);
+            } else if (fieldIndex == 1) {
+                // Adding to dayOfMonth
+                date = date.plusDays(valueToAdd);
+            }
+            return new int[] {date.getMonthOfYear(), date.getDayOfMonth()};
+        }
+
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
