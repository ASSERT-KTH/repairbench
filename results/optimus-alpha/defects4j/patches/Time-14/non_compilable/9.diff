diff --git a/tmp/e4bf28a1-2bb8-4a71-bd20-0b01f389165f_buggy.java b/tmp/b5bc0401-25c8-49c8-b630-16f786d183a9_fixed.java
index 10616db..6fa00c0 100644
--- a/tmp/e4bf28a1-2bb8-4a71-bd20-0b01f389165f_buggy.java
+++ b/tmp/b5bc0401-25c8-49c8-b630-16f786d183a9_fixed.java
@@ -1,19 +1,78 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+
     if (DateTimeUtils.isContiguous(partial)) {
+        int size = partial.size();
+        // Specifically handle cases like MonthDay (month-day)
+        // Assume the fields are ordered from largest to smallest (month, day)
+        // Only apply special logic if partial has exactly 2 fields and is month and day
+        if (size == 2 &&
+            (partial.getFieldType(0) == DateTimeFieldType.monthOfYear() || partial.getFieldType(0).toString().equals("monthOfYear")) &&
+            (partial.getFieldType(1) == DateTimeFieldType.dayOfMonth() || partial.getFieldType(1).toString().equals("dayOfMonth"))) {
+
+            int origMonth = values[0];
+            int origDay = values[1];
+            // Compute new month and day values as if a variable-length month calendar
+            int newMonth = origMonth;
+            int newDay = origDay;
+
+            if (fieldIndex == 0) { // add to month
+                int months = origMonth + valueToAdd - 1; // 0-based
+                int modMonths = ((months % 12) + 12) % 12;
+                int years = (months / 12);
+                if (months < 0 && modMonths != 0) {
+                    years -= 1;
+                    modMonths = ((modMonths) + 12) % 12;
+                }
+
+                newMonth = modMonths + 1;
+
+                // Determine correct year for leap calculation
+                // Use a leap year if original day is 29 and moving to Feb
+                int leapYear = 2000; // known leap year
+
+                int year = leapYear + years;
+                int maxDay = iChronology.monthOfYear().getMaximumValue(new long[] {
+                        0L, 0L  // Only need month, but API needs an array
+                }, newMonth);
+                // However, we need to query the correct maxDay for (year, newMonth)
+                // Use chronology to get max day for that month in that year
+                // But since we have no year in fields, simulate via LocalDate
+                try {
+                    org.joda.time.LocalDate d = new org.joda.time.LocalDate(year, newMonth, 1, iChronology);
+                    maxDay = d.dayOfMonth().getMaximumValue();
+                } catch (Exception e) {
+                    // Fallback
+                    maxDay = iChronology.dayOfMonth().getMaximumValue();
+                }
+
+                if (origDay > maxDay) {
+                    newDay = maxDay;
+                } else {
+                    newDay = origDay;
+                }
+                return new int[] { newMonth, newDay };
+            } else if (fieldIndex == 1) { // add to day - simple day addition as on a fixed year
+                int leapYear = 2000; // Leap year
+                org.joda.time.LocalDate dt = new org.joda.time.LocalDate(leapYear, origMonth, origDay, iChronology);
+                dt = dt.plusDays(valueToAdd);
+                return new int[] { dt.getMonthOfYear(), dt.getDayOfMonth() };
+            }
+        }
+
+        // fallback to original logic for other partials
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
