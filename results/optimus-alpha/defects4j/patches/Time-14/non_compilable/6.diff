diff --git a/tmp/03622295-edf8-4241-a1f2-c3c0458da10a_buggy.java b/tmp/531ca36e-ab8a-48f8-b864-def3b40cfca2_fixed.java
index 10616db..de8a79b 100644
--- a/tmp/03622295-edf8-4241-a1f2-c3c0458da10a_buggy.java
+++ b/tmp/531ca36e-ab8a-48f8-b864-def3b40cfca2_fixed.java
@@ -1,19 +1,63 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
+        // Special handling for MonthDay and similar fields to preserve the day-of-month validity
+        // even if the source partial/values are invalid in the target month (e.g. 2/29 + 1 month)
+        int size = partial.size();
+        // store a copy to mutate
+        int[] newValues = values.clone();
+
+        // Only handle partials with month and day (MonthDay), not others
+        if (size == 2 &&
+                (partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth()) ||
+                 partial.getFieldType(1).equals(DateTimeFieldType.monthOfYear()) && partial.getFieldType(0).equals(DateTimeFieldType.dayOfMonth()))) {
+
+            // Identify month and day indices
+            int monthIdx = partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) ? 0 : 1;
+            int dayIdx = 1 - monthIdx;
+
+            int origMonth = values[monthIdx];
+            int origDay = values[dayIdx];
+
+            // Compute new month and year (use dummy year: 2000, a leap year)
+            int year = 2000;
+            int monthToAdd = valueToAdd;
+            int newMonth = origMonth + monthToAdd;
+            int newYear = year;
+
+            // adjust for overflow/underflow of months (1..12)
+            while (newMonth > 12) {
+                newMonth -= 12;
+                newYear += 1;
+            }
+            while (newMonth < 1) {
+                newMonth += 12;
+                newYear -= 1;
+            }
+
+            // obtain max days in resulting month/year
+            int maxDay = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);
+
+            int newDay = origDay > maxDay ? maxDay : origDay;
+
+            newValues[monthIdx] = newMonth;
+            newValues[dayIdx] = newDay;
+            return newValues;
+        }
+
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
