diff --git a/tmp/3cb34700-0d1c-4eac-bed8-d03ea985a162_buggy.java b/tmp/13e2e266-6b02-4dc2-88f8-f57001af58af_fixed.java
index 10616db..d901856 100644
--- a/tmp/3cb34700-0d1c-4eac-bed8-d03ea985a162_buggy.java
+++ b/tmp/13e2e266-6b02-4dc2-88f8-f57001af58af_fixed.java
@@ -1,19 +1,72 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
-            for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+        // Rebuild the instant from a "leap-safe" year so that day-of-month like 29 fits any month
+        // Using 2004 as a leap year base
+        long leapYear = 2004L;
+        Chronology chrono = iChronology.withUTC();
+        DateTimeField[] fields = new DateTimeField[partial.size()];
+        for (int i = 0; i < partial.size(); i++) {
+            fields[i] = partial.getFieldType(i).getField(chrono);
         }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        // Set up the array for the leap-safe year
+        int[] newValues = Arrays.copyOf(values, values.length);
+        boolean hasMonth = false, hasDay = false;
+        for (int i = 0; i < partial.size(); i++) {
+            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {
+                newValues[i] = values[i];
+                hasMonth = true;
+            }
+            if (partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {
+                hasDay = true;
+            }
+        }
+        long instant = chrono.getDateTimeMillis(
+            (int) leapYear,
+            hasMonth ? (partial.isSupported(DateTimeFieldType.monthOfYear()) ? partial.get(DateTimeFieldType.monthOfYear()) : 1) : 1,
+            hasDay ? (partial.isSupported(DateTimeFieldType.dayOfMonth()) ? partial.get(DateTimeFieldType.dayOfMonth()) : 1) : 1,
+            0, 0, 0, 0
+        );
+
+        // Set the fields for all others (e.g., month, day)
+        for (int i = 0; i < partial.size(); i++) {
+            if (!(partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear()) ||
+                  partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth()))) {
+                instant = fields[i].set(instant, values[i]);
+            }
+        }
+        // Add to the correct field
+        instant = fields[fieldIndex].add(instant, valueToAdd);
+
+        // Extract results in that leap year (so day-of-month is always possible)
+        int[] result = chrono.get(partial, instant);
+
+        // Now for month-day, update to use the real returned fields but with the actual chronology (not leap year)
+        // Don't "correct" day-of-month except for overly large values
+        for (int i = 0; i < partial.size(); i++) {
+            if (partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {
+                // Clamp the day to the max value for the target month/year if needed
+                int month = 1;
+                int day = result[i];
+                for (int j = 0; j < partial.size(); j++) {
+                    if (partial.getFieldType(j).equals(DateTimeFieldType.monthOfYear())) {
+                        month = result[j];
+                    }
+                }
+                int maxDay = iChronology.dayOfMonth().getMaximumValue(leapYear, month);
+                if (day > maxDay) {
+                    result[i] = maxDay;
+                }
+            }
+        }
+        return result;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
