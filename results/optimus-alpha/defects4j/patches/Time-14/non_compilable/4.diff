diff --git a/tmp/e5c7a6c4-5f86-43d3-9fb3-87c38b75e4eb_buggy.java b/tmp/663febca-e0e3-49b0-829a-af619690a694_fixed.java
index 10616db..ae8ae07 100644
--- a/tmp/e5c7a6c4-5f86-43d3-9fb3-87c38b75e4eb_buggy.java
+++ b/tmp/663febca-e0e3-49b0-829a-af619690a694_fixed.java
@@ -1,19 +1,74 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
+        // -- Special adjust: "MonthDay" (and similar) require day adjustment for month add --
+        // Only applies adding to month or dayOfMonth field
+        // Only run logic if fields are month + day (eg. MonthDay), but compatible for more fields too
+        Chronology chrono = iChronology;
+        int size = partial.size();
+        // Detect if we have month + day (common for MonthDay)
+        boolean hasMonth = false, hasDay = false;
+        int monthFieldIndex = -1;
+        int dayFieldIndex = -1;
+
+        for (int i = 0; i < size; i++) {
+            DateTimeFieldType type = partial.getFieldType(i);
+            if (type == DateTimeFieldType.monthOfYear()) {
+                hasMonth = true;
+                monthFieldIndex = i;
+            }
+            if (type == DateTimeFieldType.dayOfMonth()) {
+                hasDay = true;
+                dayFieldIndex = i;
+            }
+        }
+
+        if (hasMonth && hasDay && (fieldIndex == monthFieldIndex || fieldIndex == dayFieldIndex)) {
+            // assemble reference date, use year = 2000 (leap year) so Feb 29 is possible 
+            int year = 2000;
+            int month = monthFieldIndex >= 0 ? values[monthFieldIndex] : 1;
+            int day = dayFieldIndex >= 0 ? values[dayFieldIndex] : 1;
+
+            // Use chronology to construct the instant
+            long instant = chrono.year().set(0L, year);
+            instant = chrono.monthOfYear().set(instant, month);
+            instant = chrono.dayOfMonth().set(instant, day);
+
+            if (fieldIndex == monthFieldIndex) {
+                // Add valueToAdd to monthOfYear, adjust dayOfMonth as necessary
+                instant = chrono.monthOfYear().add(instant, valueToAdd);
+            } else if (fieldIndex == dayFieldIndex) {
+                instant = chrono.dayOfMonth().add(instant, valueToAdd);
+            }
+            // After adding, get resulting month and day
+            int[] newValues = new int[size];
+            for (int i = 0; i < size; i++) {
+                DateTimeFieldType type = partial.getFieldType(i);
+                if (type == DateTimeFieldType.monthOfYear()) {
+                    newValues[i] = chrono.monthOfYear().get(instant);
+                } else if (type == DateTimeFieldType.dayOfMonth()) {
+                    newValues[i] = chrono.dayOfMonth().get(instant);
+                } else {
+                    newValues[i] = partial.getFieldType(i).getField(chrono).get(instant);
+                }
+            }
+            return newValues;
+        } else {
+            // Fallback to original "contiguous" logic for "plain" cases (e.g. pure days)
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
+        }
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
