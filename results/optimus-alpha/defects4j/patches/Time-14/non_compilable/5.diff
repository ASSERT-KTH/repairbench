diff --git a/tmp/433dff52-116c-42fb-b554-f9c1258c5f75_buggy.java b/tmp/cf330686-14e3-49a2-ad47-a8fd4a3f4921_fixed.java
index 10616db..c7484fa 100644
--- a/tmp/433dff52-116c-42fb-b554-f9c1258c5f75_buggy.java
+++ b/tmp/cf330686-14e3-49a2-ad47-a8fd4a3f4921_fixed.java
@@ -1,19 +1,55 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
+        // Fix for MonthDay-like partials when result day is invalid in resulting month (ex: Feb 29).
+        // Try to adjust day-of-month if needed (end-of-month rule)
+        if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear())) {
+            // Locate dayOfMonth field
+            int dayIndex = -1;
+            for (int i = 0, isize = partial.size(); i < isize; i++) {
+                if (partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {
+                    dayIndex = i;
+                    break;
+                }
+            }
+            if (dayIndex != -1) {
+                int[] result = iChronology.get(partial, instant);
+                int year = 2000; // Use 2000, a leap year, as base for MonthDay/YearlessPartial
+                // Find the month value (1-based)
+                int month = -1;
+                for (int i = 0, isize = partial.size(); i < isize; i++) {
+                    if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {
+                        month = result[i];
+                        break;
+                    }
+                }
+                if (month != -1) {
+                    // Now, try to set the original day-of-month if possible (the 'desired' day)
+                    int desiredDay = values[dayIndex];
+                    int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);
+                    if (desiredDay > maxDay) {
+                        // set to last valid day
+                        result[dayIndex] = maxDay;
+                    } else {
+                        result[dayIndex] = desiredDay;
+                    }
+                }
+                return result;
+            }
+        }
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
