diff --git a/tmp/436dd8f6-2441-4d74-911c-d3c26dce6a8c_buggy.java b/tmp/fa05c15a-a39c-4d58-ae77-e430dea0478b_fixed.java
index 10616db..a74147e 100644
--- a/tmp/436dd8f6-2441-4d74-911c-d3c26dce6a8c_buggy.java
+++ b/tmp/fa05c15a-a39c-4d58-ae77-e430dea0478b_fixed.java
@@ -1,19 +1,50 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
+        // Special handling for MonthDay-like partials
+        boolean isMonthDay = (partial.size() == 2
+            && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())
+            && partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth()));
+        if (isMonthDay) {
+            int origMonth = values[0];
+            int origDay = values[1];
+            Chronology chrono = iChronology.withUTC();
+            int baseYear = 2000; // leap year
+
+            // Avoid setting 2/29 in non-leap years by using leap year as base
+            LocalDate baseDate = new LocalDate(baseYear, origMonth, origDay, chrono);
+
+            LocalDate added = null;
+            if (fieldIndex == 0) { // adding months
+                added = baseDate.plusMonths(valueToAdd);
+            } else if (fieldIndex == 1) { // adding days
+                added = baseDate.plusDays(valueToAdd);
+            } else {
+                // fallback: just set field simply
                 long instant = 0L;
                 for (int i = 0, isize = partial.size(); i < isize; i++) {
                     instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
                 }
                 instant = add(instant, valueToAdd);
                 return iChronology.get(partial, instant);
+            }
+            // Return the [month, day] array for the resulting date
+            return new int[] { added.getMonthOfYear(), added.getDayOfMonth() };
+        } else {
+            long instant = 0L;
+            for (int i = 0, isize = partial.size(); i < isize; i++) {
+                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            }
+            instant = add(instant, valueToAdd);
+            return iChronology.get(partial, instant);
+        }
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
