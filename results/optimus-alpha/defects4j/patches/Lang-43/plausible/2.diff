diff --git a/tmp/6233b4ea-29d4-41c2-bd10-68cc594741d6_buggy.java b/tmp/83e4f846-3206-4b6e-ae49-7b0241a9f47f_fixed.java
index b6b11b6..8de34ff 100644
--- a/tmp/6233b4ea-29d4-41c2-bd10-68cc594741d6_buggy.java
+++ b/tmp/83e4f846-3206-4b6e-ae49-7b0241a9f47f_fixed.java
@@ -1,38 +1,37 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+    int patternLength = pattern.length();
+    if (escapingOn && start < patternLength && c[start] == QUOTE) {
+        // It's an escaped quote ('')
+        pos.setIndex(start + 1);
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
     int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+    boolean found = false;
+    StringBuffer result = appendTo == null ? new StringBuffer() : appendTo;
+    while (pos.getIndex() < patternLength) {
+        char ch = c[pos.getIndex()];
+        if (escapingOn && (pos.getIndex() + 1 < patternLength) && ch == QUOTE && c[pos.getIndex() + 1] == QUOTE) {
+            // Escaped quote ('')
+            result.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);
+            pos.setIndex(pos.getIndex() + 2);
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        if (ch == QUOTE) {
+            // Closing quote
+            pos.setIndex(pos.getIndex() + 1);
+            result.append(c, lastHold, pos.getIndex() - lastHold - 1);
+            found = true;
+            break;
         }
+        pos.setIndex(pos.getIndex() + 1);
     }
+    if (!found) {
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
+    return appendTo == null ? result : appendTo;
+}
\ No newline at end of file
