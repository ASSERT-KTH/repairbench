diff --git a/tmp/0d611b05-1b92-406d-8d31-381ce6397190_buggy.java b/tmp/721b5202-8ea8-419b-9bb0-ebef480d8add_fixed.java
index b6b11b6..d51b291 100644
--- a/tmp/0d611b05-1b92-406d-8d31-381ce6397190_buggy.java
+++ b/tmp/721b5202-8ea8-419b-9bb0-ebef480d8add_fixed.java
@@ -1,38 +1,45 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
+        int patternLength = pattern.length();
+        if (escapingOn && start < patternLength - 1 && c[start] == QUOTE && c[start + 1] == QUOTE) {
+            // Escaped quote: ''
+            if (appendTo != null) {
+                appendTo.append(QUOTE);
+            }
+            pos.setIndex(start + 2);
+            return appendTo;
+        }
         if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+            // A single quote at start: '
+            pos.setIndex(start + 1);
+            return appendTo;
         }
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+        for (int i = pos.getIndex(); i < patternLength; ) {
+            if (escapingOn
+                    && i < patternLength - 1
+                    && c[i] == QUOTE
+                    && c[i + 1] == QUOTE) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
+                }
+                i += 2;
+                pos.setIndex(i);
+                lastHold = i;
                 continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            if (c[i] == QUOTE) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
                 }
+                pos.setIndex(i + 1);
+                return appendTo;
+            }
+            i++;
+            pos.setIndex(i);
         }
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
