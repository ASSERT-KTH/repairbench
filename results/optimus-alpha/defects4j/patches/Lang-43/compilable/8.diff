diff --git a/tmp/efdc5c8f-53cc-4343-98b4-d91eb858942b_buggy.java b/tmp/96f448bc-b6ba-4b0c-b09a-e473de49f809_fixed.java
index b6b11b6..091bb28 100644
--- a/tmp/efdc5c8f-53cc-4343-98b4-d91eb858942b_buggy.java
+++ b/tmp/96f448bc-b6ba-4b0c-b09a-e473de49f809_fixed.java
@@ -1,38 +1,39 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+    int patternLength = pattern.length();
+
+    if (escapingOn && start < patternLength && c[start] == QUOTE) {
+        // Escaped quote: ''
+        pos.setIndex(start + 2); // consume both quotes
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
     int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+    for (int i = pos.getIndex(); i < patternLength; ) {
+        if (escapingOn && i + 1 < patternLength && c[i] == QUOTE && c[i + 1] == QUOTE) {
+            // Append everything up to this point
+            if (appendTo != null && i > lastHold) {
+                appendTo.append(c, lastHold, i - lastHold);
+            }
+            if (appendTo != null) {
+                appendTo.append(QUOTE);
+            }
+            i += 2;
+            pos.setIndex(i);
+            lastHold = i;
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        if (c[i] == QUOTE) {
+            // End of quoted string
+            if (appendTo != null && i > lastHold) {
+                appendTo.append(c, lastHold, i - lastHold);
             }
+            pos.setIndex(i + 1);
+            return appendTo;
+        }
+        i++;
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
