diff --git a/tmp/404b5419-7c1d-47c1-b8a7-80ad8d2bc017_buggy.java b/tmp/426e6729-fe97-40c0-bd37-46273a27d54a_fixed.java
index 875b31b..aac6680 100644
--- a/tmp/404b5419-7c1d-47c1-b8a7-80ad8d2bc017_buggy.java
+++ b/tmp/426e6729-fe97-40c0-bd37-46273a27d54a_fixed.java
@@ -1,54 +1,41 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
+        // workaround for CLI-162, never increase the indentation if first line wrapped
+        // Only pad if nextLineTabStop is less than width
+        boolean pad = nextLineTabStop < width;
 
         // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        // characters if allowed
+        final String padding = pad ? createPadding(nextLineTabStop) : "";
 
         while (true)
         {
             text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
             
             if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
             {
                 pos = width;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
