diff --git a/tmp/73b446b6-1303-46e5-ba6d-95d128c444c4_buggy.java b/tmp/864ebcea-156e-46a4-b70a-6023d6bc489d_fixed.java
index 875b31b..1671f3f 100644
--- a/tmp/73b446b6-1303-46e5-ba6d-95d128c444c4_buggy.java
+++ b/tmp/864ebcea-156e-46a4-b70a-6023d6bc489d_fixed.java
@@ -1,54 +1,55 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
-
     // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // characters, but only if wrapping at a space; if the break was in the middle of a long word,
+    // don't indent further
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        // Only pad if the break was at a space (not a force break inside a long word)
+        boolean doPad = true;
+        // check if the previous break was at a whitespace (i.e, not in the middle of a word)
+        if (pos >= 1 && !Character.isWhitespace(text.charAt(pos - 1))) {
+            doPad = false;
+        }
+        text = (doPad ? padding : "") + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
         
+        // Do not force break indentation if word-chunked:
         if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
