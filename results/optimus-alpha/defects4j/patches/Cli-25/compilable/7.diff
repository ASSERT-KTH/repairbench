diff --git a/tmp/0b90eb37-efcc-4755-99e2-75eca0542618_buggy.java b/tmp/83ce5886-c04c-42ae-a2b6-be805a60b9ba_fixed.java
index 875b31b..a4b24da 100644
--- a/tmp/0b90eb37-efcc-4755-99e2-75eca0542618_buggy.java
+++ b/tmp/83ce5886-c04c-42ae-a2b6-be805a60b9ba_fixed.java
@@ -1,54 +1,40 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
+            // Do not reduce nextLineTabStop to (width-1) if it's not the first line
+            // Let it be - this way, indentation will appear as requested on every new line,
+            // but the wrap width will remain 'width', i.e., the effective text per line
+            // will be width minus indentation visible size.
         }
-
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
+            // Remove the indent awareness: always split at wrap width
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
