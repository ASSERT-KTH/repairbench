diff --git a/tmp/20bee172-48c9-4205-b88f-c5b6978531db_buggy.java b/tmp/58b28799-e5f1-42af-a8c5-000c8a578118_fixed.java
index 875b31b..768c5bc 100644
--- a/tmp/20bee172-48c9-4205-b88f-c5b6978531db_buggy.java
+++ b/tmp/58b28799-e5f1-42af-a8c5-000c8a578118_fixed.java
@@ -1,54 +1,67 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
     // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // characters, BUT if starting the next line with a long word
+    // (like a long class name or long option), *do not* pad.
     final String padding = createPadding(nextLineTabStop);
 
+    boolean firstLine = true;
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        // If text after the previous break has no spaces at start OR
+        // it is a long unbroken word (i.e. length > width), do not pad.
+        String remainder = text.substring(pos).trim();
+        boolean needsPadding = !firstLine && remainder.length() > 0 && !(remainder.length() > width && !remainder.contains(" "));
+
+        if (needsPadding) {
+            text = padding + remainder;
+        } else {
+            text = remainder;
+        }
+
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // Fix for long lines without spaces: always use width as chunk size
+        if (text.length() > width && pos == -1) {
+            pos = width;
+        } else if ( (text.length() > width) && (pos == nextLineTabStop - 1) )  {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        firstLine = false;
     }
 }
\ No newline at end of file
