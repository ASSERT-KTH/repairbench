diff --git a/tmp/a217af31-a1c6-43d8-b094-b9125f308354_buggy.java b/tmp/50e3ed67-00ff-4efe-b603-010a4c08767d_fixed.java
index 08093b4..65859df 100644
--- a/tmp/a217af31-a1c6-43d8-b094-b9125f308354_buggy.java
+++ b/tmp/50e3ed67-00ff-4efe-b603-010a4c08767d_fixed.java
@@ -1,42 +1,53 @@
 /**
  * Writes a PAX extended header with the given map as contents.
  * @since 1.4
  */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
     String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
     // TarEntry's constructor would think this is a directory
     // and not allow any data to be written
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
+    // Ensure the entry is *not* marked as a directory.
+    // This prevents restriction in putArchiveEntry that forbids writing data.
+    pex.setMode(pex.getMode() | 0100000); // Set regular file bit
+    // Remove trailing slash if exists to ensure it's not taken as directory
+    if (pex.isDirectory()) {
+        String newName = pex.getName();
+        while (newName.endsWith("/")) {
+            newName = newName.substring(0, newName.length() - 1);
+        }
+        pex.setName(newName);
+    }
 
     StringWriter w = new StringWriter();
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
         int len = key.length() + value.length()
             + 3 /* blank, equals and newline */
             + 2 /* guess 9 < actual length < 100 */;
         String line = len + " " + key + "=" + value + "\n";
         int actualLength = line.getBytes(CharsetNames.UTF_8).length;
         while (len != actualLength) {
             // Adjust for cases where length < 10 or > 100
             // or where UTF-8 encoding isn't a single octet
             // per character.
             // Must be in loop as size may go from 99 to 100 in
             // first pass so we'd need a second.
             len = actualLength;
             line = len + " " + key + "=" + value + "\n";
             actualLength = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
     }
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
     pex.setSize(data.length);
     putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
