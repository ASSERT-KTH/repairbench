diff --git a/tmp/ff0651e1-f2e4-4168-b243-7ec2c3c29d8d_buggy.java b/tmp/fa5b31c1-7a9a-4ffa-87ba-6bb2a00d64a4_fixed.java
index 61ffdbf..34e2326 100644
--- a/tmp/ff0651e1-f2e4-4168-b243-7ec2c3c29d8d_buggy.java
+++ b/tmp/fa5b31c1-7a9a-4ffa-87ba-6bb2a00d64a4_fixed.java
@@ -1,44 +1,53 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
   // Notice that removing unreferenced function args breaks
   // Function.prototype.length. In advanced mode, we don't really care
   // about this: we consider "length" the equivalent of reflecting on
   // the function's lexical source.
   //
   // Rather than create a new option for this, we assume that if the user
   // is removing globals, then it's OK to remove unused function args.
   //
   // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
   Node function = fnScope.getRootNode();
 
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
     // The parameters object literal setters can not be removed.
     return;
   }
 
   Node argList = getFunctionArgList(function);
   boolean modifyCallers = modifyCallSites
       && callSiteOptimizer.canModifyCallers(function);
+
+  // Only remove unreferenced function arguments for non-global (i.e. local) functions.
+  // Global functions should keep all their arguments unless removeGlobal is true.
+  boolean isFunctionAtGlobalScope =
+      fnScope.getParent() != null && fnScope.getParent().isGlobal();
+
   if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
+    // Only strip unreferenced args off the end of the function declaration if
+    // we're not in global scope or if removeGlobal is true.
+    if (!isFunctionAtGlobalScope || removeGlobal) {
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
+    }
   } else {
     callSiteOptimizer.optimize(fnScope, referenced);
   }
 }
\ No newline at end of file
