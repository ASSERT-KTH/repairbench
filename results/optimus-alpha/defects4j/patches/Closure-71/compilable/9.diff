diff --git a/tmp/06d66201-8f1c-4a7e-8e47-08bac40bfaf3_buggy.java b/tmp/dcc79625-3170-4e9e-adc5-b2e84fc5b731_fixed.java
index 6f24eb6..a5b93c7 100644
--- a/tmp/06d66201-8f1c-4a7e-8e47-08bac40bfaf3_buggy.java
+++ b/tmp/dcc79625-3170-4e9e-adc5-b2e84fc5b731_fixed.java
@@ -1,99 +1,112 @@
 /**
  * Determines whether the given property is visible in the current context.
  * @param t The current traversal.
  * @param getprop The getprop node.
  */
 private void checkPropertyVisibility(NodeTraversal t,
     Node getprop, Node parent) {
   ObjectType objectType =
       ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
   String propertyName = getprop.getLastChild().getString();
 
   if (objectType != null) {
     // Is this a normal property access, or are we trying to override
     // an existing property?
     boolean isOverride = t.inGlobalScope() &&
         parent.getType() == Token.ASSIGN &&
         parent.getFirstChild() == getprop;
 
     // Find the lowest property defined on a class with visibility
     // information.
+    ObjectType foundObjectType = objectType;
     if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
+      foundObjectType = foundObjectType.getImplicitPrototype();
     }
     JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
+    ObjectType cur = foundObjectType;
+    for (; cur != null;
+         cur = cur.getImplicitPrototype()) {
+      docInfo = cur.getOwnPropertyJSDocInfo(propertyName);
       if (docInfo != null &&
           docInfo.getVisibility() != Visibility.INHERITED) {
         break;
       }
     }
 
-      if (objectType == null) {
+    if (cur == null) {
       // We couldn't find a visibility modifier; assume it's public.
       return;
     }
 
+    foundObjectType = cur;
     boolean sameInput =
         t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
+    JSType ownerType = normalizeClassType(foundObjectType);
+
     if (isOverride) {
       // Check an ASSIGN statement that's trying to override a property
       // on a superclass.
       JSDocInfo overridingInfo = parent.getJSDocInfo();
       Visibility overridingVisibility = overridingInfo == null ?
           Visibility.INHERITED : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+      // 1. PRIVATE properties should not be overridden except possibly in the same file.
       if (visibility == Visibility.PRIVATE && !sameInput) {
         compiler.report(
             t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
+                foundObjectType.toString()));
+      }
+
+      // 2. Visibility of override must match (if explicitly declared)
+      if (overridingVisibility != Visibility.INHERITED &&
           overridingVisibility != visibility) {
         compiler.report(
             t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
+                visibility.name(), foundObjectType.toString(),
                 overridingVisibility.name()));
       }
+
+      // 3. If super property is PRIVATE, we do not allow an override in another file
+      if (visibility == Visibility.PRIVATE && !sameInput) {
+        // This check already reports the error and returns,
+        // but old code falls through, so let's keep for clarity.
+        return;
+      }
+
     } else {
       if (sameInput) {
         // private access is always allowed in the same file.
         return;
       } else if (visibility == Visibility.PRIVATE &&
           (currentClass == null || ownerType.differsFrom(currentClass))) {
         if (docInfo.isConstructor() &&
             isValidPrivateConstructorAccess(parent)) {
           return;
         }
 
         // private access is not allowed outside the file from a different
         // enclosing class.
         compiler.report(
             t.makeError(getprop,
                 BAD_PRIVATE_PROPERTY_ACCESS,
                 propertyName,
                 validator.getReadableJSTypeName(
                     getprop.getFirstChild(), true)));
       } else if (visibility == Visibility.PROTECTED) {
         // There are 3 types of legal accesses of a protected property:
         // 1) Accesses in the same file
         // 2) Overriding the property in a subclass
         // 3) Accessing the property from inside a subclass
         // The first two have already been checked for.
         if (currentClass == null || !currentClass.isSubtype(ownerType)) {
           compiler.report(
               t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         }
       }
     }
   }
 }
\ No newline at end of file
