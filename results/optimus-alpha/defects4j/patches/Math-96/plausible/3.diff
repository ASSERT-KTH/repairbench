diff --git a/tmp/63fad7d6-e600-49d9-a344-daf1fa6f40d8_buggy.java b/tmp/90400a16-cbab-4bbe-b3f4-76b22646fde0_fixed.java
index f674e52..afeace2 100644
--- a/tmp/63fad7d6-e600-49d9-a344-daf1fa6f40d8_buggy.java
+++ b/tmp/90400a16-cbab-4bbe-b3f4-76b22646fde0_fixed.java
@@ -1,41 +1,17 @@
-    /**
-     * Test for the equality of two Complex objects.
-     * <p>
-     * If both the real and imaginary parts of two Complex numbers
-     * are exactly the same, and neither is <code>Double.NaN</code>, the two
-     * Complex objects are considered to be equal.</p>
-     * <p>
-     * All <code>NaN</code> values are considered to be equal - i.e, if either
-     * (or both) real and imaginary parts of the complex number are equal
-     * to <code>Double.NaN</code>, the complex number is equal to 
-     * <code>Complex.NaN</code>.</p>
-     *
-     * @param other Object to test for equality to this
-     * @return true if two Complex objects are equal, false if
-     *         object is null, not an instance of Complex, or
-     *         not equal to this Complex instance
-     * 
-     */
 public boolean equals(Object other) {
-        boolean ret;
-        
     if (this == other) {
-            ret = true;
-        } else if (other == null) {
-            ret = false;
-        } else  {
-            try {
+        return true;
+    }
+    if (!(other instanceof Complex)) {
+        return false;
+    }
     Complex rhs = (Complex) other;
-                if (rhs.isNaN()) {
-                    ret = this.isNaN();
-                } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
-                }
-            } catch (ClassCastException ex) {
-                // ignore exception
-                ret = false;
-            }
-        }
-      
-        return ret;
+    // Handle NaN
+    if (this.isNaN() && rhs.isNaN()) {
+        return true;
+    }
+    // Handle +0.0 and -0.0 equality properly using ==, NOT doubleToRawLongBits
+    // This matches Double.equals: +0.0 != -0.0, but Complex(0, -0) and Complex(0, 0) are not equal.
+    // Test expects Complex(0, -1) equals Complex(-0.0, -1.0), so we need ==, not bits.
+    return (this.real == rhs.real) && (this.imaginary == rhs.imaginary);
 }
\ No newline at end of file
