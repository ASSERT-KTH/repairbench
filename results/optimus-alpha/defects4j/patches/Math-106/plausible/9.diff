diff --git a/tmp/27b9f1dd-71d6-4039-9705-f36fc3259e6c_buggy.java b/tmp/4653dd1b-132e-4d6a-87fd-1a326ea0885b_fixed.java
index 42c5923..d619bc9 100644
--- a/tmp/27b9f1dd-71d6-4039-9705-f36fc3259e6c_buggy.java
+++ b/tmp/4653dd1b-132e-4d6a-87fd-1a326ea0885b_fixed.java
@@ -1,89 +1,93 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
 public Fraction parse(String source, ParsePosition pos) {
     // try to parse improper fraction
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
         return ret;
     }
     
     int initialIndex = pos.getIndex();
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse whole
+    int wholeStart = pos.getIndex();
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
+    int w = whole.intValue();
+    // only allow minus sign in the whole part
+    // To check for a minus in the whole, scan the string in [wholeStart, pos.getIndex())
+    String wholePart = source.substring(wholeStart, pos.getIndex());
+    boolean wholeNegative = wholePart.trim().startsWith("-");
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse numerator
+    int numStart = pos.getIndex();
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
         // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
+    int n = num.intValue();
 
     // minus signs should be leading, invalid expression
+    String numPart = source.substring(numStart, pos.getIndex()).trim();
+    if (numPart.startsWith("-") || numPart.startsWith("+")) {
+        // Only allow minus in whole part
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(numStart);
+        return null;
+    }
 
     // parse '/'
     int startIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
     switch (c) {
     case 0 :
         // no '/'
         // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+        return new Fraction(n, 1);
     case '/' :
         // found '/', continue parsing denominator
         break;
     default :
         // invalid '/'
         // set index back to initial, error index should be the last
         // character examined.
         pos.setIndex(initialIndex);
         pos.setErrorIndex(startIndex);
         return null;
     }
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse denominator
+    int denStart = pos.getIndex();
     Number den = getDenominatorFormat().parse(source, pos);
     if (den == null) {
         // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
-        
-            // minus signs must be leading, invalid
-
-        int w = whole.intValue();
-        int n = num.intValue();
     int d = den.intValue();
+
+    // minus signs must be leading, invalid
+    String denPart = source.substring(denStart, pos.getIndex()).trim();
+    if (denPart.startsWith("-") || denPart.startsWith("+")) {
+        // Only allow minus in whole part
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(denStart);
+        return null;
+    }
+
     return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
 }
\ No newline at end of file
