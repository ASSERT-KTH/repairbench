diff --git a/tmp/c30478aa-3ca0-46a0-a5c1-a722d0065a6e_buggy.java b/tmp/757c658c-da4d-4cce-b12b-1695631bd7a8_fixed.java
index 544303b..9ecee2b 100644
--- a/tmp/c30478aa-3ca0-46a0-a5c1-a722d0065a6e_buggy.java
+++ b/tmp/757c658c-da4d-4cce-b12b-1695631bd7a8_fixed.java
@@ -1,29 +1,39 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
             // if multiple variables can take a given value 
             // then we choose the first and set the rest equal to 0
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            boolean isBasic = false;
+            // bugfix: check *only* for j == getNumObjectiveFunctions() + i, not all previous j
+            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); j++) {
+                if (tableau.getEntry(basicRow, j) == 1 &&
+                        // Only the current variable should be basic for this row
+                        j == getNumObjectiveFunctions() + i) {
+                    isBasic = true;
+                } else if (tableau.getEntry(basicRow, j) != 0) {
+                    isBasic = false;
+                    break;
+                }
+            }
+            if (!isBasic) {
                 coefficients[i] = 0;
             }
         }
     }
-        }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
