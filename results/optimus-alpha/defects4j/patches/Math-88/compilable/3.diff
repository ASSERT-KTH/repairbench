diff --git a/tmp/f94aac01-3726-493d-9fbe-0b749d5c33b4_buggy.java b/tmp/722abc2a-9b3f-43fd-81f3-f2698e845876_fixed.java
index 544303b..7188761 100644
--- a/tmp/f94aac01-3726-493d-9fbe-0b749d5c33b4_buggy.java
+++ b/tmp/722abc2a-9b3f-43fd-81f3-f2698e845876_fixed.java
@@ -1,29 +1,28 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+        double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+            // Only assign if this variable is basic and column is unit for the current variable (corresponds to variable assignment)
+            boolean isBasicForCurrent = true;
+            for (int j = 0; j < getHeight(); j++) {
+                if (j != basicRow && Math.abs(tableau.getEntry(j, getNumObjectiveFunctions() + i)) > 1.0e-8) {
+                    isBasicForCurrent = false;
+                    break;
                 }
             }
+            if (Math.abs(tableau.getEntry(basicRow, getNumObjectiveFunctions() + i) - 1.0) > 1.0e-8) {
+                isBasicForCurrent = false;
+            }
+            coefficients[i] = isBasicForCurrent ? value : 0.0;
+        } else {
+            coefficients[i] = 0.0;
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
