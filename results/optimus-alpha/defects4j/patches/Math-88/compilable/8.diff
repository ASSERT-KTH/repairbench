diff --git a/tmp/265044cb-56a2-48be-b580-60c851066fc2_buggy.java b/tmp/c0d93574-2a9e-4239-b882-8e6c59c4bb4d_fixed.java
index 544303b..4b53966 100644
--- a/tmp/265044cb-56a2-48be-b580-60c851066fc2_buggy.java
+++ b/tmp/c0d93574-2a9e-4239-b882-8e6c59c4bb4d_fixed.java
@@ -1,29 +1,32 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    // For each original variable
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
+        // set the variable value if it's basic
+        if (basicRow != null && basicRow < getHeight()) {
+            coefficients[i] = getEntry(basicRow, getRhsOffset())
+                - (restrictToNonNegative ? 0 : mostNegative);
+            // if multiple variables can take a given value then we choose the first and set the rest equal to 0
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                 if (tableau.getEntry(basicRow, j) == 1) {
                     coefficients[i] = 0;
+                    break; // once you zero it, break the loop
                 }
             }
+        } else {
+            coefficients[i] = 0;
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
