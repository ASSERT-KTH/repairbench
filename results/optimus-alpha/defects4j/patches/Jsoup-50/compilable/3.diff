diff --git a/tmp/1930b36b-3cd3-46db-8062-fad593b0af93_buggy.java b/tmp/153f6b37-bea8-4b2a-8950-63b223bfd8cc_fixed.java
index 25ca093..fcc852b 100644
--- a/tmp/1930b36b-3cd3-46db-8062-fad593b0af93_buggy.java
+++ b/tmp/153f6b37-bea8-4b2a-8950-63b223bfd8cc_fixed.java
@@ -1,52 +1,98 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM - overrides any other header or input
+    // We'll check if the first bytes match a BOM signature, and set the charset accordingly.
+    ByteBuffer bomData = byteData.asReadOnlyBuffer();
+    bomData.rewind();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    if (bomData.remaining() >= 4) {
+        byte b1 = bomData.get(), b2 = bomData.get(), b3 = bomData.get(), b4 = bomData.get();
+        if (b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF) {
+            detectedCharset = "UTF-32BE";
+            bomData.position(4);
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00) {
+            detectedCharset = "UTF-32LE";
+            bomData.position(4);
+        } else if (b1 == (byte)0xFE && b2 == (byte)0xFF) {
+            detectedCharset = "UTF-16BE";
+            bomData.position(2);
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {
+            detectedCharset = "UTF-16LE";
+            bomData.position(2);
+        } else if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) {
+            detectedCharset = "UTF-8";
+            bomData.position(3);
+        } else {
+            bomData.position(0); // no BOM detected
+        }
+    } else if (bomData.remaining() >= 3) {
+        byte b1 = bomData.get(), b2 = bomData.get(), b3 = bomData.get();
+        if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) {
+            detectedCharset = "UTF-8";
+            bomData.position(3);
+        } else {
+            bomData.position(0); // no BOM detected
+        }
+    } else if (bomData.remaining() >= 2) {
+        byte b1 = bomData.get(), b2 = bomData.get();
+        if (b1 == (byte)0xFE && b2 == (byte)0xFF) {
+            detectedCharset = "UTF-16BE";
+            bomData.position(2);
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {
+            detectedCharset = "UTF-16LE";
+            bomData.position(2);
+        } else {
+            bomData.position(0); // no BOM detected
+        }
+    } else {
+        bomData.position(0);
+    }
+
+    if (detectedCharset != null) {
+        charsetName = detectedCharset;
+        // slice bomData to start after the BOM for decoding
+        ByteBuffer dataNoBom = bomData.slice();
+        docData = Charset.forName(charsetName).decode(dataNoBom).toString();
+    } else if (charsetName == null) {
+        docData = Charset.forName(defaultCharset).decode(byteData.duplicate()).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+        docData = Charset.forName(charsetName).decode(byteData.duplicate()).toString();
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+        if (charsetName != null)
             doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
