diff --git a/tmp/f7a351f5-e72f-4d96-845b-3f46d0e5243f_buggy.java b/tmp/c9567d66-cc70-4ce1-a380-6bf5cc790570_fixed.java
index 25ca093..0ed630f 100644
--- a/tmp/f7a351f5-e72f-4d96-845b-3f46d0e5243f_buggy.java
+++ b/tmp/c9567d66-cc70-4ce1-a380-6bf5cc790570_fixed.java
@@ -1,52 +1,127 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // -- BOM detection and handling --
+    String bomCharset = null;
+    int bomMark = -1;
+
+    if (byteData.remaining() >= 4) {
+        byte b1 = byteData.get(byteData.position());
+        byte b2 = byteData.get(byteData.position() + 1);
+        byte b3 = byteData.get(byteData.position() + 2);
+        byte b4 = byteData.get(byteData.position() + 3);
+
+        // UTF-8 BOM: EF BB BF
+        if ((b1 & 0xFF) == 0xEF && (b2 & 0xFF) == 0xBB && (b3 & 0xFF) == 0xBF) {
+            bomCharset = "UTF-8";
+            bomMark = 3;
+        }
+        // UTF-32, big-endian BOM: 00 00 FE FF
+        else if ((b1 & 0xFF) == 0x00 && (b2 & 0xFF) == 0x00 && (b3 & 0xFF) == 0xFE && (b4 & 0xFF) == 0xFF) {
+            bomCharset = "UTF-32BE";
+            bomMark = 4;
+        }
+        // UTF-32, little-endian BOM: FF FE 00 00
+        else if ((b1 & 0xFF) == 0xFF && (b2 & 0xFF) == 0xFE && (b3 & 0xFF) == 0x00 && (b4 & 0xFF) == 0x00) {
+            bomCharset = "UTF-32LE";
+            bomMark = 4;
+        }
+        // UTF-16, big-endian BOM: FE FF
+        else if ((b1 & 0xFF) == 0xFE && (b2 & 0xFF) == 0xFF) {
+            bomCharset = "UTF-16BE";
+            bomMark = 2;
+        }
+        // UTF-16, little-endian BOM: FF FE
+        else if ((b1 & 0xFF) == 0xFF && (b2 & 0xFF) == 0xFE) {
+            bomCharset = "UTF-16LE";
+            bomMark = 2;
+        }
+    } else if (byteData.remaining() >= 3) {
+        byte b1 = byteData.get(byteData.position());
+        byte b2 = byteData.get(byteData.position() + 1);
+        byte b3 = byteData.get(byteData.position() + 2);
+        // UTF-8 BOM
+        if ((b1 & 0xFF) == 0xEF && (b2 & 0xFF) == 0xBB && (b3 & 0xFF) == 0xBF) {
+            bomCharset = "UTF-8";
+            bomMark = 3;
+        }
+        // UTF-16, big-endian BOM: FE FF
+        else if ((b1 & 0xFF) == 0xFE && (b2 & 0xFF) == 0xFF) {
+            bomCharset = "UTF-16BE";
+            bomMark = 2;
+        }
+        // UTF-16, little-endian BOM: FF FE
+        else if ((b1 & 0xFF) == 0xFF && (b2 & 0xFF) == 0xFE) {
+            bomCharset = "UTF-16LE";
+            bomMark = 2;
+        }
+    } else if (byteData.remaining() >= 2) {
+        byte b1 = byteData.get(byteData.position());
+        byte b2 = byteData.get(byteData.position() + 1);
+        // UTF-16, big-endian BOM: FE FF
+        if ((b1 & 0xFF) == 0xFE && (b2 & 0xFF) == 0xFF) {
+            bomCharset = "UTF-16BE";
+            bomMark = 2;
+        }
+        // UTF-16, little-endian BOM: FF FE
+        else if ((b1 & 0xFF) == 0xFF && (b2 & 0xFF) == 0xFE) {
+            bomCharset = "UTF-16LE";
+            bomMark = 2;
+        }
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+        // strip BOM mark
+        byteData.position(byteData.position() + bomMark);
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                // re-check and strip BOM for the new charset
+                if (bomCharset != null) {
+                    // Remove BOM again if still present
+                    byteData.position(byteData.position() + bomMark);
+                }
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
+    // If not UTF-8, UTF-16, UTF-32 BOMs, but has Unicode BOM U+FEFF as char, remove it
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
