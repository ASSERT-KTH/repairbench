diff --git a/tmp/5d50631b-8e82-4bfc-a08d-cb9cd13850a9_buggy.java b/tmp/2708677b-9a4e-4f6b-9722-f3141a4fac77_fixed.java
index 25ca093..b21dd40 100644
--- a/tmp/5d50631b-8e82-4bfc-a08d-cb9cd13850a9_buggy.java
+++ b/tmp/2708677b-9a4e-4f6b-9722-f3141a4fac77_fixed.java
@@ -1,52 +1,96 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM to auto-detect charset
+    String bomCharset = null;
+    int bomOffset = 0;
+    // The normalized BOM bytes for detection
+    if (byteData.remaining() >= 4) {
+        int pos = byteData.position();
+        byte b0 = byteData.get(pos);
+        byte b1 = byteData.get(pos + 1);
+        byte b2 = byteData.get(pos + 2);
+        byte b3 = byteData.get(pos + 3);
+        if ((b0 == (byte) 0x00 && b1 == (byte) 0x00 && b2 == (byte) 0xFE && b3 == (byte) 0xFF)) {
+            bomCharset = "UTF-32BE";
+            bomOffset = 4;
+        } else if ((b0 == (byte) 0xFF && b1 == (byte) 0xFE && b2 == (byte) 0x00 && b3 == (byte) 0x00)) {
+            bomCharset = "UTF-32LE";
+            bomOffset = 4;
+        }
+    }
+    if (bomCharset == null && byteData.remaining() >= 3) {
+        int pos = byteData.position();
+        byte b0 = byteData.get(pos);
+        byte b1 = byteData.get(pos + 1);
+        byte b2 = byteData.get(pos + 2);
+        if ((b0 == (byte) 0xEF && b1 == (byte) 0xBB && b2 == (byte) 0xBF)) {
+            bomCharset = "UTF-8";
+            bomOffset = 3;
+        }
+    }
+    if (bomCharset == null && byteData.remaining() >= 2) {
+        int pos = byteData.position();
+        byte b0 = byteData.get(pos);
+        byte b1 = byteData.get(pos + 1);
+        if ((b0 == (byte) 0xFE && b1 == (byte) 0xFF)) {
+            bomCharset = "UTF-16BE";
+            bomOffset = 2;
+        } else if ((b0 == (byte) 0xFF && b1 == (byte) 0xFE)) {
+            bomCharset = "UTF-16LE";
+            bomOffset = 2;
+        }
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+        int oldLimit = byteData.limit();
+        // position the buffer after the BOM for decoding
+        byteData.position(byteData.position() + bomOffset);
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+        byteData.position(byteData.position() - (byteData.limit() - oldLimit)); // restore limit if modified
+    } else if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+    // BOMs can be preserved in toString, so do explicit check here for U+FEFF
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
         doc = null;
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
