diff --git a/tmp/efe7f9aa-c052-45c1-b1c4-576da34f3a80_buggy.java b/tmp/25cbe7e6-ea80-414b-a79d-065718207b43_fixed.java
index 25ca093..374194e 100644
--- a/tmp/efe7f9aa-c052-45c1-b1c4-576da34f3a80_buggy.java
+++ b/tmp/25cbe7e6-ea80-414b-a79d-065718207b43_fixed.java
@@ -1,52 +1,102 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
+    String docData = null;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check and handle BOM
+    String bomCharset = null;
+    int bomSize = 0;
+
+    if (byteData.remaining() >= 3) {
+        byte b0 = byteData.get(byteData.position());
+        byte b1 = byteData.get(byteData.position() + 1);
+        byte b2 = byteData.get(byteData.position() + 2);
+        if (b0 == (byte) 0xEF && b1 == (byte) 0xBB && b2 == (byte) 0xBF) {
+            bomCharset = "UTF-8";
+            bomSize = 3;
+        }
+    }
+    if (byteData.remaining() >= 2 && bomCharset == null) {
+        byte b0 = byteData.get(byteData.position());
+        byte b1 = byteData.get(byteData.position() + 1);
+        if (b0 == (byte) 0xFE && b1 == (byte) 0xFF) {
+            bomCharset = "UTF-16BE";
+            bomSize = 2;
+        } else if (b0 == (byte) 0xFF && b1 == (byte) 0xFE) {
+            bomCharset = "UTF-16LE";
+            bomSize = 2;
+            // Could also be UTF-32LE (need to check 4-byte BOM)
+            if (byteData.remaining() >= 4 &&
+                byteData.get(byteData.position() + 2) == (byte) 0x00 &&
+                byteData.get(byteData.position() + 3) == (byte) 0x00) {
+                bomCharset = "UTF-32LE";
+                bomSize = 4;
+            }
+        }
+    }
+    if (byteData.remaining() >= 4 && bomCharset == null) {
+        byte b0 = byteData.get(byteData.position());
+        byte b1 = byteData.get(byteData.position() + 1);
+        byte b2 = byteData.get(byteData.position() + 2);
+        byte b3 = byteData.get(byteData.position() + 3);
+        if (b0 == (byte) 0x00 && b1 == (byte) 0x00 && b2 == (byte) 0xFE && b3 == (byte) 0xFF) {
+            bomCharset = "UTF-32BE";
+            bomSize = 4;
+        } else if (b0 == (byte) 0xFF && b1 == (byte) 0xFE && b2 == (byte) 0x00 && b3 == (byte) 0x00) {
+            bomCharset = "UTF-32LE";
+            bomSize = 4;
+        }
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+        // skip BOM bytes
+        byteData.position(byteData.position() + bomSize);
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName(defaultCharset).decode(byteData.asReadOnlyBuffer()).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                // skip BOM bytes again if present
+                if (bomCharset != null)
+                    byteData.position(byteData.position() + bomSize);
+                docData = Charset.forName(foundCharset).decode(byteData.asReadOnlyBuffer()).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+        docData = Charset.forName(charsetName).decode(byteData.asReadOnlyBuffer()).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+    if (docData != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+        // Remove BOM character if present
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
