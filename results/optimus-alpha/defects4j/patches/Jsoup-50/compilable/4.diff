diff --git a/tmp/4db4f876-e54b-491a-9b44-e7da0b62eb58_buggy.java b/tmp/cb90cd41-941b-43de-9ffd-52183e8cb965_fixed.java
index 25ca093..e4f9d8d 100644
--- a/tmp/4db4f876-e54b-491a-9b44-e7da0b62eb58_buggy.java
+++ b/tmp/cb90cd41-941b-43de-9ffd-52183e8cb965_fixed.java
@@ -1,52 +1,117 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // Check and handle BOM (Byte Order Mark)
+        String bomCharset = null;
+        int bomLength = 0;
+        byteData.mark();
+        if (byteData.remaining() >= 4) {
+            byte b0 = byteData.get(0);
+            byte b1 = byteData.get(1);
+            byte b2 = byteData.get(2);
+            byte b3 = byteData.get(3);
+            // UTF-8 BOM: 0xEF 0xBB 0xBF
+            if ((b0 == (byte)0xEF) && (b1 == (byte)0xBB) && (b2 == (byte)0xBF)) {
+                bomCharset = "UTF-8";
+                bomLength = 3;
+            }
+            // UTF-32, BE BOM: 0x00 0x00 0xFE 0xFF
+            else if ((b0 == (byte)0x00) && (b1 == (byte)0x00) && (b2 == (byte)0xFE) && (b3 == (byte)0xFF)) {
+                bomCharset = "UTF-32BE";
+                bomLength = 4;
+            }
+            // UTF-32, LE BOM: 0xFF 0xFE 0x00 0x00
+            else if ((b0 == (byte)0xFF) && (b1 == (byte)0xFE) && (b2 == (byte)0x00) && (b3 == (byte)0x00)) {
+                bomCharset = "UTF-32LE";
+                bomLength = 4;
+            }
+            // UTF-16, BE BOM: 0xFE 0xFF
+            else if ((b0 == (byte)0xFE) && (b1 == (byte)0xFF)) {
+                bomCharset = "UTF-16BE";
+                bomLength = 2;
+            }
+            // UTF-16, LE BOM: 0xFF 0xFE
+            else if ((b0 == (byte)0xFF) && (b1 == (byte)0xFE)) {
+                bomCharset = "UTF-16LE";
+                bomLength = 2;
+            }
+        } else if (byteData.remaining() >= 3) {
+            byte b0 = byteData.get(0);
+            byte b1 = byteData.get(1);
+            byte b2 = byteData.get(2);
+            if ((b0 == (byte)0xEF) && (b1 == (byte)0xBB) && (b2 == (byte)0xBF)) {
+                bomCharset = "UTF-8";
+                bomLength = 3;
+            }
+            else if ((b0 == (byte)0xFE) && (b1 == (byte)0xFF)) {
+                bomCharset = "UTF-16BE";
+                bomLength = 2;
+            }
+            else if ((b0 == (byte)0xFF) && (b1 == (byte)0xFE)) {
+                bomCharset = "UTF-16LE";
+                bomLength = 2;
+            }
+        } else if (byteData.remaining() >= 2) {
+            byte b0 = byteData.get(0);
+            byte b1 = byteData.get(1);
+            if ((b0 == (byte)0xFE) && (b1 == (byte)0xFF)) {
+                bomCharset = "UTF-16BE";
+                bomLength = 2;
+            }
+            else if ((b0 == (byte)0xFF) && (b1 == (byte)0xFE)) {
+                bomCharset = "UTF-16LE";
+                bomLength = 2;
+            }
+        }
+        byteData.reset();
+
+        if (bomCharset != null) {
+            charsetName = bomCharset;
+            byteData.position(byteData.position() + bomLength);
+        }
 
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
+                    if (bomCharset != null) {
+                        // skip BOM again if present
+                        byteData.position(byteData.position() + bomLength);
+                    }
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+        // we do not need to look for the single char unicode BOM (0xFEFF), since this was already handled above
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
         }
         return doc;
     }
\ No newline at end of file
