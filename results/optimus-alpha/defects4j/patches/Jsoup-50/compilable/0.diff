diff --git a/tmp/9d788207-e554-4854-bc0b-778def911f8d_buggy.java b/tmp/a7573166-bcc8-42f6-8261-a7e7866a7260_fixed.java
index 25ca093..7523730 100644
--- a/tmp/9d788207-e554-4854-bc0b-778def911f8d_buggy.java
+++ b/tmp/a7573166-bcc8-42f6-8261-a7e7866a7260_fixed.java
@@ -1,52 +1,171 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // BOM detection
+    String bomCharset = null;
+    byteData.mark();
+    if (byteData.remaining() >= 4) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        byte b4 = byteData.get();
+        if (b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF) {
+            bomCharset = "UTF-32BE";
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00) {
+            bomCharset = "UTF-32LE";
+        } else if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) {
+            bomCharset = "UTF-8";
+            byteData.reset();
+            byteData.get(new byte[3]); // skip BOM
+        } else if (b1 == (byte)0xFE && b2 == (byte)0xFF) {
+            bomCharset = "UTF-16BE";
+            byteData.reset();
+            byteData.get(); byteData.get(); // skip BOM
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {
+            bomCharset = "UTF-16LE";
+            byteData.reset();
+            byteData.get(); byteData.get(); // skip BOM
+        }
+        byteData.reset();
+        if (bomCharset != null && (bomCharset.equals("UTF-32BE") || bomCharset.equals("UTF-32LE"))) {
+            // Skip BOM for UTF-32, 4 bytes
+            byteData.get(); byteData.get(); byteData.get(); byteData.get();
+        }
+    } else if (byteData.remaining() >= 3) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF)
+            bomCharset = "UTF-8";
+        byteData.reset();
+        if (bomCharset != null && bomCharset.equals("UTF-8")) {
+            byteData.get(); byteData.get(); byteData.get(); // skip BOM
+        }
+    } else if (byteData.remaining() >= 2) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        if (b1 == (byte)0xFE && b2 == (byte)0xFF) {
+            bomCharset = "UTF-16BE";
+            byteData.reset();
+            byteData.get(); byteData.get(); // skip BOM
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {
+            bomCharset = "UTF-16LE";
+            byteData.reset();
+            byteData.get(); byteData.get(); // skip BOM
+        }
+        byteData.reset();
+    } else {
+        byteData.reset(); // nothing to check
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName(defaultCharset).decode(byteData.asReadOnlyBuffer()).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                // BOM re-skipping for new decode
+                if (bomCharset != null && charsetName.equalsIgnoreCase(bomCharset)) {
+                    if (bomCharset.equals("UTF-8")) {
+                        if (byteData.remaining() >= 3) {
+                            byte b1 = byteData.get();
+                            byte b2 = byteData.get();
+                            byte b3 = byteData.get();
+                            if (!(b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF)) {
+                                byteData.position(0); // BOM not found, reset
+                            }
+                        }
+                    } else if (bomCharset.equals("UTF-16BE") || bomCharset.equals("UTF-16LE")) {
+                        if (byteData.remaining() >= 2) {
+                            byte b1 = byteData.get();
+                            byte b2 = byteData.get();
+                            if (!( (b1 == (byte)0xFE && b2 == (byte)0xFF) || (b1 == (byte)0xFF && b2 == (byte)0xFE) )) {
+                                byteData.position(0);
+                            }
+                        }
+                    } else if (bomCharset.equals("UTF-32BE") || bomCharset.equals("UTF-32LE")) {
+                        if (byteData.remaining() >= 4) {
+                            byte b1 = byteData.get();
+                            byte b2 = byteData.get();
+                            byte b3 = byteData.get();
+                            byte b4 = byteData.get();
+                            if (!((b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF) ||
+                                  (b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00))) {
+                                byteData.position(0);
+                            }
+                        }
+                    }
+                }
+                docData = Charset.forName(foundCharset).decode(byteData.asReadOnlyBuffer()).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+        // Skip BOM if present
+        if (bomCharset != null && charsetName.equalsIgnoreCase(bomCharset)) {
+            if (bomCharset.equals("UTF-8")) {
+                if (byteData.remaining() >= 3) {
+                    byte b1 = byteData.get();
+                    byte b2 = byteData.get();
+                    byte b3 = byteData.get();
+                    if (!(b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF)) {
+                        byteData.position(0); // BOM not found, reset
                     }
+                }
+            } else if (bomCharset.equals("UTF-16BE") || bomCharset.equals("UTF-16LE")) {
+                if (byteData.remaining() >= 2) {
+                    byte b1 = byteData.get();
+                    byte b2 = byteData.get();
+                    if (!( (b1 == (byte)0xFE && b2 == (byte)0xFF) || (b1 == (byte)0xFF && b2 == (byte)0xFE) )) {
+                        byteData.position(0);
+                    }
+                }
+            } else if (bomCharset.equals("UTF-32BE") || bomCharset.equals("UTF-32LE")) {
+                if (byteData.remaining() >= 4) {
+                    byte b1 = byteData.get();
+                    byte b2 = byteData.get();
+                    byte b3 = byteData.get();
+                    byte b4 = byteData.get();
+                    if (!((b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF) ||
+                          (b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00))) {
+                        byteData.position(0);
+                    }
+                }
+            }
+        }
+        docData = Charset.forName(charsetName).decode(byteData.asReadOnlyBuffer()).toString();
+    }
+
+    // Don't check the UNICODE_BOM constant; we're handling BOMs above for all encodings
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+        if (charsetName != null)
             doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
