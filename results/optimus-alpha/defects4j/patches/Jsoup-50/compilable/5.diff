diff --git a/tmp/52b8c252-b377-4c1e-8f01-25fce714d350_buggy.java b/tmp/e5f388fe-2172-4ae1-b8ce-94c1f9bd20c9_fixed.java
index 25ca093..087e303 100644
--- a/tmp/52b8c252-b377-4c1e-8f01-25fce714d350_buggy.java
+++ b/tmp/e5f388fe-2172-4ae1-b8ce-94c1f9bd20c9_fixed.java
@@ -1,52 +1,137 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
+    String docData = null;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Detect and handle BOM (Byte Order Mark)
+    String detectedCharset = null;
+    ByteOrderMark bom = null;
+
+    // Mark the original position to always rewind after peeking for BOM
+    byteData.mark();
+
+    // Utility to read BOM and set detectedCharset
+    if (byteData.remaining() >= 4) {
+        byte b0 = byteData.get();
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        // Check for BOMs (UTF-8, UTF-16, UTF-32)
+        if ((b0 == (byte)0x00 && b1 == (byte)0x00 && b2 == (byte)0xFE && b3 == (byte)0xFF)) {
+            // UTF-32, big-endian
+            detectedCharset = "UTF-32BE";
+            bom = ByteOrderMark.UTF_32_BE;
+        } else if ((b0 == (byte)0xFF && b1 == (byte)0xFE && b2 == (byte)0x00 && b3 == (byte)0x00)) {
+            // UTF-32, little-endian
+            detectedCharset = "UTF-32LE";
+            bom = ByteOrderMark.UTF_32_LE;
+        } else if ((b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF)) {
+            // UTF-8 BOM
+            detectedCharset = "UTF-8";
+            bom = ByteOrderMark.UTF_8;
+            byteData.position(byteData.position() - 1); // unread one (b3)
+        } else if ((b0 == (byte)0xFE && b1 == (byte)0xFF)) {
+            // UTF-16, big-endian
+            detectedCharset = "UTF-16BE";
+            bom = ByteOrderMark.UTF_16_BE;
+            byteData.position(byteData.position() - 2); // unread b2, b3
+        } else if ((b0 == (byte)0xFF && b1 == (byte)0xFE)) {
+            // UTF-16, little-endian
+            detectedCharset = "UTF-16LE";
+            bom = ByteOrderMark.UTF_16_LE;
+            byteData.position(byteData.position() - 2); // unread b2, b3
+        } else {
+            byteData.reset();
+        }
+    } else if (byteData.remaining() >= 3) {
+        byte b0 = byteData.get();
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        if ((b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF)) {
+            detectedCharset = "UTF-8";
+            bom = ByteOrderMark.UTF_8;
+        } else {
+            byteData.reset();
+        }
+    } else if (byteData.remaining() >= 2) {
+        byte b0 = byteData.get();
+        byte b1 = byteData.get();
+        if ((b0 == (byte)0xFE && b1 == (byte)0xFF)) {
+            detectedCharset = "UTF-16BE";
+            bom = ByteOrderMark.UTF_16_BE;
+        } else if ((b0 == (byte)0xFF && b1 == (byte)0xFE)) {
+            detectedCharset = "UTF-16LE";
+            bom = ByteOrderMark.UTF_16_LE;
+        } else {
+            byteData.reset();
+        }
+    } else {
+        byteData.reset();
+    }
+
+    if (detectedCharset != null) {
+        charsetName = detectedCharset;
+    }
+
+    // After BOM detection, ensure to rewind buffer for decode (and skip BOM bytes if present)
+    if (bom != null) {
+        int bomLen = bom.length();
+        byteData.reset();
+        byteData.position(byteData.position() + bomLen);
+    } else {
+        byteData.reset();
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                // skip BOM bytes if present
+                if (bom != null) byteData.position(byteData.position() + bom.length());
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+    // Removed check for single character BOM; individual BOM cases are now handled at the start
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+// Helper enum for BOMs
+private enum ByteOrderMark {
+    UTF_8(new byte[]{(byte)0xEF, (byte)0xBB, (byte)0xBF}),
+    UTF_16_BE(new byte[]{(byte)0xFE, (byte)0xFF}),
+    UTF_16_LE(new byte[]{(byte)0xFF, (byte)0xFE}),
+    UTF_32_BE(new byte[]{(byte)0x00, (byte)0x00, (byte)0xFE, (byte)0xFF}),
+    UTF_32_LE(new byte[]{(byte)0xFF, (byte)0xFE, (byte)0x00, (byte)0x00});
+    private final byte[] bytes;
+    ByteOrderMark(byte[] b) { this.bytes = b; }
+    public int length() { return bytes.length; }
+}
\ No newline at end of file
