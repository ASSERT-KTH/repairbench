diff --git a/tmp/2e58e4cb-c1c1-493d-9523-089d11eaf7db_buggy.java b/tmp/df7ab56d-9664-40dd-9c0a-92a439f16b00_fixed.java
index 25ca093..f74136f 100644
--- a/tmp/2e58e4cb-c1c1-493d-9523-089d11eaf7db_buggy.java
+++ b/tmp/df7ab56d-9664-40dd-9c0a-92a439f16b00_fixed.java
@@ -1,52 +1,101 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-
-        // look for BOM - overrides any other header or input
-
+    // --- BOM detection ---
+    // Check for BOM
+    byteData.mark();
+    String bomCharset = null;
+    if (byteData.remaining() >= 4) {
+        int b1 = byteData.get() & 0xFF;
+        int b2 = byteData.get() & 0xFF;
+        int b3 = byteData.get() & 0xFF;
+        int b4 = byteData.get() & 0xFF;
+        if      (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) bomCharset = "UTF-32BE";
+        else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) bomCharset = "UTF-32LE";
+        else if (b1 == 0xFE && b2 == 0xFF) { bomCharset = "UTF-16BE"; byteData.position(byteData.position() - 2); }
+        else if (b1 == 0xFF && b2 == 0xFE) { bomCharset = "UTF-16LE"; byteData.position(byteData.position() - 2); }
+        else if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) { bomCharset = "UTF-8"; byteData.position(byteData.position() - 1); }
+        byteData.reset();
+    } else if (byteData.remaining() >= 2) {
+        int b1 = byteData.get() & 0xFF;
+        int b2 = byteData.get() & 0xFF;
+        if      (b1 == 0xFE && b2 == 0xFF) bomCharset = "UTF-16BE";
+        else if (b1 == 0xFF && b2 == 0xFE) bomCharset = "UTF-16LE";
+        byteData.reset();
+    }
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
+    // --- End BOM detection ---
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { // specified by BOM or content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
+        // Handle BOM removal for UTF-8/16/32
+        if (charsetName.equalsIgnoreCase("UTF-8") || charsetName.equalsIgnoreCase("UTF-16LE")
+                || charsetName.equalsIgnoreCase("UTF-16BE") || charsetName.equalsIgnoreCase("UTF-32LE")
+                || charsetName.equalsIgnoreCase("UTF-32BE")) {
+            byte[] bytes = new byte[byteData.remaining()];
+            byteData.get(bytes);
+            byte[] cleaned = removeBOM(bytes, charsetName);
+            docData = new String(cleaned, Charset.forName(charsetName));
+        } else {
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+    }
+    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) { // keep this fallback
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+// Helper to remove BOM from bytes for known encodings
+private static byte[] removeBOM(byte[] bytes, String charsetName) {
+    if (bytes.length >= 3 && bytes[0] == (byte)0xEF && bytes[1] == (byte)0xBB && bytes[2] == (byte)0xBF && charsetName.equalsIgnoreCase("UTF-8"))
+        return Arrays.copyOfRange(bytes, 3, bytes.length);
+    if (bytes.length >= 2 && bytes[0] == (byte)0xFE && bytes[1] == (byte)0xFF && charsetName.equalsIgnoreCase("UTF-16BE"))
+        return Arrays.copyOfRange(bytes, 2, bytes.length);
+    if (bytes.length >= 2 && bytes[0] == (byte)0xFF && bytes[1] == (byte)0xFE && charsetName.equalsIgnoreCase("UTF-16LE"))
+        return Arrays.copyOfRange(bytes, 2, bytes.length);
+    if (bytes.length >= 4 && bytes[0] == (byte)0x00 && bytes[1] == (byte)0x00
+            && bytes[2] == (byte)0xFE && bytes[3] == (byte)0xFF && charsetName.equalsIgnoreCase("UTF-32BE"))
+        return Arrays.copyOfRange(bytes, 4, bytes.length);
+    if (bytes.length >= 4 && bytes[0] == (byte)0xFF && bytes[1] == (byte)0xFE
+            && bytes[2] == (byte)0x00 && bytes[3] == (byte)0x00 && charsetName.equalsIgnoreCase("UTF-32LE"))
+        return Arrays.copyOfRange(bytes, 4, bytes.length);
+    return bytes;
+}
\ No newline at end of file
