diff --git a/tmp/b2a8a5f0-a6a3-4574-963f-2750daa6779c_buggy.java b/tmp/16404a11-94e8-4874-80ed-0ae586810a37_fixed.java
index 25ca093..2a7aa51 100644
--- a/tmp/b2a8a5f0-a6a3-4574-963f-2750daa6779c_buggy.java
+++ b/tmp/16404a11-94e8-4874-80ed-0ae586810a37_fixed.java
@@ -1,52 +1,105 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM and set charsetName accordingly
+    byteData.mark();
+    String bomCharset = null;
+    int[] bomUtf8 =    {0xEF, 0xBB, 0xBF};
+    int[] bomUtf16be = {0xFE, 0xFF};
+    int[] bomUtf16le = {0xFF, 0xFE};
+    int[] bomUtf32be = {0x00, 0x00, 0xFE, 0xFF};
+    int[] bomUtf32le = {0xFF, 0xFE, 0x00, 0x00};
+    int possibleBomLen = Math.min(byteData.remaining(), 4);
+    byte[] first4bytes = new byte[possibleBomLen];
+    byteData.get(first4bytes, 0, possibleBomLen);
+    byteData.rewind();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    if (possibleBomLen >= 3 &&
+        (first4bytes[0] & 0xFF) == bomUtf8[0] &&
+        (first4bytes[1] & 0xFF) == bomUtf8[1] &&
+        (first4bytes[2] & 0xFF) == bomUtf8[2]) {
+        bomCharset = "UTF-8";
+        byteData.position(3);
+    } else if (possibleBomLen >= 4 &&
+        (first4bytes[0] & 0xFF) == bomUtf32be[0] &&
+        (first4bytes[1] & 0xFF) == bomUtf32be[1] &&
+        (first4bytes[2] & 0xFF) == bomUtf32be[2] &&
+        (first4bytes[3] & 0xFF) == bomUtf32be[3]) {
+        bomCharset = "UTF-32BE";
+        byteData.position(4);
+    } else if (possibleBomLen >= 4 &&
+        (first4bytes[0] & 0xFF) == bomUtf32le[0] &&
+        (first4bytes[1] & 0xFF) == bomUtf32le[1] &&
+        (first4bytes[2] & 0xFF) == bomUtf32le[2] &&
+        (first4bytes[3] & 0xFF) == bomUtf32le[3]) {
+        bomCharset = "UTF-32LE";
+        byteData.position(4);
+    } else if (possibleBomLen >= 2 &&
+        (first4bytes[0] & 0xFF) == bomUtf16be[0] &&
+        (first4bytes[1] & 0xFF) == bomUtf16be[1]) {
+        bomCharset = "UTF-16BE";
+        byteData.position(2);
+    } else if (possibleBomLen >= 2 &&
+        (first4bytes[0] & 0xFF) == bomUtf16le[0] &&
+        (first4bytes[1] & 0xFF) == bomUtf16le[1]) {
+        bomCharset = "UTF-16LE";
+        byteData.position(2);
+    }
+
+    String usedCharset = bomCharset != null ? bomCharset : (charsetName != null ? charsetName : defaultCharset);
+
+    // decode - if BOM reset to start after BOM bytes, else at 0.
+    Charset charset;
+    try {
+        charset = Charset.forName(usedCharset);
+    } catch (IllegalCharsetNameException | UnsupportedCharsetException e) {
+        charset = Charset.forName(defaultCharset); // fallback if unknown
+        usedCharset = defaultCharset;
+    }
+    docData = charset.decode(byteData).toString();
+
+    // after reading, remove BOM char if it remains at string start (necessary for some Java decoders)
+    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+        docData = docData.substring(1);
+    }
+
+    // Now parse and look for charset from meta if not previously supplied or detected
     doc = parser.parseInput(docData, baseUri);
+    if (bomCharset == null && charsetName == null) {
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) { // if not found, will keep current best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 &&
+                !foundCharset.equalsIgnoreCase(usedCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+                try {
+                    Charset metaCharset = Charset.forName(foundCharset);
                     byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
+                    docData = metaCharset.decode(byteData).toString();
                     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
                         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
                     }
-        if (doc == null) {
+                    usedCharset = foundCharset;
                     doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+                } catch(Exception e) {
+                    // fallback - ignore and keep previous parse
                 }
+            }
+        }
+    }
+    doc.outputSettings().charset(usedCharset);
     return doc;
 }
\ No newline at end of file
