diff --git a/tmp/4610089d-7fea-42eb-87f0-df4068d56091_buggy.java b/tmp/11658ad6-0cc2-4656-9505-553e9ffa4364_fixed.java
index d57736b..12d0e60 100644
--- a/tmp/4610089d-7fea-42eb-87f0-df4068d56091_buggy.java
+++ b/tmp/11658ad6-0cc2-4656-9505-553e9ffa4364_fixed.java
@@ -1,39 +1,48 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              // If the property does not exist, allow undefined as well.
+              // Widen to (propType | undefined) regardless if propType already includes undefined.
+              typeToInfer = getNativeType(UNDEFINED_TYPE).getLeastSupertype(propType);
+            } else {
+              // If the property *exists* but is only inferred, also widen to union with undefined.
+              if (!objType.isPropertyTypeInferred(prop)) {
+                // Leave as is.
+              } else if (!propType.isUnknownType() && !propType.isVoidType() && !propType.isSubtype(getNativeType(UNDEFINED_TYPE))) {
+                // Only widen if the constraint type doesn't already include undefined.
+                typeToInfer = getNativeType(UNDEFINED_TYPE).getLeastSupertype(propType);
+              }
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
