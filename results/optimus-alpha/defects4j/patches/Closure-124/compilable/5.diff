diff --git a/tmp/dcab7b62-bad2-407a-9a1a-efee788a735d_buggy.java b/tmp/806f1854-2d7a-4c1a-b0ea-ee499dca6281_fixed.java
index 2573d30..301473c 100644
--- a/tmp/dcab7b62-bad2-407a-9a1a-efee788a735d_buggy.java
+++ b/tmp/806f1854-2d7a-4c1a-b0ea-ee499dca6281_fixed.java
@@ -1,20 +1,33 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // If replacement has any getProp chain with same root as node, it's unsafe
+    Node getPropRoot = node.getFirstChild();
+    if (getPropRoot.isName() && referencesName(replacement, getPropRoot.getString())) {
       return false;
     }
 
     return true;
   }
+
+  // Helper: Checks if n references a name node with the given name
+  private static boolean referencesName(Node n, String name) {
+    if (n.isName() && n.getString().equals(name)) {
+      return true;
+    }
+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+      if (referencesName(c, name)) {
+        return true;
+      }
+    }
+    return false;
+  }
\ No newline at end of file
