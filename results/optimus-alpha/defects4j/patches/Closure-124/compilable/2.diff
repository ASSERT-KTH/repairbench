diff --git a/tmp/e597ff72-027b-4e05-b0d7-af5317f97b0a_buggy.java b/tmp/c7da2ee3-cdc6-4a9d-a252-97dea740633a_fixed.java
index 2573d30..82c82c9 100644
--- a/tmp/e597ff72-027b-4e05-b0d7-af5317f97b0a_buggy.java
+++ b/tmp/c7da2ee3-cdc6-4a9d-a252-97dea740633a_fixed.java
@@ -1,20 +1,31 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Bug fix: Check the whole chain of GETPROP to ensure replaced value has not changed.
+    Node nodeObj = node.getFirstChild();
+    Node propObj = replacement;
+    while (nodeObj != null && propObj != null) {
+      if (!nodeObj.isName() && !nodeObj.isGetProp()) {
+        // don't know how to analyze this, so bail out
         return false;
       }
-
+      if (nodeObj.isName() && isNameAssignedTo(nodeObj.getString(), propObj)) {
+        return false;
+      }
+      if (!propObj.isGetProp()) {
+        break;
+      }
+      nodeObj = nodeObj.isGetProp() ? nodeObj.getFirstChild() : null;
+      propObj = propObj.getFirstChild();
+    }
     return true;
   }
\ No newline at end of file
