diff --git a/tmp/d4bcbed0-089c-4b83-a302-13ebbbe3285b_buggy.java b/tmp/cf6c9a64-ff43-4d15-a47f-15bc0851fa16_fixed.java
index 2573d30..9fd43de 100644
--- a/tmp/d4bcbed0-089c-4b83-a302-13ebbbe3285b_buggy.java
+++ b/tmp/cf6c9a64-ff43-4d15-a47f-15bc0851fa16_fixed.java
@@ -1,20 +1,46 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  // Ensure both nodes refer to the same property chain.
+  Node orig = node;
+  Node repl = replacement;
+
+  // Walk down both trees to the root.
+  while (orig != null && repl != null && orig.isGetProp() && repl.isGetProp()) {
+    Node origChild = orig.getFirstChild();
+    Node replChild = repl.getFirstChild();
+    Node origProp = orig.getLastChild();
+    Node replProp = repl.getLastChild();
+
+    if (!origProp.getString().equals(replProp.getString())) {
+      // Different property name at this level; unsafe.
       return false;
     }
 
+    orig = origChild;
+    repl = replChild;
+  }
+  // Now, check roots.
+  if (orig != null && repl != null && orig.isName() && repl.isName()) {
+    if (!orig.getString().equals(repl.getString())) {
+      // Different roots; unsafe.
+      return false;
+    }
+    if (isNameAssignedTo(orig.getString(), replacement)) {
+      return false;
+    }
     return true;
   }
+
+  // Structure mismatch.
+  return false;
+}
\ No newline at end of file
