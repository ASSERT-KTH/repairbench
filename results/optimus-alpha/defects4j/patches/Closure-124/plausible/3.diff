diff --git a/tmp/ad74b00b-cf91-4bae-8108-f4bd6febc73e_buggy.java b/tmp/8a47f5c7-3d9d-4da7-884a-35bfcb5da4eb_fixed.java
index 2573d30..dc3c6ef 100644
--- a/tmp/ad74b00b-cf91-4bae-8108-f4bd6febc73e_buggy.java
+++ b/tmp/8a47f5c7-3d9d-4da7-884a-35bfcb5da4eb_fixed.java
@@ -1,20 +1,34 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  Node objNode = node.getFirstChild();
+  if (objNode.isName()
+      && isNameAssignedTo(objNode.getString(), replacement)) {
+    return false;
+  }
+
+  // If the property chain has more than one property (i.e., x.parentNode.parentNode),
+  // it's not safe to replace, because the intermediate property can change.
+  Node current = objNode;
+  while (current != null && current.isGetProp()) {
+    current = current.getFirstChild();
+    if (current != null && current.isName()
+        && isNameAssignedTo(current.getString(), replacement)) {
+      return false;
+    }
+  }
+  if (node.getFirstChild().isGetProp()) {
     return false;
   }
 
   return true;
 }
\ No newline at end of file
