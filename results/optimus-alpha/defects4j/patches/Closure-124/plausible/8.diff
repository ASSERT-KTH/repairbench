diff --git a/tmp/91a55954-d310-443a-9309-86ef8d431191_buggy.java b/tmp/aeb396b0-8c2a-4885-8d85-62b75e9b0dd8_fixed.java
index 2573d30..c1385bd 100644
--- a/tmp/91a55954-d310-443a-9309-86ef8d431191_buggy.java
+++ b/tmp/aeb396b0-8c2a-4885-8d85-62b75e9b0dd8_fixed.java
@@ -1,20 +1,25 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  Node obj = node.getFirstChild();
+  // Bug fix: Check if the *object* of the property access is being assigned to something new.
+  if (obj.isName() &&
+      isNameAssignedTo(obj.getString(), replacement)) {
+    return false;
+  }
+  // Also, be conservative: If the property chain starts with a getProp, check recursively.
+  if (obj.isGetProp() && !isSafeReplacement(obj, replacement)) {
     return false;
   }
 
   return true;
 }
\ No newline at end of file
