diff --git a/tmp/7838a86c-bb5e-4f1f-a454-bd1e71497b9a_buggy.java b/tmp/f5b0d3b5-c437-4448-8d51-8b0026464ff3_fixed.java
index 2573d30..b0cd47a 100644
--- a/tmp/7838a86c-bb5e-4f1f-a454-bd1e71497b9a_buggy.java
+++ b/tmp/f5b0d3b5-c437-4448-8d51-8b0026464ff3_fixed.java
@@ -1,20 +1,54 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  Node objNode = node.getFirstChild();
+  // It's unsafe if the replacement assigns to the *same* getprop chain (i.e., x.parentNode)
+  if (objNode.isName() && isNameAssignedTo(objNode.getString(), replacement)) {
     return false;
   }
+  // Also, if replacement references the same property chain as 'node' (e.g. x.parentNode)
+  if (isPropertyChainAssignedTo(node, replacement)) {
+    return false;
+  }
+  return true;
+}
 
+/**
+ * Checks whether the given replacement assigns to the same
+ * property chain represented by 'pattern' node.
+ */
+private boolean isPropertyChainAssignedTo(Node pattern, Node replacement) {
+  if (replacement.isAssign()) {
+    Node lhs = replacement.getFirstChild();
+    if (lhs != null && lhs.isGetProp() && comparePropertyChains(pattern, lhs)) {
       return true;
     }
+  }
+  return false;
+}
+
+/**
+ * Compares two property chains for structural equality.
+ */
+private boolean comparePropertyChains(Node a, Node b) {
+  if (a == null || b == null || !a.getToken().equals(b.getToken())) {
+    return false;
+  }
+  if (a.isName() && b.isName()) {
+    return a.getString().equals(b.getString());
+  }
+  if (a.isGetProp() && b.isGetProp()) {
+    return comparePropertyChains(a.getFirstChild(), b.getFirstChild()) &&
+        a.getSecondChild().getString().equals(b.getSecondChild().getString());
+  }
+  return false;
+}
\ No newline at end of file
