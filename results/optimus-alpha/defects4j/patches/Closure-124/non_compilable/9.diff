diff --git a/tmp/02479f82-c5f1-40d7-9f90-ca7781468dc3_buggy.java b/tmp/d9d5ca34-1322-4517-bd91-e2dd44d3c158_fixed.java
index 2573d30..374a2fd 100644
--- a/tmp/02479f82-c5f1-40d7-9f90-ca7781468dc3_buggy.java
+++ b/tmp/d9d5ca34-1322-4517-bd91-e2dd44d3c158_fixed.java
@@ -1,20 +1,36 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    Node obj = node.getFirstChild();
+    Node prop = node.getSecondChild();
+
+    // If the object of the property access is assigned to in the replacement,
+    // it's not safe to replace.
+    if (obj.isName()
+        && isNameAssignedTo(obj.getString(), replacement)) {
       return false;
     }
 
+    // Additionally, if replacement assigns to the same property, it's not safe.
+    if (replacement.isAssign()) {
+      Node lhs = replacement.getFirstChild();
+      if (lhs.isGetProp()) {
+        Node lhsObj = lhs.getFirstChild();
+        Node lhsProp = lhs.getSecondChild();
+        if (obj.isEquivalentTo(lhsObj) && prop.getString().equals(lhsProp.getString())) {
+          return false;
+        }
+      }
+    }
+
     return true;
   }
\ No newline at end of file
