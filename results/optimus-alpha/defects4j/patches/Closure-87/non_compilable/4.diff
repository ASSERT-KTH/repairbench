diff --git a/tmp/4668f347-fa15-4216-a9bd-41a32bcb8cb6_buggy.java b/tmp/4417e99f-4658-4915-826f-d050039c6907_fixed.java
index 19fd63e..5abdd6d 100644
--- a/tmp/4668f347-fa15-4216-a9bd-41a32bcb8cb6_buggy.java
+++ b/tmp/4417e99f-4658-4915-826f-d050039c6907_fixed.java
@@ -1,24 +1,41 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
 
+        // Do not fold calls of the form x.onchange() or x['onchange']()
+        // See issue 291.
+        if (NodeUtil.isExprCall(maybeExpr)) {
+          Node callTarget = maybeExpr.getFirstChild();
+          if (callTarget.isGetProp()) {
+            String prop = callTarget.getLastChild().getString();
+            if ("onchange".equals(prop)) {
+              return false;
+            }
+          } else if (callTarget.isGetElem()) {
+            Node propNode = callTarget.getLastChild();
+            if (propNode.isString() && "onchange".equals(propNode.getString())) {
+              return false;
+            }
+          }
+        }
+
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
\ No newline at end of file
