diff --git a/tmp/34498f8c-9885-4ff5-a92a-f7d02c640a32_buggy.java b/tmp/89384a81-fe04-4603-b753-844179b59ec7_fixed.java
index 19fd63e..9d68c7e 100644
--- a/tmp/34498f8c-9885-4ff5-a92a-f7d02c640a32_buggy.java
+++ b/tmp/89384a81-fe04-4603-b753-844179b59ec7_fixed.java
@@ -1,24 +1,40 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
+        //
+        // We only have to worry about function calls named 'onchange',
+        // 'onblur', etc. Avoid folding EXPR_RESULTs that look like
+        // f.onchange();
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          Node expr = maybeExpr.getFirstChild();
+          if (expr != null && expr.isCall()) {
+            Node callee = expr.getFirstChild();
+            if (callee != null && callee.isGetProp()) {
+              Node prop = callee.getLastChild();
+              if (prop != null && prop.isString()) {
+                String propName = prop.getString();
+                if (propName.startsWith("on")) {
+                  return false;
+                }
+              }
+            }
+          }
+          return true;
+        }
       }
     }
-
     return false;
   }
\ No newline at end of file
