diff --git a/tmp/5a9f9955-c368-4aed-85a3-03760ab55393_buggy.java b/tmp/0b48bec4-5cda-4377-83c2-aa3b17b037c9_fixed.java
index 19fd63e..8c554a2 100644
--- a/tmp/5a9f9955-c368-4aed-85a3-03760ab55393_buggy.java
+++ b/tmp/0b48bec4-5cda-4377-83c2-aa3b17b037c9_fixed.java
@@ -1,24 +1,40 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and the expression is safe to fold.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
+
       // IE has a bug where event handlers behave differently when
       // their return value is used vs. when their return value is in
       // an EXPR_RESULT. It's pretty freaking weird. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
       // We try to detect this case, and not fold EXPR_RESULTs
       // into other expressions.
 
       // We only have to worry about methods with an implicit 'this'
       // param, or this doesn't happen.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+      // Only fold if the expression is not a method call to a property that
+      // could be an event handler, such as onchange, onclick, etc.
+      if (NodeUtil.isExpressionNode(maybeExpr)) {
+        Node expr = maybeExpr.getFirstChild();
+        if (expr != null && expr.isCall()) {
+          Node callee = expr.getFirstChild();
+          if (callee != null && callee.isGetProp()) {
+            String propName = callee.getLastChild().getString();
+            // Don't fold calls to properties named like event handlers 'on*'
+            if (propName.startsWith("on")) {
+              return false;
+            }
+          }
+        }
+        return true;
+      }
     }
   }
 
   return false;
 }
\ No newline at end of file
