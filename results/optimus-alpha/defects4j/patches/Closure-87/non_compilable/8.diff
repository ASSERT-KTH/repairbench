diff --git a/tmp/2baad542-5dbb-4a0c-8851-8f0d11a2501c_buggy.java b/tmp/7c56908a-daf6-42dd-9727-9af8b1944d17_fixed.java
index 19fd63e..5302019 100644
--- a/tmp/2baad542-5dbb-4a0c-8851-8f0d11a2501c_buggy.java
+++ b/tmp/7c56908a-daf6-42dd-9727-9af8b1944d17_fixed.java
@@ -1,24 +1,29 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+        // Avoid folding EXPR_RESULTs for specific cases with "onchange"/event-handlers.
+        // See http://code.google.com/p/closure-compiler/issues/detail?id=291
+        if (NodeUtil.isExprCall(maybeExpr)) {
+          Node callTarget = maybeExpr.getFirstChild();
+          if (callTarget != null &&
+              (callTarget.isGetProp() || callTarget.isGetElem())) {
+            Node propNode = callTarget.getLastChild();
+            if (propNode != null && propNode.isString()) {
+              String propName = propNode.getString();
+              // Avoid folding known event handler property calls, like .onchange
+              if (propName.startsWith("on")) {
+                return false;
+              }
+            }
+          }
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
-
     return false;
   }
\ No newline at end of file
