diff --git a/tmp/026129ff-2e20-496a-a5b2-63b3a63f3b4e_buggy.java b/tmp/41f7fb2b-987b-425b-a526-337dfe0a4a43_fixed.java
index 19fd63e..eed05a4 100644
--- a/tmp/026129ff-2e20-496a-a5b2-63b3a63f3b4e_buggy.java
+++ b/tmp/41f7fb2b-987b-425b-a526-337dfe0a4a43_fixed.java
@@ -1,24 +1,31 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression and that it's safe to fold into an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+      // Do not fold method calls of the form: obj.onchange();
+      // See https://github.com/google/closure-compiler/issues/291 for details
+      if (maybeExpr.getType() == Token.EXPR_RESULT) {
+        Node expr = maybeExpr.getFirstChild();
+        if (expr != null && expr.isCall()) {
+          Node callee = expr.getFirstChild();
+          // Check: obj.onchange()
+          if (callee != null && callee.isGetProp()) {
+            String propName = callee.getLastChild().getString();
+            if ("onchange".equals(propName) || "onload".equals(propName) ||
+                "onerror".equals(propName) || "onblur".equals(propName) ||
+                "onfocus".equals(propName)) {
+              // Potentially IE event handler with "weird" semantics.
+              return false;
+            }
+          }
+        }
+      }
       return NodeUtil.isExpressionNode(maybeExpr);
     }
   }
-
   return false;
 }
\ No newline at end of file
