diff --git a/tmp/65f5a438-a4d1-457d-a4cb-7c223fc82e5b_buggy.java b/tmp/eac74106-8580-477e-8d7d-974046beda90_fixed.java
index 19fd63e..8a7da7d 100644
--- a/tmp/65f5a438-a4d1-457d-a4cb-7c223fc82e5b_buggy.java
+++ b/tmp/eac74106-8580-477e-8d7d-974046beda90_fixed.java
@@ -1,24 +1,50 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+        // Only fold EXPR_RESULT into a single expression statement if the invoked
+        // method/property is not named like one of the known event handlers (like onchange)
+        // when called as a property (e.g., f.onchange();), which are known to have
+        // side effects on IE regarding their value context.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          Node expr = maybeExpr.getFirstChild();
+          if (expr != null && expr.isCall()) {
+            Node callee = expr.getFirstChild();
+            if (callee != null && (callee.isGetProp() || callee.isGetElem())) {
+              // Only get the property name if it's a direct property access (not computed).
+              if (callee.isGetProp()) {
+                String propName = callee.getLastChild().getString();
+                // Don't fold if it's a property with a known problematic event name.
+                if ("onchange".equals(propName) || "onfocus".equals(propName) ||
+                    "onblur".equals(propName) || "oninput".equals(propName) ||
+                    "onreset".equals(propName) || "onsubmit".equals(propName) ||
+                    "onselect".equals(propName) || "onmousedown".equals(propName) ||
+                    "onmouseup".equals(propName) || "onkeydown".equals(propName) ||
+                    "onkeypress".equals(propName) || "onkeyup".equals(propName)) {
+                  return false;
+                }
+              } else if (callee.isGetElem()) {
+                // If the property is accessed by element (e.g. f['onchange']),
+                // don't fold, since we can't be certain.
+                return false;
+              }
+            }
+          }
+          return true;
+        }
       }
     }
-
     return false;
   }
\ No newline at end of file
