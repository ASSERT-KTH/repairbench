diff --git a/tmp/61c7e39a-8d7a-4921-8a3a-49c82f8bd931_buggy.java b/tmp/549a8b24-45c9-42c4-9594-3c2e14284563_fixed.java
index 19fd63e..4f02b2c 100644
--- a/tmp/61c7e39a-8d7a-4921-8a3a-49c82f8bd931_buggy.java
+++ b/tmp/549a8b24-45c9-42c4-9594-3c2e14284563_fixed.java
@@ -1,24 +1,39 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
       // IE has a bug where event handlers behave differently when
       // their return value is used vs. when their return value is in
       // an EXPR_RESULT. It's pretty freaking weird. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
       // We try to detect this case, and not fold EXPR_RESULTs
       // into other expressions.
 
       // We only have to worry about methods with an implicit 'this'
       // param, or this doesn't happen.
 
+      if (maybeExpr.getType() == Token.EXPR_RESULT) {
+        Node expr = maybeExpr.getFirstChild();
+        if (expr != null && expr.getType() == Token.CALL) {
+          Node callTarget = expr.getFirstChild();
+          // Only avoid folding when the call target is (something).onchange
+          if (callTarget != null && callTarget.getType() == Token.GETPROP) {
+            String propName = callTarget.getLastChild().getString();
+            if ("onchange".equals(propName)) {
+              // Don't fold, IE special case.
+              return false;
+            }
+          }
+        }
+      }
+
       return NodeUtil.isExpressionNode(maybeExpr);
     }
   }
 
   return false;
 }
\ No newline at end of file
