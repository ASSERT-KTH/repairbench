diff --git a/tmp/3233986b-041e-4ee1-a087-13ef7dcb84a9_buggy.java b/tmp/02ff0444-e435-4b55-9d63-e5ae1d39eeb5_fixed.java
index 46817a7..b7732d0 100644
--- a/tmp/3233986b-041e-4ee1-a087-13ef7dcb84a9_buggy.java
+++ b/tmp/02ff0444-e435-4b55-9d63-e5ae1d39eeb5_fixed.java
@@ -1,16 +1,35 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+  // If the record types are equal, return this.
+  if (this.isEquivalentTo(that)) {
+    return this;
   }
+
+  // If the record types have the same properties and types, return a record,
+  // otherwise the least supertype is just the union of the two records.
+  RecordType otherRecord = that.toMaybeRecordType();
+  if (otherRecord == null) {
+    return super.getLeastSupertype(that);
   }
-    return builder.build();
+
+  // Check if the two are compatible (same properties and types)
+  if (this.properties.keySet().equals(otherRecord.properties.keySet())) {
+    boolean allPropsEq = true;
+    for (String prop : properties.keySet()) {
+      if (!getPropertyType(prop).isEquivalentTo(otherRecord.getPropertyType(prop))) {
+        allPropsEq = false;
+        break;
+      }
+    }
+    if (allPropsEq) {
+      return this;
+    }
+  }
+
+  // Otherwise, return the union type as least supertype.
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
