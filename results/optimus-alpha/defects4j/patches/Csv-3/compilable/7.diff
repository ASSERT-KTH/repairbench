diff --git a/tmp/53d49272-63c6-4055-add0-b8b650d258bd_buggy.java b/tmp/3e5dfdb8-8ae9-4530-8e06-47d4e9d2a4fb_fixed.java
index 1ad070d..86130cf 100644
--- a/tmp/53d49272-63c6-4055-add0-b8b650d258bd_buggy.java
+++ b/tmp/3e5dfdb8-8ae9-4530-8e06-47d4e9d2a4fb_fixed.java
@@ -1,38 +1,33 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
  * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
  * on the input stream.
  * 
  * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
  * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
  * the escape character is not allowed at end of strem
  */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
     case END_OF_STREAM:
         throw new IOException("EOF whilst processing escape sequence");
+    // Remove the cases that would allow escaping CR, LF, FF, TAB, BACKSPACE as themselves,
+    // since only the above single-letter escapes (r, n, t, b, f) are standard.
     default:
-            // Now check for meta-characters
+        // Return the char verbatim (e.g. a, N, or the escape char itself, etc.)
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
\ No newline at end of file
