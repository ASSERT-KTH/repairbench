diff --git a/tmp/f274f438-4cf9-49c1-9e29-caecae51841e_buggy.java b/tmp/1923f149-b0cc-4862-b73f-cea19ea55879_fixed.java
index 1ad070d..1012801 100644
--- a/tmp/f274f438-4cf9-49c1-9e29-caecae51841e_buggy.java
+++ b/tmp/1923f149-b0cc-4862-b73f-cea19ea55879_fixed.java
@@ -1,38 +1,44 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
         case FF: // TODO is this correct?
         case TAB: // TODO is this correct? Do tabs need to be escaped?
         case BACKSPACE: // TODO is this correct?
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
+            // Special rules: only escape "known" chars, otherwise treat as normal char with escape dropped (i.e., return c)
+            // However, if the escape is followed by N (used in MySQL as \N -> \N), preserve the escape (i.e., do NOT unescape).
+            // Likewise for unknown chars: preserve the escape
+            if (c == 'N') { // MySQL null literal, preserve escaped form
+                return -1; // signal to caller to treat as normal char pair ('\', 'N'), i.e., not unescaped
+            }
+            // If c is not one of special recognized sequences, preserve the escape,
+            // i.e., return -1 so the lexer can append the escape and following char verbatim
+            return -1;
         }
     }
\ No newline at end of file
