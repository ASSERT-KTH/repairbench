diff --git a/tmp/671d16af-bc0b-4cb7-a2c5-449713a3207d_buggy.java b/tmp/94ded2f5-344a-4faa-8248-05ee753437b5_fixed.java
index ad4b0d8..1e1ac94 100644
--- a/tmp/671d16af-bc0b-4cb7-a2c5-449713a3207d_buggy.java
+++ b/tmp/94ded2f5-344a-4faa-8248-05ee753437b5_fixed.java
@@ -1,47 +1,54 @@
 /**
  * Use K-means++ to choose the initial centers.
  *
  * @param <T> type of the points to cluster
  * @param points the points to choose the initial centers from
  * @param k the number of centers to choose
  * @param random random generator to use
  * @return the initial centers
  */
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
     final double[] dx2 = new double[pointSet.size()];
-        while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
+    while (resultSet.size() < k && !pointSet.isEmpty()) {
+        double sum = 0.0;
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+            dx2[i] = d * d;
+            sum += dx2[i];
+        }
+
+        // All remaining points are the same distance to their nearest cluster: pick randomly
+        if (sum == 0.0) {
+            // Pick a random remaining point as a center
+            final T p = pointSet.remove(random.nextInt(pointSet.size()));
+            resultSet.add(new Cluster<T>(p));
+            continue;
         }
 
         // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+        // probability proportional to D(x)^2
         final double r = random.nextDouble() * sum;
+        double cumulative = 0.0;
         for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
+            cumulative += dx2[i];
+            if (cumulative >= r) {
                 final T p = pointSet.remove(i);
                 resultSet.add(new Cluster<T>(p));
                 break;
             }
         }
     }
 
     return resultSet;
-
 }
\ No newline at end of file
