diff --git a/tmp/a1c076bb-0e10-479f-a2c6-6a86745464ad_buggy.java b/tmp/38155556-3d76-4e49-88c7-36eb0384f834_fixed.java
index de9af32..0ded83b 100644
--- a/tmp/a1c076bb-0e10-479f-a2c6-6a86745464ad_buggy.java
+++ b/tmp/38155556-3d76-4e49-88c7-36eb0384f834_fixed.java
@@ -1,18 +1,32 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
+  if (node.getToken() == Token.CALL) {
     Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
+    // Only add NAME references that are *not* .call or .apply
+    if (child != null) {
+      if (child.getToken() == Token.NAME) {
         changed.add(child.getString());
+      } else if (child.getToken() == Token.GETPROP) {
+        // Do not add for .call or .apply
+        String propName = child.getLastChild().getString();
+        if (!("call".equals(propName) || "apply".equals(propName))) {
+          // e.g., foo.bar() should not be added as a function reference
+        } else {
+          Node maybeFunc = child.getFirstChild();
+          if (maybeFunc != null && maybeFunc.getToken() == Token.NAME) {
+            changed.add(maybeFunc.getString());
+          }
+        }
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
