diff --git a/tmp/112d4597-3cbd-4c25-a5c7-5208a77d01f1_buggy.java b/tmp/ce4e1704-ea87-4937-8ea0-89f740d7f500_fixed.java
index de9af32..1ebf079 100644
--- a/tmp/112d4597-3cbd-4c25-a5c7-5208a77d01f1_buggy.java
+++ b/tmp/ce4e1704-ea87-4937-8ea0-89f740d7f500_fixed.java
@@ -1,18 +1,30 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
+    if (node.getToken() == Token.CALL) { // Use getToken instead of getType (modern API)
       Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
+      // Only add direct function calls by name, not method or property calls
+      if (child != null && child.getToken() == Token.NAME) {
         changed.add(child.getString());
       }
     }
 
+    // Do not recurse into the CALL node's first child (the callee expression),
+    // only its arguments. This avoids treating the callee's NAME node
+    // as a direct function call reference.
+    if (node.getToken() == Token.CALL) {
+      Node arg = node.getFirstChild();
+      if (arg != null) arg = arg.getNext();
+      for (; arg != null; arg = arg.getNext()) {
+        findCalledFunctions(arg, changed);
+      }
+    } else {
       for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
         findCalledFunctions(c, changed);
       }
     }
+  }
\ No newline at end of file
