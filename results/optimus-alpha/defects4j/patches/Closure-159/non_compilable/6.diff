diff --git a/tmp/d9b92e88-15d9-4cd1-ad7b-59407ced5682_buggy.java b/tmp/7e2132d8-a75d-4c2a-ac4b-0d4f477f3c19_fixed.java
index de9af32..044d133 100644
--- a/tmp/d9b92e88-15d9-4cd1-ad7b-59407ced5682_buggy.java
+++ b/tmp/7e2132d8-a75d-4c2a-ac4b-0d4f477f3c19_fixed.java
@@ -1,18 +1,24 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
+  if (node.getToken() == Token.CALL) {
     Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
+    if (child != null && child.getToken() == Token.NAME) {
+      // Only add if the function is called directly (not as a property).
       changed.add(child.getString());
     }
   }
 
+  // Only recurse into children if the current node is NOT a CALL node.
+  // Prevent walking into the callee of CALL, as that could result in
+  // double-counting in some AST structures or collecting property calls.
+  if (node.getToken() != Token.CALL) {
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
+}
\ No newline at end of file
