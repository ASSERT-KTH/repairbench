diff --git a/tmp/f8bf98fd-1253-43db-a9ca-afe8b8f45470_buggy.java b/tmp/307ae35b-1300-460e-a4bd-9d6cef117e24_fixed.java
index de9af32..36dc270 100644
--- a/tmp/f8bf98fd-1253-43db-a9ca-afe8b8f45470_buggy.java
+++ b/tmp/307ae35b-1300-460e-a4bd-9d6cef117e24_fixed.java
@@ -1,18 +1,26 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
+    if (node.isCall()) {
       Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
+      // Only add calls of the form NAME(), not something like obj.method()
+      if (child.isName()) {
         changed.add(child.getString());
       }
     }
 
+    // Only recurse if this node is not a CALL node whose child is NAME
+    // In other words, do not recurse into the callee of direct NAME() calls,
+    // because we already handled the NAME above.
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
+      // If current node is CALL and this is the first child and it's NAME, skip recursion
+      if (node.isCall() && c == node.getFirstChild() && c.isName()) {
+        continue;
+      }
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
