diff --git a/tmp/1eec0e69-ad1b-4e9c-b21c-edde9474437f_buggy.java b/tmp/d7afab51-b2ae-48d1-82af-07af324f2e76_fixed.java
index de9af32..044912f 100644
--- a/tmp/1eec0e69-ad1b-4e9c-b21c-edde9474437f_buggy.java
+++ b/tmp/d7afab51-b2ae-48d1-82af-07af324f2e76_fixed.java
@@ -1,18 +1,23 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
+    // Only add if the call target is a simple NAME, not a property or call (e.g., func(), not obj.func() or f().g())
+    if (child != null && child.getType() == Token.NAME && node.isFirstChild(child)) {
       changed.add(child.getString());
     }
   }
 
+  // Only traverse children if this node is not a function definition,
+  // so we don't collect called functions inside nested functions
+  if (!node.isFunction()) {
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
+}
\ No newline at end of file
