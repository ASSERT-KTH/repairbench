diff --git a/tmp/09b912e5-40f2-444c-b747-a4b3a4cea142_buggy.java b/tmp/8ce22a91-eb74-4aaa-a808-9ecd4a2b3805_fixed.java
index de9af32..6a31cb4 100644
--- a/tmp/09b912e5-40f2-444c-b747-a4b3a4cea142_buggy.java
+++ b/tmp/8ce22a91-eb74-4aaa-a808-9ecd4a2b3805_fixed.java
@@ -1,18 +1,24 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
+    // Make sure the call is not a "someObj.method()" call
     if (child.getType() == Token.NAME) {
       changed.add(child.getString());
     }
   }
 
-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
+  // Only recurse into children if not CALL node, to avoid double-counting
+  // the function called with .call or .apply (like f.call(this)), where
+  // the receiver is not a reference to a function to consider for inlining.
+  // Thus, skip recursing into the first child of CALL node.
+  for (Node c = node.getType() == Token.CALL ? node.getFirstChild().getNext() : node.getFirstChild();
+       c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
