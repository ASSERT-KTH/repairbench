diff --git a/tmp/ef34d8c1-f2cb-4b5d-ad44-be0ffff48f1c_buggy.java b/tmp/b95ec9f1-950f-4e42-b312-0738e84fc624_fixed.java
index 00914da..0ff6e90 100644
--- a/tmp/ef34d8c1-f2cb-4b5d-ad44-be0ffff48f1c_buggy.java
+++ b/tmp/b95ec9f1-950f-4e42-b312-0738e84fc624_fixed.java
@@ -1,17 +1,22 @@
 // does not recurse.
 private void normalise(Element element) {
     List<Node> toMove = new ArrayList<Node>();
     for (Node node : element.childNodes) {
         if (node instanceof TextNode) {
             TextNode tn = (TextNode) node;
             if (!tn.isBlank())
                 toMove.add(tn);
         }
     }
 
-        for (Node node: toMove) {
+    // Insert text nodes at the START of the body, not end, preserving their original order
+    // So, process from last to first to retain order when inserting at index 0
+    Element body = body();
+    int insertPos = 0;
+    for (int i = toMove.size() - 1; i >= 0; i--) {
+        Node node = toMove.get(i);
         element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+        body.insertChildren(insertPos++, new TextNode(" ", ""));
+        body.insertChildren(insertPos++, node);
     }
 }
\ No newline at end of file
