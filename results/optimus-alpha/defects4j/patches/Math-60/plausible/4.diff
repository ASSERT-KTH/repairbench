diff --git a/tmp/25599427-5b1c-4d83-b036-7fa68eda294c_buggy.java b/tmp/94b2f689-8cdb-4ce0-b761-91df7bd954ba_fixed.java
index 3127f85..22b840e 100644
--- a/tmp/25599427-5b1c-4d83-b036-7fa68eda294c_buggy.java
+++ b/tmp/94b2f689-8cdb-4ce0-b761-91df7bd954ba_fixed.java
@@ -1,24 +1,27 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
     public double cumulativeProbability(double x) throws MathException {
+        // Handle infinite values explicitly to prevent errors in Erf.erf
+        if (Double.isNaN(x)) {
+            return Double.NaN;
+        }
+        if (x == Double.POSITIVE_INFINITY) {
+            return 1.0;
+        }
+        if (x == Double.NEGATIVE_INFINITY) {
+            return 0.0;
+        }
+        // Use 40 std deviations as in the documentation for top-coding
+        if (x < (mean - 40 * standardDeviation)) {
+            return 0.0;
+        }
+        if (x > (mean + 40 * standardDeviation)) {
+            return 1.0;
+        }
+        
         final double dev = x - mean;
         try {
             return 0.5 * (1.0 + Erf.erf((dev) /
                         (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+            throw new MathException(ex);
         }
     }
\ No newline at end of file
