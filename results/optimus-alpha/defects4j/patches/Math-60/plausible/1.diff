diff --git a/tmp/92982b77-0265-479d-aeff-3fe374e8e506_buggy.java b/tmp/4b7d3bba-9737-42bb-8f9a-85e0168af5d7_fixed.java
index 3127f85..8c0601e 100644
--- a/tmp/92982b77-0265-479d-aeff-3fe374e8e506_buggy.java
+++ b/tmp/4b7d3bba-9737-42bb-8f9a-85e0168af5d7_fixed.java
@@ -1,24 +1,31 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
+    // Handle special cases for infinities and extreme values
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    }
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    }
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
+    // Top/code extreme values to 0 or 1 (per javadoc: more than 40 std devs from mean)
+    if (x < mean - 40 * standardDeviation) {
+        return 0.0;
+    }
+    if (x > mean + 40 * standardDeviation) {
+        return 1.0;
+    }
     final double dev = x - mean;
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+        if (x < (mean - 20 * standardDeviation)) { // Fallback for older limits
             return 0;
         } else if (x > (mean + 20 * standardDeviation)) {
             return 1;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
