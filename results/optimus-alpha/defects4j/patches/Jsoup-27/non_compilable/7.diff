diff --git a/tmp/1f0e68de-5760-4a34-bc42-f93ac06fa769_buggy.java b/tmp/4d43478a-78f7-4025-9797-6cba6e86f7ff_fixed.java
index 7fb120e..8b8a75b 100644
--- a/tmp/1f0e68de-5760-4a34-bc42-f93ac06fa769_buggy.java
+++ b/tmp/4d43478a-78f7-4025-9797-6cba6e86f7ff_fixed.java
@@ -1,16 +1,32 @@
 /**
  * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
  * will kick in.)
  * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+ * @return "EUC-JP", or null if not found. Charset is trimmed and matches canonical casing if a known charset, or original otherwise.
  */
 static String getCharsetFromContentType(String contentType) {
     if (contentType == null) return null;
     Matcher m = charsetPattern.matcher(contentType);
     if (m.find()) {
         String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
-            return charset;
+        // remove surrounding quotes
+        if (charset.length() > 1 && (charset.charAt(0) == '"' || charset.charAt(0) == '\'')
+                && charset.charAt(charset.length() - 1) == charset.charAt(0))
+            charset = charset.substring(1, charset.length() - 1);
+
+        // Check if the charset is supported
+        try {
+            if (Charset.isSupported(charset)) {
+                // If charset matches "utf-8" (case insensitive), return lower case
+                if (charset.equalsIgnoreCase("utf-8"))
+                    return "utf-8";
+                else
+                    return Charset.forName(charset).name();
+            }
+        } catch (IllegalCharsetNameException e) {
+            // unsupported or invalid charset
+            return null;
+        }
     }
     return null;
 }
\ No newline at end of file
