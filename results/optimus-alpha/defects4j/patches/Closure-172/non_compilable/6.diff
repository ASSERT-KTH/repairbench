diff --git a/tmp/189c6d88-d08d-46bf-a74a-417b19d102b0_buggy.java b/tmp/310a0213-4b9a-40ef-828a-a4f43be908e2_fixed.java
index 7b89a27..ab92e00 100644
--- a/tmp/189c6d88-d08d-46bf-a74a-417b19d102b0_buggy.java
+++ b/tmp/310a0213-4b9a-40ef-828a-a4f43be908e2_fixed.java
@@ -1,76 +1,66 @@
-    /**
-     * Determines whether a qualified name is inferred.
-     * NOTE(nicksantos): Determining whether a property is declared or not
-     * is really really obnoxious.
-     *
-     * The problem is that there are two (equally valid) coding styles:
-     *
-     * (function() {
-     *   /* The authoritative definition of goog.bar. /
-     *   goog.bar = function() {};
-     * })();
-     *
-     * function f() {
-     *   goog.bar();
-     *   /* Reset goog.bar to a no-op. /
-     *   goog.bar = function() {};
-     * }
-     *
-     * In a dynamic language with first-class functions, it's very difficult
-     * to know which one the user intended without looking at lots of
-     * contextual information (the second example demonstrates a small case
-     * of this, but there are some really pathological cases as well).
-     *
-     * The current algorithm checks if either the declaration has
-     * JsDoc type information, or @const with a known type,
-     * or a function literal with a name we haven't seen before.
-     */
 private boolean isQualifiedNameInferred(
     String qName, Node n, JSDocInfo info,
     Node rhsValue, JSType valueType) {
   if (valueType == null) {
     return true;
   }
 
-      // Prototypes of constructors and interfaces are always declared.
+  // Prototypes of constructors and interfaces are always declared,
+  // EXCEPT when the prototype is a property of a parameter (e.g. a.prototype)
   if (qName != null && qName.endsWith(".prototype")) {
+    // Check if the base of the prototype property is a parameter.
+    Node lhs = n.getFirstChild();
+    if (lhs != null && lhs.isGetProp()) {
+      Node base = lhs.getFirstChild();
+      // If the base is a name and that name is a parameter of the current function
+      Node fn = NodeUtil.getEnclosingFunction(n);
+      if (fn != null && (NodeUtil.isFunctionDeclaration(fn) || NodeUtil.isFunctionExpression(fn))) {
+        Node paramList = fn.getSecondChild();
+        for (Node param = paramList.getFirstChild(); param != null; param = param.getNext()) {
+          if (base.isName() && param.isName() && base.getString().equals(param.getString())) {
+            // This is a.prototype for parameter 'a'; treat as inferred
+            return true;
+          }
+        }
+      }
+    }
     return false;
   }
 
   boolean inferred = true;
   if (info != null) {
     inferred = !(info.hasType()
         || info.hasEnumParameterType()
         || (isConstantSymbol(info, n) && valueType != null
             && !valueType.isUnknownType())
         || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
   }
 
   if (inferred && rhsValue != null && rhsValue.isFunction()) {
     if (info != null) {
       return false;
     } else if (!scope.isDeclared(qName, false) &&
         n.isUnscopedQualifiedName()) {
 
       // Check if this is in a conditional block.
       // Functions assigned in conditional blocks are inferred.
       for (Node current = n.getParent();
            !(current.isScript() || current.isFunction());
            current = current.getParent()) {
         if (NodeUtil.isControlStructure(current)) {
           return true;
         }
       }
 
       // Check if this is assigned in an inner scope.
       // Functions assigned in inner scopes are inferred.
       AstFunctionContents contents =
           getFunctionAnalysisResults(scope.getRootNode());
       if (contents == null ||
           !contents.getEscapedQualifiedNames().contains(qName)) {
         return false;
       }
     }
   }
   return inferred;
 }
\ No newline at end of file
