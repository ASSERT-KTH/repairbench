diff --git a/tmp/d40cbc9a-1b82-4dd6-bf89-2031c443f257_buggy.java b/tmp/b817b428-6280-4e61-aee2-6d7925e3adf3_fixed.java
index 5abdeb5..1b1dbd3 100644
--- a/tmp/d40cbc9a-1b82-4dd6-bf89-2031c443f257_buggy.java
+++ b/tmp/b817b428-6280-4e61-aee2-6d7925e3adf3_fixed.java
@@ -1,29 +1,30 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
         // We make a special exception when the entire cfgNode is a chain
         // of assignments, since in that case the assignment statements
         // will happen after the inlining of the right hand side.
         // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
         //   and remove this special case.
           !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+           (parent.getFirstChild() == n) &&
+           parent == cfgNode)) {
           // Don't count lhs of top-level assignment chain
           numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
