diff --git a/tmp/6f8e322b-0228-4ed2-8531-e1dc535c8103_buggy.java b/tmp/9406c7c9-b70a-42b7-81ba-f1f5dfac33a7_fixed.java
index 5abdeb5..d2643b2 100644
--- a/tmp/6f8e322b-0228-4ed2-8531-e1dc535c8103_buggy.java
+++ b/tmp/9406c7c9-b70a-42b7-81ba-f1f5dfac33a7_fixed.java
@@ -1,29 +1,40 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+          if (n.isName() && n.getString().equals(varName)) {
             // Don't count lhs of top-level assignment chain
+            if (!(parent.isAssign() &&
+                 (parent.getFirstChild() == n) &&
+                 isTopLevelAssignInCfgNode(cfgNode, parent))) {
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
+
+    /**
+     * Returns true if the given assign node is a top-level statement in cfgNode.
+     */
+    private boolean isTopLevelAssignInCfgNode(Node cfgNode, Node assignNode) {
+      // Check if assignNode is directly under cfgNode and is an EXPR_RESULT statement
+      Node current = assignNode;
+      Node parent = assignNode.getParent();
+      while (parent != null && parent != cfgNode) {
+        current = parent;
+        parent = parent.getParent();
+      }
+      return parent == cfgNode && current.isExprResult();
+    }
\ No newline at end of file
