diff --git a/tmp/04c80dfd-867b-4212-ad3e-0b244af21a30_buggy.java b/tmp/a81c47e4-778e-4cc5-b3ad-3f8f1505bd08_fixed.java
index ad7255c..1cb0487 100644
--- a/tmp/04c80dfd-867b-4212-ad3e-0b244af21a30_buggy.java
+++ b/tmp/a81c47e4-778e-4cc5-b3ad-3f8f1505bd08_fixed.java
@@ -1,42 +1,51 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
 public static boolean equal(GeneralPath p1, GeneralPath p2) {
     if (p1 == null) {
         return (p2 == null);
     }
     if (p2 == null) {
         return false;
     }
     if (p1.getWindingRule() != p2.getWindingRule()) {
         return false;
     }
     PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+    PathIterator iterator2 = p2.getPathIterator(null);
     double[] d1 = new double[6];
     double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
-                return false;
-            }
+    while (!iterator1.isDone() && !iterator2.isDone()) {
         int seg1 = iterator1.currentSegment(d1);
         int seg2 = iterator2.currentSegment(d2);
         if (seg1 != seg2) {
             return false;
         }
-            if (!Arrays.equals(d1, d2)) {
+        int coords;
+        // The number of coordinates depends on the segment type
+        switch (seg1) {
+            case PathIterator.SEG_MOVETO:
+            case PathIterator.SEG_LINETO:
+                coords = 2;
+                break;
+            case PathIterator.SEG_QUADTO:
+                coords = 4;
+                break;
+            case PathIterator.SEG_CUBICTO:
+                coords = 6;
+                break;
+            case PathIterator.SEG_CLOSE:
+                coords = 0;
+                break;
+            default:
+                // Unrecognized segment
                 return false;
         }
+        for (int i = 0; i < coords; i++) {
+            if (Double.compare(d1[i], d2[i]) != 0) {
+                return false;
+            }
+        }
         iterator1.next();
         iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
     }
-        return true;
+    // Both should be done at the same time
+    return iterator1.isDone() && iterator2.isDone();
 }
\ No newline at end of file
