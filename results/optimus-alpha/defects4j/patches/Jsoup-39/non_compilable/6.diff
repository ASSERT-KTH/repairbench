diff --git a/tmp/59b4b61c-e98a-4fed-983e-433281cb1460_buggy.java b/tmp/dd917401-c0d3-4391-bb4b-11118394e60b_fixed.java
index c4b260c..0cc8e3f 100644
--- a/tmp/59b4b61c-e98a-4fed-983e-433281cb1460_buggy.java
+++ b/tmp/dd917401-c0d3-4391-bb4b-11118394e60b_fixed.java
@@ -1,51 +1,71 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    boolean hasBOM = false;
+
+    // Helper to decode the ByteBuffer using the specified charset
+    java.util.function.Function<String, String> decode = (charset) -> {
+        byteData.rewind();
+        String decoded = Charset.forName(charset).decode(byteData).toString();
+        return decoded;
+    };
+
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = decode.apply(defaultCharset);
+
+        // Check for BOM (U+FEFF)
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            hasBOM = true;
+            docData = docData.substring(1);
+        }
+
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
-                } else {
+            } else if (meta.hasAttr("charset")) {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                docData = decode.apply(foundCharset);
+
+                if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                    hasBOM = true;
+                    docData = docData.substring(1);
+                } else {
+                    hasBOM = false;
                 }
+
+                doc = parser.parseInput(docData, baseUri);
+            }
+        }
+        if (charsetName == null) {
+            charsetName = defaultCharset;
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = decode.apply(charsetName);
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            hasBOM = true;
             docData = docData.substring(1);
-            charsetName = defaultCharset;
         }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+    }
+
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
\ No newline at end of file
