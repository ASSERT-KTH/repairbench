diff --git a/tmp/4f6e04de-f89e-441d-82cf-1c39c797133a_buggy.java b/tmp/7e455a69-66f6-4e87-af26-eafe7ea2255f_fixed.java
index c4b260c..4148529 100644
--- a/tmp/4f6e04de-f89e-441d-82cf-1c39c797133a_buggy.java
+++ b/tmp/7e455a69-66f6-4e87-af26-eafe7ea2255f_fixed.java
@@ -1,51 +1,68 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    boolean bomHandled = false;
+
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+        // Check and remove BOM if present
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            docData = docData.substring(1);
+            bomHandled = true;
+        }
+
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
+
+                // Remove BOM for foundCharset as well if present
+                if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                    docData = docData.substring(1);
+                    bomHandled = true;
+                }
+
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+
+        // Check and remove BOM if present
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
+            bomHandled = true;
         }
+    }
+
+    // No need to do BOM handling again here as it's handled during initial decoding
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
