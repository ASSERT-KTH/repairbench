diff --git a/tmp/ea31614c-7b79-43cd-a26d-44017dc984e1_buggy.java b/tmp/d998bf27-c2d0-437b-9c65-885ccd8278fd_fixed.java
index c4b260c..4b6e042 100644
--- a/tmp/ea31614c-7b79-43cd-a26d-44017dc984e1_buggy.java
+++ b/tmp/d998bf27-c2d0-437b-9c65-885ccd8278fd_fixed.java
@@ -1,51 +1,63 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+        // Remove UTF-8 BOM at the very start, before ever parsing
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            docData = docData.substring(1);
+        }
+
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+
+                // Remove BOM if present after re-decoding with new charset
+                if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                    docData = docData.substring(1);
+                }
+
+                doc = parser.parseInput(docData, baseUri);
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+
+        // Remove UTF-8 BOM at the very start, before ever parsing
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
+        }
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
     }
+    doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     return doc;
 }
\ No newline at end of file
