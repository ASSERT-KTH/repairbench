diff --git a/tmp/1ff94777-2381-4838-85ae-b9ed7e41a28b_buggy.java b/tmp/0f389fb1-c52b-4875-bb27-ea4efef79e82_fixed.java
index 9d42346..1dc5f5d 100644
--- a/tmp/1ff94777-2381-4838-85ae-b9ed7e41a28b_buggy.java
+++ b/tmp/0f389fb1-c52b-4875-bb27-ea4efef79e82_fixed.java
@@ -1,37 +1,58 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        if (jsonAdapterPresent) {
           t.write(writer, fieldValue);
+        } else {
+          // For primitives, ensure they are serialized as primitives
+          if (fieldValue == null && isPrimitive) {
+            // Write default value for primitive types
+            Class<?> type = fieldType.getRawType();
+            if (type == boolean.class) {
+              writer.value(false);
+            } else if (type == byte.class || type == short.class || type == int.class
+                || type == long.class) {
+              writer.value(0L);
+            } else if (type == float.class || type == double.class) {
+              writer.value(0.0);
+            } else if (type == char.class) {
+              writer.value('\u0000');
+            } else {
+              writer.nullValue();
+            }
+          } else {
+            t.write(writer, fieldValue);
+          }
+        }
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
