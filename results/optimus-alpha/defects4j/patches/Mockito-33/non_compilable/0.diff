diff --git a/tmp/41cc293f-872a-41ea-90b5-d5e209cbddec_buggy.java b/tmp/08417c67-86ad-4a30-ab8c-e13ae5d33dc3_fixed.java
index e1fc51f..1773653 100644
--- a/tmp/41cc293f-872a-41ea-90b5-d5e209cbddec_buggy.java
+++ b/tmp/08417c67-86ad-4a30-ab8c-e13ae5d33dc3_fixed.java
@@ -1,9 +1,23 @@
 public boolean hasSameMethod(Invocation candidate) {        
     // not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
+    // sometimes java generates forwarding methods when generics are in play, see JavaGenericsForwardingMethodsTest
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    // Two methods are considered equivalent if they have the same name and parameter types and declaring class is assignable from one another
+    if (m1.equals(m2)) {
+        return true;
+    }
+    if (m1.getName().equals(m2.getName())) {
+        Class<?>[] paramTypes1 = m1.getParameterTypes();
+        Class<?>[] paramTypes2 = m2.getParameterTypes();
+        if (Arrays.equals(paramTypes1, paramTypes2)) {
+            // Accept if one method is declared in a superclass/interface of the other method's declaring class
+            if (m1.getDeclaringClass().isAssignableFrom(m2.getDeclaringClass()) ||
+                m2.getDeclaringClass().isAssignableFrom(m1.getDeclaringClass())) {
+                return true;
+            }
+        }
+    }
+    return false;
 }
\ No newline at end of file
