diff --git a/tmp/58b32859-55f1-40da-a85b-d1c8f071c735_buggy.java b/tmp/b3d28523-d3b9-46f4-a624-dc9a5ffab5ab_fixed.java
index e1fc51f..6db7008 100644
--- a/tmp/58b32859-55f1-40da-a85b-d1c8f071c735_buggy.java
+++ b/tmp/b3d28523-d3b9-46f4-a624-dc9a5ffab5ab_fixed.java
@@ -1,9 +1,38 @@
 public boolean hasSameMethod(Invocation candidate) {        
     // not using method.equals() for 1 good reason:
     // sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    if (m1.equals(m2)) {
+        return true;
+    }
+
+    // Match on declaring class compatibility, name, and parameter types
+    if (m1.getName().equals(m2.getName())) {
+        Class<?>[] params1 = m1.getParameterTypes();
+        Class<?>[] params2 = m2.getParameterTypes();
+
+        if (params1.length == params2.length) {
+            boolean paramsMatch = true;
+            for (int i = 0; i < params1.length; i++) {
+                if (!params1[i].equals(params2[i])) {
+                    paramsMatch = false;
+                    break;
+                }
+            }
+            if (paramsMatch) {
+                // Allow forwarders: if one is a bridge and the other is not, but they otherwise match
+                if (m1.isBridge() || m2.isBridge()) {
+                    return true;
+                }
+                // Also match if one is a method override of the other
+                if (m1.getDeclaringClass().isAssignableFrom(m2.getDeclaringClass())
+                        || m2.getDeclaringClass().isAssignableFrom(m1.getDeclaringClass())) {
+                    return true;
+                }
+            }
+        }
+    }
+    return false;
 }
\ No newline at end of file
