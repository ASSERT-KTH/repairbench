diff --git a/tmp/632a9ae2-d8c5-4eae-804d-917c54675d02_buggy.java b/tmp/983542e2-a56e-46c0-9708-b453adfdf8cd_fixed.java
index 72a422c..c8b439d 100644
--- a/tmp/632a9ae2-d8c5-4eae-804d-917c54675d02_buggy.java
+++ b/tmp/983542e2-a56e-46c0-9708-b453adfdf8cd_fixed.java
@@ -1,51 +1,84 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
+        if (start >= seqEnd) {
+            // Nothing after '&#', so not a valid numeric entity
+            return 0;
+        }
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
 
-                // Check there's more than just an x after the &#
+            // Check if we have at least one digit after x/X
+            if (start >= seqEnd) {
+                // Nothing after '&#x' or '&#X', so not a valid numeric entity
+                return 0;
+            }
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Only collect hex or decimal digits, stop on ';' or non-digit
+        while (end < seqEnd) {
+            char c = input.charAt(end);
+            if (c == ';') {
+                break;
+            }
+            if (isHex) {
+                if ( (c >= '0' && c <= '9') ||
+                     (c >= 'a' && c <= 'f') ||
+                     (c >= 'A' && c <= 'F')) {
                     end++;
+                } else {
+                    break;
+                }
+            } else {
+                if (c >= '0' && c <= '9') {
+                    end++;
+                } else {
+                    break;
+                }
+            }
+        }
+
+        // Have to have at least one digit
+        if (end == start) {
+            return 0;
         }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String entityDigits = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(entityDigits, isHex ? 16 : 10);
         } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Compute total entity length:
+        // "&" + "#" + (possibly "x" or "X") + digits + optional ";"
+        int consumed = 2 + (isHex ? 1 : 0) + (end - start);
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed += 1;
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
