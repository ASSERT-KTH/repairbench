diff --git a/tmp/c5a24f05-f6dc-4f40-bc54-f569d3381424_buggy.java b/tmp/0d86adbe-c0cc-44e7-ae1d-9f6e4f472dbe_fixed.java
index 72a422c..e78bca8 100644
--- a/tmp/c5a24f05-f6dc-4f40-bc54-f569d3381424_buggy.java
+++ b/tmp/0d86adbe-c0cc-44e7-ae1d-9f6e4f472dbe_fixed.java
@@ -1,51 +1,67 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // Check if there are still characters after '&#'
+        if (start >= seqEnd) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
 
             // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Search for ';', or end of input
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
+        boolean semicolonFound = (end < seqEnd && input.charAt(end) == ';');
+
+        // If nothing was found between start and end, ignore it
+        if (start == end) {
+            return 0;
+        }
 
         int entityValue;
         try {
+            String entity = input.subSequence(start, end).toString();
             if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(entity, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(entity, 10);
             }
         } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            // Parsing failed: not a valid number
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Compute how many characters were processed:
+        // 2 for '&#', plus (end - start) for digits, plus possibly one for 'x', plus one if semicolon found
+        int consumed = end - index + (semicolonFound ? 1 : 0);
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
