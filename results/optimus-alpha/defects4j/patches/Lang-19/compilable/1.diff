diff --git a/tmp/4e8b6e44-7092-4a28-8432-93145a560631_buggy.java b/tmp/ec0dc7e8-cd18-40a1-b66e-d5e38265e367_fixed.java
index 72a422c..8fcd0bc 100644
--- a/tmp/4e8b6e44-7092-4a28-8432-93145a560631_buggy.java
+++ b/tmp/ec0dc7e8-cd18-40a1-b66e-d5e38265e367_fixed.java
@@ -1,51 +1,73 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // Check there is a character after the &#
+        if (start >= seqEnd) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
             // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                return 0; // No digits after x/X
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Note: find end of number, which is either ';' or the end of string or when the current char is not a valid number
+        // We'll allow the semi-colon to be optional
+        while (end < seqEnd && input.charAt(end) != ';') {
+            char ch = input.charAt(end);
+            if (isHex) {
+                if (!((ch >= '0' && ch <= '9') || 
+                      (ch >= 'a' && ch <= 'f') ||
+                      (ch >= 'A' && ch <= 'F'))) {
+                    break;
+                }
+            } else {
+                if (!(ch >= '0' && ch <= '9')) {
+                    break;
+                }
+            }
             end++;
         }
 
+        // Need at least one digit
+        if (end == start) {
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Calculate consumed: 
+        // 2 for &#, (end - start) for the digits, (isHex ? 1 for x/X), +1 if ';'
+        int consumed = 2 + (end - (index + 2)) + (isHex ? 1 : 0);
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed += 1;
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
