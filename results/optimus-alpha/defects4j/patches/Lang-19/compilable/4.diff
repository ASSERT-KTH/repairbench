diff --git a/tmp/a0272bd5-732b-493f-a137-03fdac23151b_buggy.java b/tmp/c6f02f0b-7a92-4003-ab72-ba3514752cbc_fixed.java
index 72a422c..ebc69f2 100644
--- a/tmp/a0272bd5-732b-493f-a137-03fdac23151b_buggy.java
+++ b/tmp/c6f02f0b-7a92-4003-ab72-ba3514752cbc_fixed.java
@@ -1,51 +1,64 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if(start >= seqEnd) {
+            // &# at end of input
+            return 0;
+        }
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
 
-                // Check there's more than just an x after the &#
+            if(start >= seqEnd) {
+                // &#x at end of input
+                return 0;
+            }
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
-
+        boolean hasSemi = (end < seqEnd && input.charAt(end) == ';');
+        // The numeric value is between start and end (end may be seqEnd if no semicolon)
+        // Only parse if there's at least one digit
+        if (start == end) {
+            // No digits present
+            return 0;
+        }
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String number = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            // Invalid number
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // compute consumed length: "&" + "#" + optional ('x'|'X') + digits + optional ';'
+        int consumed = 2; // &#
+        if (isHex) consumed++; // x
+        consumed += (end - start);
+        if (hasSemi) consumed++;
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
