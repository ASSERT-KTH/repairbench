diff --git a/tmp/4ca0736b-942a-43f3-8523-18acc76ca229_buggy.java b/tmp/941d1c8e-e4cc-496c-a0d6-00d1bf46fc38_fixed.java
index 72a422c..acd6981 100644
--- a/tmp/4ca0736b-942a-43f3-8523-18acc76ca229_buggy.java
+++ b/tmp/941d1c8e-e4cc-496c-a0d6-00d1bf46fc38_fixed.java
@@ -1,51 +1,69 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) {
+            // No characters after "&#"
+            return 0;
+        }
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
 
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                // No digits after "&#x"
+                return 0;
+            }
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        // If we stopped because we ran out of input, allow an unfinished entity (missing ';')
+        // end is now either seqEnd (past end), or the index of ';'
+        // But: input.subSequence(start, end) must be safe even if ; missing
+        if (end == start) {
+            // No digits after '&#' or '&#x'
+            return 0;
+        }
+
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // calculate consumed chars: 2 for '&#', (end-start) for digits, 1 if hex ('x'), 1 if ended with ';'
+        int consumed = (end - index);
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed++; // to consume the ';'
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
