diff --git a/tmp/e52b401a-5c55-49a5-898c-c19ce39552a2_buggy.java b/tmp/5a7777ba-c796-47c5-aa97-d089fb40144d_fixed.java
index 72a422c..d4174ac 100644
--- a/tmp/e52b401a-5c55-49a5-898c-c19ce39552a2_buggy.java
+++ b/tmp/5a7777ba-c796-47c5-aa97-d089fb40144d_fixed.java
@@ -1,51 +1,66 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) {
+            // Nothing after &#
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                // Only '&#x' - incomplete
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Find the end of the number
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        // If ';' was found, end points to it, otherwise it is seqEnd (past-the-end)
+
+        // At this point, if there's nothing between start and end, it's invalid
+        if (start == end) {
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String entity = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(entity, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            // Invalid number
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Number of consumed characters:
+        // 2 - for "&#"
+        // (isHex ? 1 : 0) - for 'x' or 'X' if present
+        // (end - start) - for the number
+        // (end < seqEnd && input.charAt(end) == ';' ? 1 : 0) - for the semicolon, if present
+        int consumed = 2 + (isHex ? 1 : 0) + (end - start);
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed += 1;
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
