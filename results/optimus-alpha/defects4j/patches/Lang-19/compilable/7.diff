diff --git a/tmp/bd4dd7d5-c734-4c76-88b0-988a139109f8_buggy.java b/tmp/11d184cf-b28e-49bf-adb6-dc2c7b0643d3_fixed.java
index 72a422c..0dec6cd 100644
--- a/tmp/bd4dd7d5-c734-4c76-88b0-988a139109f8_buggy.java
+++ b/tmp/11d184cf-b28e-49bf-adb6-dc2c7b0643d3_fixed.java
@@ -1,51 +1,73 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // Check if we have enough characters after '&#'
+        if (start >= seqEnd) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
             // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                return 0;
+            }
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Find the end position (either ';' or end of string, or non-valid char)
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        // If we reached ';' within bounds, parse up to end (exclusive), else up to the end of string
+        int parseEnd = (end < seqEnd && input.charAt(end) == ';') ? end : end;
+
+        // There must be at least one digit
+        if (parseEnd == start) {
+            return 0;
+        }
+
         int entityValue;
         try {
+            String number = input.subSequence(start, parseEnd).toString();
             if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(number, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(number, 10);
             }
         } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            // System.err.println("FAIL: " + input.subSequence(start, parseEnd) + "[" + start +"]["+ parseEnd +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Compute how many characters we consumed
+        // 2 for '&#', then (parseEnd - start) digits,
+        // + (isHex?1:0) if parsed x/X, +1 if ended with ';'
+        int consumed = 2 + (parseEnd - (index + 2)) + (isHex ? 1 : 0);
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed++; // for the ';'
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
