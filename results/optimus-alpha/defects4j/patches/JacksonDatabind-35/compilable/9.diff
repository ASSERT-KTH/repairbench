diff --git a/tmp/e4cf4651-4e9c-4359-abb2-ba7828dcca02_buggy.java b/tmp/8d830588-f260-4870-be4b-c2c18e712282_fixed.java
index 7d8d756..0535135 100644
--- a/tmp/e4cf4651-4e9c-4359-abb2-ba7828dcca02_buggy.java
+++ b/tmp/8d830588-f260-4870-be4b-c2c18e712282_fixed.java
@@ -1,48 +1,57 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
+    // Accept FIELD_NAME for cases like object ids, where wrapper type may be missing from second occurrence
+    JsonToken t = p.getCurrentToken();
+    if (t == JsonToken.START_OBJECT) {
         // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+        t = p.nextToken();
+        if (t != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
+    } else if (t == JsonToken.FIELD_NAME) {
+        // allowed when objectId handling is involved
+        // nothing special, continue
+    } else {
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+    }
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
     p.nextToken();
 
     // Minor complication: we may need to merge type id in?
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
         // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
         tb.writeStartObject(); // recreate START_OBJECT
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
     
     Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+    // And then need the closing END_OBJECT, but only if we started at START_OBJECT
+    if (t == JsonToken.FIELD_NAME || t == JsonToken.START_OBJECT) {
+        // If START_OBJECT was used, expect END_OBJECT
+        JsonToken next = p.getCurrentToken();
+        // Gather to next token if not yet DONE (so Object Ids work)
+        if (next == null) {
+            next = p.nextToken();
+        }
+        if (next != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
+    }
     return value;
 }
\ No newline at end of file
