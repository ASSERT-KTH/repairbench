diff --git a/tmp/8ed00a1a-7e89-4c0f-a858-cf81e9c2f3c5_buggy.java b/tmp/a12a2082-8cad-4624-847d-c65e21e64d1e_fixed.java
index 7d8d756..a1a02ce 100644
--- a/tmp/8ed00a1a-7e89-4c0f-a858-cf81e9c2f3c5_buggy.java
+++ b/tmp/a12a2082-8cad-4624-847d-c65e21e64d1e_fixed.java
@@ -1,48 +1,69 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
     // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
+    JsonToken t = p.getCurrentToken();
+    if (t == JsonToken.START_OBJECT) {
         // should always get field name, but just in case...
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
+    } else if (t == JsonToken.FIELD_NAME) {
+        // Accept FIELD_NAME (unwrapped) if inside an object, as Object Id deserialization may do this
+        final String typeId = p.getText();
+        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+        p.nextToken();
+        
+        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+            TokenBuffer tb = new TokenBuffer(null, false);
+            tb.writeStartObject();
+            tb.writeFieldName(_typePropertyName);
+            tb.writeString(typeId);
+            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
+            p.nextToken();
+        }
+
+        Object value = deser.deserialize(p, ctxt);
+        // We may already be at END_OBJECT, or need to move to it
+        JsonToken nextToken = p.getCurrentToken();
+        if (nextToken == JsonToken.END_OBJECT) {
+            // all good
+        } else if (p.nextToken() != JsonToken.END_OBJECT) {
+            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
+                    "expected closing END_OBJECT after type information and deserialized value");
+        }
+        return value;
+    }
+    throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+            "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
 }
\ No newline at end of file
