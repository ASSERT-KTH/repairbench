diff --git a/tmp/4ee87ab8-2044-43fb-b3da-ccb377c70954_buggy.java b/tmp/ce17f4f3-6426-4021-988f-7dcf7466f32d_fixed.java
index 7d8d756..11f23a5 100644
--- a/tmp/4ee87ab8-2044-43fb-b3da-ccb377c70954_buggy.java
+++ b/tmp/ce17f4f3-6426-4021-988f-7dcf7466f32d_fixed.java
@@ -1,48 +1,50 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
+
+    // Accept FIELD_NAME when supporting Object Ids: objects may be returned from objectIdReference
+    JsonToken t = p.getCurrentToken();
+    if (t == JsonToken.START_OBJECT) {
         // should always get field name, but just in case...
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
+    } else if (t != JsonToken.FIELD_NAME) {
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+    }
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
     p.nextToken();
 
     // Minor complication: we may need to merge type id in?
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
         // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
         tb.writeStartObject(); // recreate START_OBJECT
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
 
     Object value = deser.deserialize(p, ctxt);
     // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+    // Need to handle two cases: called after START_OBJECT or directly from FIELD_NAME
+    // So after deserializer, next should be either END_OBJECT (was START_OBJECT before), or nothing
+    if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+        // ok, already at END_OBJECT
+    } else if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
