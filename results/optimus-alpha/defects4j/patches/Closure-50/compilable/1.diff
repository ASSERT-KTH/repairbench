diff --git a/tmp/495fda1d-b53e-4fda-803c-90fbd51408fb_buggy.java b/tmp/f90b46d4-ddbf-4323-91b7-2d7d3b43e757_fixed.java
index d8b0158..a4cdf3a 100644
--- a/tmp/495fda1d-b53e-4fda-803c-90fbd51408fb_buggy.java
+++ b/tmp/f90b46d4-ddbf-4323-91b7-2d7d3b43e757_fixed.java
@@ -1,113 +1,140 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
   Node callTarget = n.getFirstChild();
 
   if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
     return n;
   }
 
+  // Check for exactly one argument (the separator)
   Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+  if (n.getChildCount() > 2) {
+    // More than one argument to join, do not fold
     return n;
   }
+  if (right != null && !NodeUtil.isImmutableValue(right)) {
+    return n;
   }
 
   Node arrayNode = callTarget.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return n;
   }
 
   // "," is the default, it doesn't need to be explicit
-
   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = null;
   int foldedSize = 0;
   Node prev = null;
   Node elem = arrayNode.getFirstChild();
   // Merges adjacent String nodes.
+  boolean allImmutable = true;
+  int totalElems = 0;
   while (elem != null) {
+    totalElems++;
     if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
       if (sb == null) {
         sb = new StringBuilder();
       } else {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getArrayElementStringValue(elem));
     } else {
+      allImmutable = false;
       if (sb != null) {
         Preconditions.checkNotNull(prev);
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(
             Node.newString(sb.toString()).copyInformationFrom(prev));
         sb = null;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     prev = elem;
     elem = elem.getNext();
   }
 
   if (sb != null) {
     Preconditions.checkNotNull(prev);
     // + 2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(
         Node.newString(sb.toString()).copyInformationFrom(prev));
   }
   // one for each comma.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
+
+  // Special: If all array elements are immutable, just fold to one string
+  if (allImmutable) {
+    StringBuilder allSb = new StringBuilder();
+    Node curElem = arrayNode.getFirstChild();
+    boolean first = true;
+    while (curElem != null) {
+      if (!first) {
+        allSb.append(joinString);
+      }
+      allSb.append(NodeUtil.getArrayElementStringValue(curElem));
+      first = false;
+      curElem = curElem.getNext();
+    }
+    Node resultNode = Node.newString(allSb.toString()).copyInformationFrom(n);
+    n.getParent().replaceChild(n, resultNode);
+    reportCodeChange();
+    return resultNode;
+  }
+
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       n.getParent().replaceChild(n, emptyStringNode);
       reportCodeChange();
       return emptyStringNode;
     case 1:
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return n;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
         // If the Node is not a string literal, ensure that
         // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString("").copyInformationFrom(n),
             foldedStringNode);
         foldedStringNode = replacement;
       }
       n.getParent().replaceChild(n, foldedStringNode);
       reportCodeChange();
       return foldedStringNode;
     default:
       // No folding could actually be performed.
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return n;
       }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
       if (foldedSize > originalSize) {
         return n;
       }
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
       reportCodeChange();
       break;
   }
 
   return n;
 }
\ No newline at end of file
