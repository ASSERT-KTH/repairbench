diff --git a/tmp/233ec540-0e23-4977-8a97-e2275ed46a39_buggy.java b/tmp/1f522dfe-f042-4c29-bcf3-ecfe0dbf2883_fixed.java
index 81a6e8b..ef134e8 100644
--- a/tmp/233ec540-0e23-4977-8a97-e2275ed46a39_buggy.java
+++ b/tmp/1f522dfe-f042-4c29-bcf3-ecfe0dbf2883_fixed.java
@@ -1,19 +1,35 @@
 /**
  * Tells if the token looks like a short option.
  * 
  * @param token
  */
 private boolean isShortOption(String token)
 {
     // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        if (!token.startsWith("-") || token.length() == 1)
+    if (!token.startsWith("-") || token.length() == 1 || token.startsWith("--"))
     {
         return false;
     }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+    // remove leading "-"
+    String optStr = token.substring(1);
+
+    // if value is attached using "=", isolate option part
+    int eqIdx = optStr.indexOf('=');
+    String optsPart = eqIdx == -1 ? optStr : optStr.substring(0, eqIdx);
+
+    // Check if the entire part matches a known short option (e.g. "t1")
+    if (options.hasShortOption(optsPart)) {
+        return true;
+    }
+
+    // If not a known short option, treat as combined short options (e.g. "ab"->"a", "b")
+    // Only return true if all single-character segments are valid short options
+    for (int i = 0; i < optsPart.length(); i++) {
+        String s = String.valueOf(optsPart.charAt(i));
+        if (!options.hasShortOption(s)) {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
