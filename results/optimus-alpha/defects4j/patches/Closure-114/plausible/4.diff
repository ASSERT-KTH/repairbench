diff --git a/tmp/a7c06c6e-57b8-4ac5-adb7-edab83119025_buggy.java b/tmp/a61de39b-8f52-44d9-8c62-230962f03829_fixed.java
index c51c8b1..65caf92 100644
--- a/tmp/a7c06c6e-57b8-4ac5-adb7-edab83119025_buggy.java
+++ b/tmp/a61de39b-8f52-44d9-8c62-230962f03829_fixed.java
@@ -1,31 +1,36 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns != null) {
     if (parent.isFor() && !NodeUtil.isForIn(parent)) {
       // Patch for assignments that appear in the init,
       // condition or iteration part of a FOR loop.  Without
       // this change, all 3 of those parts try to claim the for
       // loop as their dependency scope.  The last assignment in
       // those three fields wins, which can result in incorrect
       // reference edges between referenced and assigned variables.
       //
       // TODO(user) revisit the dependency scope calculation
       // logic.
       if (parent.getFirstChild().getNext() != n) {
         recordDepScope(recordNode, ns);
       } else {
         recordDepScope(nameNode, ns);
       }
     } else {
       // The rhs of the assignment is the caller, so it's used by the
       // context. Don't associate it w/ the lhs.
       // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
+      // DIRECT callee of a call, i.e., where the assignment node is the first child of CALL.
+      // If nested deeper, we would still get a bug.
       // See testAssignWithCall2 for an example of this.
+      Node grandParent = parent.getParent();
+      if (parent.isCall() && parent.getFirstChild() == n) {
+        recordDepScope(nameNode, ns);
+      } else {
         recordDepScope(recordNode, ns);
       }
     }
   }
+}
\ No newline at end of file
