diff --git a/tmp/89a2ca51-68e6-4960-9d3b-2bf0d381bb18_buggy.java b/tmp/e97d079d-8c07-4e25-9e3c-eb25487a1fc0_fixed.java
index fb2b020..62fa3db 100644
--- a/tmp/89a2ca51-68e6-4960-9d3b-2bf0d381bb18_buggy.java
+++ b/tmp/e97d079d-8c07-4e25-9e3c-eb25487a1fc0_fixed.java
@@ -1,27 +1,27 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
+  if (!isAnonymous()) {
+    return;
+  }
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+        if (!hasOwnProperty(prop)) {
+          // Only infer inexistent properties or properties that we "own"
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
+        } else {
+          // Don't infer a new type for inherited properties since
+          // these may be misleading (see issue 700)
+          continue;
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
