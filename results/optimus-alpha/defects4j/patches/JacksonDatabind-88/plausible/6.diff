diff --git a/tmp/fb4b950d-25fd-481f-8044-b932e01c9b01_buggy.java b/tmp/f53f56cb-2ecb-4859-9082-3608bbde2257_fixed.java
index ae1f3a6..9d53004 100644
--- a/tmp/fb4b950d-25fd-481f-8044-b932e01c9b01_buggy.java
+++ b/tmp/f53f56cb-2ecb-4859-9082-3608bbde2257_fixed.java
@@ -1,34 +1,33 @@
 protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
 {
-        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
-         *    check if any generics info is added; and only then ask factory
-         *    to do translation when necessary
-         */
     TypeFactory tf = ctxt.getTypeFactory();
+    JavaType type;
     if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
-            JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
-            return t;
+        type = tf.constructFromCanonical(id);
+        // 17-Aug-2017, tatu: Ensure assignment compatibility -- needed later anyway, and not doing so may open security issues.
+        if (!_baseType.getRawClass().isAssignableFrom(type.getRawClass())) {
+            throw new IllegalArgumentException("Invalid type id '" + id + "' (for id type 'Id.class'): " +
+                "derived type (" + type + ") not subtype of base type (" + _baseType + ")");
+        }
+        return type;
     }
     Class<?> cls;
     try {
         cls = tf.findClass(id);
     } catch (ClassNotFoundException e) {
-            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
-            //   DeserializationContext, just playing it safe
         if (ctxt instanceof DeserializationContext) {
             DeserializationContext dctxt = (DeserializationContext) ctxt;
-                // First: we may have problem handlers that can deal with it?
             return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
         }
-            // ... meaning that we really should never get here.
         return null;
     } catch (Exception e) {
         throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
     }
-        return tf.constructSpecializedType(_baseType, cls);
+    type = tf.constructSpecializedType(_baseType, cls);
+    // Double-check for assignability, just in case
+    if (!_baseType.getRawClass().isAssignableFrom(type.getRawClass())) {
+        throw new IllegalArgumentException("Invalid type id '" + id + "' (for id type 'Id.class'): " +
+            "derived type (" + type + ") not subtype of base type (" + _baseType + ")");
+    }
+    return type;
 }
\ No newline at end of file
