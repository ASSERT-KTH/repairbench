diff --git a/tmp/d9903279-fcfd-4ef3-ab79-06d1ec5ccc40_buggy.java b/tmp/b817b8c1-bdda-472f-bac6-b64269069c74_fixed.java
index 6cfa79b..cac71f2 100644
--- a/tmp/d9903279-fcfd-4ef3-ab79-06d1ec5ccc40_buggy.java
+++ b/tmp/b817b8c1-bdda-472f-bac6-b64269069c74_fixed.java
@@ -1,12 +1,29 @@
     /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+     * For this distribution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+     * @return CDF evaluated at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        double dev = x - mean;
+        double sd = standardDeviation;
+        // For greater than 20 s.d. from mean, avoid computation, top code
+        if (dev < -20 * sd) {
+            return 0.0;
+        }
+        if (dev > 20 * sd) {
+            return 1.0;
+        }
+        try {
+            return 0.5 * (1.0 + Erf.erf(dev / (sd * Math.sqrt(2.0))));
+        } catch (MaxIterationsExceededException ex) {
+            // Top-code for extreme values
+            if (dev < 0) {
+                return 0.0;
+            } else {
+                return 1.0;
+            }
+        }
     }
\ No newline at end of file
