diff --git a/tmp/c67e59d2-a646-405a-a0f1-856de565cab6_buggy.java b/tmp/d9b84887-68c5-4266-855a-3aa8aeb1bfec_fixed.java
index 6cfa79b..3516e3b 100644
--- a/tmp/c67e59d2-a646-405a-a0f1-856de565cab6_buggy.java
+++ b/tmp/d9b84887-68c5-4266-855a-3aa8aeb1bfec_fixed.java
@@ -1,12 +1,32 @@
 /**
  * For this disbution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
  * @return CDF evaluted at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double dev = x - mean;
+    double sd = standardDeviation;
+    double ret;
+    try {
+        // if x is more than 20 stdev from mean, topcode the return
+        if (Math.abs(dev) > 20 * sd) {
+            if (dev < 0) {
+                ret = 0.0;
+            } else {
+                ret = 1.0;
+            }
+        } else {
+            ret = 0.5 * (1.0 + Erf.erf(dev / (sd * Math.sqrt(2.0))));
+        }
+    } catch (MaxIterationsExceededException ex) {
+        if (dev < 0) {
+            ret = 0.0;
+        } else {
+            ret = 1.0;
+        }
+    }
+    return ret;
 }
\ No newline at end of file
