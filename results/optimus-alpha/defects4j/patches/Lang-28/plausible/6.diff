diff --git a/tmp/ba213b89-a473-46ef-b04f-696364b91395_buggy.java b/tmp/ea164c13-adac-49f0-9ca6-038f8dc6c478_fixed.java
index 4bbd561..136dc60 100644
--- a/tmp/ba213b89-a473-46ef-b04f-696364b91395_buggy.java
+++ b/tmp/ea164c13-adac-49f0-9ca6-038f8dc6c478_fixed.java
@@ -1,37 +1,55 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
+    if (index < 0 || index + 2 > input.length()) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // avoid StringIndexOutOfBounds
+        if (start >= input.length())
+            return 0;
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if (start >= input.length())
+                return 0;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end == input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String number = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Correctly output supplementary characters as surrogate pairs
+        if (Character.isBmpCodePoint(entityValue)) {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        } else {
+            for (char c : Character.toChars(entityValue)) {
+                out.write(c);
+            }
+        }
+        // Return consumed length
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
