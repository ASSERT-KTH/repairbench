diff --git a/tmp/5cbf8084-8da5-4fe0-804b-d5a14a72d5d5_buggy.java b/tmp/fc6520e5-7eac-4d38-a01b-4450ece040f9_fixed.java
index 4bbd561..79d1e06 100644
--- a/tmp/5cbf8084-8da5-4fe0-804b-d5a14a72d5d5_buggy.java
+++ b/tmp/fc6520e5-7eac-4d38-a01b-4450ece040f9_fixed.java
@@ -1,37 +1,62 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Array bounds checks
+    int inputLen = input.length();
+    if(index < 0 || index + 2 > inputLen) {
+        return 0;
+    }
     if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= inputLen) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if (start >= inputLen) {
+                return 0;
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the semicolon; check bounds!
+        while (end < inputLen && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end == inputLen || input.charAt(end) != ';') {
+            // No semicolon found
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String number = input.subSequence(start, end).toString();
+            if (number.length() == 0) {
+                return 0;
             }
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Output the Unicode char(s), including supplementary
+        if (Character.isValidCodePoint(entityValue)) {
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars, 0, chars.length);
+        } else {
+            return 0;
+        }
+
+        // Number of characters translated: "&#", optional "x", number digits (end-start), ";"
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
