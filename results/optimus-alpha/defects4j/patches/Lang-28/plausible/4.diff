diff --git a/tmp/57b6fa44-7780-4e5b-86eb-0c281fcc6f22_buggy.java b/tmp/d7825243-302b-41a6-89cc-286b2ac03247_fixed.java
index 4bbd561..f9f84f4 100644
--- a/tmp/57b6fa44-7780-4e5b-86eb-0c281fcc6f22_buggy.java
+++ b/tmp/d7825243-302b-41a6-89cc-286b2ac03247_fixed.java
@@ -1,37 +1,57 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    int len = input.length();
+    if(index < 0 || index + 2 > len) {
+        return 0;
+    }
     if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= len) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if (start >= len) {
+                return 0;
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find next semicolon
+        while(end < len && input.charAt(end) != ';') {
             end++;
         }
+        if (end == len || input.charAt(end) != ';') {
+            return 0; // no terminating semicolon
+        }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String entityString = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(entityString, isHex ? 16 : 10);
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
+        // Output supplementary characters as surrogate pairs
+        if (entityValue > 0xFFFF) {
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars);
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+        // Calculate consumed length: "&#" [+ "x"] + digits + ";"
+        int consumed = end - index + 1;
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
