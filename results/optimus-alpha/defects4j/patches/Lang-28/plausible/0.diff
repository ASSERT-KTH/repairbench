diff --git a/tmp/5f96ace9-7e20-46c1-89f2-95e6a98a8de8_buggy.java b/tmp/df5679bf-feb3-4bc3-b3fb-efc63b77bc9c_fixed.java
index 4bbd561..a59d2ea 100644
--- a/tmp/5f96ace9-7e20-46c1-89f2-95e6a98a8de8_buggy.java
+++ b/tmp/df5679bf-feb3-4bc3-b3fb-efc63b77bc9c_fixed.java
@@ -1,37 +1,56 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    int inputLen = input.length();
+    if (index < 0 || index + 2 >= inputLen) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < inputLen) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the next ';', avoid ArrayIndexOutOfBounds
+        while (end < inputLen && input.charAt(end) != ';') {
             end++;
         }
+        // If no semi-colon, this is not a valid entity
+        if (end == inputLen || input.charAt(end) != ';') {
+            return 0;
+        }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String number = input.subSequence(start, end).toString();
+            if (number.isEmpty()) {
+                return 0;
             }
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Correctly handle supplementary code points
+        if (entityValue > 0xFFFF) {
+            // Write surrogate pair
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars[0]);
+            out.write(chars[1]);
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
