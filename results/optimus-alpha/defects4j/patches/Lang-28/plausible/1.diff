diff --git a/tmp/b9714ff1-7883-4b66-8ca2-b9798e5e3636_buggy.java b/tmp/06472edd-f70c-46e4-9dfe-a162f956f91e_fixed.java
index 4bbd561..587b9c7 100644
--- a/tmp/b9714ff1-7883-4b66-8ca2-b9798e5e3636_buggy.java
+++ b/tmp/06472edd-f70c-46e4-9dfe-a162f956f91e_fixed.java
@@ -1,37 +1,64 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    if(index + 2 >= input.length()) {
+        return 0;
+    }
     if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= input.length()) { // no digits present
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if (start >= input.length()) { // no digits after x
+                return 0;
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the end index, guard against range
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        if (end == input.length() || input.charAt(end) != ';') {
+            // no semicolon found
+            return 0;
+        }
 
         int entityValue;
         try {
+            String number = input.subSequence(start, end).toString();
+            if(number.length() == 0) {
+                return 0;
+            }
             if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(number, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(number, 10);
             }
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
+        // Write as UTF-16
+        if (entityValue > 0xFFFF) {
+            // Must be replaced with surrogate pair
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars[0]);
+            out.write(chars[1]);
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+        return (end - index) + 1; // include leading '&' and trailing ';'
     }
     return 0;
 }
\ No newline at end of file
