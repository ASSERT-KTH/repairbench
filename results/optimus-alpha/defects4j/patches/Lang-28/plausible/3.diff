diff --git a/tmp/3bdf8f58-f871-4a88-841c-d11e490c119f_buggy.java b/tmp/8b31c10a-0ff5-4ab3-9322-3801d926d981_fixed.java
index 4bbd561..bff6c15 100644
--- a/tmp/3bdf8f58-f871-4a88-841c-d11e490c119f_buggy.java
+++ b/tmp/8b31c10a-0ff5-4ab3-9322-3801d926d981_fixed.java
@@ -1,37 +1,55 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    int inputLength = input.length();
+    if(index >= inputLength) {
+        return 0;
+    }
+    if(input.charAt(index) == '&' && index + 1 < inputLength && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < inputLength) {
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < inputLength && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end == inputLength || input.charAt(end) != ';') {
+            // No terminating semicolon
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String value = input.subSequence(start, end).toString();
+            if (value.isEmpty()) { // Avoid NumberFormatException
+                return 0;
             }
+            entityValue = Integer.parseInt(value, isHex ? 16 : 10);
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
+        // Write codepoint correctly
+        if (Character.isBmpCodePoint(entityValue)) {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        } else {
+            // Write surrogate pair
+            out.write(Character.toChars(entityValue));
+        }
+
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
