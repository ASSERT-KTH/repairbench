diff --git a/tmp/c4e380ef-9d90-4954-8c78-d9f8eac2e484_buggy.java b/tmp/23abc676-397e-44cf-8cd9-6fcc2a45b131_fixed.java
index 4bbd561..a9f78ae 100644
--- a/tmp/c4e380ef-9d90-4954-8c78-d9f8eac2e484_buggy.java
+++ b/tmp/23abc676-397e-44cf-8cd9-6fcc2a45b131_fixed.java
@@ -1,37 +1,49 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    int inputLen = input.length();
+    if (index < inputLen - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+        if (start < inputLen && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the next ';'
+        while (end < inputLen && input.charAt(end) != ';') {
             end++;
         }
+        if (end == inputLen || input.charAt(end) != ';') {
+            // No ending ';'
+            return 0;
+        }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String number = input.subSequence(start, end).toString();
+            if (number.isEmpty()) {
+                return 0;
             }
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Write as UTF-16, support supplementary characters
+        if (entityValue >= 0 && entityValue <= 0x10FFFF) {
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars, 0, chars.length);
+        } else {
+            return 0;
+        }
+
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
