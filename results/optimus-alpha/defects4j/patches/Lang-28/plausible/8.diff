diff --git a/tmp/16322bd8-127a-4e41-ba3e-2b96c178b694_buggy.java b/tmp/306f22ef-62e5-4b1c-862e-97ad2bf89a4d_fixed.java
index 4bbd561..4d0b41e 100644
--- a/tmp/16322bd8-127a-4e41-ba3e-2b96c178b694_buggy.java
+++ b/tmp/306f22ef-62e5-4b1c-862e-97ad2bf89a4d_fixed.java
@@ -1,37 +1,59 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Prevent out-of-bounds
+    int inputLength = input.length();
+    if (index + 2 >= inputLength) {
+        return 0;
+    }
     if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= inputLength) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if (start >= inputLength) {
+                return 0;
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < inputLength && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end == inputLength || input.charAt(end) != ';') {
+            return 0; // no ";" found
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String number = input.subSequence(start, end).toString();
+            if (number.isEmpty()) {
+                return 0;
             }
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
+        // Correctly handle supplementary code points (write surrogate pairs)
+        if (Character.isValidCodePoint(entityValue)) {
+            String toWrite = new String(Character.toChars(entityValue));
+            out.write(toWrite);
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
