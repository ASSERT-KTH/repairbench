diff --git a/tmp/d6d14e9a-8d88-45aa-a4ef-0b80380e473f_buggy.java b/tmp/0ad22bf8-8ce0-4f3b-92a4-6213887e6b4f_fixed.java
index 114ff20..91031d6 100644
--- a/tmp/d6d14e9a-8d88-45aa-a4ef-0b80380e473f_buggy.java
+++ b/tmp/0ad22bf8-8ce0-4f3b-92a4-6213887e6b4f_fixed.java
@@ -1,41 +1,33 @@
-    /**
-     * Returns a (possibly empty) collection of legend items for the series
-     * that this renderer is responsible for drawing.
-     *
-     * @return The legend item collection (never <code>null</code>).
-     *
-     * @see #getLegendItem(int, int)
-     */
 public LegendItemCollection getLegendItems() {
     LegendItemCollection result = new LegendItemCollection();
     if (this.plot == null) {
         return result;
     }
     int index = this.plot.getIndexOf(this);
     CategoryDataset dataset = this.plot.getDataset(index);
-        if (dataset != null) {
+    if (dataset == null) { // BUG WAS: 'if (dataset != null) return result;'
         return result;
     }
     int seriesCount = dataset.getRowCount();
     if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {
         for (int i = 0; i < seriesCount; i++) {
             if (isSeriesVisibleInLegend(i)) {
                 LegendItem item = getLegendItem(index, i);
                 if (item != null) {
                     result.add(item);
                 }
             }
         }
     }
     else {
         for (int i = seriesCount - 1; i >= 0; i--) {
             if (isSeriesVisibleInLegend(i)) {
                 LegendItem item = getLegendItem(index, i);
                 if (item != null) {
                     result.add(item);
                 }
             }
         }
     }
     return result;
 }
\ No newline at end of file
