diff --git a/tmp/8b474ef4-c18b-44df-a38f-2570299b3c50_buggy.java b/tmp/85aa94b7-8235-46e4-bfea-edfbf5d9cb67_fixed.java
index 939f49b..45da3dc 100644
--- a/tmp/8b474ef4-c18b-44df-a38f-2570299b3c50_buggy.java
+++ b/tmp/85aa94b7-8235-46e4-bfea-edfbf5d9cb67_fixed.java
@@ -1,21 +1,23 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      && n.getType() == Token.GETPROP) {
+    // Accept both chained assigns (e.g. a.b = a.c = ...) and single assigns.
+    Node maybeGetProp = n;
+    // Look for either direct prototype (a.prototype.foo) or
+    // [] notation (a.prototype["foo"])
+    // For assignment chains: a.x = a.prototype.y = ...
+    while (maybeGetProp != null && maybeGetProp.getType() == Token.GETPROP) {
+      Node child = maybeGetProp.getFirstChild();
+      if (child != null &&
+          child.getType() == Token.GETPROP &&
+          child.getLastChild() != null &&
+          child.getLastChild().isString() &&
+          child.getLastChild().getString().equals("prototype")) {
         return true;
       }
+      maybeGetProp = child;
     }
   }
-
   return false;
 }
\ No newline at end of file
