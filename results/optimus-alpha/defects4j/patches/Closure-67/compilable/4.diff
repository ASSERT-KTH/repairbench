diff --git a/tmp/035aaac7-6d09-4e38-b6a6-969967ca1ac3_buggy.java b/tmp/5580187c-df83-4923-8dd1-b56b7e0a6d8d_fixed.java
index 939f49b..a36d04f 100644
--- a/tmp/035aaac7-6d09-4e38-b6a6-969967ca1ac3_buggy.java
+++ b/tmp/5580187c-df83-4923-8dd1-b56b7e0a6d8d_fixed.java
@@ -1,21 +1,26 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      && n.getType() == Token.GETPROP) {
+    // We want to check if the property being assigned is on a prototype object.
+    Node prop = n;
+    // Handle simple and chained assignments (like a.b.c = ...)
+    while (prop != null && prop.getType() == Token.GETPROP) {
+      Node target = prop.getFirstChild();
+      Node property = target.getNext();
+      // For GETPROP: target.property
+      // Check if property is a GETPROP of 'prototype'
+      if (target != null && target.getType() == Token.GETPROP) {
+        Node innerObj = target.getFirstChild();
+        Node innerProp = innerObj.getNext();
+        if (innerProp != null &&
+            innerProp.getType() == Token.STRING &&
+            innerProp.getString().equals("prototype")) {
           return true;
         }
       }
+      prop = target;
+    }
   }
-
   return false;
 }
\ No newline at end of file
