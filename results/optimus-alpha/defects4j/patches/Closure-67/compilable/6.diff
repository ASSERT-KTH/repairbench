diff --git a/tmp/dcecf119-b103-42f6-89eb-7869f860d069_buggy.java b/tmp/96baef78-4aeb-4b5e-974e-8a6be68065bc_fixed.java
index 939f49b..d78cd1d 100644
--- a/tmp/dcecf119-b103-42f6-89eb-7869f860d069_buggy.java
+++ b/tmp/96baef78-4aeb-4b5e-974e-8a6be68065bc_fixed.java
@@ -1,21 +1,32 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      && n.getType() == Token.GETPROP) {
+    Node getprop = n;
+    Node obj = getprop.getFirstChild();
+    Node prop = obj != null ? obj.getNext() : null;
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    // Check if o.prototype.prop form
+    if (obj != null && obj.getType() == Token.GETPROP) {
+      Node innerObj = obj.getFirstChild();
+      Node innerProp = innerObj != null ? innerObj.getNext() : null;
+      if (innerProp != null &&
+          innerProp.getType() == Token.STRING &&
+          innerProp.getString().equals("prototype")) {
+        return true;
+      }
+    }
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    // Check if o['prototype'].prop form
+    if (obj != null && obj.getType() == Token.GETELEM) {
+      Node innerObj = obj.getFirstChild();
+      Node innerElem = innerObj != null ? innerObj.getNext() : null;
+      if (innerElem != null &&
+          innerElem.getType() == Token.STRING &&
+          innerElem.getString().equals("prototype")) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
