diff --git a/tmp/5995f4e3-a125-49d8-9fbb-5ad21cda28b6_buggy.java b/tmp/1f056137-d6c9-4c56-905c-cf954103ece6_fixed.java
index 939f49b..c409c81 100644
--- a/tmp/5995f4e3-a125-49d8-9fbb-5ad21cda28b6_buggy.java
+++ b/tmp/1f056137-d6c9-4c56-905c-cf954103ece6_fixed.java
@@ -1,21 +1,35 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
       ) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+      Node proto = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      if (proto != null &&
+          proto.getType() == Token.STRING &&
+          proto.getString().equals("prototype")) {
+        return true;
+      }
+    } else {
+      // Fix: allow `e.prototype['alias1']`
+      Node proto = n.getFirstChild();
+      Node prop = proto != null ? proto.getNext() : null;
+      if (proto != null &&
+          proto.getType() == Token.GETPROP &&
+          proto.getFirstChild() != null &&
+          proto.getFirstChild().getType() == Token.NAME &&
+          proto.getFirstChild().getNext() != null &&
+          proto.getFirstChild().getNext().getType() == Token.STRING &&
+          proto.getFirstChild().getNext().getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
