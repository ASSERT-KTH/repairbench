diff --git a/tmp/929de675-af7c-4493-a270-23cfb3ec36b2_buggy.java b/tmp/ff8d8cb7-f4a3-4c07-a1d2-cd33ff9fea9c_fixed.java
index 939f49b..1abb400 100644
--- a/tmp/929de675-af7c-4493-a270-23cfb3ec36b2_buggy.java
+++ b/tmp/ff8d8cb7-f4a3-4c07-a1d2-cd33ff9fea9c_fixed.java
@@ -1,21 +1,34 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      && n.getType() == Token.GETPROP) {
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    Node getProp = n;
+    Node propTarget = getProp.getFirstChild();
+    Node propName = propTarget != null ? propTarget.getNext() : null;
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    // Check direct prototype: e.g., e.prototype.method
+    if (propTarget != null && propTarget.getType() == Token.GETPROP) {
+      Node innerObj = propTarget.getFirstChild();
+      Node innerProp = innerObj != null ? innerObj.getNext() : null;
+      if (innerProp != null &&
+          innerProp.getType() == Token.STRING &&
+          innerProp.getString().equals("prototype")) {
+        return true;
+      }
+    }
+
+    // Check chained property: e.g., e.prototype['alias1'] = e.prototype.method1 = ...
+    if (propTarget != null && propTarget.getType() == Token.GETPROP) {
+      Node innerObj = propTarget.getFirstChild();
+      Node innerProp = innerObj != null ? innerObj.getNext() : null;
+      if (innerProp != null &&
+          innerProp.getType() == Token.STRING &&
+          innerProp.getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
