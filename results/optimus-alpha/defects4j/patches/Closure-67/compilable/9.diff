diff --git a/tmp/4e7609b2-f37d-414e-84f1-3e4661637529_buggy.java b/tmp/d805784b-d048-4d55-9343-e33f148b25fb_fixed.java
index 939f49b..bd28e2d 100644
--- a/tmp/4e7609b2-f37d-414e-84f1-3e4661637529_buggy.java
+++ b/tmp/d805784b-d048-4d55-9343-e33f148b25fb_fixed.java
@@ -1,21 +1,18 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    Node target = n;
+    // Support chained assignment: a.b.c = a.b.d = ...
+    while (target != null && target.getType() == Token.GETPROP) {
+      Node prop = target.getFirstChild().getNext(); // property name node
+      if (prop != null && prop.getType() == Token.STRING &&
+          prop.getString().equals("prototype")) {
         return true;
       }
+      target = target.getFirstChild();
     }
   }
-
   return false;
 }
\ No newline at end of file
