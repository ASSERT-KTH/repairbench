diff --git a/tmp/2d70485b-94a0-4d7a-9db0-30b418e40ab3_buggy.java b/tmp/681ae604-fe12-4ffb-adab-3a0598eb191b_fixed.java
index 939f49b..4b1da05 100644
--- a/tmp/2d70485b-94a0-4d7a-9db0-30b418e40ab3_buggy.java
+++ b/tmp/681ae604-fe12-4ffb-adab-3a0598eb191b_fixed.java
@@ -1,21 +1,31 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    Node getProp = n;
+    Node obj = getProp.getFirstChild();
+    // Check for both chained assignments: a.b.c = ... and a['b']['c'] = ...
+    if (obj != null && obj.getType() == Token.GETPROP) {
+      Node mid = obj;
+      // Looking for a.prototype.xxx pattern
+      Node prototypeNode = mid.getFirstChild().getNext();
+      if (prototypeNode != null &&
+          prototypeNode.getType() == Token.STRING &&
+          "prototype".equals(prototypeNode.getString())) {
+        return true;
+      }
+    }
+    // Also handle the bracket access: a['prototype'].xxx
+    if (obj != null && obj.getType() == Token.GETELEM) {
+      Node target = obj.getFirstChild();
+      Node property = target != null ? target.getNext() : null;
+      if (property != null &&
+          property.getType() == Token.STRING &&
+          "prototype".equals(property.getString())) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
