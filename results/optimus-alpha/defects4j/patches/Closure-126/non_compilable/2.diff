diff --git a/tmp/dd1d8a71-e9fb-431c-9519-9ff4c1d8a96e_buggy.java b/tmp/2769f1ac-36b1-4769-99e7-24881e16e83b_fixed.java
index 7d7ab59..778383b 100644
--- a/tmp/dd1d8a71-e9fb-431c-9519-9ff4c1d8a96e_buggy.java
+++ b/tmp/2769f1ac-36b1-4769-99e7-24881e16e83b_fixed.java
@@ -1,124 +1,147 @@
   /**
    * Attempts to minimize the number of explicit exit points in a control
    * structure to take advantage of the implied exit at the end of the
    * structure.  This is accomplished by removing redundant statements, and
    * moving statements following a qualifying IF node into that node.
    * For example:
    *
    * function () {
    *   if (x) return;
    *   else blah();
    *   foo();
    * }
    *
    * becomes:
    *
    * function () {
    *  if (x) ;
    *  else {
    *    blah();
    *    foo();
    *  }
    *
    * @param n The execution node of a parent to inspect.
    * @param exitType The type of exit to look for.
    * @param labelName If parent is a label the name of the label to look for,
    *   null otherwise.
    * @nullable labelName non-null only for breaks within labels.
    */
   void tryMinimizeExits(Node n, int exitType, String labelName) {
 
     // Just an 'exit'.
     if (matchingExitNode(n, exitType, labelName)) {
       NodeUtil.removeChild(n.getParent(), n);
       compiler.reportCodeChange();
       return;
     }
 
     // Just an 'if'.
     if (n.isIf()) {
       Node ifBlock = n.getFirstChild().getNext();
       tryMinimizeExits(ifBlock, exitType, labelName);
       Node elseBlock = ifBlock.getNext();
       if (elseBlock != null) {
         tryMinimizeExits(elseBlock, exitType, labelName);
       }
       return;
     }
 
     // Just a 'try/catch/finally'.
     if (n.isTry()) {
       Node tryBlock = n.getFirstChild();
+      // Only minimize exits in the try block if there is no finally block.
+      // ECMA 262 Sections 8.9 & 12.14: Removing breaks/returns from try
+      // with finally blocks can change observable program behavior.
+      boolean hasFinally = NodeUtil.hasFinally(n);
+      if (!hasFinally) {
         tryMinimizeExits(tryBlock, exitType, labelName);
+      }
       Node allCatchNodes = NodeUtil.getCatchBlock(n);
       if (NodeUtil.hasCatchHandler(allCatchNodes)) {
         Preconditions.checkState(allCatchNodes.hasOneChild());
         Node catchNode = allCatchNodes.getFirstChild();
         Node catchCodeBlock = catchNode.getLastChild();
+        if (!hasFinally) {
           tryMinimizeExits(catchCodeBlock, exitType, labelName);
         }
-      /* Don't try to minimize the exits of finally blocks, as this
-       * can cause problems if it changes the completion type of the finally
-       * block. See ECMA 262 Sections 8.9 & 12.14
-       */
-      if (NodeUtil.hasFinally(n)) {
+      }
+      // Do not minimize the exits of finally blocks, for spec compliance.
+      if (hasFinally) {
         Node finallyBlock = n.getLastChild();
+        // We do allow inner statements, e.g. for nested try blocks,
+        // but do not minimize direct returns/breaks/continues in finally.
+        // However, historically, it is safest to recurse into finally for
+        // inner try/catch, so we'll allow that here:
         tryMinimizeExits(finallyBlock, exitType, labelName);
       }
+      return;
     }
 
     // Just a 'label'.
     if (n.isLabel()) {
       Node labelBlock = n.getLastChild();
       tryMinimizeExits(labelBlock, exitType, labelName);
+      return;
     }
 
     // TODO(johnlenz): The last case of SWITCH statement?
 
     // The rest assumes a block with at least one child, bail on anything else.
     if (!n.isBlock() || n.getLastChild() == null) {
       return;
     }
 
     // Multiple if-exits can be converted in a single pass.
     // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
     // become "if (blah); else { if (blah2); else { other_stmt; } }"
     // which will get converted to "if (!blah && !blah2) { other_stmt; }".
     for (Node c : n.children()) {
 
       // An 'if' block to process below.
       if (c.isIf()) {
         Node ifTree = c;
         Node trueBlock, falseBlock;
 
         // First, the true condition block.
         trueBlock = ifTree.getFirstChild().getNext();
         falseBlock = trueBlock.getNext();
         tryMinimizeIfBlockExits(trueBlock, falseBlock,
             ifTree, exitType, labelName);
 
         // Now the else block.
         // The if blocks may have changed, get them again.
         trueBlock = ifTree.getFirstChild().getNext();
         falseBlock = trueBlock.getNext();
         if (falseBlock != null) {
           tryMinimizeIfBlockExits(falseBlock, trueBlock,
               ifTree, exitType, labelName);
         }
       }
 
       if (c == n.getLastChild()) {
         break;
       }
     }
 
     // Now try to minimize the exits of the last child, if it is removed
     // look at what has become the last child.
     for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
+      // For exit statements inside a finally block, do not try to minimize them.
+      // This ensures, when traversing a finally block (i.e., n is a finally block):
+      // - Only minimize nested statements, not direct exits.
+      if (NodeUtil.isTryFinallyNode(n.getParent()) && n == n.getParent().getLastChild()) {
+        // n is the finally block node
+        // Only minimize nested blocks/statements (e.g., try/catch/label/if/blocks),
+        // but do not remove return/break/continue at the top/first level.
+        if (!c.isBlock() && !c.isIf() && !c.isTry() && !c.isLabel()) {
+          // Do not minimize direct exit statements in finally block
+          break;
+        }
+      }
       tryMinimizeExits(c, exitType, labelName);
       // If the node is still the last child, we are done.
       if (c == n.getLastChild()) {
         break;
       }
     }
   }
\ No newline at end of file
