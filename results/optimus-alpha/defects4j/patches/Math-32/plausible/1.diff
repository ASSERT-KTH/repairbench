diff --git a/tmp/48966211-9426-4238-86ab-80d59c824ebf_buggy.java b/tmp/bbe678eb-f8d2-4fe6-821e-1143e1898ff6_fixed.java
index c53ca2a..c53f9d3 100644
--- a/tmp/48966211-9426-4238-86ab-80d59c824ebf_buggy.java
+++ b/tmp/bbe678eb-f8d2-4fe6-821e-1143e1898ff6_fixed.java
@@ -1,54 +1,61 @@
 /** {@inheritDoc} */
 @Override
 protected void computeGeometricalProperties() {
 
     final Vector2D[][] v = getVertices();
 
     if (v.length == 0) {
         final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
+        Object attribute = tree.getAttribute();
+        boolean coversWholeSpace = false;
+        if (attribute instanceof Boolean) {
+            coversWholeSpace = (Boolean) attribute;
+        } else if (attribute instanceof BoundaryAttribute) {
+            BoundaryAttribute ba = (BoundaryAttribute) attribute;
+            coversWholeSpace = ba.getPlusOutside() == null && ba.getPlusInside() == null;
+        }
+        if (coversWholeSpace) {
             // the instance covers the whole space
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             setSize(0);
             setBarycenter(new Vector2D(0, 0));
         }
     } else if (v[0][0] == null) {
         // there is at least one open-loop: the polygon is infinite
         setSize(Double.POSITIVE_INFINITY);
         setBarycenter(Vector2D.NaN);
     } else {
         // all loops are closed, we compute some integrals around the shape
 
         double sum  = 0;
         double sumX = 0;
         double sumY = 0;
 
         for (Vector2D[] loop : v) {
             double x1 = loop[loop.length - 1].getX();
             double y1 = loop[loop.length - 1].getY();
             for (final Vector2D point : loop) {
                 final double x0 = x1;
                 final double y0 = y1;
                 x1 = point.getX();
                 y1 = point.getY();
                 final double factor = x0 * y1 - y0 * x1;
                 sum  += factor;
                 sumX += factor * (x0 + x1);
                 sumY += factor * (y0 + y1);
             }
         }
 
         if (sum < 0) {
             // the polygon as a finite outside surrounded by an infinite inside
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             setSize(sum / 2);
             setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
         }
 
     }
-
 }
\ No newline at end of file
