diff --git a/tmp/8dd42bed-bdf0-49a8-8886-0e9d3780fef4_buggy.java b/tmp/d816d407-f433-4d78-83ec-b5a4436380d3_fixed.java
index b5d94e0..e847f55 100644
--- a/tmp/8dd42bed-bdf0-49a8-8886-0e9d3780fef4_buggy.java
+++ b/tmp/d816d407-f433-4d78-83ec-b5a4436380d3_fixed.java
@@ -1,26 +1,29 @@
 private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
+      // Call visit(node) BEFORE traversing children,
+      // so that changes to children are immediately seen,
+      // especially when children are created lazily within visit().
+      visit(node);
+
       Node c = node.getFirstChild();
       while (c != null) {
-        traverse(c);
         Node next = c.getNext();
+        traverse(c);
         c = next;
       }
 
-      visit(node);
       visits++;
-
-      Preconditions.checkState(visits < 10000, "too many interations");
+      Preconditions.checkState(visits < 10000, "too many iterations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
 }
\ No newline at end of file
