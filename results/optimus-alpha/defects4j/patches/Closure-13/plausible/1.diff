diff --git a/tmp/5f2e129c-a0fd-4aca-ad3d-73360f1c270d_buggy.java b/tmp/93db99b9-cd02-462a-b87d-caeaeb5d9c91_fixed.java
index b5d94e0..c15d3e5 100644
--- a/tmp/5f2e129c-a0fd-4aca-ad3d-73360f1c270d_buggy.java
+++ b/tmp/93db99b9-cd02-462a-b87d-caeaeb5d9c91_fixed.java
@@ -1,26 +1,31 @@
 private void traverse(Node node) {
   // The goal here is to avoid retraversing
   // the entire AST to catch newly created opportunities.
   // So we track whether a "unit of code" has changed,
   // and revisit immediately.
   if (!shouldVisit(node)) {
     return;
   }
 
   int visits = 0;
   do {
+    // Preserve the next sibling of node before traversing children,
+    // to handle cases when visit(node) moves/replaces this node.
+    Node next = node.getNext();
+
     Node c = node.getFirstChild();
     while (c != null) {
+      // Save the next sibling, because traversal may move/delete nodes.
+      Node nextChild = c.getNext();
       traverse(c);
-        Node next = c.getNext();
-        c = next;
+      c = nextChild;
     }
 
     visit(node);
     visits++;
 
     Preconditions.checkState(visits < 10000, "too many interations");
   } while (shouldRetraverse(node));
 
   exitNode(node);
 }
\ No newline at end of file
