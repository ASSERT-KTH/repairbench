diff --git a/tmp/9b9b6ef2-ee5b-4917-9dce-73e3ebf6cf06_buggy.java b/tmp/d1088e11-fa1a-4fdd-a617-545a50d3f798_fixed.java
index d5b1b52..d45a333 100644
--- a/tmp/9b9b6ef2-ee5b-4917-9dce-73e3ebf6cf06_buggy.java
+++ b/tmp/d1088e11-fa1a-4fdd-a617-545a50d3f798_fixed.java
@@ -1,36 +1,36 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
+    if (array1 == null && array2 == null) {
+        return null;
+    } else if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
     }
     final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+    final Class<?> type2 = array2.getClass().getComponentType();
+
+    // Handle the case where array types are not assignment compatible
+    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1) && array2.length > 0) {
+        throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName());
+    }
+
+    // Ensure correct type for result:
+    Class<?> resultType = type1;
+    if (!type1.isAssignableFrom(type2)) {
+        // Neither can assign one to the other, use Object
+        resultType = Object.class;
+    } else if (!type2.isAssignableFrom(type1)) {
+        // type1 is supertype of type2, so keep type1
+        resultType = type1;
+    }
+
+    T[] joinedArray = (T[]) Array.newInstance(resultType, array1.length + array2.length);
     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+    try {
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+    } catch (ArrayStoreException ex) {
+        throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + resultType.getName(), ex);
+    }
     return joinedArray;
 }
\ No newline at end of file
