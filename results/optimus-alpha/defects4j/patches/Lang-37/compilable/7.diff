diff --git a/tmp/25bf38df-402e-4c64-846e-005f301ce711_buggy.java b/tmp/d67bb9de-953a-49af-a0b4-85385d5defab_fixed.java
index d5b1b52..41e5f6b 100644
--- a/tmp/25bf38df-402e-4c64-846e-005f301ce711_buggy.java
+++ b/tmp/d67bb9de-953a-49af-a0b4-85385d5defab_fixed.java
@@ -1,36 +1,56 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
+    if (array1 == null && array2 == null) {
+        return null;
+    } else if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
     }
-        final Class<?> type1 = array1.getClass().getComponentType();
+    Class<?> type1 = array1.getClass().getComponentType();
+    Class<?> type2 = array2.getClass().getComponentType();
+
+    // If both component types are the same, proceed as before
+    if (type1.equals(type2)) {
         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
         return joinedArray;
     }
+
+    // If one component type is assignable from the other and not the same, use the common supertype
+    if (type1.isAssignableFrom(type2)) {
+        Class<?> newType = type1;
+        Object[] joinedArray = (Object[]) Array.newInstance(newType, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return (T[]) joinedArray;
+    } else if (type2.isAssignableFrom(type1)) {
+        Class<?> newType = type2;
+        Object[] joinedArray = (Object[]) Array.newInstance(newType, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return (T[]) joinedArray;
+    } else {
+        // No common component type, try to find a reasonable common supertype
+        Class<?> superType = findCommonSuperType(type1, type2);
+        if (superType == null) {
+            throw new IllegalArgumentException("Cannot store both array component types in a common array");
+        }
+        Object[] joinedArray = (Object[]) Array.newInstance(superType, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return (T[]) joinedArray;
+    }
+}
+
+// Helper method to find the nearest common superclass (other than Object.class)
+private static Class<?> findCommonSuperType(Class<?> c1, Class<?> c2) {
+    if (c1.isAssignableFrom(c2)) return c1;
+    if (c2.isAssignableFrom(c1)) return c2;
+    Class<?> superClass = c1;
+    while (superClass != null && !superClass.isAssignableFrom(c2)) {
+        superClass = superClass.getSuperclass();
+    }
+    return superClass == null ? Object.class : superClass;
+}
\ No newline at end of file
