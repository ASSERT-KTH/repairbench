diff --git a/tmp/47270660-3f3a-41b8-99b5-4f7c94dad5ad_buggy.java b/tmp/e33eb044-3516-4f4f-b371-5397f24b0e05_fixed.java
index d5b1b52..195982b 100644
--- a/tmp/47270660-3f3a-41b8-99b5-4f7c94dad5ad_buggy.java
+++ b/tmp/e33eb044-3516-4f4f-b371-5397f24b0e05_fixed.java
@@ -1,36 +1,53 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
+    if (array1 == null && array2 == null) {
+        return null;
+    }
     if (array1 == null) {
         return clone(array2);
-        } else if (array2 == null) {
+    }
+    if (array2 == null) {
         return clone(array1);
     }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+
+    Class<?> type1 = array1.getClass().getComponentType();
+    Class<?> type2 = array2.getClass().getComponentType();
+
+    // Compute the component type for the resulting array.
+    Class<?> componentType;
+
+    if (type1.isAssignableFrom(type2)) {
+        componentType = type1;
+    } else if (type2.isAssignableFrom(type1)) {
+        componentType = type2;
+    } else {
+        // Find the most-specific common superclass
+        // For simple numbers, we use Number.class as a fallback
+        // otherwise, we use Object.class
+        if (Number.class.isAssignableFrom(type1) && Number.class.isAssignableFrom(type2)) {
+            componentType = Number.class;
+        } else {
+            componentType = Object.class;
+        }
+    }
+
+    // Now we need to check if all elements can really be assigned to the componentType
+    // as in the test case to throw an IllegalArgumentException
+    for (Object obj : array1) {
+        if (obj != null && !componentType.isInstance(obj)) {
+            throw new IllegalArgumentException("Cannot store " + obj.getClass() + " in an array of " + componentType);
+        }
+    }
+    for (Object obj : array2) {
+        if (obj != null && !componentType.isInstance(obj)) {
+            throw new IllegalArgumentException("Cannot store " + obj.getClass() + " in an array of " + componentType);
+        }
+    }
+
+    int length1 = array1.length;
+    int length2 = array2.length;
+    T[] joinedArray = (T[]) Array.newInstance(componentType, length1 + length2);
+    System.arraycopy(array1, 0, joinedArray, 0, length1);
+    System.arraycopy(array2, 0, joinedArray, length1, length2);
     return joinedArray;
 }
\ No newline at end of file
