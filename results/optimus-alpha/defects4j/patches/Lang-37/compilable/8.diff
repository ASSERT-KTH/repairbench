diff --git a/tmp/5c2b3595-b4a9-48c5-bad2-b4c36d2df95b_buggy.java b/tmp/8ff03de3-c3fe-40c3-a8c2-87990950ccd2_fixed.java
index d5b1b52..e5f6250 100644
--- a/tmp/5c2b3595-b4a9-48c5-bad2-b4c36d2df95b_buggy.java
+++ b/tmp/8ff03de3-c3fe-40c3-a8c2-87990950ccd2_fixed.java
@@ -1,36 +1,52 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
+    if (array1 == null && array2 == null) {
+        return null;
+    } else if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
     }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+
+    Class<?> componentType1 = array1.getClass().getComponentType();
+    Class<?> componentType2 = array2.getClass().getComponentType();
+
+    // If types are equal or array2 is assignable to componentType1, proceed as before
+    if (componentType1.isAssignableFrom(componentType2)) {
+        T[] joinedArray = (T[]) Array.newInstance(componentType1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
         return joinedArray;
+    } else if (componentType2.isAssignableFrom(componentType1)) {
+        // Widen return type to componentType2 if necessary
+        T[] joinedArray = (T[]) Array.newInstance(componentType2, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return joinedArray;
+    } else {
+        // Find common superclass if possible
+        Class<?> superClass = getCommonSuperType(componentType1, componentType2);
+        if (superClass == null || superClass.equals(Object.class)) {
+            throw new IllegalArgumentException("Cannot store elements of type " + componentType1 + " and " + componentType2 + " in same array");
+        }
+        T[] joinedArray = (T[]) Array.newInstance(superClass, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return joinedArray;
+    }
+}
+
+// Helper method to find the common supertype of two classes
+private static Class<?> getCommonSuperType(Class<?> c1, Class<?> c2) {
+    if (c1.isAssignableFrom(c2)) {
+        return c1;
+    }
+    if (c2.isAssignableFrom(c1)) {
+        return c2;
+    }
+    Class<?> superClass = c1;
+    while (superClass != null && !superClass.isAssignableFrom(c2)) {
+        superClass = superClass.getSuperclass();
+    }
+    return superClass == null ? Object.class : superClass;
 }
\ No newline at end of file
