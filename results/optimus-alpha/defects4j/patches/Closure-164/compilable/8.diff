diff --git a/tmp/f33430fe-0f7a-423f-bafc-93314d0420ba_buggy.java b/tmp/bad64819-b7be-4e99-8d4a-6baf387d9770_fixed.java
index 9976e43..9325912 100644
--- a/tmp/f33430fe-0f7a-423f-bafc-93314d0420ba_buggy.java
+++ b/tmp/bad64819-b7be-4e99-8d4a-6baf387d9770_fixed.java
@@ -1,76 +1,97 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // Parameter contravariance:
+  //
+  // For function subtyping, the subtype must require strictly fewer or equal parameters.
+  // For example:
+  //   function f(x) {/*...*/}
+  //   function g(x, y) {/*...*/}
+  //   f can be used where g is expected, but not vice versa.
+  // Therefore, the subtype can have >= number of required parameters,
+  // and for each parameter present in the supertype, the subtype's parameter type must be *supertype* of the required type,
+  // i.e., parameter types are contravariant.
+
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
+
+  // Count the number of non-optional/non-varargs parameters for both signatures
+  int thisRequired = 0, thatRequired = 0;
+  for (Node n = thisParam; n != null; n = n.getNext()) {
+    if (!n.isOptionalArg() && !n.isVarArgs()) {
+      thisRequired++;
+    }
+  }
+  for (Node n = thatParam; n != null; n = n.getNext()) {
+    if (!n.isOptionalArg() && !n.isVarArgs()) {
+      thatRequired++;
+    }
+  }
+
+  // If the subtype (this) expects more required parameters than the supertype (that), not a subtype.
+  if (thisRequired > thatRequired) {
+    return false;
+  }
+
+  thisParam = parameters.getFirstChild();
+  thatParam = that.parameters.getFirstChild();
+
+  while (thatParam != null) {
+    // If we run out of subtype params, supertype must allow var_args or optional
+    if (thisParam == null) {
+      if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {
+        // 'that' requires a param that 'this' does not supply
+        return false;
+      }
+      // Otherwise, skip missing subtype param: thisParam stays null, thatParam advances
+      thatParam = thatParam.getNext();
+      continue;
+    }
+
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
+
+    // Contravariant: thatParamType (of supertype) <= thisParamType (of subtype)
+    if (thisParamType != null && thatParamType != null &&
         !thatParamType.isSubtype(thisParamType)) {
       return false;
     }
-      }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+    // If both are varargs, done
+    if (thisIsVarArgs && thatIsVarArgs) {
+      break;
+    }
 
-      // don't advance if we have variable arguments
+    // Only advance if not varargs, otherwise, one remains at varargs param
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
+  }
 
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+  // If the 'this' type has more required params than 'that', we already checked above.
+  // So, trailing params in 'this' must be optional or varargs.
+  while (thisParam != null) {
+    if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {
+      return false;
     }
+    thisParam = thisParam.getNext();
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
-
   return true;
 }
\ No newline at end of file
