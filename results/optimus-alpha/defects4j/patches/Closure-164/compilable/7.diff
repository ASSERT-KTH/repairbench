diff --git a/tmp/8ba3a585-0aa4-4345-aad2-612e244d2bcf_buggy.java b/tmp/29e35d4a-cfd1-48a9-93e0-e4bbc4c97163_fixed.java
index 9976e43..b502549 100644
--- a/tmp/8ba3a585-0aa4-4345-aad2-612e244d2bcf_buggy.java
+++ b/tmp/29e35d4a-cfd1-48a9-93e0-e4bbc4c97163_fixed.java
@@ -1,76 +1,53 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // If "that" has required parameters that "this" doesn't have, 
+  // then "this" is not a subtype of "that".
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
+
+  while (thatParam != null) {
+    boolean thatIsVarArgs = thatParam.isVarArgs();
+    boolean thisIsVarArgs = (thisParam != null) && thisParam.isVarArgs();
+
+    JSType thisParamType = (thisParam != null) ? thisParam.getJSType() : null;
     JSType thatParamType = thatParam.getJSType();
+
+    // thatParam required, but thisParam exhausted: not a subtype
+    if (thisParam == null && !thatIsVarArgs) {
+      return false;
+    }
+
+    // Parameter type check, contravariant
     if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
-      }
+    // Don't advance past varargs parameter
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
+    if (thisParam != null && !thisIsVarArgs) {
+      thisParam = thisParam.getNext();
+    }
 
-      // both var_args indicates the end
+    // Both are var_args, end
     if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+      break;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
-
   return true;
 }
\ No newline at end of file
