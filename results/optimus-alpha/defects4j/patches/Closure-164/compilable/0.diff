diff --git a/tmp/e2e2c744-82f9-4b76-85c9-6ea3e1fe7251_buggy.java b/tmp/c02d1587-3713-4373-8326-3a194fcce788_fixed.java
index 9976e43..f0c24cf 100644
--- a/tmp/e2e2c744-82f9-4b76-85c9-6ea3e1fe7251_buggy.java
+++ b/tmp/c02d1587-3713-4373-8326-3a194fcce788_fixed.java
@@ -1,76 +1,105 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // Count the number of formal parameters for both functions, ignoring any parameter types after a var_args param.
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
+
+  // Count how many required/optional params for this, and for that.
+  int thisArity = 0;
+  int thatArity = 0;
+
+  Node tmp = thisParam;
+  boolean thisHasVarArgs = false;
+  while (tmp != null) {
+    thisArity++;
+    if (tmp.isVarArgs()) {
+      thisHasVarArgs = true;
+      break;
+    }
+    tmp = tmp.getNext();
+  }
+
+  tmp = thatParam;
+  boolean thatHasVarArgs = false;
+  while (tmp != null) {
+    thatArity++;
+    if (tmp.isVarArgs()) {
+      thatHasVarArgs = true;
+      break;
+    }
+    tmp = tmp.getNext();
+  }
+
+  // If 'this' has fewer parameters than 'that' (and this is not variadic), it's not a subtype.
+  if (thisArity < thatArity && !thisHasVarArgs) {
+    return false;
+  }
+
+  // Parameter contravariance
+  Node t = thisParam;
+  Node u = thatParam;
+  while (u != null) {
+    if (t == null) {
+      // If 'this' is varargs, we can try matching var args...
+      if (thisHasVarArgs) {
+        t = thisParam;
+        while (t.getNext() != null) t = t.getNext();
+        if (!t.isVarArgs()) {
+          return false;
+        }
+        // 'u' is not null, so we need to check the rest all against the vararg type...
+        while (u != null) {
+          JSType thisParamType = t.getJSType();
+          JSType thatParamType = u.getJSType();
           if (thisParamType != null) {
             if (thatParamType == null ||
                 !thatParamType.isSubtype(thisParamType)) {
               return false;
             }
           }
+          if (u.isVarArgs()) {
+            break;
+          }
+          u = u.getNext();
+        }
+        break;
+      } else {
+        return false;
+      }
+    }
+    JSType thisParamType = t.getJSType();
+    JSType thatParamType = u.getJSType();
+    if (thisParamType != null) {
+      if (thatParamType == null ||
+          !thatParamType.isSubtype(thisParamType)) {
+        return false;
+      }
+    }
+    boolean thisIsVarArgs = t.isVarArgs();
+    boolean thatIsVarArgs = u.isVarArgs();
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
+      t = t.getNext();
     }
     if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
+      u = u.getNext();
     }
-
     // both var_args indicates the end
     if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+      break;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
-
   return true;
 }
\ No newline at end of file
