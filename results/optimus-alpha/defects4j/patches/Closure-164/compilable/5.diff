diff --git a/tmp/7f913e5d-2164-4e38-9437-b0ca3a08f3b3_buggy.java b/tmp/deeff166-c838-46f2-a37e-129301ccc35f_fixed.java
index 9976e43..5a03996 100644
--- a/tmp/7f913e5d-2164-4e38-9437-b0ca3a08f3b3_buggy.java
+++ b/tmp/deeff166-c838-46f2-a37e-129301ccc35f_fixed.java
@@ -1,76 +1,65 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
+
+  while (thisParam != null || thatParam != null) {
+    boolean thisIsVarArgs = (thisParam != null) && thisParam.isVarArgs();
+    boolean thatIsVarArgs = (thatParam != null) && thatParam.isVarArgs();
+
+    if (thatParam == null) {
+      // 'that' (supertype) must have at least as many required params as 'this' (subtype)
+      // If 'this' has extra required params, it's not a subtype.
+      if (thisParam != null && !thisIsVarArgs) {
+        return false;
+      }
+      break;
+    }
+
+    if (thisParam == null) {
+      // 'this' may have fewer arguments than 'that', which is valid.
+      if (thatIsVarArgs) {
+        // If 'that' has varargs, subtype may have less params.
+        break;
+      } else {
+        // If 'that' has extra required (non-vararg) params, subtype is invalid.
+        return false;
+      }
+    }
+
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
+
+    // Contravariant: that.paramType[i] <: this.paramType[i]
     if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
 
-      // both var_args indicates the end
     if (thisIsVarArgs && thatIsVarArgs) {
       thisParam = null;
       thatParam = null;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
-
   return true;
 }
\ No newline at end of file
