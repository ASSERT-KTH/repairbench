diff --git a/tmp/6e02af0b-9723-4f31-bf6c-804d44ed589f_buggy.java b/tmp/609835b7-43a5-45c8-a600-b2a41cdbae30_fixed.java
index 9976e43..17510ec 100644
--- a/tmp/6e02af0b-9723-4f31-bf6c-804d44ed589f_buggy.java
+++ b/tmp/609835b7-43a5-45c8-a600-b2a41cdbae30_fixed.java
@@ -1,76 +1,79 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // Parameter contravariance, but the "subset-arity" rule is wrong in this code.
+  // The correct rule: for this to be a subtype of that, "that" can have
+  // more parameters, but not fewer (including required arguments).
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
+  boolean thisHasVarArgs = false;
+  boolean thatHasVarArgs = false;
+
+  while (thatParam != null) {
+    thatHasVarArgs = thatParam.isVarArgs();
     JSType thatParamType = thatParam.getJSType();
+
+    if (thisParam == null) {
+      // "this" has fewer parameters than "that" required, error
+      // unless "this" has varargs as the previous parameter
+      if (!thisHasVarArgs) {
+        return false;
+      } else {
+        // If "this" ends with varargs, allow additional "that" params
+        // as long as they are subtypes of the vararg type
+        // Check vararg contravariant for the remaining thatParam(s)
+        if (thatParamType != null) {
+          JSType thisVarArgType = thisParam.getPrevious().getJSType();
+          if (thisVarArgType == null || !thatParamType.isSubtype(thisVarArgType)) {
+            return false;
+          }
+        }
+        thatParam = thatParam.getNext();
+        continue;
+      }
+    }
+
+    thisHasVarArgs = thisParam.isVarArgs();
+    JSType thisParamType = thisParam.getJSType();
+
+    // that.paramType[i] <: this.paramType[i] (contravariant)
     if (thisParamType != null) {
       if (thatParamType == null ||
           !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
-
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
+    // Advance this/that as appropriate.
+    if (!thisHasVarArgs) {
       thisParam = thisParam.getNext();
     }
-      if (!thatIsVarArgs) {
+    if (!thatHasVarArgs) {
       thatParam = thatParam.getNext();
     }
-
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+    // If both are varargs, that's the end.
+    if (thisHasVarArgs && thatHasVarArgs) {
+      // handles case where both sides are ... and thus compatible
+      break;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // If "that" is done, but "this" still has *required* parameters, not subtype.
+  while (thisParam != null) {
+    if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {
+      return false;
+    }
+    thisParam = thisParam.getNext();
+  }
 
   return true;
 }
\ No newline at end of file
