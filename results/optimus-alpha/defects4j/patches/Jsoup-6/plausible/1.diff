diff --git a/tmp/a83c7678-bae9-4d4d-8688-9afc9083ce7e_buggy.java b/tmp/2fddc98a-fa90-4668-94c2-78a439eab1fa_fixed.java
index 99141e0..9a75862 100644
--- a/tmp/a83c7678-bae9-4d4d-8688-9afc9083ce7e_buggy.java
+++ b/tmp/2fddc98a-fa90-4668-94c2-78a439eab1fa_fixed.java
@@ -1,33 +1,34 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    StringBuilder accum = new StringBuilder(string.length());
 
+    int last = 0;
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
                 int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
                 charval = Integer.valueOf(num, base);
             } catch (NumberFormatException e) {
             } // skip
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
+        accum.append(string, last, m.start());
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+        if (charval != -1 && charval <= 0xFFFF) { // within valid char range
+            accum.append((char) charval);
         } else {
-                m.appendReplacement(accum, m.group(0));
+            accum.append(m.group(0));
         }
+        last = m.end();
     }
-        m.appendTail(accum);
+    accum.append(string, last, string.length());
     return accum.toString();
 }
\ No newline at end of file
