diff --git a/tmp/814d0234-5193-440e-90b6-87f5eb063a8c_buggy.java b/tmp/c98684d7-c01b-444f-9d2e-e1c8246a213e_fixed.java
index 99141e0..e88f62c 100644
--- a/tmp/814d0234-5193-440e-90b6-87f5eb063a8c_buggy.java
+++ b/tmp/c98684d7-c01b-444f-9d2e-e1c8246a213e_fixed.java
@@ -1,33 +1,33 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    StringBuffer accum = new StringBuffer(string.length());
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
                 int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
                 charval = Integer.valueOf(num, base);
             } catch (NumberFormatException e) {
             } // skip
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
+        // Bug fix: Check for charval != -1, and avoid out-of-range for chars (> 0xFFFF).
+        if (charval != -1 && charval <= 0xFFFF) { // Only allow valid char values
+            String c = Matcher.quoteReplacement(Character.toString((char) charval));
             m.appendReplacement(accum, c);
         } else {
-                m.appendReplacement(accum, m.group(0));
+            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
