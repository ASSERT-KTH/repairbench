diff --git a/tmp/5e8a9efa-c618-41a6-87df-c8f9d8d5db61_buggy.java b/tmp/402dd187-b1fb-4382-a612-261ceb5b029a_fixed.java
index b81eeca..61a5a09 100644
--- a/tmp/5e8a9efa-c618-41a6-87df-c8f9d8d5db61_buggy.java
+++ b/tmp/402dd187-b1fb-4382-a612-261ceb5b029a_fixed.java
@@ -1,78 +1,77 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     boolean allNUL = true;
     for (int i = start; i < end; i++) {
         if (buffer[i] != 0) {
             allNUL = false;
             break;
         }
     }
     if (allNUL) {
         return 0L;
     }
 
+    // Work-around: skip a single leading NUL, as produced by broken tar implementations
+    if (buffer[start] == 0) {
+        start++;
+        // If everything else is still NUL, this should count as allNUL
+        boolean allRestNUL = true;
+        for (int i = start; i < end; i++) {
+            if (buffer[i] != 0) {
+                allRestNUL = false;
+                break;
+            }
+        }
+        if (allRestNUL) {
+            return 0L;
+        }
+        // Skip any spaces after the leading NUL
+        while (start < end && buffer[start] == ' ') {
+            start++;
+        }
+    }
+
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
     // Must have trailing NUL or space
     byte trailer;
     trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
         end--;
     } else {
         throw new IllegalArgumentException(
             exceptionMessage(buffer, offset, length, end - 1, trailer));
     }
     // May have additional NUL or space
     trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
         end--;
     }
 
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
