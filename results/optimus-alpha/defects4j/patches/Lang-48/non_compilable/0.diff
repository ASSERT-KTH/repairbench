diff --git a/tmp/3601182a-7132-4ef7-91a7-3fa5ef18ba26_buggy.java b/tmp/b7f81a08-00ea-4f80-8d84-ecb25ce06a0c_fixed.java
index 82bdfd4..e21aad2 100644
--- a/tmp/3601182a-7132-4ef7-91a7-3fa5ef18ba26_buggy.java
+++ b/tmp/b7f81a08-00ea-4f80-8d84-ecb25ce06a0c_fixed.java
@@ -1,51 +1,50 @@
-    /**
-     * <p>Test if two <code>Object</code>s are equal using their
-     * <code>equals</code> method.</p>
-     *
-     * @param lhs  the left hand object
-     * @param rhs  the right hand object
-     * @return EqualsBuilder - used to chain calls.
-     */
 public EqualsBuilder append(Object lhs, Object rhs) {
     if (isEquals == false) {
         return this;
     }
     if (lhs == rhs) {
         return this;
     }
     if (lhs == null || rhs == null) {
         this.setEquals(false);
         return this;
     }
-        Class lhsClass = lhs.getClass();
+    Class<?> lhsClass = lhs.getClass();
     if (!lhsClass.isArray()) {
         // The simple case, not an array, just test the element
+        // Use compareTo for BigDecimal and BigInteger to ensure value equality
+        if (lhs instanceof java.math.BigDecimal && rhs instanceof java.math.BigDecimal) {
+            isEquals = ((java.math.BigDecimal) lhs).compareTo((java.math.BigDecimal) rhs) == 0;
+        } else if (lhs instanceof java.math.BigInteger && rhs instanceof java.math.BigInteger) {
+            isEquals = ((java.math.BigInteger) lhs).compareTo((java.math.BigInteger) rhs) == 0;
+        } else {
             isEquals = lhs.equals(rhs);
+        }
     } else if (lhs.getClass() != rhs.getClass()) {
         // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
         this.setEquals(false);
     }
     // 'Switch' on type of array, to dispatch to the correct handler
     // This handles multi dimensional arrays of the same depth
     else if (lhs instanceof long[]) {
         append((long[]) lhs, (long[]) rhs);
     } else if (lhs instanceof int[]) {
         append((int[]) lhs, (int[]) rhs);
     } else if (lhs instanceof short[]) {
         append((short[]) lhs, (short[]) rhs);
     } else if (lhs instanceof char[]) {
         append((char[]) lhs, (char[]) rhs);
     } else if (lhs instanceof byte[]) {
         append((byte[]) lhs, (byte[]) rhs);
     } else if (lhs instanceof double[]) {
         append((double[]) lhs, (double[]) rhs);
     } else if (lhs instanceof float[]) {
         append((float[]) lhs, (float[]) rhs);
     } else if (lhs instanceof boolean[]) {
         append((boolean[]) lhs, (boolean[]) rhs);
     } else {
         // Not an array of primitives
         append((Object[]) lhs, (Object[]) rhs);
     }
     return this;
 }
\ No newline at end of file
