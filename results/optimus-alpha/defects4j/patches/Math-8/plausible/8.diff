diff --git a/tmp/5118a4ba-b918-4ed4-81b3-ae9ee0f6a494_buggy.java b/tmp/3127ed99-4cc7-4672-a37d-4e5ba3fdddc8_fixed.java
index bfa2423..b8326f2 100644
--- a/tmp/5118a4ba-b918-4ed4-81b3-ae9ee0f6a494_buggy.java
+++ b/tmp/3127ed99-4cc7-4672-a37d-4e5ba3fdddc8_fixed.java
@@ -1,23 +1,32 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
+            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // Find the most specific common superclass for all elements in singletons
+        Class<?> componentType = null;
+        for (T element : singletons) {
+            if (element != null) {
+                if (componentType == null) {
+                    componentType = element.getClass();
+                } else {
+                    // Find common ancestor
+                    Class<?> clazz = element.getClass();
+                    while (!componentType.isAssignableFrom(clazz)) {
+                        componentType = componentType.getSuperclass();
+                    }
+                }
+            }
+        }
+        if (componentType == null) {
+            componentType = Object.class;
+        }
+
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
-
     }
\ No newline at end of file
