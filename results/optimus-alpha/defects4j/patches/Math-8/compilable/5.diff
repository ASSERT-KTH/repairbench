diff --git a/tmp/f321c287-96a5-415e-af15-9a48fb2438bc_buggy.java b/tmp/bc98df34-6869-49d5-aaad-e4c0d0e9400b_fixed.java
index bfa2423..cbe7649 100644
--- a/tmp/f321c287-96a5-415e-af15-9a48fb2438bc_buggy.java
+++ b/tmp/bc98df34-6869-49d5-aaad-e4c0d0e9400b_fixed.java
@@ -1,23 +1,37 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        @SuppressWarnings("unchecked")
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(
+                getSampleType(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
+    }
 
+    /**
+     * Returns the most specific supertype of all singleton elements.
+     */
+    private Class<?> getSampleType() {
+        if (singletons == null || singletons.isEmpty() || singletons.get(0) == null) {
+            return Object.class;
+        }
+        Class<?> type = singletons.get(0).getClass();
+        for (T t : singletons) {
+            if (t != null && !type.isInstance(t)) {
+                // Find common superclass
+                Class<?> curr = t.getClass();
+                while (!type.isAssignableFrom(curr)) {
+                    curr = curr.getSuperclass();
+                }
+                type = curr;
+            }
+        }
+        return type;
     }
\ No newline at end of file
