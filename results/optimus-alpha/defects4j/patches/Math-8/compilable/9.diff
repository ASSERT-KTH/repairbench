diff --git a/tmp/8a218bb9-ab4c-47a3-9954-9568e00d05cc_buggy.java b/tmp/8e3288d1-83c7-458a-a324-6ce02fcb4858_fixed.java
index bfa2423..12f0005 100644
--- a/tmp/8a218bb9-ab4c-47a3-9954-9568e00d05cc_buggy.java
+++ b/tmp/8e3288d1-83c7-458a-a324-6ce02fcb4858_fixed.java
@@ -1,23 +1,29 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        @SuppressWarnings("unchecked")
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(this.getRuntimeClass(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
+    }
 
+    /**
+     * Returns the runtime class of the elements in the distribution.
+     * This method should be added to the class and used to properly construct arrays of generic type T.
+     */
+    private Class<?> getRuntimeClass() {
+        for (T singleton : singletons) {
+            if (singleton != null) {
+                return singleton.getClass();
+            }
+        }
+        // Fallback if all are null
+        return Object.class;
     }
\ No newline at end of file
