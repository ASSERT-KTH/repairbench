diff --git a/tmp/fa45fe4c-1823-4a85-a716-3a21abfe9684_buggy.java b/tmp/a4bfae26-ac49-47c4-a5f4-fa98372d9ce2_fixed.java
index 4b7e1e4..2a054f1 100644
--- a/tmp/fa45fe4c-1823-4a85-a716-3a21abfe9684_buggy.java
+++ b/tmp/a4bfae26-ac49-47c4-a5f4-fa98372d9ce2_fixed.java
@@ -1,52 +1,88 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundDigit = false;
+        // Read digits for the length
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                break;
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
+            if (ch == '\n' || ch == '\r') {
+                // Malformed or blank line, skip it
+                // (skip to next newline)
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
                 }
                 break;
             }
-                        coll.write((byte) ch);
+            if (ch < '0' || ch > '9') {
+                // Malformed length specifier, skip this line
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
                 }
-                    break; // Processed single header
+                break;
             }
+            foundDigit = true;
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1) { // EOF
             break;
         }
+        if (!foundDigit) {
+            // No number read; ignore blank/malformed line
+            continue;
+        }
+        // reached space after length, now read the rest
+        // If length is less than read so far, skip this malformed header
+        if (len < read || len <= 0) {
+            // Skip the remainder of the line
+            int skipLen = 0;
+            while (skipLen < 1000 && i.read() != -1) { // avoid infinite loops
+                skipLen++;
+            }
+            continue;
+        }
+        final int keywordAndValueLen = len - read;
+        final byte[] keywordAndValue = new byte[keywordAndValueLen];
+        final int got = IOUtils.readFully(i, keywordAndValue);
+        if (got != keywordAndValueLen) {
+            throw new IOException("Failed to read Paxheader. Expected "
+                                  + keywordAndValueLen
+                                  + " bytes, read "
+                                  + got);
+        }
+        // keywordAndValue contains: keyword=value\n
+        // Find '=' separator
+        int eq = -1;
+        for (int k = 0; k < keywordAndValueLen; k++) {
+            if (keywordAndValue[k] == '=') {
+                eq = k;
+                break;
+            }
+        }
+        if (eq == -1) {
+            // Malformed header, skip
+            continue;
+        }
+        final String keyword = new String(keywordAndValue, 0, eq, CharsetNames.UTF_8);
+        // strip newline from end
+        int end = keywordAndValueLen;
+        if (end > 0 && keywordAndValue[end-1] == '\n') {
+            end--;
+        }
+        String value = new String(keywordAndValue, eq + 1, end - (eq + 1), CharsetNames.UTF_8);
+        if (value.length() == 0) {
+            headers.remove(keyword);
+        } else {
+            headers.put(keyword, value);
+        }
     }
     return headers;
 }
\ No newline at end of file
