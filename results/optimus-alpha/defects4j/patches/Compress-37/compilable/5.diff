diff --git a/tmp/da7428b9-28d4-46d4-b80f-a42793d0006b_buggy.java b/tmp/4548313c-9be2-4e7f-884f-a1f61e150e9f_fixed.java
index 4b7e1e4..9f3e2de 100644
--- a/tmp/da7428b9-28d4-46d4-b80f-a42793d0006b_buggy.java
+++ b/tmp/4548313c-9be2-4e7f-884f-a1f61e150e9f_fixed.java
@@ -1,52 +1,89 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLen = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
+                foundLen = true;
+                break;
+            }
+            // Skip blank lines and invalid leading non-digit chars
+            if (!Character.isDigit(ch)) {
+                // Skip until LF to drop this bogus line
+                while (ch != '\n' && ch != -1) {
+                    ch = i.read();
+                    if (ch == -1) break;
+                }
+                read = 0;
+                len = 0;
+                continue;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1){ // EOF
+            break;
+        }
+        if (!foundLen) {
+            // No length found; probably end of file
+            break;
+        }
+        // Already read len bytes? (in case of a blank/empty/invalid header)
+        if (len <= 0) {
+            // Invalid, just skip this line
+            // Read till end of line
+            do {
+                ch = i.read();
+            } while (ch != -1 && ch != '\n');
+            continue;
+        }
+        // Read the rest of the header
+        int bytesRemaining = len - read;
+        if (bytesRemaining <= 0) {
+            // Malformed header, skip the rest of the line
+            for (int discard = 0; discard < len - 1; discard++) {
+                i.read();
+            }
+            continue;
+        }
+        byte[] rest = new byte[bytesRemaining];
+        int got = IOUtils.readFully(i, rest);
+        if (got != bytesRemaining) {
             throw new IOException("Failed to read "
                                   + "Paxheader. Expected "
-                                                          + restLen
+                                  + bytesRemaining
                                   + " bytes, read "
                                   + got);
         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+        // Remove trailing newline (should always be at end)
+        int end = bytesRemaining - 1;
+        if (rest[end] != '\n') {
+            // no trailing newline? Malformed header, skip
+            continue;
+        }
+        // Find the '=' separator
+        int eq = 0;
+        while (eq < end && rest[eq] != '=') {
+            eq++;
+        }
+        if (eq == 0 || eq >= end) {
+            // Malformed, no keyword or separator. Skip
+            continue;
+        }
+        final String keyword = new String(rest, 0, eq, CharsetNames.UTF_8);
+        final String value = new String(rest, eq + 1, end - eq - 1, CharsetNames.UTF_8);
+        if (value.length() == 0) {
+            headers.remove(keyword);
+        } else {
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
