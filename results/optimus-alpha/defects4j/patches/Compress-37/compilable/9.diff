diff --git a/tmp/ef725c6a-5071-4d50-9bbe-aa41e6b25be8_buggy.java b/tmp/27ce4ed1-362b-4386-b9a9-fc5b70a591ba_fixed.java
index 4b7e1e4..f5b23e1 100644
--- a/tmp/ef725c6a-5071-4d50-9bbe-aa41e6b25be8_buggy.java
+++ b/tmp/27ce4ed1-362b-4386-b9a9-fc5b70a591ba_fixed.java
@@ -1,52 +1,70 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLength = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
-                            }
+                foundLength = true;
                 break;
             }
-                        coll.write((byte) ch);
+            // Ignore any blank lines or non-digit (skip them)
+            if (ch < '0' || ch > '9') {
+                // skip to end of line
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
                 }
-                    break; // Processed single header
+                break;
             }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1) { // EOF
             break;
         }
+        if (!foundLength) {
+            continue; // skip blank line and proceed to next
+        }
+        if (len <= 0) { // blank line or invalid length, skip it
+            // skip to end of line
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
+        // Now, retrieve the rest of the record (already read 'read' bytes so far, after length)
+        final byte[] record = new byte[len - read];
+        int got = IOUtils.readFully(i, record);
+        if (got != record.length) {
+            throw new IOException("Failed to read Paxheader. Expected "
+                                  + record.length + " bytes, read " + got);
+        }
+        // Now split at '=' (the first occurrence) for keyword, and drop trailing NL
+        int eq = -1;
+        for (int j = 0; j < record.length; j++) {
+            if (record[j] == '=') {
+                eq = j;
+                break;
+            }
+        }
+        if (eq == -1 || record.length == 0) {
+            // Malformed line (eg., blank), skip
+            continue;
+        }
+        final String keyword = new String(record, 0, eq, CharsetNames.UTF_8);
+        // Should drop the trailing NL (the last byte)
+        final String value = new String(record, eq + 1, record.length - eq - 1 - 1, CharsetNames.UTF_8);
+        if (value.length() == 0) {
+            headers.remove(keyword);
+        } else {
+            headers.put(keyword, value);
+        }
     }
     return headers;
 }
\ No newline at end of file
