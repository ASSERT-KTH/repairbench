diff --git a/tmp/8602135c-10ad-475b-a447-4474db1f5561_buggy.java b/tmp/a8faf618-87b7-44b4-b67e-6cf95e4b3e86_fixed.java
index 4b7e1e4..8554f7b 100644
--- a/tmp/8602135c-10ad-475b-a447-4474db1f5561_buggy.java
+++ b/tmp/a8faf618-87b7-44b4-b67e-6cf95e4b3e86_fixed.java
@@ -1,52 +1,88 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean lenRead = false;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
+                lenRead = true;
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // Invalid character in length field: skip until NL, treat as blank/invalid line
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                // Continue to outer while loop to try to process the next line
+                continue;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1 || !lenRead) { // EOF or line with no length
+            break;
+        }
+        if (len <= 0) {
+            // Skip invalid/blank line
+            for (int n = 1; n < read; n++) { // n = 1: already read one byte (the blank line)
+                if (i.read() == -1) {
+                    break;
+                }
+            }
+            continue;
+        }
+        // Now read (len - read) bytes, since we've read 'read' bytes so far (len includes itself)
+        final ByteArrayOutputStream entryBaos = new ByteArrayOutputStream();
+        int remain = len - read;
+        if (remain <= 0) {
+            // Blank or malformed header line, skip to next
+            for (int n = 0; n < -remain; n++) {
+                if (i.read() == -1) {
+                    break;
+                }
+            }
+            continue;
+        }
+        byte[] entry = new byte[remain];
+        int got = IOUtils.readFully(i, entry);
+        if (got != remain) {
+            throw new IOException("Failed to read Paxheader. Expected "
+                                  + remain
                                   + " bytes, read "
                                   + got);
         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+        // The line may or may not have NL at the end (should, but let's be safe)
+        // Find '=' and split into keyword and value
+        int eq = -1;
+        for (int idx = 0; idx < entry.length; idx++) {
+            if (entry[idx] == '=') {
+                eq = idx;
+                break;
+            }
+        }
+        if (eq == -1) {
+            // No keyword found. Ignore this entry.
+            continue;
+        }
+        String keyword = new String(entry, 0, eq, CharsetNames.UTF_8);
+        // Value: skip the trailing NL
+        int valLen = entry.length - eq - 1; // drop trailing NL
+        if (valLen < 0) valLen = 0;
+        String value = new String(entry, eq + 1, valLen, CharsetNames.UTF_8);
+        // Defensive: If value ends with NL, drop it
+        if (!value.isEmpty() && value.charAt(value.length() - 1) == '\n') {
+            value = value.substring(0, value.length() - 1);
+        }
+        if (valLen == 0) {
+            headers.remove(keyword);
+        } else {
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
