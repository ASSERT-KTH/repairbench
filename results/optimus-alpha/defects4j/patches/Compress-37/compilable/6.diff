diff --git a/tmp/8c536aed-1843-4b13-a4a6-af9c9ab1b8c1_buggy.java b/tmp/a60b370c-baa2-4a34-b846-f6b2f43f6ec5_fixed.java
index 4b7e1e4..c84e946 100644
--- a/tmp/8c536aed-1843-4b13-a4a6-af9c9ab1b8c1_buggy.java
+++ b/tmp/a60b370c-baa2-4a34-b846-f6b2f43f6ec5_fixed.java
@@ -1,52 +1,82 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundDigit = false;
+        // parse the length prefix (decimal ASCII digits, then ' ')
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
+                // ignore lines that are only spaces or invalidly short
+                if (!foundDigit || len < 1) {
+                    // Skip to end of line
+                    while ((ch = i.read()) != -1 && ch != '\n') { }
+                    // Reset counters, and try to parse the next header
+                    len = 0;
+                    read = 0;
+                    foundDigit = false;
+                    continue;
+                }
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read()) != -1) {
                     read++;
                     if (ch == '='){ // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        if (restLen < 1) { // less than just NL; skip invalid header
+                            // try to read to the end of line if possible
+                            while ((ch = i.read()) != -1 && ch != '\n') { }
+                        } else if (restLen == 1) { // only NL
                             headers.remove(keyword);
+                            // skip NL
+                            i.read();
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
                                                       restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
+            if (ch == '\n') {
+                // Blank line or malformed line, keep going to try next header
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // Invalid, skip to end of line
+                while ((ch = i.read()) != -1 && ch != '\n') { }
+                len = 0;
+                read = 0;
+                foundDigit = false;
+                break;
+            }
+            foundDigit = true;
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
