diff --git a/tmp/0e5f36d6-66e0-45ae-b054-01df86791918_buggy.java b/tmp/d31e9f36-8b1f-4c93-bdd6-4a32aba896df_fixed.java
index 4b7e1e4..d944e30 100644
--- a/tmp/0e5f36d6-66e0-45ae-b054-01df86791918_buggy.java
+++ b/tmp/d31e9f36-8b1f-4c93-bdd6-4a32aba896df_fixed.java
@@ -1,52 +1,81 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean saw_digit = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
+                // If there was no digit before the space, it's a blank line; skip to next line.
+                if (!saw_digit) {
+                    // Skip this blank/broken line.
+                    // Read until newline or EOF
+                    while (ch != -1 && ch != '\n') {
+                        ch = i.read();
+                    }
+                    break;
+                }
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read()) != -1) {
                     read++;
                     if (ch == '='){ // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
+                        // Check for broken/malformed records, skip if restLen < 1
+                        if (restLen <= 0) {
+                            // Skip ahead to next NL
+                            int skipch;
+                            while ((skipch = i.read()) != -1 && skipch != '\n') { }
+                            break;
+                        }
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
                                                       restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
+            if (Character.isDigit(ch)) {
                 len *= 10;
                 len += ch - '0';
+                saw_digit = true;
+            } else if (ch == '\n' || ch == '\r') {
+                // It's a blank/broken line, so skip
+                break;
+            } else {
+                // Not digit and not space/newline: broken input; skip line.
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                break;
+            }
         }
         if (ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
