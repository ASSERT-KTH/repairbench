diff --git a/tmp/dc5ed78b-2954-4ef9-9891-e88af543b1de_buggy.java b/tmp/8837a045-8d1f-4fc1-bb0c-28d1c8c8c844_fixed.java
index 4b7e1e4..c4b6c87 100644
--- a/tmp/dc5ed78b-2954-4ef9-9891-e88af543b1de_buggy.java
+++ b/tmp/8837a045-8d1f-4fc1-bb0c-28d1c8c8c844_fixed.java
@@ -1,52 +1,92 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLen = false;
         while ((ch = i.read()) != -1) {
             read++;
+            if (ch == '\n' || ch == '\r') {
+                // skip blank or empty lines
+                continue;
+            }
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
-                            }
+                foundLen = true;
                 break;
             }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
+            if (ch < '0' || ch > '9') {
+                // Malformed line
+                throw new IOException("Non-numeric character in header length: " + ch);
             }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1) { // EOF
             break;
         }
+        if (!foundLen) {
+            continue;
+        }
+        if (len <= 0) {
+            // skip empty/bogus lines
+            // read until next newline
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
+        // We already read 'read' bytes for length
+        // Now, read rest of the entry (len - read bytes)
+        // For valid entries, that is keyword=value\n
+        int remain = len - read;
+        if (remain <= 0) {
+            // skip line if length or header is malformed
+            // read until next newline
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
+        byte[] headerRest = new byte[remain];
+        int got = IOUtils.readFully(i, headerRest);
+        if (got != remain) {
+            throw new IOException("Failed to read Paxheader. Expected "
+                    + remain + " bytes, read " + got);
+        }
+        int equals = -1;
+        for (int idx = 0; idx < headerRest.length; idx++) {
+            if (headerRest[idx] == '=') {
+                equals = idx;
+                break;
+            }
+        }
+        if (equals == -1) {
+            // malformed header, skip it
+            continue;
+        }
+        String keyword = new String(headerRest, 0, equals, CharsetNames.UTF_8);
+        // drop newline at end
+        int valueLen = headerRest.length - equals - 1;
+        if (valueLen < 0) {
+            // malformed header, skip it
+            continue;
+        }
+        String value = new String(headerRest, equals + 1, valueLen, CharsetNames.UTF_8);
+        if (value.endsWith("\n")) {
+            value = value.substring(0, value.length() - 1);
+        }
+        if (keyword.length() == 0 && value.length() == 0) {
+            continue;
+        }
+        if (value.length() == 0) {
+            headers.remove(keyword);
+        } else {
+            headers.put(keyword, value);
+        }
     }
     return headers;
 }
\ No newline at end of file
