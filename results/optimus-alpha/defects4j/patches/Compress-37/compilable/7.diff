diff --git a/tmp/6be2204a-0e67-408d-810a-cf8506f266be_buggy.java b/tmp/3e5abd39-4b69-4e7e-9653-c85ac865ac6f_fixed.java
index 4b7e1e4..44bcb5c 100644
--- a/tmp/6be2204a-0e67-408d-810a-cf8506f266be_buggy.java
+++ b/tmp/3e5abd39-4b69-4e7e-9653-c85ac865ac6f_fixed.java
@@ -1,52 +1,91 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean lenRead = false;
         while((ch = i.read()) != -1) {
             read++;
+            if (ch == '\n' && read == 1) {
+                // Blank line (or stray newline), skip and try to read a new header line
+                break;
+            }
             if (ch == ' '){
-                    // Get keyword
+                lenRead = true;
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // If we encounter any character that's not a digit or space at this point,
+                // the header is malformed; skip this line.
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                break;
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (!lenRead) {
+            if (ch == -1) { // EOF
+                break;
+            }
+            // break to next header line (continuing the loop)
+            continue;
+        }
+        if (len <= 0) {
+            // Malformed line or blank line, skip to next header
+            // Skip the rest of this header line (len <= 0 doesn't make sense)
+            for (int skipped = 0; skipped < 512 && ch != '\n' && ch != -1; skipped++) {
+                ch = i.read();
+            }
+            continue;
+        }
+        // We've read 'read' bytes so far: len is the full header length
+        // We got here after reading the number, space char, ch at space
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+        String keyword = null;
+        boolean keywordRead = false;
+        int payloadRead = read;
+        while(payloadRead < len) {
+            ch = i.read();
+            if (ch == -1) {
+                // Unexpected EOF in the middle of a header line
+                throw new IOException("Failed to read Paxheader line. Unexpected EOF.");
+            }
+            payloadRead++;
+            if (!keywordRead) {
+                if (ch == '=') {
+                    keyword = coll.toString(CharsetNames.UTF_8);
+                    coll.reset();
+                    keywordRead = true;
+                } else {
+                    coll.write(ch);
+                }
+            } else {
+                coll.write(ch);
+            }
+        }
+        if (keyword == null) {
+            // Could not parse keyword, skip this header
+            continue;
+        }
+        byte[] valueBytes = coll.toByteArray();
+        // The value ends with a newline (\n), remove it
+        if (valueBytes.length > 0 && valueBytes[valueBytes.length - 1] == (byte) '\n') {
+            int valueLength = valueBytes.length - 1;
+            if (valueLength == 0) {
                 headers.remove(keyword);
             } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                String value = new String(valueBytes, 0, valueLength, CharsetNames.UTF_8);
                 headers.put(keyword, value);
             }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+        } else {
+            String value = new String(valueBytes, CharsetNames.UTF_8);
+            headers.put(keyword, value);
         }
     }
     return headers;
 }
\ No newline at end of file
