diff --git a/tmp/5912e4ea-58b9-4fd9-8534-d942d885ab62_buggy.java b/tmp/b53fb5e4-d79e-4085-879d-64447e6a6cc8_fixed.java
index 7e64f1d..feae2ee 100644
--- a/tmp/5912e4ea-58b9-4fd9-8534-d942d885ab62_buggy.java
+++ b/tmp/b53fb5e4-d79e-4085-879d-64447e6a6cc8_fixed.java
@@ -1,78 +1,99 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
-            else if (arg.startsWith("-"))
+        else if (arg.startsWith("--"))
         {
+            int equalIndex = arg.indexOf('=');
+            if (equalIndex != -1) {
+                String opt = Util.stripLeadingHyphens(arg.substring(0, equalIndex));
+                if (options.hasOption(opt)) {
+                    tokens.add(arg.substring(0, equalIndex));
+                    tokens.add(arg.substring(equalIndex + 1));
+                } else {
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(arg);
+                }
+            } else {
                 String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
-                {
+                if (options.hasOption(opt)) {
+                    tokens.add(arg);
+                } else {
+                    eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
             }
-                    else
+        }
+        else if (arg.startsWith("-") && arg.length() > 1)
         {
+            int equalIndex = arg.indexOf('=');
+            if (equalIndex != -1) {
+                String withoutEq = arg.substring(0, equalIndex);
+                String opt;
+                int dashCount = 0;
+                while (dashCount < withoutEq.length() && withoutEq.charAt(dashCount) == '-') {
+                    dashCount++;
+                }
+                opt = withoutEq.substring(dashCount);
+                if (options.hasOption(opt)) {
+                    tokens.add(withoutEq);
+                    tokens.add(arg.substring(equalIndex + 1));
+                } else {
+                    // Try single char: -f=bar (short option)
+                    if (withoutEq.length() == 2 && options.hasOption(opt.substring(opt.length() - 1))) {
+                        tokens.add(withoutEq);
+                        tokens.add(arg.substring(equalIndex + 1));
+                    } else if (dashCount == 1 && options.hasOption(arg.substring(1, 2))) {
+                        // For -Dproperty=value style
+                        tokens.add(arg.substring(0, 2));
+                        tokens.add(arg.substring(2));
+                    } else {
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg);
+                    }
+                }
+            } else if (arg.length() > 2 && options.hasOption(arg.substring(1, 2))) {
+                // For single dash, but more than one letter: -Dfoo
+                tokens.add(arg.substring(0, 2));
+                tokens.add(arg.substring(2));
+            } else {
+                String opt = Util.stripLeadingHyphens(arg);
+                if (options.hasOption(opt)) {
+                    tokens.add(arg);
+                } else {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
         }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
