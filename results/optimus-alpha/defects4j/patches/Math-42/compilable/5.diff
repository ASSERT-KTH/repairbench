diff --git a/tmp/b3199397-a755-4c17-83fa-e5f0a530445b_buggy.java b/tmp/3ad35df5-d48c-4f07-b747-2d5cf38d702d_fixed.java
index efa499e..7dc53a5 100644
--- a/tmp/b3199397-a755-4c17-83fa-e5f0a530445b_buggy.java
+++ b/tmp/3ad35df5-d48c-4f07-b747-2d5cf38d702d_fixed.java
@@ -1,35 +1,42 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+    Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
         // if the basic row is found to be the objective function row
         // set the coefficient to 0 -> this case handles unconstrained 
         // variables that are still part of the objective function
         if (basicRows.contains(basicRow)) {
             // if multiple variables can take a given value
             // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = 0 /*- (restrictToNonNegative ? 0 : mostNegative)*/;
         } else {
             basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
+            if (!restrictToNonNegative && negativeVarColumn >= 0) {
+                // Fix for MATH-713: if unrestricted, variables are x = x+ - x-
+                // We must adjust for the negative variable's value
+                int negativeColIndex = columnLabels.indexOf("x-" + i);
+                Integer negativeColBasicRow = negativeColIndex >= 0 ? getBasicRow(negativeColIndex) : null;
+                double negativeVal = (negativeColBasicRow == null ? 0 : getEntry(negativeColBasicRow, getRhsOffset()));
+                value = value - negativeVal;
+            }
+            coefficients[i] = value;
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
