diff --git a/tmp/da1a49e0-2498-4197-aa20-83e0ef4244a5_buggy.java b/tmp/b358f54e-d51e-4ff7-9fae-e5981b0f0cf8_fixed.java
index 56b2d66..b3cec40 100644
--- a/tmp/da1a49e0-2498-4197-aa20-83e0ef4244a5_buggy.java
+++ b/tmp/b358f54e-d51e-4ff7-9fae-e5981b0f0cf8_fixed.java
@@ -1,45 +1,67 @@
 /**
  * Removes the phase 1 objective function, positive cost non-artificial variables,
  * and the non-basic artificial variables from this tableau.
  */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
     List<Integer> columnsToDrop = new ArrayList<Integer>();
     columnsToDrop.add(0);
 
     // positive cost non-artificial variables
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
         final double entry = tableau.getEntry(0, i);
+        // FIX: exclude slack/surplus variables as well (not just those with cost > 0)
+        // Only drop those with strictly positive cost
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
     // non-basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
+        // FIX: drop only if variable is NON-BASIC *and* appears in phase 1 objective (row 0)
+        // But only non-basic artificial variables with nonzero coefficient should be removed
+        // so keep as is, but clarify comment
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+    // --- FIX: Update columnLabels correctly after transformation ---
+    // Create new matrix, only keeping columns not in columnsToDrop
+    int newWidth = getWidth() - columnsToDrop.size();
+    int newHeight = getHeight() - 1;
+    double[][] matrix = new double[newHeight][newWidth];
+
+    // Map for keeping only the remaining column labels
+    List<String> newColumnLabels = new ArrayList<String>(newWidth);
+
+    // Build the mapping from old to new columns
+    List<Integer> columnsToKeep = new ArrayList<Integer>();
     for (int j = 0; j < getWidth(); j++) {
         if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+            columnsToKeep.add(j);
         }
     }
+
+    // Copy the rows (skipping row 0)
+    for (int i = 1; i < getHeight(); i++) {
+        for (int col = 0; col < columnsToKeep.size(); col++) {
+            matrix[i - 1][col] = tableau.getEntry(i, columnsToKeep.get(col));
+        }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // Build new columnLabels
+    for (Integer idx : columnsToKeep) {
+        newColumnLabels.add(columnLabels.get(idx));
     }
 
+    // Update tableau and labels
     this.tableau = new Array2DRowRealMatrix(matrix);
+    this.columnLabels = newColumnLabels;
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
