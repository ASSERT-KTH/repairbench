diff --git a/tmp/d6c04fda-5625-4b26-b8e0-8e25d1efaed9_buggy.java b/tmp/806a164d-5a1a-4be2-8317-2f6b90d5d070_fixed.java
index 1303a19..44d03e7 100644
--- a/tmp/d6c04fda-5625-4b26-b8e0-8e25d1efaed9_buggy.java
+++ b/tmp/806a164d-5a1a-4be2-8317-2f6b90d5d070_fixed.java
@@ -1,45 +1,62 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
   // If GETPROP/GETELEM is used as assignment target the array literal is
   // acting as a temporary we can't fold it here:
   //    "[][0] += 1"
 
+  // Don't fold if we are the LHS of an assignment (or compound assignment)
+  // or increment/decrement.
+  if (parent != null &&
+        (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n
+         || NodeUtil.isIncrementOp(parent))) {
+    return n;
+  }
+
   if (right.getType() != Token.NUMBER) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
 
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
+  int numElements = 0;
+  for (Node c = left.getFirstChild(); c != null; c = c.getNext()) {
+    numElements++;
+  }
+  if (intIndex >= numElements) {
+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+    return n;
+  }
+
   Node elem = left.getFirstChild();
   for (int i = 0; elem != null && i < intIndex; i++) {
     elem = elem.getNext();
   }
 
   if (elem == null) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   if (elem.getType() == Token.EMPTY) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
 
   // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
