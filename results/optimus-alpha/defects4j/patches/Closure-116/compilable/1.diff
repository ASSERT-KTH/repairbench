diff --git a/tmp/7aaa1886-0859-4f6f-ad29-235f403a972a_buggy.java b/tmp/990ec4af-1e3d-4379-8099-b0e458294c78_fixed.java
index 233a867..13f59b1 100644
--- a/tmp/7aaa1886-0859-4f6f-ad29-235f403a972a_buggy.java
+++ b/tmp/990ec4af-1e3d-4379-8099-b0e458294c78_fixed.java
@@ -1,73 +1,71 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+      // For each named parameter check if a mutable argument is used more than one,
+      // or an argument that may have side effects is present.
       if (fnParam != null) {
         if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+          // If the argument may have side effects or may effect mutable state,
+          // and the parameter is referenced more than once in the body, do not inline.
+          if ((NodeUtil.mayHaveSideEffects(cArg, compiler) ||
+               NodeUtil.mayEffectMutableState(cArg, compiler)) &&
+              NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
-
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+      // For every call argument that does not have a corresponding parameter,
+      // check for side-effects, since extra arguments will simply be evaluated and discarded.
       if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+        // Arguments that may have side effects but are not consumed are not allowed.
+        if (fnParam == null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
