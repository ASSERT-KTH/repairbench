diff --git a/tmp/bd19d26c-81ac-4ec8-9f9a-765a5b07cae9_buggy.java b/tmp/256613b6-ce87-467e-b285-c05e2cbec6b8_fixed.java
index 233a867..0026d10 100644
--- a/tmp/bd19d26c-81ac-4ec8-9f9a-765a5b07cae9_buggy.java
+++ b/tmp/256613b6-ce87-467e-b285-c05e2cbec6b8_fixed.java
@@ -1,73 +1,85 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
+    while (fnParam != null) {
+      if (cArg != null) {
+
         // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
+        // If the parameter is assigned to in the body, then the passed-in argument
+        // is not actually mutated by the function body, so it's ok.
+        boolean paramAssigned = NodeUtil.isNameAssigned(block, fnParam.getString());
 
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+            && !paramAssigned
+            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
+
+        // If the argument has side effects and the parameter is used at all
+        // (even once) in a way that can observe the side effect, and the
+        // argument is an expression with side effects (e.g. x.prop)
+        // and the parameter is not assigned, we must not inline.
+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)
+            && !paramAssigned
+            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 0) {
+          return CanInlineResult.NO;
+        }
+
+        cArg = cArg.getNext();
+      } else {
+        // There are more parameters than arguments - safe to inline
       }
 
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+    // For extra arguments passed to the call, that aren't matched to any params,
+    // ensure that they don't have side effects, as they'll be evaluated anyway,
+    // but will be dropped in the inlining.
+    while (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
-    }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
