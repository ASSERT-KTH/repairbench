diff --git a/tmp/a2cc145f-0221-48a4-befd-a896e5abf222_buggy.java b/tmp/6c42f019-457e-44c1-9825-58dfe640af81_fixed.java
index 233a867..fb43ba7 100644
--- a/tmp/a2cc145f-0221-48a4-befd-a896e5abf222_buggy.java
+++ b/tmp/6c42f019-457e-44c1-9825-58dfe640af81_fixed.java
@@ -1,73 +1,90 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+      // For each named parameter check if a mutable argument use more than once.
       if (fnParam != null) {
         if (cArg != null) {
-
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
+          if (NodeUtil.mayHaveSideEffects(cArg, compiler) &&
+              NodeUtil.getNameReferenceCount(
+                  block, fnParam.getString()) > 1) {
+            return CanInlineResult.NO;
+          }
+          // Parameter is only referenced once â‡’
+          // Check if the argument mutates state, AND
+          // there are any side effects at all (not just on mutable state).
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+                  block, fnParam.getString()) > 0) {
+            // It's only ok to inline if the parameter appears in a "simple mutable" context
+            // That is, the *parameter* itself, not what it refers to, is written to,
+            // like a.x=2 or a[0]=2, is ok, but a=modifiesSomething() or foo(a, a) is not.
+
+            // Determine if all references to this parameter in function are simply property or element assignment lhs.
+            // For now, we conservatively refuse inlining mutable expressions for parameters used in anything other than a.x= or a[expr]=
+            if (!NodeUtil.areParameterReferencesOnlyAssignedToProperties(block, fnParam.getString())) {
               return CanInlineResult.NO;
             }
           }
+        }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          // If there are excess arguments (more than parameters) and they have side effects, cannot inline.
+          if (fnParam == null) {
             return CanInlineResult.NO;
           }
+        }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
