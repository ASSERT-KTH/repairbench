diff --git a/tmp/b00aafdb-1a10-4587-a9cd-5c910377a1e3_buggy.java b/tmp/6caf6632-2896-412f-8a82-fe02d9fc0ba9_fixed.java
index 233a867..1e6d217 100644
--- a/tmp/b00aafdb-1a10-4587-a9cd-5c910377a1e3_buggy.java
+++ b/tmp/6caf6632-2896-412f-8a82-fe02d9fc0ba9_fixed.java
@@ -1,73 +1,88 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+
+          // Only arguments that are references count for this check
+          // (i.e., actual used parameters).
+          int refCount = NodeUtil.getNameReferenceCount(
+                  block, fnParam.getString());
+
+          // Check if the parameter is used more than once and may
+          // have externally visible effects if executed multiple times.
+          if (refCount > 1 && NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+            return CanInlineResult.NO;
+          }
+
+          // New: do not inline if argument may affect mutable state AND parameter is read anywhere
+          // (not just if referenced more than once)
+          // But allow if the only mutation is an assignment to the parameter itself (i.e. a.x=2)
+          if (refCount > 0 &&
+              NodeUtil.mayEffectMutableState(cArg, compiler) &&
+              !NodeUtil.isNameDeclaration(cArg) &&
+              !NodeUtil.isAssignmentToName(cArg, fnParam.getString())) {
             return CanInlineResult.NO;
           }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+        if (fnParam == null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          // Don't allow extra arguments with side effects if the function does not declare parameters for them
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
