diff --git a/tmp/e386e332-4c86-4bfe-8c0b-7e4454e4c35b_buggy.java b/tmp/9adeb7db-0086-49f9-93d2-b0bec43de09a_fixed.java
index bf9bb88..3d04483 100644
--- a/tmp/e386e332-4c86-4bfe-8c0b-7e4454e4c35b_buggy.java
+++ b/tmp/9adeb7db-0086-49f9-93d2-b0bec43de09a_fixed.java
@@ -1,108 +1,140 @@
   /**
    * Computes the follow() node of a given node and its parent. There is a side
    * effect when calling this function. If this function computed an edge that
    * exists a FINALLY, it'll attempt to connect the fromNode to the outer
    * FINALLY according to the finallyMap.
    *
    * @param fromNode The original source node since {@code node} is changed
    *        during recursion.
    * @param node The node that follow() should compute.
    */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
     /*
      * This is the case where:
      *
      * 1. Parent is null implies that we are transferring control to the end of
      * the script.
      *
      * 2. Parent is a function implies that we are transferring control back to
      * the caller of the function.
      *
      * 3. If the node is a return statement, we should also transfer control
      * back to the caller of the function.
      *
      * 4. If the node is root then we have reached the end of what we have been
      * asked to traverse.
      *
      * In all cases we should transfer control to a "symbolic return" node.
      * This will make life easier for DFAs.
      */
     Node parent = node.getParent();
     if (parent == null || parent.isFunction() ||
         (cfa != null && node == cfa.root)) {
       return null;
     }
 
     // If we are just before a IF/WHILE/DO/FOR:
     switch (parent.getType()) {
       // The follow() of any of the path from IF would be what follows IF.
       case Token.IF:
         return computeFollowNode(fromNode, parent, cfa);
       case Token.CASE:
       case Token.DEFAULT_CASE:
         // After the body of a CASE, the control goes to the body of the next
         // case, without having to go to the case condition.
         if (parent.getNext() != null) {
           if (parent.getNext().isCase()) {
             return parent.getNext().getFirstChild().getNext();
           } else if (parent.getNext().isDefaultCase()) {
             return parent.getNext().getFirstChild();
           } else {
             Preconditions.checkState(false, "Not reachable");
           }
         } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
         break;
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
           return parent;
         } else {
           return parent.getFirstChild().getNext().getNext();
         }
       case Token.WHILE:
       case Token.DO:
         return parent;
       case Token.TRY:
         // If we are coming out of the TRY block...
         if (parent.getFirstChild() == node) {
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
             return computeFallThrough(parent.getLastChild());
           } else { // and have no FINALLY.
             return computeFollowNode(fromNode, parent, cfa);
           }
         // CATCH block.
         } else if (NodeUtil.getCatchBlock(parent) == node){
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
             return computeFallThrough(node.getNext());
           } else {
             return computeFollowNode(fromNode, parent, cfa);
           }
         // If we are coming out of the FINALLY block...
         } else if (parent.getLastChild() == node){
           if (cfa != null) {
-            for (Node finallyNode : cfa.finallyMap.get(parent)) {
+            List<Node> finallyNodes = cfa.finallyMap.get(parent);
+            if (finallyNodes != null) {
+              for (Node finallyNode : finallyNodes) {
                 cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
               }
             }
+          }
+          // <--- BUG FIX: do NOT fall through straight to parent's follow if there's another finally node outside.
+          // Instead, look for any enclosing finally blocks and create edges accordingly.
+          // To allow proper cross edges for deep nested finallys,
+          // we still need to return computeFollowNode(fromNode, parent, cfa);
           return computeFollowNode(fromNode, parent, cfa);
         }
     }
 
     // Now that we are done with the special cases follow should be its
     // immediate sibling, unless its sibling is a function
     Node nextSibling = node.getNext();
 
     // Skip function declarations because control doesn't get pass into it.
     while (nextSibling != null && nextSibling.isFunction()) {
       nextSibling = nextSibling.getNext();
     }
 
     if (nextSibling != null) {
       return computeFallThrough(nextSibling);
     } else {
       // If there are no more siblings, control is transferred up the AST.
+      // ---- BEGIN PATCH ----
+      // When propagating up, if leaving a node that is in a FINALLY, before returning,
+      // create cross edges to any enclosing FINALLY nodes (deep nested finally support).
+      // Try block returns here when out of siblings, so this reuses above logic.
+      Node ancestor = parent;
+      Node child = node;
+      while (ancestor != null &&
+             ancestor.getType() != Token.FUNCTION &&
+             (cfa == null || ancestor != cfa.root)) {
+        if (ancestor.getType() == Token.TRY &&
+            NodeUtil.hasFinally(ancestor) &&
+            ancestor.getLastChild() != child) {
+          if (cfa != null) {
+            List<Node> finallyNodes = cfa.finallyMap.get(ancestor);
+            if (finallyNodes != null) {
+              for (Node finallyNode : finallyNodes) {
+                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
+              }
+            }
+          }
+        }
+        child = ancestor;
+        ancestor = ancestor.getParent();
+      }
+      // ---- END PATCH ----
       return computeFollowNode(fromNode, parent, cfa);
     }
   }
\ No newline at end of file
