diff --git a/tmp/cc6b44f1-392e-42bd-b004-3ba6932d069b_buggy.java b/tmp/7d263889-4a2b-4a99-ad65-b6b3e00d756b_fixed.java
index 5f96616..30fde68 100644
--- a/tmp/cc6b44f1-392e-42bd-b004-3ba6932d069b_buggy.java
+++ b/tmp/7d263889-4a2b-4a99-ad65-b6b3e00d756b_fixed.java
@@ -1,20 +1,23 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
+  // Unwrap unions, as a constraint for a param may be a union
+  if (constraint.isUnionType()) {
+    for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+      // Only match record type constraints
+      if (alternate.isRecordType()) {
+        matchRecordTypeConstraint(alternate.toObjectType());
+      }
+    }
+    return;
+  }
+
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
