diff --git a/tmp/219c48ff-4939-4e6e-acee-4deed0583bd6_buggy.java b/tmp/5f109d6e-a3ca-4c95-ac83-b337336fb54f_fixed.java
index 5f96616..06c53dc 100644
--- a/tmp/219c48ff-4939-4e6e-acee-4deed0583bd6_buggy.java
+++ b/tmp/5f109d6e-a3ca-4c95-ac83-b337336fb54f_fixed.java
@@ -1,20 +1,28 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
+  // Unwrap unions for matching record constraints
+  if (constraint.isUnionType()) {
+    for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+      matchConstraint(alt);
+    }
+    return;
+  }
+
   // Handle the case where the constraint object is a record type.
   //
   // param constraint {{prop: (number|undefined)}}
   // function f(constraint) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
