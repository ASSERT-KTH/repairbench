diff --git a/tmp/87212759-0d63-46da-a82b-de2e19d16cfa_buggy.java b/tmp/493f3ac3-6f71-4a05-984f-6eab371df245_fixed.java
index 0722547..729d2d4 100644
--- a/tmp/87212759-0d63-46da-a82b-de2e19d16cfa_buggy.java
+++ b/tmp/493f3ac3-6f71-4a05-984f-6eab371df245_fixed.java
@@ -1,26 +1,29 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
         _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
     // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
     // Time to update pointers first
     _currInputProcessed += _origBufferLen;
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+    /* Fix: when not all prior input was consumed (meaning _inputPtr > _inputEnd is false when we get here), 
+     * but with start != 0, we must NOT just set _currInputRowStart relative only to row start,
+     * but instead must move its origin to 0 of new buffer, matching how parser interprets new input.
+     */
+    _currInputRowStart = -start + _currInputRowStart;
 
     // And then update buffer settings
     _inputBuffer = buf;
     _inputPtr = start;
     _inputEnd = end;
     _origBufferLen = end - start;
 }
\ No newline at end of file
