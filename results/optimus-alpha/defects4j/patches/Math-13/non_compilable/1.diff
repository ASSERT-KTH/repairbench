diff --git a/tmp/a4c577b0-71e4-476c-9544-e66b2534413d_buggy.java b/tmp/a37b2c9a-ce1f-4788-b8dc-760e0694063d_fixed.java
index 4e21866..539a21f 100644
--- a/tmp/a4c577b0-71e4-476c-9544-e66b2534413d_buggy.java
+++ b/tmp/a37b2c9a-ce1f-4788-b8dc-760e0694063d_fixed.java
@@ -1,10 +1,28 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    // For diagonal matrices, take square roots of diagonal entries directly for efficiency.
+    if (m instanceof DiagonalMatrix) {
+        double[] diag = ((DiagonalMatrix) m).getData();
+        double[] sqrtDiag = new double[diag.length];
+        for (int i = 0; i < diag.length; ++i) {
+            sqrtDiag[i] = Math.sqrt(diag[i]);
+        }
+        return new DiagonalMatrix(sqrtDiag);
+    }
+
+    // For non-diagonal, use EigenDecomposition
     final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+    // For efficiency: manually construct square-root matrix from eigen data
+    final RealMatrix V = dec.getV();
+    final RealMatrix D = dec.getD();
+    // Replace D with its square root
+    for (int i = 0; i < D.getRowDimension(); ++i) {
+        D.setEntry(i, i, Math.sqrt(D.getEntry(i, i)));
+    }
+    return V.multiply(D).multiply(V.transpose());
 }
\ No newline at end of file
