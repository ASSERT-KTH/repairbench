diff --git a/tmp/1c10a6d1-2522-4175-8e5d-aece0a94531c_buggy.java b/tmp/78452794-3d98-465f-b6e6-5f91caf98cc4_fixed.java
index 99d6a44..78f5168 100644
--- a/tmp/1c10a6d1-2522-4175-8e5d-aece0a94531c_buggy.java
+++ b/tmp/78452794-3d98-465f-b6e6-5f91caf98cc4_fixed.java
@@ -1,58 +1,88 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
+
+        // --- START FIX FOR WEEKYEAR/YEAR + MONTH + WEEK parsing ---
+        if (count > 0) {
+            // If pattern of fields is: (weekyear|year), monthOfYear, weekOfWeekyear
+            DateTimeFieldType t0 = savedFields[0].iFieldType;
+            if ((t0 == DateTimeFieldType.weekyear() || t0 == DateTimeFieldType.year()) && count >= 3) {
+                DateTimeFieldType t1 = savedFields[1].iFieldType;
+                DateTimeFieldType t2 = savedFields[2].iFieldType;
+                if (t1 == DateTimeFieldType.monthOfYear() && t2 == DateTimeFieldType.weekOfWeekyear()) {
+                    // Find correct year
+                    int year = savedFields[0].iValue;
+                    int month = savedFields[1].iValue;
+                    int week = savedFields[2].iValue;
+
+                    // The parsed week belongs to the week-based year (iso), given by year in the string,
+                    // but parsed DateTime constructs from calendar fields. We must find the actual
+                    // local date corresponding to that weekOfWeekyear of that weekyear.
+                    // The LocalDate constructor LocalDate(weekyear, weekOfWeekyear, 1) gives
+                    // the first day of that week in that weekyear, but our string has a month field,
+                    // so user expects the result that matches that month for that string, which is
+                    // the first day of the weekOfWeekyear in that month for that weekyear.
+                    // However, as per ISO, Jan 1 may belong to another weekyear.
+
+                    // Instead, for correct behavior, we should set the default year to the parsed year.
+                    iDefaultYear = year;
+                }
+            }
+        }
+        // --- END FIX FOR WEEKYEAR/YEAR + MONTH + WEEK parsing ---
+
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
