diff --git a/tmp/b30d2150-febf-4108-ae8c-1ca8bb5f26a6_buggy.java b/tmp/f2820c7d-5bb1-4a4b-b82a-adf4eb5f43a3_fixed.java
index 99d6a44..2969add 100644
--- a/tmp/b30d2150-febf-4108-ae8c-1ca8bb5f26a6_buggy.java
+++ b/tmp/f2820c7d-5bb1-4a4b-b82a-adf4eb5f43a3_fixed.java
@@ -1,58 +1,79 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+
+    // Fix: Only save default year if a year field is not present, or if the earliest saved field has duration 
+    // less than year. This allows correct LocalDate construction in cases involving weekyear-related parse patterns.
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
+        DurationField first = savedFields[0].iField.getDurationField();
+
+        // Check if a year-related field is present
+        boolean hasYearField = false;
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType type = savedFields[i].iFieldType;
+            if (type == DateTimeFieldType.year() ||
+                type == DateTimeFieldType.yearOfEra() ||
+                type == DateTimeFieldType.weekyear()) {
+                hasYearField = true;
+                break;
+            }
+        }
+
+        // Only insert default year if no year-type field is present and a precision > months (i.e. month or day)
+        // appears first
+        if (!hasYearField) {
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
+            // In original code: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0)
+            // However, this assumes saved fields only for months and days, which is wrong when a year is specified.
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
+    }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
