diff --git a/tmp/86446453-d12c-4f6e-a508-863009eacd35_buggy.java b/tmp/e84be21e-e356-427f-a611-e8537a4b4376_fixed.java
index 0e110fe..2a3b293 100644
--- a/tmp/86446453-d12c-4f6e-a508-863009eacd35_buggy.java
+++ b/tmp/e84be21e-e356-427f-a611-e8537a4b4376_fixed.java
@@ -1,96 +1,83 @@
-  /** Build the rotation that transforms a pair of vector into another pair.
-
-   * <p>Except for possible scale factors, if the instance were applied to
-   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
-   * (v<sub>1</sub>, v<sub>2</sub>).</p>
-
-   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
-   * not the same as the angular separation between v<sub>1</sub> and
-   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
-   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
-   * v<sub>2</sub>) plane.</p>
-
-   * @param u1 first vector of the origin pair
-   * @param u2 second vector of the origin pair
-   * @param v1 desired image of u1 by the rotation
-   * @param v2 desired image of u2 by the rotation
-   * @exception IllegalArgumentException if the norm of one of the vectors is zero
-   */
   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
         throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+    // normalize u1, u2, v1, v2 for safety
+    Vector3D u1n = u1.normalize();
+    Vector3D u2n = u2.normalize();
+    Vector3D v1n = v1.normalize();
+    Vector3D v2n = v2.normalize();
 
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
+    // Orthonormal basis from u1, u2
+    Vector3D u3 = u1n.crossProduct(u2n).normalize();
+    Vector3D u2orth = u3.crossProduct(u1n).normalize();
 
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
+    // Orthonormal basis from v1, v2
+    Vector3D v3 = v1n.crossProduct(v2n).normalize();
+    Vector3D v2orth = v3.crossProduct(v1n).normalize();
 
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+    // Rotation matrix from u-basis to v-basis: vMat = rot * uMat => rot = vMat * uMat^T
+    // Build matrices whose columns are the basis vectors
+    double[][] uMat = new double[3][3];
+    double[][] vMat = new double[3][3];
+    uMat[0][0] = u1n.getX(); uMat[1][0] = u1n.getY(); uMat[2][0] = u1n.getZ();
+    uMat[0][1] = u2orth.getX(); uMat[1][1] = u2orth.getY(); uMat[2][1] = u2orth.getZ();
+    uMat[0][2] = u3.getX(); uMat[1][2] = u3.getY(); uMat[2][2] = u3.getZ();
 
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
-        return;
-      }
-
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
+    vMat[0][0] = v1n.getX(); vMat[1][0] = v1n.getY(); vMat[2][0] = v1n.getZ();
+    vMat[0][1] = v2orth.getX(); vMat[1][1] = v2orth.getY(); vMat[2][1] = v2orth.getZ();
+    vMat[0][2] = v3.getX(); vMat[1][2] = v3.getY(); vMat[2][2] = v3.getZ();
 
+    // rotMat = vMat * uMat^T
+    double[][] rotMat = new double[3][3];
+    for (int i = 0; i < 3; ++i) {
+      for (int j = 0; j < 3; ++j) {
+        rotMat[i][j] = 0.0;
+        for (int k = 0; k < 3; ++k) {
+          rotMat[i][j] += vMat[i][k] * uMat[j][k];
+        }
       }
-
     }
 
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
-
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    // Now convert rotMat to quaternion
+    double trace = rotMat[0][0] + rotMat[1][1] + rotMat[2][2];
+    if (trace > 0) {
+      double s = FastMath.sqrt(trace + 1.0) * 2; // s=4*q0
+      q0 = 0.25 * s;
+      q1 = (rotMat[2][1] - rotMat[1][2]) / s;
+      q2 = (rotMat[0][2] - rotMat[2][0]) / s;
+      q3 = (rotMat[1][0] - rotMat[0][1]) / s;
+    } else if ((rotMat[0][0] > rotMat[1][1]) && (rotMat[0][0] > rotMat[2][2])) {
+      double s = FastMath.sqrt(1.0 + rotMat[0][0] - rotMat[1][1] - rotMat[2][2]) * 2; // s=4*q1
+      q0 = (rotMat[2][1] - rotMat[1][2]) / s;
+      q1 = 0.25 * s;
+      q2 = (rotMat[0][1] + rotMat[1][0]) / s;
+      q3 = (rotMat[0][2] + rotMat[2][0]) / s;
+    } else if (rotMat[1][1] > rotMat[2][2]) {
+      double s = FastMath.sqrt(1.0 + rotMat[1][1] - rotMat[0][0] - rotMat[2][2]) * 2; // s=4*q2
+      q0 = (rotMat[0][2] - rotMat[2][0]) / s;
+      q1 = (rotMat[0][1] + rotMat[1][0]) / s;
+      q2 = 0.25 * s;
+      q3 = (rotMat[1][2] + rotMat[2][1]) / s;
+    } else {
+      double s = FastMath.sqrt(1.0 + rotMat[2][2] - rotMat[0][0] - rotMat[1][1]) * 2; // s=4*q3
+      q0 = (rotMat[1][0] - rotMat[0][1]) / s;
+      q1 = (rotMat[0][2] + rotMat[2][0]) / s;
+      q2 = (rotMat[1][2] + rotMat[2][1]) / s;
+      q3 = 0.25 * s;
+    }
 
+    // Ensure the quaternion is normalized
+    double norm = FastMath.sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);
+    q0 /= norm;
+    q1 /= norm;
+    q2 /= norm;
+    q3 /= norm;
   }
\ No newline at end of file
