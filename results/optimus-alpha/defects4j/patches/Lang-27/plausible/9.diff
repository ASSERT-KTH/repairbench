diff --git a/tmp/2804e6ed-fa51-4de3-b7ec-cbeafbf94f51_buggy.java b/tmp/e7cf6ed4-be7e-44fc-81b1-52fd0e9ba672_fixed.java
index da3f951..7843ceb 100644
--- a/tmp/2804e6ed-fa51-4de3-b7ec-cbeafbf94f51_buggy.java
+++ b/tmp/e7cf6ed4-be7e-44fc-81b1-52fd0e9ba672_fixed.java
@@ -1,174 +1,163 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>First, the value is examined for a type qualifier on the end
-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-     * <code>BigDecimal</code>.</p>
-     *
-     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
-     * will be interpreted as a hexadecimal integer.  Values with leading
-     * <code>0</code>'s will not be interpreted as octal.</p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string
-     * @throws NumberFormatException if the value cannot be converted
-     */
 public static Number createNumber(String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear 
         // to be in specification of class. OS X Java parses it to 
         // a wrong value.
         return null;
     }
     if (str.startsWith("0x") || str.startsWith("-0x")) {
         return createInteger(str);
     }
     char lastChar = str.charAt(str.length() - 1);
     String mant;
-        String dec;
-        String exp;
+    String dec = null;
+    String exp = null;
     int decPos = str.indexOf('.');
-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    int expPosE = str.indexOf('E');
+    int expPose = str.indexOf('e');
+    int expPos = (expPose > -1 ? expPose : expPosE);
 
     if (decPos > -1) {
 
         if (expPos > -1) {
             if (expPos < decPos) {
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             dec = str.substring(decPos + 1, expPos);
+            mant = str.substring(0, decPos);
+            exp = str.substring(expPos + 1, str.length());
         } else {
             dec = str.substring(decPos + 1);
-            }
             mant = str.substring(0, decPos);
+        }
     } else {
         if (expPos > -1) {
             mant = str.substring(0, expPos);
+            exp = str.substring(expPos + 1, str.length());
         } else {
             mant = str;
         }
-            dec = null;
     }
     if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
+        String expDigits = null;
+        if ((expPos > -1) && (expPos < str.length() - 1)) {
+            expDigits = str.substring(expPos + 1, str.length() - 1);
         }
-            //Requesting a specific type..
+        boolean allZeros = isAllZeros(mant) && isAllZeros(expDigits);
         String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
         switch (lastChar) {
             case 'l':
             case 'L':
-                    if (dec == null
-                        && exp == null
+                if (dec == null && (exp == null || (expDigits != null && expDigits.length() == 0))
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (NumberFormatException nfe) {
                         // Too big for a long
                     }
+                    try {
                         return createBigInteger(numeric);
-
+                    } catch (NumberFormatException nfe) {
+                        // Can't parse as long or biginteger
+                    }
                 }
                 throw new NumberFormatException(str + " is not a valid number.");
             case 'f':
             case 'F':
                 try {
                     Float f = NumberUtils.createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
-                    //$FALL-THROUGH$
+                // try Double, then BigDecimal
+                try {
+                    Double d = NumberUtils.createDouble(numeric);
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                        return d;
+                    }
+                } catch (NumberFormatException nfe) {
+                    // ignore the bad number
+                }
+                try {
+                    return createBigDecimal(numeric);
+                } catch (NumberFormatException e) {
+                    // ignore the bad number
+                }
+                throw new NumberFormatException(str + " is not a valid number.");
             case 'd':
             case 'D':
                 try {
                     Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     return createBigDecimal(numeric);
                 } catch (NumberFormatException e) {
                     // ignore the bad number
                 }
-                    //$FALL-THROUGH$
+                throw new NumberFormatException(str + " is not a valid number.");
             default:
                 throw new NumberFormatException(str + " is not a valid number.");
-
         }
     } else {
         // User doesn't have a preference on the return type, so let's start
         // small and go from there...
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
-            } else {
-                exp = null;
-            }
+        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+            // Must be an int, long, or bigint
             try {
                 return createInteger(str);
             } catch (NumberFormatException nfe) {
                 // ignore the bad number
             }
             try {
                 return createLong(str);
             } catch (NumberFormatException nfe) {
                 // ignore the bad number
             }
+            try {
                 return createBigInteger(str);
-
+            } catch (NumberFormatException nfe) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
         } else {
-                //Must be a float,double,BigDec
-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // Must be a float, double, or BigDecimal
             try {
                 Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
             } catch (NumberFormatException nfe) {
                 // ignore the bad number
             }
             try {
                 Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
             } catch (NumberFormatException nfe) {
                 // ignore the bad number
             }
-
+            try {
                 return createBigDecimal(str);
-
+            } catch (NumberFormatException nfe) {
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
         }
     }
 }
\ No newline at end of file
