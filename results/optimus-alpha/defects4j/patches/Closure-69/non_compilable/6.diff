diff --git a/tmp/0614a7ad-71da-49fb-b8bc-cd316731aa27_buggy.java b/tmp/55bc06b4-0ee6-444f-9313-b52c188ddffc_fixed.java
index bf9c086..8f4a499 100644
--- a/tmp/0614a7ad-71da-49fb-b8bc-cd316731aa27_buggy.java
+++ b/tmp/55bc06b4-0ee6-444f-9313-b52c188ddffc_fixed.java
@@ -1,54 +1,69 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if (functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+        isExtern = functionSource != null && functionSource.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
+      // Functions with explicit 'this' types must be called in a GETPROP
       // or GETELEM.
+      if (functionType.hasThisType() &&
+          !functionType.getTypeOfThis().isUnknownType()) {
+        Node fnTarget = n.getFirstChild();
+        Token targetType = fnTarget.getType();
+        if (targetType != Token.GETPROP && targetType != Token.GETELEM) {
+          // For conditional expressions, e.g., (a?x:y)(), neither side is
+          // necessarily accessed as a property, so both function values
+          // must be checked independently (we allow them if both are
+          // property accesses). But JavaScript expressions may build a function
+          // value in additional ways (e.g., via assignment), so a general
+          // rule is to only allow property accesses.
+          // See: https://github.com/google/closure-compiler/issues/553
+          report(t, n, MUST_BE_CALLED_WITH_NEW, functionType.toString());
+        }
+      }
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
