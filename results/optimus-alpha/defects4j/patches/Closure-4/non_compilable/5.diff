diff --git a/tmp/a7714c27-e25c-46cc-aaf4-e5a85faea131_buggy.java b/tmp/e691ca15-b58d-4d15-ade8-a737e47ea507_fixed.java
index d6a560a..10ee1d6 100644
--- a/tmp/a7714c27-e25c-46cc-aaf4-e5a85faea131_buggy.java
+++ b/tmp/e691ca15-b58d-4d15-ade8-a737e47ea507_fixed.java
@@ -1,33 +1,46 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
   // TODO(user): Investigate whether it is really necessary to keep two
   // different mechanisms for resolving named types, and if so, which order
   // makes more sense. Now, resolution via registry is first in order to
   // avoid triggering the warnings built into the resolution via properties.
+
+  // Mark this type as resolving to detect cycles.
+  if (isResolving()) {
+    // This type is already being resolved, so we've detected a cycle.
+    handleTypeCycle(t);
+    return this;
+  }
+
+  setResolving(true);
+  try {
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
+  } finally {
+    setResolving(false);
+  }
 }
\ No newline at end of file
