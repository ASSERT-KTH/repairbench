diff --git a/tmp/77806792-9aba-4657-8031-06dd04268c85_buggy.java b/tmp/bc138a42-b79c-4fba-bec8-a7f544734d4d_fixed.java
index d6a560a..1d6b138 100644
--- a/tmp/77806792-9aba-4657-8031-06dd04268c85_buggy.java
+++ b/tmp/bc138a42-b79c-4fba-bec8-a7f544734d4d_fixed.java
@@ -1,33 +1,43 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+  // Prevent infinite recursion by tracking resolution state.
+  if (isResolved() || isBeingResolved) {
+    // Already resolved, or currently being resolved, to prevent cycles.
+    return this;
+  }
+  isBeingResolved = true;
+  try {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
+  } finally {
+    isBeingResolved = false;
+  }
 }
\ No newline at end of file
