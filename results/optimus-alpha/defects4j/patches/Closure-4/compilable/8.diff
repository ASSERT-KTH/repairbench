diff --git a/tmp/b933dfd1-eef1-4e04-a6b3-29e3d2687c74_buggy.java b/tmp/d371339f-4f9e-4331-b5ea-c2cc5c749c17_fixed.java
index d6a560a..81bbe07 100644
--- a/tmp/b933dfd1-eef1-4e04-a6b3-29e3d2687c74_buggy.java
+++ b/tmp/d371339f-4f9e-4331-b5ea-c2cc5c749c17_fixed.java
@@ -1,33 +1,36 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // Use the registry resolution first to avoid property-warnings.
   boolean resolved = resolveViaRegistry(t, enclosing);
+
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // After handling cycle, don't keep resolving as it may cause recursion.
+    // If a cycle is detected and handled, we should return to prevent stack overflow.
+    return this;
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // After handling cycle, don't keep resolving as it may cause recursion.
+    return this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
