diff --git a/tmp/ed4cfcc5-2c1c-440e-ba9c-07aaef3f2845_buggy.java b/tmp/cd5ef9c5-d1e9-49d7-bb5f-c93c773abf84_fixed.java
index d6a560a..54f23e8 100644
--- a/tmp/ed4cfcc5-2c1c-440e-ba9c-07aaef3f2845_buggy.java
+++ b/tmp/cd5ef9c5-d1e9-49d7-bb5f-c93c773abf84_fixed.java
@@ -1,33 +1,43 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
   // TODO(user): Investigate whether it is really necessary to keep two
   // different mechanisms for resolving named types, and if so, which order
   // makes more sense. Now, resolution via registry is first in order to
   // avoid triggering the warnings built into the resolution via properties.
+
+  // Check for prototype cycles BEFORE doing anything else to avoid
+  // infinite recursion in pathological cases (e.g. self-referential typedefs/
+  // implements).
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+    // After handling the cycle, return this to avoid infinite recursion.
+    return this;
+  }
+
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
   resolveViaProperties(t, enclosing);
+
+  // Check again for prototype cycles AFTER resolveViaProperties.
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
