diff --git a/tmp/01b06891-633a-4fb5-98c3-deb539622385_buggy.java b/tmp/6365dead-d9b9-4026-83b9-263f79a0b21b_fixed.java
index 71189c3..593b1e7 100644
--- a/tmp/01b06891-633a-4fb5-98c3-deb539622385_buggy.java
+++ b/tmp/6365dead-d9b9-4026-83b9-263f79a0b21b_fixed.java
@@ -1,46 +1,62 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
+            // Only re-validate if we haven't just validated it above
+            // Don't double validate if 'validate' was already true
+            if (!validate) {
                 option.validate(commandLine);
             }
         }
+    }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
+        // Only pass the raw value from the commandLine for validation
+        Object value = commandLine.getValue(option);
+        if (option instanceof Argument && value != null) {
+            if (value instanceof List) {
+                for (Object v : (List<?>)value) {
+                    ((Argument)option).getValidator().validate(option, v);
+                }
+            } else {
+                ((Argument)option).getValidator().validate(option, value);
+            }
+        } else {
             option.validate(commandLine);
         }
     }
+}
\ No newline at end of file
