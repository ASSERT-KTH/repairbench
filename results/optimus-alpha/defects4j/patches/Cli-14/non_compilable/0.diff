diff --git a/tmp/4c55bbee-2fe9-4424-b4e5-1d457877bb6e_buggy.java b/tmp/00d0b819-02b2-4525-859e-542a46f9c45a_fixed.java
index 71189c3..3849e69 100644
--- a/tmp/4c55bbee-2fe9-4424-b4e5-1d457877bb6e_buggy.java
+++ b/tmp/00d0b819-02b2-4525-859e-542a46f9c45a_fixed.java
@@ -1,46 +1,60 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
+            // Validate all values for this option (by argument)
+            if (option.getArgument() != null) {
+                Argument argument = option.getArgument();
+                List values = commandLine.getValues(option);
+                if (values != null) {
+                    for (Object value : values) {
+                        // Only validate if the value is not null
+                        if (value != null) {
+                            argument.validate(commandLine, value);
+                        }
+                    }
+                }
+            }
+
             option.validate(commandLine);
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
