diff --git a/tmp/e61a4cb8-6906-428f-94bc-44a8a1f9770a_buggy.java b/tmp/050ab195-ec42-49c0-84f0-27909d9ca752_fixed.java
index a3709ee..badb11d 100644
--- a/tmp/e61a4cb8-6906-428f-94bc-44a8a1f9770a_buggy.java
+++ b/tmp/050ab195-ec42-49c0-84f0-27909d9ca752_fixed.java
@@ -1,71 +1,80 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
       // A result that is aliased by a non-local name, is the effectively the
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
+      // For plain assignment x=y, it is only local if the RV is immutable.
+      // For assignment ops (+=, -=, etc.), result is always a local value.
+      if (isAssignmentOp(value)) {
+        // assignment ops (+=, -=, etc) always produce a local value
+        return true;
+      }
       return NodeUtil.isImmutableValue(value.getLastChild())
           || (locals.apply(value)
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
       return evaluatesToLocalValue(value.getFirstChild(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // Pre-increment returns a primitive number, so always local
+      // Post-increment returns the previous RValue, so only local if the operand is local.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        // Prefix form (++x, --x): always local value, as it's a number
+        return true;
       } else {
-          return true;
+        // Postfix form (x++, x--): value returned is value of operand before modification
+        return false;
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
       // There is no information about the locality of object properties.
-        return locals.apply(value);
+      return false;
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // user-defined object, may be aliased (e.g., returned from a function),
+      // so must assume not local in general.
+      return false;
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literal objects with non-literal children are allowed.
       return true;
     case Token.IN:
       // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
       return true;
     default:
-        // Other op force a local value:
+      // Other ops force a local value:
       //  x = '' + g (x is now an local string)
       //  x -= g (x is now an local number)
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
 
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
