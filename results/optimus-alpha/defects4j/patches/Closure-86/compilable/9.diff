diff --git a/tmp/6d2c08e7-e2e9-40be-88a9-b5a11b9a93f3_buggy.java b/tmp/6401e71e-939a-475d-9ac7-04361fd49e0b_fixed.java
index a3709ee..794fc7e 100644
--- a/tmp/6d2c08e7-e2e9-40be-88a9-b5a11b9a93f3_buggy.java
+++ b/tmp/6401e71e-939a-475d-9ac7-04361fd49e0b_fixed.java
@@ -1,71 +1,76 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
       // A result that is aliased by a non-local name, is the effectively the
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+      // Only assignment of immutable values are local.
+      // e.g., x = 1; // local, x=arr; // not local
+      return NodeUtil.isImmutableValue(value.getLastChild());
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
       return evaluatesToLocalValue(value.getFirstChild(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
+      // the "then" and "else" branches
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // Only pre-increment and decrement force a local result.
+      // Post-increment/decrement may return a non-local value.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
-          return true;
+        return false;
       }
     case Token.THIS:
+      // "this" is never local, unless overridden via locals predicate.
+      // In practice, locals will only match function expressions, not THIS.
       return locals.apply(value);
     case Token.NAME:
+      // Immutable values and explicit locals allowed, but plain NAME is non-local.
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
       // There is no information about the locality of object properties.
+      // So unless the predicate matches, we don't treat them as local.
       return locals.apply(value);
     case Token.CALL:
+      // Calls can only be considered local if we're very sure.
+      // Only certain patterns allowed.
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // "new" is NOT known local unless predicate says so.
+      // e.g. new A() could leak itself (this) from constructor.
+      return locals.apply(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literal objects with non-literal children are allowed.
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // "in" results in a boolean, always a local primitive
       return true;
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Operators and literals: force a local value
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
