diff --git a/tmp/7a54221e-47ce-489c-a619-190a4b680944_buggy.java b/tmp/fb5026d3-3f8c-406a-b66f-fd5d269f3c93_fixed.java
index a3709ee..c0cf22b 100644
--- a/tmp/7a54221e-47ce-489c-a619-190a4b680944_buggy.java
+++ b/tmp/fb5026d3-3f8c-406a-b66f-fd5d269f3c93_fixed.java
@@ -1,71 +1,102 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+        // For simple assignment (=):
+        // The variable might be aliased; only known immutables on the right are local.
+        // For compound assignment (+=, -=, etc.), the result is always local (number, string, boolean).
+        if (isAssignmentOp(value) && value.getType() != Token.ASSIGN) {
+          // Assignment ops always yield a primitive and thus local.
+          return true;
+        }
+        // For simple assignment
+        Node rhs = value.getLastChild();
+        return NodeUtil.isImmutableValue(rhs);
+
       case Token.COMMA:
+        // Only the rightmost expression in a comma matters for locality.
         return evaluatesToLocalValue(value.getLastChild(), locals);
+
       case Token.AND:
       case Token.OR:
+        // Both sides must evaluate to local values.
         return evaluatesToLocalValue(value.getFirstChild(), locals)
             && evaluatesToLocalValue(value.getLastChild(), locals);
+
       case Token.HOOK:
-        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
-           && evaluatesToLocalValue(value.getLastChild(), locals);
+        // Only the 'then' and 'else' branch values matter.
+        // cond ? expr1 : expr2
+        Node ifTrue = value.getFirstChild().getNext();
+        Node ifFalse = value.getLastChild();
+        return evaluatesToLocalValue(ifTrue, locals)
+            && evaluatesToLocalValue(ifFalse, locals);
+
       case Token.INC:
       case Token.DEC:
+        // Pre-increment/decrement yields a primitive (local),
+        // post-increment/decrement yields the original value (might be non-local).
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+          // Pre-increment/decrement (++x)
+          return true;
         } else {
-          return true;
+          // Post-increment/decrement (x++)
+          return false;
         }
+
       case Token.THIS:
+        // 'this' is only local if explicitly known to be.
         return locals.apply(value);
+
       case Token.NAME:
+        // Immutable values (like constants) are local,
+        // ordinary variables may or may not be local.
         return isImmutableValue(value) || locals.apply(value);
+
       case Token.GETELEM:
       case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+        // Object properties are not considered local.
+        return false;
+
       case Token.CALL:
+        // A call is only local if known to return a local value,
+        // or is a toString method, or is otherwise identified as local.
         return callHasLocalResult(value)
             || isToStringMethodCall(value)
             || locals.apply(value);
+
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // The result of a "new" expression is only local if we *know* it is,
+        // but in general, we cannot guarantee that the constructed object is not
+        // aliased. For safety, consider it non-local unless overridden.
+        return false;
+
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+        // Function, RegExp, array, and object literals are local.
         return true;
+
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // The result of 'in' is a boolean and thus local.
         return true;
+
       default:
-        // Other op force a local value:
+        // Other ops force a local value:
         //  x = '' + g (x is now an local string)
         //  x -= g (x is now an local number)
         if (isAssignmentOp(value)
             || isSimpleOperator(value)
             || isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
\ No newline at end of file
