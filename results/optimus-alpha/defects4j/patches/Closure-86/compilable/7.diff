diff --git a/tmp/80bd4f65-22ce-4725-94d9-3b04808ee6fe_buggy.java b/tmp/f527c034-5031-4283-8b02-0caf61d3debf_fixed.java
index a3709ee..b6a5593 100644
--- a/tmp/80bd4f65-22ce-4725-94d9-3b04808ee6fe_buggy.java
+++ b/tmp/f527c034-5031-4283-8b02-0caf61d3debf_fixed.java
@@ -1,71 +1,76 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
+      // A result that is aliased by a non-local name, is effectively the
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+      // Only return true here if the right side is immutable.
+      return NodeUtil.isImmutableValue(value.getLastChild());
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
       return evaluatesToLocalValue(value.getFirstChild(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // Pre-increment result is always the resulting primitive number.
+      // Post-increment returns the *original* (possibly non-local) value.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        // pre-increment/decrement (++x, --x)
+        return true;
       } else {
-          return true;
+        // post-increment/decrement (x++, x--)
+        return false;
       }
     case Token.THIS:
-        return locals.apply(value);
+      return false;
     case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
+      // Only if the value is known to be immutable, not just a NAME.
+      return isImmutableValue(value);
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+      // Property accesses are not local values unless the receiver is a known local
+      // and the property is known to yield an immutable value.
+      // For example: ({}).x is an object property, but not a guaranteed local value.
+      return false;
     case Token.CALL:
       return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
+          || isToStringMethodCall(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // Only treat some new objects as truly local.
+      // In general, do NOT treat NEW as local unless we are sure.
+      // Most constructors may alias `this`, so this is false by default.
+      return false;
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
       // Literals objects with non-literal children are allowed.
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // 'in' returns a boolean which is always local.
       return true;
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other ops force a local value:
+      //  x = '' + g (x is now a local string)
+      //  x -= g (x is now a local number)
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
 
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
