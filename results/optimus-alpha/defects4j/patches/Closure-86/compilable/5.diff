diff --git a/tmp/c79370a6-a4ab-465f-a0a1-dcc01f448864_buggy.java b/tmp/e3508946-f5da-4016-99e6-ae0611293f01_fixed.java
index a3709ee..24bc733 100644
--- a/tmp/c79370a6-a4ab-465f-a0a1-dcc01f448864_buggy.java
+++ b/tmp/e3508946-f5da-4016-99e6-ae0611293f01_fixed.java
@@ -1,71 +1,79 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+      // For assignment, the result is the right-hand side.
+      // Only if the right hand side is a value that cannot be referenced from elsewhere,
+      // or we are told that the left side is a local (alias), then result is local.
+      // We must avoid assuming assignment of a non-local is local!
+      return NodeUtil.isImmutableValue(value.getLastChild()) ||
+          (locals.apply(value.getFirstChild()) &&
+              evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
+      // Result is the rightmost value.
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
+      // Both operands need to be local-valued
       return evaluatesToLocalValue(value.getFirstChild(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
+      // Only result of the clause matters (second and third children).
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // For ++/-- operator, distinguish between prefix and postfix
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        // Prefix (++x, --x) is always local (primitive number)
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
-          return true;
+        // Postfix (x++, x--): result is original value, could be non-local
+        return false;
       }
     case Token.THIS:
+      // Only local if told so (usually false unless in a local scope).
       return locals.apply(value);
     case Token.NAME:
+      // Only local if immutable or matched by locals predicate.
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
       // There is no information about the locality of object properties.
+      // Return true only if locals predicate matches.
       return locals.apply(value);
     case Token.CALL:
+      // Only certain CALLs are known to return local values, otherwise false unless locals.apply
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // Do *not* assume NEW returns local value, because NEW may alias
+      // as in (new Object()), etc.
+      // Only if locals.apply("new" node) tells us it is local.
+      return locals.apply(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literal objects/values are local.
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
       return true;
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other ops that force a local value:
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
 
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
