diff --git a/tmp/4523874f-f3a2-40f9-90bd-90ec48be3285_buggy.java b/tmp/5d070e8a-cc2a-4950-be80-dfaf34d97135_fixed.java
index a3709ee..4a93b3a 100644
--- a/tmp/4523874f-f3a2-40f9-90bd-90ec48be3285_buggy.java
+++ b/tmp/5d070e8a-cc2a-4950-be80-dfaf34d97135_fixed.java
@@ -1,71 +1,81 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
+        // A result that is aliased by a non-local name, is effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
+        // The returned value of ASSIGN is the assignment's right hand side.
+        // But the result is only local if both:
+        //   - The LHS is a local (otherwise, the value can leak by aliasing)
+        //   - The RHS is a local value
+        // (unless the RHS is a primitive/immutable value, which is always local)
         return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+            || (locals.apply(value.getFirstChild())
                 && evaluatesToLocalValue(value.getLastChild(), locals));
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
+        // Pre-increment returns the new value, which is a primitive and local;
+        // post-increment returns the previous value, which may not be local.
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+          // Pre-increment/decrement (++x, --x)
           return evaluatesToLocalValue(value.getFirstChild(), locals);
         } else {
-          return true;
+          // Post-increment/decrement (x++, x--): the returned value is the previous value of x
+          // which is not guaranteed to be a local value (could have come from elsewhere).
+          return false;
         }
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
         return isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
         // There is no information about the locality of object properties.
-        return locals.apply(value);
+        return false;
       case Token.CALL:
         return callHasLocalResult(value)
             || isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // It's unsafe to assume "new" returns a local value, because the object could
+        // have been aliased or escaped via the constructor.
+        // See https://github.com/google/closure-compiler/issues/930
+        return false;
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
         // Literals objects with non-literal children are allowed.
         return true;
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // "in" always results in a boolean local (primitive)
         return true;
       default:
         // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+        //  x = '' + g (x is now a local string)
+        //  x -= g (x is now a local number)
         if (isAssignmentOp(value)
             || isSimpleOperator(value)
             || isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
   }
\ No newline at end of file
