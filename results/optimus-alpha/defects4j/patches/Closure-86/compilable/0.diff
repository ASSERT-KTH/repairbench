diff --git a/tmp/7045204d-58d3-411b-8c57-c1eb8c75b2f7_buggy.java b/tmp/869abf05-ce30-4024-8ff0-3d7d395cab99_fixed.java
index a3709ee..3001ec1 100644
--- a/tmp/7045204d-58d3-411b-8c57-c1eb8c75b2f7_buggy.java
+++ b/tmp/869abf05-ce30-4024-8ff0-3d7d395cab99_fixed.java
@@ -1,71 +1,72 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+      // For ASSIGN, we only return true if the RHS is known to be immutable.
+      // Otherwise, if we assign a non-primitive (object/array) to a variable, it's not guaranteed to be local.
+      return NodeUtil.isImmutableValue(value.getLastChild());
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
       return evaluatesToLocalValue(value.getFirstChild(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // Pre-increment/decrement (e.g., ++x) returns a primitive local, but post-increment/decrement (e.g., x++) returns original value.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        // Pre-increment/decrement: always a local primitive number.
+        return true;
       } else {
-          return true;
+        // Post-increment/decrement: need value of the operand
+        return evaluatesToLocalValue(value.getFirstChild(), locals);
       }
     case Token.THIS:
-        return locals.apply(value);
+      return false;
     case Token.NAME:
+      // Only true if the variable is an immutable value (literal) or is known to be a local temporary.
+      // The default locals.apply for names (e.g., "x") should be false.
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
       // There is no information about the locality of object properties.
-        return locals.apply(value);
+      // Values like o.x or o['x'] are not local.
+      return false;
     case Token.CALL:
+      // Known pure/toString methods OR explicitly local-only calls may be OK
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // "new" objects are not guaranteed to be local, because they may alias themselves or be globally visible.
+      return false;
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literal objects with possibly non-literal children are allowed.
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
       return true;
     default:
-        // Other op force a local value:
+      // Other ops force a local value:
       //  x = '' + g (x is now an local string)
       //  x -= g (x is now an local number)
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
 
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
