diff --git a/tmp/f13c74e3-617c-4a83-9b50-d1187b6be49b_buggy.java b/tmp/b987c8a3-1259-4898-b1f2-67035a0ba2e5_fixed.java
index a3709ee..8af2f70 100644
--- a/tmp/f13c74e3-617c-4a83-9b50-d1187b6be49b_buggy.java
+++ b/tmp/b987c8a3-1259-4898-b1f2-67035a0ba2e5_fixed.java
@@ -1,71 +1,71 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+      // Only return true if the RHS is an immutable value;
+      // otherwise, assignment makes the LHS an alias and not local.
+      return NodeUtil.isImmutableValue(value.getLastChild());
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
       return evaluatesToLocalValue(value.getFirstChild(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // For ++x or --x, result is local. For x++ or x--, result is not.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        // pre-increment/pre-decrement
+        return true;
       } else {
-          return true;
+        // post-increment/post-decrement
+        return false;
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+      // Object property access is not local
+      return false;
     case Token.CALL:
+      // Only calls to toString methods (or known local-result calls) are local
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // It's only local if the NEW is known to be localizable
+      return NodeUtil.constructorCallHasLocalResult(value)
+          || locals.apply(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals (arrays, objects, regex, fn) are always local
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // Result is always a local boolean
       return true;
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other ops force a local value:
+      //  x = '' + g (x is now a local string)
+      //  x -= g (x is now a local number)
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
 
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
