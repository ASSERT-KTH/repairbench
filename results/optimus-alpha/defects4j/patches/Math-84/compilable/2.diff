diff --git a/tmp/ef639fbc-4952-4ea0-83b9-f1e0493f3cb5_buggy.java b/tmp/ff2d1b42-c696-4413-aefb-2908c4372c30_fixed.java
index 5f1dcf2..7ce6854 100644
--- a/tmp/ef639fbc-4952-4ea0-83b9-f1e0493f3cb5_buggy.java
+++ b/tmp/ff2d1b42-c696-4413-aefb-2908c4372c30_fixed.java
@@ -1,41 +1,36 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
     // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
+        // else: simplex already updated in expanded case, keep as is.
         return;
 
-            }
+    } else {
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
+            // nothing to do, simplex was already set in evaluateNewSimplex
+        }
+        // else: simplex already updated in contracted case, keep as is.
         return;
     }
-
-        }
-
 }
\ No newline at end of file
