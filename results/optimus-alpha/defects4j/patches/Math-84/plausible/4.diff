diff --git a/tmp/7cd3c1ec-6060-480d-907c-bbb72e35dc8b_buggy.java b/tmp/9db214cc-5504-4f94-ac1f-f7a3ffeb4f6c_fixed.java
index 5f1dcf2..c528417 100644
--- a/tmp/7cd3c1ec-6060-480d-907c-bbb72e35dc8b_buggy.java
+++ b/tmp/9db214cc-5504-4f94-ac1f-f7a3ffeb4f6c_fixed.java
@@ -1,41 +1,55 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    // Store a reference simplex for convergence check
+    final RealPointValuePair[] previousSimplex = simplex.clone();
 
     incrementIterationsCounter();
 
     // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
+        // else, leave the simplex as the expanded one assigned by evaluateNewSimplex (expanded)
 
+        // check for convergence
+        if (getConvergenceChecker() != null &&
+            getConvergenceChecker().converged(getIterations(), previousSimplex[0], simplex[0])) {
+            return;
+        }
         return;
 
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        // no need to assign explicitly, evaluateNewSimplex does it
+        // check for convergence
+        if (getConvergenceChecker() != null &&
+            getConvergenceChecker().converged(getIterations(), previousSimplex[0], simplex[0])) {
             return;
         }
-
+        return;
     }
 
+    // Check for convergence: if no step improved, check
+    if (getConvergenceChecker() != null &&
+        getConvergenceChecker().converged(getIterations(), previousSimplex[0], simplex[0])) {
+        return;
+    }
 }
\ No newline at end of file
