diff --git a/tmp/57a8ddda-7a62-4d13-bf01-46b0a63bf6d0_buggy.java b/tmp/d64736d4-a55d-4017-94ff-ff64e35f69f2_fixed.java
index 5f1dcf2..89e97ae 100644
--- a/tmp/57a8ddda-7a62-4d13-bf01-46b0a63bf6d0_buggy.java
+++ b/tmp/d64736d4-a55d-4017-94ff-ff64e35f69f2_fixed.java
@@ -1,41 +1,44 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    final RealPointValuePair[] previous = simplex.clone();
 
     incrementIterationsCounter();
 
     // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
+        // else expanded was accepted via evaluateNewSimplex
 
         return;
-
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        // evaluateNewSimplex already sets simplex
         return;
     }
 
-        }
+    // check for convergence: do not loop forever!
+    // note: in original version, the loop is handled externally by the optimizer
+
+    // If none of reflection/expansion/contraction improves, just return
+    // and let the optimizer convergence checker decide to stop or continue
 
 }
\ No newline at end of file
