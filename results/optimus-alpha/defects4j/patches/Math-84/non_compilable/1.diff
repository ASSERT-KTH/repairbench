diff --git a/tmp/2f35444e-318d-4e12-945d-d21dce9ae6c5_buggy.java b/tmp/6b7be3e5-0487-4d35-94dc-e977d843972b_fixed.java
index 5f1dcf2..76f68b1 100644
--- a/tmp/2f35444e-318d-4e12-945d-d21dce9ae6c5_buggy.java
+++ b/tmp/6b7be3e5-0487-4d35-94dc-e977d843972b_fixed.java
@@ -1,41 +1,55 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
     incrementIterationsCounter();
 
     // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
+        // else, leave simplex as set by evaluateNewSimplex(original, khi, comparator)
         return;
-
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        // (simplex has already been set in evaluateNewSimplex)
         return;
     }
 
+    // shrink the simplex towards best point
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] bestPoint = simplex[0].getPointRef();
+        final double[] curr = simplex[i].getPointRef().clone();
+        for (int j = 0; j < curr.length; ++j) {
+            curr[j] = bestPoint[j] + sigma * (curr[j] - bestPoint[j]);
         }
+        simplex[i] = new RealPointValuePair(curr, Double.NaN, false);
+    }
+    // evaluate all points in simplex except the best, which is already evaluated
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] x = simplex[i].getPointRef();
+        final double value = computeObjectiveValue(x);
+        simplex[i] = new RealPointValuePair(x, value, false);
+    }
+    // sort simplex
+    Arrays.sort(simplex, comparator);
 
+    // There is no explicit infinite loop; this function is called from optimize in a loop,
+    // and each call should only do one transformation.
 }
\ No newline at end of file
