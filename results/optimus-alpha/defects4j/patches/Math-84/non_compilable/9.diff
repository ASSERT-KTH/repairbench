diff --git a/tmp/cecd4f35-5231-4c3c-be22-df22fdda22c9_buggy.java b/tmp/639dbb93-e48f-423a-a5ba-508146fed96b_fixed.java
index 5f1dcf2..560d222 100644
--- a/tmp/cecd4f35-5231-4c3c-be22-df22fdda22c9_buggy.java
+++ b/tmp/639dbb93-e48f-423a-a5ba-508146fed96b_fixed.java
@@ -1,41 +1,49 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    // Save original simplex
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
     if (comparator.compare(reflected, best) < 0) {
-
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
+        // else the expanded simplex is best, so keep as is ("evaluateNewSimplex" already updated "simplex")
+        // either way, step is done
         return;
-
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        // "evaluateNewSimplex" already updated "simplex"
         return;
     }
 
+    // if we get here, neither reflection nor contraction produced improvement, so shrink towards best
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] bestPoint = simplex[0].getPointRef();
+        final double[] currPoint = simplex[i].getPointRef();
+        double[] newPoint = new double[bestPoint.length];
+        for (int j = 0; j < bestPoint.length; ++j) {
+            newPoint[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);
         }
-
+        simplex[i] = new RealPointValuePair(
+            newPoint, 
+            function.value(newPoint), 
+            false);
+    }
+    // Sort the simplex, as required
+    Arrays.sort(simplex, comparator);
 }
\ No newline at end of file
