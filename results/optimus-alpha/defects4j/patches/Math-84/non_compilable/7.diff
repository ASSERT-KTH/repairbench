diff --git a/tmp/0340dd5b-cc04-4363-88f3-709e66405ba3_buggy.java b/tmp/9a95d54f-6f16-4e7c-97b5-a49594dfb325_fixed.java
index 5f1dcf2..05fec8c 100644
--- a/tmp/0340dd5b-cc04-4363-88f3-709e66405ba3_buggy.java
+++ b/tmp/9a95d54f-6f16-4e7c-97b5-a49594dfb325_fixed.java
@@ -1,41 +1,63 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    // save the original simplex
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
+    final RealPointValuePair worst = original[original.length - 1];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
+    // Check whether we improved beyond the best point
     if (comparator.compare(reflected, best) < 0) {
-
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+        if (comparator.compare(expanded, reflected) < 0) {
+            // accept the expanded simplex
+            simplex = simplex.clone();
+        } else {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
+        incrementIterationsCounter();
         return;
+    }
 
+    // If reflected is not better than best, but better than worst, accept it
+    if (comparator.compare(reflected, worst) < 0) {
+        simplex = simplex.clone();
+        incrementIterationsCounter();
+        return;
     }
 
-            // compute the contracted simplex
+    // Otherwise, try contraction
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        simplex = simplex.clone();
+        incrementIterationsCounter();
         return;
     }
 
+    // If contraction did not work, shrink the simplex towards best
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] bestPoint = best.getPoint();
+        final double[] curr = simplex[i].getPoint();
+        double[] shrunk = new double[bestPoint.length];
+        for (int j = 0; j < shrunk.length; ++j) {
+            shrunk[j] = bestPoint[j] + sigma * (curr[j] - bestPoint[j]);
         }
-
+        simplex[i] = new RealPointValuePair(
+            shrunk, 
+            evaluationFunction.value(shrunk),
+            false
+        );
+    }
+    // Sort simplex after shrinking
+    Arrays.sort(simplex, comparator);
+    incrementIterationsCounter();
 }
\ No newline at end of file
