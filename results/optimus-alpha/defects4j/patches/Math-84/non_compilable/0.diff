diff --git a/tmp/cf19b850-b428-46cc-aa36-4c5c01049175_buggy.java b/tmp/69c4c902-8cf7-4a87-9561-5fc7b937ef05_fixed.java
index 5f1dcf2..dd9fd55 100644
--- a/tmp/cf19b850-b428-46cc-aa36-4c5c01049175_buggy.java
+++ b/tmp/69c4c902-8cf7-4a87-9561-5fc7b937ef05_fixed.java
@@ -1,41 +1,59 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    // Save the original simplex and its best value before starting
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
+    final RealPointValuePair worst = original[original.length - 1];
+
+    incrementIterationsCounter();
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
     if (comparator.compare(reflected, best) < 0) {
-
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+        if (comparator.compare(expanded, reflected) < 0) {
+            // accept the expanded simplex
+            simplex = simplex.clone();
+        } else {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
         return;
+    }
 
+    // if reflected is better than the worst, replace worst
+    if (comparator.compare(reflected, worst) < 0) {
+        // accept the reflected simplex
+        // simplex has already been updated in evaluateNewSimplex
+        return;
     }
 
     // compute the contracted simplex
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        // simplex has already been updated in evaluateNewSimplex
         return;
     }
 
+    // shrink the simplex towards the best point
+    for (int i = 1; i < simplex.length; ++i) {
+        final double[] bestPoint = simplex[0].getPointRef();
+        final double[] currPoint = simplex[i].getPointRef();
+        double[] shrunk = new double[bestPoint.length];
+        for (int j = 0; j < shrunk.length; ++j) {
+            shrunk[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);
+        }
+        simplex[i] = new RealPointValuePair(
+            shrunk,
+            evaluate(shrunk),
+            false
+        );
     }
-
 }
\ No newline at end of file
