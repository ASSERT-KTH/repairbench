diff --git a/tmp/a3563147-6ef5-4ce4-8603-6af5c36e571d_buggy.java b/tmp/ed763280-5e08-4ed5-9efa-3086cbcc4775_fixed.java
index 5f1dcf2..2ae118c 100644
--- a/tmp/a3563147-6ef5-4ce4-8603-6af5c36e571d_buggy.java
+++ b/tmp/ed763280-5e08-4ed5-9efa-3086cbcc4775_fixed.java
@@ -1,41 +1,55 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    // cache the original checker
+    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+    
+    final RealPointValuePair[] previousSimplex = new RealPointValuePair[simplex.length];
+    for (int i = 0; i < simplex.length; ++i) {
+        previousSimplex[i] = simplex[i];
+    }
     
     incrementIterationsCounter();
 
     // save the original vertex
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
         final RealPointValuePair[] reflectedSimplex = simplex;
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
+        // else already set by evaluateNewSimplex
 
-                return;
-
-            }
+    } else {
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
-                return;
+            // already performed by evaluateNewSimplex
         }
-
+        // else already performed by evaluateNewSimplex
     }
 
+    // Now test for convergence
+    boolean converged = true;
+    for (int i = 0; i < simplex.length; ++i) {
+        if (!checker.converged(getIterations(), previousSimplex[i], simplex[i])) {
+            converged = false;
+            break;
+        }
+    }
+    if (converged) {
+        throw new OptimizationException(null); // break optimization, will be handled outside
+    }
 }
\ No newline at end of file
