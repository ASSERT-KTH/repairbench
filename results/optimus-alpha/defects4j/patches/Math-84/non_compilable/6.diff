diff --git a/tmp/92af858a-ac5b-4079-a119-f97e298d0193_buggy.java b/tmp/acd7f018-966c-4156-a9a0-42f5bc760577_fixed.java
index 5f1dcf2..806b155 100644
--- a/tmp/92af858a-ac5b-4079-a119-f97e298d0193_buggy.java
+++ b/tmp/acd7f018-966c-4156-a9a0-42f5bc760577_fixed.java
@@ -1,41 +1,60 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
     incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    // save the original simplex
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+
+        if (comparator.compare(expanded, reflected) < 0) {
+            // accept the expanded simplex
+            // 'evaluateNewSimplex' already updates 'simplex'
+        } else {
             // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
         return;
-
     }
 
-            // compute the contracted simplex
+    // perform a contraction step
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
         // accept the contracted simplex
-
-            // check convergence
+        // 'evaluateNewSimplex' already updates 'simplex'
         return;
+    } else {
+        // shrink simplex towards best point
+        shrinkSimplex(original, comparator);
     }
+}
+
+private void shrinkSimplex(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator)
+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final int n = original.length - 1;
+    final double[] bestPoint = original[0].getPointRef();
+    for (int i = 1; i < original.length; i++) {
+        final double[] x = original[i].getPointRef().clone();
+        for (int j = 0; j < x.length; ++j) {
+            x[j] = bestPoint[j] + sigma * (x[j] - bestPoint[j]);
+        }
+        simplex[i] = new RealPointValuePair(x, Double.NaN, false);
     }
+    // Best point remains
+    simplex[0] = original[0];
 
+    // Re-evaluate all but the first vertex
+    evaluateSimplex(comparator);
 }
\ No newline at end of file
