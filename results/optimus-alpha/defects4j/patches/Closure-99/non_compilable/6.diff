diff --git a/tmp/8805b57f-2bd1-4133-a238-3a163d669065_buggy.java b/tmp/00087a83-736c-430f-a5ea-2f20aacb6f87_fixed.java
index 86553f4..d83c124 100644
--- a/tmp/8805b57f-2bd1-4133-a238-3a163d669065_buggy.java
+++ b/tmp/00087a83-736c-430f-a5ea-2f20aacb6f87_fixed.java
@@ -1,57 +1,87 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+      // or @override or @interface annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+           jsDoc.isOverride() ||
+           jsDoc.isInterface())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
+      // Special case: skip prototype property assignments, e.g.
+      // a.prototype.b = function() { ... }
+      if (parent != null && parent.getType() == Token.ASSIGN) {
+        Node lhs = parent.getFirstChild();
+        if (lhs.getType() == Token.GETPROP) {
+          // Skip direct prototype property assignments: a.prototype.b = ...
+          if (lhs.getFirstChild() != null &&
+              lhs.getLastChild() != null &&
+              "prototype".equals(lhs.getFirstChild().getNext() != null
+                                     ? lhs.getFirstChild().getNext().getString()
+                                     : null)) {
+            return false;
+          }
+          // Skip prototype subproperty assignments, e.g. a.prototype.b.c = ...
+          String qName = lhs.getQualifiedName();
+          if (qName != null && qName.contains(".prototype.")) {
+            return false;
+          }
+          // Additionally, skip computed property assignments, e.g.
+          // a.prototype['x' + 'y'] = ...
+          Node prop = lhs.getChildCount() >= 2 ? lhs.getSecondChild() : null;
+          if (prop != null && !prop.isString()) {
+            Node maybeProto = lhs.getFirstChild().getNext();
+            if (maybeProto != null && "prototype".equals(maybeProto.getString())) {
+              return false;
+            }
+          }
+        }
+      }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
           return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
