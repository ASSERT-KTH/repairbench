diff --git a/tmp/5d505dc0-691f-47e5-ba63-7eea3d9c8ce2_buggy.java b/tmp/5df189d6-d271-48a5-bafb-8c8b142f51bc_fixed.java
index 1c875ad..2660f0e 100644
--- a/tmp/5d505dc0-691f-47e5-ba63-7eea3d9c8ce2_buggy.java
+++ b/tmp/5df189d6-d271-48a5-bafb-8c8b142f51bc_fixed.java
@@ -1,31 +1,44 @@
 public void captureArgumentsFrom(Invocation invocation) {
+    // Defensive check: If no matchers, nothing to do
+    if (matchers == null || matchers.isEmpty()) {
+        return;
+    }
+
+    Object[] arguments = invocation.getRawArguments();
+
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        int varArgIndex = arguments.length - 1;
 
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
-            }
-        }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+                // This matcher could be for fixed args *or* the vararg array (which is last parameter)
+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                    Object array = arguments[position];
+                    if (array != null && array.getClass().isArray()) {
+                        int len = Array.getLength(array);
+                        for (int i = 0; i < len; i++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                        }
+                    } else if (array == null) {
+                        // In the case of a null vararg array, capture once with null (consistent with matchers)
+                        ((CapturesArguments) m).captureFrom(null);
+                    }
+                    // Since we've captured the varargs, no sense to process more for this matcher
+                    return;
+                } else if (position < arguments.length) {
+                    // Fixed argument positions, capture normally
+                    ((CapturesArguments) m).captureFrom(arguments[position]);
+                }
+            }
+        }
+    } else {
+        // Non-varargs: direct positional mapping between matchers and arguments
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments && position < arguments.length) {
+                ((CapturesArguments) m).captureFrom(arguments[position]);
+            }
+        }
+    }
 }
\ No newline at end of file
