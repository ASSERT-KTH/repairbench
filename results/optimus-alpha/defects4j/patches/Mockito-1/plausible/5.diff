diff --git a/tmp/e73e9917-07b3-40b5-a84e-b769c63467e3_buggy.java b/tmp/01f6f00a-61bc-4985-87d8-ea35eb1d6adf_fixed.java
index 1c875ad..40af441 100644
--- a/tmp/e73e9917-07b3-40b5-a84e-b769c63467e3_buggy.java
+++ b/tmp/01f6f00a-61bc-4985-87d8-ea35eb1d6adf_fixed.java
@@ -1,31 +1,50 @@
 public void captureArgumentsFrom(Invocation invocation) {
+    // If there are no matchers, nothing to capture
+    if (matchers == null || matchers.isEmpty())
+        return;
+
+    Object[] rawArguments = invocation.getRawArguments();
+    int argCount = rawArguments.length;
+
+    // If the method uses varargs, handle them accordingly
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        int matcherCount = matchers.size();
+        int regularCount = invocation.getMethod().getParameterTypes().length;
 
+        // walk through all matchers, up to last regular argument
+        int rawCount = argCount;
+        for (int i = 0; i < matcherCount; i++) {
+            Matcher m = matchers.get(i);
+            if (m instanceof CapturesArguments) {
+                // if this is the last matcher and the method is varargs,
+                // and matcher receives the vararg parameter
+                boolean isLastMatcher = i == matcherCount - 1;
+                boolean isLastRaw = i == regularCount - 1;
+                // If this matcher should capture vararg array
+                if (isLastMatcher && regularCount > 0 && isLastRaw) {
+                    // Might be less arguments than matchers - protect
+                    if (rawArguments.length > i) {
+                        Object array = rawArguments[i];
+                        // For vararg methods Java always provides an array, null or otherwise
+                        ((CapturesArguments) m).captureFrom(array);
+                    }
                 } else {
+                    // Only capture if rawArguments has that index
+                    if (rawArguments.length > i) {
+                        ((CapturesArguments) m).captureFrom(rawArguments[i]);
+                    }
+                }
+            }
+        }
+    } else {
+        // Non-varargs: just capture up to args/matchers available
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                if (rawArguments.length > position) {
+                    ((CapturesArguments) m).captureFrom(rawArguments[position]);
+                }
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
