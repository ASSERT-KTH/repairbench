diff --git a/tmp/62bb9199-f0a3-48bb-ad4e-a3443ba46c75_buggy.java b/tmp/955de59b-ef25-4af3-be8f-b85fdbb48d4e_fixed.java
index 1c875ad..2535914 100644
--- a/tmp/62bb9199-f0a3-48bb-ad4e-a3443ba46c75_buggy.java
+++ b/tmp/955de59b-ef25-4af3-be8f-b85fdbb48d4e_fixed.java
@@ -1,31 +1,14 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    Object[] rawArgs = invocation.getRawArguments();
+    int rawArgCount = rawArgs == null ? 0 : rawArgs.length; // Defensive for null
+    int matcherCount = matchers.size();
 
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
+    // Only handle argument capturing for the positions where both a matcher and argument exists.
+    int count = Math.min(rawArgCount, matcherCount);
+    for (int position = 0; position < count; position++) {
         Matcher m = matchers.get(position);
         if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            ((CapturesArguments) m).captureFrom(rawArgs[position]);
         }
     }
 }
\ No newline at end of file
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
-    }
