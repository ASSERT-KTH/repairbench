diff --git a/tmp/798d3a62-dbca-4b54-82ac-bd1ba6896b16_buggy.java b/tmp/56e1400a-dc4e-490c-90e7-91c305f37c94_fixed.java
index 1c875ad..803b184 100644
--- a/tmp/798d3a62-dbca-4b54-82ac-bd1ba6896b16_buggy.java
+++ b/tmp/56e1400a-dc4e-490c-90e7-91c305f37c94_fixed.java
@@ -1,31 +1,36 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    // Support varargs matching and argument capturing
+    Object[] rawArguments = invocation.getRawArguments();
+    int rawArgCount = rawArguments.length;
+    boolean isVarArgs = invocation.getMethod().isVarArgs();
+    int matcherCount = matchers.size();
 
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
+    for (int position = 0; position < matcherCount; position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
+        if (!(m instanceof CapturesArguments)) {
+            continue;
         }
+        // If not enough raw arguments, skip
+        if (rawArgCount <= position) {
+            continue;
         }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+        // Handle varargs capturing
+        if (isVarArgs && isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+            Object array = rawArguments[position];
+            if (array == null) {
+                // If vararg array is null, just capture null once (matches mockito behavior)
+                ((CapturesArguments) m).captureFrom(null);
+            } else {
+                int length = Array.getLength(array);
+                for (int i = 0; i < length; i++) {
+                    ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                }
+            }
+            // After capturing all varargs for vararg matcher, do not process more matchers for this argument
+            return;
+        } else {
+            ((CapturesArguments) m).captureFrom(rawArguments[position]);
+        }
+    }
 }
\ No newline at end of file
