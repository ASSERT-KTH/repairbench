diff --git a/tmp/15bb907e-2a03-45c9-a33c-9e328a62048b_buggy.java b/tmp/67e33210-26ef-4598-9128-036daaa6e9c7_fixed.java
index 1c875ad..50753c6 100644
--- a/tmp/15bb907e-2a03-45c9-a33c-9e328a62048b_buggy.java
+++ b/tmp/67e33210-26ef-4598-9128-036daaa6e9c7_fixed.java
@@ -1,31 +1,42 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    // This method attempts to capture arguments from an Invocation.
+    // It takes into account whether a method has varargs or not, 
+    // and handles vararg matchers correctly.
 
-        } else {
+    Object[] rawArgs = invocation.getRawArguments();
+    int argCount = rawArgs == null ? 0 : rawArgs.length;
+
+    // for each matcher, if it captures arguments, ask it to capture
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+
+        if (m instanceof CapturesArguments && argCount > position) {
+            // check for varargs special handling - if this matcher is a vararg matcher and the method is vararg
+            if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                Object array = rawArgs[position];
+                if (array != null && array.getClass().isArray()) {
+                    int length = Array.getLength(array);
+                    for (int i = 0; i < length; i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                    }
+                } else {
+                    // vararg is null or not an array, still propagate for completeness
+                    ((CapturesArguments) m).captureFrom(array);
+                }
+                // since we've captured all varargs already, it does not make sense to process other matchers.
+                return;
+            } else {
+                ((CapturesArguments) m).captureFrom(rawArgs[position]);
             }
         }
     }
+}
+
+// Helper methods likely present in this class, needed for context
+private boolean isVariableArgument(Invocation invocation, int position) {
+    return invocation.getMethod().isVarArgs() && position == invocation.getMethod().getParameterTypes().length - 1;
+}
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+private boolean isVarargMatcher(Matcher matcher) {
+    return matcher instanceof VarargMatcher;
 }
\ No newline at end of file
