diff --git a/tmp/9a49c2b8-7647-4dee-804a-2b0b0b925f32_buggy.java b/tmp/fbf5cc3c-3b47-411e-8821-ec5cc0fd81c0_fixed.java
index 1c875ad..755615b 100644
--- a/tmp/9a49c2b8-7647-4dee-804a-2b0b0b925f32_buggy.java
+++ b/tmp/fbf5cc3c-3b47-411e-8821-ec5cc0fd81c0_fixed.java
@@ -1,31 +1,43 @@
 public void captureArgumentsFrom(Invocation invocation) {
+    // Handle varargs methods
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Object[] rawArguments = invocation.getRawArguments();
+        int indexOfVararg = rawArguments.length - 1;
 
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
+
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                // Vararg parameter
+                if (position == indexOfVararg && isVarargMatcher(m)) {
+                    Object array = rawArguments[position];
+                    if (array != null && array.getClass().isArray()) {
+                        // Capture each vararg element
+                        int length = java.lang.reflect.Array.getLength(array);
+                        for (int i = 0; i < length; i++) {
+                            ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));
+                        }
+                    } else {
+                        // Capture null or non-array vararg (e.g. null passed as vararg)
+                        ((CapturesArguments) m).captureFrom(array);
+                    }
+                } else if (rawArguments.length > position) {
+                    ((CapturesArguments) m).captureFrom(rawArguments[position]);
+                } // else: Don't try to capture more than what's available.
+            }
+        }
+    } else {
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+            }
         }
     }
 }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+// Helper method, needed just like in the commented old code:
+private boolean isVarargMatcher(Matcher matcher) {
+    // 'AnyVararg' is the marker matcher for vararg in Mockito
+    return matcher.getClass().getSimpleName().equals("AnyVararg");
 }
\ No newline at end of file
