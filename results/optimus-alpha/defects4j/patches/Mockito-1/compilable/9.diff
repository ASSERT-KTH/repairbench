diff --git a/tmp/c06e28d4-41d6-412e-8b56-aff1077e08ec_buggy.java b/tmp/54c56e28-750a-4948-824e-21d9a83e8394_fixed.java
index 1c875ad..8d383d4 100644
--- a/tmp/c06e28d4-41d6-412e-8b56-aff1077e08ec_buggy.java
+++ b/tmp/54c56e28-750a-4948-824e-21d9a83e8394_fixed.java
@@ -1,31 +1,17 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    Object[] rawArgs = invocation.getRawArguments();
+    int argCount = rawArgs.length;
 
-        } else {
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
+        if (!(m instanceof CapturesArguments)) {
+            continue;
+        }
+
+        // Only try to capture if there is an argument for this matcher,
+        // otherwise skip (matcher may be for a matcher that was not used e.g. in varargs expansion).
+        if (argCount > position) {
             ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
         }
     }
 }
\ No newline at end of file
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
-    }
