diff --git a/tmp/ff2aa34b-9421-45f6-b835-18a3904dbf45_buggy.java b/tmp/c64614c3-478f-47f7-badc-ddb9b547899e_fixed.java
index 39981f0..d8e6f8a 100644
--- a/tmp/ff2aa34b-9421-45f6-b835-18a3904dbf45_buggy.java
+++ b/tmp/c64614c3-478f-47f7-badc-ddb9b547899e_fixed.java
@@ -1,65 +1,71 @@
 /**
  * Given a node, get a human-readable name for the type of that node so
  * that will be easy for the programmer to find the original declaration.
  *
  * For example, if SubFoo's property "bar" might have the human-readable
  * name "Foo.prototype.bar".
  *
  * @param n The node.
  * @param dereference If true, the type of the node will be dereferenced
  *     to an Object type, if possible.
  */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
   // The best type name is the actual type name.
 
   // If we're analyzing a GETPROP, the property may be inherited by the
   // prototype chain. So climb the prototype chain and find out where
   // the property was originally defined.
   if (n.isGetProp()) {
     ObjectType objectType = getJSType(n.getFirstChild()).dereference();
     if (objectType != null) {
       String propName = n.getLastChild().getString();
       if (objectType.getConstructor() != null &&
           objectType.getConstructor().isInterface()) {
         objectType = FunctionType.getTopDefiningInterface(
             objectType, propName);
       } else {
         // classes
         while (objectType != null && !objectType.hasOwnProperty(propName)) {
           objectType = objectType.getImplicitPrototype();
         }
       }
 
       // Don't show complex function names or anonymous types.
       // Instead, try to get a human-readable type name.
       if (objectType != null &&
           (objectType.getConstructor() != null ||
            objectType.isFunctionPrototypeType())) {
+        // Only show the name of the underlying type, not the complex
+        // qualified name (e.g. "C2" not "C3.c2_")
         return objectType.toString() + "." + propName;
       }
     }
   }
 
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
       (type.toObjectType() != null &&
        type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
+  // Use qualified name only for simple names, don't use for property dereferences
+  if (n.isName()) {
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
-    } else if (type.isFunctionType()) {
+    }
+  }
+  if (type.isFunctionType()) {
     // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
