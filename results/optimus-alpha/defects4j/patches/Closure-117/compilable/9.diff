diff --git a/tmp/cd1ba2d5-4f80-4148-a390-d3044231b52d_buggy.java b/tmp/5d0cd465-a8cb-4b30-bb76-cfee346098c2_fixed.java
index 39981f0..795ccab 100644
--- a/tmp/cd1ba2d5-4f80-4148-a390-d3044231b52d_buggy.java
+++ b/tmp/5d0cd465-a8cb-4b30-bb76-cfee346098c2_fixed.java
@@ -1,65 +1,79 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
         // Don't show complex function names or anonymous types.
         // Instead, try to get a human-readable type name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
+          // Only use the type name, not the qualified variable name.
+          return objectType.toString() + "." + propName;
+        } else if (objectType != null) {
+          // If we found some (non-constructor) objectType, just return the type name as before
           return objectType.toString() + "." + propName;
         }
+        // else fall through to use getJSType(n.getFirstChild())
       }
+      // If objectType is null, fall through to other logic.
     }
 
     JSType type = getJSType(n);
+
+    // Patch: For property accesses, prefer to name by the base type, not the qualified variable.
+    // This fixes: 'Property prop never defined on C2' instead of 'C3.c2_'
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
+    // --- PATCH: suppress qualified variable names for property accesses ---
+    if (!(n.getParent() != null && n.getParent().isGetProp() && n == n.getParent().getFirstChild())) {
       String qualifiedName = n.getQualifiedName();
       if (qualifiedName != null) {
         return qualifiedName;
-    } else if (type.isFunctionType()) {
+      }
+    }
+    // ---
+    if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
\ No newline at end of file
