diff --git a/tmp/dc076222-d107-46aa-a838-78528311aa20_buggy.java b/tmp/bb1bef53-428b-4a8b-a1b3-b9e6ace8cd1d_fixed.java
index a7d0787..b6fc060 100644
--- a/tmp/dc076222-d107-46aa-a838-78528311aa20_buggy.java
+++ b/tmp/bb1bef53-428b-4a8b-a1b3-b9e6ace8cd1d_fixed.java
@@ -1,54 +1,64 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
+    // Added check for explicit Java class types (like Integer.class, Long.class, etc.)
+    else if (Number.class.isAssignableFrom(clazz))
+    {
+        try {
+            Number number = createNumber(str);
+            if (!clazz.isInstance(number)) {
+                // Try valueOf if available (for e.g., Integer/Long/Double)
+                try {
+                    return clazz.getConstructor(String.class).newInstance(str);
+                } catch (Exception e) {
+                    throw new ParseException("Unable to create value: " + str + " for class: " + clazz.getName());
+                }
+            }
+            return (T) number;
+        } catch (ParseException pe) {
+            throw pe;
+        } catch (Exception e) {
+            throw new ParseException("Unable to create value: " + str + " for class: " + clazz.getName());
+        }
+    }
     else
     {
-            return null;
+        throw new ParseException("Unable to create value: " + str + " for class: " + (clazz == null ? "null" : clazz.getName()));
     }
 }
\ No newline at end of file
