diff --git a/tmp/680ff0b8-4241-4f1f-a97f-1f7ff354966e_buggy.java b/tmp/2c08a108-fb10-4646-a551-15b7463286dd_fixed.java
index a7d0787..809f453 100644
--- a/tmp/680ff0b8-4241-4f1f-a97f-1f7ff354966e_buggy.java
+++ b/tmp/2c08a108-fb10-4646-a551-15b7463286dd_fixed.java
@@ -1,54 +1,94 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
+    // Additional handling for boxed number types, e.g., Integer/Long/etc.
+    else if (clazz == Integer.class) {
+        try {
+            return (T) Integer.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Unable to parse '"+str+"' as Integer");
+        }
+    }
+    else if (clazz == Long.class) {
+        try {
+            return (T) Long.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Unable to parse '"+str+"' as Long");
+        }
+    }
+    else if (clazz == Double.class) {
+        try {
+            return (T) Double.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Unable to parse '"+str+"' as Double");
+        }
+    }
+    else if (clazz == Float.class) {
+        try {
+            return (T) Float.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Unable to parse '"+str+"' as Float");
+        }
+    }
+    else if (clazz == Short.class) {
+        try {
+            return (T) Short.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Unable to parse '"+str+"' as Short");
+        }
+    }
+    else if (clazz == Byte.class) {
+        try {
+            return (T) Byte.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Unable to parse '"+str+"' as Byte");
+        }
+    }
+    else if (clazz == Boolean.class) {
+        if ("true".equalsIgnoreCase(str) || "false".equalsIgnoreCase(str)) {
+            return (T) Boolean.valueOf(str);
+        } else {
+            throw new ParseException("Unable to parse '"+str+"' as Boolean");
+        }
+    }
     else
     {
-            return null;
+        throw new ParseException("Unable to handle class: " + clazz);
     }
 }
\ No newline at end of file
