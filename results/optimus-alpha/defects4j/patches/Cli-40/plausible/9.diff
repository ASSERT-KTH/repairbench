diff --git a/tmp/43dbee64-749f-4690-83dd-5b1c8bf05e68_buggy.java b/tmp/5a48e8d3-6838-491d-b72b-375ce6fee4aa_fixed.java
index a7d0787..facea80 100644
--- a/tmp/43dbee64-749f-4690-83dd-5b1c8bf05e68_buggy.java
+++ b/tmp/5a48e8d3-6838-491d-b72b-375ce6fee4aa_fixed.java
@@ -1,54 +1,72 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
-        else
+    // If clazz is a subclass of Number (e.g. Integer, Double, etc.), try to convert directly
+    else if (Number.class.isAssignableFrom(clazz))
     {
-            return null;
+        try
+        {
+            Number number = createNumber(str);
+            if (clazz.isInstance(number)) {
+                return (T) number;
+            } else {
+                // try to convert to the specific Number subclass
+                if (clazz == Integer.class)
+                    return (T) Integer.valueOf(number.intValue());
+                else if (clazz == Long.class)
+                    return (T) Long.valueOf(number.longValue());
+                else if (clazz == Double.class)
+                    return (T) Double.valueOf(number.doubleValue());
+                else if (clazz == Float.class)
+                    return (T) Float.valueOf(number.floatValue());
+                else if (clazz == Short.class)
+                    return (T) Short.valueOf(number.shortValue());
+                else if (clazz == Byte.class)
+                    return (T) Byte.valueOf(number.byteValue());
+            }
+        }
+        catch (Exception e)
+        {
+            throw new ParseException(e.getMessage());
+        }
+        throw new ParseException("Value " + str + " cannot be converted to type: " + clazz);
     }
+    // If we reach here, we cannot create the value for the provided class
+    throw new ParseException("No value handler for class: " + clazz);
 }
\ No newline at end of file
