diff --git a/tmp/62d1cb8b-694a-4293-8a27-a73e1a53cf4c_buggy.java b/tmp/4c9d43f0-102f-4d5a-892b-f70276ba8606_fixed.java
index a7d0787..39850e3 100644
--- a/tmp/62d1cb8b-694a-4293-8a27-a73e1a53cf4c_buggy.java
+++ b/tmp/4c9d43f0-102f-4d5a-892b-f70276ba8606_fixed.java
@@ -1,54 +1,63 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
+    // --- FIX: if clazz is a subclass of Number, attempt to create number ---
+    else if (Number.class.isAssignableFrom(clazz))
+    {
+        try
+        {
+            Number num = createNumber(str);
+            if (clazz == Byte.class) return (T) Byte.valueOf(num.byteValue());
+            else if (clazz == Short.class) return (T) Short.valueOf(num.shortValue());
+            else if (clazz == Integer.class) return (T) Integer.valueOf(num.intValue());
+            else if (clazz == Long.class) return (T) Long.valueOf(num.longValue());
+            else if (clazz == Float.class) return (T) Float.valueOf(num.floatValue());
+            else if (clazz == Double.class) return (T) Double.valueOf(num.doubleValue());
+            else return (T) num;
+        }
+        catch (Exception e)
+        {
+            throw new ParseException("Unable to parse '" + str + "' as number for class: " + clazz.getName());
+        }
+    }
     else
     {
-            return null;
+        throw new ParseException("Unable to handle the class: " + clazz.getName());
     }
 }
\ No newline at end of file
