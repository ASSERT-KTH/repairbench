diff --git a/tmp/1e2f48dc-f622-4cb1-a403-ce2d328c62a7_buggy.java b/tmp/6743673b-9295-46a5-843f-95398abf622f_fixed.java
index a7d0787..5d5d087 100644
--- a/tmp/1e2f48dc-f622-4cb1-a403-ce2d328c62a7_buggy.java
+++ b/tmp/6743673b-9295-46a5-843f-95398abf622f_fixed.java
@@ -1,54 +1,108 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
+    if (clazz == null) {
+        throw new ParseException("Class type is null");
+    }
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
-        else
+    // <--- FIX: handle explicit types like Integer, Double, Boolean, etc. --->
+    else if (clazz == Integer.class)
     {
-            return null;
+        try {
+            return (T) Integer.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Value '" + str + "' is not a valid Integer.", e);
         }
     }
+    else if (clazz == Long.class)
+    {
+        try {
+            return (T) Long.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Value '" + str + "' is not a valid Long.", e);
+        }
+    }
+    else if (clazz == Double.class)
+    {
+        try {
+            return (T) Double.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Value '" + str + "' is not a valid Double.", e);
+        }
+    }
+    else if (clazz == Float.class)
+    {
+        try {
+            return (T) Float.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Value '" + str + "' is not a valid Float.", e);
+        }
+    }
+    else if (clazz == Boolean.class)
+    {
+        if ("true".equalsIgnoreCase(str) || "yes".equalsIgnoreCase(str) || "1".equals(str)) {
+            return (T) Boolean.TRUE;
+        }
+        if ("false".equalsIgnoreCase(str) || "no".equalsIgnoreCase(str) || "0".equals(str)) {
+            return (T) Boolean.FALSE;
+        }
+        throw new ParseException("Value '" + str + "' is not a valid Boolean.");
+    }
+    else if (clazz == Short.class)
+    {
+        try {
+            return (T) Short.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Value '" + str + "' is not a valid Short.", e);
+        }
+    }
+    else if (clazz == Byte.class)
+    {
+        try {
+            return (T) Byte.valueOf(str);
+        } catch (Exception e) {
+            throw new ParseException("Value '" + str + "' is not a valid Byte.", e);
+        }
+    }
+    else if (clazz == String.class)
+    {
+        return (T) str;
+    }
+    // If clazz is not handled, throw ParseException
+    throw new ParseException("Unhandled class type: " + clazz);
+}
\ No newline at end of file
