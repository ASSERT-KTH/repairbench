diff --git a/tmp/12520064-36be-420a-bafa-75fdfa57ef8d_buggy.java b/tmp/8868b2fe-a07e-4042-b400-476b7417216d_fixed.java
index 9353941..540dd7a 100644
--- a/tmp/12520064-36be-420a-bafa-75fdfa57ef8d_buggy.java
+++ b/tmp/8868b2fe-a07e-4042-b400-476b7417216d_fixed.java
@@ -1,30 +1,52 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        Node parent = n.getParent();
+        // Only consider true "kills" for assignment ops (=, +=, etc), not for parameter declarations
+        if (parent != null &&
+            (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)) {
+          // The LHS of an assignment.
           return VariableLiveness.KILL;
+        } else {
+          // Just a read (e.g. in a var declaration).
+          return VariableLiveness.READ;
+        }
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
+    // For short-circuiting operators (&&, ||), we must stop
+    // after the first child if the first reference was found there.
     for (Node child = n.getFirstChild();
          child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
+      // For short-circuiting operators (&&, ||) and the comma operator,
+      // only evaluate subsequent children if the first did not cause an early return.
+      if ((n.isAnd() || n.isOr() || n.isComma()) && child == n.getFirstChild()) {
+        // Only the left child; process right child only if left is MAYBE_LIVE
+        if (child.getNext() != null) {
+          VariableLiveness state = isVariableReadBeforeKill(child, variable);
+          if (state != VariableLiveness.MAYBE_LIVE) {
+            return state;
+          }
+        }
+      }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
