diff --git a/tmp/f616b570-710b-424d-89e0-970bfb9f30cf_buggy.java b/tmp/58a2d32b-2896-4e0f-99d6-09bf64ba137c_fixed.java
index 9353941..14030d4 100644
--- a/tmp/f616b570-710b-424d-89e0-970bfb9f30cf_buggy.java
+++ b/tmp/58a2d32b-2896-4e0f-99d6-09bf64ba137c_fixed.java
@@ -1,30 +1,40 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+        // Only consider as KILL if we are on the left of an assignment operator (= or op=)
+        Node parent = n.getParent();
+        if (parent.isAssign() && parent.getFirstChild() == n) {
+          // This is a kill (assignment) for `x = ...`
           return VariableLiveness.KILL;
+        } else if (parent.isAssignOp() && parent.getFirstChild() == n) {
+          // Compound assignment (+=, -=, etc) also READS then WRITES
+          // So first reference is considered a READ
+          return VariableLiveness.READ;
         } else {
+          // It's a LHS in, e.g., var x; or function(x), which isn't a KILL in expr context.
+          return VariableLiveness.READ;
+        }
+      } else {
+        // First reference is a READ.
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
          child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
