diff --git a/tmp/eeeaaaed-9933-4829-af95-4a85a20bef59_buggy.java b/tmp/ecc95a68-5577-450d-b336-368cc268dd9e_fixed.java
index 9353941..fc2d009 100644
--- a/tmp/eeeaaaed-9933-4829-af95-4a85a20bef59_buggy.java
+++ b/tmp/ecc95a68-5577-450d-b336-368cc268dd9e_fixed.java
@@ -1,30 +1,43 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      // An assignment (KILL) only counts as such if we are not directly
+      // evaluating the variable as the result of the entire assignment
+      // (i.e., x = ... is KILL, but "x = foo(x)" the left x, and "x" on the RHS is a READ).
+      Node parent = n.getParent();
+      if (parent.isAssign()) {
+        // We must make sure this is the lhs of the assignment.
+        // There's a corner-case for expr1, expr2 in "x = foo(x)", as in
+        // the tests, so if our variable is indeed the left-hand side of the assignment,
+        // this is a KILL.
+        if (parent.getFirstChild() == n) {
           return VariableLiveness.KILL;
+        }
+      } else if (parent.isVar()) {
+        return VariableLiveness.KILL;
+      }
+      // Otherwise, it's actually a READ (e.g., x++ or --x, which is DUAL)
+      // but for this use-case, interpret them as READ.
+      return VariableLiveness.READ;
     } else {
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+  // Evaluate children in order (left-to-right)
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
