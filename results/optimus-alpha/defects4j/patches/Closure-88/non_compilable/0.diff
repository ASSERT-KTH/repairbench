diff --git a/tmp/35df1d60-20c8-4ae8-92d7-121c9dc55a9e_buggy.java b/tmp/59767a19-226b-46ab-807d-d89e9e7c9a7a_fixed.java
index 9353941..87a982d 100644
--- a/tmp/35df1d60-20c8-4ae8-92d7-121c9dc55a9e_buggy.java
+++ b/tmp/59767a19-226b-46ab-807d-d89e9e7c9a7a_fixed.java
@@ -1,30 +1,81 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        Node parent = n.getParent();
+        if (parent.isAssign() && n == parent.getFirstChild()) {
+          // This is the LHS of an assignment, only kill if this node is not part of a compound assignment (+=, etc.)
           return VariableLiveness.KILL;
+        }
+        // Other LHS contexts (e.g., variable declaration) should also count as kill
+        if (NodeUtil.isVarDeclaration(n)) {
+          return VariableLiveness.KILL;
+        }
+      } else {
+        return VariableLiveness.READ;
+      }
+    }
+
+    // Short-circuiting for logical operators and conditional expressions
+    if (n.isAnd() || n.isOr()) {
+      // Left and right evaluated left to right, but if left determines value, right is skipped
+      VariableLiveness left = isVariableReadBeforeKill(n.getFirstChild(), variable);
+      if (left != VariableLiveness.MAYBE_LIVE) {
+        return left;
+      }
+      VariableLiveness right = isVariableReadBeforeKill(n.getLastChild(), variable);
+      if (right != VariableLiveness.MAYBE_LIVE) {
+        return right;
+      }
+      return VariableLiveness.MAYBE_LIVE;
+    } else if (n.isHook()) {
+      // condition ? then : else
+      Node cond = n.getFirstChild();
+      Node thenBranch = cond.getNext();
+      Node elseBranch = thenBranch.getNext();
+      VariableLiveness condState = isVariableReadBeforeKill(cond, variable);
+      if (condState != VariableLiveness.MAYBE_LIVE) {
+        return condState;
+      }
+      VariableLiveness thenState = isVariableReadBeforeKill(thenBranch, variable);
+      VariableLiveness elseState = isVariableReadBeforeKill(elseBranch, variable);
+      if (thenState == elseState) {
+        return thenState;
+      } else if (thenState == VariableLiveness.KILL || elseState == VariableLiveness.KILL) {
+        // If either branch is kill, and the other is may_live, return kill (conservative)
+        if (thenState == VariableLiveness.MAYBE_LIVE) {
+          return elseState;
+        }
+        if (elseState == VariableLiveness.MAYBE_LIVE) {
+          return thenState;
+        }
+        return VariableLiveness.MAYBE_LIVE;
       } else {
+        // If one branch is read, prioritize that.
+        if (thenState == VariableLiveness.READ || elseState == VariableLiveness.READ) {
           return VariableLiveness.READ;
         }
+        return VariableLiveness.MAYBE_LIVE;
+      }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
