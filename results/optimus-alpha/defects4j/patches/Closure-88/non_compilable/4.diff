diff --git a/tmp/f999494a-9003-47e7-94b5-112cd9a6324c_buggy.java b/tmp/8dd87ae7-7663-436e-8cf3-04d3c0e96134_fixed.java
index 9353941..3bb1ac9 100644
--- a/tmp/f999494a-9003-47e7-94b5-112cd9a6324c_buggy.java
+++ b/tmp/8dd87ae7-7663-436e-8cf3-04d3c0e96134_fixed.java
@@ -1,30 +1,55 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        // Only return KILL if this is the actual assignment target, not in the RHS.
+        Node parent = n.getParent();
+        if (parent.isAssign() && parent.getFirstChild() == n) {
           return VariableLiveness.KILL;
+        }
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Special handling for short-circuiting binary operators (&&, ||) and
+    // the comma operator, which evaluate their operands left-to-right but may
+    // skip right depending on the left's result.
+    if (n.isOr() || n.isAnd() || n.isComma()) {
+      Node first = n.getFirstChild();
+      Node second = first.getNext();
+
+      // Check first child (left).
+      VariableLiveness state = isVariableReadBeforeKill(first, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state;
+      }
+
+      // Check second child (right).
+      state = isVariableReadBeforeKill(second, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state;
+      }
+      return VariableLiveness.MAYBE_LIVE;
+    }
+
+    // For all other expressions, depth-first, left-to-right traversal.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
