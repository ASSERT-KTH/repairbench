diff --git a/tmp/af08d3ec-8677-457e-8248-ef006822707e_buggy.java b/tmp/f4e96f5b-4dcb-42bb-a4e2-4b67f6c1fedf_fixed.java
index 9353941..cbfcd3a 100644
--- a/tmp/af08d3ec-8677-457e-8248-ef006822707e_buggy.java
+++ b/tmp/f4e96f5b-4dcb-42bb-a4e2-4b67f6c1fedf_fixed.java
@@ -1,30 +1,78 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      if (NodeUtil.isLhs(n, n.getParent()) &&
+          n.getParent().isAssign() &&
+          n == n.getParent().getFirstChild()) {
+        // The first reference is as an assignment (KILL).
         return VariableLiveness.KILL;
       } else {
+        // The first reference is a read (READ).
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+    // Walk children left-to-right, but for certain operators (like AND, OR)
+    // the evaluation may short-circuit. For those, we must stop once we know
+    // the live-ness for the left operand.
+    switch (n.getType()) {
+      // Binary operators that short-circuit (AND, OR, COALESCE)
+      case Token.AND:
+      case Token.OR:
+      case Token.COALESCE: {
+        Node left = n.getFirstChild();
+        Node right = left.getNext();
+        VariableLiveness leftState = isVariableReadBeforeKill(left, variable);
+        if (leftState != VariableLiveness.MAYBE_LIVE) {
+          return leftState;
+        }
+        return isVariableReadBeforeKill(right, variable);
+      }
+      // Conditional: only first check condition, as it may short-circuit
+      case Token.HOOK: {
+        Node cond = n.getFirstChild();
+        Node trueExpr = cond.getNext();
+        Node falseExpr = trueExpr.getNext();
+        VariableLiveness condState = isVariableReadBeforeKill(cond, variable);
+        if (condState != VariableLiveness.MAYBE_LIVE) {
+          return condState;
+        }
+        VariableLiveness trueState = isVariableReadBeforeKill(trueExpr, variable);
+        VariableLiveness falseState = isVariableReadBeforeKill(falseExpr, variable);
+        // If either child found a definitive answer, propagate up
+        if (trueState == VariableLiveness.READ || falseState == VariableLiveness.READ) {
+          return VariableLiveness.READ;
+        }
+        if (trueState == VariableLiveness.KILL && falseState == VariableLiveness.KILL) {
+          return VariableLiveness.KILL;
+        }
+        return VariableLiveness.MAYBE_LIVE;
+      }
+      // For assignments, evaluate RHS before LHS is killed
+      case Token.ASSIGN:
+        // For assignments: first check RHS (value assigned),
+        // if not found, check LHS
+        Node lhs = n.getFirstChild();
+        Node rhs = lhs.getNext();
+        VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+        if (rhsState != VariableLiveness.MAYBE_LIVE) {
+          return rhsState;
+        }
+        return isVariableReadBeforeKill(lhs, variable);
+      default:
+        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
             VariableLiveness state = isVariableReadBeforeKill(child, variable);
             if (state != VariableLiveness.MAYBE_LIVE) {
               return state;
             }
           }
         }
         return VariableLiveness.MAYBE_LIVE;
     }
+  }
\ No newline at end of file
