diff --git a/tmp/cdf2f0bc-ac77-47ea-9283-cd20b57d4490_buggy.java b/tmp/163c65b9-055d-434f-bac8-254cfb784172_fixed.java
index 9353941..8b4c49e 100644
--- a/tmp/cdf2f0bc-ac77-47ea-9283-cd20b57d4490_buggy.java
+++ b/tmp/163c65b9-055d-434f-bac8-254cfb784172_fixed.java
@@ -1,30 +1,38 @@
 /**
-   * Give an expression and a variable. It returns READ, if the first
+ * Given an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+ * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      // occurs after the RHS is evaluated. So check if this is "x = RHS"
+      // If we are currently visiting the lhs of the assignment, this is a write.
+      Node parent = n.getParent();
+      Node lhs = parent.getFirstChild();
+      if (n == lhs) {
         return VariableLiveness.KILL;
       } else {
+        // This is reading 'x' in a compound assignment (like x += 1) or destructuring
+        return VariableLiveness.READ;
+      }
+    } else {
+      // Just a plain read.
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+  // Evaluate children in evaluation order.
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
