diff --git a/tmp/a0b2ca59-4b17-4867-ac8f-345614c5fd57_buggy.java b/tmp/09a543a9-f98d-46a6-9fbd-f5224798674d_fixed.java
index 66e3d01..adaac16 100644
--- a/tmp/a0b2ca59-4b17-4867-ac8f-345614c5fd57_buggy.java
+++ b/tmp/09a543a9-f98d-46a6-9fbd-f5224798674d_fixed.java
@@ -1,34 +1,42 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
-      // Binary operators are only valid if both children are valid.
+    // Bitwise operators (&, |, ^) are only valid if both children are valid.
     case Token.BITAND:
-      case Token.BITNOT:
     case Token.BITOR:
     case Token.BITXOR:
+      return isValidDefineValue(val.getFirstChild(), defines)
+          && isValidDefineValue(val.getLastChild(), defines);
 
-      // Uniary operators are valid if the child is valid.
+    // Unary operators (~, !, -) are valid if the child is valid.
+    case Token.BITNOT:
     case Token.NOT:
     case Token.NEG:
       return isValidDefineValue(val.getFirstChild(), defines);
 
+    // Addition is only valid if both operands are string, number,
+    // boolean, or string concatenation.
+    case Token.ADD:
+      return isValidDefineValue(val.getFirstChild(), defines)
+          && isValidDefineValue(val.getLastChild(), defines);
+
     // Names are valid if and only if they are defines themselves.
     case Token.NAME:
     case Token.GETPROP:
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
   }
   return false;
 }
\ No newline at end of file
