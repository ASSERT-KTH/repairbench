diff --git a/tmp/14541ae8-1c8f-4973-97fe-9a37aa563412_buggy.java b/tmp/f7a1eaf3-ac20-4da5-931a-f0f38a9542a9_fixed.java
index 66e3d01..59b818c 100644
--- a/tmp/14541ae8-1c8f-4973-97fe-9a37aa563412_buggy.java
+++ b/tmp/f7a1eaf3-ac20-4da5-931a-f0f38a9542a9_fixed.java
@@ -1,34 +1,42 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
     // Binary operators are only valid if both children are valid.
     case Token.BITAND:
     case Token.BITNOT:
     case Token.BITOR:
     case Token.BITXOR:
+    case Token.ADD:
+      Node firstChild = val.getFirstChild();
+      Node secondChild = firstChild != null ? firstChild.getNext() : null;
+      // For BITNOT and NEG, only one child exists.
+      if (secondChild == null) {
+        return firstChild != null && isValidDefineValue(firstChild, defines);
+      }
+      return isValidDefineValue(firstChild, defines) && isValidDefineValue(secondChild, defines);
 
-      // Uniary operators are valid if the child is valid.
+    // Unary operators are valid if the child is valid.
     case Token.NOT:
     case Token.NEG:
       return isValidDefineValue(val.getFirstChild(), defines);
 
     // Names are valid if and only if they are defines themselves.
     case Token.NAME:
     case Token.GETPROP:
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
   }
   return false;
 }
\ No newline at end of file
