diff --git a/tmp/e1d5253d-df00-4a0b-8e16-c34c6cebe601_buggy.java b/tmp/51d202d8-1c69-4c03-bb3c-ab8f43d4cbf7_fixed.java
index 9d69396..1e881a8 100644
--- a/tmp/e1d5253d-df00-4a0b-8e16-c34c6cebe601_buggy.java
+++ b/tmp/51d202d8-1c69-4c03-bb3c-ab8f43d4cbf7_fixed.java
@@ -1,46 +1,32 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
 
     int digits = 0;
+    int chksumStart = CHKSUM_OFFSET;
+    int chksumEnd = CHKSUM_OFFSET + CHKSUMLEN;
+
+    // Calculate stored checksum
+    // Copy checksum field (i.e. 8 bytes) to a separate array for parsing
+    byte[] checksumField = new byte[CHKSUMLEN];
+    System.arraycopy(header, chksumStart, checksumField, 0, CHKSUMLEN);
+    String chkSumString = new String(checksumField, 0, CHKSUMLEN, java.nio.charset.StandardCharsets.US_ASCII).trim();
+    // As per spec: skip leading/trailing spaces, only the first 6 octal digits count
+    int len = 0;
+    while (len < chkSumString.length() && len < 6 && chkSumString.charAt(len) >= '0' && chkSumString.charAt(len) <= '7') {
+        storedSum = storedSum * 8 + (chkSumString.charAt(len) - '0');
+        len++;
+    }
+
+    // For unsigned/signed sum, treat header but spaces in chksum field
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
+        if (i >= chksumStart && i < chksumEnd) {
             b = ' ';
         }
-            unsignedSum += 0xff & b;
+        unsignedSum += (b & 0xFF);
         signedSum += b;
     }
     return storedSum == unsignedSum || storedSum == signedSum;
 }
\ No newline at end of file
