diff --git a/tmp/800a1a0b-6bf6-4fec-b0cd-8e20957dc925_buggy.java b/tmp/a1cf5b17-b0bc-4b46-88af-76c99ec290ad_fixed.java
index 1478ee1..f2b7122 100644
--- a/tmp/800a1a0b-6bf6-4fec-b0cd-8e20957dc925_buggy.java
+++ b/tmp/a1cf5b17-b0bc-4b46-88af-76c99ec290ad_fixed.java
@@ -1,24 +1,37 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Kahan's algorithm to reduce cancellation error in cross product
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // Find the largest absolute component in v2 for scaling
+      double norm = Math.max(Math.abs(v2.x), Math.max(Math.abs(v2.y), Math.abs(v2.z)));
+      if (norm == 0.0) { // fallback if v2 is zero vector
+          return new Vector3D(0.0, 0.0, 0.0);
+      }
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Scale v2
+      double invNorm = 1.0 / norm;
+      double vx = v2.x * invNorm;
+      double vy = v2.y * invNorm;
+      double vz = v2.z * invNorm;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Compute rho = round((v1.v2)/(v2.v2) * 256) / 256 (8 bits of precision)
+      double s = v1.x * vx + v1.y * vy + v1.z * vz;
+      double r = Math.rint(s * 256.0) / 256.0;
 
+      // Preconditioned v3 = v1 - r*v2/norm
+      double v3x = v1.x - r * vx * norm;
+      double v3y = v1.y - r * vy * norm;
+      double v3z = v1.z - r * vz * norm;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute cross product v3 ^ v2
+      double cx = v3y * v2.z - v3z * v2.y;
+      double cy = v3z * v2.x - v3x * v2.z;
+      double cz = v3x * v2.y - v3y * v2.x;
 
+      return new Vector3D(cx, cy, cz);
   }
\ No newline at end of file
