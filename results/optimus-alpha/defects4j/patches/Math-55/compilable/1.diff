diff --git a/tmp/de0c6b0d-a906-49de-84a3-610f91a055d5_buggy.java b/tmp/38246c8a-e8d7-4e1f-a3e4-dc1151f3e00d_fixed.java
index 1478ee1..32faa2f 100644
--- a/tmp/de0c6b0d-a906-49de-84a3-610f91a055d5_buggy.java
+++ b/tmp/38246c8a-e8d7-4e1f-a3e4-dc1151f3e00d_fixed.java
@@ -1,24 +1,26 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // We reduce cancellation errors by preconditioning (Kahan's method)
+      // Compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      final double norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+      final double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+      final long rhoBits = Double.doubleToLongBits(dot / norm2) & 0xFFFFFFFFFFFFFF00L;
+      final double rho = Double.longBitsToDouble(rhoBits);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // v3 = v1 - rho * v2
+      final double x3 = v1.x - rho * v2.x;
+      final double y3 = v1.y - rho * v2.y;
+      final double z3 = v1.z - rho * v2.z;
 
+      // Compute cross product from v3 and v2 instead of v1 and v2
+      return new Vector3D(
+          y3 * v2.z - z3 * v2.y,
+          z3 * v2.x - x3 * v2.z,
+          x3 * v2.y - y3 * v2.x
+      );
   }
\ No newline at end of file
