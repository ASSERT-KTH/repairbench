diff --git a/tmp/8ed4a355-26d3-41f5-b313-e3198f1d0852_buggy.java b/tmp/9c563f58-8f83-4173-a1a6-7bbf00b7b9a8_fixed.java
index 1478ee1..b3ef8d7 100644
--- a/tmp/8ed4a355-26d3-41f5-b313-e3198f1d0852_buggy.java
+++ b/tmp/9c563f58-8f83-4173-a1a6-7bbf00b7b9a8_fixed.java
@@ -1,24 +1,27 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Avoid cancellation if the vectors are (nearly) parallel and large
+      // This is done by preconditioning as described by Kahan
 
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      final double inv = 1.0 / 256.0;
+      double ratio = (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) /
+                     (v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);
+      double rho = Math.rint(ratio / inv) * inv;
 
+      // precondition: v3 = v1 - rho * v2, cross(v3, v2) == cross(v1, v2)
+      double x = v1.x - rho * v2.x;
+      double y = v1.y - rho * v2.y;
+      double z = v1.z - rho * v2.z;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+      return new Vector3D(
+          y * v2.z - z * v2.y,
+          z * v2.x - x * v2.z,
+          x * v2.y - y * v2.x
+      );
   }
\ No newline at end of file
