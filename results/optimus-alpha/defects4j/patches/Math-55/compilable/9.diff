diff --git a/tmp/72e7fd20-57c3-4f0a-bfe5-c44912b9d136_buggy.java b/tmp/18367d39-c9f7-4ce9-9de6-3f26c5639b52_fixed.java
index 1478ee1..cf4f8b0 100644
--- a/tmp/72e7fd20-57c3-4f0a-bfe5-c44912b9d136_buggy.java
+++ b/tmp/18367d39-c9f7-4ce9-9de6-3f26c5639b52_fixed.java
@@ -1,24 +1,27 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // The following preconditioning reduces cancellation errors
+    // by subtracting a suitable multiple of v2 from v1 before computing the cross product.
+    // See Kahan: http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+    double normV2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    double rho = 0;
+    if (normV2 != 0) {
+        // compute 8-bits approximation of v1.v2 / v2.v2
+        double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+        long approx = Double.doubleToRawLongBits(dot / normV2);
+        // keep only the top 8 bits of significand (plus sign and exponent)
+        approx &= 0xFFFFFFFFFFFFFF00L;
+        rho = Double.longBitsToDouble(approx);
+    }
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // v3 = v1 - rho * v2
+    double v3x = v1.x - rho * v2.x;
+    double v3y = v1.y - rho * v2.y;
+    double v3z = v1.z - rho * v2.z;
 
+    return new Vector3D(
+            v3y * v2.z - v3z * v2.y,
+            v3z * v2.x - v3x * v2.z,
+            v3x * v2.y - v3y * v2.x);
 }
\ No newline at end of file
