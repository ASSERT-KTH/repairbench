diff --git a/tmp/955637be-b9b8-484e-9a51-a7cc4661a772_buggy.java b/tmp/192d2dd9-7c25-4bf5-a6e7-e2a07b8ff404_fixed.java
index 1478ee1..df52c88 100644
--- a/tmp/955637be-b9b8-484e-9a51-a7cc4661a772_buggy.java
+++ b/tmp/192d2dd9-7c25-4bf5-a6e7-e2a07b8ff404_fixed.java
@@ -1,24 +1,27 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
+      // Kahan's preconditioning to reduce cancellation errors,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      double norm = v2.getX() * v2.getX() + v2.getY() * v2.getY() + v2.getZ() * v2.getZ();
+      double rho = (norm == 0) ? 0 : Math.rint((v1.dotProduct(v2) / norm) * 256.0) / 256.0;
 
+      // v3 = v1 - rho * v2;
+      double x3 = v1.getX() - rho * v2.getX();
+      double y3 = v1.getY() - rho * v2.getY();
+      double z3 = v1.getZ() - rho * v2.getZ();
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+      // now compute cross product from v3 and v2
+      return new Vector3D(
+          y3 * v2.getZ() - z3 * v2.getY(),
+          z3 * v2.getX() - x3 * v2.getZ(),
+          x3 * v2.getY() - y3 * v2.getX()
+      );
   }
\ No newline at end of file
