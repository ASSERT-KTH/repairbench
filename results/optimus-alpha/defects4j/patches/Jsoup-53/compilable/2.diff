diff --git a/tmp/09f6c94e-df5c-4e3d-bfbb-78e37ffd974d_buggy.java b/tmp/1a0bb3fc-1fed-4ea5-9aae-f640fc0d2043_fixed.java
index fecb896..31f5424 100644
--- a/tmp/09f6c94e-df5c-4e3d-bfbb-78e37ffd974d_buggy.java
+++ b/tmp/1a0bb3fc-1fed-4ea5-9aae-f640fc0d2043_fixed.java
@@ -1,34 +1,60 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
-        char last = 0;
+    boolean inSingleQuote = false;
+    boolean inDoubleQuote = false;
+    boolean inEscape = false;
+    char prev = 0;
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    // The queue begins at pos. We need to keep track.
+    int initialPos = pos;
+
+    while (!isEmpty()) {
+        char c = consume();
+
+        if (inEscape) {
+            inEscape = false;
+            prev = c;
+            continue;
+        }
+        if (c == ESC) {
+            inEscape = true;
+            prev = c;
+            continue;
+        }
+        // Toggle quote status only if not already inside another quote
+        if (c == '\'' && !inDoubleQuote) {
+            inSingleQuote = !inSingleQuote;
+            prev = c;
+            continue;
+        }
+        if (c == '"' && !inSingleQuote) {
+            inDoubleQuote = !inDoubleQuote;
+            prev = c;
+            continue;
+        }
+        if (inSingleQuote || inDoubleQuote) {
+            prev = c;
+            continue;
+        }
+
+        if (c == open) {
             depth++;
             if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                start = pos; // pos already incremented in consume()
+        } else if (c == close) {
             depth--;
         }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        if (depth == 0 && start != -1) {
+            end = pos - 1; // end is exclusive, pos is 1 past the last match
+            break;
+        }
+        prev = c;
+    }
+    if (start != -1 && end >= start) {
+        return queue.substring(start, end);
+    }
+    return "";
 }
\ No newline at end of file
