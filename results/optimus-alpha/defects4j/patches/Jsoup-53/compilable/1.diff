diff --git a/tmp/eafd4e4c-23a2-4cc1-bfae-cbf0f442c350_buggy.java b/tmp/a0ffb569-b3f1-4ff1-b6ba-0229d2ba2b34_fixed.java
index fecb896..2580e38 100644
--- a/tmp/eafd4e4c-23a2-4cc1-bfae-cbf0f442c350_buggy.java
+++ b/tmp/a0ffb569-b3f1-4ff1-b6ba-0229d2ba2b34_fixed.java
@@ -1,34 +1,35 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
         char last = 0;
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        while (!isEmpty()) {
+            char c = consume();
+            if (last == ESC) {
+                // Do nothing, current char is escaped
+            } else if (c == '\'') {
+                inSingleQuote = !inSingleQuote && !inDoubleQuote;
+            } else if (c == '"') {
+                inDoubleQuote = !inDoubleQuote && !inSingleQuote;
+            } else if (!inSingleQuote && !inDoubleQuote) {
+                if (c == open) {
                     depth++;
                     if (start == -1)
                         start = pos;
-                }
-                else if (c.equals(close))
+                } else if (c == close) {
                     depth--;
                 }
+            }
+
+            if (depth > 0)
+                end = pos;
+            if (depth == 0 && start != -1)
+                break;
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
             last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        }
+        return (start != -1 && end != -1) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
