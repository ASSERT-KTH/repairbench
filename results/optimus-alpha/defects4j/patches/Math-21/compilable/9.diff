diff --git a/tmp/bc0675fc-ed95-47af-8c6a-fe5530a6e9ec_buggy.java b/tmp/65a4d2e7-b3ad-4905-a294-dd332c7badf3_fixed.java
index 6708762..df57f6d 100644
--- a/tmp/bc0675fc-ed95-47af-8c6a-fe5530a6e9ec_buggy.java
+++ b/tmp/65a4d2e7-b3ad-4905-a294-dd332c7badf3_fixed.java
@@ -1,99 +1,87 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
+     * @param small Diagonal elements threshold under which columns are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
         int r = 0;
-        for (boolean loop = true; loop;) {
-
-            // find maximal diagonal element
-            swap[r] = r;
+        boolean loop = true;
+        while (loop) {
+            // find maximal diagonal element (pivoting)
+            int swapIndex = r;
+            double maxDiag = c[index[r]][index[r]];
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                double diag = c[index[i]][index[i]];
+                if (diag > maxDiag) {
+                    swapIndex = i;
+                    maxDiag = diag;
                 }
             }
 
-
-            // swap elements
-            if (swap[r] != r) {
+            // swap indices if necessary (pivot)
+            if (swapIndex != r) {
                 int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+                index[r] = index[swapIndex];
+                index[swapIndex] = tmp;
             }
 
-            // check diagonal element
             int ir = index[r];
             if (c[ir][ir] < small) {
-
                 if (r == 0) {
                     throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                 }
-
-                // check remaining diagonal elements
+                // check remaining diagonal elements for significant negative values
                 for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                    double diag = c[index[i]][index[i]];
+                    if (diag < -small) {
+                        throw new NonPositiveDefiniteMatrixException(diag, index[i], small);
                     }
                 }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
+                // Rank is found: the rest are numerically zero
                 ++r;
                 loop = false;
-
             } else {
-
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
+                // Pivoted Cholesky transformation
+                double sqrt = FastMath.sqrt(c[ir][ir]);
                 b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+                double inverse = 1.0 / sqrt;
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
+                    int ii = index[i];
+                    double e = c[ii][ir] * inverse;
                     b[i][r] = e;
                     c[ii][ii] -= e * e;
-                    for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                    for (int j = r + 1; j <= i; ++j) {
+                        int ij = index[j];
+                        double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
                         c[ij][ii] = f;
                     }
                 }
-
-                // prepare next iteration
                 loop = ++r < order;
             }
         }
 
         // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
+        rank = r - 1;
+        root = MatrixUtils.createRealMatrix(order, rank);
         for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+            for (int j = 0; j < rank; ++j) {
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
