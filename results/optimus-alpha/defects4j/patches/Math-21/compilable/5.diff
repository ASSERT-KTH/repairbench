diff --git a/tmp/a3cd5b48-f1ce-4f81-9e86-793b5a76ef11_buggy.java b/tmp/974aaacc-def6-44b2-9d5e-1529a6e68b7c_fixed.java
index 6708762..8bc033b 100644
--- a/tmp/a3cd5b48-f1ce-4f81-9e86-793b5a76ef11_buggy.java
+++ b/tmp/974aaacc-def6-44b2-9d5e-1529a6e68b7c_fixed.java
@@ -1,99 +1,99 @@
 /**
  * Decompose a symmetric positive semidefinite matrix.
  *
  * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
+ * @param small Diagonal elements threshold under which columns are
  * considered to be dependent on previous ones and are discarded.
  * @exception NonPositiveDefiniteMatrixException if the matrix is not
  * positive semidefinite.
  */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
     final double[][] c = matrix.getData();
     final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
     int[] index = new int[order];
     for (int i = 0; i < order; ++i) {
         index[i] = i;
     }
 
     int r = 0;
     for (boolean loop = true; loop;) {
 
         // find maximal diagonal element
-            swap[r] = r;
+        int max = r;
+        double maxVal = c[index[r]][index[r]];
         for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+            double diag = c[index[i]][index[i]];
+            if (diag > maxVal) {
+                maxVal = diag;
+                max = i;
             }
         }
 
-
-            // swap elements
-            if (swap[r] != r) {
+        // swap elements if necessary
+        if (max != r) {
             int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+            index[r] = index[max];
+            index[max] = tmp;
         }
 
         // check diagonal element
         int ir = index[r];
         if (c[ir][ir] < small) {
 
             if (r == 0) {
                 throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
             }
 
             // check remaining diagonal elements
             for (int i = r; i < order; ++i) {
                 if (c[index[i]][index[i]] < -small) {
                     // there is at least one sufficiently negative diagonal element,
                     // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], index[i], small);
                 }
             }
 
             // all remaining diagonal elements are close to zero, we consider we have
             // found the rank of the symmetric positive semidefinite matrix
-                ++r;
             loop = false;
 
         } else {
 
             // transform the matrix
             final double sqrt = FastMath.sqrt(c[ir][ir]);
             b[r][r] = sqrt;
             final double inverse  = 1 / sqrt;
             for (int i = r + 1; i < order; ++i) {
                 final int ii = index[i];
                 final double e = inverse * c[ii][ir];
                 b[i][r] = e;
                 c[ii][ii] -= e * e;
-                    for (int j = r + 1; j < i; ++j) {
+                for (int j = r + 1; j < i + 1; ++j) { // <-- FIXED boundary to include symmetric update!
                     final int ij = index[j];
+                    // Only update upper triangle (i <= j), because c[ij][ii] = c[ii][ij]
+                    if (ii <= ij) {
                         final double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
                         c[ij][ii] = f;
                     }
                 }
+            }
 
             // prepare next iteration
             loop = ++r < order;
         }
     }
 
     // build the root matrix
     rank = r;
     root = MatrixUtils.createRealMatrix(order, r);
     for (int i = 0; i < order; ++i) {
         for (int j = 0; j < r; ++j) {
             root.setEntry(index[i], j, b[i][j]);
         }
     }
-
 }
\ No newline at end of file
