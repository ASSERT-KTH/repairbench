diff --git a/tmp/78cb444d-aa89-4e06-be75-ea64f66b1e8e_buggy.java b/tmp/39dd6237-db34-449a-b1cd-eb224397f964_fixed.java
index 227a4ef..3388e66 100644
--- a/tmp/78cb444d-aa89-4e06-be75-ea64f66b1e8e_buggy.java
+++ b/tmp/39dd6237-db34-449a-b1cd-eb224397f964_fixed.java
@@ -1,48 +1,67 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+        // Remove leading whitespace on the remaining text, then prefix padding
+        // (avoid padding-only lines, which would cause an infinite loop)
+        text = text.substring(lastPos).trim();
+
+        // If there's nothing left, break.
+        if (text.length() == 0) {
+            break;
+        }
+
+        text = padding + text;
+
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
-
+            sb.append(rtrim(text));
             return sb;
-            } else
+        } 
+        // If wrapping position does not move, force to wrap at line width to avoid infinite loop.
         if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // Defensive: If no spaces exist to wrap on, but text is too long,
+            // break forcibly at max width
+            pos = width;
+            if (pos > text.length())
+                pos = text.length();
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+        // If forcibly breaking line and nothing left, break out (prevents infinite loop for long unbreakable lines)
+        if (pos >= text.length()) {
+            break;
         }
     }
+    return sb;
+}
\ No newline at end of file
