diff --git a/tmp/f2d99849-7587-4fc3-b9a8-20d0c032e796_buggy.java b/tmp/24e986c0-3936-4f10-8546-f30d75bfc86d_fixed.java
index 227a4ef..1102fd6 100644
--- a/tmp/f2d99849-7587-4fc3-b9a8-20d0c032e796_buggy.java
+++ b/tmp/24e986c0-3936-4f10-8546-f30d75bfc86d_fixed.java
@@ -1,48 +1,72 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+        // Remove leading whitespace from the cut text to prevent unnecessary indentation growth
+        text = text.substring(pos).trim();
+        if (text.length() == 0) {
+            break;
+        }
+        text = padding + text;
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
-            } else
-            if (pos == lastPos)
+        }
+        // Instead of checking pos == lastPos (which can fail with many leading spaces), we check whether any progress is made:
+        // i.e., if next substring is empty or no position advancement, just break out to avoid infinite loop
+        if (pos <= padding.length())
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // forcibly split at width if still impossible to wrap
+            if (text.length() > width) {
+                sb.append(rtrim(text.substring(0, width))).append(defaultNewLine);
+                text = text.substring(width).trim();
+                if (text.length() == 0)
+                    break;
+                text = padding + text;
+                pos = findWrapPos(text, width, 0);
+                if (pos == -1) {
+                    sb.append(text);
+                    return sb;
+                }
+                lastPos = 0; // prevent infinite loop
+                continue;
+            } else {
+                sb.append(text);
+                return sb;
+            }
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
+    return sb;
 }
\ No newline at end of file
