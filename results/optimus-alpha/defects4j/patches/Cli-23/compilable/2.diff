diff --git a/tmp/15dea183-59a2-462a-b037-de0d88b719c5_buggy.java b/tmp/9fc5674c-99a3-4147-b5aa-45ce6ec06404_fixed.java
index 227a4ef..de86004 100644
--- a/tmp/15dea183-59a2-462a-b037-de0d88b719c5_buggy.java
+++ b/tmp/9fc5674c-99a3-4147-b5aa-45ce6ec06404_fixed.java
@@ -1,48 +1,64 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         } else
         if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // Instead of throwing, forcibly wrap the line at width
+            // Pick the minimum of: line length or width
+            int forcedWrapPos = Math.min(width, text.length());
+            if (forcedWrapPos <= 0 || forcedWrapPos == lastPos) {
+                // Give up to avoid infinite loops
+                sb.append(text);
+                return sb;
+            }
+            sb.append(rtrim(text.substring(0, forcedWrapPos))).append(defaultNewLine);
+            text = text.substring(forcedWrapPos);
+            if (text.trim().isEmpty()) {
+                return sb;
+            }
+            text = padding + text.trim();
+            pos = findWrapPos(text, width, 0);
+            lastPos = 0; // not used further, but avoids infinite loop
+            continue;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
