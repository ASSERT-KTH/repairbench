diff --git a/tmp/64883edc-cf2d-4d49-8b74-0addf3c6a534_buggy.java b/tmp/a9ef7212-5fa6-4b88-9725-c4528d58df9c_fixed.java
index 51ebfca..1755789 100644
--- a/tmp/64883edc-cf2d-4d49-8b74-0addf3c6a534_buggy.java
+++ b/tmp/a9ef7212-5fa6-4b88-9725-c4528d58df9c_fixed.java
@@ -1,32 +1,20 @@
-    /**
-     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
-     * 
-     * @param binaryData
-     *            Array containing binary data to encode.
-     * @param isChunked
-     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
-     * @param urlSafe
-     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
-     * @param maxResultSize
-     *            The maximum result size to accept.
-     * @return Base64-encoded data.
-     * @throws IllegalArgumentException
-     *             Thrown when the input array needs an output array bigger than maxResultSize
-     * @since 1.4
-     */
 public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
     if (binaryData == null || binaryData.length == 0) {
         return binaryData;
     }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+    // Choose actual chunk settings according to isChunked, not always MIME
+    final int lineLength = isChunked ? MIME_CHUNK_SIZE : 0;
+    final byte[] chunkSeparator = isChunked ? CHUNK_SEPARATOR : Base64.EMPTY_BYTE_ARRAY;
+
+    long len = getEncodeLength(binaryData, lineLength, chunkSeparator);
     if (len > maxResultSize) {
         throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
             len +
             ") than the specified maxium size of " +
             maxResultSize);
     }
 
-        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
+    Base64 b64 = new Base64(lineLength, chunkSeparator, urlSafe);
     return b64.encode(binaryData);
 }
\ No newline at end of file
