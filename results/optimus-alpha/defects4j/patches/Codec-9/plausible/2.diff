diff --git a/tmp/0321e30d-8f3b-414f-a30c-748e5ee57bf9_buggy.java b/tmp/f50416f8-2fed-4c29-b420-570eeff93be1_fixed.java
index 51ebfca..8aa318b 100644
--- a/tmp/0321e30d-8f3b-414f-a30c-748e5ee57bf9_buggy.java
+++ b/tmp/f50416f8-2fed-4c29-b420-570eeff93be1_fixed.java
@@ -1,32 +1,18 @@
-    /**
-     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
-     * 
-     * @param binaryData
-     *            Array containing binary data to encode.
-     * @param isChunked
-     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
-     * @param urlSafe
-     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
-     * @param maxResultSize
-     *            The maximum result size to accept.
-     * @return Base64-encoded data.
-     * @throws IllegalArgumentException
-     *             Thrown when the input array needs an output array bigger than maxResultSize
-     * @since 1.4
-     */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        // Use correct chunk size based on isChunked
+        int chunkSize = isChunked ? MIME_CHUNK_SIZE : 0;
+        long len = getEncodeLength(binaryData, chunkSize, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
 
-        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
+        Base64 b64 = new Base64(chunkSize, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
\ No newline at end of file
