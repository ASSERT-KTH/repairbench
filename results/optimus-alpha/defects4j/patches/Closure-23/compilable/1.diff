diff --git a/tmp/8c1f11e8-88f2-4760-b0a8-f7f6e78151d7_buggy.java b/tmp/2b3c42c1-4ac7-4fe2-a073-f3e5d6fe7bee_fixed.java
index cfdcd9c..0a9d553 100644
--- a/tmp/8c1f11e8-88f2-4760-b0a8-f7f6e78151d7_buggy.java
+++ b/tmp/2b3c42c1-4ac7-4fe2-a073-f3e5d6fe7bee_fixed.java
@@ -1,51 +1,56 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
         return n;
     }
 
     if (!right.isNumber()) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
+    Node targetElem = null;
+    for (int i = 0; i <= intIndex && current != null; i++) {
+        if (i == intIndex) {
+            targetElem = current;
+            break;
+        }
         current = current.getNext();
     }
 
-    if (elem == null) {
+    if (targetElem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    Node elem;
+    if (targetElem.isEmpty()) {
+        elem = NodeUtil.newUndefinedNode(targetElem);
     } else {
-      left.removeChild(elem);
+        // Remove the element from the array literal (left)
+        left.removeChild(targetElem);
+        elem = targetElem;
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
