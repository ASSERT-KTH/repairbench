diff --git a/tmp/1424b06f-cbca-4ff7-ae49-3883f37d4c82_buggy.java b/tmp/36bf881c-323d-4931-bef9-7fb69e27bdc9_fixed.java
index cfdcd9c..9e79872 100644
--- a/tmp/1424b06f-cbca-4ff7-ae49-3883f37d4c82_buggy.java
+++ b/tmp/36bf881c-323d-4931-bef9-7fb69e27bdc9_fixed.java
@@ -1,51 +1,65 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Find the elem node at position intIndex in the array literal
     Node current = left.getFirstChild();
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
+    int i = 0;
+    while (current != null && i <= intIndex) {
+      if (!current.isEmpty()) {
+        if (i == intIndex) {
           elem = current;
-
+          break;
+        }
+        i++;
+      } else {
+        if (i == intIndex) {
+          elem = current;
+          break;
+        }
+        i++;
+      }
       current = current.getNext();
     }
 
-    if (elem == null) {
+    // Check if the index is out of bounds (past last array slot)
+    if (i <= intIndex && elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    parent.replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
