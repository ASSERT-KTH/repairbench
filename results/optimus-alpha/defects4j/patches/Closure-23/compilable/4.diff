diff --git a/tmp/866ba769-70aa-4117-8a5b-28356f9a1f9c_buggy.java b/tmp/04d383ca-1dcc-40e7-936a-42fa8d795a67_fixed.java
index cfdcd9c..13e2688 100644
--- a/tmp/866ba769-70aa-4117-8a5b-28356f9a1f9c_buggy.java
+++ b/tmp/04d383ca-1dcc-40e7-936a-42fa8d795a67_fixed.java
@@ -1,51 +1,69 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
+    int i = 0;
+    while (current != null && i < intIndex) {
       current = current.getNext();
+      i++;
+    }
+
+    Node elem = current;
+
+    // The length of the array literal is the number of elements (sparse arrays,
+    // empty elements are still counted; e.g. [,,10] has length 3).
+    int arrayLength = 0;
+    Node tmp = left.getFirstChild();
+    while (tmp != null) {
+      arrayLength++;
+      tmp = tmp.getNext();
+    }
+
+    // Only fold if the index is in-bounds. In JS, valid indices are those where
+    // 0 <= index < array.length (even if the element is empty/undefined).
+    if (intIndex >= arrayLength) {
+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+      return n;
     }
 
     if (elem == null) {
+      // Should not actually happen: handled above already, but just in case.
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
