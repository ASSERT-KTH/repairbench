diff --git a/tmp/13cc0a86-982e-4b89-8398-5b8970862852_buggy.java b/tmp/5b7115b6-c093-4213-a160-f717b91905b7_fixed.java
index be9c8a3..b0e7ebd 100644
--- a/tmp/13cc0a86-982e-4b89-8398-5b8970862852_buggy.java
+++ b/tmp/5b7115b6-c093-4213-a160-f717b91905b7_fixed.java
@@ -1,94 +1,109 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+
+          // Don't inline if we see a call: x.y()
+          if (gramps.isCall() && gramps.getFirstChild() == parent) {
             return false;
           }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+          // Don't inline if we see access to any property that is not defined
+          // on an object literal assignment to x, since the prototype might be used.
+          boolean definedInObjectLit = false;
+          for (Reference defRef : refs) {
+            Node defVal = defRef.getAssignedValue();
+            if (defVal != null && defVal.isObjectLit()) {
+              Node targetKey =
+                  parent.getSecondChild(); // the property name for x.y
+              if (targetKey != null && (targetKey.isString() || targetKey.isName())) {
+                String targetName = targetKey.getString();
+                for (Node child = defVal.getFirstChild(); child != null;
+                     child = child.getNext()) {
+                  String keyName = child.getString();
+                  if (keyName.equals(targetName)) {
+                    definedInObjectLit = true;
+                    break;
+                  }
+                }
+              }
+            }
+            if (definedInObjectLit) break;
+          }
+          if (!definedInObjectLit) {
+            return false;
+          }
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
         // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
         // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
           if (child.isGetterDef() ||
               child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
 
-
           Node childVal = child.getFirstChild();
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments
           // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
+            while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
                 // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
 
-
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
         ret = true;
       }
       return ret;
     }
\ No newline at end of file
