diff --git a/tmp/d10c7a86-82ff-4df6-92c2-d71530d51b07_buggy.java b/tmp/566bed0d-2fb9-4b4d-ab45-4c4693b047ca_fixed.java
index be9c8a3..77943b8 100644
--- a/tmp/d10c7a86-82ff-4df6-92c2-d71530d51b07_buggy.java
+++ b/tmp/566bed0d-2fb9-4b4d-ab45-4c4693b047ca_fixed.java
@@ -1,94 +1,100 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
+      Set<String> definedProps = null;
+
+      // Find the primary object literal assignment
+      for (Reference ref : refs) {
+        Node name = ref.getNode();
+        Node parent = ref.getParent();
+
+        // Only consider VAR declarations or simple assignment statements
+        if (isVarOrAssignExprLhs(name)) {
+          Node val = ref.getAssignedValue();
+          if (val != null && val.isObjectLit()) {
+            // Collect all defined properties of the object literal
+            definedProps = new HashSet<>();
+            for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+              if (child.isGetterDef() || child.isSetterDef()) {
+                // ES5 get/set not supported.
+                return false;
+              }
+              String propName = child.getString();
+              definedProps.add(propName);
+              Node childVal = child.getFirstChild();
+              // Check for simple self-reference. This is not a perfect check.
+              for (Reference t : refs) {
+                Node refNode = t.getParent();
+                while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
+                  if (refNode == childVal) {
+                    return false;
+                  }
+                  refNode = refNode.getParent();
+                }
+              }
+            }
+            ret = true;
+            break; // Only consider the first object literal assignment
+          }
+        }
+      }
+
+      if (definedProps == null) {
+        // No object literal assignment found
+        return false;
+      }
+
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
+        // Ignore indirect references like x.y (except x.y() as call target)
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
+
           // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
             return false;
           }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+          // Only allow GETPROP access if the property is defined in the object literal
+          Node propNode = parent.getLastChild();
+          if (propNode.isString() || propNode.isNumber() || propNode.isStringKey()) {
+            String prop = propNode.getString();
+            if (!definedProps.contains(prop)) {
+              return false;
+            }
+          } else {
+            // In case propNode is not a string, be conservative
+            return false;
+          }
           continue;
         }
 
-        // Only rewrite VAR declarations or simple assignment statements
+        // Only allow simple VAR or assignment to object literal
         if (!isVarOrAssignExprLhs(name)) {
           return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
-        // We're looking for object literal assignments only.
+        // Must assign to an object literal
         if (!val.isObjectLit()) {
           return false;
         }
-
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
-          }
-
-
-          Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
-          for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
-                return false;
-              }
-              refNode = refNode.getParent();
-            }
-          }
-        }
-
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
       }
       return ret;
     }
\ No newline at end of file
