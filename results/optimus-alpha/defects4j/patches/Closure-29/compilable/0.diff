diff --git a/tmp/495c26d2-28a8-4dbe-9673-3cc7735460b7_buggy.java b/tmp/59931646-14f7-4148-b972-25c5a2a56e89_fixed.java
index be9c8a3..755a4d3 100644
--- a/tmp/495c26d2-28a8-4dbe-9673-3cc7735460b7_buggy.java
+++ b/tmp/59931646-14f7-4148-b972-25c5a2a56e89_fixed.java
@@ -1,94 +1,121 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+
+          // Do not inline if this is a call like x.y(), since 'this'
+          // may be referenced by y.
+          if (gramps.isCall() && gramps.getFirstChild() == parent) {
+            return false;
+          }
+
+          // Only allow GETPROP if it's an access to a property defined in
+          // an object literal *assigned to x somewhere in this scope*.
+
+          // Find the assigned object literal for 'x' in this scope, and see if
+          // it actually defines the accessed property.
+          boolean propertyOk = false;
+          String prop = parent.getLastChild().getString();
+
+          // Go through all assignments to x and see if one is an object literal
+          for (Reference assignRef : refs) {
+            Node assignName = assignRef.getNode();
+            Node assignParent = assignRef.getParent();
+            Node assignGrandparent = assignRef.getGrandparent();
+            if (!isVarOrAssignExprLhs(assignName))
+              continue;
+            Node assignVal = assignRef.getAssignedValue();
+            if (assignVal != null && assignVal.isObjectLit()) {
+              for (Node child = assignVal.getFirstChild(); child != null; child = child.getNext()) {
+                if (child.isGetterDef() || child.isSetterDef()) {
+                  continue; // skip, as these are unsupported elsewhere
+                }
+                if (prop.equals(child.getString())) {
+                  propertyOk = true;
+                  break;
+                }
+              }
+            }
+            if (propertyOk)
+              break;
+          }
+
+          if (!propertyOk) {
+            // The property is not in any known assigned object literal.
             return false;
           }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
           return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
         // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
         // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
           if (child.isGetterDef() ||
               child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
 
-
           Node childVal = child.getFirstChild();
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments
           // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
             while (!NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
                 // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
 
-
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
         ret = true;
       }
       return ret;
     }
\ No newline at end of file
