diff --git a/tmp/c57e3100-653d-45bc-9647-f9f524dc51c7_buggy.java b/tmp/dc529ff0-77cc-440e-a7a5-87223995795d_fixed.java
index 03b03d7..fa06669 100644
--- a/tmp/c57e3100-653d-45bc-9647-f9f524dc51c7_buggy.java
+++ b/tmp/dc529ff0-77cc-440e-a7a5-87223995795d_fixed.java
@@ -1,25 +1,46 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        int offsetBefore = getOffset(instantBefore);
+        int offsetAfter = getOffset(instantAfter);
+
+        if (offsetBefore == offsetAfter) {
+            return instant;  // not an overlap (no offset change)
         }
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        int offsetInstant = getOffset(instant);
+
+        // Find local time for this instant
+        long local = instant + offsetInstant;
+
+        // Try both possible UTC instants for this local time
+        long earlierInstant = local - Math.min(offsetBefore, offsetAfter);
+        long laterInstant = local - Math.max(offsetBefore, offsetAfter);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Select the one with the correct local time and offset (and valid)
+        if (earlierOrLater) {
+            // Later offset
+            if (getOffset(laterInstant) != Math.max(offsetBefore, offsetAfter) 
+                    || convertUTCToLocal(laterInstant) != local) {
+                // Occasionally due to DST transitions, this can be reversed
+                // so fallback to existing instant if not found
+                return instant;
+            }
+            return laterInstant;
+        } else {
+            // Earlier offset
+            if (getOffset(earlierInstant) != Math.min(offsetBefore, offsetAfter)
+                    || convertUTCToLocal(earlierInstant) != local) {
+                return instant;
+            }
+            return earlierInstant;
+        }
     }
\ No newline at end of file
