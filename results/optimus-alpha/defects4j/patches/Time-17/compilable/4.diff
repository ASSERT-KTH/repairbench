diff --git a/tmp/185d308f-663e-4b3e-a05d-4934ac0b389b_buggy.java b/tmp/154cbcd6-2391-4b76-a3ff-504b1cc2eaad_fixed.java
index 03b03d7..2fb351e 100644
--- a/tmp/185d308f-663e-4b3e-a05d-4934ac0b389b_buggy.java
+++ b/tmp/154cbcd6-2391-4b76-a3ff-504b1cc2eaad_fixed.java
@@ -1,25 +1,46 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        int offsetBefore = getOffset(instantBefore);
+        int offsetAfter = getOffset(instantAfter);
+        int offsetInstant = getOffset(instant);
+
+        if (offsetBefore == offsetAfter && offsetInstant == offsetBefore) {
+            // No overlap, just return as is
+            return instant;
+        }
+
+        // work out range of local times that have overlap
+        long localInstant = instant + offsetInstant;
+        int earlierOffset;
+        int laterOffset;
+        if (offsetBefore > offsetAfter) {
+            // Fall back, overlapping local times, earlier is after, later is before
+            earlierOffset = offsetAfter;
+            laterOffset = offsetBefore;
+        } else {
+            // Spring forward, should never overlap, but just in case
+            earlierOffset = offsetBefore;
+            laterOffset = offsetAfter;
         }
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long earlierInstant = localInstant - earlierOffset;
+        long laterInstant = localInstant - laterOffset;
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Choose preferred instant in the overlap
+        if (instant >= earlierInstant && instant < laterInstant) {
+            // In the overlap range
+            return earlierOrLater ? laterInstant : earlierInstant;
+        } else {
+            // Not in overlap, just return as is
+            return instant;
+        }
     }
\ No newline at end of file
