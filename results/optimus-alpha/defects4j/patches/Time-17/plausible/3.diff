diff --git a/tmp/07cfab06-db1e-4249-9eb9-da34e0909122_buggy.java b/tmp/7a5a225b-1065-4d29-910a-2ff8c499cd9a_fixed.java
index 03b03d7..b8bba0a 100644
--- a/tmp/07cfab06-db1e-4249-9eb9-da34e0909122_buggy.java
+++ b/tmp/7a5a225b-1065-4d29-910a-2ff8c499cd9a_fixed.java
@@ -1,25 +1,34 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
+    // Evaluate 3 hours before and after to detect an overlap situation
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        return instant; // Not an overlap (not ambiguous)
     }
 
-        // work out range of instants that have duplicate local times
+    // In an overlap
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long earlierInstant = convertLocalToUTC(local, false, instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    long laterInstant = convertLocalToUTC(local, false, instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    long diffEarlier = Math.abs(instant - earlierInstant);
+    long diffLater = Math.abs(instant - laterInstant);
+
+    // Only switch if the instant isn't already at the requested offset
+    // If already at earlier/later, return as is, else return alternative
+    if (diffEarlier < diffLater) {
+        return earlierOrLater ? laterInstant : instant;
+    } else if (diffLater < diffEarlier) {
+        return earlierOrLater ? instant : earlierInstant;
+    } else {
+        // Already at both? return as is
+        return instant;
+    }
 }
\ No newline at end of file
