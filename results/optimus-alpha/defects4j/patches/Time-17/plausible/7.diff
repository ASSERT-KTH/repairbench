diff --git a/tmp/0d771f56-f5bc-4112-9585-ae0d401a4ad9_buggy.java b/tmp/1b3cc756-95df-4ee9-b054-82b0b7eb2107_fixed.java
index 03b03d7..f44cb53 100644
--- a/tmp/0d771f56-f5bc-4112-9585-ae0d401a4ad9_buggy.java
+++ b/tmp/1b3cc756-95df-4ee9-b054-82b0b7eb2107_fixed.java
@@ -1,25 +1,47 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
 
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
 
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // Find the two possible UTC instants for this local time.
+        long epochEarlier = convertLocalToUTC(local, false, instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long epochLater = convertLocalToUTC(local, false, instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // If they are the same, we can't do anything (shouldn't happen).
+        if (epochEarlier == epochLater) {
+            return instant;
+        }
+
+        // Decide which is earlier/later
+        long result;
+        if (earlierOrLater) {
+            // Want the later offset
+            result = (epochEarlier > epochLater) ? epochEarlier : epochLater;
+        } else {
+            // Want the earlier offset
+            result = (epochEarlier < epochLater) ? epochEarlier : epochLater;
+        }
+        // If instant is already at the requested offset, just return it
+        if (result == instant) {
+            return instant;
+        }
+        // But only return the alternative if it really maps to the same local millis
+        if (convertUTCToLocal(result) == local) {
+            return result;
+        }
+        return instant;
     }
\ No newline at end of file
