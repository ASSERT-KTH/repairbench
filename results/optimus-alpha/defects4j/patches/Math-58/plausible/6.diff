diff --git a/tmp/4baa80e3-d4ac-42f7-8e79-5fe2d20033a6_buggy.java b/tmp/e8d1f004-357a-4dda-a30a-7b72e2092929_fixed.java
index 3002587..40597ee 100644
--- a/tmp/4baa80e3-d4ac-42f7-8e79-5fe2d20033a6_buggy.java
+++ b/tmp/e8d1f004-357a-4dda-a30a-7b72e2092929_fixed.java
@@ -1,10 +1,40 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        double[] params = fit(new Gaussian.Parametric() {
+            @Override
+            public double value(double x, double... param) {
+                // Force sigma to be positive
+                double[] p = param.clone();
+                if (p[2] < 0) {
+                    p[2] = Math.abs(p[2]);
+                }
+                return super.value(x, p);
+            }
+
+            @Override
+            public double[] gradient(double x, double... param) {
+                // Force sigma to be positive
+                double[] p = param.clone();
+                if (p[2] < 0) {
+                    p[2] = Math.abs(p[2]);
+                }
+                double[] grad = super.gradient(x, p);
+                // If sigma was negative, correct the sign of the gradient wrt sigma
+                if (param[2] < 0) {
+                    grad[2] = -grad[2];
+                }
+                return grad;
+            }
+        }, guess);
+        // Ensure the sigma parameter is always positive before returning
+        if (params[2] < 0) {
+            params[2] = Math.abs(params[2]);
+        }
+        return params;
     }
\ No newline at end of file
